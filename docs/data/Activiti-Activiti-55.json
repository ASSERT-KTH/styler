{
    "project_name": "Activiti-Activiti",
    "error_id": "55",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\nimport java.util.Collection;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/55/GetExecutionVariableInstancesCmd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/55/GetExecutionVariableInstancesCmd.java\nindex e50142c637f..4799c4750e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/55/GetExecutionVariableInstancesCmd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/55/GetExecutionVariableInstancesCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/55/GetExecutionVariableInstancesCmd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/55/GetExecutionVariableInstancesCmd.java\nindex e50142c637f..4799c4750e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/55/GetExecutionVariableInstancesCmd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/55/GetExecutionVariableInstancesCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 45.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 6, indentation should be the same level as line 58.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 6, indentation should be the same level as line 65.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/55/GetExecutionVariableInstancesCmd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/55/GetExecutionVariableInstancesCmd.java\nindex e50142c637f..dc0f43cd093 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/55/GetExecutionVariableInstancesCmd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/55/GetExecutionVariableInstancesCmd.java\n@@ -16,7 +16,6 @@ import java.io.Serializable;\n import java.util.Collection;\n import java.util.Map;\n import java.util.Map.Entry;\n-\n import org.activiti.engine.ActivitiIllegalArgumentException;\n import org.activiti.engine.ActivitiObjectNotFoundException;\n import org.activiti.engine.impl.interceptor.Command;\n@@ -25,60 +24,57 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n import org.activiti.engine.impl.persistence.entity.VariableInstance;\n import org.activiti.engine.runtime.Execution;\n \n+\n public class GetExecutionVariableInstancesCmd implements Command<Map<String, VariableInstance>>, Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-    protected String executionId;\n-    protected Collection<String> variableNames;\n-    protected boolean isLocal;\n+  private static final long serialVersionUID = 1L;\n+  protected String executionId;\n+  protected Collection<String> variableNames;\n+  protected boolean isLocal;\n \n-    public GetExecutionVariableInstancesCmd(String executionId, Collection<String> variableNames, boolean isLocal) {\n-        this.executionId = executionId;\n-        this.variableNames = variableNames;\n-        this.isLocal = isLocal;\n-    }\n+  public GetExecutionVariableInstancesCmd(String executionId, Collection<String> variableNames, boolean isLocal) {\n+    this.executionId = executionId;\n+    this.variableNames = variableNames;\n+    this.isLocal = isLocal;\n+  }\n \n-    @Override\n-    public Map<String, VariableInstance> execute(CommandContext commandContext) {\n+  @Override\n+  public Map<String, VariableInstance> execute(CommandContext commandContext) {\n \n         // Verify existance of execution\n-        if (executionId == null) {\n-            throw new ActivitiIllegalArgumentException(\"executionId is null\");\n-        }\n-\n-        ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(executionId);\n-\n-        if (execution == null) {\n-            throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\", Execution.class);\n-        }\n+    if (executionId == null) {\n+      throw new ActivitiIllegalArgumentException(\"executionId is null\");\n+    }\n \n-        Map<String, VariableInstance> variables = null;\n+    ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(executionId);\n+    if (execution == null) {\n+      throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\",\n+                                                Execution.class);\n+    }\n \n-        if (variableNames == null || variableNames.isEmpty()) {\n+    Map<String, VariableInstance> variables = null;\n+    if (variableNames == null || variableNames.isEmpty()) {\n             // Fetch all\n-            if (isLocal) {\n-                variables = execution.getVariableInstancesLocal();\n-            } else {\n-                variables = execution.getVariableInstances();\n-            }\n-\n-        } else {\n+      if (isLocal) {\n+        variables = execution.getVariableInstancesLocal();\n+      } else {\n+        variables = execution.getVariableInstances();\n+      }\n+    } else {\n             // Fetch specific collection of variables\n-            if (isLocal) {\n-                variables = execution.getVariableInstancesLocal(variableNames, false);\n-            } else {\n-                variables = execution.getVariableInstances(variableNames, false);\n-            }\n-        }\n-\n-        if (variables != null) {\n-            for (Entry<String, VariableInstance> entry : variables.entrySet()) {\n-                if (entry.getValue() != null) {\n-                    entry.getValue().getValue();\n-                }\n-            }\n+      if (isLocal) {\n+        variables = execution.getVariableInstancesLocal(variableNames, false);\n+      } else {\n+        variables = execution.getVariableInstances(variableNames, false);\n+      }\n+    }\n+    if (variables != null) {\n+        for (Entry<String, VariableInstance> entry : variables.entrySet()) {\n+          if (entry.getValue() != null) {\n+            entry.getValue().getValue();\n+          }\n         }\n-\n-        return variables;\n     }\n-}\n+    return variables;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 54
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/55/GetExecutionVariableInstancesCmd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/55/GetExecutionVariableInstancesCmd.java\nindex e50142c637f..4799c4750e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/55/GetExecutionVariableInstancesCmd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/55/GetExecutionVariableInstancesCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/55/GetExecutionVariableInstancesCmd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/55/GetExecutionVariableInstancesCmd.java\nindex e50142c637f..4799c4750e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/55/GetExecutionVariableInstancesCmd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/55/GetExecutionVariableInstancesCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}