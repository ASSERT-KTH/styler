{
    "project_name": "CESNET-perun",
    "error_id": "395",
    "information": {
        "errors": [
            {
                "line": "1459",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\tUtils.checkPerunSession(sess);\n\t\tUtils.notNull(vo, \"vo\");\n\t\t\n\t\t//Authorization\n\t\tif(!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n\t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembersAndTheirSponsors\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/395/MembersManagerEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/395/MembersManagerEntry.java\nindex b75cc2f4809..69e1ebcc032 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/395/MembersManagerEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/395/MembersManagerEntry.java\n@@ -1456,7 +1456,7 @@ public class MembersManagerEntry implements MembersManager {\n \tpublic List<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n \t\tUtils.checkPerunSession(sess);\n \t\tUtils.notNull(vo, \"vo\");\n-\t\t\n+\n \t\t//Authorization\n \t\tif(!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n \t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembersAndTheirSponsors\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/395/MembersManagerEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/395/MembersManagerEntry.java\nindex b75cc2f4809..c306d5b542e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/395/MembersManagerEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/395/MembersManagerEntry.java\n@@ -70,1544 +70,1565 @@ import java.util.Map;\n  */\n public class MembersManagerEntry implements MembersManager {\n \n-\tfinal static Logger log = LoggerFactory.getLogger(MembersManagerEntry.class);\n-\n-\tprivate MembersManagerBl membersManagerBl;\n-\tprivate PerunBl perunBl;\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tpublic MembersManagerEntry(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t\tthis.membersManagerBl = perunBl.getMembersManagerBl();\n-\t}\n-\n-\tpublic MembersManagerEntry() {\n-\t}\n-\n-\t@Override\n-\tpublic void deleteMember(PerunSession sess, Member member) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"deleteMember_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"deleteMember\");\n-\t\t}\n-\n-\n-\t\tgetMembersManagerBl().deleteMember(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteMembers(PerunSession sess, List<Member> members) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tfor (Member member : members) {\n-\t\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tfor (Member member: members) {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"deleteMembers_List<Member>_policy\", member)) {\n-\t\t\t\tthrow new PrivilegeException(sess, \"deleteMembers\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tgetMembersManagerBl().deleteMembers(sess, members);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteAllMembers(PerunSession sess, Vo vo) throws VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"deleteAllMembers_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"deleteAllMembers\");\n-\t\t}\n-\n-\t\tgetMembersManagerBl().deleteAllMembers(sess, vo);\n-\t}\n-\n-\t@Override\n-\tpublic Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException {\n-\t\treturn this.createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, null);\n-\t}\n-\n-\t@Override\n-\tpublic Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(specificUserType, \"specificUserType\");\n-\n-\t\tUtils.notNull(candidate, \"candidate\");\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\tif (specificUserOwners.isEmpty())\n-\t\t\tthrow new InternalErrorException(\"List of specificUserOwners of \" + candidate + \" can't be empty.\");\n-\n-\t\tfor (User u : specificUserOwners) {\n-\t\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, u);\n-\t\t}\n-\n-\t\tif (!specificUserType.equals(SpecificUserType.SERVICE))\n-\t\t\tthrow new InternalErrorException(\"Only service user type is allowed.\");\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\tfor (Group group: groups) {\n-\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createSpecificMember_Vo_Candidate_List<User>_SpecificUserType_List<Group>_policy\", vo, group)) {\n-\t\t\t\t\tthrow new PrivilegeException(\"createSpecificMember\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createSpecificMember_Vo_Candidate_List<User>_SpecificUserType_List<Group>_policy\", vo)) {\n-\t\t\t\tthrow new PrivilegeException(\"createSpecificMember\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().createServiceMember(sess, vo, candidate, specificUserOwners, groups);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\treturn this.createMember(sess, vo, candidate, new ArrayList<>());\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(candidate, \"candidate\");\n-\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\tfor (Group group: groups) {\n-\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_Candidate_List<Group>_policy\", vo, group)) {\n-\t\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_Candidate_List<Group>_policy\", vo)) {\n-\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().createMember(sess, vo, candidate, groups);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\treturn this.createMember(sess, vo, extSourceName, extSourceType, login, candidate, null);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tUtils.notNull(extSourceName, \"extSourceName\");\n-\t\tUtils.notNull(extSourceType, \"extSourceType\");\n-\t\tUtils.notNull(login, \"login\");\n-\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\tfor (Group group: groups) {\n-\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_String_Candidate_List<Group>_policy\", vo, group)) {\n-\t\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_String_Candidate_List<Group>_policy\", vo)) {\n-\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().createMember(sess, vo, extSourceName, extSourceType, login, candidate, groups);\n-\t}\n-\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\treturn this.createMember(sess, vo, extSourceName, extSourceType, extSourceLoa, login, candidate, null);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tUtils.notNull(extSourceName, \"extSourceName\");\n-\t\tUtils.notNull(extSourceType, \"extSourceType\");\n-\t\tUtils.notNull(login, \"login\");\n-\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\t// Authorization\n-\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\tfor (Group group: groups) {\n-\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_int_String_Candidate_List<Group>_policy\", vo, group)) {\n-\t\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_int_String_Candidate_List<Group>_policy\", vo)) {\n-\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().createMember(sess, vo, extSourceName, extSourceType, extSourceLoa, login, candidate, groups);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, User user) throws AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\treturn this.createMember(sess, vo, user, new ArrayList<>());\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where user \" + user + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\tfor (Group group: groups) {\n-\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_User_List<Group>_policy\", vo, group, user)) {\n-\t\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_User_List<Group>_policy\", vo, user)) {\n-\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().createMember(sess, vo, user, groups);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException {\n-\t\treturn this.createMember(sess, vo, extSource, login, new ArrayList<>());\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\t\tgetPerunBl().getExtSourcesManagerBl().checkExtSourceExists(sess, extSource);\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where user with login \" + login + \" from ExtSource \" + extSource + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", Arrays.asList(vo, extSource))) {\n-\t\t\t//also group admin of all affected groups is ok\n-\t\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\t\tfor (Group group: groups) {\n-\t\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", group)) {\n-\t\t\t\t\t\tthrow new PrivilegeException(sess, \"createMember - from login and extSource\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//ExtSource has to be assigned to at least one of the groups\n-\t\t\t\tboolean groupContainsExtSource = groups.stream()\n-\t\t\t\t\t.map(group -> getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group))\n-\t\t\t\t\t.anyMatch(extSources -> extSources.contains(extSource));\n-\t\t\t\tif (!groupContainsExtSource) {\n-\t\t\t\t\tthrow new PrivilegeException(sess, \"createMember - from login and extSource\");\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new PrivilegeException(sess, \"createMember - from login and extSource\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// we run async validation\n-\t\tMember member = getMembersManagerBl().createMember(sess, vo, extSource, login, groups);\n-\t\tgetMembersManagerBl().validateMemberAsync(sess, member);\n-\t\treturn member;\n-\t}\n-\n-\t@Override\n-\tpublic Member getMemberByUserExtSource(PerunSession sess, Vo vo, UserExtSource uea) throws VoNotExistsException, MemberNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMemberByUserExtSource_Vo_UserExtSource_policy\", Arrays.asList(vo, uea))) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberByUserExtSource\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMemberByUserExtSource(sess, vo, uea);\n-\t}\n-\n-\t@Override\n-\tpublic Member getMemberById(PerunSession sess, int id) throws MemberNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tMember member = getMembersManagerBl().getMemberById(sess, id);\n-\n-\t\t//  Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMemberById_int_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberById\");\n-\t\t}\n-\n-\t\treturn member;\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> getMembersByIds(PerunSession sess, List<Integer> ids) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembersByIds_List<Integer>_policy\")) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembersByIds\");\n-\t\t}\n-\n-\t\tList<Member> members = getMembersManagerBl().getMembersByIds(sess, ids);\n-\t\tmembers.removeIf(member -> !AuthzResolver.authorizedInternal(sess, \"filter-getMembersByIds_List<Integer>_policy\", member));\n-\n-\t\treturn members;\n-\t}\n-\n-\t@Override\n-\tpublic Member getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMemberByUser_Vo_User_policy\", Arrays.asList(vo, user))) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberByUser\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMemberByUser(sess, vo, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> getMembersByUser(PerunSession sess, User user) throws PrivilegeException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+    final static Logger log = LoggerFactory.getLogger(MembersManagerEntry.class);\n+\n+    private MembersManagerBl membersManagerBl;\n+    private PerunBl perunBl;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public MembersManagerEntry(PerunBl perunBl) {\n+        this.perunBl = perunBl;\n+        this.membersManagerBl = perunBl.getMembersManagerBl();\n+    }\n+\n+    public MembersManagerEntry() {\n+    }\n+\n+    @Override\n+    public void deleteMember(PerunSession sess, Member member) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n+        Utils.checkPerunSession(sess);\n+\n+        getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"deleteMember_Member_policy\", member)) {\n+            throw new PrivilegeException(sess, \"deleteMember\");\n+        }\n+\n+\n+        getMembersManagerBl().deleteMember(sess, member);\n+    }\n+\n+    @Override\n+    public void deleteMembers(PerunSession sess, List<Member> members) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n+        Utils.checkPerunSession(sess);\n+\n+        for (Member member : members) {\n+            getMembersManagerBl().checkMemberExists(sess, member);\n+        }\n+\n+        // Authorization\n+        for (Member member : members) {\n+            if (!AuthzResolver.authorizedInternal(sess, \"deleteMembers_List<Member>_policy\", member)) {\n+                throw new PrivilegeException(sess, \"deleteMembers\");\n+            }\n+        }\n+\n+        getMembersManagerBl().deleteMembers(sess, members);\n+    }\n+\n+    @Override\n+    public void deleteAllMembers(PerunSession sess, Vo vo) throws VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n+        Utils.checkPerunSession(sess);\n+\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"deleteAllMembers_Vo_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"deleteAllMembers\");\n+        }\n+\n+        getMembersManagerBl().deleteAllMembers(sess, vo);\n+    }\n+\n+    @Override\n+    public Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException {\n+        return this.createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, null);\n+    }\n+\n+    @Override\n+    public Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(specificUserType, \"specificUserType\");\n+\n+        Utils.notNull(candidate, \"candidate\");\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        if (specificUserOwners.isEmpty()) {\n+            throw new InternalErrorException(\"List of specificUserOwners of \" + candidate + \" can't be empty.\");\n+        }\n+\n+        for (User u : specificUserOwners) {\n+            getPerunBl().getUsersManagerBl().checkUserExists(sess, u);\n+        }\n+\n+        if (!specificUserType.equals(SpecificUserType.SERVICE)) {\n+            throw new InternalErrorException(\"Only service user type is allowed.\");\n+        }\n+\n+        // if any group is not from the vo, throw an exception\n+        if (groups != null) {\n+            for (Group group : groups) {\n+                perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+                if (group.getVoId() != vo.getId()) {\n+                    throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n+                }\n+            }\n+        }\n+\n+        // Authorization\n+        if (groups != null && !groups.isEmpty()) {\n+            for (Group group : groups) {\n+                if (!AuthzResolver.authorizedInternal(sess, \"createSpecificMember_Vo_Candidate_List<User>_SpecificUserType_List<Group>_policy\", vo, group)) {\n+                    throw new PrivilegeException(\"createSpecificMember\");\n+                }\n+            }\n+        } else {\n+            if (!AuthzResolver.authorizedInternal(sess, \"createSpecificMember_Vo_Candidate_List<User>_SpecificUserType_List<Group>_policy\", vo)) {\n+                throw new PrivilegeException(\"createSpecificMember\");\n+            }\n+        }\n+\n+        return getMembersManagerBl().createServiceMember(sess, vo, candidate, specificUserOwners, groups);\n+    }\n+\n+    @Override\n+    public Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+        Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+        Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+\n+        return this.createMember(sess, vo, candidate, new ArrayList<>());\n+    }\n+\n+    @Override\n+    public Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(candidate, \"candidate\");\n+\n+        Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+        Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        // if any group is not from the vo, throw an exception\n+        if (groups != null) {\n+            for (Group group : groups) {\n+                perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+                if (group.getVoId() != vo.getId()) {\n+                    throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n+                }\n+            }\n+        }\n+\n+        // Authorization\n+        if (groups != null && !groups.isEmpty()) {\n+            for (Group group : groups) {\n+                if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_Candidate_List<Group>_policy\", vo, group)) {\n+                    throw new PrivilegeException(\"createMember\");\n+                }\n+            }\n+        } else {\n+            if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_Candidate_List<Group>_policy\", vo)) {\n+                throw new PrivilegeException(\"createMember\");\n+            }\n+        }\n+\n+        return getMembersManagerBl().createMember(sess, vo, candidate, groups);\n+    }\n+\n+    @Override\n+    public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+        Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+        Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+\n+        return this.createMember(sess, vo, extSourceName, extSourceType, login, candidate, null);\n+    }\n+\n+    @Override\n+    public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+\n+        Utils.notNull(extSourceName, \"extSourceName\");\n+        Utils.notNull(extSourceType, \"extSourceType\");\n+        Utils.notNull(login, \"login\");\n+\n+        Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+        Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+\n+        // if any group is not from the vo, throw an exception\n+        if (groups != null) {\n+            for (Group group : groups) {\n+                perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+                if (group.getVoId() != vo.getId()) {\n+                    throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n+                }\n+            }\n+        }\n+\n+        // Authorization\n+        if (groups != null && !groups.isEmpty()) {\n+            for (Group group : groups) {\n+                if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_String_Candidate_List<Group>_policy\", vo, group)) {\n+                    throw new PrivilegeException(\"createMember\");\n+                }\n+            }\n+        } else {\n+            if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_String_Candidate_List<Group>_policy\", vo)) {\n+                throw new PrivilegeException(\"createMember\");\n+            }\n+        }\n+\n+        return getMembersManagerBl().createMember(sess, vo, extSourceName, extSourceType, login, candidate, groups);\n+    }\n+\n+\n+    @Override\n+    public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+        Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+        Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+\n+        return this.createMember(sess, vo, extSourceName, extSourceType, extSourceLoa, login, candidate, null);\n+    }\n+\n+    @Override\n+    public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+\n+        // if any group is not from the vo, throw an exception\n+        if (groups != null) {\n+            for (Group group : groups) {\n+                perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+                if (group.getVoId() != vo.getId()) {\n+                    throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n+                }\n+            }\n+        }\n+\n+        Utils.notNull(extSourceName, \"extSourceName\");\n+        Utils.notNull(extSourceType, \"extSourceType\");\n+        Utils.notNull(login, \"login\");\n+\n+        Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+        Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+\n+        // Authorization\n+        if (groups != null && !groups.isEmpty()) {\n+            for (Group group : groups) {\n+                if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_int_String_Candidate_List<Group>_policy\", vo, group)) {\n+                    throw new PrivilegeException(\"createMember\");\n+                }\n+            }\n+        } else {\n+            if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_int_String_Candidate_List<Group>_policy\", vo)) {\n+                throw new PrivilegeException(\"createMember\");\n+            }\n+        }\n+\n+        return getMembersManagerBl().createMember(sess, vo, extSourceName, extSourceType, extSourceLoa, login, candidate, groups);\n+    }\n+\n+    @Override\n+    public Member createMember(PerunSession sess, Vo vo, User user) throws AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+        return this.createMember(sess, vo, user, new ArrayList<>());\n+    }\n+\n+    @Override\n+    public Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups)\n+            throws AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+\n+        getPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        // if any group is not from the vo, throw an exception\n+        if (groups != null) {\n+            for (Group group : groups) {\n+                perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+                if (group.getVoId() != vo.getId()) {\n+                    throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where user \" + user + \" should be added.\");\n+                }\n+            }\n+        }\n+\n+        // Authorization\n+        if (groups != null && !groups.isEmpty()) {\n+            for (Group group : groups) {\n+                if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_User_List<Group>_policy\", vo, group, user)) {\n+                    throw new PrivilegeException(\"createMember\");\n+                }\n+            }\n+        } else {\n+            if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_User_List<Group>_policy\", vo, user)) {\n+                throw new PrivilegeException(\"createMember\");\n+            }\n+        }\n+\n+        return getMembersManagerBl().createMember(sess, vo, user, groups);\n+    }\n+\n+    @Override\n+    public Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException {\n+        return this.createMember(sess, vo, extSource, login, new ArrayList<>());\n+    }\n+\n+    @Override\n+    public Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups)\n+            throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        getPerunBl().getExtSourcesManagerBl().checkExtSourceExists(sess, extSource);\n+\n+        // if any group is not from the vo, throw an exception\n+        if (groups != null) {\n+            for (Group group : groups) {\n+                perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+                if (group.getVoId() != vo.getId()) {\n+                    throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where user with login \" + login + \" from ExtSource \" + extSource + \" should be added.\");\n+                }\n+            }\n+        }\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", Arrays.asList(vo, extSource))) {\n+            //also group admin of all affected groups is ok\n+            if (groups != null && !groups.isEmpty()) {\n+                for (Group group : groups) {\n+                    if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", group)) {\n+                        throw new PrivilegeException(sess, \"createMember - from login and extSource\");\n+                    }\n+                }\n+                //ExtSource has to be assigned to at least one of the groups\n+                boolean groupContainsExtSource = groups.stream()\n+                        .map(group -> getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group))\n+                        .anyMatch(extSources -> extSources.contains(extSource));\n+                if (!groupContainsExtSource) {\n+                    throw new PrivilegeException(sess, \"createMember - from login and extSource\");\n+                }\n+            } else {\n+                throw new PrivilegeException(sess, \"createMember - from login and extSource\");\n+            }\n+        }\n+\n+        // we run async validation\n+        Member member = getMembersManagerBl().createMember(sess, vo, extSource, login, groups);\n+        getMembersManagerBl().validateMemberAsync(sess, member);\n+        return member;\n+    }\n+\n+    @Override\n+    public Member getMemberByUserExtSource(PerunSession sess, Vo vo, UserExtSource uea) throws VoNotExistsException, MemberNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getMemberByUserExtSource_Vo_UserExtSource_policy\", Arrays.asList(vo, uea))) {\n+            throw new PrivilegeException(sess, \"getMemberByUserExtSource\");\n+        }\n+\n+        return getMembersManagerBl().getMemberByUserExtSource(sess, vo, uea);\n+    }\n+\n+    @Override\n+    public Member getMemberById(PerunSession sess, int id) throws MemberNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+\n+        Member member = getMembersManagerBl().getMemberById(sess, id);\n+\n+        //  Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getMemberById_int_policy\", member)) {\n+            throw new PrivilegeException(sess, \"getMemberById\");\n+        }\n+\n+        return member;\n+    }\n+\n+    @Override\n+    public List<Member> getMembersByIds(PerunSession sess, List<Integer> ids) throws PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getMembersByIds_List<Integer>_policy\")) {\n+            throw new PrivilegeException(sess, \"getMembersByIds\");\n+        }\n+\n+        List<Member> members = getMembersManagerBl().getMembersByIds(sess, ids);\n+        members.removeIf(member -> !AuthzResolver.authorizedInternal(sess, \"filter-getMembersByIds_List<Integer>_policy\", member));\n+\n+        return members;\n+    }\n+\n+    @Override\n+    public Member getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException {\n+        Utils.checkPerunSession(sess);\n+\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        getPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getMemberByUser_Vo_User_policy\", Arrays.asList(vo, user))) {\n+            throw new PrivilegeException(sess, \"getMemberByUser\");\n+        }\n+\n+        return getMembersManagerBl().getMemberByUser(sess, vo, user);\n+    }\n+\n+    @Override\n+    public List<Member> getMembersByUser(PerunSession sess, User user) throws PrivilegeException, UserNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+        getPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getMembersByUser_User_policy\", user)) {\n+            throw new PrivilegeException(sess, \"getMembersByUser\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembersByUser_User_policy\", user)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembersByUser\");\n-\t\t}\n+        return getMembersManagerBl().getMembersByUser(sess, user);\n+    }\n \n-\t\treturn getMembersManagerBl().getMembersByUser(sess, user);\n-\t}\n+    @Override\n+    public List<Member> getMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<Member> getMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getMembers_Vo_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembers_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembers\");\n-\t\t}\n+        return getMembersManagerBl().getMembers(sess, vo);\n+    }\n \n-\t\treturn getMembersManagerBl().getMembers(sess, vo);\n-\t}\n+    @Override\n+    public List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getMembers_Vo_Status_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembers_Vo_Status_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembers\");\n-\t\t}\n+        return getMembersManagerBl().getMembers(sess, vo, status);\n+    }\n \n-\t\treturn getMembersManagerBl().getMembers(sess, vo, status);\n-\t}\n+    @Override\n+    public RichMember getRichMemberById(PerunSession sess, int id) throws PrivilegeException, MemberNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic RichMember getRichMemberById(PerunSession sess, int id) throws PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        Member member = getPerunBl().getMembersManagerBl().getMemberById(sess, id);\n \n-\t\tMember member = getPerunBl().getMembersManagerBl().getMemberById(sess, id);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMemberById_int_policy\", member)) {\n+            throw new PrivilegeException(sess, \"getRichMemberById\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMemberById_int_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMemberById\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().getRichMember(sess, member);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().getRichMember(sess, member);\n-\t}\n+    @Override\n+    public RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n \n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMemberWithAttributes_Member_policy\", member)) {\n+            throw new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMemberWithAttributes_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMemberWithAttributes(sess, member));\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMemberWithAttributes(sess, member));\n-\t}\n+    @Override\n+    public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_List<AttributeDefinition>_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_List<AttributeDefinition>_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo, attrsDef), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo, attrsDef), null, true);\n-\t}\n+    @Override\n+    public List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_List<String>_Group_policy\", group)) {\n+            throw new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_List<String>_Group_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, allowedStatuses, group), group, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, allowedStatuses, group), group, true);\n-\t}\n+    @Override\n+    public List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributesByNames_Vo_List<String>_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getRichMembersWithAttributesByNames\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributesByNames_Vo_List<String>_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembersWithAttributesByNames\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributesByNames(sess, vo, attrsNames), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributesByNames(sess, vo, attrsNames), null, true);\n-\t}\n+    @Override\n+    public List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Vo_List<String>_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getCompleteRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Vo_List<String>_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getCompleteRichMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, vo, attrsNames), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, vo, attrsNames), null, true);\n-\t}\n+    @Override\n+    public List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Vo_List<String>_List<String>_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getCompleteRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Vo_List<String>_List<String>_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getCompleteRichMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, vo, attrsNames, allowedStatuses), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, vo, attrsNames, allowedStatuses), null, true);\n-\t}\n+    @Override\n+    public List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws PrivilegeException, ParentGroupNotExistsException, GroupNotExistsException, AttributeNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws PrivilegeException, ParentGroupNotExistsException, GroupNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_List<String>_boolean_policy\", group)) {\n+            throw new PrivilegeException(sess, \"getCompleteRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_List<String>_boolean_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getCompleteRichMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, group, attrsNames, lookingInParentGroup), group, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, group, attrsNames, lookingInParentGroup), group, true);\n-\t}\n+    @Override\n+    public List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+        perunBl.getResourcesManagerBl().checkResourceExists(sess, resource);\n \n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tperunBl.getResourcesManagerBl().checkResourceExists(sess, resource);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_Resource_List<String>_List<String>_policy\", Arrays.asList(group, resource))) {\n+            throw new PrivilegeException(sess, \"getCompleteRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_Resource_List<String>_List<String>_policy\", Arrays.asList(group, resource)))\n-\t\t\tthrow new PrivilegeException(sess, \"getCompleteRichMembers\");\n+        //TODO: method filterOnlyAllowedAttributes can work only with user and member attributes\n+        //return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, group, resource, attrsNames, allowedStatuses), true);\n+        return getMembersManagerBl().getCompleteRichMembers(sess, group, resource, attrsNames, allowedStatuses);\n+    }\n \n-\t\t//TODO: method filterOnlyAllowedAttributes can work only with user and member attributes\n-\t\t//return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, group, resource, attrsNames, allowedStatuses), true);\n-\t\treturn getMembersManagerBl().getCompleteRichMembers(sess, group, resource, attrsNames, allowedStatuses);\n-\t}\n+    @Override\n+    public List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws PrivilegeException, ParentGroupNotExistsException, GroupNotExistsException, AttributeNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws PrivilegeException, ParentGroupNotExistsException, GroupNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_List<String>_List<String>_boolean_policy\", group)) {\n+            throw new PrivilegeException(sess, \"getCompleteRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_List<String>_List<String>_boolean_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getCompleteRichMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, group, attrsNames, allowedStatuses, lookingInParentGroup), group, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, group, attrsNames, allowedStatuses, lookingInParentGroup), group, true);\n-\t}\n+    @Override\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString, boolean onlySponsored) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString, boolean onlySponsored) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Vo_List<String>_String_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"findCompleteRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Vo_List<String>_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findCompleteRichMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, vo, attrsNames, searchString, onlySponsored), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, vo, attrsNames, searchString, onlySponsored), null, true);\n-\t}\n+    @Override\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Vo_List<String>_List<String>_String_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"findCompleteRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Vo_List<String>_List<String>_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findCompleteRichMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, vo, attrsNames, allowedStatuses, searchString), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, vo, attrsNames, allowedStatuses, searchString), null, true);\n-\t}\n+    @Override\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_List<String>_List<String>_String_policy\")) {\n+            throw new PrivilegeException(sess, \"findCompleteRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_List<String>_List<String>_String_policy\")) {\n-\t\t\tthrow new PrivilegeException(sess, \"findCompleteRichMembers\");\n-\t\t}\n+        List<RichMember> richMembers = getMembersManagerBl().findCompleteRichMembers(sess, attrsNames, allowedStatuses, searchString);\n \n-\t\tList<RichMember> richMembers = getMembersManagerBl().findCompleteRichMembers(sess, attrsNames, allowedStatuses, searchString);\n+        Iterator<RichMember> richMemberIter = richMembers.iterator();\n+        while (richMemberIter.hasNext()) {\n+            RichMember richMember = richMemberIter.next();\n \n-\t\tIterator<RichMember> richMemberIter = richMembers.iterator();\n-\t\twhile (richMemberIter.hasNext()) {\n-\t\t\tRichMember richMember = richMemberIter.next();\n+            if (AuthzResolver.authorizedInternal(sess, \"filter-findCompleteRichMembers_List<String>_List<String>_String_policy\", richMember)) {\n+                continue;\n+            }\n \n-\t\t\tif (AuthzResolver.authorizedInternal(sess, \"filter-findCompleteRichMembers_List<String>_List<String>_String_policy\", richMember))\n-\t\t\t\tcontinue;\n+            List<Resource> membersResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, richMember);\n+            boolean found = false;\n+            for (Resource resource : membersResources) {\n+                if (AuthzResolver.authorizedInternal(sess, \"filter-findCompleteRichMembers_List<String>_List<String>_String_policy\", resource)) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (found) {\n+                continue;\n+            }\n \n-\t\t\tList<Resource> membersResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, richMember);\n-\t\t\tboolean found = false;\n-\t\t\tfor (Resource resource : membersResources) {\n-\t\t\t\tif (AuthzResolver.authorizedInternal(sess, \"filter-findCompleteRichMembers_List<String>_List<String>_String_policy\", resource)) {\n-\t\t\t\t\tfound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (found) continue;\n+            richMemberIter.remove();\n+        }\n \n-\t\t\trichMemberIter.remove();\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, richMembers, null, false);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, richMembers, null, false);\n-\t}\n+    @Override\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Group_List<String>_String_boolean_policy\", group)) {\n+            throw new PrivilegeException(sess, \"findCompleteRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Group_List<String>_String_boolean_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findCompleteRichMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, group, attrsNames, searchString, lookingInParentGroup), group, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, group, attrsNames, searchString, lookingInParentGroup), group, true);\n-\t}\n+    @Override\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Group_List<String>_List<String>_String_boolean_policy\", group)) {\n+            throw new PrivilegeException(sess, \"findCompleteRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Group_List<String>_List<String>_String_boolean_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findCompleteRichMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, group, attrsNames, allowedStatuses, searchString, lookingInParentGroup), group, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, group, attrsNames, allowedStatuses, searchString, lookingInParentGroup), group, true);\n-\t}\n+    @Override\n+    public List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributesByNames_Group_List<String>_policy\", group)) {\n+            throw new PrivilegeException(sess, \"getRichMembersWithAttributesByNames\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributesByNames_Group_List<String>_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembersWithAttributesByNames\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributesByNames(sess, group, attrsNames), group, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributesByNames(sess, group, attrsNames), group, true);\n-\t}\n+    @Override\n+    public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Group_List<AttributeDefinition>_policy\", group)) {\n+            throw new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Group_List<AttributeDefinition>_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, group, attrsDef), group, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, group, attrsDef), group, true);\n-\t}\n+    @Override\n+    public List<RichMember> getRichMembers(PerunSession sess, Group group) throws PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Group group) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Group_policy\", group)) {\n+            throw new PrivilegeException(sess, \"getRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Group_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, group), group, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, group), group, true);\n-\t}\n+    @Override\n+    public List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Vo_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, vo), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, vo), null, true);\n-\t}\n+    @Override\n+    public List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Vo_Status_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getRichMembers\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Vo_Status_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembers\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, vo, status), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, vo, status), null, true);\n-\t}\n+    @Override\n+    public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo), null, true);\n-\t}\n+    @Override\n+    public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_Status_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_Status_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo, status), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo, status), null, true);\n-\t}\n+    @Override\n+    public int getMembersCount(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t@Override\n-\tpublic int getMembersCount(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getMembersCount_Vo_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getMembersCount\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembersCount_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembersCount\");\n-\t\t}\n+        return getMembersManagerBl().getMembersCount(sess, vo);\n+    }\n \n-\t\treturn getMembersManagerBl().getMembersCount(sess, vo);\n-\t}\n+    @Override\n+    public int getMembersCount(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t@Override\n-\tpublic int getMembersCount(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getMembersCount_Vo_Status_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getMembersCount\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembersCount_Vo_Status_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembersCount\");\n-\t\t}\n+        return getMembersManagerBl().getMembersCount(sess, vo, status);\n+    }\n \n-\t\treturn getMembersManagerBl().getMembersCount(sess, vo, status);\n-\t}\n+    @Override\n+    public Vo getMemberVo(PerunSession sess, Member member) throws MemberNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic Vo getMemberVo(PerunSession sess, Member member) throws MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        //TODO Authorization\n \n-\t\t//TODO Authorization\n+        getMembersManagerBl().checkMemberExists(sess, member);\n \n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n+        return getMembersManagerBl().getMemberVo(sess, member);\n+    }\n \n-\t\treturn getMembersManagerBl().getMemberVo(sess, member);\n-\t}\n+    @Override\n+    public List<Member> findMembersByName(PerunSession sess, String searchString) throws PrivilegeException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<Member> findMembersByName(PerunSession sess, String searchString) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findMembersByName_String_policy\", Collections.emptyList())) {\n+            throw new PrivilegeException(sess, \"findMembersByName\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findMembersByName_String_policy\", Collections.emptyList())) {\n-\t\t\tthrow new PrivilegeException(sess, \"findMembersByName\");\n-\t\t}\n+        return getMembersManagerBl().findMembersByName(sess, searchString);\n+    }\n \n-\t\treturn getMembersManagerBl().findMembersByName(sess, searchString);\n-\t}\n+    @Override\n+    public List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findMembersByNameInVo_Vo_String_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"findMembersByNameInVo\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findMembersByNameInVo_Vo_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findMembersByNameInVo\");\n-\t\t}\n+        return getMembersManagerBl().findMembersByNameInVo(sess, vo, searchString);\n+    }\n \n-\t\treturn getMembersManagerBl().findMembersByNameInVo(sess, vo, searchString);\n-\t}\n+    @Override\n+    public List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findMembersInVo_Vo_String_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"findMembersInVo\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findMembersInVo_Vo_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findMembersInVo\");\n-\t\t}\n+        return getMembersManagerBl().findMembersInVo(sess, vo, searchString);\n+    }\n \n-\t\treturn getMembersManagerBl().findMembersInVo(sess, vo, searchString);\n-\t}\n+    @Override\n+    public List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t@Override\n-\tpublic List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findMembersInGroup_Group_String_policy\", group)) {\n+            throw new PrivilegeException(sess, \"findMembersInGroup\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findMembersInGroup_Group_String_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findMembersInGroup\");\n-\t\t}\n+        return getMembersManagerBl().findMembersInGroup(sess, group, searchString);\n+    }\n \n-\t\treturn getMembersManagerBl().findMembersInGroup(sess, group, searchString);\n-\t}\n+    @Override\n+    public List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t@Override\n-\tpublic List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInGroup_Group_String_policy\", group)) {\n+            throw new PrivilegeException(sess, \"findRichMembersInGroup\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInGroup_Group_String_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findRichMembersInGroup\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInGroup(sess, group, searchString), group, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInGroup(sess, group, searchString), group, true);\n-\t}\n+    @Override\n+    public List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n+        getPerunBl().getGroupsManagerBl().checkGroupExists(sess, getPerunBl().getGroupsManagerBl().getParentGroup(sess, group));\n \n-\t@Override\n-\tpublic List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, getPerunBl().getGroupsManagerBl().getParentGroup(sess, group));\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findMembersInParentGroup_Group_String_policy\", group)) {\n+            throw new PrivilegeException(sess, \"findMembersInParentGroup\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findMembersInParentGroup_Group_String_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findMembersInParentGroup\");\n-\t\t}\n+        return getMembersManagerBl().findMembersInParentGroup(sess, group, searchString);\n+    }\n \n-\t\treturn getMembersManagerBl().findMembersInParentGroup(sess, group, searchString);\n-\t}\n+    @Override\n+    public List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n \n-\t@Override\n-\tpublic List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInParentGroup_Group_String_policy\", group)) {\n+            throw new PrivilegeException(sess, \"findRichMembersInParentGroup\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInParentGroup_Group_String_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findRichMembersInParentGroup\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInParentGroup(sess, group, searchString), group, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInParentGroup(sess, group, searchString), group, true);\n-\t}\n+    @Override\n+    public List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findRichMembersInVo_Vo_String_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"findRichMembersInVo\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findRichMembersInVo_Vo_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findRichMembersInVo\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersInVo(sess, vo, searchString, false), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersInVo(sess, vo, searchString, false), null, true);\n-\t}\n+    @Override\n+    public List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInVo_Vo_String_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"findRichMembersWithAttributesInVo\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInVo_Vo_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findRichMembersWithAttributesInVo\");\n-\t\t}\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInVo(sess, vo, searchString), null, true);\n+    }\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInVo(sess, vo, searchString), null, true);\n-\t}\n+    @Override\n+    public Member setStatus(PerunSession sess, Member member, Status status) throws PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException {\n+        Utils.checkPerunSession(sess);\n \n-\t@Override\n-\tpublic Member setStatus(PerunSession sess, Member member, Status status) throws PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException {\n-\t\tUtils.checkPerunSession(sess);\n+        getMembersManagerBl().checkMemberExists(sess, member);\n \n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"setStatus_Member_Status_policy\", member)) {\n+            throw new PrivilegeException(sess, \"setStatus\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"setStatus_Member_Status_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"setStatus\");\n-\t\t}\n+        return getMembersManagerBl().setStatus(sess, member, status);\n+    }\n+\n+    @Override\n+    public void suspendMemberTo(PerunSession sess, Member member, Date suspendedTo) throws MemberNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(suspendedTo, \"suspendedTo\");\n+\n+        getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"suspendMemberTo_Member_Date_policy\", member)) {\n+            throw new PrivilegeException(sess, \"suspendMemberTo\");\n+        }\n+\n+        membersManagerBl.suspendMemberTo(sess, member, suspendedTo);\n+    }\n+\n+    @Override\n+    public void unsuspendMember(PerunSession sess, Member member) throws MemberNotExistsException, MemberNotSuspendedException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+\n+        getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"unsuspendMember_Member_policy\", member)) {\n+            throw new PrivilegeException(sess, \"unsuspendMember\");\n+        }\n+\n+        membersManagerBl.unsuspendMember(sess, member);\n+    }\n+\n+    @Override\n+    public Member validateMemberAsync(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"validateMemberAsync_Member_policy\", member)) {\n+            throw new PrivilegeException(sess, \"validateMemberAsync\");\n+        }\n+\n+        return getMembersManagerBl().validateMemberAsync(sess, member);\n+    }\n \n-\t\treturn getMembersManagerBl().setStatus(sess, member, status);\n-\t}\n-\n-\t@Override\n-\tpublic void suspendMemberTo(PerunSession sess, Member member, Date suspendedTo) throws MemberNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(suspendedTo, \"suspendedTo\");\n-\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"suspendMemberTo_Member_Date_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"suspendMemberTo\");\n-\t\t}\n-\n-\t\tmembersManagerBl.suspendMemberTo(sess, member, suspendedTo);\n-\t}\n-\n-\t@Override\n-\tpublic void unsuspendMember(PerunSession sess, Member member) throws MemberNotExistsException, MemberNotSuspendedException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"unsuspendMember_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"unsuspendMember\");\n-\t\t}\n-\n-\t\tmembersManagerBl.unsuspendMember(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic Member validateMemberAsync(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"validateMemberAsync_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"validateMemberAsync\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().validateMemberAsync(sess, member);\n-\t}\n+    @Override\n+    public void extendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException, ExtendMembershipException {\n+        Utils.checkPerunSession(sess);\n+        getMembersManagerBl().checkMemberExists(sess, member);\n \n-\t@Override\n-\tpublic void extendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException, ExtendMembershipException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"extendMembership_Member_policy\", member)) {\n+            throw new PrivilegeException(sess, \"extendMembership\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"extendMembership_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"extendMembership\");\n-\t\t}\n+        getMembersManagerBl().extendMembership(sess, member);\n+    }\n \n-\t\tgetMembersManagerBl().extendMembership(sess, member);\n-\t}\n+    @Override\n+    public boolean canExtendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getMembersManagerBl().checkMemberExists(sess, member);\n \n-\t@Override\n-\tpublic boolean canExtendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"canExtendMembership_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"extendMembership\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().canExtendMembership(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws PrivilegeException,\n-\t\t\tMemberNotExistsException, ExtendMembershipException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"canExtendMembershipWithReason_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"canExtendMembershipWithReason\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().canExtendMembershipWithReason(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"canBeMember_Vo_User_String_policy\", Arrays.asList(vo, user))) {\n-\t\t\tthrow new PrivilegeException(sess, \"canBeMember\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().canBeMember(sess, vo, user, loa);\n-\t}\n-\n-\t@Override\n-\tpublic boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws\n-\t\t\tVoNotExistsException, ExtendMembershipException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"canBeMemberWithReason_Vo_User_String_policy\", Arrays.asList(vo, user))) {\n-\t\t\tthrow new PrivilegeException(sess, \"canBeMemberWithReason\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().canBeMemberWithReason(sess, vo, user, loa);\n-\t}\n-\n-\t@Override\n-\tpublic Member getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(extSourceName, \"extSourceName\");\n-\t\tUtils.notNull(extLogin, \"extLogin\");\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"getMemberByExtSourceNameAndExtLogin_Vo_String_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberByExtSourceNameAndExtLogin\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMemberByExtSourceNameAndExtLogin(sess, vo, extSourceName, extLogin);\n-\t}\n-\n-\t@Override\n-\tpublic Date getNewExtendMembership(PerunSession sess, Member member) throws MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\treturn getMembersManagerBl().getNewExtendMembership(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws VoNotExistsException, ExtendMembershipException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\t\tUtils.notNull(loa, \"loa\");\n-\n-\t\treturn getMembersManagerBl().getNewExtendMembership(sess, vo, loa);\n-\t}\n-\n-\t@Override\n-\tpublic void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException {\n-\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"sendPasswordResetLinkEmail_Member_String_String_String_String_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"sendPasswordResetLinkEmail\");\n-\t\t}\n-\n-\t\t//check if attribute exists, throws AttributeNotExistsException\n-\t\tAttribute mailAttribute = null;\n-\t\tAttributeDefinition ad = getPerunBl().getAttributesManager().getAttributeDefinition(sess, mailAttributeUrn);\n-\n-\n-\t\ttry {\n-\t\t\tif (ad.getEntity().equals(\"user\")) {\n-\t\t\t\tUser user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tmailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, user, mailAttributeUrn);\n-\t\t\t}\n-\t\t\tif (ad.getEntity().equals(\"member\")) {\n-\t\t\t\tmailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, member, mailAttributeUrn);\n-\t\t\t}\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tif (mailAttribute == null) {\n-\t\t\tthrow new InternalErrorException(\"MailAttribute should not be null.\");\n-\t\t}\n-\t\tString mailAddress = mailAttribute.valueAsString();\n-\t\tif (mailAddress == null) {\n-\t\t\tthrow new PasswordResetMailNotExistsException(\"Member \" + member.getId() + \" doesn't have the attribute \" +\n-\t\t\t\tmailAttributeUrn + \" set.\");\n-\t\t}\n-\n-\t\tgetMembersManagerBl().sendPasswordResetLinkEmail(sess, member, namespace, url, mailAddress, language);\n-\t}\n-\n-\t@Override\n-\tpublic void sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"sendAccountActivationLinkEmail_Member_String_String_String_String_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"sendAccountActivationLinkEmail\");\n-\t\t}\n-\n-\t\t//check if attribute exists, throws AttributeNotExistsException\n-\t\tAttribute mailAttribute = null;\n-\t\tAttributeDefinition attributeDefinition = getPerunBl().getAttributesManager().getAttributeDefinition(sess, mailAttributeUrn);\n-\n-\t\ttry {\n-\t\t\tif (attributeDefinition.getEntity().equals(\"user\")) {\n-\t\t\t\tUser user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tmailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, user, mailAttributeUrn);\n-\t\t\t}\n-\t\t\tif (attributeDefinition.getEntity().equals(\"member\")) {\n-\t\t\t\tmailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, member, mailAttributeUrn);\n-\t\t\t}\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tif (mailAttribute == null) {\n-\t\t\tthrow new InternalErrorException(\"MailAttribute should not be null.\");\n-\t\t}\n-\t\tString mailAddress = mailAttribute.valueAsString();\n-\t\tif (mailAddress == null) {\n-\t\t\tthrow new PasswordResetMailNotExistsException(\"Member \" + member.getId() + \" doesn't have the attribute \" +\n-\t\t\t\tmailAttributeUrn + \" set.\");\n-\t\t}\n-\n-\t\tgetMembersManagerBl().sendAccountActivationLinkEmail(sess, member, namespace, url, mailAddress, language);\n-\t}\n-\n-\t@Override\n-\tpublic RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name,\n-\t                                        String password, String email, User sponsor, LocalDate validityTo,\n-\t\t\t\t\t\t\t\t\t\t\tboolean sendActivationLink, String url)\n-\t\t\tthrows PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException,\n-\t\t\tExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException,\n-\t\t\tUserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException {\n-\t\tUtils.checkPerunSession(session);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\tUtils.notNull(namespace, \"namespace\");\n-\t\tif (name.get(\"guestName\") == null) {\n-\t\t\tUtils.notNull(name.get(\"firstName\"), \"firstName\");\n-\t\t\tUtils.notNull(name.get(\"lastName\"), \"lastName\");\n-\t\t}\n-\t\tUtils.notNull(password, \"password\");\n-\n-\t\tString nameForLog = name.containsKey(\"guestName\") ? name.get(\"guestName\") : name.get(\"firstName\") + \" \" + name.get(\"lastName\");\n-\t\tlog.info(\"createSponsoredMember(vo={},namespace='{}',guestName='{}',sponsor={}\", vo.getShortName(), namespace, nameForLog, sponsor == null ? \"null\" : sponsor.getId());\n-\n-\t\tif (sponsor == null) {\n-\t\t\t//sponsor is the caller, authorization is checked in Bl\n-\t\t\tsponsor = session.getPerunPrincipal().getUser();\n-\t\t} else {\n-\t\t\t//Authorization\n-\t\t\tif (!AuthzResolver.authorizedInternal(session, \"createSponsoredMember_Vo_String_Map<String_String>_String_User_LocalDate_policy\", Arrays.asList(vo, sponsor))) {\n-\t\t\t\tthrow new PrivilegeException(session, \"createSponsoredMember\");\n-\t\t\t}\n-\t\t}\n-\t\t//create the sponsored member\n-\t\treturn membersManagerBl.getRichMemberWithAttributes(session, membersManagerBl.createSponsoredMember(session, vo, namespace, name, password, email, sponsor, validityTo, sendActivationLink, url, true));\n-\t}\n-\n-\t@Override\n-\tpublic RichMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace,\n-\t                                     String password, User sponsor, LocalDate validityTo)\n-\t\tthrows PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException,\n-\t\tExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException,\n-\t\tUserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException {\n-\n-\t\tUtils.checkPerunSession(session);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\tUtils.notNull(userToBeSponsored, \"userToBeSponsored\");\n-\t\tUtils.notNull(namespace, \"namespace\");\n-\t\tUtils.notNull(password, \"password\");\n-\n-\t\tlog.debug(\"setSponsoredMember(vo={},namespace='{}',displayName='{}',sponsor={}\", vo.getShortName(), namespace, userToBeSponsored.getFirstName() + \" \" + userToBeSponsored.getLastName(), sponsor == null ? \"null\" : sponsor.getId());\n-\n-\t\tif (sponsor == null) {\n-\t\t\t//sponsor is the caller, authorization is checked in Bl\n-\t\t\tsponsor = session.getPerunPrincipal().getUser();\n-\t\t} else {\n-\t\t\t//Authorization\n-\t\t\tif (!AuthzResolver.authorizedInternal(session, \"setSponsoredMember_Vo_User_String_String_User_LocalDate_policy\", vo, sponsor)) {\n-\t\t\t\tthrow new PrivilegeException(session, \"setSponsoredMember\");\n-\t\t\t}\n-\t\t}\n-\t\t//create the sponsored member\n-\t\treturn membersManagerBl.getRichMember(session, membersManagerBl.setSponsoredMember(session, vo, userToBeSponsored, namespace, password, sponsor, validityTo, true));\n-\t}\n-\n-\t@Override\n-\tpublic Map<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n-\t\t\tList<String> data, String header, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\tUtils.notNull(namespace, \"namespace\");\n-\t\tUtils.notNull(data, \"names\");\n-\t\tUtils.notNull(header, \"header\");\n-\n-\t\tif (sponsor == null) {\n-\t\t\t//sponsor is the caller, authorization is checked in Bl\n-\t\t\tsponsor = sess.getPerunPrincipal().getUser();\n-\t\t} else {\n-\t\t\t//Authorization\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess,\n-\t\t\t\t\t\"createSponsoredMembersFromCSV_Vo_String_List<String>_User_policy\", Arrays.asList(vo, sponsor))) {\n-\t\t\t\tthrow new PrivilegeException(sess, \"createSponsoredMembers\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn membersManagerBl\n-\t\t\t\t.createSponsoredMembersFromCSV(sess, vo, namespace, data, header, sponsor, validityTo, sendActivationLink, url, true);\n-\t}\n-\n-\t@Override\n-\tpublic Map<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(session);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\tUtils.notNull(namespace, \"namespace\");\n-\t\tUtils.notNull(names, \"names\");\n-\n-\t\tif (sponsor == null) {\n-\t\t\t//sponsor is the caller, authorization is checked in Bl\n-\t\t\tsponsor = session.getPerunPrincipal().getUser();\n-\t\t} else {\n-\t\t\t//Authorization\n-\t\t\tif (!AuthzResolver.authorizedInternal(session, \"createSponsoredMembers_Vo_String_List<String>_User_policy\", Arrays.asList(vo, sponsor))) {\n-\t\t\t\tthrow new PrivilegeException(session, \"createSponsoredMembers\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// create sponsored members\n-\t\treturn membersManagerBl.createSponsoredMembers(session, vo, namespace, names, email, sponsor, validityTo, sendActivationLink, url, true);\n-\t}\n-\n-\t@Override\n-\tpublic RichMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotExistsException, AlreadySponsoredMemberException, UserNotInRoleException, PrivilegeException, AlreadySponsorException {\n-\t\tUtils.checkPerunSession(session);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(session, sponsoredMember);\n-\n-\t\tif (sponsor == null) {\n-\t\t\t//sponsor is the caller\n-\t\t\tsponsor = session.getPerunPrincipal().getUser();\n-\t\t}\n-\n-\t\tVo memberVo;\n-\t\ttry {\n-\t\t\tmemberVo = perunBl.getVosManagerBl().getVoById(session, sponsoredMember.getVoId());\n-\t\t} catch (VoNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(session, \"setSponsorshipForMember_Member_User_LocalDate_policy\", memberVo, sponsor)) {\n-\t\t\tthrow new PrivilegeException(session, \"setSponsorshipForMember\");\n-\t\t}\n-\n-\t\t//set member to be sponsored\n-\t\treturn membersManagerBl.getRichMember(session, membersManagerBl.setSponsorshipForMember(session, sponsoredMember, sponsor, validityTo));\n-\t}\n-\n-\t@Override\n-\tpublic RichMember unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotExistsException, MemberNotSponsoredException, PrivilegeException {\n-\t\tUtils.checkPerunSession(session);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(session, sponsoredMember);\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(session, \"unsetSponsorshipForMember_Member_policy\", sponsoredMember)) {\n-\t\t\tthrow new PrivilegeException(session, \"unsetSponsorshipForMember\");\n-\t\t}\n-\n-\t\t//unset sponsorship for member\n-\t\treturn membersManagerBl.getRichMember(session, membersManagerBl.unsetSponsorshipForMember(session, sponsoredMember));\n-\t}\n-\n-\t@Override\n-\tpublic RichMember sponsorMember(PerunSession session, Member sponsored, User sponsor, LocalDate validityTo) throws PrivilegeException, MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException {\n-\t\tUtils.checkPerunSession(session);\n-\t\tUtils.notNull(sponsored, \"sponsored\");\n-\t\tUtils.notNull(sponsor, \"sponsor\");\n-\t\tlog.debug(\"sponsorMember(sponsored={},sponsor={}\", sponsored.getId(), sponsor.getId());\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(session, \"sponsored-sponsorMember_Member_User_LocalDate_policy\", sponsored) ||\n-\t\t    !AuthzResolver.authorizedInternal(session, \"sponsor-sponsorMember_Member_User_LocalDate_policy\", sponsor)) {\n-\t\t\tthrow new PrivilegeException(session, \"sponsorMember\");\n-\t\t}\n-\t\t//create the link between sponsored and sponsoring users\n-\t\treturn membersManagerBl.getRichMember(session, membersManagerBl.sponsorMember(session, sponsored, sponsor, validityTo));\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user, List<String> attrNames) throws AttributeNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\t\tperunBl.getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_User_List<String>_policy\", Arrays.asList(vo, user))) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembers\");\n-\t\t}\n-\n-\t\tList<AttributeDefinition> attributeDefinitions = new ArrayList<>();\n-\t\tfor (String attrName : attrNames) {\n-\t\t\tattributeDefinitions.add(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName));\n-\t\t}\n-\n-\t\t//Filter members based on authorization\n-\t\tList<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo, user).stream()\n-\t\t\t.filter(member -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_User_List<String>_policy\", member, vo))\n-\t\t\t.collect(Collectors.toList());\n-\t\t//Basic rich Members without attributes\n-\t\tList<RichMember> richMembers = membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n-\t\t//Enriched rich members with attributes by list of attributes\n-\t\trichMembers = membersManagerBl.convertMembersToRichMembersWithAttributes(sess, richMembers, attributeDefinitions);\n-\t\t//RichMembers with filtered attributes by rights from session\n-\t\trichMembers = membersManagerBl.filterOnlyAllowedAttributes(sess, richMembers, null, true);\n-\n-\t\treturn richMembers;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws PrivilegeException, VoNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\tUtils.notNull(user, \"user\");\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\t\tperunBl.getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_User_policy\", Arrays.asList(vo, user))) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembers\");\n-\t\t}\n-\n-\t\t//Filter members based on authorization\n-\t\tList<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo, user).stream()\n-\t\t\t.filter(member -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_User_policy\", member, vo))\n-\t\t\t.collect(Collectors.toList());\n-\n-\t\treturn membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t//Authorization\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembers\");\n-\t\t}\n-\n-\t\t//Filter members based on authorization\n-\t\tList<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo).stream()\n-\t\t\t.filter(member -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_policy\", member, vo))\n-\t\t\t.collect(Collectors.toList());\n-\n-\t\treturn membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n-\t}\n-\n-\t@Override\n-\tpublic List<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\t\n-\t\t//Authorization\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembersAndTheirSponsors\");\n-\t\t}\n-\n-\t\treturn getAllSponsoredMembersAndTheirSponsors(sess, vo, attrNames).stream()\n-\t\t\t.filter(memberWithSponsors -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembersAndTheirSponsors_Vo_policy\", memberWithSponsors.getMember(), vo))\n-\t\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t@Override\n-\tpublic List<MemberWithSponsors> getAllSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t//Authorization\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"getAllSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllSponsoredMembersAndTheirSponsors\");\n-\t\t}\n-\n-\t\tList<AttributeDefinition> attrsDef = new ArrayList<>();\n-\t\tfor (String attrName : attrNames) {\n-\t\t\tattrsDef.add(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName));\n-\t\t}\n-\n-\t\tList<RichMember> richMembers = membersManagerBl.convertMembersToRichMembersWithAttributes(sess,\n-\t\t\tmembersManagerBl.convertMembersToRichMembers(sess, membersManagerBl.getSponsoredMembers(sess, vo)),\n-\t\t\tattrsDef);\n-\t\trichMembers = membersManagerBl.filterOnlyAllowedAttributes(sess, richMembers, null, true);\n-\n-\t\treturn richMembers.stream()\n-\t\t\t.map(member -> convertMemberToMemberWithSponsors(sess, member))\n-\t\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t@Override\n-\tpublic String extendExpirationForSponsoredMember(PerunSession sess, Member sponsoredMember, User sponsorUser) throws PrivilegeException, MemberNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(sponsoredMember, \"sponsoredMember\");\n-\t\tUtils.notNull(sponsorUser, \"sponsorUser\");\n-\n-\t\tperunBl.getMembersManagerBl().checkMemberExists(sess, sponsoredMember);\n-\t\tperunBl.getUsersManagerBl().checkUserExists(sess, sponsorUser);\n-\n-\t\t//Authorization\n-\t\tif (!(AuthzResolver.authorizedInternal(sess, \"extendExpirationForSponsoredMember_Member_User_policy\", sponsoredMember))) {\n-\t\t\tthrow new PrivilegeException(sess, \"extendExpirationForSponsoredMember\");\n-\t\t}\n-\n-\t\treturn membersManagerBl.extendExpirationForSponsoredMember(sess,sponsoredMember,sponsorUser);\n-\t}\n-\n-\t@Override\n-\tpublic void removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(sponsoredMember, \"sponsoredMember\");\n-\t\tUtils.notNull(sponsorToRemove, \"sponsorToRemove\");\n-\t\tlog.info(\"removeSponsor(sponsoredMember={},sponsorToRemove={}\", sponsoredMember.getId(), sponsorToRemove.getId());\n-\n-\t\t//Get the VO to which sponsoredMember belongs\n-\t\tVo vo = membersManagerBl.getMemberVo(sess, sponsoredMember);\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"sponsored-removeSponsor_Member_User_policy\", sponsoredMember) ||\n-\t\t    !AuthzResolver.authorizedInternal(sess, \"sponsor-removeSponsor_Member_User_policy\", sponsorToRemove)) {\n-\t\t\tthrow new PrivilegeException(sess, \"removeSponsor\");\n-\t\t}\n-\n-\t\t//Check that sponsoring user has a role SPONSOR for the VO\n-\t\tif (!getPerunBl().getVosManagerBl().isUserInRoleForVo(sess, sponsorToRemove, Role.SPONSOR, vo, true)) {\n-\t\t\tthrow new PrivilegeException(sess, \"user \" + sponsorToRemove.getId() + \" is not in role SPONSOR for VO \" + vo.getId());\n-\t\t}\n-\t\t//remove sponsor\n-\t\tmembersManagerBl.removeSponsor(sess,sponsoredMember, sponsorToRemove);\n-\t}\n-\n-\t@Override\n-\tpublic void updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor,\n-\t                                      LocalDate newValidity)\n-\t\t\tthrows PrivilegeException, SponsorshipDoesNotExistException, MemberNotExistsException,\n-\t\t\t       UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(sponsoredMember, \"sponsoredMember\");\n-\t\tUtils.notNull(sponsor, \"sponsor\");\n-\n-\t\tperunBl.getMembersManagerBl().checkMemberExists(sess, sponsoredMember);\n-\t\tperunBl.getUsersManagerBl().checkUserExists(sess, sponsor);\n-\n-\t\tVo memberVo;\n-\t\ttry {\n-\t\t\tmemberVo = perunBl.getVosManagerBl().getVoById(sess, sponsoredMember.getVoId());\n-\t\t} catch (VoNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"updateSponsorshipValidity_Member_User_LocalDate\", memberVo,\n-\t\t\t\tsponsor)) {\n-\t\t\tthrow new PrivilegeException(\"updateSponsorshipValidity\");\n-\t\t}\n-\n-\t\tmembersManagerBl.updateSponsorshipValidity(sess, sponsoredMember, sponsor, newValidity);\n-\t}\n-\n-\t/**\n-\t * Converts member to member with sponsors and sets all his sponsors.\n-\t *\n-\t * @param sess perun session\n-\t * @param member sponsored member\n-\t * @return member with sponsors\n-\t */\n-\tprivate MemberWithSponsors convertMemberToMemberWithSponsors(PerunSession sess, RichMember member) {\n-\t\tMemberWithSponsors memberWithSponsors = new MemberWithSponsors(member);\n-\n-\t\tList<Sponsor> sponsors = getPerunBl().getUsersManagerBl().getSponsors(sess, member).stream()\n-\t\t\t\t.map(user -> membersManagerBl.convertUserToSponsor(sess, user, member))\n-\t\t\t\t.collect(Collectors.toList());\n-\t\tmemberWithSponsors.setSponsors(sponsors);\n-\n-\t\treturn memberWithSponsors;\n-\t}\n-\n-\t/**\n-\t * Gets the membersManagerBl for this instance.\n-\t *\n-\t * @return The membersManagerBl.\n-\t */\n-\tpublic MembersManagerBl getMembersManagerBl() {\n-\t\treturn this.membersManagerBl;\n-\t}\n-\n-\t/**\n-\t * Sets the perunBl for this instance.\n-\t *\n-\t * @param perunBl The perunBl.\n-\t */\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\t/**\n-\t * Sets the membersManagerBl for this instance.\n-\t *\n-\t * @param membersManagerBl The membersManagerBl.\n-\t */\n-\tpublic void setMembersManagerBl(MembersManagerBl membersManagerBl) {\n-\t\tthis.membersManagerBl = membersManagerBl;\n-\t}\n-\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"canExtendMembership_Member_policy\", member)) {\n+            throw new PrivilegeException(sess, \"extendMembership\");\n+        }\n+\n+        return getMembersManagerBl().canExtendMembership(sess, member);\n+    }\n+\n+    @Override\n+    public boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws PrivilegeException,\n+            MemberNotExistsException, ExtendMembershipException {\n+        Utils.checkPerunSession(sess);\n+        getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"canExtendMembershipWithReason_Member_policy\", member)) {\n+            throw new PrivilegeException(sess, \"canExtendMembershipWithReason\");\n+        }\n+\n+        return getMembersManagerBl().canExtendMembershipWithReason(sess, member);\n+    }\n+\n+    @Override\n+    public boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"canBeMember_Vo_User_String_policy\", Arrays.asList(vo, user))) {\n+            throw new PrivilegeException(sess, \"canBeMember\");\n+        }\n+\n+        return getMembersManagerBl().canBeMember(sess, vo, user, loa);\n+    }\n+\n+    @Override\n+    public boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws\n+            VoNotExistsException, ExtendMembershipException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"canBeMemberWithReason_Vo_User_String_policy\", Arrays.asList(vo, user))) {\n+            throw new PrivilegeException(sess, \"canBeMemberWithReason\");\n+        }\n+\n+        return getMembersManagerBl().canBeMemberWithReason(sess, vo, user, loa);\n+    }\n+\n+    @Override\n+    public Member getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, VoNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(extSourceName, \"extSourceName\");\n+        Utils.notNull(extLogin, \"extLogin\");\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getMemberByExtSourceNameAndExtLogin_Vo_String_String_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getMemberByExtSourceNameAndExtLogin\");\n+        }\n+\n+        return getMembersManagerBl().getMemberByExtSourceNameAndExtLogin(sess, vo, extSourceName, extLogin);\n+    }\n+\n+    @Override\n+    public Date getNewExtendMembership(PerunSession sess, Member member) throws MemberNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        return getMembersManagerBl().getNewExtendMembership(sess, member);\n+    }\n+\n+    @Override\n+    public Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws VoNotExistsException, ExtendMembershipException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        Utils.notNull(loa, \"loa\");\n+\n+        return getMembersManagerBl().getNewExtendMembership(sess, vo, loa);\n+    }\n+\n+    @Override\n+    public void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException {\n+\n+        Utils.checkPerunSession(sess);\n+        getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"sendPasswordResetLinkEmail_Member_String_String_String_String_policy\", member)) {\n+            throw new PrivilegeException(sess, \"sendPasswordResetLinkEmail\");\n+        }\n+\n+        //check if attribute exists, throws AttributeNotExistsException\n+        Attribute mailAttribute = null;\n+        AttributeDefinition ad = getPerunBl().getAttributesManager().getAttributeDefinition(sess, mailAttributeUrn);\n+\n+\n+        try {\n+            if (ad.getEntity().equals(\"user\")) {\n+                User user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n+                mailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, user, mailAttributeUrn);\n+            }\n+            if (ad.getEntity().equals(\"member\")) {\n+                mailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, member, mailAttributeUrn);\n+            }\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        if (mailAttribute == null) {\n+            throw new InternalErrorException(\"MailAttribute should not be null.\");\n+        }\n+        String mailAddress = mailAttribute.valueAsString();\n+        if (mailAddress == null) {\n+            throw new PasswordResetMailNotExistsException(\"Member \" + member.getId() + \" doesn't have the attribute \" +\n+                    mailAttributeUrn + \" set.\");\n+        }\n+\n+        getMembersManagerBl().sendPasswordResetLinkEmail(sess, member, namespace, url, mailAddress, language);\n+    }\n+\n+    @Override\n+    public void sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"sendAccountActivationLinkEmail_Member_String_String_String_String_policy\", member)) {\n+            throw new PrivilegeException(sess, \"sendAccountActivationLinkEmail\");\n+        }\n+\n+        //check if attribute exists, throws AttributeNotExistsException\n+        Attribute mailAttribute = null;\n+        AttributeDefinition attributeDefinition = getPerunBl().getAttributesManager().getAttributeDefinition(sess, mailAttributeUrn);\n+\n+        try {\n+            if (attributeDefinition.getEntity().equals(\"user\")) {\n+                User user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n+                mailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, user, mailAttributeUrn);\n+            }\n+            if (attributeDefinition.getEntity().equals(\"member\")) {\n+                mailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, member, mailAttributeUrn);\n+            }\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        if (mailAttribute == null) {\n+            throw new InternalErrorException(\"MailAttribute should not be null.\");\n+        }\n+        String mailAddress = mailAttribute.valueAsString();\n+        if (mailAddress == null) {\n+            throw new PasswordResetMailNotExistsException(\"Member \" + member.getId() + \" doesn't have the attribute \" +\n+                    mailAttributeUrn + \" set.\");\n+        }\n+\n+        getMembersManagerBl().sendAccountActivationLinkEmail(sess, member, namespace, url, mailAddress, language);\n+    }\n+\n+    @Override\n+    public RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name,\n+                                            String password, String email, User sponsor, LocalDate validityTo,\n+                                            boolean sendActivationLink, String url)\n+            throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException,\n+            ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException,\n+            UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException {\n+        Utils.checkPerunSession(session);\n+        Utils.notNull(vo, \"vo\");\n+        Utils.notNull(namespace, \"namespace\");\n+        if (name.get(\"guestName\") == null) {\n+            Utils.notNull(name.get(\"firstName\"), \"firstName\");\n+            Utils.notNull(name.get(\"lastName\"), \"lastName\");\n+        }\n+        Utils.notNull(password, \"password\");\n+\n+        String nameForLog = name.containsKey(\"guestName\") ? name.get(\"guestName\") : name.get(\"firstName\") + \" \" + name.get(\"lastName\");\n+        log.info(\"createSponsoredMember(vo={},namespace='{}',guestName='{}',sponsor={}\", vo.getShortName(), namespace, nameForLog, sponsor == null ? \"null\" : sponsor.getId());\n+\n+        if (sponsor == null) {\n+            //sponsor is the caller, authorization is checked in Bl\n+            sponsor = session.getPerunPrincipal().getUser();\n+        } else {\n+            //Authorization\n+            if (!AuthzResolver.authorizedInternal(session, \"createSponsoredMember_Vo_String_Map<String_String>_String_User_LocalDate_policy\", Arrays.asList(vo, sponsor))) {\n+                throw new PrivilegeException(session, \"createSponsoredMember\");\n+            }\n+        }\n+        //create the sponsored member\n+        return membersManagerBl.getRichMemberWithAttributes(session, membersManagerBl.createSponsoredMember(session, vo, namespace, name, password, email, sponsor, validityTo, sendActivationLink, url, true));\n+    }\n+\n+    @Override\n+    public RichMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace,\n+                                         String password, User sponsor, LocalDate validityTo)\n+            throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException,\n+            ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException,\n+            UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException {\n+\n+        Utils.checkPerunSession(session);\n+        Utils.notNull(vo, \"vo\");\n+        Utils.notNull(userToBeSponsored, \"userToBeSponsored\");\n+        Utils.notNull(namespace, \"namespace\");\n+        Utils.notNull(password, \"password\");\n+\n+        log.debug(\"setSponsoredMember(vo={},namespace='{}',displayName='{}',sponsor={}\", vo.getShortName(), namespace, userToBeSponsored.getFirstName() + \" \" + userToBeSponsored.getLastName(), sponsor == null ? \"null\" : sponsor.getId());\n+\n+        if (sponsor == null) {\n+            //sponsor is the caller, authorization is checked in Bl\n+            sponsor = session.getPerunPrincipal().getUser();\n+        } else {\n+            //Authorization\n+            if (!AuthzResolver.authorizedInternal(session, \"setSponsoredMember_Vo_User_String_String_User_LocalDate_policy\", vo, sponsor)) {\n+                throw new PrivilegeException(session, \"setSponsoredMember\");\n+            }\n+        }\n+        //create the sponsored member\n+        return membersManagerBl.getRichMember(session, membersManagerBl.setSponsoredMember(session, vo, userToBeSponsored, namespace, password, sponsor, validityTo, true));\n+    }\n+\n+    @Override\n+    public Map<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n+                                                                          List<String> data, String header, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(vo, \"vo\");\n+        Utils.notNull(namespace, \"namespace\");\n+        Utils.notNull(data, \"names\");\n+        Utils.notNull(header, \"header\");\n+\n+        if (sponsor == null) {\n+            //sponsor is the caller, authorization is checked in Bl\n+            sponsor = sess.getPerunPrincipal().getUser();\n+        } else {\n+            //Authorization\n+            if (!AuthzResolver.authorizedInternal(sess,\n+                    \"createSponsoredMembersFromCSV_Vo_String_List<String>_User_policy\", Arrays.asList(vo, sponsor))) {\n+                throw new PrivilegeException(sess, \"createSponsoredMembers\");\n+            }\n+        }\n+\n+        return membersManagerBl\n+                .createSponsoredMembersFromCSV(sess, vo, namespace, data, header, sponsor, validityTo, sendActivationLink, url, true);\n+    }\n+\n+    @Override\n+    public Map<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException {\n+        Utils.checkPerunSession(session);\n+        Utils.notNull(vo, \"vo\");\n+        Utils.notNull(namespace, \"namespace\");\n+        Utils.notNull(names, \"names\");\n+\n+        if (sponsor == null) {\n+            //sponsor is the caller, authorization is checked in Bl\n+            sponsor = session.getPerunPrincipal().getUser();\n+        } else {\n+            //Authorization\n+            if (!AuthzResolver.authorizedInternal(session, \"createSponsoredMembers_Vo_String_List<String>_User_policy\", Arrays.asList(vo, sponsor))) {\n+                throw new PrivilegeException(session, \"createSponsoredMembers\");\n+            }\n+        }\n+\n+        // create sponsored members\n+        return membersManagerBl.createSponsoredMembers(session, vo, namespace, names, email, sponsor, validityTo, sendActivationLink, url, true);\n+    }\n+\n+    @Override\n+    public RichMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotExistsException, AlreadySponsoredMemberException, UserNotInRoleException, PrivilegeException, AlreadySponsorException {\n+        Utils.checkPerunSession(session);\n+        getPerunBl().getMembersManagerBl().checkMemberExists(session, sponsoredMember);\n+\n+        if (sponsor == null) {\n+            //sponsor is the caller\n+            sponsor = session.getPerunPrincipal().getUser();\n+        }\n+\n+        Vo memberVo;\n+        try {\n+            memberVo = perunBl.getVosManagerBl().getVoById(session, sponsoredMember.getVoId());\n+        } catch (VoNotExistsException e) {\n+            throw new InternalErrorException(e);\n+        }\n+\n+        //Authorization\n+        if (!AuthzResolver.authorizedInternal(session, \"setSponsorshipForMember_Member_User_LocalDate_policy\", memberVo, sponsor)) {\n+            throw new PrivilegeException(session, \"setSponsorshipForMember\");\n+        }\n+\n+        //set member to be sponsored\n+        return membersManagerBl.getRichMember(session, membersManagerBl.setSponsorshipForMember(session, sponsoredMember, sponsor, validityTo));\n+    }\n+\n+    @Override\n+    public RichMember unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotExistsException, MemberNotSponsoredException, PrivilegeException {\n+        Utils.checkPerunSession(session);\n+        getPerunBl().getMembersManagerBl().checkMemberExists(session, sponsoredMember);\n+\n+        //Authorization\n+        if (!AuthzResolver.authorizedInternal(session, \"unsetSponsorshipForMember_Member_policy\", sponsoredMember)) {\n+            throw new PrivilegeException(session, \"unsetSponsorshipForMember\");\n+        }\n+\n+        //unset sponsorship for member\n+        return membersManagerBl.getRichMember(session, membersManagerBl.unsetSponsorshipForMember(session, sponsoredMember));\n+    }\n+\n+    @Override\n+    public RichMember sponsorMember(PerunSession session, Member sponsored, User sponsor, LocalDate validityTo) throws PrivilegeException, MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException {\n+        Utils.checkPerunSession(session);\n+        Utils.notNull(sponsored, \"sponsored\");\n+        Utils.notNull(sponsor, \"sponsor\");\n+        log.debug(\"sponsorMember(sponsored={},sponsor={}\", sponsored.getId(), sponsor.getId());\n+\n+        //Authorization\n+        if (!AuthzResolver.authorizedInternal(session, \"sponsored-sponsorMember_Member_User_LocalDate_policy\", sponsored) ||\n+                !AuthzResolver.authorizedInternal(session, \"sponsor-sponsorMember_Member_User_LocalDate_policy\", sponsor)) {\n+            throw new PrivilegeException(session, \"sponsorMember\");\n+        }\n+        //create the link between sponsored and sponsoring users\n+        return membersManagerBl.getRichMember(session, membersManagerBl.sponsorMember(session, sponsored, sponsor, validityTo));\n+    }\n+\n+    @Override\n+    public List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user, List<String> attrNames) throws AttributeNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+        perunBl.getUsersManagerBl().checkUserExists(sess, user);\n+\n+        //Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_User_List<String>_policy\", Arrays.asList(vo, user))) {\n+            throw new PrivilegeException(sess, \"getSponsoredMembers\");\n+        }\n+\n+        List<AttributeDefinition> attributeDefinitions = new ArrayList<>();\n+        for (String attrName : attrNames) {\n+            attributeDefinitions.add(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName));\n+        }\n+\n+        //Filter members based on authorization\n+        List<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo, user).stream()\n+                .filter(member -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_User_List<String>_policy\", member, vo))\n+                .collect(Collectors.toList());\n+        //Basic rich Members without attributes\n+        List<RichMember> richMembers = membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n+        //Enriched rich members with attributes by list of attributes\n+        richMembers = membersManagerBl.convertMembersToRichMembersWithAttributes(sess, richMembers, attributeDefinitions);\n+        //RichMembers with filtered attributes by rights from session\n+        richMembers = membersManagerBl.filterOnlyAllowedAttributes(sess, richMembers, null, true);\n+\n+        return richMembers;\n+    }\n+\n+    @Override\n+    public List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws PrivilegeException, VoNotExistsException, UserNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(vo, \"vo\");\n+        Utils.notNull(user, \"user\");\n+\n+        perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+        perunBl.getUsersManagerBl().checkUserExists(sess, user);\n+\n+        //Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_User_policy\", Arrays.asList(vo, user))) {\n+            throw new PrivilegeException(sess, \"getSponsoredMembers\");\n+        }\n+\n+        //Filter members based on authorization\n+        List<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo, user).stream()\n+                .filter(member -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_User_policy\", member, vo))\n+                .collect(Collectors.toList());\n+\n+        return membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n+    }\n+\n+    @Override\n+    public List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(vo, \"vo\");\n+\n+        perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+\n+        //Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getSponsoredMembers\");\n+        }\n+\n+        //Filter members based on authorization\n+        List<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo).stream()\n+                .filter(member -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_policy\", member, vo))\n+                .collect(Collectors.toList());\n+\n+        return membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n+    }\n+\n+    @Override\n+    public List<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(vo, \"vo\");\n+\n+        //Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getSponsoredMembersAndTheirSponsors\");\n+        }\n+\n+        return getAllSponsoredMembersAndTheirSponsors(sess, vo, attrNames).stream()\n+                .filter(memberWithSponsors -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembersAndTheirSponsors_Vo_policy\", memberWithSponsors.getMember(), vo))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public List<MemberWithSponsors> getAllSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(vo, \"vo\");\n+\n+        perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+\n+        //Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"getAllSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n+            throw new PrivilegeException(sess, \"getAllSponsoredMembersAndTheirSponsors\");\n+        }\n+\n+        List<AttributeDefinition> attrsDef = new ArrayList<>();\n+        for (String attrName : attrNames) {\n+            attrsDef.add(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName));\n+        }\n+\n+        List<RichMember> richMembers = membersManagerBl.convertMembersToRichMembersWithAttributes(sess,\n+                membersManagerBl.convertMembersToRichMembers(sess, membersManagerBl.getSponsoredMembers(sess, vo)),\n+                attrsDef);\n+        richMembers = membersManagerBl.filterOnlyAllowedAttributes(sess, richMembers, null, true);\n+\n+        return richMembers.stream()\n+                .map(member -> convertMemberToMemberWithSponsors(sess, member))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public String extendExpirationForSponsoredMember(PerunSession sess, Member sponsoredMember, User sponsorUser) throws PrivilegeException, MemberNotExistsException, UserNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(sponsoredMember, \"sponsoredMember\");\n+        Utils.notNull(sponsorUser, \"sponsorUser\");\n+\n+        perunBl.getMembersManagerBl().checkMemberExists(sess, sponsoredMember);\n+        perunBl.getUsersManagerBl().checkUserExists(sess, sponsorUser);\n+\n+        //Authorization\n+        if (!(AuthzResolver.authorizedInternal(sess, \"extendExpirationForSponsoredMember_Member_User_policy\", sponsoredMember))) {\n+            throw new PrivilegeException(sess, \"extendExpirationForSponsoredMember\");\n+        }\n+\n+        return membersManagerBl.extendExpirationForSponsoredMember(sess, sponsoredMember, sponsorUser);\n+    }\n+\n+    @Override\n+    public void removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(sponsoredMember, \"sponsoredMember\");\n+        Utils.notNull(sponsorToRemove, \"sponsorToRemove\");\n+        log.info(\"removeSponsor(sponsoredMember={},sponsorToRemove={}\", sponsoredMember.getId(), sponsorToRemove.getId());\n+\n+        //Get the VO to which sponsoredMember belongs\n+        Vo vo = membersManagerBl.getMemberVo(sess, sponsoredMember);\n+\n+        //Authorization\n+        if (!AuthzResolver.authorizedInternal(sess, \"sponsored-removeSponsor_Member_User_policy\", sponsoredMember) ||\n+                !AuthzResolver.authorizedInternal(sess, \"sponsor-removeSponsor_Member_User_policy\", sponsorToRemove)) {\n+            throw new PrivilegeException(sess, \"removeSponsor\");\n+        }\n+\n+        //Check that sponsoring user has a role SPONSOR for the VO\n+        if (!getPerunBl().getVosManagerBl().isUserInRoleForVo(sess, sponsorToRemove, Role.SPONSOR, vo, true)) {\n+            throw new PrivilegeException(sess, \"user \" + sponsorToRemove.getId() + \" is not in role SPONSOR for VO \" + vo.getId());\n+        }\n+        //remove sponsor\n+        membersManagerBl.removeSponsor(sess, sponsoredMember, sponsorToRemove);\n+    }\n+\n+    @Override\n+    public void updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor,\n+                                          LocalDate newValidity)\n+            throws PrivilegeException, SponsorshipDoesNotExistException, MemberNotExistsException,\n+            UserNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(sponsoredMember, \"sponsoredMember\");\n+        Utils.notNull(sponsor, \"sponsor\");\n+\n+        perunBl.getMembersManagerBl().checkMemberExists(sess, sponsoredMember);\n+        perunBl.getUsersManagerBl().checkUserExists(sess, sponsor);\n+\n+        Vo memberVo;\n+        try {\n+            memberVo = perunBl.getVosManagerBl().getVoById(sess, sponsoredMember.getVoId());\n+        } catch (VoNotExistsException e) {\n+            throw new InternalErrorException(e);\n+        }\n+\n+        if (!AuthzResolver.authorizedInternal(sess, \"updateSponsorshipValidity_Member_User_LocalDate\", memberVo,\n+                sponsor)) {\n+            throw new PrivilegeException(\"updateSponsorshipValidity\");\n+        }\n+\n+        membersManagerBl.updateSponsorshipValidity(sess, sponsoredMember, sponsor, newValidity);\n+    }\n+\n+    /**\n+     * Converts member to member with sponsors and sets all his sponsors.\n+     *\n+     * @param sess   perun session\n+     * @param member sponsored member\n+     * @return member with sponsors\n+     */\n+    private MemberWithSponsors convertMemberToMemberWithSponsors(PerunSession sess, RichMember member) {\n+        MemberWithSponsors memberWithSponsors = new MemberWithSponsors(member);\n+\n+        List<Sponsor> sponsors = getPerunBl().getUsersManagerBl().getSponsors(sess, member).stream()\n+                .map(user -> membersManagerBl.convertUserToSponsor(sess, user, member))\n+                .collect(Collectors.toList());\n+        memberWithSponsors.setSponsors(sponsors);\n+\n+        return memberWithSponsors;\n+    }\n+\n+    /**\n+     * Gets the membersManagerBl for this instance.\n+     *\n+     * @return The membersManagerBl.\n+     */\n+    public MembersManagerBl getMembersManagerBl() {\n+        return this.membersManagerBl;\n+    }\n+\n+    /**\n+     * Sets the perunBl for this instance.\n+     *\n+     * @param perunBl The perunBl.\n+     */\n+    public void setPerunBl(PerunBl perunBl) {\n+        this.perunBl = perunBl;\n+    }\n+\n+    /**\n+     * Sets the membersManagerBl for this instance.\n+     *\n+     * @param membersManagerBl The membersManagerBl.\n+     */\n+    public void setMembersManagerBl(MembersManagerBl membersManagerBl) {\n+        this.membersManagerBl = membersManagerBl;\n+    }\n+\n+    public PerunBl getPerunBl() {\n+        return this.perunBl;\n+    }\n }\n",
            "diff_size": 1593
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1372",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/395/MembersManagerEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/395/MembersManagerEntry.java\nindex b75cc2f4809..37f2684cedf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/395/MembersManagerEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/395/MembersManagerEntry.java\n@@ -54,7 +54,6 @@ import cz.metacentrum.perun.core.bl.PerunBl;\n import cz.metacentrum.perun.core.impl.Utils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.stream.Collectors;\n import java.time.LocalDate;\n import java.util.ArrayList;\n@@ -68,1546 +67,1446 @@ import java.util.Map;\n /**\n  * @author Slavek Licehammer glory@ics.muni.cz\n  */\n-public class MembersManagerEntry implements MembersManager {\n-\n-\tfinal static Logger log = LoggerFactory.getLogger(MembersManagerEntry.class);\n-\n-\tprivate MembersManagerBl membersManagerBl;\n-\tprivate PerunBl perunBl;\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tpublic MembersManagerEntry(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t\tthis.membersManagerBl = perunBl.getMembersManagerBl();\n-\t}\n-\n-\tpublic MembersManagerEntry() {\n-\t}\n-\n-\t@Override\n-\tpublic void deleteMember(PerunSession sess, Member member) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"deleteMember_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"deleteMember\");\n-\t\t}\n-\n-\n-\t\tgetMembersManagerBl().deleteMember(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteMembers(PerunSession sess, List<Member> members) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tfor (Member member : members) {\n-\t\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tfor (Member member: members) {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"deleteMembers_List<Member>_policy\", member)) {\n-\t\t\t\tthrow new PrivilegeException(sess, \"deleteMembers\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tgetMembersManagerBl().deleteMembers(sess, members);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteAllMembers(PerunSession sess, Vo vo) throws VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"deleteAllMembers_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"deleteAllMembers\");\n-\t\t}\n-\n-\t\tgetMembersManagerBl().deleteAllMembers(sess, vo);\n-\t}\n-\n-\t@Override\n-\tpublic Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException {\n-\t\treturn this.createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, null);\n-\t}\n-\n-\t@Override\n-\tpublic Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(specificUserType, \"specificUserType\");\n-\n-\t\tUtils.notNull(candidate, \"candidate\");\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\tif (specificUserOwners.isEmpty())\n-\t\t\tthrow new InternalErrorException(\"List of specificUserOwners of \" + candidate + \" can't be empty.\");\n-\n-\t\tfor (User u : specificUserOwners) {\n-\t\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, u);\n-\t\t}\n-\n-\t\tif (!specificUserType.equals(SpecificUserType.SERVICE))\n-\t\t\tthrow new InternalErrorException(\"Only service user type is allowed.\");\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\tfor (Group group: groups) {\n-\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createSpecificMember_Vo_Candidate_List<User>_SpecificUserType_List<Group>_policy\", vo, group)) {\n-\t\t\t\t\tthrow new PrivilegeException(\"createSpecificMember\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createSpecificMember_Vo_Candidate_List<User>_SpecificUserType_List<Group>_policy\", vo)) {\n-\t\t\t\tthrow new PrivilegeException(\"createSpecificMember\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().createServiceMember(sess, vo, candidate, specificUserOwners, groups);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\treturn this.createMember(sess, vo, candidate, new ArrayList<>());\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(candidate, \"candidate\");\n-\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\tfor (Group group: groups) {\n-\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_Candidate_List<Group>_policy\", vo, group)) {\n-\t\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_Candidate_List<Group>_policy\", vo)) {\n-\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().createMember(sess, vo, candidate, groups);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\treturn this.createMember(sess, vo, extSourceName, extSourceType, login, candidate, null);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tUtils.notNull(extSourceName, \"extSourceName\");\n-\t\tUtils.notNull(extSourceType, \"extSourceType\");\n-\t\tUtils.notNull(login, \"login\");\n-\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\tfor (Group group: groups) {\n-\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_String_Candidate_List<Group>_policy\", vo, group)) {\n-\t\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_String_Candidate_List<Group>_policy\", vo)) {\n-\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().createMember(sess, vo, extSourceName, extSourceType, login, candidate, groups);\n-\t}\n-\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\treturn this.createMember(sess, vo, extSourceName, extSourceType, extSourceLoa, login, candidate, null);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tUtils.notNull(extSourceName, \"extSourceName\");\n-\t\tUtils.notNull(extSourceType, \"extSourceType\");\n-\t\tUtils.notNull(login, \"login\");\n-\n-\t\tUtils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n-\t\tUtils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n-\n-\t\t// Authorization\n-\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\tfor (Group group: groups) {\n-\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_int_String_Candidate_List<Group>_policy\", vo, group)) {\n-\t\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_int_String_Candidate_List<Group>_policy\", vo)) {\n-\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().createMember(sess, vo, extSourceName, extSourceType, extSourceLoa, login, candidate, groups);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, User user) throws AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\treturn this.createMember(sess, vo, user, new ArrayList<>());\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where user \" + user + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\tfor (Group group: groups) {\n-\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_User_List<Group>_policy\", vo, group, user)) {\n-\t\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_User_List<Group>_policy\", vo, user)) {\n-\t\t\t\tthrow new PrivilegeException(\"createMember\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().createMember(sess, vo, user, groups);\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException {\n-\t\treturn this.createMember(sess, vo, extSource, login, new ArrayList<>());\n-\t}\n-\n-\t@Override\n-\tpublic Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\t\tgetPerunBl().getExtSourcesManagerBl().checkExtSourceExists(sess, extSource);\n-\n-\t\t// if any group is not from the vo, throw an exception\n-\t\tif (groups != null) {\n-\t\t\tfor (Group group : groups) {\n-\t\t\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\t\t\tif (group.getVoId() != vo.getId())\n-\t\t\t\t\tthrow new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where user with login \" + login + \" from ExtSource \" + extSource + \" should be added.\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", Arrays.asList(vo, extSource))) {\n-\t\t\t//also group admin of all affected groups is ok\n-\t\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\t\tfor (Group group: groups) {\n-\t\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", group)) {\n-\t\t\t\t\t\tthrow new PrivilegeException(sess, \"createMember - from login and extSource\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//ExtSource has to be assigned to at least one of the groups\n-\t\t\t\tboolean groupContainsExtSource = groups.stream()\n-\t\t\t\t\t.map(group -> getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group))\n-\t\t\t\t\t.anyMatch(extSources -> extSources.contains(extSource));\n-\t\t\t\tif (!groupContainsExtSource) {\n-\t\t\t\t\tthrow new PrivilegeException(sess, \"createMember - from login and extSource\");\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new PrivilegeException(sess, \"createMember - from login and extSource\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// we run async validation\n-\t\tMember member = getMembersManagerBl().createMember(sess, vo, extSource, login, groups);\n-\t\tgetMembersManagerBl().validateMemberAsync(sess, member);\n-\t\treturn member;\n-\t}\n-\n-\t@Override\n-\tpublic Member getMemberByUserExtSource(PerunSession sess, Vo vo, UserExtSource uea) throws VoNotExistsException, MemberNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMemberByUserExtSource_Vo_UserExtSource_policy\", Arrays.asList(vo, uea))) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberByUserExtSource\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMemberByUserExtSource(sess, vo, uea);\n-\t}\n-\n-\t@Override\n-\tpublic Member getMemberById(PerunSession sess, int id) throws MemberNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tMember member = getMembersManagerBl().getMemberById(sess, id);\n-\n-\t\t//  Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMemberById_int_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberById\");\n-\t\t}\n-\n-\t\treturn member;\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> getMembersByIds(PerunSession sess, List<Integer> ids) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembersByIds_List<Integer>_policy\")) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembersByIds\");\n-\t\t}\n-\n-\t\tList<Member> members = getMembersManagerBl().getMembersByIds(sess, ids);\n-\t\tmembers.removeIf(member -> !AuthzResolver.authorizedInternal(sess, \"filter-getMembersByIds_List<Integer>_policy\", member));\n-\n-\t\treturn members;\n-\t}\n-\n-\t@Override\n-\tpublic Member getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMemberByUser_Vo_User_policy\", Arrays.asList(vo, user))) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberByUser\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMemberByUser(sess, vo, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> getMembersByUser(PerunSession sess, User user) throws PrivilegeException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembersByUser_User_policy\", user)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembersByUser\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMembersByUser(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> getMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembers_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembers\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMembers(sess, vo);\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembers_Vo_Status_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembers\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMembers(sess, vo, status);\n-\t}\n-\n-\t@Override\n-\tpublic RichMember getRichMemberById(PerunSession sess, int id) throws PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tMember member = getPerunBl().getMembersManagerBl().getMemberById(sess, id);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMemberById_int_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMemberById\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().getRichMember(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMemberWithAttributes_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMemberWithAttributes(sess, member));\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_List<AttributeDefinition>_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo, attrsDef), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_List<String>_Group_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, allowedStatuses, group), group, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributesByNames_Vo_List<String>_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembersWithAttributesByNames\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributesByNames(sess, vo, attrsNames), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Vo_List<String>_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getCompleteRichMembers\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, vo, attrsNames), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Vo_List<String>_List<String>_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getCompleteRichMembers\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, vo, attrsNames, allowedStatuses), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws PrivilegeException, ParentGroupNotExistsException, GroupNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_List<String>_boolean_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getCompleteRichMembers\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, group, attrsNames, lookingInParentGroup), group, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tperunBl.getResourcesManagerBl().checkResourceExists(sess, resource);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_Resource_List<String>_List<String>_policy\", Arrays.asList(group, resource)))\n-\t\t\tthrow new PrivilegeException(sess, \"getCompleteRichMembers\");\n-\n-\t\t//TODO: method filterOnlyAllowedAttributes can work only with user and member attributes\n-\t\t//return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, group, resource, attrsNames, allowedStatuses), true);\n-\t\treturn getMembersManagerBl().getCompleteRichMembers(sess, group, resource, attrsNames, allowedStatuses);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws PrivilegeException, ParentGroupNotExistsException, GroupNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_List<String>_List<String>_boolean_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getCompleteRichMembers\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, group, attrsNames, allowedStatuses, lookingInParentGroup), group, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString, boolean onlySponsored) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Vo_List<String>_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findCompleteRichMembers\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, vo, attrsNames, searchString, onlySponsored), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Vo_List<String>_List<String>_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findCompleteRichMembers\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, vo, attrsNames, allowedStatuses, searchString), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_List<String>_List<String>_String_policy\")) {\n-\t\t\tthrow new PrivilegeException(sess, \"findCompleteRichMembers\");\n-\t\t}\n-\n-\t\tList<RichMember> richMembers = getMembersManagerBl().findCompleteRichMembers(sess, attrsNames, allowedStatuses, searchString);\n-\n-\t\tIterator<RichMember> richMemberIter = richMembers.iterator();\n-\t\twhile (richMemberIter.hasNext()) {\n-\t\t\tRichMember richMember = richMemberIter.next();\n-\n-\t\t\tif (AuthzResolver.authorizedInternal(sess, \"filter-findCompleteRichMembers_List<String>_List<String>_String_policy\", richMember))\n-\t\t\t\tcontinue;\n-\n-\t\t\tList<Resource> membersResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, richMember);\n-\t\t\tboolean found = false;\n-\t\t\tfor (Resource resource : membersResources) {\n-\t\t\t\tif (AuthzResolver.authorizedInternal(sess, \"filter-findCompleteRichMembers_List<String>_List<String>_String_policy\", resource)) {\n-\t\t\t\t\tfound = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (found) continue;\n-\n-\t\t\trichMemberIter.remove();\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, richMembers, null, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Group_List<String>_String_boolean_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findCompleteRichMembers\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, group, attrsNames, searchString, lookingInParentGroup), group, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Group_List<String>_List<String>_String_boolean_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findCompleteRichMembers\");\n-\t\t}\n \n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, group, attrsNames, allowedStatuses, searchString, lookingInParentGroup), group, true);\n-\t}\n \n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributesByNames_Group_List<String>_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembersWithAttributesByNames\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributesByNames(sess, group, attrsNames), group, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Group_List<AttributeDefinition>_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, group, attrsDef), group, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Group group) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tperunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Group_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembers\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, group), group, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembers\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, vo), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Vo_Status_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembers\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, vo, status), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_Status_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo, status), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic int getMembersCount(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembersCount_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembersCount\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMembersCount(sess, vo);\n-\t}\n-\n-\t@Override\n-\tpublic int getMembersCount(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getMembersCount_Vo_Status_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMembersCount\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMembersCount(sess, vo, status);\n-\t}\n-\n-\t@Override\n-\tpublic Vo getMemberVo(PerunSession sess, Member member) throws MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t//TODO Authorization\n-\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\treturn getMembersManagerBl().getMemberVo(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> findMembersByName(PerunSession sess, String searchString) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findMembersByName_String_policy\", Collections.emptyList())) {\n-\t\t\tthrow new PrivilegeException(sess, \"findMembersByName\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().findMembersByName(sess, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findMembersByNameInVo_Vo_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findMembersByNameInVo\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().findMembersByNameInVo(sess, vo, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findMembersInVo_Vo_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findMembersInVo\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().findMembersInVo(sess, vo, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findMembersInGroup_Group_String_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findMembersInGroup\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().findMembersInGroup(sess, group, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInGroup_Group_String_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findRichMembersInGroup\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInGroup(sess, group, searchString), group, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, getPerunBl().getGroupsManagerBl().getParentGroup(sess, group));\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findMembersInParentGroup_Group_String_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findMembersInParentGroup\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().findMembersInParentGroup(sess, group, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInParentGroup_Group_String_policy\", group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findRichMembersInParentGroup\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInParentGroup(sess, group, searchString), group, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findRichMembersInVo_Vo_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findRichMembersInVo\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersInVo(sess, vo, searchString, false), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInVo_Vo_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"findRichMembersWithAttributesInVo\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInVo(sess, vo, searchString), null, true);\n-\t}\n-\n-\t@Override\n-\tpublic Member setStatus(PerunSession sess, Member member, Status status) throws PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"setStatus_Member_Status_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"setStatus\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().setStatus(sess, member, status);\n-\t}\n-\n-\t@Override\n-\tpublic void suspendMemberTo(PerunSession sess, Member member, Date suspendedTo) throws MemberNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(suspendedTo, \"suspendedTo\");\n-\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"suspendMemberTo_Member_Date_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"suspendMemberTo\");\n-\t\t}\n-\n-\t\tmembersManagerBl.suspendMemberTo(sess, member, suspendedTo);\n-\t}\n-\n-\t@Override\n-\tpublic void unsuspendMember(PerunSession sess, Member member) throws MemberNotExistsException, MemberNotSuspendedException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"unsuspendMember_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"unsuspendMember\");\n-\t\t}\n-\n-\t\tmembersManagerBl.unsuspendMember(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic Member validateMemberAsync(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"validateMemberAsync_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"validateMemberAsync\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().validateMemberAsync(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic void extendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException, ExtendMembershipException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"extendMembership_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"extendMembership\");\n-\t\t}\n-\n-\t\tgetMembersManagerBl().extendMembership(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic boolean canExtendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n+public class MembersManagerEntry implements MembersManager {\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"canExtendMembership_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"extendMembership\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().canExtendMembership(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws PrivilegeException,\n-\t\t\tMemberNotExistsException, ExtendMembershipException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"canExtendMembershipWithReason_Member_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"canExtendMembershipWithReason\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().canExtendMembershipWithReason(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"canBeMember_Vo_User_String_policy\", Arrays.asList(vo, user))) {\n-\t\t\tthrow new PrivilegeException(sess, \"canBeMember\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().canBeMember(sess, vo, user, loa);\n-\t}\n-\n-\t@Override\n-\tpublic boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws\n-\t\t\tVoNotExistsException, ExtendMembershipException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"canBeMemberWithReason_Vo_User_String_policy\", Arrays.asList(vo, user))) {\n-\t\t\tthrow new PrivilegeException(sess, \"canBeMemberWithReason\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().canBeMemberWithReason(sess, vo, user, loa);\n-\t}\n-\n-\t@Override\n-\tpublic Member getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(extSourceName, \"extSourceName\");\n-\t\tUtils.notNull(extLogin, \"extLogin\");\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"getMemberByExtSourceNameAndExtLogin_Vo_String_String_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberByExtSourceNameAndExtLogin\");\n-\t\t}\n-\n-\t\treturn getMembersManagerBl().getMemberByExtSourceNameAndExtLogin(sess, vo, extSourceName, extLogin);\n-\t}\n-\n-\t@Override\n-\tpublic Date getNewExtendMembership(PerunSession sess, Member member) throws MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\treturn getMembersManagerBl().getNewExtendMembership(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws VoNotExistsException, ExtendMembershipException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\t\tUtils.notNull(loa, \"loa\");\n-\n-\t\treturn getMembersManagerBl().getNewExtendMembership(sess, vo, loa);\n-\t}\n-\n-\t@Override\n-\tpublic void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException {\n-\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"sendPasswordResetLinkEmail_Member_String_String_String_String_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"sendPasswordResetLinkEmail\");\n-\t\t}\n-\n-\t\t//check if attribute exists, throws AttributeNotExistsException\n-\t\tAttribute mailAttribute = null;\n-\t\tAttributeDefinition ad = getPerunBl().getAttributesManager().getAttributeDefinition(sess, mailAttributeUrn);\n-\n-\n-\t\ttry {\n-\t\t\tif (ad.getEntity().equals(\"user\")) {\n-\t\t\t\tUser user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tmailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, user, mailAttributeUrn);\n-\t\t\t}\n-\t\t\tif (ad.getEntity().equals(\"member\")) {\n-\t\t\t\tmailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, member, mailAttributeUrn);\n-\t\t\t}\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tif (mailAttribute == null) {\n-\t\t\tthrow new InternalErrorException(\"MailAttribute should not be null.\");\n-\t\t}\n-\t\tString mailAddress = mailAttribute.valueAsString();\n-\t\tif (mailAddress == null) {\n-\t\t\tthrow new PasswordResetMailNotExistsException(\"Member \" + member.getId() + \" doesn't have the attribute \" +\n-\t\t\t\tmailAttributeUrn + \" set.\");\n-\t\t}\n-\n-\t\tgetMembersManagerBl().sendPasswordResetLinkEmail(sess, member, namespace, url, mailAddress, language);\n-\t}\n-\n-\t@Override\n-\tpublic void sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"sendAccountActivationLinkEmail_Member_String_String_String_String_policy\", member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"sendAccountActivationLinkEmail\");\n-\t\t}\n-\n-\t\t//check if attribute exists, throws AttributeNotExistsException\n-\t\tAttribute mailAttribute = null;\n-\t\tAttributeDefinition attributeDefinition = getPerunBl().getAttributesManager().getAttributeDefinition(sess, mailAttributeUrn);\n-\n-\t\ttry {\n-\t\t\tif (attributeDefinition.getEntity().equals(\"user\")) {\n-\t\t\t\tUser user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tmailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, user, mailAttributeUrn);\n-\t\t\t}\n-\t\t\tif (attributeDefinition.getEntity().equals(\"member\")) {\n-\t\t\t\tmailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, member, mailAttributeUrn);\n-\t\t\t}\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tif (mailAttribute == null) {\n-\t\t\tthrow new InternalErrorException(\"MailAttribute should not be null.\");\n-\t\t}\n-\t\tString mailAddress = mailAttribute.valueAsString();\n-\t\tif (mailAddress == null) {\n-\t\t\tthrow new PasswordResetMailNotExistsException(\"Member \" + member.getId() + \" doesn't have the attribute \" +\n-\t\t\t\tmailAttributeUrn + \" set.\");\n-\t\t}\n-\n-\t\tgetMembersManagerBl().sendAccountActivationLinkEmail(sess, member, namespace, url, mailAddress, language);\n-\t}\n-\n-\t@Override\n-\tpublic RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name,\n-\t                                        String password, String email, User sponsor, LocalDate validityTo,\n-\t\t\t\t\t\t\t\t\t\t\tboolean sendActivationLink, String url)\n-\t\t\tthrows PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException,\n-\t\t\tExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException,\n-\t\t\tUserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException {\n-\t\tUtils.checkPerunSession(session);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\tUtils.notNull(namespace, \"namespace\");\n-\t\tif (name.get(\"guestName\") == null) {\n-\t\t\tUtils.notNull(name.get(\"firstName\"), \"firstName\");\n-\t\t\tUtils.notNull(name.get(\"lastName\"), \"lastName\");\n-\t\t}\n-\t\tUtils.notNull(password, \"password\");\n-\n-\t\tString nameForLog = name.containsKey(\"guestName\") ? name.get(\"guestName\") : name.get(\"firstName\") + \" \" + name.get(\"lastName\");\n-\t\tlog.info(\"createSponsoredMember(vo={},namespace='{}',guestName='{}',sponsor={}\", vo.getShortName(), namespace, nameForLog, sponsor == null ? \"null\" : sponsor.getId());\n-\n-\t\tif (sponsor == null) {\n-\t\t\t//sponsor is the caller, authorization is checked in Bl\n-\t\t\tsponsor = session.getPerunPrincipal().getUser();\n-\t\t} else {\n-\t\t\t//Authorization\n-\t\t\tif (!AuthzResolver.authorizedInternal(session, \"createSponsoredMember_Vo_String_Map<String_String>_String_User_LocalDate_policy\", Arrays.asList(vo, sponsor))) {\n-\t\t\t\tthrow new PrivilegeException(session, \"createSponsoredMember\");\n-\t\t\t}\n-\t\t}\n-\t\t//create the sponsored member\n-\t\treturn membersManagerBl.getRichMemberWithAttributes(session, membersManagerBl.createSponsoredMember(session, vo, namespace, name, password, email, sponsor, validityTo, sendActivationLink, url, true));\n-\t}\n-\n-\t@Override\n-\tpublic RichMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace,\n-\t                                     String password, User sponsor, LocalDate validityTo)\n-\t\tthrows PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException,\n-\t\tExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException,\n-\t\tUserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException {\n-\n-\t\tUtils.checkPerunSession(session);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\tUtils.notNull(userToBeSponsored, \"userToBeSponsored\");\n-\t\tUtils.notNull(namespace, \"namespace\");\n-\t\tUtils.notNull(password, \"password\");\n-\n-\t\tlog.debug(\"setSponsoredMember(vo={},namespace='{}',displayName='{}',sponsor={}\", vo.getShortName(), namespace, userToBeSponsored.getFirstName() + \" \" + userToBeSponsored.getLastName(), sponsor == null ? \"null\" : sponsor.getId());\n-\n-\t\tif (sponsor == null) {\n-\t\t\t//sponsor is the caller, authorization is checked in Bl\n-\t\t\tsponsor = session.getPerunPrincipal().getUser();\n-\t\t} else {\n-\t\t\t//Authorization\n-\t\t\tif (!AuthzResolver.authorizedInternal(session, \"setSponsoredMember_Vo_User_String_String_User_LocalDate_policy\", vo, sponsor)) {\n-\t\t\t\tthrow new PrivilegeException(session, \"setSponsoredMember\");\n-\t\t\t}\n-\t\t}\n-\t\t//create the sponsored member\n-\t\treturn membersManagerBl.getRichMember(session, membersManagerBl.setSponsoredMember(session, vo, userToBeSponsored, namespace, password, sponsor, validityTo, true));\n-\t}\n-\n-\t@Override\n-\tpublic Map<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n-\t\t\tList<String> data, String header, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\tUtils.notNull(namespace, \"namespace\");\n-\t\tUtils.notNull(data, \"names\");\n-\t\tUtils.notNull(header, \"header\");\n-\n-\t\tif (sponsor == null) {\n-\t\t\t//sponsor is the caller, authorization is checked in Bl\n-\t\t\tsponsor = sess.getPerunPrincipal().getUser();\n-\t\t} else {\n-\t\t\t//Authorization\n-\t\t\tif (!AuthzResolver.authorizedInternal(sess,\n-\t\t\t\t\t\"createSponsoredMembersFromCSV_Vo_String_List<String>_User_policy\", Arrays.asList(vo, sponsor))) {\n-\t\t\t\tthrow new PrivilegeException(sess, \"createSponsoredMembers\");\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn membersManagerBl\n-\t\t\t\t.createSponsoredMembersFromCSV(sess, vo, namespace, data, header, sponsor, validityTo, sendActivationLink, url, true);\n-\t}\n-\n-\t@Override\n-\tpublic Map<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(session);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\tUtils.notNull(namespace, \"namespace\");\n-\t\tUtils.notNull(names, \"names\");\n-\n-\t\tif (sponsor == null) {\n-\t\t\t//sponsor is the caller, authorization is checked in Bl\n-\t\t\tsponsor = session.getPerunPrincipal().getUser();\n-\t\t} else {\n-\t\t\t//Authorization\n-\t\t\tif (!AuthzResolver.authorizedInternal(session, \"createSponsoredMembers_Vo_String_List<String>_User_policy\", Arrays.asList(vo, sponsor))) {\n-\t\t\t\tthrow new PrivilegeException(session, \"createSponsoredMembers\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// create sponsored members\n-\t\treturn membersManagerBl.createSponsoredMembers(session, vo, namespace, names, email, sponsor, validityTo, sendActivationLink, url, true);\n-\t}\n-\n-\t@Override\n-\tpublic RichMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotExistsException, AlreadySponsoredMemberException, UserNotInRoleException, PrivilegeException, AlreadySponsorException {\n-\t\tUtils.checkPerunSession(session);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(session, sponsoredMember);\n-\n-\t\tif (sponsor == null) {\n-\t\t\t//sponsor is the caller\n-\t\t\tsponsor = session.getPerunPrincipal().getUser();\n-\t\t}\n-\n-\t\tVo memberVo;\n-\t\ttry {\n-\t\t\tmemberVo = perunBl.getVosManagerBl().getVoById(session, sponsoredMember.getVoId());\n-\t\t} catch (VoNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(session, \"setSponsorshipForMember_Member_User_LocalDate_policy\", memberVo, sponsor)) {\n-\t\t\tthrow new PrivilegeException(session, \"setSponsorshipForMember\");\n-\t\t}\n-\n-\t\t//set member to be sponsored\n-\t\treturn membersManagerBl.getRichMember(session, membersManagerBl.setSponsorshipForMember(session, sponsoredMember, sponsor, validityTo));\n-\t}\n-\n-\t@Override\n-\tpublic RichMember unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotExistsException, MemberNotSponsoredException, PrivilegeException {\n-\t\tUtils.checkPerunSession(session);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(session, sponsoredMember);\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(session, \"unsetSponsorshipForMember_Member_policy\", sponsoredMember)) {\n-\t\t\tthrow new PrivilegeException(session, \"unsetSponsorshipForMember\");\n-\t\t}\n-\n-\t\t//unset sponsorship for member\n-\t\treturn membersManagerBl.getRichMember(session, membersManagerBl.unsetSponsorshipForMember(session, sponsoredMember));\n-\t}\n-\n-\t@Override\n-\tpublic RichMember sponsorMember(PerunSession session, Member sponsored, User sponsor, LocalDate validityTo) throws PrivilegeException, MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException {\n-\t\tUtils.checkPerunSession(session);\n-\t\tUtils.notNull(sponsored, \"sponsored\");\n-\t\tUtils.notNull(sponsor, \"sponsor\");\n-\t\tlog.debug(\"sponsorMember(sponsored={},sponsor={}\", sponsored.getId(), sponsor.getId());\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(session, \"sponsored-sponsorMember_Member_User_LocalDate_policy\", sponsored) ||\n-\t\t    !AuthzResolver.authorizedInternal(session, \"sponsor-sponsorMember_Member_User_LocalDate_policy\", sponsor)) {\n-\t\t\tthrow new PrivilegeException(session, \"sponsorMember\");\n-\t\t}\n-\t\t//create the link between sponsored and sponsoring users\n-\t\treturn membersManagerBl.getRichMember(session, membersManagerBl.sponsorMember(session, sponsored, sponsor, validityTo));\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user, List<String> attrNames) throws AttributeNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\t\tperunBl.getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_User_List<String>_policy\", Arrays.asList(vo, user))) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembers\");\n-\t\t}\n-\n-\t\tList<AttributeDefinition> attributeDefinitions = new ArrayList<>();\n-\t\tfor (String attrName : attrNames) {\n-\t\t\tattributeDefinitions.add(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName));\n-\t\t}\n-\n-\t\t//Filter members based on authorization\n-\t\tList<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo, user).stream()\n-\t\t\t.filter(member -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_User_List<String>_policy\", member, vo))\n-\t\t\t.collect(Collectors.toList());\n-\t\t//Basic rich Members without attributes\n-\t\tList<RichMember> richMembers = membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n-\t\t//Enriched rich members with attributes by list of attributes\n-\t\trichMembers = membersManagerBl.convertMembersToRichMembersWithAttributes(sess, richMembers, attributeDefinitions);\n-\t\t//RichMembers with filtered attributes by rights from session\n-\t\trichMembers = membersManagerBl.filterOnlyAllowedAttributes(sess, richMembers, null, true);\n-\n-\t\treturn richMembers;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws PrivilegeException, VoNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\tUtils.notNull(user, \"user\");\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\t\tperunBl.getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_User_policy\", Arrays.asList(vo, user))) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembers\");\n-\t\t}\n-\n-\t\t//Filter members based on authorization\n-\t\tList<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo, user).stream()\n-\t\t\t.filter(member -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_User_policy\", member, vo))\n-\t\t\t.collect(Collectors.toList());\n-\n-\t\treturn membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t//Authorization\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembers\");\n-\t\t}\n-\n-\t\t//Filter members based on authorization\n-\t\tList<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo).stream()\n-\t\t\t.filter(member -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_policy\", member, vo))\n-\t\t\t.collect(Collectors.toList());\n-\n-\t\treturn membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n-\t}\n-\n-\t@Override\n-\tpublic List<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\t\n-\t\t//Authorization\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembersAndTheirSponsors\");\n-\t\t}\n-\n-\t\treturn getAllSponsoredMembersAndTheirSponsors(sess, vo, attrNames).stream()\n-\t\t\t.filter(memberWithSponsors -> AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembersAndTheirSponsors_Vo_policy\", memberWithSponsors.getMember(), vo))\n-\t\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t@Override\n-\tpublic List<MemberWithSponsors> getAllSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\n-\t\tperunBl.getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t//Authorization\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"getAllSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllSponsoredMembersAndTheirSponsors\");\n-\t\t}\n-\n-\t\tList<AttributeDefinition> attrsDef = new ArrayList<>();\n-\t\tfor (String attrName : attrNames) {\n-\t\t\tattrsDef.add(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName));\n-\t\t}\n-\n-\t\tList<RichMember> richMembers = membersManagerBl.convertMembersToRichMembersWithAttributes(sess,\n-\t\t\tmembersManagerBl.convertMembersToRichMembers(sess, membersManagerBl.getSponsoredMembers(sess, vo)),\n-\t\t\tattrsDef);\n-\t\trichMembers = membersManagerBl.filterOnlyAllowedAttributes(sess, richMembers, null, true);\n-\n-\t\treturn richMembers.stream()\n-\t\t\t.map(member -> convertMemberToMemberWithSponsors(sess, member))\n-\t\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t@Override\n-\tpublic String extendExpirationForSponsoredMember(PerunSession sess, Member sponsoredMember, User sponsorUser) throws PrivilegeException, MemberNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(sponsoredMember, \"sponsoredMember\");\n-\t\tUtils.notNull(sponsorUser, \"sponsorUser\");\n-\n-\t\tperunBl.getMembersManagerBl().checkMemberExists(sess, sponsoredMember);\n-\t\tperunBl.getUsersManagerBl().checkUserExists(sess, sponsorUser);\n-\n-\t\t//Authorization\n-\t\tif (!(AuthzResolver.authorizedInternal(sess, \"extendExpirationForSponsoredMember_Member_User_policy\", sponsoredMember))) {\n-\t\t\tthrow new PrivilegeException(sess, \"extendExpirationForSponsoredMember\");\n-\t\t}\n-\n-\t\treturn membersManagerBl.extendExpirationForSponsoredMember(sess,sponsoredMember,sponsorUser);\n-\t}\n-\n-\t@Override\n-\tpublic void removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(sponsoredMember, \"sponsoredMember\");\n-\t\tUtils.notNull(sponsorToRemove, \"sponsorToRemove\");\n-\t\tlog.info(\"removeSponsor(sponsoredMember={},sponsorToRemove={}\", sponsoredMember.getId(), sponsorToRemove.getId());\n-\n-\t\t//Get the VO to which sponsoredMember belongs\n-\t\tVo vo = membersManagerBl.getMemberVo(sess, sponsoredMember);\n-\n-\t\t//Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"sponsored-removeSponsor_Member_User_policy\", sponsoredMember) ||\n-\t\t    !AuthzResolver.authorizedInternal(sess, \"sponsor-removeSponsor_Member_User_policy\", sponsorToRemove)) {\n-\t\t\tthrow new PrivilegeException(sess, \"removeSponsor\");\n-\t\t}\n-\n-\t\t//Check that sponsoring user has a role SPONSOR for the VO\n-\t\tif (!getPerunBl().getVosManagerBl().isUserInRoleForVo(sess, sponsorToRemove, Role.SPONSOR, vo, true)) {\n-\t\t\tthrow new PrivilegeException(sess, \"user \" + sponsorToRemove.getId() + \" is not in role SPONSOR for VO \" + vo.getId());\n-\t\t}\n-\t\t//remove sponsor\n-\t\tmembersManagerBl.removeSponsor(sess,sponsoredMember, sponsorToRemove);\n-\t}\n-\n-\t@Override\n-\tpublic void updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor,\n-\t                                      LocalDate newValidity)\n-\t\t\tthrows PrivilegeException, SponsorshipDoesNotExistException, MemberNotExistsException,\n-\t\t\t       UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(sponsoredMember, \"sponsoredMember\");\n-\t\tUtils.notNull(sponsor, \"sponsor\");\n-\n-\t\tperunBl.getMembersManagerBl().checkMemberExists(sess, sponsoredMember);\n-\t\tperunBl.getUsersManagerBl().checkUserExists(sess, sponsor);\n-\n-\t\tVo memberVo;\n-\t\ttry {\n-\t\t\tmemberVo = perunBl.getVosManagerBl().getVoById(sess, sponsoredMember.getVoId());\n-\t\t} catch (VoNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\tif (!AuthzResolver.authorizedInternal(sess, \"updateSponsorshipValidity_Member_User_LocalDate\", memberVo,\n-\t\t\t\tsponsor)) {\n-\t\t\tthrow new PrivilegeException(\"updateSponsorshipValidity\");\n-\t\t}\n-\n-\t\tmembersManagerBl.updateSponsorshipValidity(sess, sponsoredMember, sponsor, newValidity);\n-\t}\n-\n-\t/**\n-\t * Converts member to member with sponsors and sets all his sponsors.\n-\t *\n-\t * @param sess perun session\n-\t * @param member sponsored member\n-\t * @return member with sponsors\n-\t */\n-\tprivate MemberWithSponsors convertMemberToMemberWithSponsors(PerunSession sess, RichMember member) {\n-\t\tMemberWithSponsors memberWithSponsors = new MemberWithSponsors(member);\n-\n-\t\tList<Sponsor> sponsors = getPerunBl().getUsersManagerBl().getSponsors(sess, member).stream()\n-\t\t\t\t.map(user -> membersManagerBl.convertUserToSponsor(sess, user, member))\n-\t\t\t\t.collect(Collectors.toList());\n-\t\tmemberWithSponsors.setSponsors(sponsors);\n-\n-\t\treturn memberWithSponsors;\n-\t}\n-\n-\t/**\n-\t * Gets the membersManagerBl for this instance.\n-\t *\n-\t * @return The membersManagerBl.\n-\t */\n-\tpublic MembersManagerBl getMembersManagerBl() {\n-\t\treturn this.membersManagerBl;\n-\t}\n-\n-\t/**\n-\t * Sets the perunBl for this instance.\n-\t *\n-\t * @param perunBl The perunBl.\n-\t */\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\t/**\n-\t * Sets the membersManagerBl for this instance.\n-\t *\n-\t * @param membersManagerBl The membersManagerBl.\n-\t */\n-\tpublic void setMembersManagerBl(MembersManagerBl membersManagerBl) {\n-\t\tthis.membersManagerBl = membersManagerBl;\n-\t}\n-\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n-}\n+ final static Logger log = LoggerFactory.getLogger(MembersManagerEntry.class);\n+ private MembersManagerBl membersManagerBl;\n+ private PerunBl perunBl;\n+\n+ /**\n+  * Constructor.\n+  */\n+\n+\n+ public MembersManagerEntry(PerunBl perunBl) {\n+  this.perunBl = perunBl;\n+  this.membersManagerBl = perunBl.getMembersManagerBl();\n+ }\n+\n+ public MembersManagerEntry() {}\n+\n+\n+ @Override\n+ public void deleteMember(PerunSession sess, Member member) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n+  Utils.checkPerunSession(sess);\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"deleteMember_Member_policy\", member)) {\n+   throw new PrivilegeException(sess, \"deleteMember\");\n+  }\n+  getMembersManagerBl().deleteMember(sess, member);\n+ }\n+\n+ @Override\n+ public void deleteMembers(PerunSession sess, List<Member> members) throws MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n+  Utils.checkPerunSession(sess);\n+  for (Member member : members) {\n+   getMembersManagerBl().checkMemberExists(sess, member);\n+  }\n+\n+  // Authorization\n+\n+  for (Member member : members) {\n+   if (!AuthzResolver.authorizedInternal(sess, \"deleteMembers_List<Member>_policy\", member)) {\n+    throw new PrivilegeException(sess, \"deleteMembers\");\n+   }\n+  }\n+  getMembersManagerBl().deleteMembers(sess, members);\n+ }\n+\n+ @Override\n+ public void deleteAllMembers(PerunSession sess, Vo vo) throws VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"deleteAllMembers_Vo_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"deleteAllMembers\");\n+  }\n+  getMembersManagerBl().deleteAllMembers(sess, vo);\n+ }\n+\n+ @Override\n+ public Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException {\n+  return this.createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, null);\n+ }\n+\n+ @Override\n+ public Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(specificUserType, \"specificUserType\");\n+  Utils.notNull(candidate, \"candidate\");\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+  if (specificUserOwners.isEmpty()) throw new InternalErrorException(\"List of specificUserOwners of \" + candidate + \" can't be empty.\");\n+  for (User u : specificUserOwners) {\n+   getPerunBl().getUsersManagerBl().checkUserExists(sess, u);\n+  }\n+  if (!specificUserType.equals(SpecificUserType.SERVICE)) throw new InternalErrorException(\"Only service user type is allowed.\");\n+\n+  // if any group is not from the vo, throw an exception\n+  if (groups != null) {\n+\n+   for (Group group : groups) {\n+    perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+    if (group.getVoId() != vo.getId()) throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n+   }\n+  }\n+\n+  // Authorization\n+  if (groups != null && !groups.isEmpty()) {\n+\n+   for (Group group : groups) {\n+    if (!AuthzResolver.authorizedInternal(sess, \"createSpecificMember_Vo_Candidate_List<User>_SpecificUserType_List<Group>_policy\", vo, group)) {\n+     throw new PrivilegeException(\"createSpecificMember\");\n+    }\n+   }\n+  } else {\n+   if (!AuthzResolver.authorizedInternal(sess, \"createSpecificMember_Vo_Candidate_List<User>_SpecificUserType_List<Group>_policy\", vo)) {\n+    throw new PrivilegeException(\"createSpecificMember\");\n+   }\n+  }\n+\n+  return getMembersManagerBl().createServiceMember(sess, vo, candidate, specificUserOwners, groups);\n+ }\n+\n+ @Override\n+ public Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+  Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+  Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+  return this.createMember(sess, vo, candidate, new ArrayList<>());\n+ }\n+\n+ @Override\n+ public Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(candidate, \"candidate\");\n+  Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+  Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // if any group is not from the vo, throw an exception\n+  if (groups != null) {\n+\n+   for (Group group : groups) {\n+    perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+    if (group.getVoId() != vo.getId()) throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n+   }\n+  }\n+\n+  // Authorization\n+  if (groups != null && !groups.isEmpty()) {\n+\n+   for (Group group : groups) {\n+    if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_Candidate_List<Group>_policy\", vo, group)) {\n+     throw new PrivilegeException(\"createMember\");\n+    }\n+   }\n+  } else {\n+   if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_Candidate_List<Group>_policy\", vo)) {\n+    throw new PrivilegeException(\"createMember\");\n+   }\n+  }\n+\n+  return getMembersManagerBl().createMember(sess, vo, candidate, groups);\n+ }\n+\n+ @Override\n+ public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+  Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+  Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+  return this.createMember(sess, vo, extSourceName, extSourceType, login, candidate, null);\n+ }\n+\n+ @Override\n+ public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(extSourceName, \"extSourceName\");\n+  Utils.notNull(extSourceType, \"extSourceType\");\n+  Utils.notNull(login, \"login\");\n+  Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+  Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+\n+  // if any group is not from the vo, throw an exception\n+  if (groups != null) {\n+\n+   for (Group group : groups) {\n+    perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+    if (group.getVoId() != vo.getId()) throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n+   }\n+  }\n+\n+  // Authorization\n+  if (groups != null && !groups.isEmpty()) {\n+\n+   for (Group group : groups) {\n+    if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_String_Candidate_List<Group>_policy\", vo, group)) {\n+     throw new PrivilegeException(\"createMember\");\n+    }\n+   }\n+  } else {\n+   if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_String_Candidate_List<Group>_policy\", vo)) {\n+    throw new PrivilegeException(\"createMember\");\n+   }\n+  }\n+\n+  return getMembersManagerBl().createMember(sess, vo, extSourceName, extSourceType, login, candidate, groups);\n+ }\n+\n+ @Override\n+ public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+  Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+  Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+  return this.createMember(sess, vo, extSourceName, extSourceType, extSourceLoa, login, candidate, null);\n+ }\n+\n+ @Override\n+ public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+\n+  // if any group is not from the vo, throw an exception\n+  if (groups != null) {\n+\n+   for (Group group : groups) {\n+    perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+    if (group.getVoId() != vo.getId()) throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where candidate \" + candidate + \" should be added.\");\n+   }\n+  }\n+  Utils.notNull(extSourceName, \"extSourceName\");\n+  Utils.notNull(extSourceType, \"extSourceType\");\n+  Utils.notNull(login, \"login\");\n+  Utils.checkMaxLength(\"TitleBefore\", candidate.getTitleBefore(), 40);\n+  Utils.checkMaxLength(\"TitleAfter\", candidate.getTitleAfter(), 40);\n+\n+  // Authorization\n+  if (groups != null && !groups.isEmpty()) {\n+\n+   for (Group group : groups) {\n+    if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_int_String_Candidate_List<Group>_policy\", vo, group)) {\n+     throw new PrivilegeException(\"createMember\");\n+    }\n+   }\n+  } else {\n+   if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_String_String_int_String_Candidate_List<Group>_policy\", vo)) {\n+    throw new PrivilegeException(\"createMember\");\n+   }\n+  }\n+\n+  return getMembersManagerBl().createMember(sess, vo, extSourceName, extSourceType, extSourceLoa, login, candidate, groups);\n+ }\n+\n+ @Override\n+ public Member createMember(PerunSession sess, Vo vo, User user) throws AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+  return this.createMember(sess, vo, user, new ArrayList<>());\n+ }\n+\n+ @Override\n+ public Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws AlreadyMemberException, WrongAttributeValueException, WrongReferenceAttributeValueException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // if any group is not from the vo, throw an exception\n+  if (groups != null) {\n+\n+   for (Group group : groups) {\n+    perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+    if (group.getVoId() != vo.getId()) throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where user \" + user + \" should be added.\");\n+   }\n+  }\n+\n+  // Authorization\n+  if (groups != null && !groups.isEmpty()) {\n+\n+   for (Group group : groups) {\n+    if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_User_List<Group>_policy\", vo, group, user)) {\n+     throw new PrivilegeException(\"createMember\");\n+    }\n+   }\n+  } else {\n+   if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_User_List<Group>_policy\", vo, user)) {\n+    throw new PrivilegeException(\"createMember\");\n+   }\n+  }\n+\n+  return getMembersManagerBl().createMember(sess, vo, user, groups);\n+ }\n+\n+ @Override\n+ public Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException {\n+  return this.createMember(sess, vo, extSource, login, new ArrayList<>());\n+ }\n+\n+ @Override\n+ public Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+  getPerunBl().getExtSourcesManagerBl().checkExtSourceExists(sess, extSource);\n+\n+  // if any group is not from the vo, throw an exception\n+  if (groups != null) {\n+\n+   for (Group group : groups) {\n+    perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+    if (group.getVoId() != vo.getId()) throw new InternalErrorException(\"Group \" + group + \" is not from the vo \" + vo + \" where user with login \" + login + \" from ExtSource \" + extSource + \" should be added.\");\n+   }\n+  }\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", Arrays.asList(vo, extSource))) {\n+   //also group admin of all affected groups is ok\n+   if (groups != null && !groups.isEmpty()) {\n+\n+    for (Group group : groups) {\n+     if (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", group)) {\n+      throw new PrivilegeException(sess, \"createMember - from login and extSource\");\n+     }\n+    }\n+    //ExtSource has to be assigned to at least one of the groups\n+\n+    boolean groupContainsExtSource = groups.stream().map(group->getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group)).anyMatch(extSources->extSources.contains(extSource));\n+    if (!groupContainsExtSource) {\n+     throw new PrivilegeException(sess, \"createMember - from login and extSource\");\n+    }\n+   } else {\n+    throw new PrivilegeException(sess, \"createMember - from login and extSource\");\n+   }\n+  }\n+\n+  // we run async validation\n+  Member member = getMembersManagerBl().createMember(sess, vo, extSource, login, groups);\n+  getMembersManagerBl().validateMemberAsync(sess, member);\n+  return member;\n+ }\n+\n+ @Override\n+ public Member getMemberByUserExtSource(PerunSession sess, Vo vo, UserExtSource uea) throws VoNotExistsException, MemberNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getMemberByUserExtSource_Vo_UserExtSource_policy\", Arrays.asList(vo, uea))) {\n+   throw new PrivilegeException(sess, \"getMemberByUserExtSource\");\n+  }\n+\n+  return getMembersManagerBl().getMemberByUserExtSource(sess, vo, uea);\n+ }\n+\n+ @Override\n+ public Member getMemberById(PerunSession sess, int id) throws MemberNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  Member member = getMembersManagerBl().getMemberById(sess, id);\n+\n+  //  Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getMemberById_int_policy\", member)) {\n+   throw new PrivilegeException(sess, \"getMemberById\");\n+  }\n+\n+  return member;\n+ }\n+\n+ @Override\n+ public List<Member> getMembersByIds(PerunSession sess, List<Integer> ids) throws PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getMembersByIds_List<Integer>_policy\")) {\n+   throw new PrivilegeException(sess, \"getMembersByIds\");\n+  }\n+  List<Member> members = getMembersManagerBl().getMembersByIds(sess, ids);\n+  members.removeIf(member->!AuthzResolver.authorizedInternal(sess, \"filter-getMembersByIds_List<Integer>_policy\", member));\n+  return members;\n+ }\n+\n+ @Override\n+ public Member getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+  getPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getMemberByUser_Vo_User_policy\", Arrays.asList(vo, user))) {\n+   throw new PrivilegeException(sess, \"getMemberByUser\");\n+  }\n+\n+  return getMembersManagerBl().getMemberByUser(sess, vo, user);\n+ }\n+\n+ @Override\n+ public List<Member> getMembersByUser(PerunSession sess, User user) throws PrivilegeException, UserNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getMembersByUser_User_policy\", user)) {\n+   throw new PrivilegeException(sess, \"getMembersByUser\");\n+  }\n+\n+  return getMembersManagerBl().getMembersByUser(sess, user);\n+ }\n+\n+ @Override\n+ public List<Member> getMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getMembers_Vo_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getMembers\");\n+  }\n+\n+  return getMembersManagerBl().getMembers(sess, vo);\n+ }\n+\n+ @Override\n+ public List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getMembers_Vo_Status_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getMembers\");\n+  }\n+\n+  return getMembersManagerBl().getMembers(sess, vo, status);\n+ }\n+\n+ @Override\n+ public RichMember getRichMemberById(PerunSession sess, int id) throws PrivilegeException, MemberNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Member member = getPerunBl().getMembersManagerBl().getMemberById(sess, id);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMemberById_int_policy\", member)) {\n+   throw new PrivilegeException(sess, \"getRichMemberById\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().getRichMember(sess, member);\n+ }\n+\n+ @Override\n+ public RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMemberWithAttributes_Member_policy\", member)) {\n+   throw new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMemberWithAttributes(sess, member));\n+ }\n+\n+ @Override\n+ public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_List<AttributeDefinition>_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo, attrsDef), null, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_List<String>_Group_policy\", group)) {\n+   throw new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, allowedStatuses, group), group, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributesByNames_Vo_List<String>_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getRichMembersWithAttributesByNames\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributesByNames(sess, vo, attrsNames), null, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Vo_List<String>_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getCompleteRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, vo, attrsNames), null, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws PrivilegeException, VoNotExistsException, AttributeNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Vo_List<String>_List<String>_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getCompleteRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, vo, attrsNames, allowedStatuses), null, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws PrivilegeException, ParentGroupNotExistsException, GroupNotExistsException, AttributeNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_List<String>_boolean_policy\", group)) {\n+   throw new PrivilegeException(sess, \"getCompleteRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess,\n+  getMembersManagerBl().getCompleteRichMembers(sess, group, attrsNames, lookingInParentGroup),\n+  group, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+  perunBl.getResourcesManagerBl().checkResourceExists(sess, resource);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess,\n+                                        \"getCompleteRichMembers_Group_Resource_List<String>_List<String>_policy\",\n+                                        Arrays.asList(group, resource))) throw new PrivilegeException(sess, \"getCompleteRichMembers\");\n+\n+  //TODO: method filterOnlyAllowedAttributes can work only with user and member attributes\n+  //return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getCompleteRichMembers(sess, group, resource, attrsNames, allowedStatuses), true);\n+  return getMembersManagerBl().getCompleteRichMembers(sess, group, resource, attrsNames, allowedStatuses);\n+ }\n+\n+ @Override\n+ public List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws PrivilegeException, ParentGroupNotExistsException, GroupNotExistsException, AttributeNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getCompleteRichMembers_Group_List<String>_List<String>_boolean_policy\", group)) {\n+   throw new PrivilegeException(sess, \"getCompleteRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess,\n+  getMembersManagerBl().getCompleteRichMembers(sess, group, attrsNames, allowedStatuses, lookingInParentGroup),\n+  group, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess,\n+                                                 Vo vo,\n+                                                 List<String> attrsNames,\n+                                                 String searchString, boolean onlySponsored) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Vo_List<String>_String_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"findCompleteRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess,\n+  getMembersManagerBl().findCompleteRichMembers(sess, vo, attrsNames, searchString, onlySponsored),\n+  null, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Vo_List<String>_List<String>_String_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"findCompleteRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess,\n+  getMembersManagerBl().findCompleteRichMembers(sess, vo, attrsNames, allowedStatuses, searchString),\n+  null, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_List<String>_List<String>_String_policy\")) {\n+   throw new PrivilegeException(sess, \"findCompleteRichMembers\");\n+  }\n+  List<RichMember> richMembers = getMembersManagerBl().findCompleteRichMembers(sess, attrsNames, allowedStatuses, searchString);\n+  Iterator<RichMember> richMemberIter = richMembers.iterator();\n+  while (richMemberIter.hasNext()) {\n+   RichMember richMember = richMemberIter.next();\n+   if (AuthzResolver.authorizedInternal(sess, \"filter-findCompleteRichMembers_List<String>_List<String>_String_policy\", richMember)) continue;\n+   List<Resource> membersResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, richMember);\n+   boolean found = false;\n+   for (Resource resource : membersResources) {\n+    if (AuthzResolver.authorizedInternal(sess, \"filter-findCompleteRichMembers_List<String>_List<String>_String_policy\", resource)) {\n+     found = true;\n+     break;\n+    }\n+   }\n+   if (found) continue;\n+   richMemberIter.remove();\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, richMembers, null, false);\n+ }\n+\n+ @Override\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Group_List<String>_String_boolean_policy\", group)) {\n+   throw new PrivilegeException(sess, \"findCompleteRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess,\n+  getMembersManagerBl().findCompleteRichMembers(sess, group, attrsNames, searchString, lookingInParentGroup),\n+  group, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findCompleteRichMembers_Group_List<String>_List<String>_String_boolean_policy\", group)) {\n+   throw new PrivilegeException(sess, \"findCompleteRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findCompleteRichMembers(sess, group, attrsNames, allowedStatuses, searchString, lookingInParentGroup), group, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws PrivilegeException, GroupNotExistsException, AttributeNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributesByNames_Group_List<String>_policy\", group)) {\n+   throw new PrivilegeException(sess, \"getRichMembersWithAttributesByNames\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributesByNames(sess, group, attrsNames), group, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Group_List<AttributeDefinition>_policy\", group)) {\n+   throw new PrivilegeException(sess, \"getRichMemberWithAttributes\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, group, attrsDef), group, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getRichMembers(PerunSession sess, Group group) throws PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Group_policy\", group)) {\n+   throw new PrivilegeException(sess, \"getRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, group), group, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Vo_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, vo), null, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMembers_Vo_Status_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembers(sess, vo, status), null, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo), null, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getRichMembersWithAttributes_Vo_Status_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getRichMembersWithAttributes\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().getRichMembersWithAttributes(sess, vo, status), null, true);\n+ }\n+\n+ @Override\n+ public int getMembersCount(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getMembersCount_Vo_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getMembersCount\");\n+  }\n+\n+  return getMembersManagerBl().getMembersCount(sess, vo);\n+ }\n+\n+ @Override\n+ public int getMembersCount(PerunSession sess, Vo vo, Status status) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getMembersCount_Vo_Status_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getMembersCount\");\n+  }\n+\n+  return getMembersManagerBl().getMembersCount(sess, vo, status);\n+ }\n+\n+ @Override\n+ public Vo getMemberVo(PerunSession sess, Member member) throws MemberNotExistsException {\n+  Utils.checkPerunSession(sess);\n+\n+  //TODO Authorization\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+  return getMembersManagerBl().getMemberVo(sess, member);\n+ }\n+\n+ @Override\n+ public List<Member> findMembersByName(PerunSession sess, String searchString) throws PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findMembersByName_String_policy\", Collections.emptyList())) {\n+   throw new PrivilegeException(sess, \"findMembersByName\");\n+  }\n+\n+  return getMembersManagerBl().findMembersByName(sess, searchString);\n+ }\n+\n+ @Override\n+ public List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findMembersByNameInVo_Vo_String_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"findMembersByNameInVo\");\n+  }\n+\n+  return getMembersManagerBl().findMembersByNameInVo(sess, vo, searchString);\n+ }\n+\n+ @Override\n+ public List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findMembersInVo_Vo_String_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"findMembersInVo\");\n+  }\n+\n+  return getMembersManagerBl().findMembersInVo(sess, vo, searchString);\n+ }\n+\n+ @Override\n+ public List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findMembersInGroup_Group_String_policy\", group)) {\n+   throw new PrivilegeException(sess, \"findMembersInGroup\");\n+  }\n+\n+  return getMembersManagerBl().findMembersInGroup(sess, group, searchString);\n+ }\n+\n+ @Override\n+ public List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInGroup_Group_String_policy\", group)) {\n+   throw new PrivilegeException(sess, \"findRichMembersInGroup\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInGroup(sess, group, searchString), group, true);\n+ }\n+\n+ @Override\n+ public List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n+  getPerunBl().getGroupsManagerBl().checkGroupExists(sess, getPerunBl().getGroupsManagerBl().getParentGroup(sess, group));\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findMembersInParentGroup_Group_String_policy\", group)) {\n+   throw new PrivilegeException(sess, \"findMembersInParentGroup\");\n+  }\n+\n+  return getMembersManagerBl().findMembersInParentGroup(sess, group, searchString);\n+ }\n+\n+ @Override\n+ public List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInParentGroup_Group_String_policy\", group)) {\n+   throw new PrivilegeException(sess, \"findRichMembersInParentGroup\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess,\n+  getMembersManagerBl().findRichMembersWithAttributesInParentGroup(sess, group, searchString),\n+  group, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findRichMembersInVo_Vo_String_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"findRichMembersInVo\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersInVo(sess, vo, searchString, false), null, true);\n+ }\n+\n+ @Override\n+ public List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"findRichMembersWithAttributesInVo_Vo_String_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"findRichMembersWithAttributesInVo\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getMembersManagerBl().findRichMembersWithAttributesInVo(sess, vo, searchString), null, true);\n+ }\n+\n+ @Override\n+ public Member setStatus(PerunSession sess, Member member, Status status) throws PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException {\n+  Utils.checkPerunSession(sess);\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"setStatus_Member_Status_policy\", member)) {\n+   throw new PrivilegeException(sess, \"setStatus\");\n+  }\n+\n+  return getMembersManagerBl().setStatus(sess, member, status);\n+ }\n+\n+ @Override\n+ public void suspendMemberTo(PerunSession sess, Member member, Date suspendedTo) throws MemberNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(suspendedTo, \"suspendedTo\");\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"suspendMemberTo_Member_Date_policy\", member)) {\n+   throw new PrivilegeException(sess, \"suspendMemberTo\");\n+  }\n+  membersManagerBl.suspendMemberTo(sess, member, suspendedTo);\n+ }\n+\n+ @Override\n+ public void unsuspendMember(PerunSession sess, Member member) throws MemberNotExistsException, MemberNotSuspendedException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"unsuspendMember_Member_policy\", member)) {\n+   throw new PrivilegeException(sess, \"unsuspendMember\");\n+  }\n+  membersManagerBl.unsuspendMember(sess, member);\n+ }\n+\n+ @Override\n+ public Member validateMemberAsync(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"validateMemberAsync_Member_policy\", member)) {\n+   throw new PrivilegeException(sess, \"validateMemberAsync\");\n+  }\n+\n+  return getMembersManagerBl().validateMemberAsync(sess, member);\n+ }\n+\n+ @Override\n+ public void extendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException, ExtendMembershipException {\n+  Utils.checkPerunSession(sess);\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"extendMembership_Member_policy\", member)) {\n+   throw new PrivilegeException(sess, \"extendMembership\");\n+  }\n+  getMembersManagerBl().extendMembership(sess, member);\n+ }\n+\n+ @Override\n+ public boolean canExtendMembership(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"canExtendMembership_Member_policy\", member)) {\n+   throw new PrivilegeException(sess, \"extendMembership\");\n+  }\n+\n+  return getMembersManagerBl().canExtendMembership(sess, member);\n+ }\n+\n+ @Override\n+ public boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws PrivilegeException, MemberNotExistsException, ExtendMembershipException {\n+  Utils.checkPerunSession(sess);\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"canExtendMembershipWithReason_Member_policy\", member)) {\n+   throw new PrivilegeException(sess, \"canExtendMembershipWithReason\");\n+  }\n+\n+  return getMembersManagerBl().canExtendMembershipWithReason(sess, member);\n+ }\n+\n+ @Override\n+ public boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"canBeMember_Vo_User_String_policy\", Arrays.asList(vo, user))) {\n+   throw new PrivilegeException(sess, \"canBeMember\");\n+  }\n+\n+  return getMembersManagerBl().canBeMember(sess, vo, user, loa);\n+ }\n+\n+ @Override\n+ public boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws VoNotExistsException, ExtendMembershipException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"canBeMemberWithReason_Vo_User_String_policy\", Arrays.asList(vo, user))) {\n+   throw new PrivilegeException(sess, \"canBeMemberWithReason\");\n+  }\n+\n+  return getMembersManagerBl().canBeMemberWithReason(sess, vo, user, loa);\n+ }\n+\n+ @Override\n+ public Member getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, VoNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(extSourceName, \"extSourceName\");\n+  Utils.notNull(extLogin, \"extLogin\");\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getMemberByExtSourceNameAndExtLogin_Vo_String_String_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getMemberByExtSourceNameAndExtLogin\");\n+  }\n+\n+  return getMembersManagerBl().getMemberByExtSourceNameAndExtLogin(sess, vo, extSourceName, extLogin);\n+ }\n+\n+ @Override\n+ public Date getNewExtendMembership(PerunSession sess, Member member) throws MemberNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+  return getMembersManagerBl().getNewExtendMembership(sess, member);\n+ }\n+\n+ @Override\n+ public Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws VoNotExistsException, ExtendMembershipException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+  Utils.notNull(loa, \"loa\");\n+  return getMembersManagerBl().getNewExtendMembership(sess, vo, loa);\n+ }\n+\n+ @Override\n+ public void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"sendPasswordResetLinkEmail_Member_String_String_String_String_policy\", member)) {\n+   throw new PrivilegeException(sess, \"sendPasswordResetLinkEmail\");\n+  }\n+\n+  //check if attribute exists, throws AttributeNotExistsException\n+  Attribute mailAttribute = null;\n+  AttributeDefinition ad = getPerunBl().getAttributesManager().getAttributeDefinition(sess, mailAttributeUrn);\n+  try {\n+   if (ad.getEntity().equals(\"user\")) {\n+    User user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n+    mailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, user, mailAttributeUrn);\n+   }\n+   if (ad.getEntity().equals(\"member\")) {\n+    mailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, member, mailAttributeUrn);\n+   }\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+  if (mailAttribute == null) {\n+   throw new InternalErrorException(\"MailAttribute should not be null.\");\n+  }\n+  String mailAddress = mailAttribute.valueAsString();\n+  if (mailAddress == null) {\n+   throw new PasswordResetMailNotExistsException(\"Member \" + member.getId() + \" doesn't have the attribute \" + mailAttributeUrn + \" set.\");\n+  }\n+  getMembersManagerBl().sendPasswordResetLinkEmail(sess, member, namespace, url, mailAddress, language);\n+ }\n+\n+ @Override\n+ public void sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAttributeUrn, String language) throws PrivilegeException, MemberNotExistsException, UserNotExistsException, AttributeNotExistsException, PasswordResetMailNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"sendAccountActivationLinkEmail_Member_String_String_String_String_policy\", member)) {\n+   throw new PrivilegeException(sess, \"sendAccountActivationLinkEmail\");\n+  }\n+\n+  //check if attribute exists, throws AttributeNotExistsException\n+  Attribute mailAttribute = null;\n+  AttributeDefinition attributeDefinition = getPerunBl().getAttributesManager().getAttributeDefinition(sess, mailAttributeUrn);\n+  try {\n+   if (attributeDefinition.getEntity().equals(\"user\")) {\n+    User user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n+    mailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, user, mailAttributeUrn);\n+   }\n+   if (attributeDefinition.getEntity().equals(\"member\")) {\n+    mailAttribute = getPerunBl().getAttributesManager().getAttribute(sess, member, mailAttributeUrn);\n+   }\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+  if (mailAttribute == null) {\n+   throw new InternalErrorException(\"MailAttribute should not be null.\");\n+  }\n+  String mailAddress = mailAttribute.valueAsString();\n+  if (mailAddress == null) {\n+   throw new PasswordResetMailNotExistsException(\"Member \" + member.getId() + \" doesn't have the attribute \" + mailAttributeUrn + \" set.\");\n+  }\n+  getMembersManagerBl().sendAccountActivationLinkEmail(sess, member, namespace, url, mailAddress, language);\n+ }\n+\n+ @Override\n+ public RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException {\n+  Utils.checkPerunSession(session);\n+  Utils.notNull(vo, \"vo\");\n+  Utils.notNull(namespace, \"namespace\");\n+  if (name.get(\"guestName\") == null) {\n+   Utils.notNull(name.get(\"firstName\"), \"firstName\");\n+   Utils.notNull(name.get(\"lastName\"), \"lastName\");\n+  }\n+  Utils.notNull(password, \"password\");\n+  String nameForLog = name.containsKey(\"guestName\") ? name.get(\"guestName\") : name.get(\"firstName\") + \" \" + name.get(\"lastName\");\n+  log.info(\"createSponsoredMember(vo={},namespace='{}',guestName='{}',sponsor={}\", vo.getShortName(), namespace, nameForLog, sponsor == null ? \"null\" : sponsor.getId());\n+  if (sponsor == null) {\n+   //sponsor is the caller, authorization is checked in Bl\n+   sponsor = session.getPerunPrincipal().getUser();\n+  } else {\n+   //Authorization\n+   if (!AuthzResolver.authorizedInternal(session,\n+                                         \"createSponsoredMember_Vo_String_Map<String_String>_String_User_LocalDate_policy\",\n+                                         Arrays.asList(vo, sponsor))) {\n+    throw new PrivilegeException(session, \"createSponsoredMember\");\n+   }\n+  }\n+  //create the sponsored member\n+\n+  return membersManagerBl.getRichMemberWithAttributes(session, membersManagerBl.createSponsoredMember(session, vo, namespace, name, password, email, sponsor, validityTo, sendActivationLink, url, true));\n+ }\n+\n+ @Override\n+ public RichMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, LocalDate validityTo) throws PrivilegeException, AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException {\n+  Utils.checkPerunSession(session);\n+  Utils.notNull(vo, \"vo\");\n+  Utils.notNull(userToBeSponsored, \"userToBeSponsored\");\n+  Utils.notNull(namespace, \"namespace\");\n+  Utils.notNull(password, \"password\");\n+  log.debug(\"setSponsoredMember(vo={},namespace='{}',displayName='{}',sponsor={}\", vo.getShortName(), namespace, userToBeSponsored.getFirstName() + \" \" + userToBeSponsored.getLastName(), sponsor == null ? \"null\" : sponsor.getId());\n+  if (sponsor == null) {\n+   //sponsor is the caller, authorization is checked in Bl\n+   sponsor = session.getPerunPrincipal().getUser();\n+  } else {\n+   //Authorization\n+   if (!AuthzResolver.authorizedInternal(session, \"setSponsoredMember_Vo_User_String_String_User_LocalDate_policy\", vo, sponsor)) {\n+    throw new PrivilegeException(session, \"setSponsoredMember\");\n+   }\n+  }\n+  //create the sponsored member\n+\n+  return membersManagerBl.getRichMember(session,\n+  membersManagerBl.setSponsoredMember(session, vo, userToBeSponsored, namespace, password, sponsor, validityTo, true));\n+ }\n+\n+ @Override\n+ public Map<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace, List<String> data, String header, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(vo, \"vo\");\n+  Utils.notNull(namespace, \"namespace\");\n+  Utils.notNull(data, \"names\");\n+  Utils.notNull(header, \"header\");\n+  if (sponsor == null) {\n+   //sponsor is the caller, authorization is checked in Bl\n+   sponsor = sess.getPerunPrincipal().getUser();\n+  } else {\n+   //Authorization\n+   if (!AuthzResolver.authorizedInternal(sess, \"createSponsoredMembersFromCSV_Vo_String_List<String>_User_policy\", Arrays.asList(vo, sponsor))) {\n+    throw new PrivilegeException(sess, \"createSponsoredMembers\");\n+   }\n+  }\n+\n+  return membersManagerBl.createSponsoredMembersFromCSV(sess, vo, namespace, data, header, sponsor, validityTo, sendActivationLink, url, true);\n+ }\n+\n+ @Override\n+ public Map<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url) throws PrivilegeException {\n+  Utils.checkPerunSession(session);\n+  Utils.notNull(vo, \"vo\");\n+  Utils.notNull(namespace, \"namespace\");\n+  Utils.notNull(names, \"names\");\n+  if (sponsor == null) {\n+   //sponsor is the caller, authorization is checked in Bl\n+   sponsor = session.getPerunPrincipal().getUser();\n+  } else {\n+   //Authorization\n+   if (!AuthzResolver.authorizedInternal(session, \"createSponsoredMembers_Vo_String_List<String>_User_policy\", Arrays.asList(vo, sponsor))) {\n+    throw new PrivilegeException(session, \"createSponsoredMembers\");\n+   }\n+  }\n+\n+  // create sponsored members\n+\n+  return membersManagerBl.createSponsoredMembers(session, vo, namespace, names, email, sponsor, validityTo, sendActivationLink, url, true);\n+ }\n+\n+ @Override\n+ public RichMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotExistsException, AlreadySponsoredMemberException, UserNotInRoleException, PrivilegeException, AlreadySponsorException {\n+  Utils.checkPerunSession(session);\n+  getPerunBl().getMembersManagerBl().checkMemberExists(session, sponsoredMember);\n+  if (sponsor == null) {\n+   //sponsor is the caller\n+   sponsor = session.getPerunPrincipal().getUser();\n+  }\n+  Vo memberVo;\n+  try {\n+   memberVo = perunBl.getVosManagerBl().getVoById(session, sponsoredMember.getVoId());\n+  } catch (VoNotExistsException e) {\n+   throw new InternalErrorException(e);\n+  }\n+\n+  //Authorization\n+  if (!AuthzResolver.authorizedInternal(session, \"setSponsorshipForMember_Member_User_LocalDate_policy\", memberVo, sponsor)) {\n+   throw new PrivilegeException(session, \"setSponsorshipForMember\");\n+  }\n+\n+  //set member to be sponsored\n+\n+  return membersManagerBl.getRichMember(session, membersManagerBl.setSponsorshipForMember(session, sponsoredMember, sponsor, validityTo));\n+ }\n+\n+ @Override\n+ public RichMember unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotExistsException, MemberNotSponsoredException, PrivilegeException {\n+  Utils.checkPerunSession(session);\n+  getPerunBl().getMembersManagerBl().checkMemberExists(session, sponsoredMember);\n+\n+  //Authorization\n+  if (!AuthzResolver.authorizedInternal(session, \"unsetSponsorshipForMember_Member_policy\", sponsoredMember)) {\n+   throw new PrivilegeException(session, \"unsetSponsorshipForMember\");\n+  }\n+\n+  //unset sponsorship for member\n+\n+  return membersManagerBl.getRichMember(session, membersManagerBl.unsetSponsorshipForMember(session, sponsoredMember));\n+ }\n+\n+ @Override\n+ public RichMember sponsorMember(PerunSession session, Member sponsored, User sponsor, LocalDate validityTo) throws PrivilegeException, MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException {\n+  Utils.checkPerunSession(session);\n+  Utils.notNull(sponsored, \"sponsored\");\n+  Utils.notNull(sponsor, \"sponsor\");\n+  log.debug(\"sponsorMember(sponsored={},sponsor={}\", sponsored.getId(), sponsor.getId());\n+\n+  //Authorization\n+  if (!AuthzResolver.authorizedInternal(session, \"sponsored-sponsorMember_Member_User_LocalDate_policy\", sponsored) || !AuthzResolver.authorizedInternal(session, \"sponsor-sponsorMember_Member_User_LocalDate_policy\", sponsor)) {\n+   throw new PrivilegeException(session, \"sponsorMember\");\n+  }\n+  //create the link between sponsored and sponsoring users\n+\n+  return membersManagerBl.getRichMember(session, membersManagerBl.sponsorMember(session, sponsored, sponsor, validityTo));\n+ }\n+\n+ @Override\n+ public List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user, List<String> attrNames) throws AttributeNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+  perunBl.getUsersManagerBl().checkUserExists(sess, user);\n+\n+  //Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_User_List<String>_policy\", Arrays.asList(vo, user))) {\n+   throw new PrivilegeException(sess, \"getSponsoredMembers\");\n+  }\n+  List<AttributeDefinition> attributeDefinitions = new ArrayList<>();\n+  for (String attrName : attrNames) {\n+   attributeDefinitions.add(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName));\n+  }\n+\n+  //Filter members based on authorization\n+  List<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo, user).stream().filter(member->AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_User_List<String>_policy\", member, vo)).collect(Collectors.toList());\n+  //Basic rich Members without attributes\n+  List<RichMember> richMembers = membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n+  //Enriched rich members with attributes by list of attributes\n+  richMembers = membersManagerBl.convertMembersToRichMembersWithAttributes(sess, richMembers, attributeDefinitions);\n+  //RichMembers with filtered attributes by rights from session\n+  richMembers = membersManagerBl.filterOnlyAllowedAttributes(sess, richMembers, null, true);\n+  return richMembers;\n+ }\n+\n+ @Override\n+ public List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws PrivilegeException, VoNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(vo, \"vo\");\n+  Utils.notNull(user, \"user\");\n+  perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+  perunBl.getUsersManagerBl().checkUserExists(sess, user);\n+\n+  //Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_User_policy\", Arrays.asList(vo, user))) {\n+   throw new PrivilegeException(sess, \"getSponsoredMembers\");\n+  }\n+\n+  //Filter members based on authorization\n+  List<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo, user).stream().filter(member->AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_User_policy\", member, vo)).collect(Collectors.toList());\n+  return membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n+ }\n+\n+ @Override\n+ public List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(vo, \"vo\");\n+  perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+\n+  //Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembers_Vo_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getSponsoredMembers\");\n+  }\n+\n+  //Filter members based on authorization\n+  List<Member> filteredMembers = membersManagerBl.getSponsoredMembers(sess, vo).stream().filter(member->AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembers_Vo_policy\", member, vo)).collect(Collectors.toList());\n+  return membersManagerBl.convertMembersToRichMembers(sess, filteredMembers);\n+ }\n+\n+ @Override\n+ public List<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(vo, \"vo\");\n+  \n+  //Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getSponsoredMembersAndTheirSponsors\");\n+  }\n+\n+  return getAllSponsoredMembersAndTheirSponsors(sess, vo, attrNames).stream().filter(memberWithSponsors->AuthzResolver.authorizedInternal(sess, \"filter-getSponsoredMembersAndTheirSponsors_Vo_policy\", memberWithSponsors.getMember(), vo)).collect(Collectors.toList());\n+ }\n+\n+ @Override\n+ public List<MemberWithSponsors> getAllSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(vo, \"vo\");\n+  perunBl.getVosManagerBl().checkVoExists(sess, vo);\n+\n+  //Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"getAllSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n+   throw new PrivilegeException(sess, \"getAllSponsoredMembersAndTheirSponsors\");\n+  }\n+  List<AttributeDefinition> attrsDef = new ArrayList<>();\n+  for (String attrName : attrNames) {\n+   attrsDef.add(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName));\n+  }\n+  List<RichMember> richMembers = membersManagerBl.convertMembersToRichMembersWithAttributes(sess,\n+  membersManagerBl.convertMembersToRichMembers(sess, membersManagerBl.getSponsoredMembers(sess, vo)),\n+  attrsDef);\n+  richMembers = membersManagerBl.filterOnlyAllowedAttributes(sess, richMembers, null, true);\n+  return richMembers.stream().map(member->convertMemberToMemberWithSponsors(sess, member)).collect(Collectors.toList());\n+ }\n+\n+ @Override\n+ public String extendExpirationForSponsoredMember(PerunSession sess, Member sponsoredMember, User sponsorUser) throws PrivilegeException, MemberNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(sponsoredMember, \"sponsoredMember\");\n+  Utils.notNull(sponsorUser, \"sponsorUser\");\n+  perunBl.getMembersManagerBl().checkMemberExists(sess, sponsoredMember);\n+  perunBl.getUsersManagerBl().checkUserExists(sess, sponsorUser);\n+\n+  //Authorization\n+  if (!(AuthzResolver.authorizedInternal(sess, \"extendExpirationForSponsoredMember_Member_User_policy\", sponsoredMember))) {\n+   throw new PrivilegeException(sess, \"extendExpirationForSponsoredMember\");\n+  }\n+\n+  return membersManagerBl.extendExpirationForSponsoredMember(sess, sponsoredMember, sponsorUser);\n+ }\n+\n+ @Override\n+ public void removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(sponsoredMember, \"sponsoredMember\");\n+  Utils.notNull(sponsorToRemove, \"sponsorToRemove\");\n+  log.info(\"removeSponsor(sponsoredMember={},sponsorToRemove={}\",\n+  sponsoredMember.getId(),\n+  sponsorToRemove.getId());\n+\n+  //Get the VO to which sponsoredMember belongs\n+  Vo vo = membersManagerBl.getMemberVo(sess, sponsoredMember);\n+\n+  //Authorization\n+  if (!AuthzResolver.authorizedInternal(sess, \"sponsored-removeSponsor_Member_User_policy\", sponsoredMember) || !AuthzResolver.authorizedInternal(sess, \"sponsor-removeSponsor_Member_User_policy\", sponsorToRemove)) {\n+   throw new PrivilegeException(sess, \"removeSponsor\");\n+  }\n+\n+  //Check that sponsoring user has a role SPONSOR for the VO\n+  if (!getPerunBl().getVosManagerBl().isUserInRoleForVo(sess, sponsorToRemove, Role.SPONSOR, vo, true)) {\n+   throw new PrivilegeException(sess, \"user \" + sponsorToRemove.getId() + \" is not in role SPONSOR for VO \" + vo.getId());\n+  }\n+  //remove sponsor\n+  membersManagerBl.removeSponsor(sess, sponsoredMember, sponsorToRemove);\n+ }\n+\n+ @Override\n+ public void updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor, LocalDate newValidity) throws PrivilegeException, SponsorshipDoesNotExistException, MemberNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(sponsoredMember, \"sponsoredMember\");\n+  Utils.notNull(sponsor, \"sponsor\");\n+  perunBl.getMembersManagerBl().checkMemberExists(sess, sponsoredMember);\n+  perunBl.getUsersManagerBl().checkUserExists(sess, sponsor);\n+  Vo memberVo;\n+  try {\n+   memberVo = perunBl.getVosManagerBl().getVoById(sess, sponsoredMember.getVoId());\n+  } catch (VoNotExistsException e) {\n+   throw new InternalErrorException(e);\n+  }\n+  if (!AuthzResolver.authorizedInternal(sess, \"updateSponsorshipValidity_Member_User_LocalDate\", memberVo, sponsor)) {\n+   throw new PrivilegeException(\"updateSponsorshipValidity\");\n+  }\n+  membersManagerBl.updateSponsorshipValidity(sess, sponsoredMember, sponsor, newValidity);\n+ }\n+\n+ /**\n+  * Converts member to member with sponsors and sets all his sponsors.\n+  *\n+  * @param sess perun session\n+  * @param member sponsored member\n+  * @return member with sponsors\n+  */\n+\n+\n+ private MemberWithSponsors convertMemberToMemberWithSponsors(PerunSession sess, RichMember member) {\n+  MemberWithSponsors memberWithSponsors = new MemberWithSponsors(member);\n+  List<Sponsor> sponsors = getPerunBl().getUsersManagerBl().getSponsors(sess, member).stream().map(user->membersManagerBl.convertUserToSponsor(sess, user, member)).collect(Collectors.toList());\n+  memberWithSponsors.setSponsors(sponsors);\n+  return memberWithSponsors;\n+ }\n+\n+ /**\n+  * Gets the membersManagerBl for this instance.\n+  *\n+  * @return The membersManagerBl.\n+  */\n+\n+ public MembersManagerBl getMembersManagerBl() {\n+  return this.membersManagerBl;\n+ }\n+\n+ /**\n+  * Sets the perunBl for this instance.\n+  *\n+  * @param perunBl The perunBl.\n+  */\n+\n+ public void setPerunBl(PerunBl perunBl) {\n+  this.perunBl = perunBl;\n+ }\n+\n+ /**\n+  * Sets the membersManagerBl for this instance.\n+  *\n+  * @param membersManagerBl The membersManagerBl.\n+  */\n+\n+ public void setMembersManagerBl(MembersManagerBl membersManagerBl) {\n+  this.membersManagerBl = membersManagerBl;\n+ }\n+\n+ public PerunBl getPerunBl() {\n+  return this.perunBl;\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 2429
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/395/MembersManagerEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/395/MembersManagerEntry.java\nindex b75cc2f4809..69e1ebcc032 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/395/MembersManagerEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/395/MembersManagerEntry.java\n@@ -1456,7 +1456,7 @@ public class MembersManagerEntry implements MembersManager {\n \tpublic List<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n \t\tUtils.checkPerunSession(sess);\n \t\tUtils.notNull(vo, \"vo\");\n-\t\t\n+\n \t\t//Authorization\n \t\tif(!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n \t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembersAndTheirSponsors\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/395/MembersManagerEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/395/MembersManagerEntry.java\nindex b75cc2f4809..a8f2aa4aaed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/395/MembersManagerEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/395/MembersManagerEntry.java\n@@ -1455,8 +1455,9 @@ public class MembersManagerEntry implements MembersManager {\n \t@Override\n \tpublic List<MemberWithSponsors> getSponsoredMembersAndTheirSponsors(PerunSession sess, Vo vo, List<String> attrNames) throws VoNotExistsException, PrivilegeException, AttributeNotExistsException {\n \t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(vo, \"vo\");\n-\t\t\n+\t\tUtils.notNull(vo, \"vo\")\n+\n+\t\t;\n \t\t//Authorization\n \t\tif(!AuthzResolver.authorizedInternal(sess, \"getSponsoredMembersAndTheirSponsors_Vo_policy\", vo)) {\n \t\t\tthrow new PrivilegeException(sess, \"getSponsoredMembersAndTheirSponsors\");\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}