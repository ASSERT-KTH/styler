{
    "project_name": "delight-im-NationSoccer",
    "error_id": "6",
    "information": {
        "errors": [
            {
                "line": "136",
                "column": "92",
                "severity": "error",
                "message": "'+' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\t\t\t}\n\t\t\tif (BuildConfig.DEBUG) {\n\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() +\"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n\t\t\t}\n\t\t}\n\t\tthis.onHandleObtainItem(item);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler/6/GenericPool.java\nindex 0cc2418976c..d9cad1084d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler/6/GenericPool.java\n@@ -133,7 +133,7 @@ public abstract class GenericPool<T> {\n \t\t\t\titem = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n \t\t\t}\n \t\t\tif (BuildConfig.DEBUG) {\n-\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() +\"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n+\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() + \"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n \t\t\t}\n \t\t}\n \t\tthis.onHandleObtainItem(item);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/intellij/6/GenericPool.java\nindex 0cc2418976c..c2f75ae2e87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/intellij/6/GenericPool.java\n@@ -12,159 +12,167 @@ import org.andengine.util.debug.Debug;\n  *\n  * @author Valentin Milea\n  * @author Nicolas Gramlich\n- *\n  * @since 22:19:55 - 31.08.2010\n  */\n public abstract class GenericPool<T> {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\tprivate final ArrayList<T> mAvailableItems;\n-\tprivate final int mGrowth;\n-\tprivate final int mAvailableItemCountMaximum;\n-\n-\tprivate int mUnrecycledItemCount;\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\tpublic GenericPool() {\n-\t\tthis(0);\n-\t}\n-\n-\tpublic GenericPool(final int pInitialSize) {\n-\t\tthis(pInitialSize, 1);\n-\t}\n-\n-\tpublic GenericPool(final int pInitialSize, final int pGrowth) {\n-\t\tthis(pInitialSize, pGrowth, Integer.MAX_VALUE);\n-\t}\n-\n-\tpublic GenericPool(final int pInitialSize, final int pGrowth, final int pAvailableItemsMaximum) {\n-\t\tif (pGrowth <= 0) {\n-\t\t\tthrow new IllegalArgumentException(\"pGrowth must be greater than 0!\");\n-\t\t}\n-\t\tif (pAvailableItemsMaximum < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"pAvailableItemsMaximum must be at least 0!\");\n-\t\t}\n-\n-\t\tthis.mGrowth = pGrowth;\n-\t\tthis.mAvailableItemCountMaximum = pAvailableItemsMaximum;\n-\t\tthis.mAvailableItems = new ArrayList<T>(pInitialSize);\n-\n-\t\tif (pInitialSize > 0) {\n-\t\t\tthis.batchAllocatePoolItems(pInitialSize);\n-\t\t}\n-\t}\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\tpublic synchronized int getUnrecycledItemCount() {\n-\t\treturn this.mUnrecycledItemCount;\n-\t}\n-\n-\tpublic synchronized int getAvailableItemCount() {\n-\t\treturn this.mAvailableItems.size();\n-\t}\n-\n-\tpublic int getAvailableItemCountMaximum() {\n-\t\treturn this.mAvailableItemCountMaximum;\n-\t}\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\tprotected abstract T onAllocatePoolItem();\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\t/**\n-\t * @param pItem every item passes this method just before it gets recycled.\n-\t */\n-\tprotected void onHandleRecycleItem(final T pItem) {\n-\n-\t}\n-\n-\tprotected T onHandleAllocatePoolItem() {\n-\t\treturn this.onAllocatePoolItem();\n-\t}\n-\n-\t/**\n-\t * @param pItem every item that was just obtained from the pool, passes this method.\n-\t */\n-\tprotected void onHandleObtainItem(final T pItem) {\n-\n-\t}\n-\n-\tpublic synchronized void batchAllocatePoolItems(final int pCount) {\n-\t\tfinal ArrayList<T> availableItems = this.mAvailableItems;\n-\n-\t\tint allocationCount = this.mAvailableItemCountMaximum - availableItems.size();\n-\t\tif (pCount < allocationCount) {\n-\t\t\tallocationCount = pCount;\n-\t\t}\n-\n-\t\tfor (int i = allocationCount - 1; i >= 0; i--) {\n-\t\t\tavailableItems.add(this.onHandleAllocatePoolItem());\n-\t\t}\n-\t}\n-\n-\tpublic synchronized T obtainPoolItem() {\n-\t\tfinal T item;\n-\n-\t\tif (this.mAvailableItems.size() > 0) {\n-\t\t\titem = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n-\t\t} else {\n-\t\t\tif (this.mGrowth == 1 || this.mAvailableItemCountMaximum == 0) {\n-\t\t\t\titem = this.onHandleAllocatePoolItem();\n-\t\t\t} else {\n-\t\t\t\tthis.batchAllocatePoolItems(this.mGrowth);\n-\t\t\t\titem = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n-\t\t\t}\n-\t\t\tif (BuildConfig.DEBUG) {\n-\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() +\"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n-\t\t\t}\n-\t\t}\n-\t\tthis.onHandleObtainItem(item);\n-\n-\t\tthis.mUnrecycledItemCount++;\n-\t\treturn item;\n-\t}\n-\n-\tpublic synchronized void recyclePoolItem(final T pItem) {\n-\t\tif (pItem == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Cannot recycle null item!\");\n-\t\t}\n-\n-\t\tthis.onHandleRecycleItem(pItem);\n-\n-\t\tif (this.mAvailableItems.size() < this.mAvailableItemCountMaximum) {\n-\t\t\tthis.mAvailableItems.add(pItem);\n-\t\t}\n-\n-\t\tthis.mUnrecycledItemCount--;\n-\n-\t\tif (this.mUnrecycledItemCount < 0) {\n-\t\t\tDebug.e(\"More items recycled than obtained!\");\n-\t\t}\n-\t}\n-\n-\tpublic synchronized void shufflePoolItems() {\n-\t\tCollections.shuffle(this.mAvailableItems);\n-\t}\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n+    // ===========================================================\n+    // Constants\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Fields\n+    // ===========================================================\n+\n+    private final ArrayList<T> mAvailableItems;\n+    private final int mGrowth;\n+    private final int mAvailableItemCountMaximum;\n+\n+    private int mUnrecycledItemCount;\n+\n+    // ===========================================================\n+    // Constructors\n+    // ===========================================================\n+\n+    public GenericPool() {\n+        this(0);\n+    }\n+\n+    public GenericPool(final int pInitialSize) {\n+        this(pInitialSize, 1);\n+    }\n+\n+    public GenericPool(final int pInitialSize, final int pGrowth) {\n+        this(pInitialSize, pGrowth, Integer.MAX_VALUE);\n+    }\n+\n+    public GenericPool(final int pInitialSize, final int pGrowth,\n+                       final int pAvailableItemsMaximum) {\n+        if (pGrowth <= 0) {\n+            throw new IllegalArgumentException(\n+                \"pGrowth must be greater than 0!\");\n+        }\n+        if (pAvailableItemsMaximum < 0) {\n+            throw new IllegalArgumentException(\n+                \"pAvailableItemsMaximum must be at least 0!\");\n+        }\n+\n+        this.mGrowth = pGrowth;\n+        this.mAvailableItemCountMaximum = pAvailableItemsMaximum;\n+        this.mAvailableItems = new ArrayList<T>(pInitialSize);\n+\n+        if (pInitialSize > 0) {\n+            this.batchAllocatePoolItems(pInitialSize);\n+        }\n+    }\n+\n+    // ===========================================================\n+    // Getter & Setter\n+    // ===========================================================\n+\n+    public synchronized int getUnrecycledItemCount() {\n+        return this.mUnrecycledItemCount;\n+    }\n+\n+    public synchronized int getAvailableItemCount() {\n+        return this.mAvailableItems.size();\n+    }\n+\n+    public int getAvailableItemCountMaximum() {\n+        return this.mAvailableItemCountMaximum;\n+    }\n+\n+    // ===========================================================\n+    // Methods for/from SuperClass/Interfaces\n+    // ===========================================================\n+\n+    protected abstract T onAllocatePoolItem();\n+\n+    // ===========================================================\n+    // Methods\n+    // ===========================================================\n+\n+    /**\n+     * @param pItem every item passes this method just before it gets recycled.\n+     */\n+    protected void onHandleRecycleItem(final T pItem) {\n+\n+    }\n+\n+    protected T onHandleAllocatePoolItem() {\n+        return this.onAllocatePoolItem();\n+    }\n+\n+    /**\n+     * @param pItem every item that was just obtained from the pool, passes this method.\n+     */\n+    protected void onHandleObtainItem(final T pItem) {\n+\n+    }\n+\n+    public synchronized void batchAllocatePoolItems(final int pCount) {\n+        final ArrayList<T> availableItems = this.mAvailableItems;\n+\n+        int allocationCount =\n+            this.mAvailableItemCountMaximum - availableItems.size();\n+        if (pCount < allocationCount) {\n+            allocationCount = pCount;\n+        }\n+\n+        for (int i = allocationCount - 1; i >= 0; i--) {\n+            availableItems.add(this.onHandleAllocatePoolItem());\n+        }\n+    }\n+\n+    public synchronized T obtainPoolItem() {\n+        final T item;\n+\n+        if (this.mAvailableItems.size() > 0) {\n+            item = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n+        } else {\n+            if (this.mGrowth == 1 || this.mAvailableItemCountMaximum == 0) {\n+                item = this.onHandleAllocatePoolItem();\n+            } else {\n+                this.batchAllocatePoolItems(this.mGrowth);\n+                item = this.mAvailableItems\n+                    .remove(this.mAvailableItems.size() - 1);\n+            }\n+            if (BuildConfig.DEBUG) {\n+                Debug.v(this.getClass().getName() + \"<\" +\n+                    item.getClass().getSimpleName() + \"> was exhausted, with \" +\n+                    this.mUnrecycledItemCount +\n+                    \" item not yet recycled. Allocated \" + this.mGrowth +\n+                    \" more.\");\n+            }\n+        }\n+        this.onHandleObtainItem(item);\n+\n+        this.mUnrecycledItemCount++;\n+        return item;\n+    }\n+\n+    public synchronized void recyclePoolItem(final T pItem) {\n+        if (pItem == null) {\n+            throw new IllegalArgumentException(\"Cannot recycle null item!\");\n+        }\n+\n+        this.onHandleRecycleItem(pItem);\n+\n+        if (this.mAvailableItems.size() < this.mAvailableItemCountMaximum) {\n+            this.mAvailableItems.add(pItem);\n+        }\n+\n+        this.mUnrecycledItemCount--;\n+\n+        if (this.mUnrecycledItemCount < 0) {\n+            Debug.e(\"More items recycled than obtained!\");\n+        }\n+    }\n+\n+    public synchronized void shufflePoolItems() {\n+        Collections.shuffle(this.mAvailableItems);\n+    }\n+\n+    // ===========================================================\n+    // Inner and Anonymous Classes\n+    // ===========================================================\n }\n",
            "diff_size": 161
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/naturalize/6/GenericPool.java\nindex 0cc2418976c..191c721cc74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/naturalize/6/GenericPool.java\n@@ -133,7 +133,7 @@ public abstract class GenericPool<T> {\n \t\t\t\titem = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n \t\t\t}\n \t\t\tif (BuildConfig.DEBUG) {\n-\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() +\"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n+\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() + \"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n \t\t\t}\n \t\t}\n \t\tthis.onHandleObtainItem(item);\n@@ -167,4 +167,4 @@ public abstract class GenericPool<T> {\n \t// ===========================================================\n \t// Inner and Anonymous Classes\n \t// ===========================================================\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/codebuff/6/GenericPool.java\nindex 0cc2418976c..c958436efd5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/codebuff/6/GenericPool.java\n@@ -2,7 +2,6 @@ package org.andengine.util.adt.pool;\n \n import java.util.ArrayList;\n import java.util.Collections;\n-\n import org.andengine.BuildConfig;\n import org.andengine.util.debug.Debug;\n \n@@ -15,156 +14,171 @@ import org.andengine.util.debug.Debug;\n  *\n  * @since 22:19:55 - 31.08.2010\n  */\n+\n+\n public abstract class GenericPool<T> {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n+ // ===========================================================\n+ // Constants\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Fields\n+ // ===========================================================\n+\n+\n+\n+\n+ private final ArrayList<T> mAvailableItems;\n+ private final int mGrowth;\n+ private final int mAvailableItemCountMaximum;\n+ private int mUnrecycledItemCount;\n+\n+ // ===========================================================\n+ // Constructors\n+ // ===========================================================\n+\n+\n+\n+\n+\n+ public GenericPool() {\n+  this(0);\n+ }\n+\n+ public GenericPool(final int pInitialSize) {\n+  this(pInitialSize, 1);\n+ }\n+\n+ public GenericPool(final int pInitialSize, final int pGrowth) {\n+  this(pInitialSize, pGrowth, Integer.MAX_VALUE);\n+ }\n+\n+ public GenericPool(final int pInitialSize, final int pGrowth, final int pAvailableItemsMaximum) {\n+  if (pGrowth <= 0) {\n+   throw new IllegalArgumentException(\"pGrowth must be greater than 0!\");\n+  }\n+  if (pAvailableItemsMaximum < 0) {\n+   throw new IllegalArgumentException(\"pAvailableItemsMaximum must be at least 0!\");\n+  }\n+\n+  this.mGrowth = pGrowth;\n+  this.mAvailableItemCountMaximum = pAvailableItemsMaximum;\n+  this.mAvailableItems = new ArrayList<T>(pInitialSize);\n+  if (pInitialSize > 0) {\n+   this.batchAllocatePoolItems(pInitialSize);\n+  }\n+ }\n+\n+ // ===========================================================\n+ // Getter & Setter\n+ // ===========================================================\n+\n+\n+\n+\n+\n+ public synchronized int getUnrecycledItemCount() {\n+  return this.mUnrecycledItemCount;\n+ }\n+\n+ public synchronized int getAvailableItemCount() {\n+  return this.mAvailableItems.size();\n+ }\n+\n+ public int getAvailableItemCountMaximum() {\n+  return this.mAvailableItemCountMaximum;\n+ }\n+\n+ // ===========================================================\n+ // Methods for/from SuperClass/Interfaces\n+ // ===========================================================\n+\n+\n+\n+\n+\n+ protected abstract T onAllocatePoolItem();\n+\n+ // ===========================================================\n+ // Methods\n+ // ===========================================================\n+\n+ /**\n+  * @param pItem every item passes this method just before it gets recycled.\n+  */\n+ protected void onHandleRecycleItem(final T pItem) { }\n+ protected T onHandleAllocatePoolItem() {\n+  return this.onAllocatePoolItem();\n+ }\n+\n+ /**\n+  * @param pItem every item that was just obtained from the pool, passes this method.\n+  */\n+\n+\n+\n+\n+\n+ protected void onHandleObtainItem(final T pItem) { }\n+\n+ public synchronized void batchAllocatePoolItems(final int pCount) {\n+  final ArrayList<T> availableItems = this.mAvailableItems;\n+  int allocationCount = this.mAvailableItemCountMaximum - availableItems.size();\n+  if (pCount < allocationCount) {\n+      allocationCount = pCount;\n+  }\n+\n+  for (int i = allocationCount - 1; i >= 0; i--) {\n+   availableItems.add(this.onHandleAllocatePoolItem());\n+  }\n+ }\n+\n+ public synchronized T obtainPoolItem() {\n+  final T item;\n+  if (this.mAvailableItems.size() > 0) {\n+   item = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n+  } else {\n+   if (this.mGrowth == 1 || this.mAvailableItemCountMaximum == 0) {\n+    item = this.onHandleAllocatePoolItem();\n+   } else {\n+    this.batchAllocatePoolItems(this.mGrowth);\n+    item = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n+   }\n+   if (BuildConfig.DEBUG) {\n+       Debug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() + \"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n+   }\n+  }\n+\n+  this.onHandleObtainItem(item);\n+  this.mUnrecycledItemCount++;\n+  return item;\n+ }\n+\n+ public synchronized void recyclePoolItem(final T pItem) {\n+  if (pItem == null) {\n+   throw new IllegalArgumentException(\"Cannot recycle null item!\");\n+  }\n+\n+  this.onHandleRecycleItem(pItem);\n+  if (this.mAvailableItems.size() < this.mAvailableItemCountMaximum) {\n+   this.mAvailableItems.add(pItem);\n+  }\n+\n+  this.mUnrecycledItemCount--;\n+  if (this.mUnrecycledItemCount < 0) {\n+      Debug.e(\"More items recycled than obtained!\");\n+  }\n+ }\n+\n+ public synchronized void shufflePoolItems() {\n+  Collections.shuffle(this.mAvailableItems);\n+ }\n+\n+ // ===========================================================\n+ // Inner and Anonymous Classes\n+ // ===========================================================\n+\n+\n \n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n \n-\tprivate final ArrayList<T> mAvailableItems;\n-\tprivate final int mGrowth;\n-\tprivate final int mAvailableItemCountMaximum;\n-\n-\tprivate int mUnrecycledItemCount;\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\tpublic GenericPool() {\n-\t\tthis(0);\n-\t}\n-\n-\tpublic GenericPool(final int pInitialSize) {\n-\t\tthis(pInitialSize, 1);\n-\t}\n-\n-\tpublic GenericPool(final int pInitialSize, final int pGrowth) {\n-\t\tthis(pInitialSize, pGrowth, Integer.MAX_VALUE);\n-\t}\n-\n-\tpublic GenericPool(final int pInitialSize, final int pGrowth, final int pAvailableItemsMaximum) {\n-\t\tif (pGrowth <= 0) {\n-\t\t\tthrow new IllegalArgumentException(\"pGrowth must be greater than 0!\");\n-\t\t}\n-\t\tif (pAvailableItemsMaximum < 0) {\n-\t\t\tthrow new IllegalArgumentException(\"pAvailableItemsMaximum must be at least 0!\");\n-\t\t}\n-\n-\t\tthis.mGrowth = pGrowth;\n-\t\tthis.mAvailableItemCountMaximum = pAvailableItemsMaximum;\n-\t\tthis.mAvailableItems = new ArrayList<T>(pInitialSize);\n-\n-\t\tif (pInitialSize > 0) {\n-\t\t\tthis.batchAllocatePoolItems(pInitialSize);\n-\t\t}\n-\t}\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\tpublic synchronized int getUnrecycledItemCount() {\n-\t\treturn this.mUnrecycledItemCount;\n-\t}\n-\n-\tpublic synchronized int getAvailableItemCount() {\n-\t\treturn this.mAvailableItems.size();\n-\t}\n-\n-\tpublic int getAvailableItemCountMaximum() {\n-\t\treturn this.mAvailableItemCountMaximum;\n-\t}\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\tprotected abstract T onAllocatePoolItem();\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\t/**\n-\t * @param pItem every item passes this method just before it gets recycled.\n-\t */\n-\tprotected void onHandleRecycleItem(final T pItem) {\n-\n-\t}\n-\n-\tprotected T onHandleAllocatePoolItem() {\n-\t\treturn this.onAllocatePoolItem();\n-\t}\n-\n-\t/**\n-\t * @param pItem every item that was just obtained from the pool, passes this method.\n-\t */\n-\tprotected void onHandleObtainItem(final T pItem) {\n-\n-\t}\n-\n-\tpublic synchronized void batchAllocatePoolItems(final int pCount) {\n-\t\tfinal ArrayList<T> availableItems = this.mAvailableItems;\n-\n-\t\tint allocationCount = this.mAvailableItemCountMaximum - availableItems.size();\n-\t\tif (pCount < allocationCount) {\n-\t\t\tallocationCount = pCount;\n-\t\t}\n-\n-\t\tfor (int i = allocationCount - 1; i >= 0; i--) {\n-\t\t\tavailableItems.add(this.onHandleAllocatePoolItem());\n-\t\t}\n-\t}\n-\n-\tpublic synchronized T obtainPoolItem() {\n-\t\tfinal T item;\n-\n-\t\tif (this.mAvailableItems.size() > 0) {\n-\t\t\titem = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n-\t\t} else {\n-\t\t\tif (this.mGrowth == 1 || this.mAvailableItemCountMaximum == 0) {\n-\t\t\t\titem = this.onHandleAllocatePoolItem();\n-\t\t\t} else {\n-\t\t\t\tthis.batchAllocatePoolItems(this.mGrowth);\n-\t\t\t\titem = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n-\t\t\t}\n-\t\t\tif (BuildConfig.DEBUG) {\n-\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() +\"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n-\t\t\t}\n-\t\t}\n-\t\tthis.onHandleObtainItem(item);\n-\n-\t\tthis.mUnrecycledItemCount++;\n-\t\treturn item;\n-\t}\n-\n-\tpublic synchronized void recyclePoolItem(final T pItem) {\n-\t\tif (pItem == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Cannot recycle null item!\");\n-\t\t}\n-\n-\t\tthis.onHandleRecycleItem(pItem);\n-\n-\t\tif (this.mAvailableItems.size() < this.mAvailableItemCountMaximum) {\n-\t\t\tthis.mAvailableItems.add(pItem);\n-\t\t}\n-\n-\t\tthis.mUnrecycledItemCount--;\n-\n-\t\tif (this.mUnrecycledItemCount < 0) {\n-\t\t\tDebug.e(\"More items recycled than obtained!\");\n-\t\t}\n-\t}\n-\n-\tpublic synchronized void shufflePoolItems() {\n-\t\tCollections.shuffle(this.mAvailableItems);\n-\t}\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 312
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_random/6/GenericPool.java\nindex 0cc2418976c..d9cad1084d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_random/6/GenericPool.java\n@@ -133,7 +133,7 @@ public abstract class GenericPool<T> {\n \t\t\t\titem = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n \t\t\t}\n \t\t\tif (BuildConfig.DEBUG) {\n-\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() +\"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n+\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() + \"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n \t\t\t}\n \t\t}\n \t\tthis.onHandleObtainItem(item);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_three_grams/6/GenericPool.java\nindex 0cc2418976c..d9cad1084d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/6/GenericPool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_three_grams/6/GenericPool.java\n@@ -133,7 +133,7 @@ public abstract class GenericPool<T> {\n \t\t\t\titem = this.mAvailableItems.remove(this.mAvailableItems.size() - 1);\n \t\t\t}\n \t\t\tif (BuildConfig.DEBUG) {\n-\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() +\"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n+\t\t\t\tDebug.v(this.getClass().getName() + \"<\" + item.getClass().getSimpleName() + \"> was exhausted, with \" + this.mUnrecycledItemCount + \" item not yet recycled. Allocated \" + this.mGrowth + \" more.\");\n \t\t\t}\n \t\t}\n \t\tthis.onHandleObtainItem(item);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}