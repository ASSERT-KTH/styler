{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1494",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1494/OffHeapNumberArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1494/OffHeapNumberArray.java\nindex cd54d5cd197..e6078a9afb1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1494/OffHeapNumberArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1494/OffHeapNumberArray.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.cache;\n \n import org.neo4j.memory.MemoryAllocationTracker;\n@@ -24,63 +25,62 @@ import org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil;\n \n public abstract class OffHeapNumberArray<N extends NumberArray<N>> extends BaseNumberArray<N>\n {\n-    private final long allocatedAddress;\n-    protected final long address;\n-    protected final long length;\n-    protected final MemoryAllocationTracker allocationTracker;\n-    private final long allocatedBytes;\n-    private boolean closed;\n-\n-    protected OffHeapNumberArray( long length, int itemSize, long base, MemoryAllocationTracker allocationTracker )\n-    {\n-        super( itemSize, base );\n-        UnsafeUtil.assertHasUnsafe();\n-        this.length = length;\n-        this.allocationTracker = allocationTracker;\n+  private final long allocatedAddress;\n+  protected final long address;\n+  protected final long length;\n+  protected final MemoryAllocationTracker allocationTracker;\n+  private final long allocatedBytes;\n+  private boolean closed;\n \n-        long dataSize = length * itemSize;\n-        boolean itemSizeIsPowerOfTwo = Integer.bitCount( itemSize ) == 1;\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess || !itemSizeIsPowerOfTwo )\n-        {\n-            // we can end up here even if we require aligned memory access. Reason is that item size\n-            // isn't power of two anyway and so we have to fallback to safer means of accessing the memory,\n-            // i.e. byte for byte.\n-            allocatedBytes = dataSize;\n-            this.allocatedAddress = this.address = UnsafeUtil.allocateMemory( allocatedBytes, allocationTracker );\n-        }\n-        else\n-        {\n-            // the item size is a power of two and we're required to access memory aligned\n-            // so we can allocate a bit more to ensure we can get an aligned memory address to start from.\n-            allocatedBytes = dataSize + itemSize - 1;\n-            this.allocatedAddress = UnsafeUtil.allocateMemory( allocatedBytes, allocationTracker );\n-            this.address = UnsafeUtil.alignedMemory( allocatedAddress, itemSize );\n-        }\n-    }\n+  protected OffHeapNumberArray(long length, int itemSize, long base, MemoryAllocationTracker allocationTracker)\n+  {\n+    super(itemSize, base);\n+    UnsafeUtil.assertHasUnsafe();\n+    this.length = length;\n+    this.allocationTracker = allocationTracker;\n \n-    @Override\n-    public long length()\n+    long dataSize = length * itemSize;\n+    boolean itemSizeIsPowerOfTwo = Integer.bitCount(itemSize) == 1;\n+    if (UnsafeUtil.allowUnalignedMemoryAccess || !itemSizeIsPowerOfTwo)\n     {\n-        return length;\n-    }\n-\n-    @Override\n-    public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n+      // we can end up here even if we require aligned memory access. Reason is that item size\n+      // isn't power of two anyway and so we have to fallback to safer means of accessing the memory,\n+      // i.e. byte for byte.\n+      allocatedBytes = dataSize;\n+      this.allocatedAddress = this.address = UnsafeUtil.allocateMemory(allocatedBytes, allocationTracker);\n+    } else\n     {\n-        visitor.offHeapUsage( allocatedBytes );\n+      // the item size is a power of two and we're required to access memory aligned\n+      // so we can allocate a bit more to ensure we can get an aligned memory address to start from.\n+      allocatedBytes = dataSize + itemSize - 1;\n+      this.allocatedAddress = UnsafeUtil.allocateMemory(allocatedBytes, allocationTracker);\n+      this.address = UnsafeUtil.alignedMemory(allocatedAddress, itemSize);\n     }\n+  }\n+\n+  @Override\n+  public long length()\n+  {\n+    return length;\n+  }\n+\n+  @Override\n+  public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+  {\n+    visitor.offHeapUsage(allocatedBytes);\n+  }\n \n-    @Override\n-    public void close()\n+  @Override\n+  public void close()\n+  {\n+    if (!closed)\n     {\n-        if ( !closed )\n-        {\n-            if ( length > 0 )\n-            {\n-                // Allocating 0 bytes actually returns address 0\n-                UnsafeUtil.free( allocatedAddress, allocatedBytes, allocationTracker );\n-            }\n-            closed = true;\n-        }\n+      if (length > 0)\n+      {\n+        // Allocating 0 bytes actually returns address 0\n+        UnsafeUtil.free(allocatedAddress, allocatedBytes, allocationTracker);\n+      }\n+      closed = true;\n     }\n+  }\n }\n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1494/OffHeapNumberArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1494/OffHeapNumberArray.java\nindex cd54d5cd197..aff433c1e83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1494/OffHeapNumberArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1494/OffHeapNumberArray.java\n@@ -80,7 +80,8 @@ public abstract class OffHeapNumberArray<N extends NumberArray<N>> extends BaseN\n                 // Allocating 0 bytes actually returns address 0\n                 UnsafeUtil.free( allocatedAddress, allocatedBytes, allocationTracker );\n             }\n-            closed = true;\n+\n+closed = true;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}