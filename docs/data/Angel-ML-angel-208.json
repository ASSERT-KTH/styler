{
    "project_name": "Angel-ML-angel",
    "error_id": "208",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/208/RangePartitioner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/208/RangePartitioner.java\nindex a0b9f297bbc..65547b19d82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/208/RangePartitioner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/208/RangePartitioner.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.partitioner;\n \n import com.tencent.angel.conf.AngelConf;\n@@ -90,24 +89,22 @@ public class RangePartitioner implements Partitioner {\n       if (validIndexNum > 0) {\n         partSize =\n             (long) (DEFAULT_PARTITION_SIZE * ((double) getMaxIndex(mContext) * 2 / validIndexNum));\n-      }\n+  }\n \n       if (blockRow < 0) {\n         if (row > serverNum) {\n           blockRow = (int) Math.min(row / serverNum,\n               Math.max(row / maxPartNum,\n                   Math.max(1, partSize / ((double) getMaxIndex(mContext) * 2))));\n-        } else {\n+  } else {\n           blockRow = row;\n         }\n       }\n \n       if (blockCol < 0) {\n-        blockCol = Math\n-            .min(Math.max(100, (long) ((double) getMaxIndex(mContext) * 2 / serverNum)), Math\n-                .max(partSize / blockRow,\n-                    (long) (row * ((double) getMaxIndex(mContext) * 2 / maxPartNum / blockRow))));\n-      }\n+        blockCol = Math.min(Math.max(100, (long) ((double) getMaxIndex(mContext) * 2 / serverNum)), Math\n+                .max(partSize / blockRow, (long) (row * ((double) getMaxIndex(mContext) * 2 / maxPartNum / blockRow))));\n+  }\n     } else {\n       long partSize = DEFAULT_PARTITION_SIZE;\n       if (validIndexNum > 0) {\n@@ -116,9 +113,8 @@ public class RangePartitioner implements Partitioner {\n \n       if (blockRow < 0) {\n         if (row > serverNum) {\n-          blockRow = (int) Math\n-              .min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / col)));\n-        } else {\n+          blockRow = (int) Math.min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / col)));\n+  } else {\n           blockRow = row;\n         }\n       }\n@@ -147,8 +143,8 @@ public class RangePartitioner implements Partitioner {\n     int endRow;\n     long startCol;\n     long endCol;\n-    for (int i = 0; i < row; ) {\n-      for (long j = minValue; j < maxValue; ) {\n+    for (int i = 0; i < row;) {\n+      for (long j = minValue; j < maxValue;) {\n         startRow = i;\n         startCol = j;\n         endRow = (i <= (row - blockRow)) ? (i + blockRow) : row;\n@@ -185,24 +181,20 @@ public class RangePartitioner implements Partitioner {\n       case T_DOUBLE_DENSE_COMPONENT:\n       case T_DOUBLE_SPARSE:\n       case T_DOUBLE_SPARSE_COMPONENT:\n-\n-      case T_FLOAT_DENSE:\n+case T_FLOAT_DENSE:\n       case T_FLOAT_DENSE_COMPONENT:\n       case T_FLOAT_SPARSE:\n       case T_FLOAT_SPARSE_COMPONENT:\n-\n-      case T_LONG_DENSE:\n+case T_LONG_DENSE:\n       case T_LONG_DENSE_COMPONENT:\n       case T_LONG_SPARSE:\n       case T_LONG_SPARSE_COMPONENT:\n-\n-      case T_INT_DENSE:\n+case T_INT_DENSE:\n       case T_INT_DENSE_COMPONENT:\n       case T_INT_SPARSE:\n       case T_INT_SPARSE_COMPONENT:\n         return true;\n-\n-      default:\n+  default:\n         return false;\n     }\n   }\n@@ -212,4 +204,4 @@ public class RangePartitioner implements Partitioner {\n     int serverNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n     return partId % serverNum;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/208/RangePartitioner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/208/RangePartitioner.java\nindex a0b9f297bbc..4200b4b800f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/208/RangePartitioner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/208/RangePartitioner.java\n@@ -25,26 +25,30 @@ import com.tencent.angel.ml.matrix.RowType;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n  * Base class of range partitioner\n  */\n+\n public class RangePartitioner implements Partitioner {\n \n   private static final Log LOG = LogFactory.getLog(RangePartitioner.class);\n   /**\n    * Matrix context\n    */\n+\n   protected MatrixContext mContext;\n \n   /**\n    * Application configuration\n    */\n+\n   protected Configuration conf;\n+\n   protected long DEFAULT_PARTITION_SIZE;\n+\n   protected int maxPartNum;\n \n   @Override\n@@ -52,14 +56,10 @@ public class RangePartitioner implements Partitioner {\n     this.mContext = mContext;\n     this.conf = conf;\n \n-    long defaultPartSize = conf.getLong(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE,\n-        AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_PARTITION_SIZE);\n-    int maxPartNumTotal = conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM,\n-        AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM);\n+    long defaultPartSize = conf.getLong(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_PARTITION_SIZE);\n+    int maxPartNumTotal = conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM, AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM);\n     int psNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n-    int partNumPerServer =\n-        conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_NUM_PERSERVER, -1);\n-\n+    int partNumPerServer = conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_NUM_PERSERVER, -1);\n     if (partNumPerServer > 0) {\n       maxPartNum = Math.min(maxPartNumTotal, psNum * partNumPerServer);\n     } else {\n@@ -79,34 +79,27 @@ public class RangePartitioner implements Partitioner {\n     if (col > 0 && validIndexNum > col) {\n       validIndexNum = col;\n     }\n+\n     int blockRow = mContext.getMaxRowNumInBlock();\n     long blockCol = mContext.getMaxColNumInBlock();\n     int serverNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n-\n     LOG.info(\"start to split matrix \" + mContext);\n-\n     if (col < 0) {\n       long partSize = DEFAULT_PARTITION_SIZE;\n       if (validIndexNum > 0) {\n-        partSize =\n-            (long) (DEFAULT_PARTITION_SIZE * ((double) getMaxIndex(mContext) * 2 / validIndexNum));\n+        partSize = (long) (DEFAULT_PARTITION_SIZE * ((double) getMaxIndex(mContext) * 2 / validIndexNum));\n       }\n \n       if (blockRow < 0) {\n         if (row > serverNum) {\n-          blockRow = (int) Math.min(row / serverNum,\n-              Math.max(row / maxPartNum,\n-                  Math.max(1, partSize / ((double) getMaxIndex(mContext) * 2))));\n+          blockRow = (int) Math.min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / ((double) getMaxIndex(mContext) * 2))));\n         } else {\n           blockRow = row;\n         }\n       }\n \n       if (blockCol < 0) {\n-        blockCol = Math\n-            .min(Math.max(100, (long) ((double) getMaxIndex(mContext) * 2 / serverNum)), Math\n-                .max(partSize / blockRow,\n-                    (long) (row * ((double) getMaxIndex(mContext) * 2 / maxPartNum / blockRow))));\n+        blockCol = Math.min(Math.max(100, (long) ((double) getMaxIndex(mContext) * 2 / serverNum)), Math.max(partSize / blockRow, (long) (row * ((double) getMaxIndex(mContext) * 2 / maxPartNum / blockRow))));\n       }\n     } else {\n       long partSize = DEFAULT_PARTITION_SIZE;\n@@ -116,19 +109,16 @@ public class RangePartitioner implements Partitioner {\n \n       if (blockRow < 0) {\n         if (row > serverNum) {\n-          blockRow = (int) Math\n-              .min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / col)));\n+          blockRow = (int) Math.min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / col)));\n         } else {\n           blockRow = row;\n         }\n       }\n \n       if (blockCol < 0) {\n-        blockCol = Math.min(Math.max(100, col / serverNum),\n-            Math.max(partSize / blockRow, (long) (row * ((double) col / maxPartNum / blockRow))));\n+        blockCol = Math.min(Math.max(100, col / serverNum), Math.max(partSize / blockRow, (long) (row * ((double) col / maxPartNum / blockRow))));\n       }\n     }\n-\n     LOG.info(\"blockRow = \" + blockRow + \", blockCol=\" + blockCol);\n     mContext.setMaxRowNumInBlock(blockRow);\n     mContext.setMaxColNumInBlock(blockCol);\n@@ -147,8 +137,8 @@ public class RangePartitioner implements Partitioner {\n     int endRow;\n     long startCol;\n     long endCol;\n-    for (int i = 0; i < row; ) {\n-      for (long j = minValue; j < maxValue; ) {\n+    for (int i = 0; i < row;) {\n+      for (long j = minValue; j < maxValue;) {\n         startRow = i;\n         startCol = j;\n         endRow = (i <= (row - blockRow)) ? (i + blockRow) : row;\n@@ -158,7 +148,6 @@ public class RangePartitioner implements Partitioner {\n       }\n       i = (i <= (row - blockRow)) ? (i + blockRow) : row;\n     }\n-\n     LOG.info(\"partition count: \" + partitions.size());\n     return partitions;\n   }\n@@ -185,23 +174,19 @@ public class RangePartitioner implements Partitioner {\n       case T_DOUBLE_DENSE_COMPONENT:\n       case T_DOUBLE_SPARSE:\n       case T_DOUBLE_SPARSE_COMPONENT:\n-\n       case T_FLOAT_DENSE:\n       case T_FLOAT_DENSE_COMPONENT:\n       case T_FLOAT_SPARSE:\n       case T_FLOAT_SPARSE_COMPONENT:\n-\n       case T_LONG_DENSE:\n       case T_LONG_DENSE_COMPONENT:\n       case T_LONG_SPARSE:\n       case T_LONG_SPARSE_COMPONENT:\n-\n       case T_INT_DENSE:\n       case T_INT_DENSE_COMPONENT:\n       case T_INT_SPARSE:\n       case T_INT_SPARSE_COMPONENT:\n         return true;\n-\n       default:\n         return false;\n     }\n@@ -212,4 +197,5 @@ public class RangePartitioner implements Partitioner {\n     int serverNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n     return partId % serverNum;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}