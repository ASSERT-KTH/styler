{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4022",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4022/QuerySnapshot.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4022/QuerySnapshot.java\nindex 040d4cbb06d..771d2a89572 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4022/QuerySnapshot.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4022/QuerySnapshot.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.query;\n \n import java.util.Collections;\n@@ -30,190 +31,190 @@ import org.neo4j.values.virtual.MapValue;\n \n public class QuerySnapshot\n {\n-    private final ExecutingQuery query;\n-    private final PlannerInfo plannerInfo;\n-    private final long planningTimeMillis;\n-    private final long elapsedTimeMillis;\n-    private final long cpuTimeMillis;\n-    private final long waitTimeMillis;\n-    private final String status;\n-    private final Map<String,Object> resourceInfo;\n-    private final List<ActiveLock> waitingLocks;\n-    private final long activeLockCount;\n-    private final long allocatedBytes;\n-    private final PageCounterValues page;\n-\n-    QuerySnapshot( ExecutingQuery query, PlannerInfo plannerInfo, PageCounterValues page, long planningTimeMillis,\n-            long elapsedTimeMillis, long cpuTimeMillis, long waitTimeMillis, String status,\n-            Map<String,Object> resourceInfo, List<ActiveLock> waitingLocks, long activeLockCount, long allocatedBytes )\n-    {\n-        this.query = query;\n-        this.plannerInfo = plannerInfo;\n-        this.page = page;\n-        this.planningTimeMillis = planningTimeMillis;\n-        this.elapsedTimeMillis = elapsedTimeMillis;\n-        this.cpuTimeMillis = cpuTimeMillis;\n-        this.waitTimeMillis = waitTimeMillis;\n-        this.status = status;\n-        this.resourceInfo = resourceInfo;\n-        this.waitingLocks = waitingLocks;\n-        this.activeLockCount = activeLockCount;\n-        this.allocatedBytes = allocatedBytes;\n-    }\n-\n-    public long internalQueryId()\n-    {\n-        return query.internalQueryId();\n-    }\n-\n-    public String queryText()\n-    {\n-        return query.queryText();\n-    }\n-\n-    public MapValue queryParameters()\n-    {\n-        return query.queryParameters();\n-    }\n-\n-    public String username()\n-    {\n-        return query.username();\n-    }\n-\n-    public ClientConnectionInfo clientConnection()\n-    {\n-        return query.clientConnection();\n-    }\n-\n-    public Map<String,Object> transactionAnnotationData()\n-    {\n-        return query.transactionAnnotationData();\n-    }\n-\n-    public long activeLockCount()\n-    {\n-        return activeLockCount;\n-    }\n-\n-    public String planner()\n-    {\n-        return plannerInfo == null ? null : plannerInfo.planner();\n-    }\n-\n-    public String runtime()\n-    {\n-        return plannerInfo == null ? null : plannerInfo.runtime();\n-    }\n-\n-    public List<Map<String,String>> indexes()\n-    {\n-        if ( plannerInfo == null )\n-        {\n-            return Collections.emptyList();\n-        }\n-        return plannerInfo.indexes().stream()\n-                .map( IndexUsage::asMap )\n-                .collect( Collectors.toList() );\n-    }\n-\n-    public String status()\n-    {\n-        return status;\n-    }\n-\n-    public Map<String,Object> resourceInformation()\n-    {\n-        return resourceInfo;\n-    }\n-\n-    public long startTimestampMillis()\n-    {\n-        return query.startTimestampMillis();\n-    }\n-\n-    /**\n-     * The time spent planning the query, before the query actually starts executing.\n-     *\n-     * @return the time in milliseconds spent planning the query.\n-     */\n-    public long planningTimeMillis()\n-    {\n-        return planningTimeMillis;\n-    }\n-\n-    /**\n-     * The time that has been spent waiting on locks or other queries, as opposed to actively executing this query.\n-     *\n-     * @return the time in milliseconds spent waiting on locks.\n-     */\n-    public long waitTimeMillis()\n-    {\n-        return waitTimeMillis;\n-    }\n-\n-    /**\n-     * The time (wall time) that has elapsed since the execution of this query started.\n-     *\n-     * @return the time in milliseconds since execution of this query started.\n-     */\n-    public long elapsedTimeMillis()\n-    {\n-        return elapsedTimeMillis;\n-    }\n-\n-    /**\n-     * Time that the CPU has actively spent working on things related to this query.\n-     *\n-     * @return the time in milliseconds that the CPU has spent on this query, or {@code null} if the cpu time could not\n-     * be measured.\n-     */\n-    public Long cpuTimeMillis()\n-    {\n-        return cpuTimeMillis < 0 ? null : cpuTimeMillis;\n-    }\n-\n-    /**\n-     * Time from the start of this query that the computer spent doing other things than working on this query, even\n-     * though the query was runnable.\n-     * <p>\n-     * In rare cases the idle time can be negative. This is due to the fact that the Thread does not go to sleep\n-     * immediately after we start measuring the wait-time, there is still some \"lock bookkeeping time\" that counts as\n-     * both cpu time (because the CPU is actually actively working on this thread) and wait time (because the query is\n-     * actually waiting on the lock rather than doing active work). In most cases such \"lock bookkeeping time\" is going\n-     * to be dwarfed by the idle time.\n-     *\n-     * @return the time in milliseconds that this query was de-scheduled, or {@code null} if the cpu time could not be\n-     * measured.\n-     */\n-    public Long idleTimeMillis()\n-    {\n-        return cpuTimeMillis < 0 ? null : (elapsedTimeMillis - cpuTimeMillis - waitTimeMillis);\n-    }\n-\n-    /**\n-     * The number of bytes allocated by the query.\n-     *\n-     * @return the number of bytes allocated by the execution of the query, or {@code null} if the memory allocation\n-     * could not be measured.\n-     */\n-    public Long allocatedBytes()\n-    {\n-        return allocatedBytes < 0 ? null : allocatedBytes;\n-    }\n-\n-    public long pageHits()\n-    {\n-        return page.hits;\n-    }\n-\n-    public long pageFaults()\n-    {\n-        return page.faults;\n-    }\n-\n-    public List<ActiveLock> waitingLocks()\n-    {\n-        return waitingLocks;\n-    }\n+  private final ExecutingQuery query;\n+  private final PlannerInfo plannerInfo;\n+  private final long planningTimeMillis;\n+  private final long elapsedTimeMillis;\n+  private final long cpuTimeMillis;\n+  private final long waitTimeMillis;\n+  private final String status;\n+  private final Map<String, Object> resourceInfo;\n+  private final List<ActiveLock> waitingLocks;\n+  private final long activeLockCount;\n+  private final long allocatedBytes;\n+  private final PageCounterValues page;\n+\n+  QuerySnapshot(ExecutingQuery query, PlannerInfo plannerInfo, PageCounterValues page, long planningTimeMillis,\n+                long elapsedTimeMillis, long cpuTimeMillis, long waitTimeMillis, String status,\n+                Map<String, Object> resourceInfo, List<ActiveLock> waitingLocks, long activeLockCount, long allocatedBytes)\n+  {\n+    this.query = query;\n+    this.plannerInfo = plannerInfo;\n+    this.page = page;\n+    this.planningTimeMillis = planningTimeMillis;\n+    this.elapsedTimeMillis = elapsedTimeMillis;\n+    this.cpuTimeMillis = cpuTimeMillis;\n+    this.waitTimeMillis = waitTimeMillis;\n+    this.status = status;\n+    this.resourceInfo = resourceInfo;\n+    this.waitingLocks = waitingLocks;\n+    this.activeLockCount = activeLockCount;\n+    this.allocatedBytes = allocatedBytes;\n+  }\n+\n+  public long internalQueryId()\n+  {\n+    return query.internalQueryId();\n+  }\n+\n+  public String queryText()\n+  {\n+    return query.queryText();\n+  }\n+\n+  public MapValue queryParameters()\n+  {\n+    return query.queryParameters();\n+  }\n+\n+  public String username()\n+  {\n+    return query.username();\n+  }\n+\n+  public ClientConnectionInfo clientConnection()\n+  {\n+    return query.clientConnection();\n+  }\n+\n+  public Map<String, Object> transactionAnnotationData()\n+  {\n+    return query.transactionAnnotationData();\n+  }\n+\n+  public long activeLockCount()\n+  {\n+    return activeLockCount;\n+  }\n+\n+  public String planner()\n+  {\n+    return plannerInfo == null ? null : plannerInfo.planner();\n+  }\n+\n+  public String runtime()\n+  {\n+    return plannerInfo == null ? null : plannerInfo.runtime();\n+  }\n+\n+  public List<Map<String, String>> indexes()\n+  {\n+    if (plannerInfo == null)\n+    {\n+      return Collections.emptyList();\n+    }\n+    return plannerInfo.indexes().stream()\n+        .map(IndexUsage::asMap)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public String status()\n+  {\n+    return status;\n+  }\n+\n+  public Map<String, Object> resourceInformation()\n+  {\n+    return resourceInfo;\n+  }\n+\n+  public long startTimestampMillis()\n+  {\n+    return query.startTimestampMillis();\n+  }\n+\n+  /**\n+   * The time spent planning the query, before the query actually starts executing.\n+   *\n+   * @return the time in milliseconds spent planning the query.\n+   */\n+  public long planningTimeMillis()\n+  {\n+    return planningTimeMillis;\n+  }\n+\n+  /**\n+   * The time that has been spent waiting on locks or other queries, as opposed to actively executing this query.\n+   *\n+   * @return the time in milliseconds spent waiting on locks.\n+   */\n+  public long waitTimeMillis()\n+  {\n+    return waitTimeMillis;\n+  }\n+\n+  /**\n+   * The time (wall time) that has elapsed since the execution of this query started.\n+   *\n+   * @return the time in milliseconds since execution of this query started.\n+   */\n+  public long elapsedTimeMillis()\n+  {\n+    return elapsedTimeMillis;\n+  }\n+\n+  /**\n+   * Time that the CPU has actively spent working on things related to this query.\n+   *\n+   * @return the time in milliseconds that the CPU has spent on this query, or {@code null} if the cpu time could not\n+   * be measured.\n+   */\n+  public Long cpuTimeMillis()\n+  {\n+    return cpuTimeMillis < 0 ? null : cpuTimeMillis;\n+  }\n+\n+  /**\n+   * Time from the start of this query that the computer spent doing other things than working on this query, even\n+   * though the query was runnable.\n+   * <p>\n+   * In rare cases the idle time can be negative. This is due to the fact that the Thread does not go to sleep\n+   * immediately after we start measuring the wait-time, there is still some \"lock bookkeeping time\" that counts as\n+   * both cpu time (because the CPU is actually actively working on this thread) and wait time (because the query is\n+   * actually waiting on the lock rather than doing active work). In most cases such \"lock bookkeeping time\" is going\n+   * to be dwarfed by the idle time.\n+   *\n+   * @return the time in milliseconds that this query was de-scheduled, or {@code null} if the cpu time could not be\n+   * measured.\n+   */\n+  public Long idleTimeMillis()\n+  {\n+    return cpuTimeMillis < 0 ? null : (elapsedTimeMillis - cpuTimeMillis - waitTimeMillis);\n+  }\n+\n+  /**\n+   * The number of bytes allocated by the query.\n+   *\n+   * @return the number of bytes allocated by the execution of the query, or {@code null} if the memory allocation\n+   * could not be measured.\n+   */\n+  public Long allocatedBytes()\n+  {\n+    return allocatedBytes < 0 ? null : allocatedBytes;\n+  }\n+\n+  public long pageHits()\n+  {\n+    return page.hits;\n+  }\n+\n+  public long pageFaults()\n+  {\n+    return page.faults;\n+  }\n+\n+  public List<ActiveLock> waitingLocks()\n+  {\n+    return waitingLocks;\n+  }\n }\n",
            "diff_size": 187
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4022/QuerySnapshot.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4022/QuerySnapshot.java\nindex 040d4cbb06d..c0ab9b5fa19 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4022/QuerySnapshot.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4022/QuerySnapshot.java\n@@ -44,8 +44,7 @@ public class QuerySnapshot\n     private final PageCounterValues page;\n \n     QuerySnapshot( ExecutingQuery query, PlannerInfo plannerInfo, PageCounterValues page, long planningTimeMillis,\n-            long elapsedTimeMillis, long cpuTimeMillis, long waitTimeMillis, String status,\n-            Map<String,Object> resourceInfo, List<ActiveLock> waitingLocks, long activeLockCount, long allocatedBytes )\n+            long elapsedTimeMillis, long cpuTimeMillis, long waitTimeMillis, String status, Map<String,Object> resourceInfo, List<ActiveLock> waitingLocks, long activeLockCount, long allocatedBytes )\n     {\n         this.query = query;\n         this.plannerInfo = plannerInfo;\n@@ -112,9 +111,8 @@ public class QuerySnapshot\n         {\n             return Collections.emptyList();\n         }\n-        return plannerInfo.indexes().stream()\n-                .map( IndexUsage::asMap )\n-                .collect( Collectors.toList() );\n+\n+return plannerInfo.indexes().stream().map( IndexUsage::asMap ).collect( Collectors.toList() );\n     }\n \n     public String status()\n@@ -188,7 +186,7 @@ public class QuerySnapshot\n      */\n     public Long idleTimeMillis()\n     {\n-        return cpuTimeMillis < 0 ? null : (elapsedTimeMillis - cpuTimeMillis - waitTimeMillis);\n+        return cpuTimeMillis < 0 ? null : ( elapsedTimeMillis - cpuTimeMillis - waitTimeMillis);\n     }\n \n     /**\n@@ -216,4 +214,4 @@ public class QuerySnapshot\n     {\n         return waitingLocks;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}