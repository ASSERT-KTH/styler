{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1150",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "87",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1150/SimpleUniquenessVerifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1150/SimpleUniquenessVerifier.java\nindex 0f963e1fb6f..2b2a01129c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1150/SimpleUniquenessVerifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1150/SimpleUniquenessVerifier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema.verification;\n \n import org.apache.lucene.index.Fields;\n@@ -49,85 +50,83 @@ import org.neo4j.values.storable.Value;\n  */\n public class SimpleUniquenessVerifier implements UniquenessVerifier\n {\n-    private final PartitionSearcher partitionSearcher;\n+  private final PartitionSearcher partitionSearcher;\n \n-    public SimpleUniquenessVerifier( PartitionSearcher partitionSearcher )\n-    {\n-        this.partitionSearcher = partitionSearcher;\n-    }\n+  public SimpleUniquenessVerifier(PartitionSearcher partitionSearcher)\n+  {\n+    this.partitionSearcher = partitionSearcher;\n+  }\n \n-    @Override\n-    public void verify( PropertyAccessor accessor, int[] propKeyIds ) throws IndexEntryConflictException, IOException\n+  @Override\n+  public void verify(PropertyAccessor accessor, int[] propKeyIds) throws IndexEntryConflictException, IOException\n+  {\n+    try\n     {\n-        try\n+      DuplicateCheckingCollector collector = DuplicateCheckingCollector.forProperties(accessor, propKeyIds);\n+      IndexSearcher searcher = indexSearcher();\n+      for (LeafReaderContext leafReaderContext : searcher.getIndexReader().leaves())\n+      {\n+        Fields fields = leafReaderContext.reader().fields();\n+        for (String field : fields)\n         {\n-            DuplicateCheckingCollector collector = DuplicateCheckingCollector.forProperties( accessor, propKeyIds );\n-            IndexSearcher searcher = indexSearcher();\n-            for ( LeafReaderContext leafReaderContext : searcher.getIndexReader().leaves() )\n+          if (LuceneDocumentStructure.useFieldForUniquenessVerification(field))\n+          {\n+            TermsEnum terms = LuceneDocumentStructure.originalTerms(fields.terms(field), field);\n+            BytesRef termsRef;\n+            while ((termsRef = terms.next()) != null)\n             {\n-                Fields fields = leafReaderContext.reader().fields();\n-                for ( String field : fields )\n-                {\n-                    if ( LuceneDocumentStructure.useFieldForUniquenessVerification( field ) )\n-                    {\n-                        TermsEnum terms = LuceneDocumentStructure.originalTerms( fields.terms( field ), field );\n-                        BytesRef termsRef;\n-                        while ( (termsRef = terms.next()) != null )\n-                        {\n-                            if ( terms.docFreq() > 1 )\n-                            {\n-                                collector.init( terms.docFreq() );\n-                                searcher.search( new TermQuery( new Term( field, termsRef ) ), collector );\n-                            }\n-                        }\n-                    }\n-                }\n+              if (terms.docFreq() > 1)\n+              {\n+                collector.init(terms.docFreq());\n+                searcher.search(new TermQuery(new Term(field, termsRef)), collector);\n+              }\n             }\n+          }\n         }\n-        catch ( IOException e )\n-        {\n-            Throwable cause = e.getCause();\n-            if ( cause instanceof IndexEntryConflictException )\n-            {\n-                throw (IndexEntryConflictException) cause;\n-            }\n-            throw e;\n-        }\n-    }\n-\n-    @Override\n-    public void verify( PropertyAccessor accessor, int[] propKeyIds, List<Value[]> updatedValueTuples )\n-            throws IndexEntryConflictException, IOException\n+      }\n+    } catch (IOException e)\n     {\n-        try\n-        {\n-            DuplicateCheckingCollector collector = DuplicateCheckingCollector.forProperties( accessor, propKeyIds );\n-            for ( Value[] valueTuple : updatedValueTuples )\n-            {\n-                collector.init();\n-                Query query = LuceneDocumentStructure.newSeekQuery( valueTuple );\n-                indexSearcher().search( query, collector );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            Throwable cause = e.getCause();\n-            if ( cause instanceof IndexEntryConflictException )\n-            {\n-                throw (IndexEntryConflictException) cause;\n-            }\n-            throw e;\n-        }\n+      Throwable cause = e.getCause();\n+      if (cause instanceof IndexEntryConflictException)\n+      {\n+        throw (IndexEntryConflictException) cause;\n+      }\n+      throw e;\n     }\n+  }\n \n-    @Override\n-    public void close() throws IOException\n+  @Override\n+  public void verify(PropertyAccessor accessor, int[] propKeyIds, List<Value[]> updatedValueTuples)\n+      throws IndexEntryConflictException, IOException\n+  {\n+    try\n     {\n-        partitionSearcher.close();\n-    }\n-\n-    private IndexSearcher indexSearcher()\n+      DuplicateCheckingCollector collector = DuplicateCheckingCollector.forProperties(accessor, propKeyIds);\n+      for (Value[] valueTuple : updatedValueTuples)\n+      {\n+        collector.init();\n+        Query query = LuceneDocumentStructure.newSeekQuery(valueTuple);\n+        indexSearcher().search(query, collector);\n+      }\n+    } catch (IOException e)\n     {\n-        return partitionSearcher.getIndexSearcher();\n+      Throwable cause = e.getCause();\n+      if (cause instanceof IndexEntryConflictException)\n+      {\n+        throw (IndexEntryConflictException) cause;\n+      }\n+      throw e;\n     }\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    partitionSearcher.close();\n+  }\n+\n+  private IndexSearcher indexSearcher()\n+  {\n+    return partitionSearcher.getIndexSearcher();\n+  }\n }\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1150/SimpleUniquenessVerifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1150/SimpleUniquenessVerifier.java\nindex 0f963e1fb6f..c74ba498e88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1150/SimpleUniquenessVerifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1150/SimpleUniquenessVerifier.java\n@@ -96,9 +96,8 @@ public class SimpleUniquenessVerifier implements UniquenessVerifier\n     }\n \n     @Override\n-    public void verify( PropertyAccessor accessor, int[] propKeyIds, List<Value[]> updatedValueTuples )\n-            throws IndexEntryConflictException, IOException\n-    {\n+    public void verify( PropertyAccessor accessor, int[] propKeyIds, List<Value[]> updatedValueTuples ) throws IndexEntryConflictException, IOException\n+{\n         try\n         {\n             DuplicateCheckingCollector collector = DuplicateCheckingCollector.forProperties( accessor, propKeyIds );\n@@ -130,4 +129,4 @@ public class SimpleUniquenessVerifier implements UniquenessVerifier\n     {\n         return partitionSearcher.getIndexSearcher();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}