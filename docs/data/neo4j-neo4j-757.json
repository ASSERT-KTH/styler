{
    "project_name": "neo4j-neo4j",
    "error_id": "757",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/757/CharReadable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/757/CharReadable.java\nindex 40f1a16ffab..5dd27661f3e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/757/CharReadable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/757/CharReadable.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.io.Closeable;\n@@ -28,11 +29,11 @@ import java.nio.CharBuffer;\n  * A {@link Readable}, but focused on {@code char[]}, via a {@link SectionedCharBuffer} with one of the main reasons\n  * that {@link Reader#read(CharBuffer)} creates a new {@code char[]} as big as the data it's about to read\n  * every call. However {@link Reader#read(char[], int, int)} doesn't, and so leaves no garbage.\n- *\n+ * <p>\n  * The fact that this is a separate interface means that {@link Readable} instances need to be wrapped,\n  * but that's fine since the buffer size should be reasonably big such that {@link #read(SectionedCharBuffer, int)}\n  * isn't called too often. Therefore the wrapping overhead should not be noticeable at all.\n- *\n+ * <p>\n  * Also took the opportunity to let {@link CharReadable} extends {@link Closeable}, something that\n  * {@link Readable} doesn't.\n  */\n@@ -50,23 +51,24 @@ public interface CharReadable extends Closeable, SourceTraceability\n      * return {@code false}.\n      *\n      * @param buffer {@link SectionedCharBuffer} to read new data into.\n-     * @param from index into the buffer array where characters to save (compact) starts (inclusive).\n+     * @param from   index into the buffer array where characters to save (compact) starts (inclusive).\n      * @return a {@link SectionedCharBuffer} containing new data.\n      * @throws IOException if an I/O error occurs.\n      */\n-    SectionedCharBuffer read( SectionedCharBuffer buffer, int from ) throws IOException;\n+    SectionedCharBuffer read(SectionedCharBuffer buffer, int from) throws IOException;\n \n     /**\n      * Reads characters into the given array starting at {@code offset}, reading {@code length} number of characters.\n-     *\n+     * <p>\n      * Similar to {@link Reader#read(char[], int, int)}\n-     * @param into char[] to read the data into.\n+     *\n+     * @param into   char[] to read the data into.\n      * @param offset offset to start reading into the char[].\n      * @param length number of bytes to read maximum.\n      * @return number of bytes read, or 0 if there were no bytes read and end of readable is reached.\n      * @throws IOException on read error.\n      */\n-    int read( char[] into, int offset, int length ) throws IOException;\n+    int read(char[] into, int offset, int length) throws IOException;\n \n     /**\n      * @return length of this source, in bytes.\n@@ -90,15 +92,15 @@ public interface CharReadable extends Closeable, SourceTraceability\n     class Empty extends SourceTraceability.Empty implements CharReadable\n     {\n         @Override\n-        public int read( char[] into, int offset, int length )\n+        public int read(char[] into, int offset, int length)\n         {\n             return -1;\n         }\n \n         @Override\n-        public SectionedCharBuffer read( SectionedCharBuffer buffer, int from )\n+        public SectionedCharBuffer read(SectionedCharBuffer buffer, int from)\n         {\n-            buffer.compact( buffer, from );\n+            buffer.compact(buffer, from);\n             return buffer;\n         }\n \n@@ -112,7 +114,9 @@ public interface CharReadable extends Closeable, SourceTraceability\n         public void close()\n         {\n         }\n-    };\n+    }\n+\n+    ;\n \n     CharReadable EMPTY = new Empty();\n }\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}