{
    "project_name": "zanata-zanata-platform",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "157",
                "column": "55",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        identity.checkPermission(getSecuredIteration(), \"import-template\");\n        HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n        ResourceUtils.validateExtensions(extensions); // gettext, comment\n        String resourceName = resource.getName();\n        if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n                resourceName)) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/13/SourceDocResourceService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/13/SourceDocResourceService.java\nindex 055f9969cbe..24301be48c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/13/SourceDocResourceService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/13/SourceDocResourceService.java\n@@ -154,8 +154,9 @@ public class SourceDocResourceService implements SourceDocResource {\n             boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        ResourceUtils.validateExtensions(extensions); // gettext, comment\n-        String resourceName = resource.getName();\n+        ResourceUtils.validateExtensions(extensions);\n+        // gettext, comment\n+         String resourceName = resource.getName();\n         if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n                 resourceName)) {\n             log.warn(\"bad resource name in post(): {}\", resourceName);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "159",
                    "column": "51",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/13/SourceDocResourceService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/13/SourceDocResourceService.java\nindex 055f9969cbe..539a3930cdf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/13/SourceDocResourceService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/13/SourceDocResourceService.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.rest.service;\n \n import java.net.URI;\n@@ -68,380 +69,381 @@ import org.zanata.util.UrlUtil;\n \n /**\n  * @author Carlos Munoz\n- *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n+ * <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n @RequestScoped\n @Named(\"sourceDocResourceService\")\n @Path(SourceDocResource.SERVICE_PATH)\n @Transactional\n public class SourceDocResourceService implements SourceDocResource {\n-    private static final Logger log =\n-            LoggerFactory.getLogger(SourceDocResourceService.class);\n+  private static final Logger log =\n+    LoggerFactory.getLogger(SourceDocResourceService.class);\n \n-    @Context\n-    @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n-    private Request request;\n-    @Context\n-    @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n-    private UriInfo uri;\n+  @Context\n+  @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n+  private Request request;\n+  @Context\n+  @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n+  private UriInfo uri;\n \n-    /**\n-     * Project Identifier.\n-     */\n-    @PathParam(\"projectSlug\")\n-    private String projectSlug;\n+  /**\n+   * Project Identifier.\n+   */\n+  @PathParam(\"projectSlug\")\n+  private String projectSlug;\n \n-    /**\n-     * Project Iteration identifier.\n-     */\n-    @PathParam(\"iterationSlug\")\n-    private String iterationSlug;\n-    @Inject\n-    private ProjectIterationDAO projectIterationDAO;\n-    @Inject\n-    private DocumentDAO documentDAO;\n-    @Inject\n-    private LocaleService localeServiceImpl;\n-    @Inject\n-    private DocumentService documentServiceImpl;\n-    @Inject\n-    private ResourceUtils resourceUtils;\n-    @Inject\n-    private ETagUtils eTagUtils;\n-    @Inject\n-    private ZanataIdentity identity;\n+  /**\n+   * Project Iteration identifier.\n+   */\n+  @PathParam(\"iterationSlug\")\n+  private String iterationSlug;\n+  @Inject\n+  private ProjectIterationDAO projectIterationDAO;\n+  @Inject\n+  private DocumentDAO documentDAO;\n+  @Inject\n+  private LocaleService localeServiceImpl;\n+  @Inject\n+  private DocumentService documentServiceImpl;\n+  @Inject\n+  private ResourceUtils resourceUtils;\n+  @Inject\n+  private ETagUtils eTagUtils;\n+  @Inject\n+  private ZanataIdentity identity;\n \n-    @Inject\n-    private UrlUtil urlUtil;\n+  @Inject\n+  private UrlUtil urlUtil;\n \n-    @Override\n-    public Response head() {\n-        HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n-        EntityTag etag =\n-                projectIterationDAO.getResourcesETag(hProjectIteration);\n-        Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n-        if (response != null) {\n-            return response.build();\n-        }\n-        return Response.ok().tag(etag).build();\n+  @Override\n+  public Response head() {\n+    HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n+    EntityTag etag =\n+      projectIterationDAO.getResourcesETag(hProjectIteration);\n+    Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n+    if (response != null) {\n+      return response.build();\n     }\n+    return Response.ok().tag(etag).build();\n+  }\n \n-    @Override\n-    public Response get(Set<String> extensions) {\n-        HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n-        EntityTag etag =\n-                projectIterationDAO.getResourcesETag(hProjectIteration);\n-        Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n-        if (response != null) {\n-            return response.build();\n-        }\n-        List<ResourceMeta> resources = new ArrayList<ResourceMeta>();\n-        for (HDocument doc : hProjectIteration.getDocuments().values()) {\n-            // TODO we shouldn't need this check\n-            if (!doc.isObsolete()) {\n-                ResourceMeta resource = new ResourceMeta();\n-                resourceUtils.transferToAbstractResourceMeta(doc, resource);\n-                resources.add(resource);\n-            }\n-        }\n-        Object entity =\n-                new GenericEntity<List<ResourceMeta>>(resources){};\n-        return Response.ok(entity).tag(etag).build();\n+  @Override\n+  public Response get(Set<String> extensions) {\n+    HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n+    EntityTag etag =\n+      projectIterationDAO.getResourcesETag(hProjectIteration);\n+    Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n+    if (response != null) {\n+      return response.build();\n     }\n-\n-    @Override\n-    public Response post(Resource resource, Set<String> extensions,\n-            boolean copytrans) {\n-        identity.checkPermission(getSecuredIteration(), \"import-template\");\n-        HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        ResourceUtils.validateExtensions(extensions); // gettext, comment\n-        String resourceName = resource.getName();\n-        if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n-                resourceName)) {\n-            log.warn(\"bad resource name in post(): {}\", resourceName);\n-            throw new WebApplicationException(Response\n-                    .status(Response.Status.BAD_REQUEST)\n-                    .entity(\"not a legal resource name: \" + resourceName)\n-                    .build());\n-        }\n-        HDocument document = documentDAO\n-                .getByDocIdAndIteration(hProjectIteration, resourceName);\n-        // already existing non-obsolete document.\n-        if (document != null) {\n-            if (!document.isObsolete()) {\n-                // updates must happen through PUT on the actual resource\n-                return Response.status(Response.Status.CONFLICT)\n-                        .entity(\"A document with name \" + resourceName\n-                                + \" already exists.\")\n-                        .build();\n-            }\n-        }\n-        // TODO No need for docId param since it's resource.getName()\n-        document = this.documentServiceImpl.saveDocument(this.projectSlug,\n-                this.iterationSlug, resource, extensions, copytrans);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                document.getDocId(), extensions);\n-        return Response\n-                .created(URI.create(\n-                        \"r/\" + resourceUtils.encodeDocId(document.getDocId())))\n-                .tag(etag).build();\n+    List<ResourceMeta> resources = new ArrayList<ResourceMeta>();\n+    for (HDocument doc : hProjectIteration.getDocuments().values()) {\n+      // TODO we shouldn't need this check\n+      if (!doc.isObsolete()) {\n+        ResourceMeta resource = new ResourceMeta();\n+        resourceUtils.transferToAbstractResourceMeta(doc, resource);\n+        resources.add(resource);\n+      }\n     }\n+    Object entity =\n+      new GenericEntity<List<ResourceMeta>>(resources) {\n+      };\n+    return Response.ok(entity).tag(etag).build();\n+  }\n \n-    @Deprecated\n-    @Override\n-    public Response getResource(String idNoSlash, Set<String> extensions) {\n-        String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n-        return getResourceWithDocId(id, extensions);\n+  @Override\n+  public Response post(Resource resource, Set<String> extensions,\n+                       boolean copytrans) {\n+    identity.checkPermission(getSecuredIteration(), \"import-template\");\n+    HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n+    ResourceUtils.validateExtensions(extensions); // gettext, comment\n+    String resourceName = resource.getName();\n+    if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n+      resourceName)) {\n+      log.warn(\"bad resource name in post(): {}\", resourceName);\n+      throw new WebApplicationException(Response\n+        .status(Response.Status.BAD_REQUEST)\n+        .entity(\"not a legal resource name: \" + resourceName)\n+        .build());\n     }\n-\n-    @Override\n-    public Response getResourceWithDocId(String docId, Set<String> extensions) {\n-        log.debug(\"start get resource\");\n-        if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n-        }\n-        HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n-        ResourceUtils.validateExtensions(extensions);\n-        final Set<String> extSet = new HashSet<>(extensions);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extSet);\n-        Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n-        if (response != null) {\n-            return response.build();\n-        }\n-        HDocument doc =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n-        if (doc == null || doc.isObsolete()) {\n-            // TODO: return Problem DTO, https://tools.ietf.org/html/rfc7807\n-            return Response.status(Response.Status.NOT_FOUND)\n-                    .entity(\"document not found\").build();\n-        }\n-        Resource entity = new Resource(doc.getDocId());\n-        log.debug(\"get resource details {}\", entity.toString());\n-        resourceUtils.transferToResource(doc, entity);\n-        for (HTextFlow htf : doc.getTextFlows()) {\n-            TextFlow tf =\n-                    new TextFlow(htf.getResId(), doc.getLocale().getLocaleId());\n-            resourceUtils.transferToTextFlow(htf, tf);\n-            resourceUtils.transferToTextFlowExtensions(htf,\n-                    tf.getExtensions(true), extensions);\n-            entity.getTextFlows().add(tf);\n-        }\n-        // handle extensions\n-        resourceUtils.transferToResourceExtensions(doc,\n-                entity.getExtensions(true), extensions);\n-        log.debug(\"Get resource :{}\", entity.toString());\n-        return Response.ok().entity(entity).tag(etag)\n-                .lastModified(doc.getLastChanged()).build();\n+    HDocument document = documentDAO\n+      .getByDocIdAndIteration(hProjectIteration, resourceName);\n+    // already existing non-obsolete document.\n+    if (document != null) {\n+      if (!document.isObsolete()) {\n+        // updates must happen through PUT on the actual resource\n+        return Response.status(Response.Status.CONFLICT)\n+          .entity(\"A document with name \" + resourceName\n+            + \" already exists.\")\n+          .build();\n+      }\n     }\n+    // TODO No need for docId param since it's resource.getName()\n+    document = this.documentServiceImpl.saveDocument(this.projectSlug,\n+      this.iterationSlug, resource, extensions, copytrans);\n+    EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n+      document.getDocId(), extensions);\n+    return Response\n+      .created(URI.create(\n+        \"r/\" + resourceUtils.encodeDocId(document.getDocId())))\n+      .tag(etag).build();\n+  }\n \n-    @Deprecated\n-    @Override\n-    public Response putResource(String idNoSlash, Resource resource,\n-            Set<String> extensions, boolean copytrans) {\n-        String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n-        return putResourceWithDocId(resource, id, extensions, copytrans);\n-    }\n+  @Deprecated\n+  @Override\n+  public Response getResource(String idNoSlash, Set<String> extensions) {\n+    String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n+    return getResourceWithDocId(id, extensions);\n+  }\n \n-    @Override\n-    public Response putResourceWithDocId(Resource resource, String docId,\n-            Set<String> extensions, boolean copytrans) {\n-        identity.checkPermission(getSecuredIteration(), \"import-template\");\n-        log.debug(\"start put resource\");\n-        if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing docId\").build();\n-        }\n-        Response.ResponseBuilder response;\n-        HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        ResourceUtils.validateExtensions(extensions);\n-        HDocument document =\n-                this.documentDAO.getByDocIdAndIteration(hProjectIteration,\n-                        docId);\n-        if (document == null || document.isObsolete()) {\n-            response = Response.created(\n-                    UriBuilder.fromUri(urlUtil.restPath(uri.getPath()))\n-                            .queryParam(\"docId\", docId).build());\n-        } else {\n-            response = Response.ok();\n-        }\n-        resource.setName(docId);\n-        document = this.documentServiceImpl.saveDocument(projectSlug,\n-                iterationSlug, resource, extensions, copytrans);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                document.getDocId(), extensions);\n-        log.debug(\"put resource successfully\");\n-        return response.tag(etag).build();\n+  @Override\n+  public Response getResourceWithDocId(String docId, Set<String> extensions) {\n+    log.debug(\"start get resource\");\n+    if (StringUtils.isBlank(docId)) {\n+      return Response.status(Response.Status.BAD_REQUEST)\n+        .entity(\"missing id\").build();\n     }\n-\n-    @Deprecated\n-    @Override\n-    public Response deleteResource(String idNoSlash) {\n-        String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n-        return deleteResourceWithDocId(id);\n+    HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n+    ResourceUtils.validateExtensions(extensions);\n+    final Set<String> extSet = new HashSet<>(extensions);\n+    EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n+      docId, extSet);\n+    Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n+    if (response != null) {\n+      return response.build();\n     }\n-\n-    @Override\n-    public Response deleteResourceWithDocId(String docId) {\n-        identity.checkPermission(getSecuredIteration(), \"import-template\");\n-        if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n-        }\n-        HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, new HashSet<String>());\n-        Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n-        if (response != null) {\n-            return response.build();\n-        }\n-        HDocument document =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n-        documentServiceImpl.makeObsolete(document);\n-        return Response.ok().build();\n+    HDocument doc =\n+      documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+    if (doc == null || doc.isObsolete()) {\n+      // TODO: return Problem DTO, https://tools.ietf.org/html/rfc7807\n+      return Response.status(Response.Status.NOT_FOUND)\n+        .entity(\"document not found\").build();\n     }\n-\n-    @Deprecated\n-    @Override\n-    public Response getResourceMeta(String idNoSlash, Set<String> extensions) {\n-        String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n-        return getResourceMetaWithDocId(id, extensions);\n+    Resource entity = new Resource(doc.getDocId());\n+    log.debug(\"get resource details {}\", entity.toString());\n+    resourceUtils.transferToResource(doc, entity);\n+    for (HTextFlow htf : doc.getTextFlows()) {\n+      TextFlow tf =\n+        new TextFlow(htf.getResId(), doc.getLocale().getLocaleId());\n+      resourceUtils.transferToTextFlow(htf, tf);\n+      resourceUtils.transferToTextFlowExtensions(htf,\n+        tf.getExtensions(true), extensions);\n+      entity.getTextFlows().add(tf);\n     }\n+    // handle extensions\n+    resourceUtils.transferToResourceExtensions(doc,\n+      entity.getExtensions(true), extensions);\n+    log.debug(\"Get resource :{}\", entity.toString());\n+    return Response.ok().entity(entity).tag(etag)\n+      .lastModified(doc.getLastChanged()).build();\n+  }\n \n-    @Override\n-    public Response getResourceMetaWithDocId(String docId,\n-            Set<String> extensions) {\n-        log.debug(\"start to get resource meta\");\n-        if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n-        }\n-        HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extensions);\n-        Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n-        if (response != null) {\n-            return response.build();\n-        }\n-        HDocument doc =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n-        if (doc == null) {\n-            return Response.status(Response.Status.NOT_FOUND)\n-                    .entity(\"document not found\").build();\n-        }\n-        ResourceMeta entity = new ResourceMeta(doc.getDocId());\n-        resourceUtils.transferToAbstractResourceMeta(doc, entity);\n-        // transfer extensions\n-        resourceUtils.transferToResourceExtensions(doc,\n-                entity.getExtensions(true), extensions);\n-        log.debug(\"successfuly get resource meta: {}\", entity);\n-        return Response.ok().entity(entity).tag(etag).build();\n-    }\n+  @Deprecated\n+  @Override\n+  public Response putResource(String idNoSlash, Resource resource,\n+                              Set<String> extensions, boolean copytrans) {\n+    String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n+    return putResourceWithDocId(resource, id, extensions, copytrans);\n+  }\n \n-    @Deprecated\n-    @Override\n-    public Response putResourceMeta(String idNoSlash, ResourceMeta messageBody,\n-            Set<String> extensions) {\n-        String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n-        return putResourceMetaWithDocId(messageBody, id , extensions);\n+  @Override\n+  public Response putResourceWithDocId(Resource resource, String docId,\n+                                       Set<String> extensions, boolean copytrans) {\n+    identity.checkPermission(getSecuredIteration(), \"import-template\");\n+    log.debug(\"start put resource\");\n+    if (StringUtils.isBlank(docId)) {\n+      return Response.status(Response.Status.BAD_REQUEST)\n+        .entity(\"missing docId\").build();\n+    }\n+    Response.ResponseBuilder response;\n+    HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n+    ResourceUtils.validateExtensions(extensions);\n+    HDocument document =\n+      this.documentDAO.getByDocIdAndIteration(hProjectIteration,\n+        docId);\n+    if (document == null || document.isObsolete()) {\n+      response = Response.created(\n+        UriBuilder.fromUri(urlUtil.restPath(uri.getPath()))\n+          .queryParam(\"docId\", docId).build());\n+    } else {\n+      response = Response.ok();\n     }\n+    resource.setName(docId);\n+    document = this.documentServiceImpl.saveDocument(projectSlug,\n+      iterationSlug, resource, extensions, copytrans);\n+    EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n+      document.getDocId(), extensions);\n+    log.debug(\"put resource successfully\");\n+    return response.tag(etag).build();\n+  }\n \n-    @Override\n-    public Response putResourceMetaWithDocId(ResourceMeta messageBody,\n-            String docId, Set<String> extensions) {\n-        identity.checkPermission(getSecuredIteration(), \"import-template\");\n-        if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n-        }\n-        log.debug(\"start to put resource meta\");\n-        HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extensions);\n-        Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n-        if (response != null) {\n-            return response.build();\n-        }\n-        log.debug(\"pass evaluation\");\n-        log.debug(\"put resource meta: {}\", messageBody);\n-        HDocument document =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n-        if (document == null) {\n-            return Response.status(Response.Status.NOT_FOUND).build();\n-        }\n-        if (document.isObsolete()) {\n-            return Response.status(Response.Status.NOT_FOUND).build();\n-        }\n-        HLocale hLocale = validateTargetLocale(messageBody.getLang(),\n-                projectSlug, iterationSlug);\n-        boolean changed = resourceUtils.transferFromResourceMetadata(\n-                messageBody, document, extensions, hLocale,\n-                document.getRevision() + 1);\n-        if (changed) {\n-            documentDAO.flush();\n-            etag = eTagUtils.generateETagForDocument(hProjectIteration, docId,\n-                    extensions);\n-        }\n-        log.debug(\"put resource meta successfully\");\n-        return Response.ok().tag(etag).lastModified(document.getLastChanged())\n-                .build();\n+  @Deprecated\n+  @Override\n+  public Response deleteResource(String idNoSlash) {\n+    String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n+    return deleteResourceWithDocId(id);\n+  }\n+\n+  @Override\n+  public Response deleteResourceWithDocId(String docId) {\n+    identity.checkPermission(getSecuredIteration(), \"import-template\");\n+    if (StringUtils.isBlank(docId)) {\n+      return Response.status(Response.Status.BAD_REQUEST)\n+        .entity(\"missing id\").build();\n+    }\n+    HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n+    EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n+      docId, new HashSet<String>());\n+    Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n+    if (response != null) {\n+      return response.build();\n     }\n+    HDocument document =\n+      documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+    documentServiceImpl.makeObsolete(document);\n+    return Response.ok().build();\n+  }\n \n-    private HProjectIteration\n-            retrieveAndCheckIteration(boolean writeOperation) {\n-        HProjectIteration hProjectIteration =\n-                projectIterationDAO.getBySlug(projectSlug, iterationSlug);\n-        HProject hProject = hProjectIteration == null ? null\n-                : hProjectIteration.getProject();\n-        if (hProjectIteration == null) {\n-            throw new NoSuchEntityException(\"Project Iteration \\'\" + projectSlug\n-                    + \":\" + iterationSlug + \"\\' not found.\");\n-        } else if (!haveReadAccess(hProjectIteration) ||\n-                hProjectIteration.getStatus().equals(EntityStatus.OBSOLETE)\n-                || hProject.getStatus().equals(EntityStatus.OBSOLETE)) {\n-            throw new NoSuchEntityException(\n-                    \"Project Iteration \\'\" + projectSlug\n-                            + \":\" + iterationSlug + \"\\' not found.\");\n-        } else if (writeOperation) {\n-            if (hProjectIteration.getStatus().equals(EntityStatus.READONLY)\n-                    || hProject.getStatus().equals(EntityStatus.READONLY)) {\n-                throw new ReadOnlyEntityException(\n-                        \"Project Iteration \\'\" + projectSlug + \":\"\n-                                + iterationSlug + \"\\' is read-only.\");\n-            } else {\n-                return hProjectIteration;\n-            }\n-        } else {\n-            return hProjectIteration;\n-        }\n+  @Deprecated\n+  @Override\n+  public Response getResourceMeta(String idNoSlash, Set<String> extensions) {\n+    String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n+    return getResourceMetaWithDocId(id, extensions);\n+  }\n+\n+  @Override\n+  public Response getResourceMetaWithDocId(String docId,\n+                                           Set<String> extensions) {\n+    log.debug(\"start to get resource meta\");\n+    if (StringUtils.isBlank(docId)) {\n+      return Response.status(Response.Status.BAD_REQUEST)\n+        .entity(\"missing id\").build();\n+    }\n+    HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n+    EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n+      docId, extensions);\n+    Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n+    if (response != null) {\n+      return response.build();\n+    }\n+    HDocument doc =\n+      documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+    if (doc == null) {\n+      return Response.status(Response.Status.NOT_FOUND)\n+        .entity(\"document not found\").build();\n     }\n+    ResourceMeta entity = new ResourceMeta(doc.getDocId());\n+    resourceUtils.transferToAbstractResourceMeta(doc, entity);\n+    // transfer extensions\n+    resourceUtils.transferToResourceExtensions(doc,\n+      entity.getExtensions(true), extensions);\n+    log.debug(\"successfuly get resource meta: {}\", entity);\n+    return Response.ok().entity(entity).tag(etag).build();\n+  }\n \n-    private HLocale validateTargetLocale(LocaleId locale, String projectSlug,\n-            String iterationSlug) {\n-        HLocale hLocale;\n-        try {\n-            hLocale = localeServiceImpl.validateLocaleByProjectIteration(locale,\n-                    projectSlug, iterationSlug);\n-            return hLocale;\n-        } catch (ZanataServiceException e) {\n-            log.warn(\"Exception validating target locale {} in proj {} iter {}\",\n-                    locale, projectSlug, iterationSlug, e);\n-            throw new WebApplicationException(\n-                    Response.status(Response.Status.FORBIDDEN)\n-                            .entity(e.getMessage()).build());\n-        }\n+  @Deprecated\n+  @Override\n+  public Response putResourceMeta(String idNoSlash, ResourceMeta messageBody,\n+                                  Set<String> extensions) {\n+    String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n+    return putResourceMetaWithDocId(messageBody, id, extensions);\n+  }\n+\n+  @Override\n+  public Response putResourceMetaWithDocId(ResourceMeta messageBody,\n+                                           String docId, Set<String> extensions) {\n+    identity.checkPermission(getSecuredIteration(), \"import-template\");\n+    if (StringUtils.isBlank(docId)) {\n+      return Response.status(Response.Status.BAD_REQUEST)\n+        .entity(\"missing id\").build();\n+    }\n+    log.debug(\"start to put resource meta\");\n+    HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n+    EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n+      docId, extensions);\n+    Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n+    if (response != null) {\n+      return response.build();\n     }\n+    log.debug(\"pass evaluation\");\n+    log.debug(\"put resource meta: {}\", messageBody);\n+    HDocument document =\n+      documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+    if (document == null) {\n+      return Response.status(Response.Status.NOT_FOUND).build();\n+    }\n+    if (document.isObsolete()) {\n+      return Response.status(Response.Status.NOT_FOUND).build();\n+    }\n+    HLocale hLocale = validateTargetLocale(messageBody.getLang(),\n+      projectSlug, iterationSlug);\n+    boolean changed = resourceUtils.transferFromResourceMetadata(\n+      messageBody, document, extensions, hLocale,\n+      document.getRevision() + 1);\n+    if (changed) {\n+      documentDAO.flush();\n+      etag = eTagUtils.generateETagForDocument(hProjectIteration, docId,\n+        extensions);\n+    }\n+    log.debug(\"put resource meta successfully\");\n+    return Response.ok().tag(etag).lastModified(document.getLastChanged())\n+      .build();\n+  }\n \n-    public HProjectIteration getSecuredIteration() {\n-        return retrieveAndCheckIteration(false);\n+  private HProjectIteration\n+  retrieveAndCheckIteration(boolean writeOperation) {\n+    HProjectIteration hProjectIteration =\n+      projectIterationDAO.getBySlug(projectSlug, iterationSlug);\n+    HProject hProject = hProjectIteration == null ? null\n+      : hProjectIteration.getProject();\n+    if (hProjectIteration == null) {\n+      throw new NoSuchEntityException(\"Project Iteration \\'\" + projectSlug\n+        + \":\" + iterationSlug + \"\\' not found.\");\n+    } else if (!haveReadAccess(hProjectIteration) ||\n+      hProjectIteration.getStatus().equals(EntityStatus.OBSOLETE)\n+      || hProject.getStatus().equals(EntityStatus.OBSOLETE)) {\n+      throw new NoSuchEntityException(\n+        \"Project Iteration \\'\" + projectSlug\n+          + \":\" + iterationSlug + \"\\' not found.\");\n+    } else if (writeOperation) {\n+      if (hProjectIteration.getStatus().equals(EntityStatus.READONLY)\n+        || hProject.getStatus().equals(EntityStatus.READONLY)) {\n+        throw new ReadOnlyEntityException(\n+          \"Project Iteration \\'\" + projectSlug + \":\"\n+            + iterationSlug + \"\\' is read-only.\");\n+      } else {\n+        return hProjectIteration;\n+      }\n+    } else {\n+      return hProjectIteration;\n     }\n+  }\n \n-    /**\n-     * Check if current user have read access to the project\n-     * (checking for private project)\n-     */\n-    public boolean haveReadAccess(HProjectIteration version) {\n-        return identity.hasPermission(version, \"read\");\n+  private HLocale validateTargetLocale(LocaleId locale, String projectSlug,\n+                                       String iterationSlug) {\n+    HLocale hLocale;\n+    try {\n+      hLocale = localeServiceImpl.validateLocaleByProjectIteration(locale,\n+        projectSlug, iterationSlug);\n+      return hLocale;\n+    } catch (ZanataServiceException e) {\n+      log.warn(\"Exception validating target locale {} in proj {} iter {}\",\n+        locale, projectSlug, iterationSlug, e);\n+      throw new WebApplicationException(\n+        Response.status(Response.Status.FORBIDDEN)\n+          .entity(e.getMessage()).build());\n     }\n+  }\n+\n+  public HProjectIteration getSecuredIteration() {\n+    return retrieveAndCheckIteration(false);\n+  }\n+\n+  /**\n+   * Check if current user have read access to the project\n+   * (checking for private project)\n+   */\n+  public boolean haveReadAccess(HProjectIteration version) {\n+    return identity.hasPermission(version, \"read\");\n+  }\n }\n",
            "diff_size": 493
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "150",
                    "column": "55",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/13/SourceDocResourceService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/13/SourceDocResourceService.java\nindex 055f9969cbe..89ed7fdfa40 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/13/SourceDocResourceService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/13/SourceDocResourceService.java\n@@ -39,7 +39,6 @@ import javax.ws.rs.core.UriBuilder;\n import javax.ws.rs.core.UriInfo;\n import javax.inject.Inject;\n import javax.inject.Named;\n-\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.deltaspike.jpa.api.transaction.Transactional;\n@@ -70,14 +69,14 @@ import org.zanata.util.UrlUtil;\n  * @author Carlos Munoz\n  *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n+\n+\n @RequestScoped\n @Named(\"sourceDocResourceService\")\n @Path(SourceDocResource.SERVICE_PATH)\n @Transactional\n public class SourceDocResourceService implements SourceDocResource {\n-    private static final Logger log =\n-            LoggerFactory.getLogger(SourceDocResourceService.class);\n-\n+    private static final Logger log = LoggerFactory.getLogger(SourceDocResourceService.class);\n     @Context\n     @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n     private Request request;\n@@ -110,15 +109,12 @@ public class SourceDocResourceService implements SourceDocResource {\n     private ETagUtils eTagUtils;\n     @Inject\n     private ZanataIdentity identity;\n-\n     @Inject\n     private UrlUtil urlUtil;\n-\n     @Override\n     public Response head() {\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n-        EntityTag etag =\n-                projectIterationDAO.getResourcesETag(hProjectIteration);\n+        EntityTag etag = projectIterationDAO.getResourcesETag(hProjectIteration);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n@@ -129,8 +125,7 @@ public class SourceDocResourceService implements SourceDocResource {\n     @Override\n     public Response get(Set<String> extensions) {\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n-        EntityTag etag =\n-                projectIterationDAO.getResourcesETag(hProjectIteration);\n+        EntityTag etag = projectIterationDAO.getResourcesETag(hProjectIteration);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n@@ -144,47 +139,34 @@ public class SourceDocResourceService implements SourceDocResource {\n                 resources.add(resource);\n             }\n         }\n-        Object entity =\n-                new GenericEntity<List<ResourceMeta>>(resources){};\n+        Object entity = new GenericEntity<List<ResourceMeta>>(resources) {};\n         return Response.ok(entity).tag(etag).build();\n     }\n \n     @Override\n-    public Response post(Resource resource, Set<String> extensions,\n-            boolean copytrans) {\n+    public Response post(Resource resource, Set<String> extensions, boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n         ResourceUtils.validateExtensions(extensions); // gettext, comment\n         String resourceName = resource.getName();\n-        if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n-                resourceName)) {\n+        if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX, resourceName)) {\n             log.warn(\"bad resource name in post(): {}\", resourceName);\n-            throw new WebApplicationException(Response\n-                    .status(Response.Status.BAD_REQUEST)\n-                    .entity(\"not a legal resource name: \" + resourceName)\n-                    .build());\n+            throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(\"not a legal resource name: \" + resourceName).build());\n         }\n-        HDocument document = documentDAO\n-                .getByDocIdAndIteration(hProjectIteration, resourceName);\n+        HDocument document = documentDAO.getByDocIdAndIteration(hProjectIteration, resourceName);\n         // already existing non-obsolete document.\n         if (document != null) {\n             if (!document.isObsolete()) {\n                 // updates must happen through PUT on the actual resource\n-                return Response.status(Response.Status.CONFLICT)\n-                        .entity(\"A document with name \" + resourceName\n-                                + \" already exists.\")\n-                        .build();\n+                return Response.status(Response.Status.CONFLICT).entity(\"A document with name \" + resourceName + \" already exists.\").build();\n             }\n         }\n         // TODO No need for docId param since it's resource.getName()\n-        document = this.documentServiceImpl.saveDocument(this.projectSlug,\n+        document =\n+            this.documentServiceImpl.saveDocument(this.projectSlug,\n                 this.iterationSlug, resource, extensions, copytrans);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                document.getDocId(), extensions);\n-        return Response\n-                .created(URI.create(\n-                        \"r/\" + resourceUtils.encodeDocId(document.getDocId())))\n-                .tag(etag).build();\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, document.getDocId(), extensions);\n+        return Response.created(URI.create(\"r/\" + resourceUtils.encodeDocId(document.getDocId()))).tag(etag).build();\n     }\n \n     @Deprecated\n@@ -198,79 +180,63 @@ public class SourceDocResourceService implements SourceDocResource {\n     public Response getResourceWithDocId(String docId, Set<String> extensions) {\n         log.debug(\"start get resource\");\n         if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(\"missing id\").build();\n         }\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n         ResourceUtils.validateExtensions(extensions);\n         final Set<String> extSet = new HashSet<>(extensions);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extSet);\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, docId, extSet);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n-        HDocument doc =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+        HDocument doc = documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (doc == null || doc.isObsolete()) {\n             // TODO: return Problem DTO, https://tools.ietf.org/html/rfc7807\n-            return Response.status(Response.Status.NOT_FOUND)\n-                    .entity(\"document not found\").build();\n+            return Response.status(Response.Status.NOT_FOUND).entity(\"document not found\").build();\n         }\n         Resource entity = new Resource(doc.getDocId());\n         log.debug(\"get resource details {}\", entity.toString());\n         resourceUtils.transferToResource(doc, entity);\n         for (HTextFlow htf : doc.getTextFlows()) {\n-            TextFlow tf =\n-                    new TextFlow(htf.getResId(), doc.getLocale().getLocaleId());\n+            TextFlow tf = new TextFlow(htf.getResId(), doc.getLocale().getLocaleId());\n             resourceUtils.transferToTextFlow(htf, tf);\n-            resourceUtils.transferToTextFlowExtensions(htf,\n-                    tf.getExtensions(true), extensions);\n+            resourceUtils.transferToTextFlowExtensions(htf, tf.getExtensions(true), extensions);\n             entity.getTextFlows().add(tf);\n         }\n         // handle extensions\n-        resourceUtils.transferToResourceExtensions(doc,\n-                entity.getExtensions(true), extensions);\n+        resourceUtils.transferToResourceExtensions(doc, entity.getExtensions(true), extensions);\n         log.debug(\"Get resource :{}\", entity.toString());\n-        return Response.ok().entity(entity).tag(etag)\n-                .lastModified(doc.getLastChanged()).build();\n+        return Response.ok().entity(entity).tag(etag).lastModified(doc.getLastChanged()).build();\n     }\n \n     @Deprecated\n     @Override\n-    public Response putResource(String idNoSlash, Resource resource,\n-            Set<String> extensions, boolean copytrans) {\n+    public Response putResource(String idNoSlash, Resource resource, Set<String> extensions, boolean copytrans) {\n         String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n         return putResourceWithDocId(resource, id, extensions, copytrans);\n     }\n \n     @Override\n-    public Response putResourceWithDocId(Resource resource, String docId,\n-            Set<String> extensions, boolean copytrans) {\n+    public Response putResourceWithDocId(Resource resource, String docId, Set<String> extensions, boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         log.debug(\"start put resource\");\n         if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing docId\").build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(\"missing docId\").build();\n         }\n         Response.ResponseBuilder response;\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n         ResourceUtils.validateExtensions(extensions);\n-        HDocument document =\n-                this.documentDAO.getByDocIdAndIteration(hProjectIteration,\n-                        docId);\n+        HDocument document = this.documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (document == null || document.isObsolete()) {\n-            response = Response.created(\n-                    UriBuilder.fromUri(urlUtil.restPath(uri.getPath()))\n-                            .queryParam(\"docId\", docId).build());\n+            response = Response.created(UriBuilder.fromUri(urlUtil.restPath(uri.getPath())).queryParam(\"docId\", docId).build());\n         } else {\n             response = Response.ok();\n         }\n         resource.setName(docId);\n-        document = this.documentServiceImpl.saveDocument(projectSlug,\n-                iterationSlug, resource, extensions, copytrans);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                document.getDocId(), extensions);\n+        document =\n+            this.documentServiceImpl.saveDocument(projectSlug, iterationSlug, resource, extensions, copytrans);\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, document.getDocId(), extensions);\n         log.debug(\"put resource successfully\");\n         return response.tag(etag).build();\n     }\n@@ -286,18 +252,15 @@ public class SourceDocResourceService implements SourceDocResource {\n     public Response deleteResourceWithDocId(String docId) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(\"missing id\").build();\n         }\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, new HashSet<String>());\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, docId, new HashSet<String>());\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n-        HDocument document =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+        HDocument document = documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         documentServiceImpl.makeObsolete(document);\n         return Response.ok().build();\n     }\n@@ -310,126 +273,97 @@ public class SourceDocResourceService implements SourceDocResource {\n     }\n \n     @Override\n-    public Response getResourceMetaWithDocId(String docId,\n-            Set<String> extensions) {\n+    public Response getResourceMetaWithDocId(String docId, Set<String> extensions) {\n         log.debug(\"start to get resource meta\");\n         if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(\"missing id\").build();\n         }\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extensions);\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, docId, extensions);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n-        HDocument doc =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+        HDocument doc = documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (doc == null) {\n-            return Response.status(Response.Status.NOT_FOUND)\n-                    .entity(\"document not found\").build();\n+            return Response.status(Response.Status.NOT_FOUND).entity(\"document not found\").build();\n         }\n         ResourceMeta entity = new ResourceMeta(doc.getDocId());\n         resourceUtils.transferToAbstractResourceMeta(doc, entity);\n         // transfer extensions\n-        resourceUtils.transferToResourceExtensions(doc,\n-                entity.getExtensions(true), extensions);\n+        resourceUtils.transferToResourceExtensions(doc, entity.getExtensions(true), extensions);\n         log.debug(\"successfuly get resource meta: {}\", entity);\n         return Response.ok().entity(entity).tag(etag).build();\n     }\n \n     @Deprecated\n     @Override\n-    public Response putResourceMeta(String idNoSlash, ResourceMeta messageBody,\n-            Set<String> extensions) {\n+    public Response putResourceMeta(String idNoSlash, ResourceMeta messageBody, Set<String> extensions) {\n         String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n-        return putResourceMetaWithDocId(messageBody, id , extensions);\n+        return putResourceMetaWithDocId(messageBody, id, extensions);\n     }\n \n     @Override\n-    public Response putResourceMetaWithDocId(ResourceMeta messageBody,\n-            String docId, Set<String> extensions) {\n+    public Response putResourceMetaWithDocId(ResourceMeta messageBody, String docId, Set<String> extensions) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(\"missing id\").build();\n         }\n         log.debug(\"start to put resource meta\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extensions);\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, docId, extensions);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n         log.debug(\"pass evaluation\");\n         log.debug(\"put resource meta: {}\", messageBody);\n-        HDocument document =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+        HDocument document = documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (document == null) {\n             return Response.status(Response.Status.NOT_FOUND).build();\n         }\n         if (document.isObsolete()) {\n             return Response.status(Response.Status.NOT_FOUND).build();\n         }\n-        HLocale hLocale = validateTargetLocale(messageBody.getLang(),\n-                projectSlug, iterationSlug);\n-        boolean changed = resourceUtils.transferFromResourceMetadata(\n-                messageBody, document, extensions, hLocale,\n-                document.getRevision() + 1);\n+        HLocale hLocale = validateTargetLocale(messageBody.getLang(), projectSlug, iterationSlug);\n+        boolean changed = resourceUtils.transferFromResourceMetadata(messageBody, document, extensions, hLocale, document.getRevision() + 1);\n         if (changed) {\n             documentDAO.flush();\n-            etag = eTagUtils.generateETagForDocument(hProjectIteration, docId,\n-                    extensions);\n+            etag = eTagUtils.generateETagForDocument(hProjectIteration, docId, extensions);\n         }\n         log.debug(\"put resource meta successfully\");\n-        return Response.ok().tag(etag).lastModified(document.getLastChanged())\n-                .build();\n+        return Response.ok().tag(etag).lastModified(document.getLastChanged()).build();\n     }\n \n-    private HProjectIteration\n-            retrieveAndCheckIteration(boolean writeOperation) {\n-        HProjectIteration hProjectIteration =\n-                projectIterationDAO.getBySlug(projectSlug, iterationSlug);\n+    private HProjectIteration retrieveAndCheckIteration(boolean writeOperation) {\n+        HProjectIteration hProjectIteration = projectIterationDAO.getBySlug(projectSlug, iterationSlug);\n         HProject hProject = hProjectIteration == null ? null\n-                : hProjectIteration.getProject();\n+            : hProjectIteration.getProject();\n         if (hProjectIteration == null) {\n-            throw new NoSuchEntityException(\"Project Iteration \\'\" + projectSlug\n-                    + \":\" + iterationSlug + \"\\' not found.\");\n-        } else if (!haveReadAccess(hProjectIteration) ||\n-                hProjectIteration.getStatus().equals(EntityStatus.OBSOLETE)\n-                || hProject.getStatus().equals(EntityStatus.OBSOLETE)) {\n-            throw new NoSuchEntityException(\n-                    \"Project Iteration \\'\" + projectSlug\n-                            + \":\" + iterationSlug + \"\\' not found.\");\n+            throw new NoSuchEntityException(\"Project Iteration \\'\" + projectSlug + \":\" + iterationSlug + \"\\' not found.\");\n+        } else if (!haveReadAccess(hProjectIteration)\n+                       || hProjectIteration.getStatus().equals(EntityStatus.OBSOLETE)\n+                       || hProject.getStatus().equals(EntityStatus.OBSOLETE)) {\n+            throw new NoSuchEntityException(\"Project Iteration \\'\" + projectSlug + \":\" + iterationSlug + \"\\' not found.\");\n         } else if (writeOperation) {\n-            if (hProjectIteration.getStatus().equals(EntityStatus.READONLY)\n-                    || hProject.getStatus().equals(EntityStatus.READONLY)) {\n-                throw new ReadOnlyEntityException(\n-                        \"Project Iteration \\'\" + projectSlug + \":\"\n-                                + iterationSlug + \"\\' is read-only.\");\n-            } else {\n-                return hProjectIteration;\n-            }\n-        } else {\n-            return hProjectIteration;\n-        }\n+                   if (hProjectIteration.getStatus().equals(EntityStatus.READONLY) || hProject.getStatus().equals(EntityStatus.READONLY)) {\n+                       throw new ReadOnlyEntityException(\"Project Iteration \\'\" + projectSlug + \":\" + iterationSlug + \"\\' is read-only.\");\n+                   } else {\n+                       return hProjectIteration;\n+                   }\n+               } else {\n+                   return hProjectIteration;\n+               }\n     }\n \n-    private HLocale validateTargetLocale(LocaleId locale, String projectSlug,\n-            String iterationSlug) {\n+    private HLocale validateTargetLocale(LocaleId locale, String projectSlug, String iterationSlug) {\n         HLocale hLocale;\n         try {\n-            hLocale = localeServiceImpl.validateLocaleByProjectIteration(locale,\n-                    projectSlug, iterationSlug);\n+            hLocale = localeServiceImpl.validateLocaleByProjectIteration(locale, projectSlug, iterationSlug);\n             return hLocale;\n         } catch (ZanataServiceException e) {\n-            log.warn(\"Exception validating target locale {} in proj {} iter {}\",\n-                    locale, projectSlug, iterationSlug, e);\n-            throw new WebApplicationException(\n-                    Response.status(Response.Status.FORBIDDEN)\n-                            .entity(e.getMessage()).build());\n+            log.warn(\"Exception validating target locale {} in proj {} iter {}\", locale, projectSlug, iterationSlug, e);\n+            throw new WebApplicationException(Response.status(Response.Status.FORBIDDEN).entity(e.getMessage()).build());\n         }\n     }\n \n@@ -441,7 +375,8 @@ public class SourceDocResourceService implements SourceDocResource {\n      * Check if current user have read access to the project\n      * (checking for private project)\n      */\n+\n     public boolean haveReadAccess(HProjectIteration version) {\n         return identity.hasPermission(version, \"read\");\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 141
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "157",
                    "column": "53",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "157",
                    "column": "54",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/13/SourceDocResourceService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/13/SourceDocResourceService.java\nindex 055f9969cbe..aba79edb4a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/13/SourceDocResourceService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/13/SourceDocResourceService.java\n@@ -154,7 +154,7 @@ public class SourceDocResourceService implements SourceDocResource {\n             boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        ResourceUtils.validateExtensions(extensions); // gettext, comment\n+        ResourceUtils.validateExtensions(extensions);// gettext, commentString resourceName = resource.getName();\n         String resourceName = resource.getName();\n         if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n                 resourceName)) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/13/SourceDocResourceService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/13/SourceDocResourceService.java\nindex 055f9969cbe..24301be48c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/13/SourceDocResourceService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/13/SourceDocResourceService.java\n@@ -154,8 +154,9 @@ public class SourceDocResourceService implements SourceDocResource {\n             boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        ResourceUtils.validateExtensions(extensions); // gettext, comment\n-        String resourceName = resource.getName();\n+        ResourceUtils.validateExtensions(extensions);\n+        // gettext, comment\n+         String resourceName = resource.getName();\n         if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n                 resourceName)) {\n             log.warn(\"bad resource name in post(): {}\", resourceName);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}