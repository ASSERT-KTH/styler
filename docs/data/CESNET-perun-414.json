{
    "project_name": "CESNET-perun",
    "error_id": "414",
    "information": {
        "errors": [
            {
                "line": "255",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t\treturn \"rowgreenyellow\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn \"\";\n\n\t\t\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/414/GetRichTaskResultsByTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/414/GetRichTaskResultsByTask.java\nindex 17f12b3fd5b..f3dfd0ee036 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/414/GetRichTaskResultsByTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/414/GetRichTaskResultsByTask.java\n@@ -252,7 +252,7 @@ public class GetRichTaskResultsByTask implements JsonCallback, JsonCallbackTable\n \t\t\t\telse if (row.getStatus().equalsIgnoreCase(\"WARNING\")){\n \t\t\t\t\treturn \"rowgreenyellow\";\n \t\t\t\t}\n-\t\t\t\t\n+\n \t\t\t\treturn \"\";\n \n \t\t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/414/GetRichTaskResultsByTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/414/GetRichTaskResultsByTask.java\nindex 17f12b3fd5b..6a434ae8fa5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/414/GetRichTaskResultsByTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/414/GetRichTaskResultsByTask.java\n@@ -32,399 +32,395 @@ import java.util.Comparator;\n  */\n public class GetRichTaskResultsByTask implements JsonCallback, JsonCallbackTable<TaskResult>, JsonCallbackOracle<TaskResult> {\n \n-\tprivate static final int ERROR_MESSAGE_LIMIT = 150;\n-\tprivate static final int STANDARD_MESSAGE_LIMIT = 40;\n-\n-\t// Session\n-\tprivate PerunWebSession session = PerunWebSession.getInstance();\n-\t// JSON URL\n-\tstatic private final String JSON_URL = \"tasksManager/getTaskResultsForGUIByTaskOnlyNewest\";\n-\t// External events\n-\tprivate JsonCallbackEvents events = new JsonCallbackEvents();\n-\t// data providers\n-\tprivate ListDataProvider<TaskResult> dataProvider = new ListDataProvider<TaskResult>();\n-\tprivate ArrayList<TaskResult> list = new ArrayList<TaskResult>();\n-\tprivate PerunTable<TaskResult> table;\n-\tprivate FieldUpdater<TaskResult, String> fieldUpdater;\n-\t// Selection model\n-\tfinal MultiSelectionModel<TaskResult> selectionModel = new MultiSelectionModel<TaskResult>(new GeneralKeyProvider<TaskResult>());\n-\t// loader image\n-\tprivate AjaxLoaderImage loaderImage = new AjaxLoaderImage();\n-\tprivate int taskId = 0;\n-\n-\tprivate UnaccentMultiWordSuggestOracle oracle = new UnaccentMultiWordSuggestOracle();\n-\tprivate ArrayList<TaskResult> fullBackup = new ArrayList<TaskResult>();\n-\n-\t/**\n-\t * New instance of get tasks results\n-\t */\n-\tpublic GetRichTaskResultsByTask(int taskId) {\n-\t\tthis.taskId = taskId;\n-\t}\n-\n-\t/**\n-\t * New instance of get tasks results with external events\n-\t *\n-\t * @param events external events\n-\t */\n-\tpublic GetRichTaskResultsByTask(int taskId, JsonCallbackEvents events) {\n-\t\tthis.taskId = taskId;\n-\t\tthis.events = events;\n-\t}\n-\n-\t/**\n-\t * Return table with task results and start callback\n-\t *\n-\t * @return table\n-\t */\n-\tpublic CellTable<TaskResult> getTable() {\n-\n-\t\tretrieveData();\n-\t\treturn getEmptyTable();\n-\n-\t}\n-\n-\t/**\n-\t * Return table with task results and start callback\n-\t *\n-\t * @return table\n-\t */\n-\tpublic CellTable<TaskResult> getTable(FieldUpdater<TaskResult, String> fieldUpdater) {\n-\t\tthis.fieldUpdater = fieldUpdater;\n-\t\tretrieveData();\n-\t\treturn getEmptyTable();\n-\t}\n-\n-\t/**\n-\t * Return table definition\n-\t *\n-\t * @return table widget\n-\t */\n-\tpublic CellTable<TaskResult> getEmptyTable() {\n-\n-\t\t// Table data provider.\n-\t\tdataProvider = new ListDataProvider<TaskResult>(list);\n-\n-\t\t// Cell table\n-\t\ttable = new PerunTable<TaskResult>(list);\n-\t\ttable.removeRowCountChangeHandler();\n-\n-\t\t// Connect the table to the data provider.\n-\t\tdataProvider.addDataDisplay(table);\n-\n-\t\t// Sorting\n-\t\tListHandler<TaskResult> columnSortHandler = new ListHandler<TaskResult>(dataProvider.getList());\n-\t\ttable.addColumnSortHandler(columnSortHandler);\n-\n-\t\t// table selection\n-\t\ttable.setSelectionModel(selectionModel, DefaultSelectionEventManager.<TaskResult> createCheckboxManager());\n-\n-\t\t// set empty content & loader\n-\t\ttable.setEmptyTableWidget(loaderImage);\n-\t\tloaderImage.setEmptyResultMessage(\"No propagation results found.\");\n-\n-\t\ttable.addCheckBoxColumn();\n-\n-\t\ttable.addIdColumn(\"Result Id\", fieldUpdater, 85);\n-\n-\t\t// destination column\n-\t\tColumn<TaskResult, String> destinationColumn = JsonUtils.addColumn(object ->\n-\t\t\t\tString.valueOf(object.getDestination().getDestination()), fieldUpdater);\n-\n-\t\tdestinationColumn.setSortable(true);\n-\n-\t\tcolumnSortHandler.setComparator(destinationColumn, (o1, o2) ->\n-\t\t\t\tTableSorter.smartCompare(o1.getDestination().getDestination(), o2.getDestination().getDestination()));\n-\n-\t\t// Type column\n-\t\tColumn<TaskResult, String> typeColumn = JsonUtils.addColumn(object ->\n-\t\t\t\tString.valueOf(object.getDestination().getType().toUpperCase()), fieldUpdater);\n-\n-\t\ttypeColumn.setSortable(true);\n-\t\tcolumnSortHandler.setComparator(typeColumn, new Comparator<TaskResult>(){\n-\t\t\tpublic int compare(TaskResult o1, TaskResult o2) {\n-\t\t\t\tint comp = o1.getDestination().getType().compareToIgnoreCase((o2.getDestination().getType()));\n-\t\t\t\tif (comp == 0) {\n-\t\t\t\t\treturn new Date((long)o2.getTimestampNative()).compareTo(new Date((long)o1.getTimestampNative()));\n-\t\t\t\t}\n-\t\t\t\treturn comp;\n-\t\t\t}\n-\t\t});\n-\n-\t\tColumn<TaskResult, String> servColumn = JsonUtils.addColumn(object ->\n-\t\t\t\tString.valueOf(object.getService().getName()), fieldUpdater);\n-\n-\t\tservColumn.setSortable(true);\n-\t\tcolumnSortHandler.setComparator(servColumn, new Comparator<TaskResult>() {\n-\t\t\tpublic int compare(TaskResult o1, TaskResult o2) {\n-\t\t\t\tint comp = o1.getService().getName().compareToIgnoreCase((o2.getService().getName()));\n-\t\t\t\tif (comp == 0) {\n-\t\t\t\t\treturn new Date((long)o2.getTimestampNative()).compareTo(new Date((long)o1.getTimestampNative()));\n-\t\t\t\t}\n-\t\t\t\treturn comp;\n-\t\t\t}\n-\t\t});\n-\n-\t\t// status column\n-\t\tColumn<TaskResult, String> statusColumn = JsonUtils.addColumn(object ->\n-\t\t\t\tString.valueOf(object.getStatus()), fieldUpdater);\n-\n-\t\tstatusColumn.setSortable(true);\n-\t\tcolumnSortHandler.setComparator(statusColumn, new Comparator<TaskResult>(){\n-\t\t\tpublic int compare(TaskResult o1, TaskResult o2) {\n-\t\t\t\tint comp = o1.getStatus().compareToIgnoreCase(o2.getStatus());\n-\t\t\t\tif (comp == 0) {\n-\t\t\t\t\treturn new Date((long)o2.getTimestampNative()).compareTo(new Date((long)o1.getTimestampNative()));\n-\t\t\t\t}\n-\t\t\t\treturn comp;\n-\t\t\t}\n-\t\t});\n-\n-\t\t// time column\n-\t\tColumn<TaskResult, String> timeColumn = JsonUtils.addColumn(object ->\n-\t\t\t\tString.valueOf(object.getTimestamp()), fieldUpdater);\n-\n-\t\ttimeColumn.setSortable(true);\n-\t\tcolumnSortHandler.setComparator(timeColumn, new Comparator<TaskResult>(){\n-\t\t\tpublic int compare(TaskResult o1, TaskResult o2) {\n-\t\t\t\treturn new Date((long)o2.getTimestampNative()).compareTo(new Date((long)o1.getTimestampNative()));\n-\t\t\t}\n-\t\t});\n-\n-\t\t// returnCode column\n-\t\tColumn<TaskResult, String> returnCodeColumn = JsonUtils.addColumn(object ->\n-\t\t\t\tString.valueOf(object.getReturnCode()), fieldUpdater);\n-\n-\t\t// standardMessageCode column\n-\t\tColumn<TaskResult, TaskResult> standardMessageColumn = JsonUtils.addCustomCellColumn(new AbstractCell<TaskResult>() {\n-\t\t\t@Override\n-\t\t\tpublic void render(Context context, TaskResult taskResult, SafeHtmlBuilder safeHtmlBuilder) {\n-\t\t\t\tif (taskResult != null) {\n-\t\t\t\t\tif (taskResult.getStandardMessage().length() > STANDARD_MESSAGE_LIMIT) {\n-\t\t\t\t\t\tsafeHtmlBuilder.appendEscapedLines(taskResult.getStandardMessage().substring(0, STANDARD_MESSAGE_LIMIT) + \"\u2026\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tsafeHtmlBuilder.appendEscapedLines(taskResult.getStandardMessage());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}, null);\n-\n-\t\t// errorMessageCode column\n-\t\tColumn<TaskResult, TaskResult> errorMessageColumn = JsonUtils.addCustomCellColumn(new AbstractCell<TaskResult>() {\n-\t\t\t@Override\n-\t\t\tpublic void render(Context context, TaskResult object, SafeHtmlBuilder sb) {\n-\t\t\t\tif (object != null) {\n-\t\t\t\t\tif (object.getErrorMessage().length() > ERROR_MESSAGE_LIMIT) {\n-\t\t\t\t\t\tsb.appendEscapedLines(object.getErrorMessage().substring(0, ERROR_MESSAGE_LIMIT) + \"\u2026\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tsb.appendEscapedLines(object.getErrorMessage());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}, null);\n-\n-\t\t// Add the other columns.\n-\t\ttable.addColumn(destinationColumn, \"Destination\");\n-\t\ttable.addColumn(typeColumn, \"Type\");\n-\t\ttable.addColumn(servColumn, \"Service\");\n-\t\ttable.addColumn(statusColumn, \"Status\");\n-\t\ttable.addColumn(timeColumn, \"Time\");\n-\t\ttable.addColumn(returnCodeColumn, \"Return code\");\n-\t\ttable.addColumn(standardMessageColumn, \"Standard Message\");\n-\t\ttable.addColumn(errorMessageColumn, \"Error Message\");\n-\n-\t\t// set row styles based on task state\n-\t\ttable.setRowStyles(new RowStyles<TaskResult>(){\n-\t\t\tpublic String getStyleNames(TaskResult row, int rowIndex) {\n-\n-\t\t\t\tif (row.getStatus().equalsIgnoreCase(\"DONE\")) {\n-\t\t\t\t\treturn \"rowgreen\";\n-\t\t\t\t}\n-\t\t\t\telse if (row.getStatus().equalsIgnoreCase(\"DENIED\")){\n-\t\t\t\t\treturn \"rowyellow\";\n-\t\t\t\t}\n-\t\t\t\telse if (row.getStatus().equalsIgnoreCase(\"FATAL_ERROR\")){\n-\t\t\t\t\treturn \"rowred\";\n-\t\t\t\t}\n-\t\t\t\telse if (row.getStatus().equalsIgnoreCase(\"ERROR\")){\n-\t\t\t\t\treturn \"roworange\";\n-\t\t\t\t}\n-\t\t\t\telse if (row.getStatus().equalsIgnoreCase(\"WARNING\")){\n-\t\t\t\t\treturn \"rowgreenyellow\";\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\treturn \"\";\n-\n-\t\t\t}\n-\t\t});\n-\n-\t\treturn table;\n-\n-\t}\n-\n-\t/**\n-\t * Retrieve data from RPC\n-\t */\n-\tpublic void retrieveData() {\n-\t\tJsonClient js = new JsonClient();\n-\t\tjs.retrieveData(JSON_URL, \"task=\"+taskId, this);\n-\t}\n-\n-\t/**\n-\t * Sorts table by objects date\n-\t */\n-\tpublic void sortTable() {\n-\t\tlist = new TableSorter<TaskResult>().sortByDestination(getList());\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\t/**\n-\t * Add object as new row to table\n-\t *\n-\t * @param object Resource to be added as new row\n-\t */\n-\tpublic void addToTable(TaskResult object) {\n-\t\tlist.add(object);\n-\t\toracle.add(object.getDestination().getDestination());\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\t/**\n-\t * Removes object as row from table\n-\t *\n-\t * @param object Resource to be removed as row\n-\t */\n-\tpublic void removeFromTable(TaskResult object) {\n-\t\tlist.remove(object);\n-\t\tselectionModel.getSelectedSet().remove(object);\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\t/**\n-\t * Clear all table content\n-\t */\n-\tpublic void clearTable(){\n-\t\tloaderImage.loadingStart();\n-\t\tlist.clear();\n-\t\toracle.clear();\n-\t\tselectionModel.clear();\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\t/**\n-\t * Clears list of selected items\n-\t */\n-\tpublic void clearTableSelectedSet(){\n-\t\tselectionModel.clear();\n-\t}\n-\n-\t/**\n-\t * Return selected items from list\n-\t *\n-\t * @return return list of checked items\n-\t */\n-\tpublic ArrayList<TaskResult> getTableSelectedList(){\n-\t\treturn JsonUtils.setToList(selectionModel.getSelectedSet());\n-\t}\n-\n-\t/**\n-\t * Called, when an error occurs\n-\t */\n-\tpublic void onError(PerunError error) {\n-\t\tsession.getUiElements().setLogErrorText(\"Error while loading Task results.\");\n-\t\tloaderImage.loadingError(error);\n-\t\tevents.onError(error);\n-\t}\n-\n-\t/**\n-\t * Called, when loading starts\n-\t */\n-\tpublic void onLoadingStart() {\n-\t\tsession.getUiElements().setLogText(\"Loading Task results started.\");\n-\t\tevents.onLoadingStart();\n-\t}\n-\n-\t/**\n-\t * Called when loading successfully finishes.\n-\t */\n-\tpublic void onFinished(JavaScriptObject jso) {\n-\t\tsetList(JsonUtils.<TaskResult>jsoAsList(jso));\n-\t\tsortTable();\n-\t\tsession.getUiElements().setLogText(\"Task results loaded: \" + list.size());\n-\t\tevents.onFinished(jso);\n-\t\tloaderImage.loadingFinished();\n-\n-\t}\n-\n-\tpublic void insertToTable(int index, TaskResult object) {\n-\t\tlist.add(index, object);\n-\t\toracle.add(object.getDestination().getDestination());\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\tpublic void setEditable(boolean editable) {\n-\t\t// TODO Auto-generated method stub\n-\t}\n-\n-\tpublic void setCheckable(boolean checkable) {\n-\t\t// TODO Auto-generated method stub\n-\t}\n-\n-\tpublic void setList(ArrayList<TaskResult> list) {\n-\t\tclearTable();\n-\t\tthis.list.addAll(list);\n-\t\tfor (TaskResult r : list) {\n-\t\t\toracle.add(r.getDestination().getDestination());\n-\t\t}\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t}\n-\n-\tpublic ArrayList<TaskResult> getList() {\n-\t\treturn this.list;\n-\t}\n-\n-\t@Override\n-\tpublic void filterTable(String filter) {\n-\n-\t\t// store list only for first time\n-\t\tif (fullBackup.isEmpty() || fullBackup == null) {\n-\t\t\tfullBackup.addAll(list);\n-\t\t}\n-\n-\t\t// always clear selected items\n-\t\tselectionModel.clear();\n-\t\tlist.clear();\n-\n-\t\tif (filter.equalsIgnoreCase(\"\")) {\n-\t\t\tlist.addAll(fullBackup);\n-\t\t} else {\n-\t\t\tfor (TaskResult result : fullBackup){\n-\t\t\t\tif (result.getDestination().getDestination().toLowerCase().startsWith(filter)) {\n-\t\t\t\t\tlist.add(result);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tdataProvider.flush();\n-\t\tdataProvider.refresh();\n-\t\tloaderImage.loadingFinished();\n-\n-\t}\n-\n-\t@Override\n-\tpublic UnaccentMultiWordSuggestOracle getOracle() {\n-\t\treturn oracle;\n-\t}\n-\n-\t@Override\n-\tpublic void setOracle(UnaccentMultiWordSuggestOracle oracle) {\n-\t\tthis.oracle = oracle;\n-\t}\n+    private static final int ERROR_MESSAGE_LIMIT = 150;\n+    private static final int STANDARD_MESSAGE_LIMIT = 40;\n+\n+    // Session\n+    private PerunWebSession session = PerunWebSession.getInstance();\n+    // JSON URL\n+    static private final String JSON_URL = \"tasksManager/getTaskResultsForGUIByTaskOnlyNewest\";\n+    // External events\n+    private JsonCallbackEvents events = new JsonCallbackEvents();\n+    // data providers\n+    private ListDataProvider<TaskResult> dataProvider = new ListDataProvider<TaskResult>();\n+    private ArrayList<TaskResult> list = new ArrayList<TaskResult>();\n+    private PerunTable<TaskResult> table;\n+    private FieldUpdater<TaskResult, String> fieldUpdater;\n+    // Selection model\n+    final MultiSelectionModel<TaskResult> selectionModel = new MultiSelectionModel<TaskResult>(new GeneralKeyProvider<TaskResult>());\n+    // loader image\n+    private AjaxLoaderImage loaderImage = new AjaxLoaderImage();\n+    private int taskId = 0;\n+\n+    private UnaccentMultiWordSuggestOracle oracle = new UnaccentMultiWordSuggestOracle();\n+    private ArrayList<TaskResult> fullBackup = new ArrayList<TaskResult>();\n+\n+    /**\n+     * New instance of get tasks results\n+     */\n+    public GetRichTaskResultsByTask(int taskId) {\n+        this.taskId = taskId;\n+    }\n+\n+    /**\n+     * New instance of get tasks results with external events\n+     *\n+     * @param events external events\n+     */\n+    public GetRichTaskResultsByTask(int taskId, JsonCallbackEvents events) {\n+        this.taskId = taskId;\n+        this.events = events;\n+    }\n+\n+    /**\n+     * Return table with task results and start callback\n+     *\n+     * @return table\n+     */\n+    public CellTable<TaskResult> getTable() {\n+\n+        retrieveData();\n+        return getEmptyTable();\n+\n+    }\n+\n+    /**\n+     * Return table with task results and start callback\n+     *\n+     * @return table\n+     */\n+    public CellTable<TaskResult> getTable(FieldUpdater<TaskResult, String> fieldUpdater) {\n+        this.fieldUpdater = fieldUpdater;\n+        retrieveData();\n+        return getEmptyTable();\n+    }\n+\n+    /**\n+     * Return table definition\n+     *\n+     * @return table widget\n+     */\n+    public CellTable<TaskResult> getEmptyTable() {\n+\n+        // Table data provider.\n+        dataProvider = new ListDataProvider<TaskResult>(list);\n+\n+        // Cell table\n+        table = new PerunTable<TaskResult>(list);\n+        table.removeRowCountChangeHandler();\n+\n+        // Connect the table to the data provider.\n+        dataProvider.addDataDisplay(table);\n+\n+        // Sorting\n+        ListHandler<TaskResult> columnSortHandler = new ListHandler<TaskResult>(dataProvider.getList());\n+        table.addColumnSortHandler(columnSortHandler);\n+\n+        // table selection\n+        table.setSelectionModel(selectionModel, DefaultSelectionEventManager.<TaskResult>createCheckboxManager());\n+\n+        // set empty content & loader\n+        table.setEmptyTableWidget(loaderImage);\n+        loaderImage.setEmptyResultMessage(\"No propagation results found.\");\n+\n+        table.addCheckBoxColumn();\n+\n+        table.addIdColumn(\"Result Id\", fieldUpdater, 85);\n+\n+        // destination column\n+        Column<TaskResult, String> destinationColumn = JsonUtils.addColumn(object ->\n+                String.valueOf(object.getDestination().getDestination()), fieldUpdater);\n+\n+        destinationColumn.setSortable(true);\n+\n+        columnSortHandler.setComparator(destinationColumn, (o1, o2) ->\n+                TableSorter.smartCompare(o1.getDestination().getDestination(), o2.getDestination().getDestination()));\n+\n+        // Type column\n+        Column<TaskResult, String> typeColumn = JsonUtils.addColumn(object ->\n+                String.valueOf(object.getDestination().getType().toUpperCase()), fieldUpdater);\n+\n+        typeColumn.setSortable(true);\n+        columnSortHandler.setComparator(typeColumn, new Comparator<TaskResult>() {\n+            public int compare(TaskResult o1, TaskResult o2) {\n+                int comp = o1.getDestination().getType().compareToIgnoreCase((o2.getDestination().getType()));\n+                if (comp == 0) {\n+                    return new Date((long) o2.getTimestampNative()).compareTo(new Date((long) o1.getTimestampNative()));\n+                }\n+                return comp;\n+            }\n+        });\n+\n+        Column<TaskResult, String> servColumn = JsonUtils.addColumn(object ->\n+                String.valueOf(object.getService().getName()), fieldUpdater);\n+\n+        servColumn.setSortable(true);\n+        columnSortHandler.setComparator(servColumn, new Comparator<TaskResult>() {\n+            public int compare(TaskResult o1, TaskResult o2) {\n+                int comp = o1.getService().getName().compareToIgnoreCase((o2.getService().getName()));\n+                if (comp == 0) {\n+                    return new Date((long) o2.getTimestampNative()).compareTo(new Date((long) o1.getTimestampNative()));\n+                }\n+                return comp;\n+            }\n+        });\n+\n+        // status column\n+        Column<TaskResult, String> statusColumn = JsonUtils.addColumn(object ->\n+                String.valueOf(object.getStatus()), fieldUpdater);\n+\n+        statusColumn.setSortable(true);\n+        columnSortHandler.setComparator(statusColumn, new Comparator<TaskResult>() {\n+            public int compare(TaskResult o1, TaskResult o2) {\n+                int comp = o1.getStatus().compareToIgnoreCase(o2.getStatus());\n+                if (comp == 0) {\n+                    return new Date((long) o2.getTimestampNative()).compareTo(new Date((long) o1.getTimestampNative()));\n+                }\n+                return comp;\n+            }\n+        });\n+\n+        // time column\n+        Column<TaskResult, String> timeColumn = JsonUtils.addColumn(object ->\n+                String.valueOf(object.getTimestamp()), fieldUpdater);\n+\n+        timeColumn.setSortable(true);\n+        columnSortHandler.setComparator(timeColumn, new Comparator<TaskResult>() {\n+            public int compare(TaskResult o1, TaskResult o2) {\n+                return new Date((long) o2.getTimestampNative()).compareTo(new Date((long) o1.getTimestampNative()));\n+            }\n+        });\n+\n+        // returnCode column\n+        Column<TaskResult, String> returnCodeColumn = JsonUtils.addColumn(object ->\n+                String.valueOf(object.getReturnCode()), fieldUpdater);\n+\n+        // standardMessageCode column\n+        Column<TaskResult, TaskResult> standardMessageColumn = JsonUtils.addCustomCellColumn(new AbstractCell<TaskResult>() {\n+            @Override\n+            public void render(Context context, TaskResult taskResult, SafeHtmlBuilder safeHtmlBuilder) {\n+                if (taskResult != null) {\n+                    if (taskResult.getStandardMessage().length() > STANDARD_MESSAGE_LIMIT) {\n+                        safeHtmlBuilder.appendEscapedLines(taskResult.getStandardMessage().substring(0, STANDARD_MESSAGE_LIMIT) + \"\u2026\");\n+                    } else {\n+                        safeHtmlBuilder.appendEscapedLines(taskResult.getStandardMessage());\n+                    }\n+                }\n+            }\n+        }, null);\n+\n+        // errorMessageCode column\n+        Column<TaskResult, TaskResult> errorMessageColumn = JsonUtils.addCustomCellColumn(new AbstractCell<TaskResult>() {\n+            @Override\n+            public void render(Context context, TaskResult object, SafeHtmlBuilder sb) {\n+                if (object != null) {\n+                    if (object.getErrorMessage().length() > ERROR_MESSAGE_LIMIT) {\n+                        sb.appendEscapedLines(object.getErrorMessage().substring(0, ERROR_MESSAGE_LIMIT) + \"\u2026\");\n+                    } else {\n+                        sb.appendEscapedLines(object.getErrorMessage());\n+                    }\n+                }\n+            }\n+        }, null);\n+\n+        // Add the other columns.\n+        table.addColumn(destinationColumn, \"Destination\");\n+        table.addColumn(typeColumn, \"Type\");\n+        table.addColumn(servColumn, \"Service\");\n+        table.addColumn(statusColumn, \"Status\");\n+        table.addColumn(timeColumn, \"Time\");\n+        table.addColumn(returnCodeColumn, \"Return code\");\n+        table.addColumn(standardMessageColumn, \"Standard Message\");\n+        table.addColumn(errorMessageColumn, \"Error Message\");\n+\n+        // set row styles based on task state\n+        table.setRowStyles(new RowStyles<TaskResult>() {\n+            public String getStyleNames(TaskResult row, int rowIndex) {\n+\n+                if (row.getStatus().equalsIgnoreCase(\"DONE\")) {\n+                    return \"rowgreen\";\n+                } else if (row.getStatus().equalsIgnoreCase(\"DENIED\")) {\n+                    return \"rowyellow\";\n+                } else if (row.getStatus().equalsIgnoreCase(\"FATAL_ERROR\")) {\n+                    return \"rowred\";\n+                } else if (row.getStatus().equalsIgnoreCase(\"ERROR\")) {\n+                    return \"roworange\";\n+                } else if (row.getStatus().equalsIgnoreCase(\"WARNING\")) {\n+                    return \"rowgreenyellow\";\n+                }\n+\n+                return \"\";\n+\n+            }\n+        });\n+\n+        return table;\n+\n+    }\n+\n+    /**\n+     * Retrieve data from RPC\n+     */\n+    public void retrieveData() {\n+        JsonClient js = new JsonClient();\n+        js.retrieveData(JSON_URL, \"task=\" + taskId, this);\n+    }\n+\n+    /**\n+     * Sorts table by objects date\n+     */\n+    public void sortTable() {\n+        list = new TableSorter<TaskResult>().sortByDestination(getList());\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    /**\n+     * Add object as new row to table\n+     *\n+     * @param object Resource to be added as new row\n+     */\n+    public void addToTable(TaskResult object) {\n+        list.add(object);\n+        oracle.add(object.getDestination().getDestination());\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    /**\n+     * Removes object as row from table\n+     *\n+     * @param object Resource to be removed as row\n+     */\n+    public void removeFromTable(TaskResult object) {\n+        list.remove(object);\n+        selectionModel.getSelectedSet().remove(object);\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    /**\n+     * Clear all table content\n+     */\n+    public void clearTable() {\n+        loaderImage.loadingStart();\n+        list.clear();\n+        oracle.clear();\n+        selectionModel.clear();\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    /**\n+     * Clears list of selected items\n+     */\n+    public void clearTableSelectedSet() {\n+        selectionModel.clear();\n+    }\n+\n+    /**\n+     * Return selected items from list\n+     *\n+     * @return return list of checked items\n+     */\n+    public ArrayList<TaskResult> getTableSelectedList() {\n+        return JsonUtils.setToList(selectionModel.getSelectedSet());\n+    }\n+\n+    /**\n+     * Called, when an error occurs\n+     */\n+    public void onError(PerunError error) {\n+        session.getUiElements().setLogErrorText(\"Error while loading Task results.\");\n+        loaderImage.loadingError(error);\n+        events.onError(error);\n+    }\n+\n+    /**\n+     * Called, when loading starts\n+     */\n+    public void onLoadingStart() {\n+        session.getUiElements().setLogText(\"Loading Task results started.\");\n+        events.onLoadingStart();\n+    }\n+\n+    /**\n+     * Called when loading successfully finishes.\n+     */\n+    public void onFinished(JavaScriptObject jso) {\n+        setList(JsonUtils.<TaskResult>jsoAsList(jso));\n+        sortTable();\n+        session.getUiElements().setLogText(\"Task results loaded: \" + list.size());\n+        events.onFinished(jso);\n+        loaderImage.loadingFinished();\n+\n+    }\n+\n+    public void insertToTable(int index, TaskResult object) {\n+        list.add(index, object);\n+        oracle.add(object.getDestination().getDestination());\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    public void setEditable(boolean editable) {\n+        // TODO Auto-generated method stub\n+    }\n+\n+    public void setCheckable(boolean checkable) {\n+        // TODO Auto-generated method stub\n+    }\n+\n+    public void setList(ArrayList<TaskResult> list) {\n+        clearTable();\n+        this.list.addAll(list);\n+        for (TaskResult r : list) {\n+            oracle.add(r.getDestination().getDestination());\n+        }\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+    }\n+\n+    public ArrayList<TaskResult> getList() {\n+        return this.list;\n+    }\n+\n+    @Override\n+    public void filterTable(String filter) {\n+\n+        // store list only for first time\n+        if (fullBackup.isEmpty() || fullBackup == null) {\n+            fullBackup.addAll(list);\n+        }\n+\n+        // always clear selected items\n+        selectionModel.clear();\n+        list.clear();\n+\n+        if (filter.equalsIgnoreCase(\"\")) {\n+            list.addAll(fullBackup);\n+        } else {\n+            for (TaskResult result : fullBackup) {\n+                if (result.getDestination().getDestination().toLowerCase().startsWith(filter)) {\n+                    list.add(result);\n+                }\n+            }\n+        }\n+\n+        dataProvider.flush();\n+        dataProvider.refresh();\n+        loaderImage.loadingFinished();\n+\n+    }\n+\n+    @Override\n+    public UnaccentMultiWordSuggestOracle getOracle() {\n+        return oracle;\n+    }\n+\n+    @Override\n+    public void setOracle(UnaccentMultiWordSuggestOracle oracle) {\n+        this.oracle = oracle;\n+    }\n \n }\n",
            "diff_size": 394
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/414/GetRichTaskResultsByTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/414/GetRichTaskResultsByTask.java\nindex 17f12b3fd5b..f3dfd0ee036 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/414/GetRichTaskResultsByTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/414/GetRichTaskResultsByTask.java\n@@ -252,7 +252,7 @@ public class GetRichTaskResultsByTask implements JsonCallback, JsonCallbackTable\n \t\t\t\telse if (row.getStatus().equalsIgnoreCase(\"WARNING\")){\n \t\t\t\t\treturn \"rowgreenyellow\";\n \t\t\t\t}\n-\t\t\t\t\n+\n \t\t\t\treturn \"\";\n \n \t\t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/414/GetRichTaskResultsByTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/414/GetRichTaskResultsByTask.java\nindex 17f12b3fd5b..f9d072c61cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/414/GetRichTaskResultsByTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/414/GetRichTaskResultsByTask.java\n@@ -251,9 +251,8 @@ public class GetRichTaskResultsByTask implements JsonCallback, JsonCallbackTable\n \t\t\t\t}\n \t\t\t\telse if (row.getStatus().equalsIgnoreCase(\"WARNING\")){\n \t\t\t\t\treturn \"rowgreenyellow\";\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\treturn \"\";\n+\n+\t\t\t\t\t} return \"\";\n \n \t\t\t}\n \t\t});\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}