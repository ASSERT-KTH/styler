{
    "project_name": "graphfoundation-ongdb",
    "error_id": "317",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "92",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/317/NodeInUseWithCorrectLabelsCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/317/NodeInUseWithCorrectLabelsCheck.java\nindex 9c802da7ce6..748a93d9f39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/317/NodeInUseWithCorrectLabelsCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/317/NodeInUseWithCorrectLabelsCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import org.apache.commons.lang3.ArrayUtils;\n@@ -38,131 +39,127 @@ import org.neo4j.kernel.impl.store.record.NodeRecord;\n import static java.util.Arrays.sort;\n \n public class NodeInUseWithCorrectLabelsCheck\n-        <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport.NodeInUseWithCorrectLabelsReport>\n-        implements ComparativeRecordChecker<RECORD, NodeRecord, REPORT>\n+    <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport.NodeInUseWithCorrectLabelsReport>\n+    implements ComparativeRecordChecker<RECORD, NodeRecord, REPORT>\n {\n-    private final long[] indexLabels;\n-    private final boolean checkStoreToIndex;\n+  private final long[] indexLabels;\n+  private final boolean checkStoreToIndex;\n+\n+  public NodeInUseWithCorrectLabelsCheck(long[] expectedLabels, boolean checkStoreToIndex)\n+  {\n+    this.checkStoreToIndex = checkStoreToIndex;\n+    this.indexLabels = sortAndDeduplicate(expectedLabels);\n+  }\n+\n+  private static long[] sortAndDeduplicate(long[] labels)\n+  {\n+    if (ArrayUtils.isNotEmpty(labels))\n+    {\n+      sort(labels);\n+      return PrimitiveLongCollections.deduplicate(labels);\n+    }\n+    return labels;\n+  }\n+\n+  @Override\n+  public void checkReference(RECORD record, NodeRecord nodeRecord,\n+                             CheckerEngine<RECORD, REPORT> engine, RecordAccess records)\n+  {\n+    if (nodeRecord.inUse())\n+    {\n+      NodeLabels nodeLabels = NodeLabelsField.parseLabelsField(nodeRecord);\n+      if (nodeLabels instanceof DynamicNodeLabels)\n+      {\n+        DynamicNodeLabels dynamicNodeLabels = (DynamicNodeLabels) nodeLabels;\n+        long firstRecordId = dynamicNodeLabels.getFirstDynamicRecordId();\n+        RecordReference<DynamicRecord> firstRecordReference = records.nodeLabels(firstRecordId);\n+        ExpectedNodeLabelsChecker expectedNodeLabelsChecker = new ExpectedNodeLabelsChecker(nodeRecord);\n+        LabelChainWalker<RECORD, REPORT> checker = new LabelChainWalker<>(expectedNodeLabelsChecker);\n+        engine.comparativeCheck(firstRecordReference, checker);\n+        nodeRecord.getDynamicLabelRecords(); // I think this is empty in production\n+      } else\n+      {\n+        long[] storeLabels = nodeLabels.get(null);\n+        REPORT report = engine.report();\n+        validateLabelIds(nodeRecord, storeLabels, report);\n+      }\n+    } else if (indexLabels.length != 0)\n+    {\n+      engine.report().nodeNotInUse(nodeRecord);\n+    }\n+  }\n+\n+  private void validateLabelIds(NodeRecord nodeRecord, long[] storeLabels, REPORT report)\n+  {\n+    storeLabels = sortAndDeduplicate(storeLabels);\n+\n+    int indexLabelsCursor = 0;\n+    int storeLabelsCursor = 0;\n+\n+    while (indexLabelsCursor < indexLabels.length && storeLabelsCursor < storeLabels.length)\n+    {\n+      long indexLabel = indexLabels[indexLabelsCursor];\n+      long storeLabel = storeLabels[storeLabelsCursor];\n+      if (indexLabel < storeLabel)\n+      {   // node store has a label which isn't in label scan store\n+        report.nodeDoesNotHaveExpectedLabel(nodeRecord, indexLabel);\n+        indexLabelsCursor++;\n+      } else if (indexLabel > storeLabel)\n+      {   // label scan store has a label which isn't in node store\n+        reportNodeLabelNotInIndex(report, nodeRecord, storeLabel);\n+        storeLabelsCursor++;\n+      } else\n+      {   // both match\n+        indexLabelsCursor++;\n+        storeLabelsCursor++;\n+      }\n+    }\n \n-    public NodeInUseWithCorrectLabelsCheck( long[] expectedLabels, boolean checkStoreToIndex )\n+    while (indexLabelsCursor < indexLabels.length)\n     {\n-        this.checkStoreToIndex = checkStoreToIndex;\n-        this.indexLabels = sortAndDeduplicate( expectedLabels );\n+      report.nodeDoesNotHaveExpectedLabel(nodeRecord, indexLabels[indexLabelsCursor++]);\n     }\n+    while (storeLabelsCursor < storeLabels.length)\n+    {\n+      reportNodeLabelNotInIndex(report, nodeRecord, storeLabels[storeLabelsCursor]);\n+      storeLabelsCursor++;\n+    }\n+  }\n \n-    private static long[] sortAndDeduplicate( long[] labels )\n+  private void reportNodeLabelNotInIndex(REPORT report, NodeRecord nodeRecord, long storeLabel)\n+  {\n+    if (checkStoreToIndex)\n     {\n-        if ( ArrayUtils.isNotEmpty( labels ) )\n-        {\n-            sort( labels );\n-            return PrimitiveLongCollections.deduplicate( labels );\n-        }\n-        return labels;\n+      report.nodeLabelNotInIndex(nodeRecord, storeLabel);\n     }\n+  }\n \n-    @Override\n-    public void checkReference( RECORD record, NodeRecord nodeRecord,\n-                                CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n+  private class ExpectedNodeLabelsChecker implements\n+      LabelChainWalker.Validator<RECORD, REPORT>\n+  {\n+    private final NodeRecord nodeRecord;\n+\n+    ExpectedNodeLabelsChecker(NodeRecord nodeRecord)\n     {\n-        if ( nodeRecord.inUse() )\n-        {\n-            NodeLabels nodeLabels = NodeLabelsField.parseLabelsField( nodeRecord );\n-            if ( nodeLabels instanceof DynamicNodeLabels )\n-            {\n-                DynamicNodeLabels dynamicNodeLabels = (DynamicNodeLabels) nodeLabels;\n-                long firstRecordId = dynamicNodeLabels.getFirstDynamicRecordId();\n-                RecordReference<DynamicRecord> firstRecordReference = records.nodeLabels( firstRecordId );\n-                ExpectedNodeLabelsChecker expectedNodeLabelsChecker = new ExpectedNodeLabelsChecker( nodeRecord );\n-                LabelChainWalker<RECORD,REPORT> checker = new LabelChainWalker<>( expectedNodeLabelsChecker );\n-                engine.comparativeCheck( firstRecordReference, checker );\n-                nodeRecord.getDynamicLabelRecords(); // I think this is empty in production\n-            }\n-            else\n-            {\n-                long[] storeLabels = nodeLabels.get( null );\n-                REPORT report = engine.report();\n-                validateLabelIds( nodeRecord, storeLabels, report );\n-            }\n-        }\n-        else if ( indexLabels.length != 0 )\n-        {\n-            engine.report().nodeNotInUse( nodeRecord );\n-        }\n+      this.nodeRecord = nodeRecord;\n     }\n \n-    private void validateLabelIds( NodeRecord nodeRecord, long[] storeLabels, REPORT report )\n+    @Override\n+    public void onRecordNotInUse(DynamicRecord dynamicRecord, CheckerEngine<RECORD, REPORT> engine)\n     {\n-        storeLabels = sortAndDeduplicate( storeLabels );\n-\n-        int indexLabelsCursor = 0;\n-        int storeLabelsCursor = 0;\n-\n-        while ( indexLabelsCursor < indexLabels.length && storeLabelsCursor < storeLabels.length )\n-        {\n-            long indexLabel = indexLabels[indexLabelsCursor];\n-            long storeLabel = storeLabels[storeLabelsCursor];\n-            if ( indexLabel < storeLabel )\n-            {   // node store has a label which isn't in label scan store\n-                report.nodeDoesNotHaveExpectedLabel( nodeRecord, indexLabel );\n-                indexLabelsCursor++;\n-            }\n-            else if ( indexLabel > storeLabel )\n-            {   // label scan store has a label which isn't in node store\n-                reportNodeLabelNotInIndex( report, nodeRecord, storeLabel );\n-                storeLabelsCursor++;\n-            }\n-            else\n-            {   // both match\n-                indexLabelsCursor++;\n-                storeLabelsCursor++;\n-            }\n-        }\n-\n-        while ( indexLabelsCursor < indexLabels.length )\n-        {\n-            report.nodeDoesNotHaveExpectedLabel( nodeRecord, indexLabels[indexLabelsCursor++] );\n-        }\n-        while ( storeLabelsCursor < storeLabels.length )\n-        {\n-            reportNodeLabelNotInIndex( report, nodeRecord, storeLabels[storeLabelsCursor] );\n-            storeLabelsCursor++;\n-        }\n+      // checked elsewhere\n     }\n \n-    private void reportNodeLabelNotInIndex( REPORT report, NodeRecord nodeRecord, long storeLabel )\n+    @Override\n+    public void onRecordChainCycle(DynamicRecord record, CheckerEngine<RECORD, REPORT> engine)\n     {\n-        if ( checkStoreToIndex )\n-        {\n-            report.nodeLabelNotInIndex( nodeRecord, storeLabel );\n-        }\n+      // checked elsewhere\n     }\n \n-    private class ExpectedNodeLabelsChecker implements\n-            LabelChainWalker.Validator<RECORD, REPORT>\n+    @Override\n+    public void onWellFormedChain(long[] labelIds, CheckerEngine<RECORD, REPORT> engine, RecordAccess records)\n     {\n-        private final NodeRecord nodeRecord;\n-\n-        ExpectedNodeLabelsChecker( NodeRecord nodeRecord )\n-        {\n-            this.nodeRecord = nodeRecord;\n-        }\n-\n-        @Override\n-        public void onRecordNotInUse( DynamicRecord dynamicRecord, CheckerEngine<RECORD, REPORT> engine )\n-        {\n-            // checked elsewhere\n-        }\n-\n-        @Override\n-        public void onRecordChainCycle( DynamicRecord record, CheckerEngine<RECORD, REPORT> engine )\n-        {\n-            // checked elsewhere\n-        }\n-\n-        @Override\n-        public void onWellFormedChain( long[] labelIds, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n-        {\n-            validateLabelIds( nodeRecord, labelIds, engine.report() );\n-        }\n+      validateLabelIds(nodeRecord, labelIds, engine.report());\n     }\n+  }\n }\n",
            "diff_size": 194
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/317/NodeInUseWithCorrectLabelsCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/317/NodeInUseWithCorrectLabelsCheck.java\nindex 9c802da7ce6..f364993d8b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/317/NodeInUseWithCorrectLabelsCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/317/NodeInUseWithCorrectLabelsCheck.java\n@@ -37,9 +37,7 @@ import org.neo4j.kernel.impl.store.record.NodeRecord;\n \n import static java.util.Arrays.sort;\n \n-public class NodeInUseWithCorrectLabelsCheck\n-        <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport.NodeInUseWithCorrectLabelsReport>\n-        implements ComparativeRecordChecker<RECORD, NodeRecord, REPORT>\n+public class NodeInUseWithCorrectLabelsCheck<RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport.NodeInUseWithCorrectLabelsReport> implements ComparativeRecordChecker<RECORD, NodeRecord, REPORT>\n {\n     private final long[] indexLabels;\n     private final boolean checkStoreToIndex;\n@@ -57,13 +55,13 @@ public class NodeInUseWithCorrectLabelsCheck\n             sort( labels );\n             return PrimitiveLongCollections.deduplicate( labels );\n         }\n-        return labels;\n+\n+return labels;\n     }\n \n     @Override\n-    public void checkReference( RECORD record, NodeRecord nodeRecord,\n-                                CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n-    {\n+    public void checkReference( RECORD record, NodeRecord nodeRecord, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n+{\n         if ( nodeRecord.inUse() )\n         {\n             NodeLabels nodeLabels = NodeLabelsField.parseLabelsField( nodeRecord );\n@@ -102,17 +100,20 @@ public class NodeInUseWithCorrectLabelsCheck\n             long indexLabel = indexLabels[indexLabelsCursor];\n             long storeLabel = storeLabels[storeLabelsCursor];\n             if ( indexLabel < storeLabel )\n-            {   // node store has a label which isn't in label scan store\n+            {\n+    // node store has a label which isn't in label scan store\n                 report.nodeDoesNotHaveExpectedLabel( nodeRecord, indexLabel );\n                 indexLabelsCursor++;\n             }\n-            else if ( indexLabel > storeLabel )\n-            {   // label scan store has a label which isn't in node store\n+            else if ( indexLabel> storeLabel )\n+            {\n+    // label scan store has a label which isn't in node store\n                 reportNodeLabelNotInIndex( report, nodeRecord, storeLabel );\n                 storeLabelsCursor++;\n             }\n             else\n-            {   // both match\n+            {\n+    // both match\n                 indexLabelsCursor++;\n                 storeLabelsCursor++;\n             }\n@@ -137,8 +138,7 @@ public class NodeInUseWithCorrectLabelsCheck\n         }\n     }\n \n-    private class ExpectedNodeLabelsChecker implements\n-            LabelChainWalker.Validator<RECORD, REPORT>\n+    private class ExpectedNodeLabelsChecker implements LabelChainWalker.Validator<RECORD, REPORT>\n     {\n         private final NodeRecord nodeRecord;\n \n@@ -148,21 +148,21 @@ public class NodeInUseWithCorrectLabelsCheck\n         }\n \n         @Override\n-        public void onRecordNotInUse( DynamicRecord dynamicRecord, CheckerEngine<RECORD, REPORT> engine )\n+        public void onRecordNotInUse( DynamicRecord dynamicRecord, CheckerEngine<RECORD,REPORT> engine )\n         {\n             // checked elsewhere\n         }\n \n         @Override\n-        public void onRecordChainCycle( DynamicRecord record, CheckerEngine<RECORD, REPORT> engine )\n+        public void onRecordChainCycle( DynamicRecord record, CheckerEngine<RECORD,REPORT> engine )\n         {\n             // checked elsewhere\n         }\n \n         @Override\n-        public void onWellFormedChain( long[] labelIds, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n+        public void onWellFormedChain( long[] labelIds, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n         {\n             validateLabelIds( nodeRecord, labelIds, engine.report() );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}