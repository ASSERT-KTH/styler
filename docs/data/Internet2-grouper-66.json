{
    "project_name": "Internet2-grouper",
    "error_id": "66",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * style license a copy of which has been included with this distribution in\n * the LICENSE.txt file.\n * \n * Created on 08. July 2004 by Joe Walnes\n */\npackage edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/66/FontConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/66/FontConverter.java\nindex ffb86249509..d5e5b51e9fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/66/FontConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/66/FontConverter.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -21,9 +21,10 @@\n  * The software in this package is published under the terms of the BSD\r\n  * style license a copy of which has been included with this distribution in\r\n  * the LICENSE.txt file.\r\n- * \r\n+ *\r\n  * Created on 08. July 2004 by Joe Walnes\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\r\n \r\n import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\r\n@@ -39,29 +40,29 @@ import java.util.Map;\n \r\n public class FontConverter implements Converter {\r\n \r\n-    public boolean canConvert(Class type) {\r\n-        // String comparison is used here because Font.class loads the class which in turns instantiates AWT,\r\n-        // which is nasty if you don't want it.\r\n-        return type.getName().equals(\"java.awt.Font\") || type.getName().equals(\"javax.swing.plaf.FontUIResource\");\r\n-    }\r\n+  public boolean canConvert(Class type) {\r\n+    // String comparison is used here because Font.class loads the class which in turns instantiates AWT,\r\n+    // which is nasty if you don't want it.\r\n+    return type.getName().equals(\"java.awt.Font\") || type.getName().equals(\"javax.swing.plaf.FontUIResource\");\r\n+  }\r\n \r\n-    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n-        Font font = (Font) source;\r\n-        Map attributes = font.getAttributes();\r\n-        writer.startNode(\"attributes\"); // <attributes>\r\n-        context.convertAnother(attributes);\r\n-        writer.endNode(); // </attributes>\r\n-    }\r\n+  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n+    Font font = (Font) source;\r\n+    Map attributes = font.getAttributes();\r\n+    writer.startNode(\"attributes\"); // <attributes>\r\n+    context.convertAnother(attributes);\r\n+    writer.endNode(); // </attributes>\r\n+  }\r\n \r\n-    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n-        reader.moveDown(); // into <attributes>\r\n-        Map attributes = (Map) context.convertAnother(null, Map.class);\r\n-        reader.moveUp(); // out of </attributes>\r\n-        Font font = Font.getFont(attributes);\r\n-        if (context.getRequiredType() == FontUIResource.class) {\r\n-            return new FontUIResource(font);\r\n-        } else {\r\n-            return font;\r\n-        }\r\n+  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n+    reader.moveDown(); // into <attributes>\r\n+    Map attributes = (Map) context.convertAnother(null, Map.class);\r\n+    reader.moveUp(); // out of </attributes>\r\n+    Font font = Font.getFont(attributes);\r\n+    if (context.getRequiredType() == FontUIResource.class) {\r\n+      return new FontUIResource(font);\r\n+    } else {\r\n+      return font;\r\n     }\r\n+  }\r\n }\r\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/66/FontConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/66/FontConverter.java\nindex ffb86249509..42c6192d046 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/66/FontConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/66/FontConverter.java\n@@ -37,9 +37,8 @@ import javax.swing.plaf.FontUIResource;\n import java.awt.Font;\r\n import java.util.Map;\r\n \r\n-public class FontConverter implements Converter {\r\n-\r\n-    public boolean canConvert(Class type) {\r\n+public class FontConverter implements Converter {\n+  public boolean canConvert(Class type) {\r\n         // String comparison is used here because Font.class loads the class which in turns instantiates AWT,\r\n         // which is nasty if you don't want it.\r\n         return type.getName().equals(\"java.awt.Font\") || type.getName().equals(\"javax.swing.plaf.FontUIResource\");\r\n@@ -64,4 +63,4 @@ public class FontConverter implements Converter {\n             return font;\r\n         }\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/66/FontConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/66/FontConverter.java\nindex ffb86249509..931f9bc12bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/66/FontConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/66/FontConverter.java\n@@ -24,44 +24,45 @@\n  * \r\n  * Created on 08. July 2004 by Joe Walnes\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\r\n-\r\n-import javax.swing.plaf.FontUIResource;\r\n-\r\n-import java.awt.Font;\r\n-import java.util.Map;\r\n-\r\n-public class FontConverter implements Converter {\r\n-\r\n+package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\n+\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n+import javax.swing.plaf.FontUIResource;\n+import java.awt.Font;\n+import java.util.Map;\n+\n+\n+public class FontConverter implements Converter {\n     public boolean canConvert(Class type) {\r\n         // String comparison is used here because Font.class loads the class which in turns instantiates AWT,\r\n-        // which is nasty if you don't want it.\r\n-        return type.getName().equals(\"java.awt.Font\") || type.getName().equals(\"javax.swing.plaf.FontUIResource\");\r\n-    }\r\n-\r\n-    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n-        Font font = (Font) source;\r\n-        Map attributes = font.getAttributes();\r\n-        writer.startNode(\"attributes\"); // <attributes>\r\n-        context.convertAnother(attributes);\r\n-        writer.endNode(); // </attributes>\r\n-    }\r\n-\r\n-    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n-        reader.moveDown(); // into <attributes>\r\n-        Map attributes = (Map) context.convertAnother(null, Map.class);\r\n-        reader.moveUp(); // out of </attributes>\r\n-        Font font = Font.getFont(attributes);\r\n-        if (context.getRequiredType() == FontUIResource.class) {\r\n-            return new FontUIResource(font);\r\n-        } else {\r\n-            return font;\r\n-        }\r\n-    }\r\n-}\r\n+        // which is nasty if you don't want it.\n+        return type.getName().equals(\"java.awt.Font\") || type.getName().equals(\"javax.swing.plaf.FontUIResource\");\n+    }\n+\n+\n+    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n+        Font font = (Font) source;\n+        Map attributes = font.getAttributes();\n+        writer.startNode(\"attributes\"); // <attributes>\n+        context.convertAnother(attributes);\n+        writer.endNode(); // </attributes>\n+    }\n+\n+\n+    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n+        reader.moveDown(); // into <attributes>\n+        Map attributes = (Map) context.convertAnother(null, Map.class);\n+        reader.moveUp(); // out of </attributes>\n+        Font font = Font.getFont(attributes);\n+\n+        if (context.getRequiredType() == FontUIResource.class) {\n+            return new FontUIResource(font);\n+        } else {\n+            return font;\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}