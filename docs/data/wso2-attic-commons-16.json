{
    "project_name": "wso2-attic-commons",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "214",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private void sendExecution(Message message) throws JMSException {\n        String repValue =\n                \"<m0:message xmlns:m0=\\\"http://services.samples/xsd/\\\" inSeession=\\\"FIX.4.0:EXEC-->SYNAPSE\\\" count=\\\"2\\\">\\n\"\n                        + \"<m0:header>\"\n                        + \"<m0:field m0:id=\\\"35\\\"><![CDATA[8]]></m0:field>\"\n                        + \"<m0:field m0:id=\\\"52\\\"><![CDATA[20080618-08:41:56]]></m0:field>\"",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/16/AMQPConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/16/AMQPConsumer.java\nindex da92aa49d88..d40a64a98fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/16/AMQPConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/16/AMQPConsumer.java\n@@ -211,8 +211,8 @@ public class AMQPConsumer {\n      */\n     private void sendExecution(Message message) throws JMSException {\n         String repValue =\n-                \"<m0:message xmlns:m0=\\\"http://services.samples/xsd/\\\" inSeession=\\\"FIX.4.0:EXEC-->SYNAPSE\\\" count=\\\"2\\\">\\n\"\n-                        + \"<m0:header>\"\n+            \"<m0:message xmlns:m0=\\\"http://services.samples/xsd/\\\" inSeession=\\\"FIX.4.0:EXEC-->SYNAPSE\\\" count=\\\"2\\\">\\n\"\n+        + \"<m0:header>\"\n                         + \"<m0:field m0:id=\\\"35\\\"><![CDATA[8]]></m0:field>\"\n                         + \"<m0:field m0:id=\\\"52\\\"><![CDATA[20080618-08:41:56]]></m0:field>\"\n                         + \"</m0:header>\"\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/16/AMQPConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/16/AMQPConsumer.java\nindex da92aa49d88..dbd9e4916a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/16/AMQPConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/16/AMQPConsumer.java\n@@ -16,6 +16,7 @@\n  *  specific language governing permissions and limitations\n  *  under the License.\n  */\n+\n package samples.userguide;\n \n import org.apache.axiom.om.OMElement;\n@@ -37,237 +38,237 @@ import java.util.Iterator;\n import java.util.Properties;\n \n public class AMQPConsumer {\n-    private Connection connection;\n-    private MessageConsumer messageConsumer;\n-    private Session session;\n-    private String inSymbol;\n-    private String inQty;\n-    private String inClOrderID;\n-    private int execID = 1;\n+  private Connection connection;\n+  private MessageConsumer messageConsumer;\n+  private Session session;\n+  private String inSymbol;\n+  private String inQty;\n+  private String inClOrderID;\n+  private int execID = 1;\n \n-    private static final String CLASS = \"AMQPConsumer\";\n-    private static final String PROPERTY_FILE =\n-            \"../../repository/conf/sample/resources/fix/direct.properties\";\n-    private static final String PROP_FILE_NAME = \"propfile\";\n-    private static final String LOOKUP_CODE_CON = \"directQueue\";\n-    private static final String LOOKUP_CODE_REP = \"replyQueue\";\n-    private static final String CONNECTION_FACTORY = \"qpidConnectionfactory\";\n-    private static final String FIX_MSG = \"message\";\n-    private static final String FIX_MSG_BODY = \"body\";\n-    private static final String FIX_MSG_ID = \"id\";\n-    private static final String FIX_MSG_SYMBOL = \"55\";\n-    private static final String FIX_MSG_CLORDID = \"11\";\n-    private static final String FIX_MSG_ORDQTY = \"38\";\n+  private static final String CLASS = \"AMQPConsumer\";\n+  private static final String PROPERTY_FILE =\n+    \"../../repository/conf/sample/resources/fix/direct.properties\";\n+  private static final String PROP_FILE_NAME = \"propfile\";\n+  private static final String LOOKUP_CODE_CON = \"directQueue\";\n+  private static final String LOOKUP_CODE_REP = \"replyQueue\";\n+  private static final String CONNECTION_FACTORY = \"qpidConnectionfactory\";\n+  private static final String FIX_MSG = \"message\";\n+  private static final String FIX_MSG_BODY = \"body\";\n+  private static final String FIX_MSG_ID = \"id\";\n+  private static final String FIX_MSG_SYMBOL = \"55\";\n+  private static final String FIX_MSG_CLORDID = \"11\";\n+  private static final String FIX_MSG_ORDQTY = \"38\";\n \n-    /**\n-     * Main method to execute the consumer sample.\n-     */\n-    public static void main(String[] args) {\n-        AMQPConsumer syncConsumer = new AMQPConsumer();\n-        syncConsumer.runTest();\n-    }\n+  /**\n+   * Main method to execute the consumer sample.\n+   */\n+  public static void main(String[] args) {\n+    AMQPConsumer syncConsumer = new AMQPConsumer();\n+    syncConsumer.runTest();\n+  }\n \n-    /**\n-     * Start the sample by creating and listerning to a defined Queue\n-     */\n-    private void runTest() {\n-        try {\n-            String fileName = getProperty(PROP_FILE_NAME, PROPERTY_FILE);\n-            // Load JNDI properties from the configuration file\n-            Properties properties = new Properties();\n-            InputStream inStream = new FileInputStream(new File(fileName).getAbsolutePath());\n-            properties.load(inStream);\n-            //Create the initial context\n-            Context ctx = new InitialContext(properties);\n-            // look up destination\n-            Destination destination = (Destination) ctx.lookup(LOOKUP_CODE_CON); // Listerning queue\n-            Destination replyQueue = (Destination) ctx.lookup(LOOKUP_CODE_REP);  // Reply queue\n-            // Lookup the connection factory\n-            ConnectionFactory conFac = (ConnectionFactory) ctx.lookup(CONNECTION_FACTORY);\n-            connection = conFac.createConnection();\n-            // As this application is using a MessageConsumer we need to set an ExceptionListener on the connection\n-            // so that errors raised within the JMS client library can be reported to the application\n-            System.out.println(\n-                    CLASS +\n-                            \": Setting an ExceptionListener on the connection as sample uses a MessageConsumer\");\n-            connection.setExceptionListener(new ExceptionListener() {\n-                public void onException(JMSException jmse) {\n-                    // The connection may have broken invoke reconnect code if available.\n-                    // The connection may have broken invoke reconnect code if available.\n-                    System.err.println(CLASS +\n-                            \": The sample received an exception through the ExceptionListener\" +\n-                            jmse.getMessage());\n-                    jmse.printStackTrace();\n-                    System.exit(0);\n-                }\n-            });\n-            createSession(conFac, destination); // Call to create the sessions\n-            createRepQueue(conFac,\n-                    replyQueue); // Call to create the Reply Queue and close the session\n-            connection.start(); // Start the connection\n-            System.out.println(\n-                    CLASS + \": Starting connection so the MessageConsumer can receive messages\");\n-            onMessage();\n-        } catch (Exception e) {\n-            //TODO: handle the exception\n-            System.out.println(\"ERROR : \" + e.toString());\n-            e.printStackTrace();\n+  /**\n+   * Start the sample by creating and listerning to a defined Queue\n+   */\n+  private void runTest() {\n+    try {\n+      String fileName = getProperty(PROP_FILE_NAME, PROPERTY_FILE);\n+      // Load JNDI properties from the configuration file\n+      Properties properties = new Properties();\n+      InputStream inStream = new FileInputStream(new File(fileName).getAbsolutePath());\n+      properties.load(inStream);\n+      //Create the initial context\n+      Context ctx = new InitialContext(properties);\n+      // look up destination\n+      Destination destination = (Destination) ctx.lookup(LOOKUP_CODE_CON); // Listerning queue\n+      Destination replyQueue = (Destination) ctx.lookup(LOOKUP_CODE_REP);  // Reply queue\n+      // Lookup the connection factory\n+      ConnectionFactory conFac = (ConnectionFactory) ctx.lookup(CONNECTION_FACTORY);\n+      connection = conFac.createConnection();\n+      // As this application is using a MessageConsumer we need to set an ExceptionListener on the connection\n+      // so that errors raised within the JMS client library can be reported to the application\n+      System.out.println(\n+        CLASS +\n+          \": Setting an ExceptionListener on the connection as sample uses a MessageConsumer\");\n+      connection.setExceptionListener(new ExceptionListener() {\n+        public void onException(JMSException jmse) {\n+          // The connection may have broken invoke reconnect code if available.\n+          // The connection may have broken invoke reconnect code if available.\n+          System.err.println(CLASS +\n+            \": The sample received an exception through the ExceptionListener\" +\n+            jmse.getMessage());\n+          jmse.printStackTrace();\n+          System.exit(0);\n         }\n+      });\n+      createSession(conFac, destination); // Call to create the sessions\n+      createRepQueue(conFac,\n+        replyQueue); // Call to create the Reply Queue and close the session\n+      connection.start(); // Start the connection\n+      System.out.println(\n+        CLASS + \": Starting connection so the MessageConsumer can receive messages\");\n+      onMessage();\n+    } catch (Exception e) {\n+      //TODO: handle the exception\n+      System.out.println(\"ERROR : \" + e.toString());\n+      e.printStackTrace();\n     }\n+  }\n \n-    /**\n-     * @param destination\n-     */\n-    private void createSession(ConnectionFactory conFac, Destination destination)\n-            throws JMSException {\n-        // Create a session on the connection\n-        // This session is a default choice of non-transacted and uses the auto acknowledge feature of a session.\n-        System.out.println(CLASS + \": Creating a non-transacted, auto-acknowledged session\");\n-        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n-        // Create a MessageConsumer\n-        System.out.println(CLASS + \": Creating a MessageConsumer\");\n-        messageConsumer = session.createConsumer(destination);\n-    }\n+  /**\n+   * @param destination\n+   */\n+  private void createSession(ConnectionFactory conFac, Destination destination)\n+    throws JMSException {\n+    // Create a session on the connection\n+    // This session is a default choice of non-transacted and uses the auto acknowledge feature of a session.\n+    System.out.println(CLASS + \": Creating a non-transacted, auto-acknowledged session\");\n+    session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+    // Create a MessageConsumer\n+    System.out.println(CLASS + \": Creating a MessageConsumer\");\n+    messageConsumer = session.createConsumer(destination);\n+  }\n \n-    /**\n-     * Create reply queue\n-     *\n-     * @param replyQueue\n-     * @throws JMSException\n-     */\n-    private void createRepQueue(ConnectionFactory conFac, Destination replyQueue)\n-            throws JMSException {\n-        MessageProducer messageProducer = session.createProducer(replyQueue);\n-        System.out.println(CLASS + \": Reply queue created\");\n-    }\n-\n-    /**\n-     * Not a typical message callback, this method will listern and pole the messages\n-     */\n-    private void onMessage() throws JMSException, XMLStreamException {\n-        Message message;\n-        boolean end = false;\n-        while (!end) {\n-            message = messageConsumer.receive();\n-            String text;\n-            if (message instanceof TextMessage) {\n-                text = ((TextMessage) message).getText();\n-            } else {\n-                byte[] body = new byte[(int) ((BytesMessage) message).getBodyLength()];\n-                ((BytesMessage) message).readBytes(body);\n-                text = new String(body);\n-            }\n-            System.out.println(CLASS + \": Received  message:  \" + text);\n-            if (message.getJMSReplyTo() != null) {\n-                // Send the Execution back to the sendar\n-                parseOrder(text);\n-                sendExecution(message);\n-            }\n-        }\n+  /**\n+   * Create reply queue\n+   *\n+   * @param replyQueue\n+   * @throws JMSException\n+   */\n+  private void createRepQueue(ConnectionFactory conFac, Destination replyQueue)\n+    throws JMSException {\n+    MessageProducer messageProducer = session.createProducer(replyQueue);\n+    System.out.println(CLASS + \": Reply queue created\");\n+  }\n \n+  /**\n+   * Not a typical message callback, this method will listern and pole the messages\n+   */\n+  private void onMessage() throws JMSException, XMLStreamException {\n+    Message message;\n+    boolean end = false;\n+    while (!end) {\n+      message = messageConsumer.receive();\n+      String text;\n+      if (message instanceof TextMessage) {\n+        text = ((TextMessage) message).getText();\n+      } else {\n+        byte[] body = new byte[(int) ((BytesMessage) message).getBodyLength()];\n+        ((BytesMessage) message).readBytes(body);\n+        text = new String(body);\n+      }\n+      System.out.println(CLASS + \": Received  message:  \" + text);\n+      if (message.getJMSReplyTo() != null) {\n+        // Send the Execution back to the sendar\n+        parseOrder(text);\n+        sendExecution(message);\n+      }\n     }\n \n-    /**\n-     * @param payload XML message content came inside the JMS message\n-     * @throws XMLStreamException on error\n-     */\n-    private void parseOrder(String payload) throws XMLStreamException {\n-        InputStream is = new ByteArrayInputStream(payload.getBytes());\n-        javax.xml.stream.XMLStreamReader parser = XMLInputFactory\n-                .newInstance().createXMLStreamReader(is);\n-        StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(parser,\n-                null);\n-        SOAPEnvelope envelope = (SOAPEnvelope) builder.getDocumentElement();\n-        // retrieve SOAP body\n-        SOAPBody soapBody = envelope.getBody();\n-        OMElement messageNode = soapBody.getFirstChildWithName(new QName(\n-                FIX_MSG));\n-        Iterator<?> messageElements = (Iterator<?>) messageNode\n-                .getChildElements();\n-        while (messageElements.hasNext()) {\n-            OMElement node = (OMElement) messageElements.next();\n-            if (node.getQName().getLocalPart().equals(FIX_MSG_BODY)) {\n-                Iterator<?> bodyElements = (Iterator<?>) node.getChildElements();\n-                while (bodyElements.hasNext()) {\n-                    OMElement bodyNode = (OMElement) bodyElements.next();\n-                    String tag = bodyNode\n-                            .getAttributeValue(new QName(FIX_MSG_ID));\n-                    String value = bodyNode.getText();\n-                    if (tag.equals(FIX_MSG_SYMBOL)) {\n-                        inSymbol = value;\n-                    } else if (tag.equals(FIX_MSG_CLORDID)) {\n-                        inClOrderID = value;\n-                    } else if (tag.equals(FIX_MSG_ORDQTY)) {\n-                        inQty = value;\n-                    }\n-                }\n-            }\n+  }\n+\n+  /**\n+   * @param payload XML message content came inside the JMS message\n+   * @throws XMLStreamException on error\n+   */\n+  private void parseOrder(String payload) throws XMLStreamException {\n+    InputStream is = new ByteArrayInputStream(payload.getBytes());\n+    javax.xml.stream.XMLStreamReader parser = XMLInputFactory\n+      .newInstance().createXMLStreamReader(is);\n+    StAXSOAPModelBuilder builder = new StAXSOAPModelBuilder(parser,\n+      null);\n+    SOAPEnvelope envelope = (SOAPEnvelope) builder.getDocumentElement();\n+    // retrieve SOAP body\n+    SOAPBody soapBody = envelope.getBody();\n+    OMElement messageNode = soapBody.getFirstChildWithName(new QName(\n+      FIX_MSG));\n+    Iterator<?> messageElements = (Iterator<?>) messageNode\n+      .getChildElements();\n+    while (messageElements.hasNext()) {\n+      OMElement node = (OMElement) messageElements.next();\n+      if (node.getQName().getLocalPart().equals(FIX_MSG_BODY)) {\n+        Iterator<?> bodyElements = (Iterator<?>) node.getChildElements();\n+        while (bodyElements.hasNext()) {\n+          OMElement bodyNode = (OMElement) bodyElements.next();\n+          String tag = bodyNode\n+            .getAttributeValue(new QName(FIX_MSG_ID));\n+          String value = bodyNode.getText();\n+          if (tag.equals(FIX_MSG_SYMBOL)) {\n+            inSymbol = value;\n+          } else if (tag.equals(FIX_MSG_CLORDID)) {\n+            inClOrderID = value;\n+          } else if (tag.equals(FIX_MSG_ORDQTY)) {\n+            inQty = value;\n+          }\n         }\n+      }\n     }\n+  }\n \n-    /**\n-     * @param message incoming message\n-     * @throws JMSException on error\n-     */\n-    private void sendExecution(Message message) throws JMSException {\n-        String repValue =\n-                \"<m0:message xmlns:m0=\\\"http://services.samples/xsd/\\\" inSeession=\\\"FIX.4.0:EXEC-->SYNAPSE\\\" count=\\\"2\\\">\\n\"\n-                        + \"<m0:header>\"\n-                        + \"<m0:field m0:id=\\\"35\\\"><![CDATA[8]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"52\\\"><![CDATA[20080618-08:41:56]]></m0:field>\"\n-                        + \"</m0:header>\"\n-                        + \"<m0:body>\"\n-                        + \"<m0:field m0:id=\\\"6\\\"><![CDATA[12.3]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"11\\\"><![CDATA[\"\n-                        + inClOrderID\n-                        + \"]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"14\\\"><![CDATA[\"\n-                        + inQty\n-                        + \"]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"17\\\"><![CDATA[\"\n-                        + execID\n-                        + \"]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"20\\\"><![CDATA[0]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"31\\\"><![CDATA[12.3]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"32\\\"><![CDATA[\"\n-                        + inQty\n-                        + \"]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"37\\\"><![CDATA[2]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"38\\\"><![CDATA[\"\n-                        + inQty\n-                        + \"]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"39\\\"><![CDATA[2]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"54\\\"><![CDATA[1]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"55\\\"><![CDATA[\"\n-                        + inSymbol\n-                        + \"]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"150\\\"><![CDATA[2]]></m0:field>\"\n-                        + \"<m0:field m0:id=\\\"151\\\"><![CDATA[0]]></m0:field>\"\n-                        + \"</m0:body>\"\n-                        + \"<m0:trailer>\"\n-                        + \"</m0:trailer>\"\n-                        + \"</m0:message>\";\n-        execID++;\n-        TextMessage repMessage = session.createTextMessage(repValue);\n-        repMessage.setJMSCorrelationID(message.getJMSMessageID());\n-        MessageProducer replyProducer = session.createProducer(message.getJMSReplyTo());\n-        replyProducer.send(repMessage);\n-        System.out.println(\"Execution sent: \" + repMessage.getText());\n-    }\n+  /**\n+   * @param message incoming message\n+   * @throws JMSException on error\n+   */\n+  private void sendExecution(Message message) throws JMSException {\n+    String repValue =\n+      \"<m0:message xmlns:m0=\\\"http://services.samples/xsd/\\\" inSeession=\\\"FIX.4.0:EXEC-->SYNAPSE\\\" count=\\\"2\\\">\\n\"\n+        + \"<m0:header>\"\n+        + \"<m0:field m0:id=\\\"35\\\"><![CDATA[8]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"52\\\"><![CDATA[20080618-08:41:56]]></m0:field>\"\n+        + \"</m0:header>\"\n+        + \"<m0:body>\"\n+        + \"<m0:field m0:id=\\\"6\\\"><![CDATA[12.3]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"11\\\"><![CDATA[\"\n+        + inClOrderID\n+        + \"]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"14\\\"><![CDATA[\"\n+        + inQty\n+        + \"]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"17\\\"><![CDATA[\"\n+        + execID\n+        + \"]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"20\\\"><![CDATA[0]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"31\\\"><![CDATA[12.3]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"32\\\"><![CDATA[\"\n+        + inQty\n+        + \"]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"37\\\"><![CDATA[2]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"38\\\"><![CDATA[\"\n+        + inQty\n+        + \"]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"39\\\"><![CDATA[2]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"54\\\"><![CDATA[1]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"55\\\"><![CDATA[\"\n+        + inSymbol\n+        + \"]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"150\\\"><![CDATA[2]]></m0:field>\"\n+        + \"<m0:field m0:id=\\\"151\\\"><![CDATA[0]]></m0:field>\"\n+        + \"</m0:body>\"\n+        + \"<m0:trailer>\"\n+        + \"</m0:trailer>\"\n+        + \"</m0:message>\";\n+    execID++;\n+    TextMessage repMessage = session.createTextMessage(repValue);\n+    repMessage.setJMSCorrelationID(message.getJMSMessageID());\n+    MessageProducer replyProducer = session.createProducer(message.getJMSReplyTo());\n+    replyProducer.send(repMessage);\n+    System.out.println(\"Execution sent: \" + repMessage.getText());\n+  }\n \n-    /**\n-     * Get the system properties\n-     *\n-     * @param name property name\n-     * @param def  default value\n-     * @return property value\n-     */\n-    private static String getProperty(String name, String def) {\n-        String result = System.getProperty(name);\n-        if (result == null || result.length() == 0) {\n-            result = def;\n-        }\n-        return result;\n+  /**\n+   * Get the system properties\n+   *\n+   * @param name property name\n+   * @param def  default value\n+   * @return property value\n+   */\n+  private static String getProperty(String name, String def) {\n+    String result = System.getProperty(name);\n+    if (result == null || result.length() == 0) {\n+      result = def;\n     }\n+    return result;\n+  }\n }\n \n",
            "diff_size": 257
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/16/AMQPConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/16/AMQPConsumer.java\nindex da92aa49d88..a83b2229770 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/16/AMQPConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/16/AMQPConsumer.java\n@@ -81,7 +81,9 @@ public class AMQPConsumer {\n             Context ctx = new InitialContext(properties);\n             // look up destination\n             Destination destination = (Destination) ctx.lookup(LOOKUP_CODE_CON); // Listerning queue\n-            Destination replyQueue = (Destination) ctx.lookup(LOOKUP_CODE_REP);  // Reply queue\n+            Destination replyQueue = (Destination) ctx.lookup(LOOKUP_CODE_REP);\n+\n+// Reply queue\n             // Lookup the connection factory\n             ConnectionFactory conFac = (ConnectionFactory) ctx.lookup(CONNECTION_FACTORY);\n             connection = conFac.createConnection();\n@@ -180,8 +182,7 @@ public class AMQPConsumer {\n         SOAPEnvelope envelope = (SOAPEnvelope) builder.getDocumentElement();\n         // retrieve SOAP body\n         SOAPBody soapBody = envelope.getBody();\n-        OMElement messageNode = soapBody.getFirstChildWithName(new QName(\n-                FIX_MSG));\n+        OMElement messageNode = soapBody.getFirstChildWithName(new QName(FIX_MSG));\n         Iterator<?> messageElements = (Iterator<?>) messageNode\n                 .getChildElements();\n         while (messageElements.hasNext()) {\n@@ -210,8 +211,7 @@ public class AMQPConsumer {\n      * @throws JMSException on error\n      */\n     private void sendExecution(Message message) throws JMSException {\n-        String repValue =\n-                \"<m0:message xmlns:m0=\\\"http://services.samples/xsd/\\\" inSeession=\\\"FIX.4.0:EXEC-->SYNAPSE\\\" count=\\\"2\\\">\\n\"\n+        String repValue = \"<m0:message xmlns:m0=\\\"http://services.samples/xsd/\\\" inSeession=\\\"FIX.4.0:EXEC-->SYNAPSE\\\" count=\\\"2\\\">\\n\"\n                         + \"<m0:header>\"\n                         + \"<m0:field m0:id=\\\"35\\\"><![CDATA[8]]></m0:field>\"\n                         + \"<m0:field m0:id=\\\"52\\\"><![CDATA[20080618-08:41:56]]></m0:field>\"\n@@ -246,8 +246,7 @@ public class AMQPConsumer {\n                         + \"</m0:body>\"\n                         + \"<m0:trailer>\"\n                         + \"</m0:trailer>\"\n-                        + \"</m0:message>\";\n-        execID++;\n+                        + \"</m0:message>\"; execID++;\n         TextMessage repMessage = session.createTextMessage(repValue);\n         repMessage.setJMSCorrelationID(message.getJMSMessageID());\n         MessageProducer replyProducer = session.createProducer(message.getJMSReplyTo());\n@@ -269,5 +268,4 @@ public class AMQPConsumer {\n         }\n         return result;\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/16/AMQPConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/16/AMQPConsumer.java\nindex da92aa49d88..d40a64a98fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/16/AMQPConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/16/AMQPConsumer.java\n@@ -211,8 +211,8 @@ public class AMQPConsumer {\n      */\n     private void sendExecution(Message message) throws JMSException {\n         String repValue =\n-                \"<m0:message xmlns:m0=\\\"http://services.samples/xsd/\\\" inSeession=\\\"FIX.4.0:EXEC-->SYNAPSE\\\" count=\\\"2\\\">\\n\"\n-                        + \"<m0:header>\"\n+            \"<m0:message xmlns:m0=\\\"http://services.samples/xsd/\\\" inSeession=\\\"FIX.4.0:EXEC-->SYNAPSE\\\" count=\\\"2\\\">\\n\"\n+        + \"<m0:header>\"\n                         + \"<m0:field m0:id=\\\"35\\\"><![CDATA[8]]></m0:field>\"\n                         + \"<m0:field m0:id=\\\"52\\\"><![CDATA[20080618-08:41:56]]></m0:field>\"\n                         + \"</m0:header>\"\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}