{
    "project_name": "fangjinuo-easyjson",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "44",
                "column": "39",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\n    public void addAll(Collection<OrderByItem> items) {\n        for (OrderByItem item : items){\n            add(item);\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/16/OrderBy.java\nindex 9b4e373c086..55652be4aba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/16/OrderBy.java\n@@ -41,7 +41,7 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n     }\n \n     public void addAll(Collection<OrderByItem> items) {\n-        for (OrderByItem item : items){\n+        for (OrderByItem item : items) {\n             add(item);\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/16/OrderBy.java\nindex 9b4e373c086..a70106865e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/16/OrderBy.java\n@@ -27,7 +27,9 @@ import java.util.*;\n  * @author jinuo.fang\n  */\n public class OrderBy implements Serializable, Iterable<OrderByItem> {\n-    /** serialVersionUID **/\n+    /**\n+     * serialVersionUID\n+     **/\n     private static final long serialVersionUID = 1L;\n     public static final OrderBy EMPTY = new OrderBy();\n     private final Map<String, OrderByItem> items = new LinkedHashMap<String, OrderByItem>();\n@@ -41,7 +43,7 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n     }\n \n     public void addAll(Collection<OrderByItem> items) {\n-        for (OrderByItem item : items){\n+        for (OrderByItem item : items) {\n             add(item);\n         }\n     }\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/naturalize/16/OrderBy.java\nindex 9b4e373c086..9f250c5d444 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/naturalize/16/OrderBy.java\n@@ -41,7 +41,7 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n     }\n \n     public void addAll(Collection<OrderByItem> items) {\n-        for (OrderByItem item : items){\n+        for (OrderByItem item : items) {\n             add(item);\n         }\n     }\n@@ -63,7 +63,7 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n \n     @Override\n     public String toString() {\n-        return Strings.join(\",\", Pipeline.<OrderByItem>of(items.values()).map(new Function<OrderByItem, String>() {\n+        return Strings.join(\",\", Pipeline.<OrderByItem> of(items.values()).map(new Function<OrderByItem, String>() {\n             @Override\n             public String apply(OrderByItem item) {\n                 return item.toString();\n@@ -86,7 +86,7 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n \n     @Override\n     public int hashCode() {\n-        return Pipeline.<OrderByItem>of(items.values()).map(new Function<OrderByItem, Integer>() {\n+        return Pipeline.<OrderByItem> of(items.values()).map(new Function<OrderByItem, Integer>() {\n             @Override\n             public Integer apply(OrderByItem item) {\n                 return item.hashCode();\n@@ -100,4 +100,4 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n             item.setComparator(comparator);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/16/OrderBy.java\nindex 9b4e373c086..8cf6e705309 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/16/OrderBy.java\n@@ -14,24 +14,26 @@\n \n package com.jn.easyjson.tests.entity.struct;\n \n-\n import com.jn.langx.annotation.NonNull;\n import com.jn.langx.util.Strings;\n import com.jn.langx.util.collection.Pipeline;\n import com.jn.langx.util.function.Function;\n-\n import java.io.Serializable;\n import java.util.*;\n \n /**\n  * @author jinuo.fang\n  */\n+\n public class OrderBy implements Serializable, Iterable<OrderByItem> {\n     /** serialVersionUID **/\n     private static final long serialVersionUID = 1L;\n+\n+\n     public static final OrderBy EMPTY = new OrderBy();\n     private final Map<String, OrderByItem> items = new LinkedHashMap<String, OrderByItem>();\n \n+\n     public boolean isValid() {\n         return !items.isEmpty();\n     }\n@@ -41,12 +43,11 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n     }\n \n     public void addAll(Collection<OrderByItem> items) {\n-        for (OrderByItem item : items){\n+        for (OrderByItem item : items) {\n             add(item);\n         }\n     }\n \n-\n     public void addAsc(String expression) {\n         add(new OrderByItem(expression, true));\n     }\n@@ -64,11 +65,11 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n     @Override\n     public String toString() {\n         return Strings.join(\",\", Pipeline.<OrderByItem>of(items.values()).map(new Function<OrderByItem, String>() {\n-            @Override\n-            public String apply(OrderByItem item) {\n-                return item.toString();\n-            }\n-        }).getAll());\n+                                                                                  @Override\n+                                                                                  public String apply(OrderByItem item) {\n+                                                                                      return item.toString();\n+                                                                                  }\n+                                                                              }).getAll());\n     }\n \n     @Override\n@@ -79,7 +80,6 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n         if (object == null || getClass() != object.getClass()) {\n             return false;\n         }\n-\n         OrderBy that = (OrderBy) object;\n         return this.toString().equalsIgnoreCase(that.toString());\n     }\n@@ -87,11 +87,11 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n     @Override\n     public int hashCode() {\n         return Pipeline.<OrderByItem>of(items.values()).map(new Function<OrderByItem, Integer>() {\n-            @Override\n-            public Integer apply(OrderByItem item) {\n-                return item.hashCode();\n-            }\n-        }).sum().intValue();\n+                                                                @Override\n+                                                                public Integer apply(OrderByItem item) {\n+                                                                    return item.hashCode();\n+                                                                }\n+                                                            }).sum().intValue();\n     }\n \n     public void setComparator(String itemExpression, Comparator<?> comparator) {\n@@ -100,4 +100,4 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n             item.setComparator(comparator);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/16/OrderBy.java\nindex 9b4e373c086..55652be4aba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/16/OrderBy.java\n@@ -41,7 +41,7 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n     }\n \n     public void addAll(Collection<OrderByItem> items) {\n-        for (OrderByItem item : items){\n+        for (OrderByItem item : items) {\n             add(item);\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/16/OrderBy.java\nindex 9b4e373c086..55652be4aba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/16/OrderBy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/16/OrderBy.java\n@@ -41,7 +41,7 @@ public class OrderBy implements Serializable, Iterable<OrderByItem> {\n     }\n \n     public void addAll(Collection<OrderByItem> items) {\n-        for (OrderByItem item : items){\n+        for (OrderByItem item : items) {\n             add(item);\n         }\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}