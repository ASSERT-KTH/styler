{
    "project_name": "cloudera-director-sdk",
    "error_id": "115",
    "information": {
        "errors": [
            {
                "line": "0",
                "severity": "error",
                "message": "Required pattern 'Cloudera copyright header' missing in file.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/115/PasswordChange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/115/PasswordChange.java\nindex 132983b056a..3009ed6977b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/115/PasswordChange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/115/PasswordChange.java\n@@ -24,7 +24,9 @@ public class PasswordChange {\n   private String newPassword;\n   /* Old password [redacted on read] */\n   private String oldPassword;\n-  public PasswordChange() { }\n+\n+  public PasswordChange() {\n+  }\n \n   private PasswordChange(String newPassword, String oldPassword) {\n     this.newPassword = newPassword;\n@@ -61,13 +63,15 @@ public class PasswordChange {\n \n   public PasswordChangeBuilder toBuilder() {\n     return builder()\n-      .newPassword(newPassword)\n-      .oldPassword(oldPassword)\n-      ;\n+        .newPassword(newPassword)\n+        .oldPassword(oldPassword)\n+        ;\n   }\n+\n   public String getNewPassword() {\n     return newPassword;\n   }\n+\n   public void setNewPassword(String newPassword) {\n     this.newPassword = newPassword;\n   }\n@@ -75,14 +79,19 @@ public class PasswordChange {\n   public String getOldPassword() {\n     return oldPassword;\n   }\n+\n   public void setOldPassword(String oldPassword) {\n     this.oldPassword = oldPassword;\n   }\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n \n     PasswordChange other = (PasswordChange) o; // NOPMD\n \n@@ -96,7 +105,7 @@ public class PasswordChange {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class PasswordChange {\" + newLine);\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/115/PasswordChange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/115/PasswordChange.java\nindex 132983b056a..c9d3766eadc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/115/PasswordChange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/115/PasswordChange.java\n@@ -1,30 +1,15 @@\n-// Licensed to Cloudera, Inc. under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  Cloudera, Inc. licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Licensed to Cloudera, Inc.\n // Note: This file is auto generated. Do not edit manually.\n \n package com.cloudera.director.client.v7.model;\n \n-\n public class PasswordChange {\n   /* New password [redacted on read] */\n   private String newPassword;\n   /* Old password [redacted on read] */\n   private String oldPassword;\n-  public PasswordChange() { }\n+\n+public PasswordChange() { }\n \n   private PasswordChange(String newPassword, String oldPassword) {\n     this.newPassword = newPassword;\n@@ -41,7 +26,8 @@ public class PasswordChange {\n   }\n \n   public static class PasswordChangeBuilder {\n-    private String newPassword = null;\n+\n+  private String newPassword = null;\n     private String oldPassword = null;\n \n     public PasswordChangeBuilder newPassword(String newPassword) {\n@@ -60,12 +46,11 @@ public class PasswordChange {\n   }\n \n   public PasswordChangeBuilder toBuilder() {\n-    return builder()\n-      .newPassword(newPassword)\n-      .oldPassword(oldPassword)\n-      ;\n+    return builder().newPassword(newPassword)\n+      .oldPassword(oldPassword);\n   }\n-  public String getNewPassword() {\n+\n+public String getNewPassword() {\n     return newPassword;\n   }\n   public void setNewPassword(String newPassword) {\n@@ -82,9 +67,12 @@ public class PasswordChange {\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (o == null ||\n+getClass() != o.getClass()) return false;\n+\n+    PasswordChange other = (PasswordChange) o;\n \n-    PasswordChange other = (PasswordChange) o; // NOPMD\n+// NOPMD\n \n     return true;\n   }\n@@ -96,7 +84,7 @@ public class PasswordChange {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class PasswordChange {\" + newLine);\n@@ -105,5 +93,4 @@ public class PasswordChange {\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "30",
                    "column": "27",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "30",
                    "column": "28",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "94",
                    "column": "18",
                    "severity": "warning",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "97",
                    "column": "43",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/115/PasswordChange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/115/PasswordChange.java\nindex 132983b056a..5cd61268b93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/115/PasswordChange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/115/PasswordChange.java\n@@ -18,30 +18,36 @@\n \n package com.cloudera.director.client.v7.model;\n \n-\n public class PasswordChange {\n   /* New password [redacted on read] */\n+\n   private String newPassword;\n   /* Old password [redacted on read] */\n+\n   private String oldPassword;\n-  public PasswordChange() { }\n+\n+\n+  public PasswordChange() {}\n+\n \n   private PasswordChange(String newPassword, String oldPassword) {\n-    this.newPassword = newPassword;\n-    this.oldPassword = oldPassword;\n-  }\n+                                                                 this.newPassword = newPassword;\n+                                                                 this.oldPassword = oldPassword;\n+                            }\n \n   private PasswordChange(PasswordChangeBuilder builder) {\n-    this.newPassword = builder.newPassword;\n-    this.oldPassword = builder.oldPassword;\n-  }\n+                                                        this.newPassword = builder.newPassword;\n+                                                        this.oldPassword = builder.oldPassword;\n+                            }\n \n   public static PasswordChangeBuilder builder() {\n     return new PasswordChangeBuilder();\n   }\n \n   public static class PasswordChangeBuilder {\n+\n     private String newPassword = null;\n+\n     private String oldPassword = null;\n \n     public PasswordChangeBuilder newPassword(String newPassword) {\n@@ -62,12 +68,13 @@ public class PasswordChange {\n   public PasswordChangeBuilder toBuilder() {\n     return builder()\n       .newPassword(newPassword)\n-      .oldPassword(oldPassword)\n-      ;\n+      .oldPassword(oldPassword);\n   }\n+\n   public String getNewPassword() {\n     return newPassword;\n   }\n+\n   public void setNewPassword(String newPassword) {\n     this.newPassword = newPassword;\n   }\n@@ -75,35 +82,41 @@ public class PasswordChange {\n   public String getOldPassword() {\n     return oldPassword;\n   }\n+\n   public void setOldPassword(String oldPassword) {\n     this.oldPassword = oldPassword;\n   }\n \n+\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-\n-    PasswordChange other = (PasswordChange) o; // NOPMD\n+    if (o == null||\n+        getClass() != o.getClass()) return false;\n \n+    PasswordChange other = (PasswordChange)o; // NOPMD\n     return true;\n   }\n \n+\n   @Override\n   public int hashCode() {\n     int result = 0;\n     return result;\n   }\n \n+\n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n+\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class PasswordChange {\" + newLine);\n-    sb.append(\"  newPassword: \").append(\"REDACTED\").append(newLine);\n-    sb.append(\"  oldPassword: \").append(\"REDACTED\").append(newLine);\n+    sb.append(\"  newPassword: \")\n+      .append(\"REDACTED\").append(newLine);\n+    sb.append(\"  oldPassword: \")\n+      .append(\"REDACTED\").append(newLine);\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}