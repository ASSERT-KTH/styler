{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3005",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "138",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3005/PathExpanders.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3005/PathExpanders.java\nindex 1af69bd608e..809acf1a5e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3005/PathExpanders.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3005/PathExpanders.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import java.io.PrintStream;\n@@ -33,222 +34,226 @@ import org.neo4j.graphdb.traversal.Paths;\n  */\n public abstract class PathExpanders\n {\n-    /**\n-     * A very permissive {@link PathExpander} that follows any type in any direction.\n-     *\n-     * @param <STATE> the type of the object that holds the state\n-     * @return a very permissive {@link PathExpander} that follows any type in any direction\n-     */\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <STATE> PathExpander<STATE> allTypesAndDirections()\n-    {\n-        return StandardExpander.DEFAULT;\n-    }\n-\n-    /**\n-     * A very permissive {@link PathExpander} that follows {@code type} relationships in any direction.\n-     *\n-     * @param type the type of relationships to expand in any direction\n-     * @param <STATE> the type of the object that holds the state\n-     * @return a very permissive {@link PathExpander} that follows {@code type} relationships in any direction\n-     */\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <STATE> PathExpander<STATE> forType( RelationshipType type )\n-    {\n-        return StandardExpander.create( type, Direction.BOTH );\n-    }\n-\n-    /**\n-     * A very permissive {@link PathExpander} that follows any type in {@code direction}.\n-     *\n-     * @param direction the direction to follow relationships in\n-     * @param <STATE> the type of the object that holds the state\n-     * @return a very permissive {@link PathExpander} that follows any type in {@code direction}\n-     */\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <STATE> PathExpander<STATE> forDirection( Direction direction )\n-    {\n-        return StandardExpander.create( direction );\n-    }\n-\n-    /**\n-     * A very restricted {@link PathExpander} that follows {@code type} in {@code direction}.\n-     *\n-     * @param type the type of relationships to follow\n-     * @param direction the direction to follow relationships in\n-     * @param <STATE> the type of the object that holds the state\n-     * @return a very restricted {@link PathExpander} that follows {@code type} in {@code direction}\n-     */\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <STATE> PathExpander<STATE> forTypeAndDirection( RelationshipType type, Direction direction )\n-    {\n-        return StandardExpander.create( type, direction );\n-    }\n-\n-    /**\n-     * A very restricted {@link PathExpander} that follows only the {@code type}/{@code direction} pairs that you list.\n-     *\n-     * @param type1 the type of relationships to follow in {@code direction1}\n-     * @param direction1 the direction to follow {@code type1} relationships in\n-     * @param type2 the type of relationships to follow in {@code direction2}\n-     * @param direction2 the direction to follow {@code type2} relationships in\n-     * @param more add more {@code type}/{@code direction} pairs\n-     * @param <STATE> the type of the object that holds the state\n-     * @return a very restricted {@link PathExpander} that follows only the {@code type}/{@code direction} pairs that you list\n-     */\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <STATE> PathExpander<STATE> forTypesAndDirections( RelationshipType type1, Direction direction1,\n-                                                                     RelationshipType type2, Direction direction2,\n-                                                                     Object... more )\n-    {\n-        return StandardExpander.create( type1, direction1, type2, direction2, more );\n-    }\n-\n-    /**\n-     * An expander forcing constant relationship direction\n-     *\n-     * @param types types of relationships to follow\n-     * @param <STATE> the type of the object that holds the state\n-     * @return a {@link PathExpander} which enforces constant relationship direction\n-     */\n-    public static <STATE> PathExpander<STATE> forConstantDirectionWithTypes( final RelationshipType... types )\n+  /**\n+   * A very permissive {@link PathExpander} that follows any type in any direction.\n+   *\n+   * @param <STATE> the type of the object that holds the state\n+   * @return a very permissive {@link PathExpander} that follows any type in any direction\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static <STATE> PathExpander<STATE> allTypesAndDirections()\n+  {\n+    return StandardExpander.DEFAULT;\n+  }\n+\n+  /**\n+   * A very permissive {@link PathExpander} that follows {@code type} relationships in any direction.\n+   *\n+   * @param type    the type of relationships to expand in any direction\n+   * @param <STATE> the type of the object that holds the state\n+   * @return a very permissive {@link PathExpander} that follows {@code type} relationships in any direction\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static <STATE> PathExpander<STATE> forType(RelationshipType type)\n+  {\n+    return StandardExpander.create(type, Direction.BOTH);\n+  }\n+\n+  /**\n+   * A very permissive {@link PathExpander} that follows any type in {@code direction}.\n+   *\n+   * @param direction the direction to follow relationships in\n+   * @param <STATE>   the type of the object that holds the state\n+   * @return a very permissive {@link PathExpander} that follows any type in {@code direction}\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static <STATE> PathExpander<STATE> forDirection(Direction direction)\n+  {\n+    return StandardExpander.create(direction);\n+  }\n+\n+  /**\n+   * A very restricted {@link PathExpander} that follows {@code type} in {@code direction}.\n+   *\n+   * @param type      the type of relationships to follow\n+   * @param direction the direction to follow relationships in\n+   * @param <STATE>   the type of the object that holds the state\n+   * @return a very restricted {@link PathExpander} that follows {@code type} in {@code direction}\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static <STATE> PathExpander<STATE> forTypeAndDirection(RelationshipType type, Direction direction)\n+  {\n+    return StandardExpander.create(type, direction);\n+  }\n+\n+  /**\n+   * A very restricted {@link PathExpander} that follows only the {@code type}/{@code direction} pairs that you list.\n+   *\n+   * @param type1      the type of relationships to follow in {@code direction1}\n+   * @param direction1 the direction to follow {@code type1} relationships in\n+   * @param type2      the type of relationships to follow in {@code direction2}\n+   * @param direction2 the direction to follow {@code type2} relationships in\n+   * @param more       add more {@code type}/{@code direction} pairs\n+   * @param <STATE>    the type of the object that holds the state\n+   * @return a very restricted {@link PathExpander} that follows only the {@code type}/{@code direction} pairs that you list\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static <STATE> PathExpander<STATE> forTypesAndDirections(RelationshipType type1, Direction direction1,\n+                                                                  RelationshipType type2, Direction direction2,\n+                                                                  Object... more)\n+  {\n+    return StandardExpander.create(type1, direction1, type2, direction2, more);\n+  }\n+\n+  /**\n+   * An expander forcing constant relationship direction\n+   *\n+   * @param types   types of relationships to follow\n+   * @param <STATE> the type of the object that holds the state\n+   * @return a {@link PathExpander} which enforces constant relationship direction\n+   */\n+  public static <STATE> PathExpander<STATE> forConstantDirectionWithTypes(final RelationshipType... types)\n+  {\n+    return new PathExpander<STATE>()\n     {\n-        return new PathExpander<STATE>()\n+      @Override\n+      public Iterable<Relationship> expand(Path path, BranchState<STATE> state)\n+      {\n+        if (path.length() == 0)\n         {\n-            @Override\n-            public Iterable<Relationship> expand( Path path, BranchState<STATE> state )\n-            {\n-                if ( path.length() == 0 )\n-                {\n-                    return path.endNode().getRelationships( types );\n-                }\n-                else\n-                {\n-                    Direction direction = getDirectionOfLastRelationship( path );\n-                    return path.endNode().getRelationships( direction, types );\n-                }\n-            }\n-\n-            @Override\n-            public PathExpander<STATE> reverse()\n-            {\n-                return this;\n-            }\n-\n-            private Direction getDirectionOfLastRelationship( Path path )\n-            {\n-                assert path.length() > 0;\n-                Direction direction = Direction.INCOMING;\n-                if ( path.endNode().equals( path.lastRelationship().getEndNode() ) )\n-                {\n-                    direction = Direction.OUTGOING;\n-                }\n-                return direction;\n-            }\n-        };\n-    }\n-\n-    private PathExpanders()\n-    {\n-        // you should never instantiate this\n-    }\n-\n-    /**\n-     * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths.\n-     * All expanded paths will be printed using System.out.\n-     * @param source    {@link PathExpander} to wrap.\n-     * @param <STATE>   the type of the object that holds the state\n-     * @return A new {@link PathExpander}.\n-     */\n-    public static <STATE> PathExpander<STATE> printingWrapper( final PathExpander<STATE> source )\n-    {\n-        return printingWrapper( source, new Paths.DefaultPathDescriptor() );\n-    }\n-\n-    /**\n-     * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor}\n-     * to print expanded paths that fulfill {@link BiFunction} predicate.\n-     * Will use System.out as {@link PrintStream}.\n-     * @param source    {@link PathExpander} to wrap.\n-     * @param pred      {@link BiFunction} used as predicate for printing expansion.\n-     * @param <STATE>   the type of the object that holds the state\n-     * @return          A new {@link PathExpander}.\n-     */\n-    public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final BiFunction<Path, BranchState, Boolean> pred )\n-    {\n-        return printingWrapper( source, pred, new Paths.DefaultPathDescriptor() );\n-    }\n-\n-    /**\n-     * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths\n-     * using given {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor}.\n-     * All expanded paths will be printed.\n-     * Will use System.out as {@link PrintStream}.\n-     * @param source        {@link PathExpander} to wrap.\n-     * @param descriptor    {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n-     * @param <STATE>       the type of the object that holds the state\n-     * @return              A new {@link PathExpander}.\n-     */\n-    public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final Paths.PathDescriptor descriptor )\n-    {\n-        return printingWrapper( source, ( propertyContainers, stateBranchState ) -> Boolean.TRUE, descriptor );\n-    }\n-\n-    /**\n-     * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths\n-     * that fulfill {@link BiFunction} predicate using given {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor}.\n-     * Will use System.out as {@link PrintStream}.\n-     * @param source    {@link PathExpander} to wrap.\n-     * @param pred      {@link BiFunction} used as predicate for printing expansion.\n-     * @param descriptor {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n-     * @param <STATE>   the type of the object that holds the state\n-     * @return          A new {@link PathExpander}.\n-     */\n-    public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final BiFunction<Path, BranchState, Boolean> pred,\n-            final Paths.PathDescriptor descriptor )\n-    {\n-        return printingWrapper( source, pred, descriptor, System.out );\n-    }\n-\n-    /**\n-     * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths\n-     * that fulfill {@link BiFunction} predicate using given {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor}.\n-     * @param source        {@link PathExpander} to wrap.\n-     * @param pred          {@link BiFunction} used as predicate for printing expansion.\n-     * @param descriptor    {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n-     * @param out           {@link PrintStream} to use for printing expanded paths\n-     * @param <STATE>       the type of the object that holds the state\n-     * @return              A new {@link PathExpander}.\n-     */\n-    public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final BiFunction<Path, BranchState, Boolean> pred,\n-            final Paths.PathDescriptor descriptor,\n-            final PrintStream out )\n+          return path.endNode().getRelationships(types);\n+        } else\n+        {\n+          Direction direction = getDirectionOfLastRelationship(path);\n+          return path.endNode().getRelationships(direction, types);\n+        }\n+      }\n+\n+      @Override\n+      public PathExpander<STATE> reverse()\n+      {\n+        return this;\n+      }\n+\n+      private Direction getDirectionOfLastRelationship(Path path)\n+      {\n+        assert path.length() > 0;\n+        Direction direction = Direction.INCOMING;\n+        if (path.endNode().equals(path.lastRelationship().getEndNode()))\n+        {\n+          direction = Direction.OUTGOING;\n+        }\n+        return direction;\n+      }\n+    };\n+  }\n+\n+  private PathExpanders()\n+  {\n+    // you should never instantiate this\n+  }\n+\n+  /**\n+   * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths.\n+   * All expanded paths will be printed using System.out.\n+   *\n+   * @param source  {@link PathExpander} to wrap.\n+   * @param <STATE> the type of the object that holds the state\n+   * @return A new {@link PathExpander}.\n+   */\n+  public static <STATE> PathExpander<STATE> printingWrapper(final PathExpander<STATE> source)\n+  {\n+    return printingWrapper(source, new Paths.DefaultPathDescriptor());\n+  }\n+\n+  /**\n+   * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor}\n+   * to print expanded paths that fulfill {@link BiFunction} predicate.\n+   * Will use System.out as {@link PrintStream}.\n+   *\n+   * @param source  {@link PathExpander} to wrap.\n+   * @param pred    {@link BiFunction} used as predicate for printing expansion.\n+   * @param <STATE> the type of the object that holds the state\n+   * @return A new {@link PathExpander}.\n+   */\n+  public static <STATE> PathExpander<STATE> printingWrapper(\n+      final PathExpander<STATE> source,\n+      final BiFunction<Path, BranchState, Boolean> pred)\n+  {\n+    return printingWrapper(source, pred, new Paths.DefaultPathDescriptor());\n+  }\n+\n+  /**\n+   * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths\n+   * using given {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor}.\n+   * All expanded paths will be printed.\n+   * Will use System.out as {@link PrintStream}.\n+   *\n+   * @param source     {@link PathExpander} to wrap.\n+   * @param descriptor {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n+   * @param <STATE>    the type of the object that holds the state\n+   * @return A new {@link PathExpander}.\n+   */\n+  public static <STATE> PathExpander<STATE> printingWrapper(\n+      final PathExpander<STATE> source,\n+      final Paths.PathDescriptor descriptor)\n+  {\n+    return printingWrapper(source, (propertyContainers, stateBranchState) -> Boolean.TRUE, descriptor);\n+  }\n+\n+  /**\n+   * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths\n+   * that fulfill {@link BiFunction} predicate using given {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor}.\n+   * Will use System.out as {@link PrintStream}.\n+   *\n+   * @param source     {@link PathExpander} to wrap.\n+   * @param pred       {@link BiFunction} used as predicate for printing expansion.\n+   * @param descriptor {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n+   * @param <STATE>    the type of the object that holds the state\n+   * @return A new {@link PathExpander}.\n+   */\n+  public static <STATE> PathExpander<STATE> printingWrapper(\n+      final PathExpander<STATE> source,\n+      final BiFunction<Path, BranchState, Boolean> pred,\n+      final Paths.PathDescriptor descriptor)\n+  {\n+    return printingWrapper(source, pred, descriptor, System.out);\n+  }\n+\n+  /**\n+   * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths\n+   * that fulfill {@link BiFunction} predicate using given {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor}.\n+   *\n+   * @param source     {@link PathExpander} to wrap.\n+   * @param pred       {@link BiFunction} used as predicate for printing expansion.\n+   * @param descriptor {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n+   * @param out        {@link PrintStream} to use for printing expanded paths\n+   * @param <STATE>    the type of the object that holds the state\n+   * @return A new {@link PathExpander}.\n+   */\n+  public static <STATE> PathExpander<STATE> printingWrapper(\n+      final PathExpander<STATE> source,\n+      final BiFunction<Path, BranchState, Boolean> pred,\n+      final Paths.PathDescriptor descriptor,\n+      final PrintStream out)\n+  {\n+    return new PathExpander<STATE>()\n     {\n-        return new PathExpander<STATE>()\n+      @Override\n+      public Iterable<Relationship> expand(Path path, BranchState state)\n+      {\n+        if (pred.apply(path, state))\n         {\n-            @Override\n-            public Iterable<Relationship> expand( Path path, BranchState state )\n-            {\n-                if ( pred.apply( path, state ) )\n-                {\n-                    out.println( Paths.pathToString( path, descriptor ) );\n-                }\n-                return source.expand( path, state );\n-            }\n-\n-            @Override\n-            public PathExpander<STATE> reverse()\n-            {\n-                return printingWrapper( source.reverse(), pred, descriptor, out );\n-            }\n-        };\n-    }\n+          out.println(Paths.pathToString(path, descriptor));\n+        }\n+        return source.expand(path, state);\n+      }\n+\n+      @Override\n+      public PathExpander<STATE> reverse()\n+      {\n+        return printingWrapper(source.reverse(), pred, descriptor, out);\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 224
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "207",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "222",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3005/PathExpanders.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3005/PathExpanders.java\nindex 1af69bd608e..5545e7563eb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3005/PathExpanders.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3005/PathExpanders.java\n@@ -97,10 +97,9 @@ public abstract class PathExpanders\n      * @return a very restricted {@link PathExpander} that follows only the {@code type}/{@code direction} pairs that you list\n      */\n     @SuppressWarnings( \"unchecked\" )\n-    public static <STATE> PathExpander<STATE> forTypesAndDirections( RelationshipType type1, Direction direction1,\n-                                                                     RelationshipType type2, Direction direction2,\n+    public static <STATE> PathExpander<STATE> forTypesAndDirections( RelationshipType type1, Direction direction1, RelationshipType type2, Direction direction2,\n                                                                      Object... more )\n-    {\n+{\n         return StandardExpander.create( type1, direction1, type2, direction2, more );\n     }\n \n@@ -143,7 +142,8 @@ public abstract class PathExpanders\n                 {\n                     direction = Direction.OUTGOING;\n                 }\n-                return direction;\n+\n+return direction;\n             }\n         };\n     }\n@@ -174,9 +174,7 @@ public abstract class PathExpanders\n      * @param <STATE>   the type of the object that holds the state\n      * @return          A new {@link PathExpander}.\n      */\n-    public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final BiFunction<Path, BranchState, Boolean> pred )\n+    public static <STATE> PathExpander<STATE> printingWrapper( final PathExpander<STATE> source, final BiFunction<Path, BranchState, Boolean> pred )\n     {\n         return printingWrapper( source, pred, new Paths.DefaultPathDescriptor() );\n     }\n@@ -191,9 +189,7 @@ public abstract class PathExpanders\n      * @param <STATE>       the type of the object that holds the state\n      * @return              A new {@link PathExpander}.\n      */\n-    public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final Paths.PathDescriptor descriptor )\n+    public static <STATE> PathExpander<STATE> printingWrapper( final PathExpander<STATE> source, final Paths.PathDescriptor descriptor )\n     {\n         return printingWrapper( source, ( propertyContainers, stateBranchState ) -> Boolean.TRUE, descriptor );\n     }\n@@ -208,10 +204,7 @@ public abstract class PathExpanders\n      * @param <STATE>   the type of the object that holds the state\n      * @return          A new {@link PathExpander}.\n      */\n-    public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final BiFunction<Path, BranchState, Boolean> pred,\n-            final Paths.PathDescriptor descriptor )\n+    public static <STATE> PathExpander<STATE> printingWrapper( final PathExpander<STATE> source, final BiFunction<Path, BranchState, Boolean> pred, final Paths.PathDescriptor descriptor )\n     {\n         return printingWrapper( source, pred, descriptor, System.out );\n     }\n@@ -226,11 +219,7 @@ public abstract class PathExpanders\n      * @param <STATE>       the type of the object that holds the state\n      * @return              A new {@link PathExpander}.\n      */\n-    public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final BiFunction<Path, BranchState, Boolean> pred,\n-            final Paths.PathDescriptor descriptor,\n-            final PrintStream out )\n+    public static <STATE> PathExpander<STATE> printingWrapper( final PathExpander<STATE> source, final BiFunction<Path, BranchState, Boolean> pred, final Paths.PathDescriptor descriptor, final PrintStream out )\n     {\n         return new PathExpander<STATE>()\n         {\n@@ -241,7 +230,8 @@ public abstract class PathExpanders\n                 {\n                     out.println( Paths.pathToString( path, descriptor ) );\n                 }\n-                return source.expand( path, state );\n+\n+return source.expand( path, state );\n             }\n \n             @Override\n@@ -251,4 +241,4 @@ public abstract class PathExpanders\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}