{
    "project_name": "junkdog-artemis-odb",
    "error_id": "98",
    "information": {
        "errors": [
            {
                "line": "37",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 110).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t\t\t: null;\n\n\t\tif (world.isAlwaysDelayComponentRemoval() || isAnnotationPresent(type, DelayedComponentRemoval.class))\n\t\t\tpurgatory = new DelayedComponentRemover<>(components, pool, world.batchProcessor);\n\t\telse\n\t\t\tpurgatory = new ImmediateComponentRemover<>(components, pool);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/98/ComponentMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/98/ComponentMapper.java\nindex ed417e95b82..a6adace7b4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/98/ComponentMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/98/ComponentMapper.java\n@@ -7,7 +7,7 @@ import static com.artemis.utils.reflect.ClassReflection.isAnnotationPresent;\n \n /**\n  * Provide high performance component access and mutation from within a System.\n- *\n+ * <p>\n  * This is the recommended way to mutate composition and access components.\n  * Component Mappers are as fast as Transmuters.\n  *\n@@ -16,123 +16,128 @@ import static com.artemis.utils.reflect.ClassReflection.isAnnotationPresent;\n  */\n public class ComponentMapper<A extends Component> extends BaseComponentMapper<A> {\n \n-\t/** Holds all components of given type in the world. */\n-\tfinal Bag<A> components;\n-\n-\tprivate final EntityTransmuter createTransmuter;\n-\tprivate final EntityTransmuter removeTransmuter;\n-\tprivate final ComponentPool pool;\n-\tprivate final ComponentRemover<A> purgatory;\n-\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic ComponentMapper(Class<A> type, World world) {\n-\t\tsuper(world.getComponentManager().typeFactory.getTypeFor(type));\n-\t\tcomponents = new Bag<>(type);\n-\n-\t\tpool = (this.type.isPooled)\n-\t\t\t? new ComponentPool(type)\n-\t\t\t: null;\n-\n-\t\tif (world.isAlwaysDelayComponentRemoval() || isAnnotationPresent(type, DelayedComponentRemoval.class))\n-\t\t\tpurgatory = new DelayedComponentRemover<>(components, pool, world.batchProcessor);\n-\t\telse\n-\t\t\tpurgatory = new ImmediateComponentRemover<>(components, pool);\n-\n-\t\tcreateTransmuter = new EntityTransmuterFactory(world).add(type).build();\n-\t\tremoveTransmuter = new EntityTransmuterFactory(world).remove(type).build();\n-\t}\n-\n-\t/**\n-\t * Fast but unsafe retrieval of a component for this entity.\n-\t *\n-\t * This method trades performance for safety.\n-\t *\n-\t * User is expected to avoid calling this method on recently (in same system) removed components\n-\t * or invalid entity ids. Might return null, throw {@link ArrayIndexOutOfBoundsException}\n-\t * or a partially recycled component if called on in-system removed components.\n-\t *\n-\t * Only exception are components marked with {@link DelayedComponentRemoval}, when calling\n-\t * this method from within a subscription listener.\n-\t *\n-\t * @param entityId the entity that should possess the component\n-\t * @return the instance of the component.\n-\t * @throws ArrayIndexOutOfBoundsException\n-\t */\n-\t@Override\n-\tpublic A get(int entityId) throws ArrayIndexOutOfBoundsException {\n-\t\treturn components.get(entityId);\n-\t}\n-\n-\t/**\n-\t * Checks if the entity has this type of component.\n-\t *\n-\t * @param entityId the id of entity to check\n-\t * @return true if the entity has this component type, false if it doesn't\n-\t */\n-\t@Override\n-\tpublic boolean has(int entityId) {\n-\t\treturn get(entityId) != null && !purgatory.has(entityId);\n-\t}\n-\n-\n-\t/**\n-\t * Remove component from entity.\n-\t * Does nothing if already removed.\n-\t *\n-\t * @param entityId\n-\t */\n-\t@Override\n-\tpublic void remove(int entityId) {\n-\t\tA component = get(entityId);\n-\t\tif (component != null) {\n-\t\t\tremoveTransmuter.transmuteNoOperation(entityId);\n-\t\t\tpurgatory.mark(entityId);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tprotected void internalRemove(int entityId) { // triggers no composition id update\n-\t\tA component = get(entityId);\n-\t\tif (component != null)\n-\t\t\tpurgatory.mark(entityId);\n-\t}\n-\n-\t/**\n-\t * Create component for this entity.\n-\t * Avoids creation if component exists.\n-\t *\n-\t * @param entityId the entity that should possess the component\n-\t * @return the instance of the component.\n-\t */\n-\t@Override\n-\tpublic A create(int entityId) {\n-\t\tA component = get(entityId);\n-\t\tif (component == null || purgatory.unmark(entityId)) {\n-\t\t\t// running transmuter first, as it performs som validation\n-\t\t\tcreateTransmuter.transmuteNoOperation(entityId);\n-\t\t\tcomponent = createNew();\n-\t\t\tcomponents.unsafeSet(entityId, component);\n-\t\t}\n-\n-\t\treturn component;\n-\t}\n-\n-\t@Override\n-\tpublic A internalCreate(int entityId) {\n-\t\tA component = get(entityId);\n-\t\tif (component == null || purgatory.unmark(entityId)) {\n-\t\t\tcomponent = createNew();\n-\t\t\tcomponents.unsafeSet(entityId, component);\n-\t\t}\n-\n-\t\treturn component;\n-\t}\n-\n-\tprivate A createNew() {\n-\t\treturn (A) ((pool != null)\n-\t\t\t? pool.obtain()\n-\t\t\t: ComponentManager.newInstance(type.getType()));\n-\t}\n+    /**\n+     * Holds all components of given type in the world.\n+     */\n+    final Bag<A> components;\n+\n+    private final EntityTransmuter createTransmuter;\n+    private final EntityTransmuter removeTransmuter;\n+    private final ComponentPool pool;\n+    private final ComponentRemover<A> purgatory;\n+\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public ComponentMapper(Class<A> type, World world) {\n+        super(world.getComponentManager().typeFactory.getTypeFor(type));\n+        components = new Bag<>(type);\n+\n+        pool = (this.type.isPooled)\n+                ? new ComponentPool(type)\n+                : null;\n+\n+        if (world.isAlwaysDelayComponentRemoval() ||\n+                isAnnotationPresent(type, DelayedComponentRemoval.class)) {\n+            purgatory = new DelayedComponentRemover<>(components, pool, world.batchProcessor);\n+        } else {\n+            purgatory = new ImmediateComponentRemover<>(components, pool);\n+        }\n+\n+        createTransmuter = new EntityTransmuterFactory(world).add(type).build();\n+        removeTransmuter = new EntityTransmuterFactory(world).remove(type).build();\n+    }\n+\n+    /**\n+     * Fast but unsafe retrieval of a component for this entity.\n+     * <p>\n+     * This method trades performance for safety.\n+     * <p>\n+     * User is expected to avoid calling this method on recently (in same system) removed components\n+     * or invalid entity ids. Might return null, throw {@link ArrayIndexOutOfBoundsException}\n+     * or a partially recycled component if called on in-system removed components.\n+     * <p>\n+     * Only exception are components marked with {@link DelayedComponentRemoval}, when calling\n+     * this method from within a subscription listener.\n+     *\n+     * @param entityId the entity that should possess the component\n+     * @return the instance of the component.\n+     * @throws ArrayIndexOutOfBoundsException\n+     */\n+    @Override\n+    public A get(int entityId) throws ArrayIndexOutOfBoundsException {\n+        return components.get(entityId);\n+    }\n+\n+    /**\n+     * Checks if the entity has this type of component.\n+     *\n+     * @param entityId the id of entity to check\n+     * @return true if the entity has this component type, false if it doesn't\n+     */\n+    @Override\n+    public boolean has(int entityId) {\n+        return get(entityId) != null && !purgatory.has(entityId);\n+    }\n+\n+\n+    /**\n+     * Remove component from entity.\n+     * Does nothing if already removed.\n+     *\n+     * @param entityId\n+     */\n+    @Override\n+    public void remove(int entityId) {\n+        A component = get(entityId);\n+        if (component != null) {\n+            removeTransmuter.transmuteNoOperation(entityId);\n+            purgatory.mark(entityId);\n+        }\n+    }\n+\n+    @Override\n+    protected void internalRemove(int entityId) { // triggers no composition id update\n+        A component = get(entityId);\n+        if (component != null) {\n+            purgatory.mark(entityId);\n+        }\n+    }\n+\n+    /**\n+     * Create component for this entity.\n+     * Avoids creation if component exists.\n+     *\n+     * @param entityId the entity that should possess the component\n+     * @return the instance of the component.\n+     */\n+    @Override\n+    public A create(int entityId) {\n+        A component = get(entityId);\n+        if (component == null || purgatory.unmark(entityId)) {\n+            // running transmuter first, as it performs som validation\n+            createTransmuter.transmuteNoOperation(entityId);\n+            component = createNew();\n+            components.unsafeSet(entityId, component);\n+        }\n+\n+        return component;\n+    }\n+\n+    @Override\n+    public A internalCreate(int entityId) {\n+        A component = get(entityId);\n+        if (component == null || purgatory.unmark(entityId)) {\n+            component = createNew();\n+            components.unsafeSet(entityId, component);\n+        }\n+\n+        return component;\n+    }\n+\n+    private A createNew() {\n+        return (A) ((pool != null)\n+                ? pool.obtain()\n+                : ComponentManager.newInstance(type.getType()));\n+    }\n \n }\n",
            "diff_size": 124
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/98/ComponentMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/98/ComponentMapper.java\nindex ed417e95b82..06f022ec64e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/98/ComponentMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/98/ComponentMapper.java\n@@ -135,4 +135,4 @@ public class ComponentMapper<A extends Component> extends BaseComponentMapper<A>\n \t\t\t: ComponentManager.newInstance(type.getType()));\n \t}\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/98/ComponentMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/98/ComponentMapper.java\nindex ed417e95b82..63ff790206a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/98/ComponentMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/98/ComponentMapper.java\n@@ -14,125 +14,132 @@ import static com.artemis.utils.reflect.ClassReflection.isAnnotationPresent;\n  * @param <A> Component type to map.\n  * @see EntityEdit for a list of alternate ways to alter composition and access components.\n  */\n+\n+\n+\n public class ComponentMapper<A extends Component> extends BaseComponentMapper<A> {\n \n-\t/** Holds all components of given type in the world. */\n-\tfinal Bag<A> components;\n-\n-\tprivate final EntityTransmuter createTransmuter;\n-\tprivate final EntityTransmuter removeTransmuter;\n-\tprivate final ComponentPool pool;\n-\tprivate final ComponentRemover<A> purgatory;\n-\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic ComponentMapper(Class<A> type, World world) {\n-\t\tsuper(world.getComponentManager().typeFactory.getTypeFor(type));\n-\t\tcomponents = new Bag<>(type);\n-\n-\t\tpool = (this.type.isPooled)\n-\t\t\t? new ComponentPool(type)\n-\t\t\t: null;\n-\n-\t\tif (world.isAlwaysDelayComponentRemoval() || isAnnotationPresent(type, DelayedComponentRemoval.class))\n-\t\t\tpurgatory = new DelayedComponentRemover<>(components, pool, world.batchProcessor);\n-\t\telse\n-\t\t\tpurgatory = new ImmediateComponentRemover<>(components, pool);\n-\n-\t\tcreateTransmuter = new EntityTransmuterFactory(world).add(type).build();\n-\t\tremoveTransmuter = new EntityTransmuterFactory(world).remove(type).build();\n-\t}\n-\n-\t/**\n-\t * Fast but unsafe retrieval of a component for this entity.\n-\t *\n-\t * This method trades performance for safety.\n-\t *\n-\t * User is expected to avoid calling this method on recently (in same system) removed components\n-\t * or invalid entity ids. Might return null, throw {@link ArrayIndexOutOfBoundsException}\n-\t * or a partially recycled component if called on in-system removed components.\n-\t *\n-\t * Only exception are components marked with {@link DelayedComponentRemoval}, when calling\n-\t * this method from within a subscription listener.\n-\t *\n-\t * @param entityId the entity that should possess the component\n-\t * @return the instance of the component.\n-\t * @throws ArrayIndexOutOfBoundsException\n-\t */\n-\t@Override\n-\tpublic A get(int entityId) throws ArrayIndexOutOfBoundsException {\n-\t\treturn components.get(entityId);\n-\t}\n-\n-\t/**\n-\t * Checks if the entity has this type of component.\n-\t *\n-\t * @param entityId the id of entity to check\n-\t * @return true if the entity has this component type, false if it doesn't\n-\t */\n-\t@Override\n-\tpublic boolean has(int entityId) {\n-\t\treturn get(entityId) != null && !purgatory.has(entityId);\n-\t}\n-\n-\n-\t/**\n-\t * Remove component from entity.\n-\t * Does nothing if already removed.\n-\t *\n-\t * @param entityId\n-\t */\n-\t@Override\n-\tpublic void remove(int entityId) {\n-\t\tA component = get(entityId);\n-\t\tif (component != null) {\n-\t\t\tremoveTransmuter.transmuteNoOperation(entityId);\n-\t\t\tpurgatory.mark(entityId);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tprotected void internalRemove(int entityId) { // triggers no composition id update\n-\t\tA component = get(entityId);\n-\t\tif (component != null)\n-\t\t\tpurgatory.mark(entityId);\n-\t}\n-\n-\t/**\n-\t * Create component for this entity.\n-\t * Avoids creation if component exists.\n-\t *\n-\t * @param entityId the entity that should possess the component\n-\t * @return the instance of the component.\n-\t */\n-\t@Override\n-\tpublic A create(int entityId) {\n-\t\tA component = get(entityId);\n-\t\tif (component == null || purgatory.unmark(entityId)) {\n-\t\t\t// running transmuter first, as it performs som validation\n-\t\t\tcreateTransmuter.transmuteNoOperation(entityId);\n-\t\t\tcomponent = createNew();\n-\t\t\tcomponents.unsafeSet(entityId, component);\n-\t\t}\n-\n-\t\treturn component;\n-\t}\n-\n-\t@Override\n-\tpublic A internalCreate(int entityId) {\n-\t\tA component = get(entityId);\n-\t\tif (component == null || purgatory.unmark(entityId)) {\n-\t\t\tcomponent = createNew();\n-\t\t\tcomponents.unsafeSet(entityId, component);\n-\t\t}\n-\n-\t\treturn component;\n-\t}\n-\n-\tprivate A createNew() {\n-\t\treturn (A) ((pool != null)\n-\t\t\t? pool.obtain()\n-\t\t\t: ComponentManager.newInstance(type.getType()));\n-\t}\n-\n-}\n+ /** Holds all components of given type in the world. */\n+ final Bag<A> components;\n+\n+ private final EntityTransmuter createTransmuter;\n+\n+ private final EntityTransmuter removeTransmuter;\n+\n+ private final ComponentPool pool;\n+\n+ private final ComponentRemover<A> purgatory;\n+\n+ @SuppressWarnings(\"unchecked\")\n+ public ComponentMapper(Class<A> type, World world) {\n+  super(world.getComponentManager().typeFactory.getTypeFor(type));\n+  components = new Bag< >(type);\n+  pool = (this.type.isPooled)\n+   ? new ComponentPool(type)\n+   : null;\n+  if (world.isAlwaysDelayComponentRemoval() || isAnnotationPresent(type, DelayedComponentRemoval.class))\n+   purgatory = new DelayedComponentRemover< >(components, pool, world.batchProcessor);\n+  else\n+   purgatory = new ImmediateComponentRemover< >(components, pool);\n+  createTransmuter = new EntityTransmuterFactory(world).add(type)\n+                                                       .build();\n+  removeTransmuter = new EntityTransmuterFactory(world).remove(type)\n+                                                       .build();\n+ }\n+\n+ /**\n+  * Fast but unsafe retrieval of a component for this entity.\n+  *\n+  * This method trades performance for safety.\n+  *\n+  * User is expected to avoid calling this method on recently (in same system) removed components\n+  * or invalid entity ids. Might return null, throw {@link ArrayIndexOutOfBoundsException}\n+  * or a partially recycled component if called on in-system removed components.\n+  *\n+  * Only exception are components marked with {@link DelayedComponentRemoval}, when calling\n+  * this method from within a subscription listener.\n+  *\n+  * @param entityId the entity that should possess the component\n+  * @return the instance of the component.\n+  * @throws ArrayIndexOutOfBoundsException\n+  */\n+\n+ @Override\n+ public A get(int entityId) throws ArrayIndexOutOfBoundsException {\n+  return components.get(entityId);\n+ }\n+\n+ /**\n+  * Checks if the entity has this type of component.\n+  *\n+  * @param entityId the id of entity to check\n+  * @return true if the entity has this component type, false if it doesn't\n+  */\n+\n+ @Override\n+ public boolean has(int entityId) {\n+  return get(entityId) != null && !purgatory.has(entityId);\n+ }\n+\n+\n+ /**\n+  * Remove component from entity.\n+  * Does nothing if already removed.\n+  *\n+  * @param entityId\n+  */\n+\n+ @Override\n+ public void remove(int entityId) {\n+  A component = get(entityId);\n+  if (component != null) {\n+   removeTransmuter.transmuteNoOperation(entityId);\n+   purgatory.mark(entityId);\n+  }\n+ }\n+\n+ @Override\n+ protected void internalRemove(int entityId) { // triggers no composition id update\n+  A component = get(entityId);\n+  if (component != null)\n+   purgatory.mark(entityId);\n+ }\n+\n+ /**\n+  * Create component for this entity.\n+  * Avoids creation if component exists.\n+  *\n+  * @param entityId the entity that should possess the component\n+  * @return the instance of the component.\n+  */\n+\n+ @Override\n+ public A create(int entityId) {\n+  A component = get(entityId);\n+  if (component == null || purgatory.unmark(entityId)) {\n+   // running transmuter first, as it performs som validation\n+   createTransmuter.transmuteNoOperation(entityId);\n+   component = createNew();\n+   components.unsafeSet(entityId, component);\n+  }\n+\n+  return component;\n+ }\n+\n+ @Override\n+ public A internalCreate(int entityId) {\n+  A component = get(entityId);\n+  if (component == null || purgatory.unmark(entityId)) {\n+   component = createNew();\n+   components.unsafeSet(entityId, component);\n+  }\n+\n+  return component;\n+ }\n+\n+ private A createNew() {\n+  return (A) ((pool != null)\n+              ? pool.obtain()\n+              : ComponentManager.newInstance(type.getType()));\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 127
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/98/ComponentMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_three_grams/98/ComponentMapper.java\nindex ed417e95b82..3e9c761b690 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/98/ComponentMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_three_grams/98/ComponentMapper.java\n@@ -33,9 +33,8 @@ public class ComponentMapper<A extends Component> extends BaseComponentMapper<A>\n \t\tpool = (this.type.isPooled)\n \t\t\t? new ComponentPool(type)\n \t\t\t: null;\n-\n-\t\tif (world.isAlwaysDelayComponentRemoval() || isAnnotationPresent(type, DelayedComponentRemoval.class))\n-\t\t\tpurgatory = new DelayedComponentRemover<>(components, pool, world.batchProcessor);\n+\t\t\tif ( world . isAlwaysDelayComponentRemoval()||isAnnotationPresent(type,DelayedComponentRemoval.class\n+\t\t\t))purgatory= new DelayedComponentRemover<>(components, pool, world.batchProcessor);\n \t\telse\n \t\t\tpurgatory = new ImmediateComponentRemover<>(components, pool);\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}