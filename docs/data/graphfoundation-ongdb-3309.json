{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3309",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3309/TypeReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3309/TypeReference.java\nindex db91bb24ef9..05f16066566 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3309/TypeReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3309/TypeReference.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.lang.reflect.Modifier;\n@@ -30,348 +31,346 @@ import static java.util.Collections.unmodifiableList;\n \n public class TypeReference\n {\n-    public static Bound extending( Class<?> type )\n+  public static Bound extending(Class<?> type)\n+  {\n+    return extending(typeReference(type));\n+  }\n+\n+  public static Bound extending(final TypeReference type)\n+  {\n+    return new Bound(type)\n     {\n-        return extending( typeReference( type ) );\n-    }\n-\n-    public static Bound extending( final TypeReference type )\n+      @Override\n+      public TypeReference extendsBound()\n+      {\n+        return type;\n+      }\n+\n+      @Override\n+      public TypeReference superBound()\n+      {\n+        return null;\n+      }\n+    };\n+  }\n+\n+  public static TypeReference typeReference(Class<?> type)\n+  {\n+    if (type == void.class)\n     {\n-        return new Bound( type )\n-        {\n-            @Override\n-            public TypeReference extendsBound()\n-            {\n-                return type;\n-            }\n-\n-            @Override\n-            public TypeReference superBound()\n-            {\n-                return null;\n-            }\n-        };\n+      return VOID;\n     }\n-\n-    public static TypeReference typeReference( Class<?> type )\n+    if (type == Object.class)\n     {\n-        if ( type == void.class )\n-        {\n-            return VOID;\n-        }\n-        if ( type == Object.class )\n-        {\n-            return OBJECT;\n-        }\n-        String packageName = \"\";\n-        String name;\n-        String declaringClassName = \"\";\n-\n-        Class<?> innerType = type.isArray() ? type.getComponentType() : type;\n-\n-        if ( innerType.isPrimitive() )\n-        {\n-            name = innerType.getName();\n-            switch ( name )\n-            {\n-            case \"boolean\":\n-                return type.isArray() ? BOOLEAN_ARRAY : BOOLEAN;\n-            case \"int\":\n-                return type.isArray() ? INT_ARRAY : INT;\n-            case \"long\":\n-                return type.isArray() ? LONG_ARRAY : LONG;\n-            case \"double\":\n-                return type.isArray() ? DOUBLE_ARRAY : DOUBLE;\n-            default:\n-                // continue through the normal path\n-            }\n-        }\n-        else\n-        {\n-            packageName = innerType.getPackage().getName();\n-            String canonicalName = innerType.getCanonicalName();\n-            Class<?> declaringClass = innerType.getDeclaringClass();\n-            if ( declaringClass != null )\n-            {\n-                declaringClassName = declaringClass.getSimpleName();\n-                name = canonicalName.substring( packageName.length() + declaringClassName.length() + 2 );\n-            }\n-            else\n-            {\n-                name = canonicalName.substring( packageName.length() + 1 );\n-            }\n-        }\n-        return new TypeReference( packageName, name, type.isPrimitive(), type.isArray(), false,\n-                declaringClassName, type.getModifiers() );\n+      return OBJECT;\n     }\n+    String packageName = \"\";\n+    String name;\n+    String declaringClassName = \"\";\n \n-    public static TypeReference typeParameter( String name )\n-    {\n-        return new TypeReference( \"\", name, false, false, true, \"\", Modifier.PUBLIC );\n-    }\n+    Class<?> innerType = type.isArray() ? type.getComponentType() : type;\n \n-    public static TypeReference arrayOf( TypeReference type )\n+    if (innerType.isPrimitive())\n     {\n-        return new TypeReference( type.packageName, type.name, false, true, false, type.declaringClassName, type.modifiers );\n-    }\n-\n-    public static TypeReference parameterizedType( Class<?> base, Class<?>... parameters )\n-    {\n-        return parameterizedType( typeReference( base ), typeReferences( parameters ) );\n-    }\n-\n-    public static TypeReference parameterizedType( Class<?> base, TypeReference... parameters )\n+      name = innerType.getName();\n+      switch (name)\n+      {\n+        case \"boolean\":\n+          return type.isArray() ? BOOLEAN_ARRAY : BOOLEAN;\n+        case \"int\":\n+          return type.isArray() ? INT_ARRAY : INT;\n+        case \"long\":\n+          return type.isArray() ? LONG_ARRAY : LONG;\n+        case \"double\":\n+          return type.isArray() ? DOUBLE_ARRAY : DOUBLE;\n+        default:\n+          // continue through the normal path\n+      }\n+    } else\n     {\n-        return parameterizedType( typeReference( base ), parameters );\n+      packageName = innerType.getPackage().getName();\n+      String canonicalName = innerType.getCanonicalName();\n+      Class<?> declaringClass = innerType.getDeclaringClass();\n+      if (declaringClass != null)\n+      {\n+        declaringClassName = declaringClass.getSimpleName();\n+        name = canonicalName.substring(packageName.length() + declaringClassName.length() + 2);\n+      } else\n+      {\n+        name = canonicalName.substring(packageName.length() + 1);\n+      }\n     }\n-\n-    public static TypeReference parameterizedType( TypeReference base, TypeReference... parameters )\n-    {\n-        return new TypeReference( base.packageName, base.name, false, base.isArray(), false,\n-                base.declaringClassName,\n-                base.modifiers, parameters );\n-    }\n-\n-    public static TypeReference[] typeReferences( Class<?> first, Class<?>[] more )\n-    {\n-        TypeReference[] result = new TypeReference[more.length + 1];\n-        result[0] = typeReference( first );\n-        for ( int i = 0; i < more.length; i++ )\n-        {\n-            result[i + 1] = typeReference( more[i] );\n-        }\n-        return result;\n-    }\n-\n-    public static TypeReference[] typeReferences( Class<?>[] types )\n-    {\n-        TypeReference[] result = new TypeReference[types.length];\n-        for ( int i = 0; i < result.length; i++ )\n-        {\n-            result[i] = typeReference( types[i] );\n-        }\n-        return result;\n-    }\n-\n-    private final String packageName;\n-    private final String name;\n-    private final TypeReference[] parameters;\n-    private final boolean isPrimitive;\n-    private final boolean isArray;\n-    private final boolean isTypeParameter;\n-    private final String declaringClassName;\n-    private final int modifiers;\n-\n-    public static final TypeReference VOID =\n-            new TypeReference( \"\", \"void\", true, false, false, \"\", void.class.getModifiers() );\n-    public static final TypeReference OBJECT =\n-            new TypeReference( \"java.lang\", \"Object\", false, false, false, \"\", Object.class.getModifiers() );\n-    public static final TypeReference BOOLEAN =\n-            new TypeReference( \"\", \"boolean\", true, false, false, \"\", boolean.class.getModifiers() );\n-    public static final TypeReference INT =\n-            new TypeReference( \"\", \"int\", true, false, false, \"\", int.class.getModifiers() );\n-    public static final TypeReference LONG =\n-            new TypeReference( \"\", \"long\", true, false, false, \"\", long.class.getModifiers() );\n-    public static final TypeReference DOUBLE =\n-            new TypeReference( \"\", \"double\", true, false, false, \"\", double.class.getModifiers() );\n-    public static final TypeReference BOOLEAN_ARRAY =\n-            new TypeReference( \"\", \"boolean\", false, true, false, \"\", boolean.class.getModifiers() );\n-    public static final TypeReference INT_ARRAY =\n-            new TypeReference( \"\", \"int\", false, true, false, \"\", int.class.getModifiers() );\n-    public static final TypeReference LONG_ARRAY =\n-            new TypeReference( \"\", \"long\", false, true, false, \"\", long.class.getModifiers() );\n-    public static final TypeReference DOUBLE_ARRAY =\n-            new TypeReference( \"\", \"double\", false, true, false, \"\", double.class.getModifiers() );\n-    public static final TypeReference VALUE =\n-            new TypeReference( \"org.neo4j.values\", \"AnyValue\", false, false, false, \"\", AnyValue.class.getModifiers() );\n-    static final TypeReference[] NO_TYPES = new TypeReference[0];\n-\n-    TypeReference( String packageName, String name, boolean isPrimitive, boolean isArray,\n-            boolean isTypeParameter, String declaringClassName, int modifiers, TypeReference... parameters )\n+    return new TypeReference(packageName, name, type.isPrimitive(), type.isArray(), false,\n+        declaringClassName, type.getModifiers());\n+  }\n+\n+  public static TypeReference typeParameter(String name)\n+  {\n+    return new TypeReference(\"\", name, false, false, true, \"\", Modifier.PUBLIC);\n+  }\n+\n+  public static TypeReference arrayOf(TypeReference type)\n+  {\n+    return new TypeReference(type.packageName, type.name, false, true, false, type.declaringClassName, type.modifiers);\n+  }\n+\n+  public static TypeReference parameterizedType(Class<?> base, Class<?>... parameters)\n+  {\n+    return parameterizedType(typeReference(base), typeReferences(parameters));\n+  }\n+\n+  public static TypeReference parameterizedType(Class<?> base, TypeReference... parameters)\n+  {\n+    return parameterizedType(typeReference(base), parameters);\n+  }\n+\n+  public static TypeReference parameterizedType(TypeReference base, TypeReference... parameters)\n+  {\n+    return new TypeReference(base.packageName, base.name, false, base.isArray(), false,\n+        base.declaringClassName,\n+        base.modifiers, parameters);\n+  }\n+\n+  public static TypeReference[] typeReferences(Class<?> first, Class<?>[] more)\n+  {\n+    TypeReference[] result = new TypeReference[more.length + 1];\n+    result[0] = typeReference(first);\n+    for (int i = 0; i < more.length; i++)\n     {\n-        this.packageName = packageName;\n-        this.name = name;\n-        this.isPrimitive = isPrimitive;\n-        this.isArray = isArray;\n-        this.isTypeParameter = isTypeParameter;\n-        this.declaringClassName = declaringClassName;\n-        this.modifiers = modifiers;\n-        this.parameters = parameters;\n+      result[i + 1] = typeReference(more[i]);\n     }\n+    return result;\n+  }\n \n-    public String packageName()\n+  public static TypeReference[] typeReferences(Class<?>[] types)\n+  {\n+    TypeReference[] result = new TypeReference[types.length];\n+    for (int i = 0; i < result.length; i++)\n     {\n-        return packageName;\n+      result[i] = typeReference(types[i]);\n     }\n-\n-    public String name()\n+    return result;\n+  }\n+\n+  private final String packageName;\n+  private final String name;\n+  private final TypeReference[] parameters;\n+  private final boolean isPrimitive;\n+  private final boolean isArray;\n+  private final boolean isTypeParameter;\n+  private final String declaringClassName;\n+  private final int modifiers;\n+\n+  public static final TypeReference VOID =\n+      new TypeReference(\"\", \"void\", true, false, false, \"\", void.class.getModifiers());\n+  public static final TypeReference OBJECT =\n+      new TypeReference(\"java.lang\", \"Object\", false, false, false, \"\", Object.class.getModifiers());\n+  public static final TypeReference BOOLEAN =\n+      new TypeReference(\"\", \"boolean\", true, false, false, \"\", boolean.class.getModifiers());\n+  public static final TypeReference INT =\n+      new TypeReference(\"\", \"int\", true, false, false, \"\", int.class.getModifiers());\n+  public static final TypeReference LONG =\n+      new TypeReference(\"\", \"long\", true, false, false, \"\", long.class.getModifiers());\n+  public static final TypeReference DOUBLE =\n+      new TypeReference(\"\", \"double\", true, false, false, \"\", double.class.getModifiers());\n+  public static final TypeReference BOOLEAN_ARRAY =\n+      new TypeReference(\"\", \"boolean\", false, true, false, \"\", boolean.class.getModifiers());\n+  public static final TypeReference INT_ARRAY =\n+      new TypeReference(\"\", \"int\", false, true, false, \"\", int.class.getModifiers());\n+  public static final TypeReference LONG_ARRAY =\n+      new TypeReference(\"\", \"long\", false, true, false, \"\", long.class.getModifiers());\n+  public static final TypeReference DOUBLE_ARRAY =\n+      new TypeReference(\"\", \"double\", false, true, false, \"\", double.class.getModifiers());\n+  public static final TypeReference VALUE =\n+      new TypeReference(\"org.neo4j.values\", \"AnyValue\", false, false, false, \"\", AnyValue.class.getModifiers());\n+  static final TypeReference[] NO_TYPES = new TypeReference[0];\n+\n+  TypeReference(String packageName, String name, boolean isPrimitive, boolean isArray,\n+                boolean isTypeParameter, String declaringClassName, int modifiers, TypeReference... parameters)\n+  {\n+    this.packageName = packageName;\n+    this.name = name;\n+    this.isPrimitive = isPrimitive;\n+    this.isArray = isArray;\n+    this.isTypeParameter = isTypeParameter;\n+    this.declaringClassName = declaringClassName;\n+    this.modifiers = modifiers;\n+    this.parameters = parameters;\n+  }\n+\n+  public String packageName()\n+  {\n+    return packageName;\n+  }\n+\n+  public String name()\n+  {\n+    return name;\n+  }\n+\n+  public String simpleName()\n+  {\n+    return isArray ? name + \"[]\" : name;\n+  }\n+\n+  public boolean isPrimitive()\n+  {\n+    return isPrimitive;\n+  }\n+\n+  public boolean isTypeParameter()\n+  {\n+    return isTypeParameter;\n+  }\n+\n+  public boolean isGeneric()\n+  {\n+    return parameters == null || parameters.length > 0;\n+  }\n+\n+  public List<TypeReference> parameters()\n+  {\n+    return unmodifiableList(asList(parameters));\n+  }\n+\n+  public String fullName()\n+  {\n+    return writeTo(new StringBuilder()).toString();\n+  }\n+\n+  public boolean isArray()\n+  {\n+    return isArray;\n+  }\n+\n+  public boolean isVoid()\n+  {\n+    return this == VOID;\n+  }\n+\n+  public boolean isInnerClass()\n+  {\n+    return !declaringClassName.isEmpty();\n+  }\n+\n+  public String declaringClassName()\n+  {\n+    return declaringClassName;\n+  }\n+\n+  public int modifiers()\n+  {\n+    return modifiers;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return name;\n+      return true;\n     }\n-\n-    public String simpleName()\n+    if (o == null || getClass() != o.getClass())\n     {\n-        return isArray ? name + \"[]\" : name;\n+      return false;\n     }\n \n-    public boolean isPrimitive()\n-    {\n-        return isPrimitive;\n-    }\n+    TypeReference reference = (TypeReference) o;\n \n-    public boolean isTypeParameter()\n+    if (isPrimitive != reference.isPrimitive)\n     {\n-        return isTypeParameter;\n+      return false;\n     }\n-\n-    public boolean isGeneric()\n+    if (isArray != reference.isArray)\n     {\n-        return parameters == null || parameters.length > 0;\n+      return false;\n     }\n-\n-    public List<TypeReference> parameters()\n+    if (isTypeParameter != reference.isTypeParameter)\n     {\n-        return unmodifiableList( asList( parameters ) );\n+      return false;\n     }\n-\n-    public String fullName()\n+    if (modifiers != reference.modifiers)\n     {\n-        return writeTo( new StringBuilder() ).toString();\n+      return false;\n     }\n-\n-    public boolean isArray()\n+    if (packageName != null ? !packageName.equals(reference.packageName) : reference.packageName != null)\n     {\n-        return isArray;\n+      return false;\n     }\n-\n-    public boolean isVoid()\n+    if (name != null ? !name.equals(reference.name) : reference.name != null)\n     {\n-        return this == VOID;\n+      return false;\n     }\n-\n-    public boolean isInnerClass()\n+    // Probably incorrect - comparing Object[] arrays with Arrays.equals\n+    if (!Arrays.equals(parameters, reference.parameters))\n     {\n-        return !declaringClassName.isEmpty();\n+      return false;\n     }\n-\n-    public String declaringClassName()\n+    return declaringClassName != null ? declaringClassName.equals(reference.declaringClassName)\n+        : reference.declaringClassName == null;\n+\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = packageName != null ? packageName.hashCode() : 0;\n+    result = 31 * result + (name != null ? name.hashCode() : 0);\n+    result = 31 * result + Arrays.hashCode(parameters);\n+    result = 31 * result + (isPrimitive ? 1 : 0);\n+    result = 31 * result + (isArray ? 1 : 0);\n+    result = 31 * result + (isTypeParameter ? 1 : 0);\n+    result = 31 * result + (declaringClassName != null ? declaringClassName.hashCode() : 0);\n+    result = 31 * result + modifiers;\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return writeTo(new StringBuilder().append(\"TypeReference[\")).append(']').toString();\n+  }\n+\n+  StringBuilder writeTo(StringBuilder result)\n+  {\n+    if (!packageName.isEmpty())\n     {\n-        return declaringClassName;\n+      result.append(packageName).append('.');\n     }\n-\n-    public int modifiers()\n+    if (!declaringClassName.isEmpty())\n     {\n-        return modifiers;\n+      result.append(declaringClassName).append('.');\n     }\n-\n-    @Override\n-    public boolean equals( Object o )\n+    result.append(name);\n+    if (isArray)\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        TypeReference reference = (TypeReference) o;\n-\n-        if ( isPrimitive != reference.isPrimitive )\n-        {\n-            return false;\n-        }\n-        if ( isArray != reference.isArray )\n-        {\n-            return false;\n-        }\n-        if ( isTypeParameter != reference.isTypeParameter )\n-        {\n-            return false;\n-        }\n-        if ( modifiers != reference.modifiers )\n-        {\n-            return false;\n-        }\n-        if ( packageName != null ? !packageName.equals( reference.packageName ) : reference.packageName != null )\n-        {\n-            return false;\n-        }\n-        if ( name != null ? !name.equals( reference.name ) : reference.name != null )\n-        {\n-            return false;\n-        }\n-        // Probably incorrect - comparing Object[] arrays with Arrays.equals\n-        if ( !Arrays.equals( parameters, reference.parameters ) )\n-        {\n-            return false;\n-        }\n-        return declaringClassName != null ? declaringClassName.equals( reference.declaringClassName )\n-                                          : reference.declaringClassName == null;\n-\n+      result.append(\"[]\");\n     }\n-\n-    @Override\n-    public int hashCode()\n+    if (!(parameters == null || parameters.length == 0))\n     {\n-        int result = packageName != null ? packageName.hashCode() : 0;\n-        result = 31 * result + (name != null ? name.hashCode() : 0);\n-        result = 31 * result + Arrays.hashCode( parameters );\n-        result = 31 * result + (isPrimitive ? 1 : 0);\n-        result = 31 * result + (isArray ? 1 : 0);\n-        result = 31 * result + (isTypeParameter ? 1 : 0);\n-        result = 31 * result + (declaringClassName != null ? declaringClassName.hashCode() : 0);\n-        result = 31 * result + modifiers;\n-        return result;\n+      result.append('<');\n+      String sep = \"\";\n+      for (TypeReference parameter : parameters)\n+      {\n+        parameter.writeTo(result.append(sep));\n+        sep = \",\";\n+      }\n+      result.append('>');\n     }\n+    return result;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return writeTo( new StringBuilder().append( \"TypeReference[\" ) ).append( ']' ).toString();\n-    }\n+  public abstract static class Bound\n+  {\n+    private final TypeReference type;\n \n-    StringBuilder writeTo( StringBuilder result )\n+    private Bound(TypeReference type)\n     {\n-        if ( !packageName.isEmpty() )\n-        {\n-            result.append( packageName ).append( '.' );\n-        }\n-        if ( !declaringClassName.isEmpty() )\n-        {\n-            result.append( declaringClassName ).append( '.' );\n-        }\n-        result.append( name );\n-        if ( isArray )\n-        {\n-            result.append( \"[]\" );\n-        }\n-        if ( !(parameters == null || parameters.length == 0) )\n-        {\n-            result.append( '<' );\n-            String sep = \"\";\n-            for ( TypeReference parameter : parameters )\n-            {\n-                parameter.writeTo( result.append( sep ) );\n-                sep = \",\";\n-            }\n-            result.append( '>' );\n-        }\n-        return result;\n+      this.type = type;\n     }\n \n-    public abstract static class Bound\n-    {\n-        private final TypeReference type;\n-\n-        private Bound( TypeReference type )\n-        {\n-            this.type = type;\n-        }\n+    public abstract TypeReference extendsBound();\n \n-        public abstract TypeReference extendsBound();\n-\n-        public abstract TypeReference superBound();\n-    }\n+    public abstract TypeReference superBound();\n+  }\n }\n",
            "diff_size": 484
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "column": "212",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "231",
                    "column": "55",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3309/TypeReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3309/TypeReference.java\nindex db91bb24ef9..2b47113a459 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3309/TypeReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3309/TypeReference.java\n@@ -59,11 +59,13 @@ public class TypeReference\n         {\n             return VOID;\n         }\n-        if ( type == Object.class )\n+\n+if ( type == Object.class )\n         {\n             return OBJECT;\n         }\n-        String packageName = \"\";\n+\n+String packageName = \"\";\n         String name;\n         String declaringClassName = \"\";\n \n@@ -140,7 +142,8 @@ public class TypeReference\n         {\n             result[i + 1] = typeReference( more[i] );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     public static TypeReference[] typeReferences( Class<?>[] types )\n@@ -150,7 +153,8 @@ public class TypeReference\n         {\n             result[i] = typeReference( types[i] );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     private final String packageName;\n@@ -162,29 +166,27 @@ public class TypeReference\n     private final String declaringClassName;\n     private final int modifiers;\n \n-    public static final TypeReference VOID =\n-            new TypeReference( \"\", \"void\", true, false, false, \"\", void.class.getModifiers() );\n-    public static final TypeReference OBJECT =\n-            new TypeReference( \"java.lang\", \"Object\", false, false, false, \"\", Object.class.getModifiers() );\n-    public static final TypeReference BOOLEAN =\n-            new TypeReference( \"\", \"boolean\", true, false, false, \"\", boolean.class.getModifiers() );\n-    public static final TypeReference INT =\n-            new TypeReference( \"\", \"int\", true, false, false, \"\", int.class.getModifiers() );\n-    public static final TypeReference LONG =\n-            new TypeReference( \"\", \"long\", true, false, false, \"\", long.class.getModifiers() );\n-    public static final TypeReference DOUBLE =\n-            new TypeReference( \"\", \"double\", true, false, false, \"\", double.class.getModifiers() );\n-    public static final TypeReference BOOLEAN_ARRAY =\n-            new TypeReference( \"\", \"boolean\", false, true, false, \"\", boolean.class.getModifiers() );\n-    public static final TypeReference INT_ARRAY =\n-            new TypeReference( \"\", \"int\", false, true, false, \"\", int.class.getModifiers() );\n-    public static final TypeReference LONG_ARRAY =\n-            new TypeReference( \"\", \"long\", false, true, false, \"\", long.class.getModifiers() );\n-    public static final TypeReference DOUBLE_ARRAY =\n-            new TypeReference( \"\", \"double\", false, true, false, \"\", double.class.getModifiers() );\n-    public static final TypeReference VALUE =\n-            new TypeReference( \"org.neo4j.values\", \"AnyValue\", false, false, false, \"\", AnyValue.class.getModifiers() );\n-    static final TypeReference[] NO_TYPES = new TypeReference[0];\n+    public static final TypeReference VOID = new TypeReference( \"\", \"void\", true, false, false, \"\", void.class.getModifiers() );\n+\n+public static final TypeReference OBJECT = new TypeReference( \"java.lang\", \"Object\", false, false, false, \"\", Object.class.getModifiers() );\n+\n+public static final TypeReference BOOLEAN = new TypeReference( \"\", \"boolean\", true, false, false, \"\", boolean.class.getModifiers() );\n+\n+public static final TypeReference INT = new TypeReference( \"\", \"int\", true, false, false, \"\", int.class.getModifiers() );\n+\n+public static final TypeReference LONG = new TypeReference( \"\", \"long\", true, false, false, \"\", long.class.getModifiers() );\n+\n+public static final TypeReference DOUBLE = new TypeReference( \"\", \"double\", true, false, false, \"\", double.class.getModifiers() );\n+\n+public static final TypeReference BOOLEAN_ARRAY = new TypeReference( \"\", \"boolean\", false, true, false, \"\", boolean.class.getModifiers() );\n+\n+public static final TypeReference INT_ARRAY = new TypeReference( \"\", \"int\", false, true, false, \"\", int.class.getModifiers() );\n+\n+public static final TypeReference LONG_ARRAY = new TypeReference( \"\", \"long\", false, true, false, \"\", long.class.getModifiers() );\n+\n+public static final TypeReference DOUBLE_ARRAY = new TypeReference( \"\", \"double\", false, true, false, \"\", double.class.getModifiers() );\n+\n+public static final TypeReference VALUE = new TypeReference( \"org.neo4j.values\", \"AnyValue\", false, false, false, \"\", AnyValue.class.getModifiers() ); static final TypeReference[] NO_TYPES = new TypeReference[0];\n \n     TypeReference( String packageName, String name, boolean isPrimitive, boolean isArray,\n             boolean isTypeParameter, String declaringClassName, int modifiers, TypeReference... parameters )\n@@ -226,7 +228,7 @@ public class TypeReference\n \n     public boolean isGeneric()\n     {\n-        return parameters == null || parameters.length > 0;\n+        return parameters == null || parameters.length> 0;\n     }\n \n     public List<TypeReference> parameters()\n@@ -271,7 +273,8 @@ public class TypeReference\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n@@ -282,23 +285,28 @@ public class TypeReference\n         {\n             return false;\n         }\n-        if ( isArray != reference.isArray )\n+\n+if ( isArray != reference.isArray )\n         {\n             return false;\n         }\n-        if ( isTypeParameter != reference.isTypeParameter )\n+\n+if ( isTypeParameter != reference.isTypeParameter )\n         {\n             return false;\n         }\n-        if ( modifiers != reference.modifiers )\n+\n+if ( modifiers != reference.modifiers )\n         {\n             return false;\n         }\n-        if ( packageName != null ? !packageName.equals( reference.packageName ) : reference.packageName != null )\n+\n+if ( packageName != null ? !packageName.equals( reference.packageName ) : reference.packageName != null )\n         {\n             return false;\n         }\n-        if ( name != null ? !name.equals( reference.name ) : reference.name != null )\n+\n+if ( name != null ? !name.equals( reference.name ) : reference.name != null )\n         {\n             return false;\n         }\n@@ -307,21 +315,20 @@ public class TypeReference\n         {\n             return false;\n         }\n-        return declaringClassName != null ? declaringClassName.equals( reference.declaringClassName )\n-                                          : reference.declaringClassName == null;\n \n+return declaringClassName != null ? declaringClassName.equals( reference.declaringClassName ) : reference.declaringClassName == null;\n     }\n \n     @Override\n     public int hashCode()\n     {\n         int result = packageName != null ? packageName.hashCode() : 0;\n-        result = 31 * result + (name != null ? name.hashCode() : 0);\n+        result = 31 * result + (name != null ? name.hashCode() : 0 );\n         result = 31 * result + Arrays.hashCode( parameters );\n-        result = 31 * result + (isPrimitive ? 1 : 0);\n-        result = 31 * result + (isArray ? 1 : 0);\n-        result = 31 * result + (isTypeParameter ? 1 : 0);\n-        result = 31 * result + (declaringClassName != null ? declaringClassName.hashCode() : 0);\n+        result = 31 * result + ( isPrimitive ? 1 : 0 );\n+        result = 31 * result + ( isArray ? 1 : 0 );\n+        result = 31 * result + ( isTypeParameter ? 1 : 0 );\n+        result = 31 * result + (declaringClassName != null ? declaringClassName.hashCode() : 0 );\n         result = 31 * result + modifiers;\n         return result;\n     }\n@@ -338,7 +345,8 @@ public class TypeReference\n         {\n             result.append( packageName ).append( '.' );\n         }\n-        if ( !declaringClassName.isEmpty() )\n+\n+if ( !declaringClassName.isEmpty() )\n         {\n             result.append( declaringClassName ).append( '.' );\n         }\n@@ -347,7 +355,8 @@ public class TypeReference\n         {\n             result.append( \"[]\" );\n         }\n-        if ( !(parameters == null || parameters.length == 0) )\n+\n+if ( !( parameters == null || parameters.length == 0) )\n         {\n             result.append( '<' );\n             String sep = \"\";\n@@ -358,7 +367,8 @@ public class TypeReference\n             }\n             result.append( '>' );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     public abstract static class Bound\n@@ -374,4 +384,4 @@ public class TypeReference\n \n         public abstract TypeReference superBound();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}