{
    "project_name": "ppati000-visualDFA",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "35",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 160).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        List<Block> blocks = blockGraph.getBlocks();\n\n        BlockState<DummyElement> defaultState = new BlockState<>(new DummyElement(DummyElement.ValueType.TOP), new DummyElement(DummyElement.ValueType.BOTTOM));\n\n        Map<Block, BlockState<DummyElement>> initialMap = new HashMap<>();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/16/DummyInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/16/DummyInitializer.java\nindex cc0b65c9382..68d9a94239a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/16/DummyInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/16/DummyInitializer.java\n@@ -11,36 +11,35 @@ import java.util.Map;\n \n /**\n  * @author Patrick Petrovic\n- *\n- *         A {@code DummyTransition} performs the initialization for a {@code DummyAnalysis}.\n+ * <p>\n+ * A {@code DummyTransition} performs the initialization for a {@code DummyAnalysis}.\n  */\n public class DummyInitializer implements Initializer<DummyElement> {\n \n-    private SimpleBlockGraph blockGraph;\n+  private SimpleBlockGraph blockGraph;\n \n-    /**\n-     * Creates a {@code DummyInitializer} for the given {@code SimpleBlockGraph}.\n-     *\n-     * @param blockGraph\n-     *         the {@code SimpleBlockGraph} the analysis to initialize is executed on\n-     */\n-    public DummyInitializer(SimpleBlockGraph blockGraph) {\n-        this.blockGraph = blockGraph;\n-    }\n-\n-    @Override\n-    public Map<Block, BlockState<DummyElement>> getInitialStates() {\n-        List<Block> blocks = blockGraph.getBlocks();\n+  /**\n+   * Creates a {@code DummyInitializer} for the given {@code SimpleBlockGraph}.\n+   *\n+   * @param blockGraph the {@code SimpleBlockGraph} the analysis to initialize is executed on\n+   */\n+  public DummyInitializer(SimpleBlockGraph blockGraph) {\n+    this.blockGraph = blockGraph;\n+  }\n \n-        BlockState<DummyElement> defaultState = new BlockState<>(new DummyElement(DummyElement.ValueType.TOP), new DummyElement(DummyElement.ValueType.BOTTOM));\n+  @Override\n+  public Map<Block, BlockState<DummyElement>> getInitialStates() {\n+    List<Block> blocks = blockGraph.getBlocks();\n \n-        Map<Block, BlockState<DummyElement>> initialMap = new HashMap<>();\n+    BlockState<DummyElement> defaultState = new BlockState<>(new DummyElement(DummyElement.ValueType.TOP), new DummyElement(DummyElement.ValueType.BOTTOM));\n \n-        for (Block b : blocks) {\n-            initialMap.put(b, defaultState);\n-        }\n+    Map<Block, BlockState<DummyElement>> initialMap = new HashMap<>();\n \n-        return initialMap;\n+    for (Block b : blocks) {\n+      initialMap.put(b, defaultState);\n     }\n \n+    return initialMap;\n+  }\n+\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/16/DummyInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/16/DummyInitializer.java\nindex cc0b65c9382..9a015c8d911 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/16/DummyInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/16/DummyInitializer.java\n@@ -43,4 +43,4 @@ public class DummyInitializer implements Initializer<DummyElement> {\n         return initialMap;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/16/DummyInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/16/DummyInitializer.java\nindex cc0b65c9382..2c5a31d9b81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/16/DummyInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/16/DummyInitializer.java\n@@ -4,7 +4,6 @@ import dfa.framework.BlockState;\n import dfa.framework.Initializer;\n import dfa.framework.SimpleBlockGraph;\n import soot.toolkits.graph.Block;\n-\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -14,6 +13,8 @@ import java.util.Map;\n  *\n  *         A {@code DummyTransition} performs the initialization for a {@code DummyAnalysis}.\n  */\n+\n+\n public class DummyInitializer implements Initializer<DummyElement> {\n \n     private SimpleBlockGraph blockGraph;\n@@ -24,6 +25,8 @@ public class DummyInitializer implements Initializer<DummyElement> {\n      * @param blockGraph\n      *         the {@code SimpleBlockGraph} the analysis to initialize is executed on\n      */\n+\n+\n     public DummyInitializer(SimpleBlockGraph blockGraph) {\n         this.blockGraph = blockGraph;\n     }\n@@ -31,11 +34,8 @@ public class DummyInitializer implements Initializer<DummyElement> {\n     @Override\n     public Map<Block, BlockState<DummyElement>> getInitialStates() {\n         List<Block> blocks = blockGraph.getBlocks();\n-\n         BlockState<DummyElement> defaultState = new BlockState<>(new DummyElement(DummyElement.ValueType.TOP), new DummyElement(DummyElement.ValueType.BOTTOM));\n-\n         Map<Block, BlockState<DummyElement>> initialMap = new HashMap<>();\n-\n         for (Block b : blocks) {\n             initialMap.put(b, defaultState);\n         }\n@@ -43,4 +43,4 @@ public class DummyInitializer implements Initializer<DummyElement> {\n         return initialMap;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}