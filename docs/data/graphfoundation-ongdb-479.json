{
    "project_name": "graphfoundation-ongdb",
    "error_id": "479",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/479/CypherPlanRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/479/CypherPlanRepresentation.java\nindex 33a91420a14..c18cea889da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/479/CypherPlanRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/479/CypherPlanRepresentation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.repr;\n \n import java.util.Map;\n@@ -29,80 +30,80 @@ import static org.neo4j.server.rest.repr.ObjectToRepresentationConverter.getMapR\n \n /**\n  * This takes a function that resolves to a {@link org.neo4j.graphdb.ExecutionPlanDescription}, and it does so for two reasons:\n- *  - The plan description needs to be fetched *after* the result is streamed to the user\n- *  - This method is recursive, so it's not enough to just pass in the execution plan to the root call of it\n- *    subsequent inner calls could not re-use that execution plan (that would just lead to an infinite loop)\n+ * - The plan description needs to be fetched *after* the result is streamed to the user\n+ * - This method is recursive, so it's not enough to just pass in the execution plan to the root call of it\n+ * subsequent inner calls could not re-use that execution plan (that would just lead to an infinite loop)\n  */\n public abstract class CypherPlanRepresentation extends MappingRepresentation\n {\n \n-    private CypherPlanRepresentation()\n-    {\n-        super( \"plan\" );\n-    }\n-\n-    protected abstract ExecutionPlanDescription getPlan();\n-\n-    @Override\n-    protected void serialize( MappingSerializer mappingSerializer )\n-    {\n-        final ExecutionPlanDescription planDescription = getPlan();\n+  private CypherPlanRepresentation()\n+  {\n+    super(\"plan\");\n+  }\n \n-        mappingSerializer.putString( \"name\", planDescription.getName() );\n-        Map<String, Object> arguments = planDescription.getArguments();\n-        MappingRepresentation argsRepresentation = getMapRepresentation( arguments );\n-        mappingSerializer.putMapping( \"args\", argsRepresentation );\n+  protected abstract ExecutionPlanDescription getPlan();\n \n-        if ( planDescription.hasProfilerStatistics() )\n-        {\n-            ExecutionPlanDescription.ProfilerStatistics stats = planDescription.getProfilerStatistics();\n-            mappingSerializer.putNumber( \"rows\", stats.getRows() );\n-            mappingSerializer.putNumber( \"dbHits\", stats.getDbHits() );\n-        }\n+  @Override\n+  protected void serialize(MappingSerializer mappingSerializer)\n+  {\n+    final ExecutionPlanDescription planDescription = getPlan();\n \n-        mappingSerializer.putList( \"children\",\n-                new ListRepresentation( \"children\",\n-                        new IterableWrapper<Representation, ExecutionPlanDescription>( planDescription.getChildren() )\n-                        {\n-                            @Override\n-                            protected Representation underlyingObjectToObject( final ExecutionPlanDescription childPlan )\n-                            {\n-                                return newFromPlan( childPlan );\n-                            }\n-                        }\n-                )\n-        );\n-    }\n+    mappingSerializer.putString(\"name\", planDescription.getName());\n+    Map<String, Object> arguments = planDescription.getArguments();\n+    MappingRepresentation argsRepresentation = getMapRepresentation(arguments);\n+    mappingSerializer.putMapping(\"args\", argsRepresentation);\n \n-    public static CypherPlanRepresentation newFromProvider( final Function<Object, ExecutionPlanDescription> planProvider )\n+    if (planDescription.hasProfilerStatistics())\n     {\n-        return new CypherPlanRepresentation()\n-        {\n-            private ExecutionPlanDescription plan;\n-            private boolean fetched;\n+      ExecutionPlanDescription.ProfilerStatistics stats = planDescription.getProfilerStatistics();\n+      mappingSerializer.putNumber(\"rows\", stats.getRows());\n+      mappingSerializer.putNumber(\"dbHits\", stats.getDbHits());\n+    }\n \n-            @Override\n-            protected ExecutionPlanDescription getPlan()\n+    mappingSerializer.putList(\"children\",\n+        new ListRepresentation(\"children\",\n+            new IterableWrapper<Representation, ExecutionPlanDescription>(planDescription.getChildren())\n             {\n-                if ( !fetched )\n-                {\n-                    plan = planProvider.apply( null );\n-                    fetched = true;\n-                }\n-                return plan;\n+              @Override\n+              protected Representation underlyingObjectToObject(final ExecutionPlanDescription childPlan)\n+              {\n+                return newFromPlan(childPlan);\n+              }\n             }\n-        };\n-    }\n+        )\n+    );\n+  }\n \n-    public static CypherPlanRepresentation newFromPlan( final ExecutionPlanDescription plan )\n+  public static CypherPlanRepresentation newFromProvider(final Function<Object, ExecutionPlanDescription> planProvider)\n+  {\n+    return new CypherPlanRepresentation()\n     {\n-        return new CypherPlanRepresentation()\n+      private ExecutionPlanDescription plan;\n+      private boolean fetched;\n+\n+      @Override\n+      protected ExecutionPlanDescription getPlan()\n+      {\n+        if (!fetched)\n         {\n-            @Override\n-            protected ExecutionPlanDescription getPlan()\n-            {\n-                return plan;\n-            }\n-        };\n-    }\n+          plan = planProvider.apply(null);\n+          fetched = true;\n+        }\n+        return plan;\n+      }\n+    };\n+  }\n+\n+  public static CypherPlanRepresentation newFromPlan(final ExecutionPlanDescription plan)\n+  {\n+    return new CypherPlanRepresentation()\n+    {\n+      @Override\n+      protected ExecutionPlanDescription getPlan()\n+      {\n+        return plan;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 84
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/479/CypherPlanRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/479/CypherPlanRepresentation.java\nindex 33a91420a14..66800e71c31 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/479/CypherPlanRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/479/CypherPlanRepresentation.java\n@@ -35,7 +35,6 @@ import static org.neo4j.server.rest.repr.ObjectToRepresentationConverter.getMapR\n  */\n public abstract class CypherPlanRepresentation extends MappingRepresentation\n {\n-\n     private CypherPlanRepresentation()\n     {\n         super( \"plan\" );\n@@ -47,34 +46,28 @@ public abstract class CypherPlanRepresentation extends MappingRepresentation\n     protected void serialize( MappingSerializer mappingSerializer )\n     {\n         final ExecutionPlanDescription planDescription = getPlan();\n-\n-        mappingSerializer.putString( \"name\", planDescription.getName() );\n-        Map<String, Object> arguments = planDescription.getArguments();\n+mappingSerializer.putString( \"name\", planDescription.getName() );\n+        Map<String,Object> arguments = planDescription.getArguments();\n         MappingRepresentation argsRepresentation = getMapRepresentation( arguments );\n         mappingSerializer.putMapping( \"args\", argsRepresentation );\n-\n-        if ( planDescription.hasProfilerStatistics() )\n+if ( planDescription.hasProfilerStatistics() )\n         {\n             ExecutionPlanDescription.ProfilerStatistics stats = planDescription.getProfilerStatistics();\n             mappingSerializer.putNumber( \"rows\", stats.getRows() );\n             mappingSerializer.putNumber( \"dbHits\", stats.getDbHits() );\n         }\n \n-        mappingSerializer.putList( \"children\",\n-                new ListRepresentation( \"children\",\n-                        new IterableWrapper<Representation, ExecutionPlanDescription>( planDescription.getChildren() )\n+        mappingSerializer.putList( \"children\", new ListRepresentation( \"children\", new IterableWrapper<Representation, ExecutionPlanDescription>( planDescription.getChildren() )\n                         {\n                             @Override\n                             protected Representation underlyingObjectToObject( final ExecutionPlanDescription childPlan )\n                             {\n                                 return newFromPlan( childPlan );\n                             }\n-                        }\n-                )\n-        );\n+                        } ) );\n     }\n \n-    public static CypherPlanRepresentation newFromProvider( final Function<Object, ExecutionPlanDescription> planProvider )\n+    public static CypherPlanRepresentation newFromProvider( final Function<Object,ExecutionPlanDescription> planProvider )\n     {\n         return new CypherPlanRepresentation()\n         {\n@@ -89,7 +82,8 @@ public abstract class CypherPlanRepresentation extends MappingRepresentation\n                     plan = planProvider.apply( null );\n                     fetched = true;\n                 }\n-                return plan;\n+\n+return plan;\n             }\n         };\n     }\n@@ -105,4 +99,4 @@ public abstract class CypherPlanRepresentation extends MappingRepresentation\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "column": "104",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/479/CypherPlanRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/479/CypherPlanRepresentation.java\nindex 33a91420a14..02b7f655f24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/479/CypherPlanRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/479/CypherPlanRepresentation.java\n@@ -21,10 +21,8 @@ package org.neo4j.server.rest.repr;\n \n import java.util.Map;\n import java.util.function.Function;\n-\n import org.neo4j.graphdb.ExecutionPlanDescription;\n import org.neo4j.helpers.collection.IterableWrapper;\n-\n import static org.neo4j.server.rest.repr.ObjectToRepresentationConverter.getMapRepresentation;\n \n /**\n@@ -33,26 +31,25 @@ import static org.neo4j.server.rest.repr.ObjectToRepresentationConverter.getMapR\n  *  - This method is recursive, so it's not enough to just pass in the execution plan to the root call of it\n  *    subsequent inner calls could not re-use that execution plan (that would just lead to an infinite loop)\n  */\n+\n public abstract class CypherPlanRepresentation extends MappingRepresentation\n {\n-\n     private CypherPlanRepresentation()\n     {\n         super( \"plan\" );\n     }\n \n-    protected abstract ExecutionPlanDescription getPlan();\n+    protected abstract ExecutionPlanDescription getPlan()\n+    ;\n \n     @Override\n     protected void serialize( MappingSerializer mappingSerializer )\n     {\n         final ExecutionPlanDescription planDescription = getPlan();\n-\n         mappingSerializer.putString( \"name\", planDescription.getName() );\n-        Map<String, Object> arguments = planDescription.getArguments();\n+        Map<String,Object> arguments = planDescription.getArguments();\n         MappingRepresentation argsRepresentation = getMapRepresentation( arguments );\n         mappingSerializer.putMapping( \"args\", argsRepresentation );\n-\n         if ( planDescription.hasProfilerStatistics() )\n         {\n             ExecutionPlanDescription.ProfilerStatistics stats = planDescription.getProfilerStatistics();\n@@ -60,49 +57,45 @@ public abstract class CypherPlanRepresentation extends MappingRepresentation\n             mappingSerializer.putNumber( \"dbHits\", stats.getDbHits() );\n         }\n \n-        mappingSerializer.putList( \"children\",\n-                new ListRepresentation( \"children\",\n-                        new IterableWrapper<Representation, ExecutionPlanDescription>( planDescription.getChildren() )\n-                        {\n-                            @Override\n-                            protected Representation underlyingObjectToObject( final ExecutionPlanDescription childPlan )\n-                            {\n-                                return newFromPlan( childPlan );\n-                            }\n-                        }\n-                )\n-        );\n+        mappingSerializer.putList( \"children\", new ListRepresentation( \"children\", new IterableWrapper <Representation,ExecutionPlanDescription>( planDescription.getChildren() )\n+{\n+    @Override\n+    protected Representation underlyingObjectToObject( final ExecutionPlanDescription childPlan )\n+    {\n+        return newFromPlan( childPlan );\n+    }\n+} ) );\n     }\n \n-    public static CypherPlanRepresentation newFromProvider( final Function<Object, ExecutionPlanDescription> planProvider )\n+    public static CypherPlanRepresentation newFromProvider( final Function<Object,ExecutionPlanDescription> planProvider )\n     {\n         return new CypherPlanRepresentation()\n+{\n+    private ExecutionPlanDescription plan;\n+    private boolean fetched;\n+    @Override\n+    protected ExecutionPlanDescription getPlan()\n+    {\n+        if ( ! fetched )\n         {\n-            private ExecutionPlanDescription plan;\n-            private boolean fetched;\n+            plan = planProvider.apply( null );\n+            fetched = true;\n+        }\n \n-            @Override\n-            protected ExecutionPlanDescription getPlan()\n-            {\n-                if ( !fetched )\n-                {\n-                    plan = planProvider.apply( null );\n-                    fetched = true;\n-                }\n-                return plan;\n-            }\n-        };\n+        return plan;\n+    }\n+};\n     }\n \n     public static CypherPlanRepresentation newFromPlan( final ExecutionPlanDescription plan )\n     {\n         return new CypherPlanRepresentation()\n-        {\n-            @Override\n-            protected ExecutionPlanDescription getPlan()\n-            {\n-                return plan;\n-            }\n-        };\n+{\n+    @Override\n+    protected ExecutionPlanDescription getPlan()\n+    {\n+        return plan;\n+    }\n+};\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}