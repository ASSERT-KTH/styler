{
    "project_name": "Angel-ML-angel",
    "error_id": "951",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/951/PSAgentManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/951/PSAgentManager.java\nindex a947cb536c8..b1650a014c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/951/PSAgentManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/951/PSAgentManager.java\n@@ -13,6 +13,7 @@\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.tencent.angel.master.psagent;\n \n import com.tencent.angel.common.location.Location;\n@@ -33,13 +34,19 @@ public class PSAgentManager {\n   private static final Log LOG = LogFactory.getLog(PSAgentManager.class);\n   private final AMContext context;\n \n-  /**psagent attempt id to last heartbeat timestamp map*/\n+  /**\n+   * psagent attempt id to last heartbeat timestamp map\n+   */\n   private final ConcurrentHashMap<Integer, Long> psAgentLastHeartbeatTS;\n \n-  /**psagent attempt id to location map*/\n+  /**\n+   * psagent attempt id to location map\n+   */\n   private final ConcurrentHashMap<Integer, Location> psAgentToLocTS;\n \n-  /**psagent heartbeat timeout value in millisecond*/\n+  /**\n+   * psagent heartbeat timeout value in millisecond\n+   */\n   private final long psAgentTimeOutMS;\n \n   private final AtomicInteger idGen = new AtomicInteger(0);\n@@ -49,14 +56,15 @@ public class PSAgentManager {\n     psAgentLastHeartbeatTS = new ConcurrentHashMap<>();\n     psAgentToLocTS = new ConcurrentHashMap<>();\n     psAgentTimeOutMS =\n-      context.getConf().getLong(AngelConf.ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS,\n-        AngelConf.DEFAULT_ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS);\n+        context.getConf().getLong(AngelConf.ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS,\n+            AngelConf.DEFAULT_ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS);\n   }\n \n   /**\n    * PSAgent register\n+   *\n    * @param psAgentId psAgent id\n-   * @param loc PSAgent location\n+   * @param loc       PSAgent location\n    */\n   public void register(int psAgentId, Location loc) {\n     LOG.info(\"PSAgent \" + psAgentId + \" is registered in monitor!\");\n@@ -66,6 +74,7 @@ public class PSAgentManager {\n \n   /**\n    * PSAgent unregister\n+   *\n    * @param psAgentId psagent id\n    */\n   public void unRegister(int psAgentId) {\n@@ -92,6 +101,7 @@ public class PSAgentManager {\n \n   /**\n    * Generate a new psagent id\n+   *\n    * @return a new psagent id\n    */\n   public int getId() {\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/951/PSAgentManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/951/PSAgentManager.java\nindex a947cb536c8..854b286fa20 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/951/PSAgentManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/951/PSAgentManager.java\n@@ -48,8 +48,7 @@ public class PSAgentManager {\n     this.context = context;\n     psAgentLastHeartbeatTS = new ConcurrentHashMap<>();\n     psAgentToLocTS = new ConcurrentHashMap<>();\n-    psAgentTimeOutMS =\n-      context.getConf().getLong(AngelConf.ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS,\n+    psAgentTimeOutMS = context.getConf().getLong(AngelConf.ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS,\n         AngelConf.DEFAULT_ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS);\n   }\n \n@@ -97,4 +96,4 @@ public class PSAgentManager {\n   public int getId() {\n     return idGen.incrementAndGet();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/951/PSAgentManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/951/PSAgentManager.java\nindex a947cb536c8..6578efd36b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/951/PSAgentManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/951/PSAgentManager.java\n@@ -20,7 +20,6 @@ import com.tencent.angel.conf.AngelConf;\n import com.tencent.angel.master.app.AMContext;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import java.util.Iterator;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -29,7 +28,9 @@ import java.util.concurrent.atomic.AtomicInteger;\n /**\n  * PSAgent heartbeat monitor\n  */\n+\n public class PSAgentManager {\n+\n   private static final Log LOG = LogFactory.getLog(PSAgentManager.class);\n   private final AMContext context;\n \n@@ -41,16 +42,14 @@ public class PSAgentManager {\n \n   /**psagent heartbeat timeout value in millisecond*/\n   private final long psAgentTimeOutMS;\n-\n   private final AtomicInteger idGen = new AtomicInteger(0);\n \n   public PSAgentManager(AMContext context) {\n     this.context = context;\n     psAgentLastHeartbeatTS = new ConcurrentHashMap<>();\n     psAgentToLocTS = new ConcurrentHashMap<>();\n-    psAgentTimeOutMS =\n-      context.getConf().getLong(AngelConf.ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS,\n-        AngelConf.DEFAULT_ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS);\n+    psAgentTimeOutMS = context.getConf().getLong(\n+      AngelConf.ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS, AngelConf.DEFAULT_ANGEL_PSAGENT_HEARTBEAT_TIMEOUT_MS);\n   }\n \n   /**\n@@ -58,6 +57,7 @@ public class PSAgentManager {\n    * @param psAgentId psAgent id\n    * @param loc PSAgent location\n    */\n+\n   public void register(int psAgentId, Location loc) {\n     LOG.info(\"PSAgent \" + psAgentId + \" is registered in monitor!\");\n     psAgentLastHeartbeatTS.put(psAgentId, System.currentTimeMillis());\n@@ -68,6 +68,7 @@ public class PSAgentManager {\n    * PSAgent unregister\n    * @param psAgentId psagent id\n    */\n+\n   public void unRegister(int psAgentId) {\n     LOG.info(\"PSAgent \" + psAgentId + \" is unregistered in monitor!\");\n     psAgentLastHeartbeatTS.remove(psAgentId);\n@@ -76,6 +77,7 @@ public class PSAgentManager {\n   /**\n    * Check PSAgent heartbeat timeout or not\n    */\n+\n   public void checkHBTimeOut() {\n     //check whether psagent heartbeat timeout\n     Iterator<Map.Entry<Integer, Long>> psAgentIt = psAgentLastHeartbeatTS.entrySet().iterator();\n@@ -94,7 +96,9 @@ public class PSAgentManager {\n    * Generate a new psagent id\n    * @return a new psagent id\n    */\n+\n   public int getId() {\n     return idGen.incrementAndGet();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}