{
    "project_name": "IQSS-dataverse",
    "error_id": "31",
    "information": {
        "errors": [
            {
                "line": "98",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        }\n    }\n\t\n    public List<BuiltinUser> listByUsernamePart ( String part ) {\n            return em.createNamedQuery(\"BuiltinUser.listByUserNameLike\", BuiltinUser.class)\n                            .setParameter(\"userNameLike\", \"%\" + part + \"%\")",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "98",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/31/BuiltinUserServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/31/BuiltinUserServiceBean.java\nindex c39c7cb2985..1147ec31a35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/31/BuiltinUserServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/31/BuiltinUserServiceBean.java\n@@ -22,97 +22,100 @@ import javax.validation.Validator;\n import javax.validation.ValidatorFactory;\n \n /**\n- *\n  * @author xyang\n  */\n @Stateless\n @Named\n public class BuiltinUserServiceBean {\n \n-    private static final Logger logger = Logger.getLogger(BuiltinUserServiceBean.class.getCanonicalName());\n+  private static final Logger logger = Logger.getLogger(BuiltinUserServiceBean.class.getCanonicalName());\n \n-    @EJB\n-    IndexServiceBean indexService;\n-    \n-    @EJB\n-    PasswordResetServiceBean passwordResetService;\n+  @EJB\n+  IndexServiceBean indexService;\n \n-    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-    private EntityManager em;\n-    \n-    public String encryptPassword(String plainText) {\n-        return PasswordEncryption.get().encrypt(plainText);\n-    }\n-       \n-    public BuiltinUser save(BuiltinUser aUser) {\n-        /**\n-         * We throw a proper IllegalArgumentException here because otherwise\n-         * from the API you get a 500 response and \"Can't save user: null\".\n-         */\n-        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();\n-        Validator validator = factory.getValidator();\n-        Set<ConstraintViolation<BuiltinUser>> violations = validator.validate(aUser);\n-        if (violations.size() > 0) {\n-            StringBuilder sb = new StringBuilder();\n-            violations.stream().forEach((violation) -> {\n-                sb.append(\" Invalid value: <<<\").append(violation.getInvalidValue()).append(\">>> for \").append(violation.getPropertyPath()).append(\" at \").append(violation.getLeafBean()).append(\" - \").append(violation.getMessage());\n-            });\n-            throw new IllegalArgumentException(\"BuiltinUser could not be saved to due constraint violations: \" + sb);\n-        }\n-        if ( aUser.getId() == null ) {\n-            // see that the username is unique\n-            if ( em.createNamedQuery(\"BuiltinUser.findByUserName\")\n-                    .setParameter(\"userName\", aUser.getUserName()).getResultList().size() > 0 ) {\n-                throw new IllegalArgumentException( \"BuiltinUser with username '\" + aUser.getUserName() + \"' already exists.\");\n-            }\n-            em.persist( aUser );\n-            return aUser;\n-        } else {\n-            return em.merge(aUser);\n-        }\n-    }\n-    \n-    public BuiltinUser find(Long pk) {\n-        return em.find(BuiltinUser.class, pk);\n-    }    \n-    \n-    public void removeUser( String userName ) {\n-        final BuiltinUser user = findByUserName(userName);\n-        if ( user != null ) {\n-            em.remove(user);\n-        }\n-    }\n-    \n-    public BuiltinUser findByUserName(String userName) {\n-        try {\n-            return em.createNamedQuery(\"BuiltinUser.findByUserName\", BuiltinUser.class)\n-                    .setParameter(\"userName\", userName)\n-                    .getSingleResult();\n-        } catch (javax.persistence.NoResultException e) {\n-            return null;\n-        } catch (NonUniqueResultException ex) {\n-            logger.log(Level.WARNING, \"multiple accounts found for username {0}\", userName);\n-            return null;\n-        }\n+  @EJB\n+  PasswordResetServiceBean passwordResetService;\n+\n+  @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+  private EntityManager em;\n+\n+  public String encryptPassword(String plainText) {\n+    return PasswordEncryption.get().encrypt(plainText);\n+  }\n+\n+  public BuiltinUser save(BuiltinUser aUser) {\n+    /**\n+     * We throw a proper IllegalArgumentException here because otherwise\n+     * from the API you get a 500 response and \"Can't save user: null\".\n+     */\n+    ValidatorFactory factory = Validation.buildDefaultValidatorFactory();\n+    Validator validator = factory.getValidator();\n+    Set<ConstraintViolation<BuiltinUser>> violations = validator.validate(aUser);\n+    if (violations.size() > 0) {\n+      StringBuilder sb = new StringBuilder();\n+      violations.stream().forEach((violation) -> {\n+        sb.append(\" Invalid value: <<<\").append(violation.getInvalidValue()).append(\">>> for \")\n+          .append(violation.getPropertyPath()).append(\" at \").append(violation.getLeafBean()).append(\" - \")\n+          .append(violation.getMessage());\n+      });\n+      throw new IllegalArgumentException(\"BuiltinUser could not be saved to due constraint violations: \" + sb);\n     }\n-\t\n-    public List<BuiltinUser> listByUsernamePart ( String part ) {\n-            return em.createNamedQuery(\"BuiltinUser.listByUserNameLike\", BuiltinUser.class)\n-                            .setParameter(\"userNameLike\", \"%\" + part + \"%\")\n-                            .getResultList();\n+    if (aUser.getId() == null) {\n+      // see that the username is unique\n+      if (em.createNamedQuery(\"BuiltinUser.findByUserName\")\n+        .setParameter(\"userName\", aUser.getUserName()).getResultList().size() > 0) {\n+        throw new IllegalArgumentException(\"BuiltinUser with username '\" + aUser.getUserName() + \"' already exists.\");\n+      }\n+      em.persist(aUser);\n+      return aUser;\n+    } else {\n+      return em.merge(aUser);\n     }\n-    \n-    public List<BuiltinUser> findAll() {\n-\t\treturn em.createNamedQuery(\"BuiltinUser.findAll\", BuiltinUser.class).getResultList();\n-\t}\n-    \n-    public String requestPasswordUpgradeLink( BuiltinUser aUser ) throws PasswordResetException {\n-        PasswordResetInitResponse prir = passwordResetService.requestPasswordReset(aUser, false, PasswordResetData.Reason.UPGRADE_REQUIRED );\n-        return \"passwordreset.xhtml?token=\" + prir.getPasswordResetData().getToken() + \"&faces-redirect=true\";\n+  }\n+\n+  public BuiltinUser find(Long pk) {\n+    return em.find(BuiltinUser.class, pk);\n+  }\n+\n+  public void removeUser(String userName) {\n+    final BuiltinUser user = findByUserName(userName);\n+    if (user != null) {\n+      em.remove(user);\n     }\n-    \n-    public String requestPasswordComplianceLink( BuiltinUser aUser ) throws PasswordResetException {\n-        PasswordResetInitResponse prir = passwordResetService.requestPasswordReset(aUser, false, PasswordResetData.Reason.NON_COMPLIANT_PASSWORD );\n-        return \"passwordreset.xhtml?token=\" + prir.getPasswordResetData().getToken() + \"&faces-redirect=true\";\n+  }\n+\n+  public BuiltinUser findByUserName(String userName) {\n+    try {\n+      return em.createNamedQuery(\"BuiltinUser.findByUserName\", BuiltinUser.class)\n+        .setParameter(\"userName\", userName)\n+        .getSingleResult();\n+    } catch (javax.persistence.NoResultException e) {\n+      return null;\n+    } catch (NonUniqueResultException ex) {\n+      logger.log(Level.WARNING, \"multiple accounts found for username {0}\", userName);\n+      return null;\n     }\n+  }\n+\n+  public List<BuiltinUser> listByUsernamePart(String part) {\n+    return em.createNamedQuery(\"BuiltinUser.listByUserNameLike\", BuiltinUser.class)\n+      .setParameter(\"userNameLike\", \"%\" + part + \"%\")\n+      .getResultList();\n+  }\n+\n+  public List<BuiltinUser> findAll() {\n+    return em.createNamedQuery(\"BuiltinUser.findAll\", BuiltinUser.class).getResultList();\n+  }\n+\n+  public String requestPasswordUpgradeLink(BuiltinUser aUser) throws PasswordResetException {\n+    PasswordResetInitResponse prir =\n+      passwordResetService.requestPasswordReset(aUser, false, PasswordResetData.Reason.UPGRADE_REQUIRED);\n+    return \"passwordreset.xhtml?token=\" + prir.getPasswordResetData().getToken() + \"&faces-redirect=true\";\n+  }\n+\n+  public String requestPasswordComplianceLink(BuiltinUser aUser) throws PasswordResetException {\n+    PasswordResetInitResponse prir =\n+      passwordResetService.requestPasswordReset(aUser, false, PasswordResetData.Reason.NON_COMPLIANT_PASSWORD);\n+    return \"passwordreset.xhtml?token=\" + prir.getPasswordResetData().getToken() + \"&faces-redirect=true\";\n+  }\n }\n",
            "diff_size": 119
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/31/BuiltinUserServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/31/BuiltinUserServiceBean.java\nindex c39c7cb2985..78512d1a58f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/31/BuiltinUserServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/31/BuiltinUserServiceBean.java\n@@ -45,7 +45,7 @@ public class BuiltinUserServiceBean {\n     }\n        \n     public BuiltinUser save(BuiltinUser aUser) {\n-        /**\n+    /**\n          * We throw a proper IllegalArgumentException here because otherwise\n          * from the API you get a 500 response and \"Can't save user: null\".\n          */\n@@ -95,18 +95,17 @@ public class BuiltinUserServiceBean {\n             return null;\n         }\n     }\n-\t\n-    public List<BuiltinUser> listByUsernamePart ( String part ) {\n-            return em.createNamedQuery(\"BuiltinUser.listByUserNameLike\", BuiltinUser.class)\n-                            .setParameter(\"userNameLike\", \"%\" + part + \"%\")\n+\n+public List<BuiltinUser> listByUsernamePart( String part ) {\n+    return em.createNamedQuery(\"BuiltinUser.listByUserNameLike\", BuiltinUser.class).setParameter(\"userNameLike\", \"%\" + part + \"%\")\n                             .getResultList();\n     }\n     \n     public List<BuiltinUser> findAll() {\n-\t\treturn em.createNamedQuery(\"BuiltinUser.findAll\", BuiltinUser.class).getResultList();\n-\t}\n-    \n-    public String requestPasswordUpgradeLink( BuiltinUser aUser ) throws PasswordResetException {\n+    return em.createNamedQuery(\"BuiltinUser.findAll\", BuiltinUser.class).getResultList();\n+    }\n+\n+public String requestPasswordUpgradeLink( BuiltinUser aUser ) throws PasswordResetException {\n         PasswordResetInitResponse prir = passwordResetService.requestPasswordReset(aUser, false, PasswordResetData.Reason.UPGRADE_REQUIRED );\n         return \"passwordreset.xhtml?token=\" + prir.getPasswordResetData().getToken() + \"&faces-redirect=true\";\n     }\n@@ -115,4 +114,4 @@ public class BuiltinUserServiceBean {\n         PasswordResetInitResponse prir = passwordResetService.requestPasswordReset(aUser, false, PasswordResetData.Reason.NON_COMPLIANT_PASSWORD );\n         return \"passwordreset.xhtml?token=\" + prir.getPasswordResetData().getToken() + \"&faces-redirect=true\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/31/BuiltinUserServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/31/BuiltinUserServiceBean.java\nindex c39c7cb2985..4d0e7475696 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/31/BuiltinUserServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/31/BuiltinUserServiceBean.java\n@@ -25,6 +25,8 @@ import javax.validation.ValidatorFactory;\n  *\n  * @author xyang\n  */\n+\n+\n @Stateless\n @Named\n public class BuiltinUserServiceBean {\n@@ -33,17 +35,17 @@ public class BuiltinUserServiceBean {\n \n     @EJB\n     IndexServiceBean indexService;\n-    \n+\n     @EJB\n     PasswordResetServiceBean passwordResetService;\n \n     @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n     private EntityManager em;\n-    \n+\n     public String encryptPassword(String plainText) {\n         return PasswordEncryption.get().encrypt(plainText);\n     }\n-       \n+\n     public BuiltinUser save(BuiltinUser aUser) {\n         /**\n          * We throw a proper IllegalArgumentException here because otherwise\n@@ -59,35 +61,33 @@ public class BuiltinUserServiceBean {\n             });\n             throw new IllegalArgumentException(\"BuiltinUser could not be saved to due constraint violations: \" + sb);\n         }\n-        if ( aUser.getId() == null ) {\n+\n+        if (aUser.getId() == null) {\n             // see that the username is unique\n-            if ( em.createNamedQuery(\"BuiltinUser.findByUserName\")\n-                    .setParameter(\"userName\", aUser.getUserName()).getResultList().size() > 0 ) {\n-                throw new IllegalArgumentException( \"BuiltinUser with username '\" + aUser.getUserName() + \"' already exists.\");\n+            if (em.createNamedQuery(\"BuiltinUser.findByUserName\").setParameter(\"userName\", aUser.getUserName()).getResultList().size() > 0) {\n+                throw new IllegalArgumentException(\"BuiltinUser with username '\" + aUser.getUserName() + \"' already exists.\");\n             }\n-            em.persist( aUser );\n+            em.persist(aUser);\n             return aUser;\n         } else {\n             return em.merge(aUser);\n         }\n     }\n-    \n+\n     public BuiltinUser find(Long pk) {\n         return em.find(BuiltinUser.class, pk);\n-    }    \n-    \n-    public void removeUser( String userName ) {\n+    }\n+\n+    public void removeUser(String userName) {\n         final BuiltinUser user = findByUserName(userName);\n-        if ( user != null ) {\n+        if (user != null) {\n             em.remove(user);\n         }\n     }\n-    \n+\n     public BuiltinUser findByUserName(String userName) {\n         try {\n-            return em.createNamedQuery(\"BuiltinUser.findByUserName\", BuiltinUser.class)\n-                    .setParameter(\"userName\", userName)\n-                    .getSingleResult();\n+            return em.createNamedQuery(\"BuiltinUser.findByUserName\", BuiltinUser.class).setParameter(\"userName\", userName).getSingleResult();\n         } catch (javax.persistence.NoResultException e) {\n             return null;\n         } catch (NonUniqueResultException ex) {\n@@ -95,24 +95,23 @@ public class BuiltinUserServiceBean {\n             return null;\n         }\n     }\n-\t\n-    public List<BuiltinUser> listByUsernamePart ( String part ) {\n-            return em.createNamedQuery(\"BuiltinUser.listByUserNameLike\", BuiltinUser.class)\n-                            .setParameter(\"userNameLike\", \"%\" + part + \"%\")\n-                            .getResultList();\n+\n+    public List<BuiltinUser> listByUsernamePart(String part) {\n+        return em.createNamedQuery(\"BuiltinUser.listByUserNameLike\", BuiltinUser.class).setParameter(\"userNameLike\", \"%\" + part + \"%\").getResultList();\n     }\n-    \n+\n     public List<BuiltinUser> findAll() {\n-\t\treturn em.createNamedQuery(\"BuiltinUser.findAll\", BuiltinUser.class).getResultList();\n-\t}\n-    \n-    public String requestPasswordUpgradeLink( BuiltinUser aUser ) throws PasswordResetException {\n-        PasswordResetInitResponse prir = passwordResetService.requestPasswordReset(aUser, false, PasswordResetData.Reason.UPGRADE_REQUIRED );\n+        return em.createNamedQuery(\"BuiltinUser.findAll\", BuiltinUser.class).getResultList();\n+    }\n+\n+    public String requestPasswordUpgradeLink(BuiltinUser aUser) throws PasswordResetException {\n+        PasswordResetInitResponse prir = passwordResetService.requestPasswordReset(aUser, false, PasswordResetData.Reason.UPGRADE_REQUIRED);\n         return \"passwordreset.xhtml?token=\" + prir.getPasswordResetData().getToken() + \"&faces-redirect=true\";\n     }\n-    \n-    public String requestPasswordComplianceLink( BuiltinUser aUser ) throws PasswordResetException {\n-        PasswordResetInitResponse prir = passwordResetService.requestPasswordReset(aUser, false, PasswordResetData.Reason.NON_COMPLIANT_PASSWORD );\n+\n+    public String requestPasswordComplianceLink(BuiltinUser aUser) throws PasswordResetException {\n+        PasswordResetInitResponse prir = passwordResetService.requestPasswordReset(aUser, false, PasswordResetData.Reason.NON_COMPLIANT_PASSWORD);\n         return \"passwordreset.xhtml?token=\" + prir.getPasswordResetData().getToken() + \"&faces-redirect=true\";\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "98",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "98",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ]
}