{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "418",
    "information": {
        "errors": [
            {
                "line": "236",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 105).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      throws IOException {\n    initStorage();\n    int maxChannelReopens = ((CloudStorageFileSystem) path.getFileSystem()).config().maxChannelReopens();\n    for (OpenOption option : options) {\n      if (option instanceof StandardOpenOption) {\n        switch ((StandardOpenOption) option) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "236",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/418/CloudStorageFileSystemProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/418/CloudStorageFileSystemProvider.java\nindex af5dfe8a38e..5a24aaeb4c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/418/CloudStorageFileSystemProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/418/CloudStorageFileSystemProvider.java\n@@ -176,10 +176,10 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n    *\n    * @param uri bucket and current working directory, e.g. {@code gs://bucket}\n    * @param env map of configuration options, whose keys correspond to the method names of\n-   *     {@link CloudStorageConfiguration.Builder}. However you are not allowed to set the working\n-   *     directory, as that should be provided in the {@code uri}\n+   *            {@link CloudStorageConfiguration.Builder}. However you are not allowed to set the working\n+   *            directory, as that should be provided in the {@code uri}\n    * @throws IllegalArgumentException if {@code uri} specifies a port, user, query, or fragment, or\n-   *     if scheme is not {@value CloudStorageFileSystem#URI_SCHEME}\n+   *                                  if scheme is not {@value CloudStorageFileSystem#URI_SCHEME}\n    */\n   @Override\n   public CloudStorageFileSystem newFileSystem(URI uri, Map<String, ?> env) {\n@@ -210,7 +210,9 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n         getFileSystem(CloudStorageUtil.stripPathFromUri(uri)), uri.getPath());\n   }\n \n-  /** Convenience method: replaces spaces with \"%20\", builds a URI, and calls getPath(uri). */\n+  /**\n+   * Convenience method: replaces spaces with \"%20\", builds a URI, and calls getPath(uri).\n+   */\n   public CloudStoragePath getPath(String uriInStringForm) {\n     String escaped = UrlEscapers.urlFragmentEscaper().escape(uriInStringForm);\n     return getPath(URI.create(escaped));\n@@ -233,7 +235,8 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n   private SeekableByteChannel newReadChannel(Path path, Set<? extends OpenOption> options)\n       throws IOException {\n     initStorage();\n-    int maxChannelReopens = ((CloudStorageFileSystem) path.getFileSystem()).config().maxChannelReopens();\n+    int maxChannelReopens =\n+        ((CloudStorageFileSystem) path.getFileSystem()).config().maxChannelReopens();\n     for (OpenOption option : options) {\n       if (option instanceof StandardOpenOption) {\n         switch ((StandardOpenOption) option) {\n@@ -456,8 +459,8 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n         blockSize != -1\n             ? blockSize\n             : Ints.max(\n-                fromPath.getFileSystem().config().blockSize(),\n-                toPath.getFileSystem().config().blockSize());\n+            fromPath.getFileSystem().config().blockSize(),\n+            toPath.getFileSystem().config().blockSize());\n     // TODO: actually use blockSize\n \n     if (fromPath.seemsLikeADirectory() && toPath.seemsLikeADirectory()) {\n@@ -654,7 +657,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n   public boolean equals(Object other) {\n     return this == other\n         || other instanceof CloudStorageFileSystemProvider\n-            && Objects.equals(storage, ((CloudStorageFileSystemProvider) other).storage);\n+        && Objects.equals(storage, ((CloudStorageFileSystemProvider) other).storage);\n   }\n \n   @Override\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Annotation 'AutoService' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Annotation 'ThreadSafe' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'CLASS_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "196",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "196",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "216",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "228",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "230",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "column": "15",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'switch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "236",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "239",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "241",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "241",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "242",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "243",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "243",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "246",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "247",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "248",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "258",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "273",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "274",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "275",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "275",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "276",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "277",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 29, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "277",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "278",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 27, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "279",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 36, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "280",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 36, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "281",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 34, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "282",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 43, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "283",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 41, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "286",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 48, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "287",
                    "severity": "warning",
                    "message": "'switch' has incorrect indentation level 57, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "287",
                    "column": "64",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'switch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "288",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 59, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "288",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "290",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 95, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "290",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "291",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 59, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "293",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 95, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "293",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "294",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 59, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "295",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 95, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "295",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "296",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 95, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "296",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "297",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 59, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "298",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 95, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "298",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "299",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 59, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "299",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "300",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 95, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "300",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "301",
                    "severity": "warning",
                    "message": "'switch rcurly' has incorrect indentation level 57, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "302",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 55, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "302",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "305",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 62, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "306",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 64, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "306",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "307",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 55, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "316",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "393",
                    "column": "15",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'switch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "395",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "396",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "398",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "399",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "401",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "401",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "404",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "405",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "406",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "407",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 24, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "408",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 24, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "409",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "410",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 31, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "410",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "411",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 31, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "412",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 29, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "413",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 38, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "413",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "414",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 38, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "415",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 36, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "416",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 45, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "416",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "417",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 45, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "418",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 43, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "419",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 45, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "419",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "420",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 36, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "421",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "422",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "426",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "429",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "431",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 8, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "436",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 10, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "436",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "467",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "499",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'switch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "501",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "503",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "510",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "516",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "532",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "550",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "579",
                    "severity": "warning",
                    "message": "'Storage' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "583",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "585",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "586",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "588",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "592",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "593",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 11, expected level should be one of the following: 4, 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "616",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/418/CloudStorageFileSystemProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/418/CloudStorageFileSystemProvider.java\nindex af5dfe8a38e..18d037f0b8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/418/CloudStorageFileSystemProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/418/CloudStorageFileSystemProvider.java\n@@ -35,7 +35,6 @@ import com.google.common.base.Throwables;\n import com.google.common.collect.AbstractIterator;\n import com.google.common.net.UrlEscapers;\n import com.google.common.primitives.Ints;\n-\n import java.io.BufferedInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -69,7 +68,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Set;\n-\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.ThreadSafe;\n import javax.inject.Singleton;\n@@ -82,9 +80,9 @@ import javax.inject.Singleton;\n  * the javadocs in this class serve as useful documentation for the behavior of the Google Cloud\n  * Storage NIO library.\n  */\n-@Singleton\n-@ThreadSafe\n-@AutoService(FileSystemProvider.class)\n+\n+\n+@Singleton @ThreadSafe @AutoService(FileSystemProvider.class)\n public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n \n   private Storage storage;\n@@ -92,14 +90,13 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n \n   // used only when we create a new instance of CloudStorageFileSystemProvider.\n   private static StorageOptions futureStorageOptions;\n-\n   private static class LazyPathIterator extends AbstractIterator<Path> {\n+\n     private final Iterator<Blob> blobIterator;\n     private final Filter<? super Path> filter;\n     private final CloudStorageFileSystem fileSystem;\n \n-    LazyPathIterator(CloudStorageFileSystem fileSystem, Iterator<Blob> blobIterator,\n-                     Filter<? super Path> filter) {\n+    LazyPathIterator(CloudStorageFileSystem fileSystem, Iterator<Blob> blobIterator, Filter<? super Path> filter) {\n       this.blobIterator = blobIterator;\n       this.filter = filter;\n       this.fileSystem = fileSystem;\n@@ -124,6 +121,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n   /**\n    * Sets options that are only used by the constructor.\n    */\n+\n   @VisibleForTesting\n   public static void setStorageOptions(StorageOptions newStorageOptions) {\n     futureStorageOptions = newStorageOptions;\n@@ -135,6 +133,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n    * @see java.nio.file.FileSystems#getFileSystem(URI)\n    * @see CloudStorageFileSystem#forBucket(String)\n    */\n+\n   public CloudStorageFileSystemProvider() {\n     this(futureStorageOptions);\n   }\n@@ -145,6 +144,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n \n   // Initialize this.storage, once. This may throw an exception if default authentication\n   // credentials are not available (hence not doing it in the ctor).\n+\n   private void initStorage() {\n     if (this.storage != null) {\n       return;\n@@ -164,6 +164,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n   /**\n    * Returns Cloud Storage file system, provided a URI with no path, e.g. {@code gs://bucket}.\n    */\n+\n   @Override\n   public CloudStorageFileSystem getFileSystem(URI uri) {\n     initStorage();\n@@ -181,23 +182,18 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n    * @throws IllegalArgumentException if {@code uri} specifies a port, user, query, or fragment, or\n    *     if scheme is not {@value CloudStorageFileSystem#URI_SCHEME}\n    */\n+\n   @Override\n   public CloudStorageFileSystem newFileSystem(URI uri, Map<String, ?> env) {\n-    checkArgument(\n-        uri.getScheme().equalsIgnoreCase(CloudStorageFileSystem.URI_SCHEME),\n-        \"Cloud Storage URIs must have '%s' scheme: %s\",\n-        CloudStorageFileSystem.URI_SCHEME,\n-        uri);\n-    checkArgument(\n-        !isNullOrEmpty(uri.getHost()), \"%s:// URIs must have a host: %s\",\n-        CloudStorageFileSystem.URI_SCHEME, uri);\n-    checkArgument(\n-        uri.getPort() == -1\n-            && isNullOrEmpty(uri.getQuery())\n-            && isNullOrEmpty(uri.getFragment())\n-            && isNullOrEmpty(uri.getUserInfo()),\n-        \"GCS FileSystem URIs mustn't have: port, userinfo, query, or fragment: %s\",\n-        uri);\n+    checkArgument(uri.getScheme().equalsIgnoreCase(CloudStorageFileSystem.URI_SCHEME), \"Cloud Storage URIs must have '%s' scheme: %s\", CloudStorageFileSystem.URI_SCHEME, uri);\n+    checkArgument(!isNullOrEmpty(uri.getHost()),\n+\"%s:// URIs must have a host: %s\",\n+CloudStorageFileSystem.URI_SCHEME,\n+uri);\n+    checkArgument(uri.getPort() == -1\n+      && isNullOrEmpty(uri.getQuery())\n+      && isNullOrEmpty(uri.getFragment())\n+      && isNullOrEmpty(uri.getUserInfo()), \"GCS FileSystem URIs mustn't have: port, userinfo, query, or fragment: %s\", uri);\n     CloudStorageUtil.checkBucket(uri.getHost());\n     initStorage();\n     return new CloudStorageFileSystem(this, uri.getHost(), CloudStorageConfiguration.fromMap(env));\n@@ -206,19 +202,18 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n   @Override\n   public CloudStoragePath getPath(URI uri) {\n     initStorage();\n-    return CloudStoragePath.getPath(\n-        getFileSystem(CloudStorageUtil.stripPathFromUri(uri)), uri.getPath());\n+    return CloudStoragePath.getPath(getFileSystem(CloudStorageUtil.stripPathFromUri(uri)), uri.getPath());\n   }\n \n   /** Convenience method: replaces spaces with \"%20\", builds a URI, and calls getPath(uri). */\n+\n   public CloudStoragePath getPath(String uriInStringForm) {\n     String escaped = UrlEscapers.urlFragmentEscaper().escape(uriInStringForm);\n     return getPath(URI.create(escaped));\n   }\n \n   @Override\n-  public SeekableByteChannel newByteChannel(\n-      Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n+  public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n     checkNotNull(path);\n     initStorage();\n     CloudStorageUtil.checkNotNullArray(attrs);\n@@ -230,35 +225,27 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     }\n   }\n \n-  private SeekableByteChannel newReadChannel(Path path, Set<? extends OpenOption> options)\n-      throws IOException {\n+  private SeekableByteChannel newReadChannel(Path path, Set<? extends OpenOption> options) throws IOException {\n     initStorage();\n     int maxChannelReopens = ((CloudStorageFileSystem) path.getFileSystem()).config().maxChannelReopens();\n     for (OpenOption option : options) {\n       if (option instanceof StandardOpenOption) {\n-        switch ((StandardOpenOption) option) {\n+        switch((StandardOpenOption) option) {\n           case READ:\n             // Default behavior.\n-            break;\n-          case SPARSE:\n-          case TRUNCATE_EXISTING:\n+                                              break;\n+          case SPARSE: case TRUNCATE_EXISTING:\n             // Ignored by specification.\n-            break;\n+                                              break;\n           case WRITE:\n-            throw new IllegalArgumentException(\"READ+WRITE not supported yet\");\n-          case APPEND:\n-          case CREATE:\n-          case CREATE_NEW:\n-          case DELETE_ON_CLOSE:\n-          case DSYNC:\n-          case SYNC:\n-          default:\n-            throw new UnsupportedOperationException(option.toString());\n+                                              throw new IllegalArgumentException(\"READ+WRITE not supported yet\");\n+          case APPEND: case CREATE: case CREATE_NEW: case DELETE_ON_CLOSE: case DSYNC: case SYNC: default:\n+                                              throw new UnsupportedOperationException(option.toString());\n         }\n       } else if (option instanceof OptionMaxChannelReopens) {\n-        maxChannelReopens = ((OptionMaxChannelReopens) option).maxChannelReopens();\n-      } else {\n-        throw new UnsupportedOperationException(option.toString());\n+               maxChannelReopens = ((OptionMaxChannelReopens) option).maxChannelReopens();\n+             } else {\n+               throw new UnsupportedOperationException(option.toString());\n       }\n     }\n     CloudStoragePath cloudPath = CloudStorageUtil.checkPath(path);\n@@ -268,8 +255,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     return CloudStorageReadChannel.create(storage, cloudPath.getBlobId(), 0, maxChannelReopens);\n   }\n \n-  private SeekableByteChannel newWriteChannel(Path path, Set<? extends OpenOption> options)\n-      throws IOException {\n+  private SeekableByteChannel newWriteChannel(Path path, Set<? extends OpenOption> options) throws IOException {\n     initStorage();\n     CloudStoragePath cloudPath = CloudStorageUtil.checkPath(path);\n     if (cloudPath.seemsLikeADirectoryAndUsePseudoDirectories()) {\n@@ -279,64 +265,55 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     BlobInfo.Builder infoBuilder = BlobInfo.newBuilder(file);\n     List<Storage.BlobWriteOption> writeOptions = new ArrayList<>();\n     List<Acl> acls = new ArrayList<>();\n-\n     HashMap<String, String> metas = new HashMap<>();\n     for (OpenOption option : options) {\n       if (option instanceof OptionMimeType) {\n         infoBuilder.setContentType(((OptionMimeType) option).mimeType());\n       } else if (option instanceof OptionCacheControl) {\n-        infoBuilder.setCacheControl(((OptionCacheControl) option).cacheControl());\n-      } else if (option instanceof OptionContentDisposition) {\n-        infoBuilder.setContentDisposition(((OptionContentDisposition) option).contentDisposition());\n-      } else if (option instanceof OptionContentEncoding) {\n-        infoBuilder.setContentEncoding(((OptionContentEncoding) option).contentEncoding());\n-      } else if (option instanceof OptionUserMetadata) {\n-        OptionUserMetadata opMeta = (OptionUserMetadata) option;\n-        metas.put(opMeta.key(), opMeta.value());\n-      } else if (option instanceof OptionAcl) {\n-        acls.add(((OptionAcl) option).acl());\n-      } else if (option instanceof OptionBlockSize) {\n+               infoBuilder.setCacheControl(((OptionCacheControl) option).cacheControl());\n+             } else if (option instanceof OptionContentDisposition) {\n+                      infoBuilder.setContentDisposition(((OptionContentDisposition) option).contentDisposition());\n+                    } else if (option instanceof OptionContentEncoding) {\n+                             infoBuilder.setContentEncoding(((OptionContentEncoding) option).contentEncoding());\n+                           } else if (option instanceof OptionUserMetadata) {\n+                                    OptionUserMetadata opMeta = (OptionUserMetadata) option;\n+                                    metas.put(opMeta.key(), opMeta.value());\n+                                  } else if (option instanceof OptionAcl) {\n+                                           acls.add(((OptionAcl) option).acl());\n+                                         } else if (option instanceof OptionBlockSize) {\n         // TODO: figure out how to plumb in block size.\n-      } else if (option instanceof StandardOpenOption) {\n-        switch ((StandardOpenOption) option) {\n-          case CREATE:\n-          case TRUNCATE_EXISTING:\n-          case WRITE:\n+\n+                                                } else if (option instanceof StandardOpenOption) {\n+                                                         switch((StandardOpenOption) option) {\n+                                                           case CREATE: case TRUNCATE_EXISTING: case WRITE:\n             // Default behavior.\n-            break;\n-          case SPARSE:\n+                                                                                               break;\n+                                                           case SPARSE:\n             // Ignored by specification.\n-            break;\n-          case CREATE_NEW:\n-            writeOptions.add(Storage.BlobWriteOption.doesNotExist());\n-            break;\n-          case READ:\n-            throw new IllegalArgumentException(\"READ+WRITE not supported yet\");\n-          case APPEND:\n-          case DELETE_ON_CLOSE:\n-          case DSYNC:\n-          case SYNC:\n-          default:\n-            throw new UnsupportedOperationException(option.toString());\n-        }\n-      } else if (option instanceof CloudStorageOption) {\n+                                                                                               break;\n+                                                           case CREATE_NEW:\n+                                                                                               writeOptions.add(Storage.BlobWriteOption.doesNotExist());\n+                                                                                               break;\n+                                                           case READ:\n+                                                                                               throw new IllegalArgumentException(\"READ+WRITE not supported yet\");\n+                                                           case APPEND: case DELETE_ON_CLOSE: case DSYNC: case SYNC: default:\n+                                                                                               throw new UnsupportedOperationException(option.toString());\n+                                                         }\n+                                                       } else if (option instanceof CloudStorageOption) {\n         // XXX: We need to interpret these later\n-      } else {\n-        throw new UnsupportedOperationException(option.toString());\n-      }\n-    }\n \n+                                                              } else {\n+                                                                throw new UnsupportedOperationException(option.toString());\n+                                                       }\n+    }\n     if (!metas.isEmpty()) {\n       infoBuilder.setMetadata(metas);\n     }\n     if (!acls.isEmpty()) {\n       infoBuilder.setAcl(acls);\n     }\n-\n     try {\n-      return new CloudStorageWriteChannel(\n-          storage.writer(infoBuilder.build(),\n-              writeOptions.toArray(new Storage.BlobWriteOption[writeOptions.size()])));\n+      return new CloudStorageWriteChannel(storage.writer(infoBuilder.build(), writeOptions.toArray(new Storage.BlobWriteOption[writeOptions.size()])));\n     } catch (StorageException oops) {\n       throw asIoException(oops);\n     }\n@@ -363,7 +340,8 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     if (cloudPath.seemsLikeADirectoryAndUsePseudoDirectories()) {\n       // if the \"folder\" is empty then we're fine, otherwise complain\n       // that we cannot act on folders.\n-      try (DirectoryStream<Path> paths = Files.newDirectoryStream(path)) {\n+      try (DirectoryStream<Path> paths =\n+        Files.newDirectoryStream(path)) {\n         if (!paths.iterator().hasNext()) {\n           // \"folder\" isn't actually there in the first place, so: success!\n           // (we must return true so delete doesn't freak out)\n@@ -389,10 +367,9 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     initStorage();\n     for (CopyOption option : options) {\n       if (option == StandardCopyOption.ATOMIC_MOVE) {\n-        throw new AtomicMoveNotSupportedException(\n-            source.toString(),\n+        throw new AtomicMoveNotSupportedException(source.toString(),\n             target.toString(),\n-            \"Google Cloud Storage does not support atomic move operations.\");\n+              \"Google Cloud Storage does not support atomic move operations.\");\n       }\n     }\n     copy(source, target, options);\n@@ -408,68 +385,55 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     boolean setCacheControl = false;\n     boolean setContentEncoding = false;\n     boolean setContentDisposition = false;\n-\n     CloudStoragePath toPath = CloudStorageUtil.checkPath(target);\n     BlobInfo.Builder tgtInfoBuilder = BlobInfo.newBuilder(toPath.getBlobId()).setContentType(\"\");\n-\n     int blockSize = -1;\n     for (CopyOption option : options) {\n       if (option instanceof StandardCopyOption) {\n-        switch ((StandardCopyOption) option) {\n+        switch((StandardCopyOption) option) {\n           case COPY_ATTRIBUTES:\n-            wantCopyAttributes = true;\n-            break;\n+                                              wantCopyAttributes = true;\n+                                              break;\n           case REPLACE_EXISTING:\n-            wantReplaceExisting = true;\n-            break;\n-          case ATOMIC_MOVE:\n-          default:\n-            throw new UnsupportedOperationException(option.toString());\n+                                              wantReplaceExisting = true;\n+                                              break;\n+          case ATOMIC_MOVE: default:\n+                                              throw new UnsupportedOperationException(option.toString());\n         }\n       } else if (option instanceof CloudStorageOption) {\n-        if (option instanceof OptionBlockSize) {\n-          blockSize = ((OptionBlockSize) option).size();\n-        } else if (option instanceof OptionMimeType) {\n-          tgtInfoBuilder.setContentType(((OptionMimeType) option).mimeType());\n-          setContentType = true;\n-        } else if (option instanceof OptionCacheControl) {\n-          tgtInfoBuilder.setCacheControl(((OptionCacheControl) option).cacheControl());\n-          setCacheControl = true;\n-        } else if (option instanceof OptionContentEncoding) {\n-          tgtInfoBuilder.setContentEncoding(((OptionContentEncoding) option).contentEncoding());\n-          setContentEncoding = true;\n-        } else if (option instanceof OptionContentDisposition) {\n-          tgtInfoBuilder.setContentDisposition(\n-              ((OptionContentDisposition) option).contentDisposition());\n-          setContentDisposition = true;\n-        } else {\n-          throw new UnsupportedOperationException(option.toString());\n-        }\n-      } else {\n-        throw new UnsupportedOperationException(option.toString());\n+               if (option instanceof OptionBlockSize) {\n+                 blockSize = ((OptionBlockSize) option).size();\n+               } else if (option instanceof OptionMimeType) {\n+                        tgtInfoBuilder.setContentType(((OptionMimeType) option).mimeType());\n+                        setContentType = true;\n+                      } else if (option instanceof OptionCacheControl) {\n+                               tgtInfoBuilder.setCacheControl(((OptionCacheControl) option).cacheControl());\n+                               setCacheControl = true;\n+                             } else if (option instanceof OptionContentEncoding) {\n+                                      tgtInfoBuilder.setContentEncoding(((OptionContentEncoding) option).contentEncoding());\n+                                      setContentEncoding = true;\n+                                    } else if (option instanceof OptionContentDisposition) {\n+                                             tgtInfoBuilder.setContentDisposition(((OptionContentDisposition) option).contentDisposition());\n+                                             setContentDisposition = true;\n+                                           } else {\n+                                             throw new UnsupportedOperationException(option.toString());\n+                                    }\n+             } else {\n+               throw new UnsupportedOperationException(option.toString());\n       }\n     }\n-\n     CloudStoragePath fromPath = CloudStorageUtil.checkPath(source);\n-\n-    blockSize =\n-        blockSize != -1\n-            ? blockSize\n-            : Ints.max(\n-                fromPath.getFileSystem().config().blockSize(),\n-                toPath.getFileSystem().config().blockSize());\n+    blockSize = blockSize != -1 ? blockSize : Ints.max(fromPath.getFileSystem().config().blockSize(), toPath.getFileSystem().config().blockSize());\n     // TODO: actually use blockSize\n-\n-    if (fromPath.seemsLikeADirectory() && toPath.seemsLikeADirectory()) {\n+    if (fromPath.seemsLikeADirectory()\n+      && toPath.seemsLikeADirectory()) {\n       if (fromPath.getFileSystem().config().usePseudoDirectories()\n-          && toPath.getFileSystem().config().usePseudoDirectories()) {\n+        && toPath.getFileSystem().config().usePseudoDirectories()) {\n         // NOOP: This would normally create an empty directory.\n         return;\n       } else {\n-        checkArgument(\n-            !fromPath.getFileSystem().config().usePseudoDirectories()\n-                && !toPath.getFileSystem().config().usePseudoDirectories(),\n-            \"File systems associated with paths don't agree on pseudo-directories.\");\n+        checkArgument(!fromPath.getFileSystem().config().usePseudoDirectories()\n+          && !toPath.getFileSystem().config().usePseudoDirectories(), \"File systems associated with paths don't agree on pseudo-directories.\");\n       }\n     }\n     if (fromPath.seemsLikeADirectoryAndUsePseudoDirectories()) {\n@@ -478,7 +442,6 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     if (toPath.seemsLikeADirectoryAndUsePseudoDirectories()) {\n       throw new CloudStoragePseudoDirectoryException(toPath);\n     }\n-\n     try {\n       if (wantCopyAttributes) {\n         BlobInfo blobInfo = storage.get(fromPath.getBlobId());\n@@ -500,10 +463,8 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n         tgtInfoBuilder.setAcl(blobInfo.getAcl());\n         tgtInfoBuilder.setMetadata(blobInfo.getMetadata());\n       }\n-\n       BlobInfo tgtInfo = tgtInfoBuilder.build();\n-      Storage.CopyRequest.Builder copyReqBuilder =\n-          Storage.CopyRequest.newBuilder().setSource(fromPath.getBlobId());\n+      Storage.CopyRequest.Builder copyReqBuilder = Storage.CopyRequest.newBuilder().setSource(fromPath.getBlobId());\n       if (wantReplaceExisting) {\n         copyReqBuilder = copyReqBuilder.setTarget(tgtInfo);\n       } else {\n@@ -524,6 +485,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n   /**\n    * Always returns {@code false}, because Google Cloud Storage doesn't support hidden files.\n    */\n+\n   @Override\n   public boolean isHidden(Path path) {\n     CloudStorageUtil.checkPath(path);\n@@ -534,28 +496,24 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n   public void checkAccess(Path path, AccessMode... modes) throws IOException {\n     initStorage();\n     for (AccessMode mode : modes) {\n-      switch (mode) {\n-        case READ:\n-        case WRITE:\n-          break;\n-        case EXECUTE:\n-        default:\n-          throw new UnsupportedOperationException(mode.toString());\n+      switch(mode) {\n+        case READ: case WRITE:\n+                     break;\n+        case EXECUTE: default:\n+                     throw new UnsupportedOperationException(mode.toString());\n       }\n     }\n     CloudStoragePath cloudPath = CloudStorageUtil.checkPath(path);\n     if (cloudPath.seemsLikeADirectoryAndUsePseudoDirectories()) {\n       return;\n     }\n-    if (storage.get(cloudPath.getBlobId(), Storage.BlobGetOption.fields(Storage.BlobField.ID))\n-        == null) {\n+    if (storage.get(cloudPath.getBlobId(), Storage.BlobGetOption.fields(Storage.BlobField.ID)) == null) {\n       throw new NoSuchFileException(path.toString());\n     }\n   }\n \n   @Override\n-  public <A extends BasicFileAttributes> A readAttributes(\n-      Path path, Class<A> type, LinkOption... options) throws IOException {\n+  public <A extends BasicFileAttributes> A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException {\n     checkNotNull(type);\n     CloudStorageUtil.checkNotNullArray(options);\n     if (type != CloudStorageFileAttributes.class && type != BasicFileAttributes.class) {\n@@ -571,8 +529,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     BlobInfo blobInfo = storage.get(cloudPath.getBlobId());\n     // null size indicate a file that we haven't closed yet, so GCS treats it as not there yet.\n     if (null == blobInfo || blobInfo.getSize() == null) {\n-      throw new NoSuchFileException(\n-          cloudPath.getBlobId().getBucket() + \"/\" + cloudPath.getBlobId().getName());\n+      throw new NoSuchFileException(cloudPath.getBlobId().getBucket() + \"/\" + cloudPath.getBlobId().getName());\n     }\n     CloudStorageObjectAttributes ret;\n     ret = new CloudStorageObjectAttributes(blobInfo);\n@@ -590,8 +547,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n   }\n \n   @Override\n-  public <V extends FileAttributeView> V getFileAttributeView(\n-      Path path, Class<V> type, LinkOption... options) {\n+  public <V extends FileAttributeView> V getFileAttributeView(Path path, Class<V> type, LinkOption... options) {\n     checkNotNull(type);\n     CloudStorageUtil.checkNotNullArray(options);\n     if (type != CloudStorageFileAttributeView.class && type != BasicFileAttributeView.class) {\n@@ -606,6 +562,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n   /**\n    * Does nothing since Google Cloud Storage uses fake directories.\n    */\n+\n   @Override\n   public void createDirectory(Path dir, FileAttribute<?>... attrs) {\n     CloudStorageUtil.checkPath(dir);\n@@ -619,24 +576,27 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     initStorage();\n     String prefix = cloudPath.toRealPath().toString();\n     final Iterator<Blob> blobIterator = storage.list(cloudPath.bucket(),\n-        Storage.BlobListOption.prefix(prefix), Storage.BlobListOption.currentDirectory(),\n-        Storage.BlobListOption.fields()).iterateAll();\n+      Storage.BlobListOption.prefix(prefix),\n+        Storage.BlobListOption.currentDirectory(),\n+          Storage.BlobListOption.fields()).iterateAll();\n     return new DirectoryStream<Path>() {\n-      @Override\n-      public Iterator<Path> iterator() {\n-        return new LazyPathIterator(cloudPath.getFileSystem(), blobIterator, filter);\n-      }\n+@Override\n+public Iterator<Path> iterator() {\n+  return new LazyPathIterator(cloudPath.getFileSystem(), blobIterator, filter);\n+}\n \n-      @Override\n-      public void close() throws IOException {\n+@Override\n+public void close() throws IOException {\n         // Does nothing since there's nothing to close. Commenting this method to quiet codacy.\n-      }\n-    };\n+\n+}\n+           };\n   }\n \n   /**\n    * Throws {@link UnsupportedOperationException} because Cloud Storage objects are immutable.\n    */\n+\n   @Override\n   public void setAttribute(Path path, String attribute, Object value, LinkOption... options) {\n     throw new CloudStorageObjectImmutableException();\n@@ -645,6 +605,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n   /**\n    * Throws {@link UnsupportedOperationException} because this feature hasn't been implemented yet.\n    */\n+\n   @Override\n   public FileStore getFileStore(Path path) {\n     throw new UnsupportedOperationException();\n@@ -652,9 +613,7 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n \n   @Override\n   public boolean equals(Object other) {\n-    return this == other\n-        || other instanceof CloudStorageFileSystemProvider\n-            && Objects.equals(storage, ((CloudStorageFileSystemProvider) other).storage);\n+    return this == other || other instanceof CloudStorageFileSystemProvider && Objects.equals(storage, ((CloudStorageFileSystemProvider) other).storage);\n   }\n \n   @Override\n@@ -675,7 +634,6 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     if (oops.getCode() == 404) {\n       return new NoSuchFileException(oops.getReason());\n     }\n-\n     Throwable cause = oops.getCause();\n     try {\n       if (cause instanceof FileAlreadyExistsException) {\n@@ -688,4 +646,4 @@ public final class CloudStorageFileSystemProvider extends FileSystemProvider {\n     }\n     return new IOException(oops.getMessage(), oops);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 190
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "236",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "236",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}