{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3463",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "158",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "163",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3463/ExplicitIndexTransactionStateImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3463/ExplicitIndexTransactionStateImpl.java\nindex 5bf01ff013b..c9ff3355736 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3463/ExplicitIndexTransactionStateImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3463/ExplicitIndexTransactionStateImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.state;\n \n import java.util.ArrayList;\n@@ -57,194 +58,192 @@ import static org.neo4j.kernel.impl.index.ExplicitIndexStore.assertConfigMatches\n  */\n public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransactionState, IndexCommandFactory\n {\n-    private final Map<String,ExplicitIndexProviderTransaction> transactions = new HashMap<>();\n-    private final IndexConfigStore indexConfigStore;\n-    private final Function<String,IndexImplementation> providerLookup;\n-\n-    // Commands\n-    private IndexDefineCommand defineCommand;\n-    private final Map<String, List<IndexCommand>> nodeCommands = new HashMap<>();\n-    private final Map<String, List<IndexCommand>> relationshipCommands = new HashMap<>();\n-\n-    public ExplicitIndexTransactionStateImpl( IndexConfigStore indexConfigStore,\n-            Function<String,IndexImplementation> providerLookup )\n-    {\n-        this.indexConfigStore = indexConfigStore;\n-        this.providerLookup = providerLookup;\n-    }\n-\n-    @Override\n-    public ExplicitIndex nodeChanges( String indexName ) throws ExplicitIndexNotFoundKernelException\n-    {\n-        Map<String, String> configuration = indexConfigStore.get( Node.class, indexName );\n-        if ( configuration == null )\n-        {\n-            throw new ExplicitIndexNotFoundKernelException( \"Node index '\" + indexName + \" not found\" );\n-        }\n-        String providerName = configuration.get( IndexManager.PROVIDER );\n-        IndexImplementation provider = providerLookup.apply( providerName );\n-        ExplicitIndexProviderTransaction transaction =\n-                transactions.computeIfAbsent( providerName, k -> provider.newTransaction( this ) );\n-        return transaction.nodeIndex( indexName, configuration );\n-    }\n-\n-    @Override\n-    public ExplicitIndex relationshipChanges( String indexName ) throws ExplicitIndexNotFoundKernelException\n-    {\n-        Map<String, String> configuration = indexConfigStore.get( Relationship.class, indexName );\n-        if ( configuration == null )\n-        {\n-            throw new ExplicitIndexNotFoundKernelException( \"Relationship index '\" + indexName + \" not found\" );\n-        }\n-        String providerName = configuration.get( IndexManager.PROVIDER );\n-        IndexImplementation provider = providerLookup.apply( providerName );\n-        ExplicitIndexProviderTransaction transaction = transactions.get( providerName );\n-        if ( transaction == null )\n-        {\n-            transactions.put( providerName, transaction = provider.newTransaction( this ) );\n-        }\n-        return transaction.relationshipIndex( indexName, configuration );\n-    }\n-\n-    @Override\n-    public void extractCommands( Collection<StorageCommand> target )\n-    {\n-        if ( defineCommand != null )\n-        {\n-            target.add( defineCommand );\n-            extractCommands( target, nodeCommands );\n-            extractCommands( target, relationshipCommands );\n-        }\n-\n-        for ( ExplicitIndexProviderTransaction providerTransaction : transactions.values() )\n-        {\n-            providerTransaction.close();\n-        }\n-    }\n-\n-    private void extractCommands( Collection<StorageCommand> target, Map<String, List<IndexCommand>> commandMap )\n-    {\n-        if ( commandMap != null )\n-        {\n-            for ( List<IndexCommand> commands : commandMap.values() )\n-            {\n-                target.addAll( commands );\n-            }\n-        }\n-    }\n-\n-    // Methods for adding commands\n-    private IndexDefineCommand definitions()\n-    {\n-        if ( defineCommand == null )\n-        {\n-            defineCommand = new IndexDefineCommand();\n-        }\n-        return defineCommand;\n-    }\n+  private final Map<String, ExplicitIndexProviderTransaction> transactions = new HashMap<>();\n+  private final IndexConfigStore indexConfigStore;\n+  private final Function<String, IndexImplementation> providerLookup;\n \n-    private void addCommand( String indexName, IndexCommand command )\n-    {\n-        addCommand( indexName, command, false );\n-    }\n-\n-    private void addCommand( String indexName, IndexCommand command, boolean clearFirst )\n-    {\n-        List<IndexCommand> commands = null;\n-        if ( command.getEntityType() == IndexEntityType.Node.id() )\n-        {\n-            commands = nodeCommands.computeIfAbsent( indexName, k -> new ArrayList<>() );\n-        }\n-        else if ( command.getEntityType() == IndexEntityType.Relationship.id() )\n-        {\n-            commands = relationshipCommands.computeIfAbsent( indexName, k -> new ArrayList<>() );\n-        }\n-        else\n-        {\n-            throw new IllegalArgumentException( \"\" + command.getEntityType() );\n-        }\n-\n-        if ( clearFirst )\n-        {\n-            commands.clear();\n-        }\n-\n-        commands.add( command );\n-    }\n-\n-    @Override\n-    public void addNode( String indexName, long id, String key, Object value )\n-    {\n-        AddNodeCommand command = new AddNodeCommand();\n-        command.init( definitions().getOrAssignIndexNameId( indexName ),\n-                id, definitions().getOrAssignKeyId( key ), value );\n-        addCommand( indexName, command );\n-    }\n-\n-    @Override\n-    public void addRelationship( String indexName, long id, String key, Object value,\n-            long startNode, long endNode )\n-    {\n-        AddRelationshipCommand command = new AddRelationshipCommand();\n-        command.init( definitions().getOrAssignIndexNameId( indexName ),\n-                id, definitions().getOrAssignKeyId( key ), value, startNode, endNode );\n-        addCommand( indexName, command );\n-    }\n-\n-    @Override\n-    public void removeNode( String indexName, long id,\n-            String keyOrNull, Object valueOrNull )\n-    {\n-        RemoveCommand command = new RemoveCommand();\n-        command.init( definitions().getOrAssignIndexNameId( indexName ),\n-                IndexEntityType.Node.id(), id, definitions().getOrAssignKeyId( keyOrNull ), valueOrNull );\n-        addCommand( indexName, command );\n-    }\n-\n-    @Override\n-    public void removeRelationship( String indexName, long id,\n-            String keyOrNull, Object valueOrNull )\n-    {\n-        RemoveCommand command = new RemoveCommand();\n-        command.init( definitions().getOrAssignIndexNameId( indexName ),\n-                IndexEntityType.Relationship.id(), id, definitions().getOrAssignKeyId( keyOrNull ), valueOrNull );\n-        addCommand( indexName, command );\n-    }\n+  // Commands\n+  private IndexDefineCommand defineCommand;\n+  private final Map<String, List<IndexCommand>> nodeCommands = new HashMap<>();\n+  private final Map<String, List<IndexCommand>> relationshipCommands = new HashMap<>();\n \n-    @Override\n-    public void deleteIndex( IndexEntityType entityType, String indexName )\n-    {\n-        DeleteCommand command = new DeleteCommand();\n-        command.init( definitions().getOrAssignIndexNameId( indexName ), entityType.id() );\n-        addCommand( indexName, command, true );\n-    }\n+  public ExplicitIndexTransactionStateImpl(IndexConfigStore indexConfigStore,\n+                                           Function<String, IndexImplementation> providerLookup)\n+  {\n+    this.indexConfigStore = indexConfigStore;\n+    this.providerLookup = providerLookup;\n+  }\n \n-    @Override\n-    public void createIndex( IndexEntityType entityType, String indexName, Map<String, String> config )\n+  @Override\n+  public ExplicitIndex nodeChanges(String indexName) throws ExplicitIndexNotFoundKernelException\n+  {\n+    Map<String, String> configuration = indexConfigStore.get(Node.class, indexName);\n+    if (configuration == null)\n     {\n-        CreateCommand command = new CreateCommand();\n-        command.init( definitions().getOrAssignIndexNameId( indexName ), entityType.id(), config );\n-        addCommand( indexName, command );\n+      throw new ExplicitIndexNotFoundKernelException(\"Node index '\" + indexName + \" not found\");\n     }\n+    String providerName = configuration.get(IndexManager.PROVIDER);\n+    IndexImplementation provider = providerLookup.apply(providerName);\n+    ExplicitIndexProviderTransaction transaction =\n+        transactions.computeIfAbsent(providerName, k -> provider.newTransaction(this));\n+    return transaction.nodeIndex(indexName, configuration);\n+  }\n \n-    @Override\n-    public boolean hasChanges()\n+  @Override\n+  public ExplicitIndex relationshipChanges(String indexName) throws ExplicitIndexNotFoundKernelException\n+  {\n+    Map<String, String> configuration = indexConfigStore.get(Relationship.class, indexName);\n+    if (configuration == null)\n     {\n-        return defineCommand != null;\n+      throw new ExplicitIndexNotFoundKernelException(\"Relationship index '\" + indexName + \" not found\");\n     }\n-\n-    @Override\n-    public boolean checkIndexExistence( IndexEntityType entityType, String indexName, Map<String,String> config )\n+    String providerName = configuration.get(IndexManager.PROVIDER);\n+    IndexImplementation provider = providerLookup.apply(providerName);\n+    ExplicitIndexProviderTransaction transaction = transactions.get(providerName);\n+    if (transaction == null)\n     {\n-        Map<String, String> configuration = indexConfigStore.get( entityType.entityClass(), indexName );\n-        if ( configuration == null )\n-        {\n-            return false;\n-        }\n-\n-        String providerName = configuration.get( IndexManager.PROVIDER );\n-        IndexImplementation provider = providerLookup.apply( providerName );\n-        assertConfigMatches( provider, indexName, configuration, config );\n-        return true;\n+      transactions.put(providerName, transaction = provider.newTransaction(this));\n     }\n+    return transaction.relationshipIndex(indexName, configuration);\n+  }\n+\n+  @Override\n+  public void extractCommands(Collection<StorageCommand> target)\n+  {\n+    if (defineCommand != null)\n+    {\n+      target.add(defineCommand);\n+      extractCommands(target, nodeCommands);\n+      extractCommands(target, relationshipCommands);\n+    }\n+\n+    for (ExplicitIndexProviderTransaction providerTransaction : transactions.values())\n+    {\n+      providerTransaction.close();\n+    }\n+  }\n+\n+  private void extractCommands(Collection<StorageCommand> target, Map<String, List<IndexCommand>> commandMap)\n+  {\n+    if (commandMap != null)\n+    {\n+      for (List<IndexCommand> commands : commandMap.values())\n+      {\n+        target.addAll(commands);\n+      }\n+    }\n+  }\n+\n+  // Methods for adding commands\n+  private IndexDefineCommand definitions()\n+  {\n+    if (defineCommand == null)\n+    {\n+      defineCommand = new IndexDefineCommand();\n+    }\n+    return defineCommand;\n+  }\n+\n+  private void addCommand(String indexName, IndexCommand command)\n+  {\n+    addCommand(indexName, command, false);\n+  }\n+\n+  private void addCommand(String indexName, IndexCommand command, boolean clearFirst)\n+  {\n+    List<IndexCommand> commands = null;\n+    if (command.getEntityType() == IndexEntityType.Node.id())\n+    {\n+      commands = nodeCommands.computeIfAbsent(indexName, k -> new ArrayList<>());\n+    } else if (command.getEntityType() == IndexEntityType.Relationship.id())\n+    {\n+      commands = relationshipCommands.computeIfAbsent(indexName, k -> new ArrayList<>());\n+    } else\n+    {\n+      throw new IllegalArgumentException(\"\" + command.getEntityType());\n+    }\n+\n+    if (clearFirst)\n+    {\n+      commands.clear();\n+    }\n+\n+    commands.add(command);\n+  }\n+\n+  @Override\n+  public void addNode(String indexName, long id, String key, Object value)\n+  {\n+    AddNodeCommand command = new AddNodeCommand();\n+    command.init(definitions().getOrAssignIndexNameId(indexName),\n+        id, definitions().getOrAssignKeyId(key), value);\n+    addCommand(indexName, command);\n+  }\n+\n+  @Override\n+  public void addRelationship(String indexName, long id, String key, Object value,\n+                              long startNode, long endNode)\n+  {\n+    AddRelationshipCommand command = new AddRelationshipCommand();\n+    command.init(definitions().getOrAssignIndexNameId(indexName),\n+        id, definitions().getOrAssignKeyId(key), value, startNode, endNode);\n+    addCommand(indexName, command);\n+  }\n+\n+  @Override\n+  public void removeNode(String indexName, long id,\n+                         String keyOrNull, Object valueOrNull)\n+  {\n+    RemoveCommand command = new RemoveCommand();\n+    command.init(definitions().getOrAssignIndexNameId(indexName),\n+        IndexEntityType.Node.id(), id, definitions().getOrAssignKeyId(keyOrNull), valueOrNull);\n+    addCommand(indexName, command);\n+  }\n+\n+  @Override\n+  public void removeRelationship(String indexName, long id,\n+                                 String keyOrNull, Object valueOrNull)\n+  {\n+    RemoveCommand command = new RemoveCommand();\n+    command.init(definitions().getOrAssignIndexNameId(indexName),\n+        IndexEntityType.Relationship.id(), id, definitions().getOrAssignKeyId(keyOrNull), valueOrNull);\n+    addCommand(indexName, command);\n+  }\n+\n+  @Override\n+  public void deleteIndex(IndexEntityType entityType, String indexName)\n+  {\n+    DeleteCommand command = new DeleteCommand();\n+    command.init(definitions().getOrAssignIndexNameId(indexName), entityType.id());\n+    addCommand(indexName, command, true);\n+  }\n+\n+  @Override\n+  public void createIndex(IndexEntityType entityType, String indexName, Map<String, String> config)\n+  {\n+    CreateCommand command = new CreateCommand();\n+    command.init(definitions().getOrAssignIndexNameId(indexName), entityType.id(), config);\n+    addCommand(indexName, command);\n+  }\n+\n+  @Override\n+  public boolean hasChanges()\n+  {\n+    return defineCommand != null;\n+  }\n+\n+  @Override\n+  public boolean checkIndexExistence(IndexEntityType entityType, String indexName, Map<String, String> config)\n+  {\n+    Map<String, String> configuration = indexConfigStore.get(entityType.entityClass(), indexName);\n+    if (configuration == null)\n+    {\n+      return false;\n+    }\n+\n+    String providerName = configuration.get(IndexManager.PROVIDER);\n+    IndexImplementation provider = providerLookup.apply(providerName);\n+    assertConfigMatches(provider, indexName, configuration, config);\n+    return true;\n+  }\n }\n",
            "diff_size": 336
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3463/ExplicitIndexTransactionStateImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3463/ExplicitIndexTransactionStateImpl.java\nindex 5bf01ff013b..bd5647a9401 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3463/ExplicitIndexTransactionStateImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3463/ExplicitIndexTransactionStateImpl.java\n@@ -66,8 +66,7 @@ public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransacti\n     private final Map<String, List<IndexCommand>> nodeCommands = new HashMap<>();\n     private final Map<String, List<IndexCommand>> relationshipCommands = new HashMap<>();\n \n-    public ExplicitIndexTransactionStateImpl( IndexConfigStore indexConfigStore,\n-            Function<String,IndexImplementation> providerLookup )\n+    public ExplicitIndexTransactionStateImpl( IndexConfigStore indexConfigStore, Function<String,IndexImplementation> providerLookup )\n     {\n         this.indexConfigStore = indexConfigStore;\n         this.providerLookup = providerLookup;\n@@ -76,34 +75,36 @@ public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransacti\n     @Override\n     public ExplicitIndex nodeChanges( String indexName ) throws ExplicitIndexNotFoundKernelException\n     {\n-        Map<String, String> configuration = indexConfigStore.get( Node.class, indexName );\n+        Map<String,String> configuration = indexConfigStore.get( Node.class, indexName );\n         if ( configuration == null )\n         {\n             throw new ExplicitIndexNotFoundKernelException( \"Node index '\" + indexName + \" not found\" );\n         }\n-        String providerName = configuration.get( IndexManager.PROVIDER );\n+\n+String providerName = configuration.get( IndexManager.PROVIDER );\n         IndexImplementation provider = providerLookup.apply( providerName );\n-        ExplicitIndexProviderTransaction transaction =\n-                transactions.computeIfAbsent( providerName, k -> provider.newTransaction( this ) );\n-        return transaction.nodeIndex( indexName, configuration );\n+        ExplicitIndexProviderTransaction transaction = transactions.computeIfAbsent( providerName, k -> provider.newTransaction( this ) );\n+return transaction.nodeIndex( indexName, configuration );\n     }\n \n     @Override\n     public ExplicitIndex relationshipChanges( String indexName ) throws ExplicitIndexNotFoundKernelException\n     {\n-        Map<String, String> configuration = indexConfigStore.get( Relationship.class, indexName );\n+        Map<String,String> configuration = indexConfigStore.get( Relationship.class, indexName );\n         if ( configuration == null )\n         {\n             throw new ExplicitIndexNotFoundKernelException( \"Relationship index '\" + indexName + \" not found\" );\n         }\n-        String providerName = configuration.get( IndexManager.PROVIDER );\n+\n+String providerName = configuration.get( IndexManager.PROVIDER );\n         IndexImplementation provider = providerLookup.apply( providerName );\n         ExplicitIndexProviderTransaction transaction = transactions.get( providerName );\n         if ( transaction == null )\n         {\n             transactions.put( providerName, transaction = provider.newTransaction( this ) );\n         }\n-        return transaction.relationshipIndex( indexName, configuration );\n+\n+return transaction.relationshipIndex( indexName, configuration );\n     }\n \n     @Override\n@@ -140,7 +141,8 @@ public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransacti\n         {\n             defineCommand = new IndexDefineCommand();\n         }\n-        return defineCommand;\n+\n+return defineCommand;\n     }\n \n     private void addCommand( String indexName, IndexCommand command )\n@@ -178,7 +180,7 @@ public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransacti\n         AddNodeCommand command = new AddNodeCommand();\n         command.init( definitions().getOrAssignIndexNameId( indexName ),\n                 id, definitions().getOrAssignKeyId( key ), value );\n-        addCommand( indexName, command );\n+addCommand( indexName, command );\n     }\n \n     @Override\n@@ -188,7 +190,7 @@ public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransacti\n         AddRelationshipCommand command = new AddRelationshipCommand();\n         command.init( definitions().getOrAssignIndexNameId( indexName ),\n                 id, definitions().getOrAssignKeyId( key ), value, startNode, endNode );\n-        addCommand( indexName, command );\n+addCommand( indexName, command );\n     }\n \n     @Override\n@@ -196,9 +198,8 @@ public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransacti\n             String keyOrNull, Object valueOrNull )\n     {\n         RemoveCommand command = new RemoveCommand();\n-        command.init( definitions().getOrAssignIndexNameId( indexName ),\n-                IndexEntityType.Node.id(), id, definitions().getOrAssignKeyId( keyOrNull ), valueOrNull );\n-        addCommand( indexName, command );\n+        command.init( definitions().getOrAssignIndexNameId( indexName ), IndexEntityType.Node.id(), id, definitions().getOrAssignKeyId( keyOrNull ), valueOrNull );\n+addCommand( indexName, command );\n     }\n \n     @Override\n@@ -206,9 +207,8 @@ public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransacti\n             String keyOrNull, Object valueOrNull )\n     {\n         RemoveCommand command = new RemoveCommand();\n-        command.init( definitions().getOrAssignIndexNameId( indexName ),\n-                IndexEntityType.Relationship.id(), id, definitions().getOrAssignKeyId( keyOrNull ), valueOrNull );\n-        addCommand( indexName, command );\n+        command.init( definitions().getOrAssignIndexNameId( indexName ), IndexEntityType.Relationship.id(), id, definitions().getOrAssignKeyId( keyOrNull ), valueOrNull );\n+addCommand( indexName, command );\n     }\n \n     @Override\n@@ -220,7 +220,7 @@ public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransacti\n     }\n \n     @Override\n-    public void createIndex( IndexEntityType entityType, String indexName, Map<String, String> config )\n+    public void createIndex( IndexEntityType entityType, String indexName, Map<String,String> config )\n     {\n         CreateCommand command = new CreateCommand();\n         command.init( definitions().getOrAssignIndexNameId( indexName ), entityType.id(), config );\n@@ -236,7 +236,7 @@ public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransacti\n     @Override\n     public boolean checkIndexExistence( IndexEntityType entityType, String indexName, Map<String,String> config )\n     {\n-        Map<String, String> configuration = indexConfigStore.get( entityType.entityClass(), indexName );\n+        Map<String,String> configuration = indexConfigStore.get( entityType.entityClass(), indexName );\n         if ( configuration == null )\n         {\n             return false;\n@@ -247,4 +247,4 @@ public class ExplicitIndexTransactionStateImpl implements ExplicitIndexTransacti\n         assertConfigMatches( provider, indexName, configuration, config );\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}