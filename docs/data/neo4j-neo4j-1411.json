{
    "project_name": "neo4j-neo4j",
    "error_id": "1411",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "220",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "250",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "268",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "274",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "313",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1411/ByteCodeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1411/ByteCodeUtils.java\nindex bb76baacbee..93a2a5e1949 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1411/ByteCodeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1411/ByteCodeUtils.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.lang.reflect.Method;\n@@ -34,221 +35,219 @@ public final class ByteCodeUtils\n         throw new UnsupportedOperationException();\n     }\n \n-    public static String byteCodeName( TypeReference reference )\n+    public static String byteCodeName(TypeReference reference)\n     {\n-       return className( reference ).replaceAll( \"\\\\.\", \"/\" );\n+        return className(reference).replaceAll(\"\\\\.\", \"/\");\n     }\n \n-    public static String className( TypeReference reference )\n+    public static String className(TypeReference reference)\n     {\n         StringBuilder builder = new StringBuilder();\n-        builder.append( \"[\".repeat( Math.max( 0, reference.arrayDepth() ) ) );\n-        if ( reference.arrayDepth() > 0 )\n+        builder.append(\"[\".repeat(Math.max(0, reference.arrayDepth())));\n+        if (reference.arrayDepth() > 0)\n         {\n-            builder.append( 'L' );\n+            builder.append('L');\n         }\n-        if ( !reference.packageName().isEmpty() )\n+        if (!reference.packageName().isEmpty())\n         {\n-            builder.append( reference.packageName() ).append( '.' );\n+            builder.append(reference.packageName()).append('.');\n         }\n \n-        for ( TypeReference parent : reference.declaringClasses() )\n+        for (TypeReference parent : reference.declaringClasses())\n         {\n-            builder.append( parent.name() ).append( '$' );\n+            builder.append(parent.name()).append('$');\n         }\n-        builder.append( reference.name() );\n-        if ( reference.isArray() )\n+        builder.append(reference.name());\n+        if (reference.isArray())\n         {\n-            builder.append( ';' );\n+            builder.append(';');\n         }\n         return builder.toString();\n     }\n \n-    public static String outerName( TypeReference reference )\n+    public static String outerName(TypeReference reference)\n     {\n-        if ( !reference.isInnerClass() )\n+        if (!reference.isInnerClass())\n         {\n             return null;\n         }\n \n         StringBuilder builder = new StringBuilder();\n-        if ( !reference.packageName().isEmpty() )\n+        if (!reference.packageName().isEmpty())\n         {\n-            builder.append( reference.packageName().replaceAll( \"\\\\.\", \"/\" ) ).append( '/' );\n+            builder.append(reference.packageName().replaceAll(\"\\\\.\", \"/\")).append('/');\n         }\n-        builder.append( reference.simpleName() );\n+        builder.append(reference.simpleName());\n \n         return builder.toString();\n     }\n \n-    public static String typeName( TypeReference reference )\n+    public static String typeName(TypeReference reference)\n     {\n         StringBuilder builder = new StringBuilder();\n-        internalType( builder, reference, false );\n+        internalType(builder, reference, false);\n \n         return builder.toString();\n     }\n \n-    public static String desc( MethodDeclaration declaration )\n+    public static String desc(MethodDeclaration declaration)\n     {\n-        return internalDesc( declaration.erased(), false );\n+        return internalDesc(declaration.erased(), false);\n     }\n \n-    public static String desc( MethodReference reference )\n+    public static String desc(MethodReference reference)\n     {\n         StringBuilder builder = new StringBuilder();\n-        builder.append( '(' );\n-        for ( TypeReference parameter : reference.parameters() )\n+        builder.append('(');\n+        for (TypeReference parameter : reference.parameters())\n         {\n-            internalType( builder, parameter, false );\n+            internalType(builder, parameter, false);\n         }\n-        builder.append( ')' );\n-        internalType( builder, reference.returns(), false );\n+        builder.append(')');\n+        internalType(builder, reference.returns(), false);\n \n         return builder.toString();\n     }\n \n-    public static String signature( TypeReference reference )\n+    public static String signature(TypeReference reference)\n     {\n-        if ( !reference.isGeneric() )\n+        if (!reference.isGeneric())\n         {\n             return null;\n         }\n \n-        return internalSignature( reference );\n+        return internalSignature(reference);\n     }\n \n-    public static String signature( MethodDeclaration declaration )\n+    public static String signature(MethodDeclaration declaration)\n     {\n-        if ( !declaration.isGeneric() )\n+        if (!declaration.isGeneric())\n         {\n             return null;\n         }\n-        return internalDesc( declaration, true );\n+        return internalDesc(declaration, true);\n     }\n \n-    public static String[] exceptions( MethodDeclaration declaration )\n+    public static String[] exceptions(MethodDeclaration declaration)\n     {\n \n         List<TypeReference> throwsList = declaration.erased().throwsList();\n-        if ( throwsList.isEmpty() )\n+        if (throwsList.isEmpty())\n         {\n             return null;\n         }\n-        return throwsList.stream().map( ByteCodeUtils::byteCodeName ).toArray( String[]::new );\n+        return throwsList.stream().map(ByteCodeUtils::byteCodeName).toArray(String[]::new);\n     }\n \n-    private static String internalDesc( MethodDeclaration declaration, boolean showErasure )\n+    private static String internalDesc(MethodDeclaration declaration, boolean showErasure)\n     {\n         StringBuilder builder = new StringBuilder();\n         List<MethodDeclaration.TypeParameter> typeParameters = declaration.typeParameters();\n-        if ( showErasure && !typeParameters.isEmpty() )\n+        if (showErasure && !typeParameters.isEmpty())\n         {\n-            builder.append( '<' );\n-            for ( MethodDeclaration.TypeParameter typeParameter : typeParameters )\n+            builder.append('<');\n+            for (MethodDeclaration.TypeParameter typeParameter : typeParameters)\n             {\n-                builder.append( typeParameter.name() ).append( ':' );\n-                internalType( builder, typeParameter.extendsBound(), true );\n+                builder.append(typeParameter.name()).append(':');\n+                internalType(builder, typeParameter.extendsBound(), true);\n             }\n-            builder.append( '>' );\n+            builder.append('>');\n         }\n-        builder.append( '(' );\n-        for ( Parameter parameter : declaration.parameters() )\n+        builder.append('(');\n+        for (Parameter parameter : declaration.parameters())\n         {\n-            internalType( builder, parameter.type(), showErasure );\n+            internalType(builder, parameter.type(), showErasure);\n         }\n-        builder.append( ')' );\n-        internalType( builder, declaration.returnType(), showErasure );\n+        builder.append(')');\n+        internalType(builder, declaration.returnType(), showErasure);\n         List<TypeReference> throwsList = declaration.throwsList();\n-        if ( showErasure && throwsList.stream().anyMatch( TypeReference::isTypeParameter ) )\n+        if (showErasure && throwsList.stream().anyMatch(TypeReference::isTypeParameter))\n         {\n-            builder.append( '^' );\n-            throwsList.forEach( t -> internalType( builder, t, false ) );\n+            builder.append('^');\n+            throwsList.forEach(t -> internalType(builder, t, false));\n         }\n         return builder.toString();\n     }\n \n-    private static String internalSignature( TypeReference reference )\n+    private static String internalSignature(TypeReference reference)\n     {\n-        return internalType( new StringBuilder(), reference, true ).toString();\n+        return internalType(new StringBuilder(), reference, true).toString();\n     }\n \n-    private static StringBuilder internalType( StringBuilder builder, TypeReference reference,\n-            boolean showErasure )\n+    private static StringBuilder internalType(StringBuilder builder, TypeReference reference,\n+                                              boolean showErasure)\n     {\n         String name = reference.name();\n-        builder.append( \"[\".repeat( Math.max( 0, reference.arrayDepth() ) ) );\n-        switch ( name )\n+        builder.append(\"[\".repeat(Math.max(0, reference.arrayDepth())));\n+        switch (name)\n         {\n-        case \"int\":\n-            builder.append( 'I' );\n-            break;\n-        case \"long\":\n-            builder.append( 'J' );\n-            break;\n-        case \"byte\":\n-            builder.append( 'B' );\n-            break;\n-        case \"short\":\n-            builder.append( 'S' );\n-            break;\n-        case \"char\":\n-            builder.append( 'C' );\n-            break;\n-        case \"float\":\n-            builder.append( 'F' );\n-            break;\n-        case \"double\":\n-            builder.append( 'D' );\n-            break;\n-        case \"boolean\":\n-            builder.append( 'Z' );\n-            break;\n-        case \"void\":\n-            builder.append( 'V' );\n-            break;\n+            case \"int\":\n+                builder.append('I');\n+                break;\n+            case \"long\":\n+                builder.append('J');\n+                break;\n+            case \"byte\":\n+                builder.append('B');\n+                break;\n+            case \"short\":\n+                builder.append('S');\n+                break;\n+            case \"char\":\n+                builder.append('C');\n+                break;\n+            case \"float\":\n+                builder.append('F');\n+                break;\n+            case \"double\":\n+                builder.append('D');\n+                break;\n+            case \"boolean\":\n+                builder.append('Z');\n+                break;\n+            case \"void\":\n+                builder.append('V');\n+                break;\n \n-        default:\n-            if ( reference.isTypeParameter() )\n-            {\n-                builder.append( 'T' ).append( name );\n-            }\n-            else\n-            {\n-                builder.append( 'L' );\n-                String packageName = reference.packageName().replaceAll( \"\\\\.\", \"\\\\/\" );\n-                if ( !packageName.isEmpty() )\n+            default:\n+                if (reference.isTypeParameter())\n                 {\n-                    builder.append( packageName ).append( '/' );\n-                }\n-                for ( TypeReference parent : reference.declaringClasses() )\n+                    builder.append('T').append(name);\n+                } else\n                 {\n-                    builder.append( parent.name() ).append( '$' );\n+                    builder.append('L');\n+                    String packageName = reference.packageName().replaceAll(\"\\\\.\", \"\\\\/\");\n+                    if (!packageName.isEmpty())\n+                    {\n+                        builder.append(packageName).append('/');\n+                    }\n+                    for (TypeReference parent : reference.declaringClasses())\n+                    {\n+                        builder.append(parent.name()).append('$');\n+                    }\n+                    builder.append(name.replaceAll(\"\\\\.\", \"\\\\/\"));\n                 }\n-                builder.append( name.replaceAll( \"\\\\.\", \"\\\\/\" ) );\n-            }\n \n-            List<TypeReference> parameters = reference.parameters();\n-            if ( showErasure && !parameters.isEmpty() )\n-            {\n-                builder.append( '<' );\n-                parameters.forEach( p -> internalType( builder, p, true ) );\n-                builder.append( '>' );\n-            }\n-            builder.append( ';' );\n+                List<TypeReference> parameters = reference.parameters();\n+                if (showErasure && !parameters.isEmpty())\n+                {\n+                    builder.append('<');\n+                    parameters.forEach(p -> internalType(builder, p, true));\n+                    builder.append('>');\n+                }\n+                builder.append(';');\n \n         }\n         return builder;\n     }\n \n-    public static void assertMethodExists( MethodReference methodReference )\n+    public static void assertMethodExists(MethodReference methodReference)\n     {\n         Class<?> clazz;\n         try\n         {\n-            clazz = asClass( methodReference.owner() );\n-        }\n-        catch ( AssertionError e )\n+            clazz = asClass(methodReference.owner());\n+        } catch (AssertionError e)\n         {\n             //if the class doesn't exist here it is probably because\n             // it is a generated class that hasn't been loaded yet\n@@ -257,66 +256,63 @@ public final class ByteCodeUtils\n         try\n         {\n             TypeReference[] parameters = methodReference.parameters();\n-            if ( methodReference.isConstructor() )\n+            if (methodReference.isConstructor())\n             {\n                 clazz.getDeclaredConstructor(\n-                        stream( parameters ).map( ByteCodeUtils::asClass ).toArray( Class<?>[]::new ) );\n-            }\n-            else\n+                  stream(parameters).map(ByteCodeUtils::asClass).toArray(Class<?>[]::new));\n+            } else\n             {\n-                Method method = clazz.getMethod( methodReference.name(), stream( parameters )\n-                        .map( ByteCodeUtils::asClass ).toArray( Class<?>[]::new ) );\n-                TypeReference returnType = typeReference( method.getReturnType() );\n-                if ( !methodReference.returns().name().equals( returnType.name() ) )\n+                Method method = clazz.getMethod(methodReference.name(), stream(parameters)\n+                  .map(ByteCodeUtils::asClass).toArray(Class<?>[]::new));\n+                TypeReference returnType = typeReference(method.getReturnType());\n+                if (!methodReference.returns().name().equals(returnType.name()))\n                 {\n-                    throw new AssertionError( format( \"Wrong return type of `%s::%s`, expected %s got %s\",\n-                            clazz.getSimpleName(), methodReference.name(), methodReference.returns(), returnType ) );\n+                    throw new AssertionError(format(\"Wrong return type of `%s::%s`, expected %s got %s\",\n+                      clazz.getSimpleName(), methodReference.name(), methodReference.returns(), returnType));\n                 }\n             }\n-        }\n-        catch ( NoSuchMethodException e )\n+        } catch (NoSuchMethodException e)\n         {\n-            String[] allMethods = stream( clazz.getMethods() ).map( Method::toString ).toArray( String[]::new );\n+            String[] allMethods = stream(clazz.getMethods()).map(Method::toString).toArray(String[]::new);\n             String methodName = methodReference.returns().fullName() + \" \" + methodReference.name() + \"(\" +\n-                                join( \", \", stream( methodReference.parameters() ).map( TypeReference::fullName )\n-                                        .toArray( String[]::new ) ) + \")\";\n-            throw new AssertionError( format( \"%s does not exists.%n Class %s has the following methods:%n%s\",\n-                    methodName,\n-                    clazz.getCanonicalName(),\n-                    join( format( \"%n    \" ), allMethods ) ) );\n+              join(\", \", stream(methodReference.parameters()).map(TypeReference::fullName)\n+                .toArray(String[]::new)) + \")\";\n+            throw new AssertionError(format(\"%s does not exists.%n Class %s has the following methods:%n%s\",\n+              methodName,\n+              clazz.getCanonicalName(),\n+              join(format(\"%n    \"), allMethods)));\n         }\n     }\n \n-    private static Class<?> asClass( TypeReference typeReference )\n+    private static Class<?> asClass(TypeReference typeReference)\n     {\n         try\n         {\n             String className = typeReference.baseName();\n-            switch ( className )\n+            switch (className)\n             {\n-            case \"byte\":\n-                return typeReference.isArray() ? byte[].class : byte.class;\n-            case \"char\":\n-                return typeReference.isArray() ? char[].class : char.class;\n-            case \"short\":\n-                return typeReference.isArray() ? short[].class : short.class;\n-            case \"int\":\n-                return typeReference.isArray() ? int[].class : int.class;\n-            case \"long\":\n-                return typeReference.isArray() ? long[].class : long.class;\n-            case \"float\":\n-                return typeReference.isArray() ? float[].class : float.class;\n-            case \"double\":\n-                return typeReference.isArray() ? double[].class : double.class;\n-            case \"boolean\":\n-                return typeReference.isArray() ? boolean[].class : boolean.class;\n-            default:\n-                return Class.forName( className( typeReference ) );\n+                case \"byte\":\n+                    return typeReference.isArray() ? byte[].class : byte.class;\n+                case \"char\":\n+                    return typeReference.isArray() ? char[].class : char.class;\n+                case \"short\":\n+                    return typeReference.isArray() ? short[].class : short.class;\n+                case \"int\":\n+                    return typeReference.isArray() ? int[].class : int.class;\n+                case \"long\":\n+                    return typeReference.isArray() ? long[].class : long.class;\n+                case \"float\":\n+                    return typeReference.isArray() ? float[].class : float.class;\n+                case \"double\":\n+                    return typeReference.isArray() ? double[].class : double.class;\n+                case \"boolean\":\n+                    return typeReference.isArray() ? boolean[].class : boolean.class;\n+                default:\n+                    return Class.forName(className(typeReference));\n             }\n-        }\n-        catch ( ClassNotFoundException e )\n+        } catch (ClassNotFoundException e)\n         {\n-            throw new AssertionError( format( \"%s does not exists\", typeReference ) );\n+            throw new AssertionError(format(\"%s does not exists\", typeReference));\n         }\n     }\n \n",
            "diff_size": 166
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}