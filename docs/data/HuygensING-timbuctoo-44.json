{
    "project_name": "HuygensING-timbuctoo",
    "error_id": "44",
    "information": {
        "errors": [
            {
                "line": "17",
                "severity": "error",
                "message": "import statement should not be line-wrapped.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
            }
        ]
    },
    "source_code": "import java.util.stream.Stream;\n\nimport static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n  .getPaginatedList;\nimport static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.PaginatedList.encode;\nimport static org.hamcrest.MatcherAssert.assertThat;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/44/PaginationHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler/44/PaginationHelperTest.java\nindex 4c38f61d16f..ce14d1694e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/44/PaginationHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler/44/PaginationHelperTest.java\n@@ -14,8 +14,7 @@ import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n-  .getPaginatedList;\n+import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper.getPaginatedList;\n import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.PaginatedList.encode;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/44/PaginationHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/naturalize/44/PaginationHelperTest.java\nindex 4c38f61d16f..0baa74fe24a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/44/PaginationHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/naturalize/44/PaginationHelperTest.java\n@@ -14,8 +14,7 @@ import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n-  .getPaginatedList;\n+import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper.getPaginatedList;\n import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.PaginatedList.encode;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n@@ -126,4 +125,4 @@ public class PaginationHelperTest {\n   private String decode(Optional<String> encoded) {\n     return encoded.map(s -> new String(DECODER.decode(s.getBytes()))).orElse(null);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 83, expected level should be one of the following: 4, 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 85, expected level should be one of the following: 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 83, expected level should be one of the following: 4, 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 83, expected level should be one of the following: 4, 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 85, expected level should be one of the following: 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 83, expected level should be one of the following: 4, 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 83, expected level should be one of the following: 4, 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 85, expected level should be one of the following: 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 83, expected level should be one of the following: 4, 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'object def rcurly' has incorrect indentation level 81, expected level should be one of the following: 2, 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/44/PaginationHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/codebuff/44/PaginationHelperTest.java\nindex 4c38f61d16f..d3b818b0c32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/44/PaginationHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/codebuff/44/PaginationHelperTest.java\n@@ -6,7 +6,6 @@ import nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.PaginatedList;\n import nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.PaginationArguments;\n import nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.SubjectReference;\n import org.junit.Test;\n-\n import java.util.Base64;\n import java.util.HashSet;\n import java.util.Optional;\n@@ -14,116 +13,85 @@ import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n-  .getPaginatedList;\n+import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper.getPaginatedList;\n import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.PaginatedList.encode;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.nullValue;\n \n public class PaginationHelperTest {\n-\n   private static final Base64.Decoder DECODER = Base64.getDecoder();\n \n-\n   public static final Function<CursorSubject, SubjectReference> MAKE_ITEM = c -> new SubjectReference() {\n-    @Override\n-    public String getSubjectUri() {\n-      return c.getSubjectUri();\n-    }\n-\n-    @Override\n-    public Set<String> getTypes() {\n-      return new HashSet<>();\n-    }\n-\n-    @Override\n-    public DataSet getDataSet() {\n-      return null;\n-    }\n-  };\n-\n+                                                                                   @Override\n+                                                                                   public String getSubjectUri() {\n+                                                                                     return c.getSubjectUri();\n+                                                                                   }\n+\n+                                                                                   @Override\n+                                                                                   public Set<String> getTypes() {\n+                                                                                     return new HashSet<>();\n+                                                                                   }\n+\n+                                                                                   @Override\n+                                                                                   public DataSet getDataSet() {\n+                                                                                     return null;\n+                                                                                   }\n+                                                                                 };\n   @Test\n   public void firstPageHasNullAsPrev() throws Exception {\n-    final PaginatedList<SubjectReference> paginatedList = getPaginatedList(\n-      Stream.of(\n-        CursorSubject.create(\"c1\", \"http://example.org/1\"),\n-        CursorSubject.create(\"c2\", \"http://example.org/2\"),\n-        CursorSubject.create(\"c3\", \"http://example.org/3\"),\n-        CursorSubject.create(\"c4\", \"http://example.org/4\")\n-      ),\n-      MAKE_ITEM,\n-      PaginationArguments.create(2, \"\", Optional.empty())\n-    );\n-\n+    final PaginatedList<SubjectReference> paginatedList = getPaginatedList(Stream.of(CursorSubject.create(\"c1\", \"http://example.org/1\"), CursorSubject.create(\"c2\", \"http://example.org/2\"), CursorSubject.create(\"c3\", \"http://example.org/3\"), CursorSubject.create(\"c4\", \"http://example.org/4\")), MAKE_ITEM, PaginationArguments.create(2, \"\", Optional.empty()));\n     assertThat(decode(paginatedList.getNextCursor()), is(\"A\\nc2\"));\n     assertThat(paginatedList.getPrevCursor(), is(Optional.empty()));\n     assertThat(paginatedList.getItems().size(), is(2));\n-    assertThat(paginatedList.getItems().get(0).getSubjectUri(), is(\"http://example.org/1\"));\n-    assertThat(paginatedList.getItems().get(1).getSubjectUri(), is(\"http://example.org/2\"));\n+    assertThat(paginatedList.getItems().get(0)\n+                                       .getSubjectUri(), is(\"http://example.org/1\"));\n+    assertThat(paginatedList.getItems().get(1)\n+                                       .getSubjectUri(), is(\"http://example.org/2\"));\n   }\n \n   @Test\n   public void secondPageHasPrevAndNext() throws Exception {\n-    final PaginatedList<SubjectReference> paginatedList = getPaginatedList(\n-      Stream.of(\n-        CursorSubject.create(\"c3\", \"http://example.org/3\"),\n-        CursorSubject.create(\"c4\", \"http://example.org/4\"),\n-        CursorSubject.create(\"c5\", \"http://example.org/4\")\n-      ),\n-      MAKE_ITEM,\n-      PaginationArguments.create(2, encode(\"A\\nc2\"), Optional.empty())\n-    );\n-\n+    final PaginatedList<SubjectReference> paginatedList = getPaginatedList(Stream.of(CursorSubject.create(\"c3\", \"http://example.org/3\"), CursorSubject.create(\"c4\", \"http://example.org/4\"), CursorSubject.create(\"c5\", \"http://example.org/4\")), MAKE_ITEM, PaginationArguments.create(2, encode(\"A\\nc2\"), Optional.empty()));\n     assertThat(decode(paginatedList.getNextCursor()), is(\"A\\nc4\"));\n     assertThat(decode(paginatedList.getPrevCursor()), is(\"D\\nc3\"));\n     assertThat(paginatedList.getItems().size(), is(2));\n-    assertThat(paginatedList.getItems().get(0).getSubjectUri(), is(\"http://example.org/3\"));\n-    assertThat(paginatedList.getItems().get(1).getSubjectUri(), is(\"http://example.org/4\"));\n+    assertThat(paginatedList.getItems().get(0)\n+                                       .getSubjectUri(), is(\"http://example.org/3\"));\n+    assertThat(paginatedList.getItems().get(1)\n+                                       .getSubjectUri(), is(\"http://example.org/4\"));\n   }\n \n   @Test\n   public void lastPageHasNullAsNext() throws Exception {\n-    final PaginatedList<SubjectReference> paginatedList = getPaginatedList(\n-      Stream.of(\n-        CursorSubject.create(\"c4\", \"http://example.org/4\"),\n-        CursorSubject.create(\"c3\", \"http://example.org/3\"),\n-        CursorSubject.create(\"c2\", \"http://example.org/2\"),\n-        CursorSubject.create(\"c1\", \"http://example.org/1\")\n-      ),\n-      MAKE_ITEM,\n-      PaginationArguments.create(2, encode(\"LAST\"), Optional.empty())\n-    );\n-\n+    final PaginatedList<SubjectReference> paginatedList = getPaginatedList(Stream.of(CursorSubject.create(\"c4\", \"http://example.org/4\"), CursorSubject.create(\"c3\", \"http://example.org/3\"), CursorSubject.create(\"c2\", \"http://example.org/2\"), CursorSubject.create(\"c1\", \"http://example.org/1\")), MAKE_ITEM, PaginationArguments.create(2, encode(\"LAST\"), Optional.empty()));\n     assertThat(paginatedList.getNextCursor(), is(Optional.empty()));\n     assertThat(decode(paginatedList.getPrevCursor()), is(\"D\\nc3\"));\n     assertThat(paginatedList.getItems().size(), is(2));\n \n     //still list the items in ascending order\n-    assertThat(paginatedList.getItems().get(0).getSubjectUri(), is(\"http://example.org/3\"));\n-    assertThat(paginatedList.getItems().get(1).getSubjectUri(), is(\"http://example.org/4\"));\n+    assertThat(paginatedList.getItems().get(0)\n+                                       .getSubjectUri(), is(\"http://example.org/3\"));\n+    assertThat(paginatedList.getItems().get(1)\n+                                       .getSubjectUri(), is(\"http://example.org/4\"));\n   }\n \n   @Test\n   public void downwardsToFirstPageIsSameAsStartingFromFirstPage() throws Exception {\n-    final PaginatedList<SubjectReference> paginatedList = getPaginatedList(\n-      Stream.of(\n-        CursorSubject.create(\"c2\", \"http://example.org/2\"),\n-        CursorSubject.create(\"c1\", \"http://example.org/1\")\n-      ),\n-      MAKE_ITEM,\n-      PaginationArguments.create(2, encode(\"D\\nc3\"), Optional.empty())\n-    );\n-\n+    final PaginatedList<SubjectReference> paginatedList = getPaginatedList(Stream.of(\n+                                                                             CursorSubject.create(\"c2\", \"http://example.org/2\"),\n+                                                                             CursorSubject.create(\"c1\", \"http://example.org/1\")\n+                                                                           ), MAKE_ITEM, PaginationArguments.create(2, encode(\"D\\nc3\"), Optional.empty()));\n     assertThat(decode(paginatedList.getNextCursor()), is(\"A\\nc2\"));\n     assertThat(decode(paginatedList.getPrevCursor()), is(nullValue()));\n     assertThat(paginatedList.getItems().size(), is(2));\n-    assertThat(paginatedList.getItems().get(0).getSubjectUri(), is(\"http://example.org/1\"));\n-    assertThat(paginatedList.getItems().get(1).getSubjectUri(), is(\"http://example.org/2\"));\n+    assertThat(paginatedList.getItems().get(0)\n+                                       .getSubjectUri(), is(\"http://example.org/1\"));\n+    assertThat(paginatedList.getItems().get(1)\n+                                       .getSubjectUri(), is(\"http://example.org/2\"));\n   }\n \n-\n   private String decode(Optional<String> encoded) {\n     return encoded.map(s -> new String(DECODER.decode(s.getBytes()))).orElse(null);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 80
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/44/PaginationHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_random/44/PaginationHelperTest.java\nindex 4c38f61d16f..ce14d1694e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/44/PaginationHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_random/44/PaginationHelperTest.java\n@@ -14,8 +14,7 @@ import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n-  .getPaginatedList;\n+import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper.getPaginatedList;\n import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.PaginatedList.encode;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/44/PaginationHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_three_grams/44/PaginationHelperTest.java\nindex 4c38f61d16f..ce14d1694e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/44/PaginationHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_three_grams/44/PaginationHelperTest.java\n@@ -14,8 +14,7 @@ import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n-  .getPaginatedList;\n+import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper.getPaginatedList;\n import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.PaginatedList.encode;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}