{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2217",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2217/DynamicProcessorAssigner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2217/DynamicProcessorAssigner.java\nindex 3a1bf29b879..12a9bfc31bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2217/DynamicProcessorAssigner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2217/DynamicProcessorAssigner.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import java.util.HashMap;\n@@ -45,127 +46,127 @@ import static java.util.concurrent.TimeUnit.SECONDS;\n  */\n public class DynamicProcessorAssigner extends ExecutionMonitor.Adapter\n {\n-    private final Configuration config;\n-    private final Map<Step<?>,Long/*done batches*/> lastChangedProcessors = new HashMap<>();\n-    private final int availableProcessors;\n+  private final Configuration config;\n+  private final Map<Step<?>, Long/*done batches*/> lastChangedProcessors = new HashMap<>();\n+  private final int availableProcessors;\n \n-    public DynamicProcessorAssigner( Configuration config )\n-    {\n-        super( 1, SECONDS );\n-        this.config = config;\n-        this.availableProcessors = config.maxNumberOfProcessors();\n-    }\n+  public DynamicProcessorAssigner(Configuration config)\n+  {\n+    super(1, SECONDS);\n+    this.config = config;\n+    this.availableProcessors = config.maxNumberOfProcessors();\n+  }\n \n-    @Override\n-    public void start( StageExecution execution )\n-    {   // A new stage begins, any data that we had is irrelevant\n-        lastChangedProcessors.clear();\n-    }\n+  @Override\n+  public void start(StageExecution execution)\n+  {   // A new stage begins, any data that we had is irrelevant\n+    lastChangedProcessors.clear();\n+  }\n \n-    @Override\n-    public void check( StageExecution execution )\n+  @Override\n+  public void check(StageExecution execution)\n+  {\n+    if (execution.stillExecuting())\n     {\n-        if ( execution.stillExecuting() )\n-        {\n-            int permits = availableProcessors - countActiveProcessors( execution );\n-            if ( permits > 0 )\n-            {\n-                // Be swift at assigning processors to slow steps, i.e. potentially multiple per round\n-                assignProcessorsToPotentialBottleNeck( execution, permits );\n-            }\n-            // Be a little more conservative removing processors from too fast steps\n-            removeProcessorFromPotentialIdleStep( execution );\n-        }\n+      int permits = availableProcessors - countActiveProcessors(execution);\n+      if (permits > 0)\n+      {\n+        // Be swift at assigning processors to slow steps, i.e. potentially multiple per round\n+        assignProcessorsToPotentialBottleNeck(execution, permits);\n+      }\n+      // Be a little more conservative removing processors from too fast steps\n+      removeProcessorFromPotentialIdleStep(execution);\n     }\n+  }\n \n-    private void assignProcessorsToPotentialBottleNeck( StageExecution execution, int permits )\n+  private void assignProcessorsToPotentialBottleNeck(StageExecution execution, int permits)\n+  {\n+    Pair<Step<?>, Float> bottleNeck = execution.stepsOrderedBy(Keys.avg_processing_time, false).iterator().next();\n+    Step<?> bottleNeckStep = bottleNeck.first();\n+    long doneBatches = batches(bottleNeckStep);\n+    if (bottleNeck.other() > 1.0f &&\n+        batchesPassedSinceLastChange(bottleNeckStep, doneBatches) >= config.movingAverageSize())\n     {\n-        Pair<Step<?>,Float> bottleNeck = execution.stepsOrderedBy( Keys.avg_processing_time, false ).iterator().next();\n-        Step<?> bottleNeckStep = bottleNeck.first();\n-        long doneBatches = batches( bottleNeckStep );\n-        if ( bottleNeck.other() > 1.0f &&\n-             batchesPassedSinceLastChange( bottleNeckStep, doneBatches ) >= config.movingAverageSize() )\n-        {\n-            // Assign 1/10th of the remaining permits. This will have processors being assigned more\n-            // aggressively in the beginning of the run\n-            int optimalProcessorIncrement = min( max( 1, (int) bottleNeck.other().floatValue() - 1 ), permits );\n-            int before = bottleNeckStep.processors( 0 );\n-            int after = bottleNeckStep.processors( max( optimalProcessorIncrement, permits / 10 ) );\n-            if ( after > before )\n-            {\n-                lastChangedProcessors.put( bottleNeckStep, doneBatches );\n-            }\n-        }\n+      // Assign 1/10th of the remaining permits. This will have processors being assigned more\n+      // aggressively in the beginning of the run\n+      int optimalProcessorIncrement = min(max(1, (int) bottleNeck.other().floatValue() - 1), permits);\n+      int before = bottleNeckStep.processors(0);\n+      int after = bottleNeckStep.processors(max(optimalProcessorIncrement, permits / 10));\n+      if (after > before)\n+      {\n+        lastChangedProcessors.put(bottleNeckStep, doneBatches);\n+      }\n     }\n+  }\n \n-    private void removeProcessorFromPotentialIdleStep( StageExecution execution )\n+  private void removeProcessorFromPotentialIdleStep(StageExecution execution)\n+  {\n+    for (Pair<Step<?>, Float> fast : execution.stepsOrderedBy(Keys.avg_processing_time, true))\n     {\n-        for ( Pair<Step<?>,Float> fast : execution.stepsOrderedBy( Keys.avg_processing_time, true ) )\n-        {\n-            int numberOfProcessors = fast.first().processors( 0 );\n-            if ( numberOfProcessors == 1 )\n-            {\n-                continue;\n-            }\n+      int numberOfProcessors = fast.first().processors(0);\n+      if (numberOfProcessors == 1)\n+      {\n+        continue;\n+      }\n \n-            // Translate the factor compared to the next (slower) step and see if this step would still\n-            // be faster if we decremented the processor count, with a slight conservative margin as well\n-            // (0.8 instead of 1.0 so that we don't decrement and immediately become the bottleneck ourselves).\n-            float factorWithDecrementedProcessorCount =\n-                    fast.other() * numberOfProcessors / (numberOfProcessors - 1);\n-            if ( factorWithDecrementedProcessorCount < 0.8f )\n-            {\n-                Step<?> fastestStep = fast.first();\n-                long doneBatches = batches( fastestStep );\n-                if ( batchesPassedSinceLastChange( fastestStep, doneBatches ) >= config.movingAverageSize() )\n-                {\n-                    int before = fastestStep.processors( 0 );\n-                    if ( fastestStep.processors( -1 ) < before )\n-                    {\n-                        lastChangedProcessors.put( fastestStep, doneBatches );\n-                        return;\n-                    }\n-                }\n-            }\n+      // Translate the factor compared to the next (slower) step and see if this step would still\n+      // be faster if we decremented the processor count, with a slight conservative margin as well\n+      // (0.8 instead of 1.0 so that we don't decrement and immediately become the bottleneck ourselves).\n+      float factorWithDecrementedProcessorCount =\n+          fast.other() * numberOfProcessors / (numberOfProcessors - 1);\n+      if (factorWithDecrementedProcessorCount < 0.8f)\n+      {\n+        Step<?> fastestStep = fast.first();\n+        long doneBatches = batches(fastestStep);\n+        if (batchesPassedSinceLastChange(fastestStep, doneBatches) >= config.movingAverageSize())\n+        {\n+          int before = fastestStep.processors(0);\n+          if (fastestStep.processors(-1) < before)\n+          {\n+            lastChangedProcessors.put(fastestStep, doneBatches);\n+            return;\n+          }\n         }\n+      }\n     }\n+  }\n \n-    private long avg( Step<?> step )\n-    {\n-        return step.stats().stat( Keys.avg_processing_time ).asLong();\n-    }\n+  private long avg(Step<?> step)\n+  {\n+    return step.stats().stat(Keys.avg_processing_time).asLong();\n+  }\n \n-    private long batches( Step<?> step )\n-    {\n-        return step.stats().stat( Keys.done_batches ).asLong();\n-    }\n+  private long batches(Step<?> step)\n+  {\n+    return step.stats().stat(Keys.done_batches).asLong();\n+  }\n \n-    private int countActiveProcessors( StageExecution execution )\n+  private int countActiveProcessors(StageExecution execution)\n+  {\n+    float processors = 0;\n+    if (execution.stillExecuting())\n     {\n-        float processors = 0;\n-        if ( execution.stillExecuting() )\n-        {\n-            long highestAverage = avg( execution.stepsOrderedBy(\n-                    Keys.avg_processing_time, false ).iterator().next().first() );\n-            for ( Step<?> step : execution.steps() )\n-            {\n-                // Calculate how active each step is so that a step that is very cheap\n-                // and idles a lot counts for less than 1 processor, so that bottlenecks can\n-                // \"steal\" some of its processing power.\n-                long avg = avg( step );\n-                float factor = (float)avg / (float)highestAverage;\n-                processors += factor * step.processors( 0 );\n-            }\n-        }\n-        return Math.round( processors );\n+      long highestAverage = avg(execution.stepsOrderedBy(\n+          Keys.avg_processing_time, false).iterator().next().first());\n+      for (Step<?> step : execution.steps())\n+      {\n+        // Calculate how active each step is so that a step that is very cheap\n+        // and idles a lot counts for less than 1 processor, so that bottlenecks can\n+        // \"steal\" some of its processing power.\n+        long avg = avg(step);\n+        float factor = (float) avg / (float) highestAverage;\n+        processors += factor * step.processors(0);\n+      }\n     }\n+    return Math.round(processors);\n+  }\n \n-    private long batchesPassedSinceLastChange( Step<?> step, long doneBatches )\n-    {\n-        return lastChangedProcessors.containsKey( step )\n-                // <doneBatches> number of batches have passed since the last change to this step\n-                ? doneBatches - lastChangedProcessors.get( step )\n-                // we have made no changes to this step yet, go ahead\n-                : config.movingAverageSize();\n-    }\n+  private long batchesPassedSinceLastChange(Step<?> step, long doneBatches)\n+  {\n+    return lastChangedProcessors.containsKey(step)\n+        // <doneBatches> number of batches have passed since the last change to this step\n+        ? doneBatches - lastChangedProcessors.get(step)\n+        // we have made no changes to this step yet, go ahead\n+        : config.movingAverageSize();\n+  }\n }\n",
            "diff_size": 124
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}