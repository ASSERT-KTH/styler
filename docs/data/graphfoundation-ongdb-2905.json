{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2905",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "128",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2905/DependencyResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2905/DependencyResolver.java\nindex 01af2821dbe..f65b471b8a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2905/DependencyResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2905/DependencyResolver.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import java.util.Iterator;\n@@ -30,116 +31,115 @@ import static org.neo4j.graphdb.DependencyResolver.SelectionStrategy.FIRST;\n  */\n public interface DependencyResolver\n {\n-    /**\n-     * Tries to resolve a dependency that matches a given class. No specific\n-     * {@link SelectionStrategy} is used, so the first encountered matching dependency will be returned.\n-     *\n-     * @param type the type of {@link Class} that the returned instance must implement.\n-     * @param <T> the type that the returned instance must implement\n-     * @return the resolved dependency for the given type.\n-     * @throws IllegalArgumentException if no matching dependency was found.\n-     */\n-    <T> T resolveDependency( Class<T> type ) throws IllegalArgumentException;\n+  /**\n+   * Tries to resolve a dependency that matches a given class. No specific\n+   * {@link SelectionStrategy} is used, so the first encountered matching dependency will be returned.\n+   *\n+   * @param type the type of {@link Class} that the returned instance must implement.\n+   * @param <T>  the type that the returned instance must implement\n+   * @return the resolved dependency for the given type.\n+   * @throws IllegalArgumentException if no matching dependency was found.\n+   */\n+  <T> T resolveDependency(Class<T> type) throws IllegalArgumentException;\n \n-    /**\n-     * Tries to resolve a dependency that matches a given class. All candidates are fed to the\n-     * {@code selector} which ultimately becomes responsible for making the choice between all available candidates.\n-     *\n-     * @param type the type of {@link Class} that the returned instance must implement.\n-     * @param selector {@link SelectionStrategy} which will make the choice of which one to return among\n-     * matching candidates.\n-     * @param <T> the type that the returned instance must implement\n-     * @return the resolved dependency for the given type.\n-     * @throws IllegalArgumentException if no matching dependency was found.\n-     */\n-    <T> T resolveDependency( Class<T> type, SelectionStrategy selector ) throws IllegalArgumentException;\n+  /**\n+   * Tries to resolve a dependency that matches a given class. All candidates are fed to the\n+   * {@code selector} which ultimately becomes responsible for making the choice between all available candidates.\n+   *\n+   * @param type     the type of {@link Class} that the returned instance must implement.\n+   * @param selector {@link SelectionStrategy} which will make the choice of which one to return among\n+   *                 matching candidates.\n+   * @param <T>      the type that the returned instance must implement\n+   * @return the resolved dependency for the given type.\n+   * @throws IllegalArgumentException if no matching dependency was found.\n+   */\n+  <T> T resolveDependency(Class<T> type, SelectionStrategy selector) throws IllegalArgumentException;\n \n-    <T> Supplier<T> provideDependency( Class<T> type, SelectionStrategy selector );\n+  <T> Supplier<T> provideDependency(Class<T> type, SelectionStrategy selector);\n \n-    <T> Supplier<T> provideDependency( Class<T> type );\n+  <T> Supplier<T> provideDependency(Class<T> type);\n \n+  /**\n+   * Responsible for making the choice between available candidates.\n+   */\n+  interface SelectionStrategy\n+  {\n     /**\n-     * Responsible for making the choice between available candidates.\n+     * Given a set of candidates, select an appropriate one. Even if there are candidates this\n+     * method may throw {@link IllegalArgumentException} if there was no suitable candidate.\n+     *\n+     * @param type       the type of items.\n+     * @param candidates candidates up for selection, where one should be picked. There might\n+     *                   also be no suitable candidate, in which case an exception should be thrown.\n+     * @param <T>        the type of items\n+     * @return a suitable candidate among all available.\n+     * @throws IllegalArgumentException if no suitable candidate was found.\n      */\n-    interface SelectionStrategy\n-    {\n-        /**\n-         * Given a set of candidates, select an appropriate one. Even if there are candidates this\n-         * method may throw {@link IllegalArgumentException} if there was no suitable candidate.\n-         *\n-         * @param type the type of items.\n-         * @param candidates candidates up for selection, where one should be picked. There might\n-         * also be no suitable candidate, in which case an exception should be thrown.\n-         * @param <T> the type of items\n-         * @return a suitable candidate among all available.\n-         * @throws IllegalArgumentException if no suitable candidate was found.\n-         */\n-        <T> T select( Class<T> type, Iterable<? extends T> candidates ) throws IllegalArgumentException;\n-\n-        SelectionStrategy FIRST = new SelectionStrategy()\n-        {\n-            @Override\n-            public <T> T select( Class<T> type, Iterable<? extends T> candidates ) throws IllegalArgumentException\n-            {\n-                Iterator<? extends T> iterator = candidates.iterator();\n-                if ( !iterator.hasNext() )\n-                {\n-                    throw new IllegalArgumentException( \"Could not resolve dependency of type:\" + type.getName() );\n-                }\n-                return iterator.next();\n-            }\n-        };\n+    <T> T select(Class<T> type, Iterable<? extends T> candidates) throws IllegalArgumentException;\n \n-        /**\n-         * Returns the one and only dependency, or throws.\n-         */\n-        SelectionStrategy ONLY = new SelectionStrategy()\n+    SelectionStrategy FIRST = new SelectionStrategy()\n+    {\n+      @Override\n+      public <T> T select(Class<T> type, Iterable<? extends T> candidates) throws IllegalArgumentException\n+      {\n+        Iterator<? extends T> iterator = candidates.iterator();\n+        if (!iterator.hasNext())\n         {\n-            @Override\n-            public <T> T select( Class<T> type, Iterable<? extends T> candidates ) throws IllegalArgumentException\n-            {\n-                Iterator<? extends T> iterator = candidates.iterator();\n-                if ( !iterator.hasNext() )\n-                {\n-                    throw new IllegalArgumentException( \"Could not resolve dependency of type:\" + type.getName() );\n-                }\n-\n-                T only = iterator.next();\n-\n-                if ( iterator.hasNext() )\n-                {\n-                    throw new IllegalArgumentException( \"Multiple dependencies of type:\" + type.getName() );\n-                }\n-                else\n-                {\n-                    return only;\n-                }\n-            }\n-        };\n-    }\n+          throw new IllegalArgumentException(\"Could not resolve dependency of type:\" + type.getName());\n+        }\n+        return iterator.next();\n+      }\n+    };\n \n     /**\n-     * Adapter for {@link DependencyResolver} which will select the first available candidate by default\n-     * for {@link #resolveDependency(Class)}.\n+     * Returns the one and only dependency, or throws.\n      */\n-    abstract class Adapter implements DependencyResolver\n+    SelectionStrategy ONLY = new SelectionStrategy()\n     {\n-        @Override\n-        public <T> T resolveDependency( Class<T> type ) throws IllegalArgumentException\n+      @Override\n+      public <T> T select(Class<T> type, Iterable<? extends T> candidates) throws IllegalArgumentException\n+      {\n+        Iterator<? extends T> iterator = candidates.iterator();\n+        if (!iterator.hasNext())\n         {\n-            return resolveDependency( type, FIRST );\n+          throw new IllegalArgumentException(\"Could not resolve dependency of type:\" + type.getName());\n         }\n \n-        @Override\n-        public <T> Supplier<T> provideDependency( final Class<T> type, final SelectionStrategy selector )\n-        {\n-            return () -> resolveDependency( type, selector );\n-        }\n+        T only = iterator.next();\n \n-        @Override\n-        public <T> Supplier<T> provideDependency( final Class<T> type )\n+        if (iterator.hasNext())\n         {\n-            return () -> resolveDependency( type );\n+          throw new IllegalArgumentException(\"Multiple dependencies of type:\" + type.getName());\n+        } else\n+        {\n+          return only;\n         }\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Adapter for {@link DependencyResolver} which will select the first available candidate by default\n+   * for {@link #resolveDependency(Class)}.\n+   */\n+  abstract class Adapter implements DependencyResolver\n+  {\n+    @Override\n+    public <T> T resolveDependency(Class<T> type) throws IllegalArgumentException\n+    {\n+      return resolveDependency(type, FIRST);\n+    }\n+\n+    @Override\n+    public <T> Supplier<T> provideDependency(final Class<T> type, final SelectionStrategy selector)\n+    {\n+      return () -> resolveDependency(type, selector);\n+    }\n+\n+    @Override\n+    public <T> Supplier<T> provideDependency(final Class<T> type)\n+    {\n+      return () -> resolveDependency(type);\n     }\n+  }\n }\n",
            "diff_size": 143
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2905/DependencyResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2905/DependencyResolver.java\nindex 01af2821dbe..6cda086a98c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2905/DependencyResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2905/DependencyResolver.java\n@@ -86,7 +86,8 @@ public interface DependencyResolver\n                 {\n                     throw new IllegalArgumentException( \"Could not resolve dependency of type:\" + type.getName() );\n                 }\n-                return iterator.next();\n+\n+return iterator.next();\n             }\n         };\n \n@@ -105,8 +106,7 @@ public interface DependencyResolver\n                 }\n \n                 T only = iterator.next();\n-\n-                if ( iterator.hasNext() )\n+if ( iterator.hasNext() )\n                 {\n                     throw new IllegalArgumentException( \"Multiple dependencies of type:\" + type.getName() );\n                 }\n@@ -142,4 +142,4 @@ public interface DependencyResolver\n             return () -> resolveDependency( type );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}