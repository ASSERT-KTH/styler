{
    "project_name": "opencb-opencga",
    "error_id": "433",
    "information": {
        "errors": [
            {
                "line": "155",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 143).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            cleanQuery(query);\n\n            logger.debug(\"De novo Clinical Analysis: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(clinicalAnalysis));\n            logger.debug(\"De novo Pedigree: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(pedigree));\n            logger.debug(\"De novo Pedigree proband: {}\", JacksonUtils.getDefaultObjectMapper().writer()\n                    .writeValueAsString(pedigree.getProband()));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/433/DeNovoAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/433/DeNovoAnalysis.java\nindex 9f068c71ca9..15bc21b4de1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/433/DeNovoAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/433/DeNovoAnalysis.java\n@@ -34,68 +34,68 @@ import static org.opencb.opencga.storage.core.variant.adaptors.VariantQueryParam\n \n public class DeNovoAnalysis extends OpenCgaClinicalAnalysis {\n \n-    private Query query;\n-\n-    private static Query defaultQuery;\n-\n-    static {\n-        defaultQuery = new Query()\n-                .append(VariantQueryParam.ANNOT_POPULATION_ALTERNATE_FREQUENCY.key(), \"1kG_phase3:AFR<0.002;1kG_phase3:AMR<0.002;\"\n-                        + \"1kG_phase3:EAS<0.002;1kG_phase3:EUR<0.002;1kG_phase3:SAS<0.002;GNOMAD_EXOMES:AFR<0.001;GNOMAD_EXOMES:AMR<0.001;\"\n-                        + \"GNOMAD_EXOMES:EAS<0.001;GNOMAD_EXOMES:FIN<0.001;GNOMAD_EXOMES:NFE<0.001;GNOMAD_EXOMES:ASJ<0.001;\"\n-                        + \"GNOMAD_EXOMES:OTH<0.002\")\n-                .append(VariantQueryParam.STATS_MAF.key(), \"ALL<0.001\")\n-                .append(VariantQueryParam.ANNOT_BIOTYPE.key(), ModeOfInheritance.proteinCoding)\n-                .append(VariantQueryParam.ANNOT_CONSEQUENCE_TYPE.key(), ModeOfInheritance.extendedLof);\n+  private Query query;\n+\n+  private static Query defaultQuery;\n+\n+  static {\n+    defaultQuery = new Query()\n+        .append(VariantQueryParam.ANNOT_POPULATION_ALTERNATE_FREQUENCY.key(), \"1kG_phase3:AFR<0.002;1kG_phase3:AMR<0.002;\"\n+            + \"1kG_phase3:EAS<0.002;1kG_phase3:EUR<0.002;1kG_phase3:SAS<0.002;GNOMAD_EXOMES:AFR<0.001;GNOMAD_EXOMES:AMR<0.001;\"\n+            + \"GNOMAD_EXOMES:EAS<0.001;GNOMAD_EXOMES:FIN<0.001;GNOMAD_EXOMES:NFE<0.001;GNOMAD_EXOMES:ASJ<0.001;\"\n+            + \"GNOMAD_EXOMES:OTH<0.002\")\n+        .append(VariantQueryParam.STATS_MAF.key(), \"ALL<0.001\")\n+        .append(VariantQueryParam.ANNOT_BIOTYPE.key(), ModeOfInheritance.proteinCoding)\n+        .append(VariantQueryParam.ANNOT_CONSEQUENCE_TYPE.key(), ModeOfInheritance.extendedLof);\n+  }\n+\n+  public DeNovoAnalysis(String clinicalAnalysisId, String studyId, Query query, ObjectMap options, String opencgaHome, String sessionId) {\n+    super(clinicalAnalysisId, studyId, options, opencgaHome, sessionId);\n+    this.query = new Query(defaultQuery);\n+    this.query.append(VariantQueryParam.INCLUDE_GENOTYPE.key(), true)\n+        .append(VariantQueryParam.STUDY.key(), studyId)\n+        .append(VariantQueryParam.FILTER.key(), VCFConstants.PASSES_FILTERS_v4)\n+        .append(VariantQueryParam.UNKNOWN_GENOTYPE.key(), \"./.\");\n+\n+    if (MapUtils.isNotEmpty(query)) {\n+      this.query.putAll(query);\n     }\n \n-    public DeNovoAnalysis(String clinicalAnalysisId, String studyId, Query query, ObjectMap options, String opencgaHome, String sessionId) {\n-        super(clinicalAnalysisId, studyId, options, opencgaHome, sessionId);\n-        this.query = new Query(defaultQuery);\n-        this.query.append(VariantQueryParam.INCLUDE_GENOTYPE.key(), true)\n-                .append(VariantQueryParam.STUDY.key(), studyId)\n-                .append(VariantQueryParam.FILTER.key(), VCFConstants.PASSES_FILTERS_v4)\n-                .append(VariantQueryParam.UNKNOWN_GENOTYPE.key(), \"./.\");\n+  }\n \n-        if (MapUtils.isNotEmpty(query)) {\n-            this.query.putAll(query);\n-        }\n-\n-    }\n+  @Override\n+  protected void exec() throws org.opencb.oskar.analysis.exceptions.AnalysisException {\n+  }\n \n-    @Override\n-    protected void exec() throws org.opencb.oskar.analysis.exceptions.AnalysisException {\n-    }\n+  public AnalysisResult<List<Variant>> compute() throws Exception {\n+    logger.debug(\"Executing de Novo analysis\");\n \n-    public AnalysisResult<List<Variant>> compute() throws Exception {\n-        logger.debug(\"Executing de Novo analysis\");\n+    StopWatch watcher = StopWatch.createStarted();\n+    List<Variant> variants;\n+    // Get and check clinical analysis and proband\n+    ClinicalAnalysis clinicalAnalysis = getClinicalAnalysis();\n+    Individual proband = getProband(clinicalAnalysis);\n \n-        StopWatch watcher = StopWatch.createStarted();\n-        List<Variant> variants;\n-        // Get and check clinical analysis and proband\n-        ClinicalAnalysis clinicalAnalysis = getClinicalAnalysis();\n-        Individual proband = getProband(clinicalAnalysis);\n-\n-        QueryResult<Study> studyQueryResult = catalogManager.getStudyManager().get(studyId,\n-                new QueryOptions(QueryOptions.INCLUDE, StudyDBAdaptor.QueryParams.FQN.key()), sessionId);\n-        if (studyQueryResult.getNumResults() == 0) {\n-            throw new AnalysisException(\"Study \" + studyId + \" not found\");\n-        }\n+    QueryResult<Study> studyQueryResult = catalogManager.getStudyManager().get(studyId,\n+        new QueryOptions(QueryOptions.INCLUDE, StudyDBAdaptor.QueryParams.FQN.key()), sessionId);\n+    if (studyQueryResult.getNumResults() == 0) {\n+      throw new AnalysisException(\"Study \" + studyId + \" not found\");\n+    }\n \n-        String sampleId = proband.getSamples().get(0).getId();\n-        SampleMetadata sampleMetadata = variantStorageManager.getSampleMetadata(studyQueryResult.first().getFqn(), sampleId, sessionId);\n-        if (TaskMetadata.Status.READY.equals(sampleMetadata.getMendelianErrorStatus())) {\n-            logger.debug(\"Getting precomputed DE NOVO variants\");\n+    String sampleId = proband.getSamples().get(0).getId();\n+    SampleMetadata sampleMetadata = variantStorageManager.getSampleMetadata(studyQueryResult.first().getFqn(), sampleId, sessionId);\n+    if (TaskMetadata.Status.READY.equals(sampleMetadata.getMendelianErrorStatus())) {\n+      logger.debug(\"Getting precomputed DE NOVO variants\");\n \n-            // Mendelian errors are pre-calculated\n-            query.put(VariantCatalogQueryUtils.FAMILY.key(), clinicalAnalysis.getFamily().getId());\n-            query.put(VariantCatalogQueryUtils.FAMILY_SEGREGATION.key(), \"DeNovo\");\n+      // Mendelian errors are pre-calculated\n+      query.put(VariantCatalogQueryUtils.FAMILY.key(), clinicalAnalysis.getFamily().getId());\n+      query.put(VariantCatalogQueryUtils.FAMILY_SEGREGATION.key(), \"DeNovo\");\n //            query.put(VariantQueryUtils.SAM, \"DeNovo\");\n-            query.put(INCLUDE_SAMPLE.key(), sampleId);\n+      query.put(INCLUDE_SAMPLE.key(), sampleId);\n \n-            logger.debug(\"Query: {}\", query.safeToString());\n+      logger.debug(\"Query: {}\", query.safeToString());\n \n-            variants = variantStorageManager.get(query, QueryOptions.empty(), sessionId).getResult();\n+      variants = variantStorageManager.get(query, QueryOptions.empty(), sessionId).getResult();\n //            if (CollectionUtils.isNotEmpty(mendelianErrorVariants)) {\n //                for (Variant variant : mendelianErrorVariants) {\n //                    if (!GenotypeClass.HOM_REF.test(variant.getStudies().get(0).getSampleData(sampleId, \"GT\"))) {\n@@ -106,68 +106,68 @@ public class DeNovoAnalysis extends OpenCgaClinicalAnalysis {\n //                    }\n //                }\n //            }\n-        } else {\n-            // Get pedigree\n-            Pedigree pedigree = FamilyManager.getPedigreeFromFamily(clinicalAnalysis.getFamily(), proband.getId());\n-\n-            // Discard members from the pedigree that do not have any samples. If we don't do this, we will always assume\n-            ClinicalUtils.removeMembersWithoutSamples(pedigree, clinicalAnalysis.getFamily());\n-\n-            // Get the map of individual - sample id and update proband information (to be able to navigate to the parents and their\n-            // samples easily)\n-            Map<String, String> sampleMap = getSampleMap(clinicalAnalysis, proband);\n-            Map<String, List<String>> genotypeMap = ModeOfInheritance.deNovo(pedigree);\n-            List<String> samples = new ArrayList<>();\n-            List<String> genotypeList = new ArrayList<>();\n-            for (Map.Entry<String, List<String>> entry : genotypeMap.entrySet()) {\n-                if (sampleMap.containsKey(entry.getKey())) {\n+    } else {\n+      // Get pedigree\n+      Pedigree pedigree = FamilyManager.getPedigreeFromFamily(clinicalAnalysis.getFamily(), proband.getId());\n+\n+      // Discard members from the pedigree that do not have any samples. If we don't do this, we will always assume\n+      ClinicalUtils.removeMembersWithoutSamples(pedigree, clinicalAnalysis.getFamily());\n+\n+      // Get the map of individual - sample id and update proband information (to be able to navigate to the parents and their\n+      // samples easily)\n+      Map<String, String> sampleMap = getSampleMap(clinicalAnalysis, proband);\n+      Map<String, List<String>> genotypeMap = ModeOfInheritance.deNovo(pedigree);\n+      List<String> samples = new ArrayList<>();\n+      List<String> genotypeList = new ArrayList<>();\n+      for (Map.Entry<String, List<String>> entry : genotypeMap.entrySet()) {\n+        if (sampleMap.containsKey(entry.getKey())) {\n //                samples.add(sampleMap.get(entry.getKey()));\n-                    genotypeList.add(sampleMap.get(entry.getKey()) + \":\" + StringUtils.join(entry.getValue(), VariantQueryUtils.OR));\n-                }\n-            }\n-            if (genotypeList.isEmpty()) {\n-                logger.error(\"No genotypes found\");\n-                return null;\n-            }\n-            query.put(VariantQueryParam.GENOTYPE.key(), StringUtils.join(genotypeList, \";\"));\n-            samples.add(sampleMap.get(proband.getId()));\n-\n-            int motherSampleIdx = 1;\n-            int fatherSampleIdx = 2;\n-\n-            if (proband.getMother() != null && StringUtils.isNotEmpty(proband.getMother().getId())\n-                    && sampleMap.containsKey(proband.getMother().getId())) {\n-                samples.add(sampleMap.get(proband.getMother().getId()));\n-            } else {\n-                motherSampleIdx = -1;\n-                fatherSampleIdx = 1;\n-            }\n-            if (proband.getFather() != null && StringUtils.isNotEmpty(proband.getFather().getId())\n-                    && sampleMap.containsKey(proband.getFather().getId())) {\n-                samples.add(sampleMap.get(proband.getFather().getId()));\n-            } else {\n-                fatherSampleIdx = -1;\n-            }\n-\n-            query.put(INCLUDE_SAMPLE.key(), samples);\n-            cleanQuery(query);\n-\n-            logger.debug(\"De novo Clinical Analysis: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(clinicalAnalysis));\n-            logger.debug(\"De novo Pedigree: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(pedigree));\n-            logger.debug(\"De novo Pedigree proband: {}\", JacksonUtils.getDefaultObjectMapper().writer()\n-                    .writeValueAsString(pedigree.getProband()));\n-            logger.debug(\"De novo Genotype: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(genotypeMap));\n-            logger.debug(\"De novo Proband: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(proband));\n-            logger.debug(\"De novo Sample map: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(sampleMap));\n-            logger.debug(\"De novo samples: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(samples));\n-            logger.debug(\"De novo query: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(query));\n-\n-            VariantDBIterator iterator = variantStorageManager.iterator(query, QueryOptions.empty(), sessionId);\n-            variants = ModeOfInheritance.deNovo(iterator, 0, motherSampleIdx, fatherSampleIdx);\n+          genotypeList.add(sampleMap.get(entry.getKey()) + \":\" + StringUtils.join(entry.getValue(), VariantQueryUtils.OR));\n         }\n-        logger.debug(\"Variants obtained: {}\", variants.size());\n-        logger.debug(\"De novo time: {}\", watcher.getTime());\n-        return new AnalysisResult<>(variants, Math.toIntExact(watcher.getTime()), null);\n+      }\n+      if (genotypeList.isEmpty()) {\n+        logger.error(\"No genotypes found\");\n+        return null;\n+      }\n+      query.put(VariantQueryParam.GENOTYPE.key(), StringUtils.join(genotypeList, \";\"));\n+      samples.add(sampleMap.get(proband.getId()));\n+\n+      int motherSampleIdx = 1;\n+      int fatherSampleIdx = 2;\n+\n+      if (proband.getMother() != null && StringUtils.isNotEmpty(proband.getMother().getId())\n+          && sampleMap.containsKey(proband.getMother().getId())) {\n+        samples.add(sampleMap.get(proband.getMother().getId()));\n+      } else {\n+        motherSampleIdx = -1;\n+        fatherSampleIdx = 1;\n+      }\n+      if (proband.getFather() != null && StringUtils.isNotEmpty(proband.getFather().getId())\n+          && sampleMap.containsKey(proband.getFather().getId())) {\n+        samples.add(sampleMap.get(proband.getFather().getId()));\n+      } else {\n+        fatherSampleIdx = -1;\n+      }\n+\n+      query.put(INCLUDE_SAMPLE.key(), samples);\n+      cleanQuery(query);\n+\n+      logger.debug(\"De novo Clinical Analysis: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(clinicalAnalysis));\n+      logger.debug(\"De novo Pedigree: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(pedigree));\n+      logger.debug(\"De novo Pedigree proband: {}\", JacksonUtils.getDefaultObjectMapper().writer()\n+          .writeValueAsString(pedigree.getProband()));\n+      logger.debug(\"De novo Genotype: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(genotypeMap));\n+      logger.debug(\"De novo Proband: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(proband));\n+      logger.debug(\"De novo Sample map: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(sampleMap));\n+      logger.debug(\"De novo samples: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(samples));\n+      logger.debug(\"De novo query: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(query));\n+\n+      VariantDBIterator iterator = variantStorageManager.iterator(query, QueryOptions.empty(), sessionId);\n+      variants = ModeOfInheritance.deNovo(iterator, 0, motherSampleIdx, fatherSampleIdx);\n     }\n+    logger.debug(\"Variants obtained: {}\", variants.size());\n+    logger.debug(\"De novo time: {}\", watcher.getTime());\n+    return new AnalysisResult<>(variants, Math.toIntExact(watcher.getTime()), null);\n+  }\n \n }\n",
            "diff_size": 167
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/433/DeNovoAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/433/DeNovoAnalysis.java\nindex 9f068c71ca9..b1d556c9b0a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/433/DeNovoAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/433/DeNovoAnalysis.java\n@@ -170,4 +170,4 @@ public class DeNovoAnalysis extends OpenCgaClinicalAnalysis {\n         return new AnalysisResult<>(variants, Math.toIntExact(watcher.getTime()), null);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "154",
                    "column": "58",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/433/DeNovoAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/433/DeNovoAnalysis.java\nindex 9f068c71ca9..b81d07a43ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/433/DeNovoAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/433/DeNovoAnalysis.java\n@@ -151,8 +151,8 @@ public class DeNovoAnalysis extends OpenCgaClinicalAnalysis {\n \n             query.put(INCLUDE_SAMPLE.key(), samples);\n             cleanQuery(query);\n-\n-            logger.debug(\"De novo Clinical Analysis: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(clinicalAnalysis));\n+            logger.debug(\"De novo Clinical Analysis: {}\",JacksonUtils.getDefaultObjectMapper() .writer(\n+            ).writeValueAsString(clinicalAnalysis));\n             logger.debug(\"De novo Pedigree: {}\", JacksonUtils.getDefaultObjectMapper().writer().writeValueAsString(pedigree));\n             logger.debug(\"De novo Pedigree proband: {}\", JacksonUtils.getDefaultObjectMapper().writer()\n                     .writeValueAsString(pedigree.getProband()));\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}