{
    "project_name": "CESNET-perun",
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "499",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n\t\t\t}\n\t\t\t\t\n\t\t\treturn null;\n\t\t}\n\t},",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/34/UsersManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/34/UsersManagerMethod.java\nindex 804fbf5345e..9f46b62a31d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/34/UsersManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/34/UsersManagerMethod.java\n@@ -496,7 +496,7 @@ public enum UsersManagerMethod implements ManagerMethod {\n \t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n \t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n \t\t\t}\n-\t\t\t\t\n+\n \t\t\treturn null;\n \t\t}\n \t},\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/34/UsersManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/34/UsersManagerMethod.java\nindex 804fbf5345e..619260e0ecf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/34/UsersManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/34/UsersManagerMethod.java\n@@ -9,1241 +9,1202 @@ import cz.metacentrum.perun.rpc.ApiCaller;\n import cz.metacentrum.perun.rpc.ManagerMethod;\n import cz.metacentrum.perun.core.api.exceptions.RpcException;\n import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n+\n import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n public enum UsersManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Returns user based on one of the userExtSource.\n-\t *\n-\t * @param userExtSource UserExtSource JSON object UserExtSource\n-\t * @return User User object\n-\t */\n-\tgetUserByUserExtSource {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserByUserExtSource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"userExtSource\", UserExtSource.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns user by his login in external source and external source.\n-\t *\n-\t * @param extSourceName String Ext source name\n-\t * @param extLogin String Ext source login\n-\t * @return User User object\n-\t */\n-\tgetUserByExtSourceNameAndExtLogin {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserByExtSourceNameAndExtLogin(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"extSourceName\"),\n-\t\t\t\t\tparms.readString(\"extLogin\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns user by its <code>id</code>.\n-\t *\n-\t * @param id int User <code>id</code>\n-\t * @return User User object\n-\t */\n-\tgetUserById {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUserById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all users in Perun.\n-\t *\n-\t * @return List<User> All Perun users\n-\t */\n-\tgetUsers {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUsers(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all specific users in Perun.\n-\t *\n-\t * @return List<User> All Perun service users\n-\t */\n-\tgetSpecificUsers {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getSpecificUsers(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all specific users who are owned by the user.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<User> Specific users for a user\n-\t */\n-\tgetSpecificUsersByUser {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getSpecificUsersByUser(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all users who owns the specific user.\n-\t *\n-\t * @param specificUser int Specific User <code>id</code>\n-\t * @return List<User> Users for a service user\n-\t */\n-\tgetUsersBySpecificUser {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUsersBySpecificUser(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"specificUser\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Add specific user owner (the user).\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param specificUser int Specific user <code>id</code>\n-\t */\n-\taddSpecificUserOwner {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getUsersManager().addSpecificUserOwner(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"specificUser\")));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove specific user owner (the user).\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param specificUser int Specific user <code>id</code>\n-\t */\n-\tremoveSpecificUserOwner {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getUsersManager().removeSpecificUserOwner(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"specificUser\")));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get User to RichUser without attributes.\n-\t *\n-\t * @param user int user <code>id</code>\n-\t * @return RichUser found rich user\n-\t */\n-\tgetRichUser {\n-\n-\t\t@Override\n-\t\tpublic RichUser call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getRichUser(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get User to RichUser with attributes.\n-\t *\n-\t * @param user int user <code>id</code>\n-\t * @return RichUser found rich user with attributes\n-\t */\n-\tgetRichUserWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic RichUser call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getRichUserWithAttributes(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get All richUsers with or without specificUsers.\n-\t *\n-\t * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n-\t * @return List<RichUser> all rich users without attributes\n-\t */\n-\tgetAllRichUsers {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getAllRichUsers(ac.getSession(),\n-\t\t\t\t\tparms.readBoolean(\"includedSpecificUsers\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get All richUsers with or without specificUsers.\n-\t *\n-\t * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n-\t * @return List<RichUser> all rich users with attributes\n-\t */\n-\tgetAllRichUsersWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(),\n-\t\t\t\t\tparms.readBoolean(\"includedSpecificUsers\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * From Users makes RichUsers without attributes.\n-\t *\n-\t * @param users List<RichUser> users to convert\n-\t * @return List<RichUser> list of rich users\n-\t */\n-\tgetRichUsersFromListOfUsers {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().getRichUsersFromListOfUsers(ac.getSession(),\n-\t\t\t\t\tparms.readList(\"users\", User.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * From Users makes RichUsers with attributes.\n-\t *\n-\t * @param users List<RichUser> users to convert\n-\t * @return List<RichUser> list of richUsers\n-\t */\n-\tgetRichUsersFromListOfUsersWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().getRichUsersWithAttributesFromListOfUsers(ac.getSession(),\n-\t\t\t\t\tparms.readList(\"users\", User.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all RichUsers with attributes who are not member of any VO.\n-\t *\n-\t * @return List<RichUser> list of richUsers who are not member of any VO\n-\t */\n-\tgetRichUsersWithoutVoAssigned {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getRichUsersWithoutVoAssigned(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get All richUsers with or without specificUsers with selected attributes.\n-\t *\n-\t * @param attrsNames List<String> list of attributes name\n-\t * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\t/*#\n-\t * Get All richUsers with or without specificUsers with all included attributes.\n-\t *\n-\t * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\tgetRichUsersWithAttributes {\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif (parms.contains(\"attrsNames\")) {\n-\t\t\t\treturn ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tparms.readBoolean(\"includedSpecificUsers\"),\n-\t\t\t\t\t\tparms.readList(\"attrsNames\", String.class));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tparms.readBoolean(\"includedSpecificUsers\"), null);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of RichUsers with attributes who matches the searchString\n-\t *\n-\t * @param searchString String searched string\n-\t * @param attrsNames List<String> list of attributes name\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\tfindRichUsersWithAttributes {\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif (parms.contains(\"attrsNames\")) {\n-\t\t\t\treturn ac.getUsersManager().findRichUsersWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tparms.readString(\"searchString\"),\n-\t\t\t\t\t\tparms.readList(\"attrsNames\", String.class));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().findRichUsersWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tparms.readString(\"searchString\"), null);\n-\t\t\t}\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of RichUsers which are not members of any VO and with selected attributes\n-\t *\n-\t * @param attrsNames List<String> list of attributes name\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\tgetRichUsersWithoutVoWithAttributes {\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif (parms.contains(\"attrsNames\")) {\n-\t\t\t\treturn ac.getUsersManager().getRichUsersWithoutVoWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tparms.readList(\"attrsNames\", String.class));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().getRichUsersWithoutVoWithAttributes(ac.getSession(), null);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of RichUsers who matches the searchString and are not member in specific VO and with selected attributes.\n-\t *\n-\t * @param vo VO virtual organization\n-\t * @param searchString String searched string\n-\t * @param attrsName List<String> list of attributes name\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\tfindRichUsersWithoutSpecificVoWithAttributes {\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif (parms.contains(\"attrsNames\")) {\n-\t\t\t\treturn ac.getUsersManager().findRichUsersWithoutSpecificVoWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\tparms.readString(\"searchString\"),\n-\t\t\t\t\t\tparms.readList(\"attrsNames\", String.class));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().findRichUsersWithoutSpecificVoWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\tparms.readString(\"searchString\"), null);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes a user. User is not deleted, if is member of any VO or is associated with any service identity.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t * Deletes a user (force).\n-\t * Also removes associated members.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param force boolean If true, use force deletion.\n-\t */\n-\tdeleteUser {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n-\t\t\t\tac.getUsersManager().deleteUser(ac.getSession(),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")), true);\n-\t\t\t} else {\n-\t\t\t\tac.getUsersManager().deleteUser(ac.getSession(),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates users data in DB.\n-\t *\n-\t * @param user User JSON object\n-\t * @return User Updated user\n-\t */\n-\tupdateUser {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().updateUser(ac.getSession(),\n-\t\t\t\t\tparms.read(\"user\", User.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates titles before/after users name\n-\t *\n-\t * Titles must be set in User object.\n-\t * Setting any title to null will remove title from name.\n-\t * Other user's properties are ignored.\n-\t *\n-\t * @param user User JSON object with titles to set\n-\t * @return User Updated user\n-\t */\n-\tupdateNameTitles {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().updateNameTitles(ac.getSession(),\n-\t\t\t\t\tparms.read(\"user\", User.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates user's userExtSource in DB.\n-\t *\n-\t * @param userExtSource UserExtSource JSON object\n-\t * @return UserExtSource Updated userExtSource\n-\t */\n-\tupdateUserExtSource {\n-\n-\t\t@Override\n-\t\tpublic UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().updateUserExtSource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"userExtSource\", UserExtSource.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets list of all user's external sources of the user.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<UserExtSource> list of user's external sources\n-\t */\n-\tgetUserExtSources {\n-\n-\t\t@Override\n-\t\tpublic List<UserExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserExtSources(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds user's external sources.\n-\t * @param user int User <code>id</code>\n-\t * @param userExtSource UserExtSource JSON object\n-\t * @return UserExtSource Newly added UserExtSource\n-\t */\n-\taddUserExtSource {\n-\n-\t\t@Override\n-\t\tpublic UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().addUserExtSource(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tparms.read(\"userExtSource\", UserExtSource.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove user's external source.\n-\t * Persistent UserExtSources are not removed unless <code>force</code> param is present and set to <code>true</code>.\n-\t * @param user int User <code>id</code>\n-\t * @param userExtSource int UserExtSource <code>id</code>\n-\t * @param force boolean If true, use force deletion.\n-\t */\n-\tremoveUserExtSource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n-\t\t\t\tac.getUsersManager().removeUserExtSource(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")), true);\n-\t\t\t} else {\n-\t\t\t\tac.getUsersManager().removeUserExtSource(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n-\t\t\t}\n-\t\t\t\t\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Move user's external source from sourceUser to targetUser.\n-\t * @param sourceUser int User <code>id</code>\n-\t * @param targetUser int User <code>id</code>\n-\t * @param userExtSource int UserExtSource <code>id</code>\n-\t */\n-\tmoveUserExtSource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getUsersManager().moveUserExtSource(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"sourceUser\")),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"targetUser\")),\n-\t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get the user ext source by its id.\n-\t *\n-\t * @param userExtSource int UserExtSource <code>id</code>\n-\t * @return UserExtSource User external source for the id\n-\t */\n-\tgetUserExtSourceById {\n-\n-\t\t@Override\n-\t\tpublic UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserExtSourceById(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"userExtSource\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets user's external source by the user's external login and external source.\n-\t *\n-\t * @param extSource ExtSource JSON object\n-\t * @param extSourceLogin String Login\n-\t * @return UserExtSource UserExtSource found user's external source\n-\t */\n-\tgetUserExtSourceByExtLogin {\n-\n-\t\t@Override\n-\t\tpublic UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserExtSourceByExtLogin(ac.getSession(),\n-\t\t\t\t\tparms.read(\"extSource\", ExtSource.class),\n-\t\t\t\t\tparms.readString(\"extSourceLogin\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns user by VO member.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return User User object\n-\t */\n-\tgetUserByMember {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserByMember(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of users who matches the searchString, searching name, email, logins.\n-\t *\n-\t * @param searchString String String to search by\n-\t * @return List<User> Found users\n-\t */\n-\tfindUsers {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().findUsers(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"searchString\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of RichUsers with attributes who matches the searchString, searching name, email, logins.\n-\t *\n-\t * @param searchString String searched string\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\tfindRichUsers {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().findRichUsers(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"searchString\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of users who matches the searchString, searching name, email and logins\n-\t * and are not member of specific VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @param searchString String String to search by\n-\t * @return List<User> Found users\n-\t */\n-\tgetUsersWithoutSpecificVo {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUsersWithoutSpecificVo(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\tparms.readString(\"searchString\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of users who matches the searchString.\n-\t *\n-\t * @param searchString String String to search by\n-\t * @return List<User> Found users\n-\t */\n-\t/*#\n-\t * Returns list of users who matches the parameters.\n-\t * All parameters must be present, even if empty.\n-\t *\n-\t * @param titleBefore String Title before name\n-\t * @param firstName String First name\n-\t * @param middleName String Middle name\n-\t * @param lastName String Last name\n-\t * @param titleAfter String Title after\n-\t * @return List<User> Found users\n-\t */\n-\tfindUsersByName {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"searchString\")) {\n-\t\t\t\treturn ac.getUsersManager().findUsersByName(ac.getSession(),\n-\t\t\t\t\t\tparms.readString(\"searchString\"));\n-\t\t\t} else if (parms.contains(\"titleBefore\") && parms.contains(\"firstName\") &&\n-\t\t\t\t\tparms.contains(\"middleName\") && parms.contains(\"lastName\") && parms.contains(\"titleAfter\")) {\n-\t\t\t\treturn ac.getUsersManager().findUsersByName(ac.getSession(),\n-\t\t\t\t\t\tparms.readString(\"titleBefore\"), parms.readString(\"firstName\"),\n-\t\t\t\t\t\tparms.readString(\"middleName\"), parms.readString(\"lastName\"),\n-\t\t\t\t\t\tparms.readString(\"titleAfter\"));\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"searchString or (titleBefore and firstName and middleName and lastName and titleAfter)\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n-\t *\n-\t * @param attribute Attribute JSON object\n-\t * @return List<User> Found users\n-\t */\n-\t/*#\n-\t * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n-\t *\n-\t * @param attributeName String URN of attribute to search by\n-\t * @param attributeValue Object Value to search by (type of value must match attribute value type)\n-\t * @return List<User> Found users\n-\t */\n-\tgetUsersByAttribute {\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"attributeName\")) {\n-\t\t\t\tif (parms.contains(\"attributeValue\")) {\n-\t\t\t\t\tString attributeName = parms.readString(\"attributeName\");\n-\t\t\t\t\tAttribute attr = new Attribute(ac.getAttributesManager().getAttributeDefinition(ac.getSession(), attributeName));\n-\n-\t\t\t\t\tif(attr.getType().equals(Integer.class.getName())) {\n-\t\t\t\t\t\tattr.setValue(parms.readInt(\"attributeValue\"));\n-\t\t\t\t\t} else if(attr.getType().equals(String.class.getName()) || attr.getType().equals(BeansUtils.largeStringClassName)) {\n-\t\t\t\t\t\tattr.setValue(parms.readString(\"attributeValue\"));\n-\t\t\t\t\t} else if(attr.getType().equals(Boolean.class.getName())) {\n-\t\t\t\t\t\tattr.setValue(parms.readBoolean(\"attributeValue\"));\n-\t\t\t\t\t} else if(attr.getType().equals(ArrayList.class.getName()) || attr.getType().equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\t\t\t\tattr.setValue(parms.readList(\"attributeValue\", String.class));\n-\t\t\t\t\t} else if(attr.getType().equals(LinkedHashMap.class.getName())) {\n-\t\t\t\t\t\tattr.setValue(parms.read(\"attributeValue\", LinkedHashMap.class));\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new RpcException(RpcException.Type.CANNOT_DESERIALIZE_VALUE, \"attributeValue is not the same type like value of attribute with the attributeName.\");\n-\t\t\t\t\t}\n-\t\t\t\t\treturn ac.getUsersManager().getUsersByAttribute(ac.getSession(),attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"attributeValue\");\n-\t\t\t\t}\n-\t\t\t} else if (parms.contains(\"attribute\")) {\n-\t\t\t\treturn ac.getUsersManager().getUsersByAttribute(ac.getSession(), parms.read(\"attribute\", Attribute.class));\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"attribute or (attributeName and attributeValue)\");\n-\t\t\t}\n-\t\t}\n-\n-\t},\n-\n-\t/*#\n-\t * Returns all users who have attribute which have value which contains searchString.\n-\t *\n-\t * @param attributeName String URN of attribute to search by\n-\t * @param attributeValue String Value to search by\n-\t * @return List<User> Found users\n-\t */\n-\tgetUsersByAttributeValue {\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"attributeName\")) {\n-\t\t\t\tif (parms.contains(\"attributeValue\")) {\n-\t\t\t\t\treturn ac.getUsersManager().getUsersByAttributeValue(ac.getSession(), parms.readString(\"attributeName\"), parms.readString(\"attributeValue\"));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"attributeValue\");\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"attributeName\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of VOs, where the user is an Administrator.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Vo> Found VOs\n-\t */\n-\tgetVosWhereUserIsAdmin {\n-\n-\t\t@Override\n-\t\tpublic List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getVosWhereUserIsAdmin(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of VOs, where the user is a Member.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Vo> Found VOs\n-\t */\n-\tgetVosWhereUserIsMember {\n-\n-\t\t@Override\n-\t\tpublic List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getVosWhereUserIsMember(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of Groups in Perun, where the User is a direct Administrator\n-\t * or he is a member of any group which is Administrator of some of these Groups.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Group> Found Groups\n-\t */\n-\t/*#\n-\t * Returns list of Groups in selected Vo, where the User is a direct Administrator\n-\t * or he is a member of any group which is Administrator of some of these Groups.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param vo int Vo <code>id</code>\n-\t * @return List<Group> Found Groups\n-\t */\n-\tgetGroupsWhereUserIsAdmin {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"vo\")) {\n-\t\t\t\treturn ac.getUsersManager().getGroupsWhereUserIsAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().getGroupsWhereUserIsAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all resources from the facility which have the user access on.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Resource> Allowed resources\n-\t */\n-\t/*#\n-\t * Get all resources which have the user access on.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Resource> Allowed resources\n-\t */\n-\tgetAllowedResources {\n-\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tUser user = ac.getUserById(parms.readInt(\"user\"));\n-\t\t\tif(parms.contains(\"facility\")) {\n-\t\t\t\tFacility facility = ac.getFacilityById(parms.readInt(\"facility\"));\n-\t\t\t\treturn ac.getUsersManager().getAllowedResources(ac.getSession(), facility, user);\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().getAllowedResources(ac.getSession(), user);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all rich resources which have the user assigned.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<RichResource> Assigned rich resources\n-\t */\n-\tgetAssignedRichResources {\n-\n-\t\t@Override\n-\t\tpublic List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tUser user = ac.getUserById(parms.readInt(\"user\"));\n-\t\t\treturn ac.getUsersManager().getAssignedRichResources(ac.getSession(), user);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Checks if the login is available in the namespace.\n-\t *\n-\t * @param loginNamespace String Namespace\n-\t * @param login String Login\n-\t * @exampleResponse 1\n-\t * @return int 1: login available, 0: login not available\n-\t */\n-\tisLoginAvailable {\n-\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (ac.getUsersManager().isLoginAvailable(ac.getSession(), parms.readString(\"loginNamespace\"), parms.readString(\"login\"))) {\n-\t\t\t\treturn 1;\n-\t\t\t} else {\n-\t\t\t\treturn 0;\n-\t\t\t}\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all users who are not member of any VO.\n-\t *\n-\t * @return List<User> Found users\n-\t */\n-\tgetUsersWithoutVoAssigned {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUsersWithoutVoAssigned(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds PERUNADMIN role to the user.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t */\n-\tmakeUserPerunAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tUser user = ac.getUserById(parms.readInt(\"user\"));\n-\t\t\tac.getUsersManager().makeUserPerunAdmin(ac.getSession(), user);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\n-\t/*#\n-\t * Changes user password in defined login-namespace.\n-\t *\n-\t * @param login String Users login\n-\t * @param loginNamespace String Namespace\n-\t * @param newPassword String New password\n-\t * @param oldPassword String Old password which will be checked. This parameter is required only if checkOldPassword is set to true.\n-\t * @param checkOldPassword boolean True if the oldPassword have to be checked. When omitted it defaults to false.\n-\t */\n-\t/*#\n-\t * Changes user password in defined login-namespace.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param loginNamespace String Namespace\n-\t * @param newPassword String New password\n-\t * @param oldPassword String Old password which will be checked. This parameter is required only if checkOldPassword is set to true.\n-\t * @param checkOldPassword boolean True if the oldPassword have to be checked. When omitted it defaults to false.\n-\t */\n-\tchangePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"login\")) {\n-\t\t\t\tString login = parms.readString(\"login\");\n-\t\t\t\tif (parms.contains(\"checkOldPassword\") && parms.readBoolean(\"checkOldPassword\")) {\n-\t\t\t\t\tac.getUsersManager().changePassword(ac.getSession(), login, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), true);\n-\t\t\t\t} else {\n-\t\t\t\t\tac.getUsersManager().changePassword(ac.getSession(), login, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), false);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tUser user = ac.getUserById(parms.readInt(\"user\"));\n-\t\t\t\tif (parms.contains(\"checkOldPassword\") && parms.readBoolean(\"checkOldPassword\")) {\n-\t\t\t\t\tac.getUsersManager().changePassword(ac.getSession(), user, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), true);\n-\t\t\t\t} else {\n-\t\t\t\t\tac.getUsersManager().changePassword(ac.getSession(), user, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\t/*#\n-\t * Changes user's password in namespace based on encrypted parameters\n-\t *\n-\t * @param i String first encrypted parameter\n-\t * @param m String second encrypted parameter\n-\t * @param password String new password\n-\t */\n-\tchangeNonAuthzPassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getUsersManager().changeNonAuthzPassword(ac.getSession(), parms.readString(\"i\"), parms.readString(\"m\"), parms.readString(\"password\"));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\t/*#\n-\t * Creates a password in external authz system.\n-\t *\n-\t * @param login String Login\n-\t * @param namespace String Namespace\n-\t * @param password String password\n-\t */\n-\t@Deprecated\n-\tcreatePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getUsersManager().createPassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"), parms.readString(\"password\"));\n-\t\t\t} else {\n-\t\t\t\tac.getUsersManager().createPassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"), parms.readString(\"password\"));\n-\t\t\t}\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Reserves a random password in external authz system. User shouldn't be able to log-in (account disabled, password unknown to him).\n-\t * This is usefull when manager create account for others and later send them password reset request.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param namespace String Namespace\n-\t */\n-\treserveRandomPassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getUsersManager().reserveRandomPassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"));\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Reserves password for a user in specified login-namespace.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param namespace String Namespace\n-\t * @param password String password\n-\t */\n-\t/*#\n-\t * Reserves password for a user in specified login-namespace.\n-\t *\n-\t * @param login String Login\n-\t * @param namespace String Namespace\n-\t * @param password String password\n-\t */\n-\treservePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getUsersManager().reservePassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"), parms.readString(\"password\"));\n-\t\t\t} else {\n-\t\t\t\tac.getUsersManager().reservePassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"), parms.readString(\"password\"));\n-\t\t\t}\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n-\t * in external authz system using his credentials.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param namespace String Namespace\n-\t */\n-\t/*#\n-\t * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n-\t * in external authz system using his credentials.\n-\t *\n-\t * @param login String Login\n-\t * @param namespace String Namespace\n-\t */\n-\tvalidatePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getUsersManager().validatePassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"));\n-\t\t\t} else {\n-\t\t\t\tac.getUsersManager().validatePassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"));\n-\t\t\t}\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n-\t * in external authz system using his credentials. It also creates UserExtSource and sets some required attributes.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param login String Login\n-\t * @param namespace String Namespace\n-\t */\n-\tvalidatePasswordAndSetExtSources {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getUsersManager().validatePasswordAndSetExtSources(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"login\"), parms.readString(\"namespace\"));\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Set new login in namespace if login is available and user doesn't have login in that namespace.\n-\t * !! Works only for service/guest users => specific users !!\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param login String Login\n-\t * @param namespace String Namespace\n-\t */\n-\tsetLogin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getUsersManager().setLogin(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"), parms.readString(\"login\"));\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Request to change preferred email address of user.\n-\t * Validation mail is sent on new address.\n-\t *\n-\t * Change is not saved until user validate new email address\n-\t * by calling validatePreferredEmailChange() method with\n-\t * proper set of parameters (sent in validation mail).\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param email String new email address to set\n-\t */\n-\trequestPreferredEmailChange {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tString referer = parms.getServletRequest().getHeader(\"Referer\");\n-\t\t\tif (referer == null || referer.isEmpty()) {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"Missing \\\"Referer\\\" header in HTTP request. Please check your browser settings.\");\n-\t\t\t}\n-\n-\t\t\tac.getUsersManager().requestPreferredEmailChange(ac.getSession(),\n-\t\t\t\t\treferer,\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tparms.readString(\"email\"));\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Validate new preferred email address.\n-\t *\n-\t * Request to validate is determined based\n-\t * on encrypted parameters sent in email notice\n-\t * by requestPreferredEmailChange() method.\n-\t *\n-\t * @param i String encrypted request parameter\n-\t * @param m String encrypted request parameter\n-\t * @param u int <code>id</code> of user you want to validate preferred email request\n-\t *\n-\t * @return String new validated email address\n-\t */\n-\tvalidatePreferredEmailChange {\n-\t\t@Override\n-\t\tpublic String call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getUsersManager().validatePreferredEmailChange(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"u\")),\n-\t\t\t\t\tparms.readString(\"i\"),\n-\t\t\t\t\tparms.readString(\"m\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of email addresses of user, which are\n-\t * awaiting validation and are inside time window\n-\t * for validation.\n-\t *\n-\t * If there is no preferred email change request pending\n-\t * or requests are outside time window for validation,\n-\t * returns empty list.\n-\t *\n-\t * @param user int <code>id</code> of user to check\n-\t *\n-\t * @return List<String> user's email addresses pending validation\n-\t */\n-\tgetPendingPreferredEmailChanges {\n-\t\t@Override\n-\t\tpublic List<String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getUsersManager().getPendingPreferredEmailChanges(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets count of all users.\n-\n-\t * @return int Users count\n-\t */\n-\tgetUsersCount {\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUsersCount(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates alternative password in external system.\n-\t *\n-\t * @param user int Users <code>id</code>\n-\t * @param description String Description of a password (e.g. 'mobile phone', 'tablet', ...)\n-\t * @param loginNamespace String Login namespace\n-\t * @param password String String representation of password\n-\t */\n-\tcreateAlternativePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tac.getUsersManager().createAlternativePassword(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tparms.readString(\"description\"),\n-\t\t\t\t\tparms.readString(\"loginNamespace\"),\n-\t\t\t\t\tparms.readString(\"password\"));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes alternative password in external system.\n-\t *\n-\t * @param user int Users <code>id</code>\n-\t * @param loginNamespace String Login namespace\n-\t * @param passwordId String Password <code>id</code>\n-\t */\n-\tdeleteAlternativePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tac.getUsersManager().deleteAlternativePassword(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tparms.readString(\"loginNamespace\"),\n-\t\t\t\t\tparms.readString(\"passwordId\"));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates user's userExtSource last access time in DB. We can get information which userExtSource has been used as a last one.\n-\t *\n-\t * @param userExtSource int UserExtSource <code>id</code>\n-\t */\n-\tupdateUserExtSourceLastAccess {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getUsersManager().updateUserExtSourceLastAccess(ac.getSession(),\n-\t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Generate user account in a backend system associated with login-namespace in Perun.\n-\t *\n-\t * This method consumes optional parameters map. Requirements are implementation-dependant\n-\t * for each login-namespace.\n-\t *\n-\t * Returns map with\n-\t * 1: key=login-namespace attribute urn, value=generated login\n-\t * 2: rest of opt response attributes...\n-\t *\n-\t * @param namespace String\n-\t * @param parameters Map\n-\t *\n-\t * @return Map<String, String> Map of data from backed response\n-\t * @throws InternalErrorException\n-\t */\n-\tgenerateAccount {\n-\n-\t\t@Override\n-\t\tpublic Map<String, String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getUsersManager().generateAccount(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"namespace\"),\n-\t\t\t\t\tparms.read(\"parameters\", HashMap.class));\n-\t\t}\n-\n-\t};\n+    /*#\n+     * Returns user based on one of the userExtSource.\n+     *\n+     * @param userExtSource UserExtSource JSON object UserExtSource\n+     * @return User User object\n+     */\n+    getUserByUserExtSource {\n+        @Override\n+        public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUserByUserExtSource(ac.getSession(),\n+                    parms.read(\"userExtSource\", UserExtSource.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns user by his login in external source and external source.\n+     *\n+     * @param extSourceName String Ext source name\n+     * @param extLogin String Ext source login\n+     * @return User User object\n+     */\n+    getUserByExtSourceNameAndExtLogin {\n+        @Override\n+        public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUserByExtSourceNameAndExtLogin(ac.getSession(),\n+                    parms.readString(\"extSourceName\"),\n+                    parms.readString(\"extLogin\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns user by its <code>id</code>.\n+     *\n+     * @param id int User <code>id</code>\n+     * @return User User object\n+     */\n+    getUserById {\n+        @Override\n+        public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUserById(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all users in Perun.\n+     *\n+     * @return List<User> All Perun users\n+     */\n+    getUsers {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUsers(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Returns all specific users in Perun.\n+     *\n+     * @return List<User> All Perun service users\n+     */\n+    getSpecificUsers {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getSpecificUsers(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Return all specific users who are owned by the user.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<User> Specific users for a user\n+     */\n+    getSpecificUsersByUser {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getSpecificUsersByUser(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")));\n+        }\n+    },\n+\n+    /*#\n+     * Return all users who owns the specific user.\n+     *\n+     * @param specificUser int Specific User <code>id</code>\n+     * @return List<User> Users for a service user\n+     */\n+    getUsersBySpecificUser {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUsersBySpecificUser(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"specificUser\")));\n+        }\n+    },\n+\n+    /*#\n+     * Add specific user owner (the user).\n+     *\n+     * @param user int User <code>id</code>\n+     * @param specificUser int Specific user <code>id</code>\n+     */\n+    addSpecificUserOwner {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            ac.getUsersManager().addSpecificUserOwner(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")),\n+                    ac.getUserById(parms.readInt(\"specificUser\")));\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove specific user owner (the user).\n+     *\n+     * @param user int User <code>id</code>\n+     * @param specificUser int Specific user <code>id</code>\n+     */\n+    removeSpecificUserOwner {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            ac.getUsersManager().removeSpecificUserOwner(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")),\n+                    ac.getUserById(parms.readInt(\"specificUser\")));\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get User to RichUser without attributes.\n+     *\n+     * @param user int user <code>id</code>\n+     * @return RichUser found rich user\n+     */\n+    getRichUser {\n+        @Override\n+        public RichUser call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getRichUser(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")));\n+        }\n+    },\n+\n+    /*#\n+     * Get User to RichUser with attributes.\n+     *\n+     * @param user int user <code>id</code>\n+     * @return RichUser found rich user with attributes\n+     */\n+    getRichUserWithAttributes {\n+        @Override\n+        public RichUser call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getRichUserWithAttributes(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")));\n+        }\n+    },\n+\n+    /*#\n+     * Get All richUsers with or without specificUsers.\n+     *\n+     * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n+     * @return List<RichUser> all rich users without attributes\n+     */\n+    getAllRichUsers {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getAllRichUsers(ac.getSession(),\n+                    parms.readBoolean(\"includedSpecificUsers\"));\n+        }\n+    },\n+\n+    /*#\n+     * Get All richUsers with or without specificUsers.\n+     *\n+     * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n+     * @return List<RichUser> all rich users with attributes\n+     */\n+    getAllRichUsersWithAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(),\n+                    parms.readBoolean(\"includedSpecificUsers\"));\n+        }\n+    },\n+\n+    /*#\n+     * From Users makes RichUsers without attributes.\n+     *\n+     * @param users List<RichUser> users to convert\n+     * @return List<RichUser> list of rich users\n+     */\n+    getRichUsersFromListOfUsers {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getUsersManager().getRichUsersFromListOfUsers(ac.getSession(),\n+                    parms.readList(\"users\", User.class));\n+        }\n+    },\n+\n+    /*#\n+     * From Users makes RichUsers with attributes.\n+     *\n+     * @param users List<RichUser> users to convert\n+     * @return List<RichUser> list of richUsers\n+     */\n+    getRichUsersFromListOfUsersWithAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getUsersManager().getRichUsersWithAttributesFromListOfUsers(ac.getSession(),\n+                    parms.readList(\"users\", User.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all RichUsers with attributes who are not member of any VO.\n+     *\n+     * @return List<RichUser> list of richUsers who are not member of any VO\n+     */\n+    getRichUsersWithoutVoAssigned {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getRichUsersWithoutVoAssigned(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Get All richUsers with or without specificUsers with selected attributes.\n+     *\n+     * @param attrsNames List<String> list of attributes name\n+     * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n+     * @return List<RichUser> list of RichUsers\n+     */\n+    /*#\n+     * Get All richUsers with or without specificUsers with all included attributes.\n+     *\n+     * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n+     * @return List<RichUser> list of RichUsers\n+     */\n+    getRichUsersWithAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            if (parms.contains(\"attrsNames\")) {\n+                return ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(),\n+                        parms.readBoolean(\"includedSpecificUsers\"),\n+                        parms.readList(\"attrsNames\", String.class));\n+            } else {\n+                return ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(),\n+                        parms.readBoolean(\"includedSpecificUsers\"), null);\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of RichUsers with attributes who matches the searchString\n+     *\n+     * @param searchString String searched string\n+     * @param attrsNames List<String> list of attributes name\n+     * @return List<RichUser> list of RichUsers\n+     */\n+    findRichUsersWithAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            if (parms.contains(\"attrsNames\")) {\n+                return ac.getUsersManager().findRichUsersWithAttributes(ac.getSession(),\n+                        parms.readString(\"searchString\"),\n+                        parms.readList(\"attrsNames\", String.class));\n+            } else {\n+                return ac.getUsersManager().findRichUsersWithAttributes(ac.getSession(),\n+                        parms.readString(\"searchString\"), null);\n+            }\n+\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of RichUsers which are not members of any VO and with selected attributes\n+     *\n+     * @param attrsNames List<String> list of attributes name\n+     * @return List<RichUser> list of RichUsers\n+     */\n+    getRichUsersWithoutVoWithAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            if (parms.contains(\"attrsNames\")) {\n+                return ac.getUsersManager().getRichUsersWithoutVoWithAttributes(ac.getSession(),\n+                        parms.readList(\"attrsNames\", String.class));\n+            } else {\n+                return ac.getUsersManager().getRichUsersWithoutVoWithAttributes(ac.getSession(), null);\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Return list of RichUsers who matches the searchString and are not member in specific VO and with selected attributes.\n+     *\n+     * @param vo VO virtual organization\n+     * @param searchString String searched string\n+     * @param attrsName List<String> list of attributes name\n+     * @return List<RichUser> list of RichUsers\n+     */\n+    findRichUsersWithoutSpecificVoWithAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            if (parms.contains(\"attrsNames\")) {\n+                return ac.getUsersManager().findRichUsersWithoutSpecificVoWithAttributes(ac.getSession(),\n+                        ac.getVoById(parms.readInt(\"vo\")),\n+                        parms.readString(\"searchString\"),\n+                        parms.readList(\"attrsNames\", String.class));\n+            } else {\n+                return ac.getUsersManager().findRichUsersWithoutSpecificVoWithAttributes(ac.getSession(),\n+                        ac.getVoById(parms.readInt(\"vo\")),\n+                        parms.readString(\"searchString\"), null);\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Deletes a user. User is not deleted, if is member of any VO or is associated with any service identity.\n+     *\n+     * @param user int User <code>id</code>\n+     */\n+    /*#\n+     * Deletes a user (force).\n+     * Also removes associated members.\n+     *\n+     * @param user int User <code>id</code>\n+     * @param force boolean If true, use force deletion.\n+     */\n+    deleteUser {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n+                ac.getUsersManager().deleteUser(ac.getSession(),\n+                        ac.getUserById(parms.readInt(\"user\")), true);\n+            } else {\n+                ac.getUsersManager().deleteUser(ac.getSession(),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            }\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Updates users data in DB.\n+     *\n+     * @param user User JSON object\n+     * @return User Updated user\n+     */\n+    updateUser {\n+        @Override\n+        public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getUsersManager().updateUser(ac.getSession(),\n+                    parms.read(\"user\", User.class));\n+        }\n+    },\n+\n+    /*#\n+     * Updates titles before/after users name\n+     *\n+     * Titles must be set in User object.\n+     * Setting any title to null will remove title from name.\n+     * Other user's properties are ignored.\n+     *\n+     * @param user User JSON object with titles to set\n+     * @return User Updated user\n+     */\n+    updateNameTitles {\n+        @Override\n+        public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getUsersManager().updateNameTitles(ac.getSession(),\n+                    parms.read(\"user\", User.class));\n+        }\n+    },\n+\n+    /*#\n+     * Updates user's userExtSource in DB.\n+     *\n+     * @param userExtSource UserExtSource JSON object\n+     * @return UserExtSource Updated userExtSource\n+     */\n+    updateUserExtSource {\n+        @Override\n+        public UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getUsersManager().updateUserExtSource(ac.getSession(),\n+                    parms.read(\"userExtSource\", UserExtSource.class));\n+        }\n+    },\n+\n+    /*#\n+     * Gets list of all user's external sources of the user.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<UserExtSource> list of user's external sources\n+     */\n+    getUserExtSources {\n+        @Override\n+        public List<UserExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUserExtSources(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")));\n+        }\n+    },\n+\n+    /*#\n+     * Adds user's external sources.\n+     * @param user int User <code>id</code>\n+     * @param userExtSource UserExtSource JSON object\n+     * @return UserExtSource Newly added UserExtSource\n+     */\n+    addUserExtSource {\n+        @Override\n+        public UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getUsersManager().addUserExtSource(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")),\n+                    parms.read(\"userExtSource\", UserExtSource.class));\n+        }\n+    },\n+\n+    /*#\n+     * Remove user's external source.\n+     * Persistent UserExtSources are not removed unless <code>force</code> param is present and set to <code>true</code>.\n+     * @param user int User <code>id</code>\n+     * @param userExtSource int UserExtSource <code>id</code>\n+     * @param force boolean If true, use force deletion.\n+     */\n+    removeUserExtSource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n+                ac.getUsersManager().removeUserExtSource(ac.getSession(),\n+                        ac.getUserById(parms.readInt(\"user\")),\n+                        ac.getUserExtSourceById(parms.readInt(\"userExtSource\")), true);\n+            } else {\n+                ac.getUsersManager().removeUserExtSource(ac.getSession(),\n+                        ac.getUserById(parms.readInt(\"user\")),\n+                        ac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n+            }\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Move user's external source from sourceUser to targetUser.\n+     * @param sourceUser int User <code>id</code>\n+     * @param targetUser int User <code>id</code>\n+     * @param userExtSource int UserExtSource <code>id</code>\n+     */\n+    moveUserExtSource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getUsersManager().moveUserExtSource(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"sourceUser\")),\n+                    ac.getUserById(parms.readInt(\"targetUser\")),\n+                    ac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get the user ext source by its id.\n+     *\n+     * @param userExtSource int UserExtSource <code>id</code>\n+     * @return UserExtSource User external source for the id\n+     */\n+    getUserExtSourceById {\n+        @Override\n+        public UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUserExtSourceById(ac.getSession(),\n+                    parms.readInt(\"userExtSource\"));\n+        }\n+    },\n+\n+    /*#\n+     * Gets user's external source by the user's external login and external source.\n+     *\n+     * @param extSource ExtSource JSON object\n+     * @param extSourceLogin String Login\n+     * @return UserExtSource UserExtSource found user's external source\n+     */\n+    getUserExtSourceByExtLogin {\n+        @Override\n+        public UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUserExtSourceByExtLogin(ac.getSession(),\n+                    parms.read(\"extSource\", ExtSource.class),\n+                    parms.readString(\"extSourceLogin\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns user by VO member.\n+     *\n+     * @param member int Member <code>id</code>\n+     * @return User User object\n+     */\n+    getUserByMember {\n+        @Override\n+        public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUserByMember(ac.getSession(),\n+                    ac.getMemberById(parms.readInt(\"member\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of users who matches the searchString, searching name, email, logins.\n+     *\n+     * @param searchString String String to search by\n+     * @return List<User> Found users\n+     */\n+    findUsers {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().findUsers(ac.getSession(),\n+                    parms.readString(\"searchString\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of RichUsers with attributes who matches the searchString, searching name, email, logins.\n+     *\n+     * @param searchString String searched string\n+     * @return List<RichUser> list of RichUsers\n+     */\n+    findRichUsers {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().findRichUsers(ac.getSession(),\n+                    parms.readString(\"searchString\"));\n+        }\n+    },\n+\n+    /*#\n+     * Return list of users who matches the searchString, searching name, email and logins\n+     * and are not member of specific VO.\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @param searchString String String to search by\n+     * @return List<User> Found users\n+     */\n+    getUsersWithoutSpecificVo {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUsersWithoutSpecificVo(ac.getSession(),\n+                    ac.getVoById(parms.readInt(\"vo\")),\n+                    parms.readString(\"searchString\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of users who matches the searchString.\n+     *\n+     * @param searchString String String to search by\n+     * @return List<User> Found users\n+     */\n+    /*#\n+     * Returns list of users who matches the parameters.\n+     * All parameters must be present, even if empty.\n+     *\n+     * @param titleBefore String Title before name\n+     * @param firstName String First name\n+     * @param middleName String Middle name\n+     * @param lastName String Last name\n+     * @param titleAfter String Title after\n+     * @return List<User> Found users\n+     */\n+    findUsersByName {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"searchString\")) {\n+                return ac.getUsersManager().findUsersByName(ac.getSession(),\n+                        parms.readString(\"searchString\"));\n+            } else if (parms.contains(\"titleBefore\") && parms.contains(\"firstName\") &&\n+                    parms.contains(\"middleName\") && parms.contains(\"lastName\") && parms.contains(\"titleAfter\")) {\n+                return ac.getUsersManager().findUsersByName(ac.getSession(),\n+                        parms.readString(\"titleBefore\"), parms.readString(\"firstName\"),\n+                        parms.readString(\"middleName\"), parms.readString(\"lastName\"),\n+                        parms.readString(\"titleAfter\"));\n+            } else {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"searchString or (titleBefore and firstName and middleName and lastName and titleAfter)\");\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n+     *\n+     * @param attribute Attribute JSON object\n+     * @return List<User> Found users\n+     */\n+    /*#\n+     * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n+     *\n+     * @param attributeName String URN of attribute to search by\n+     * @param attributeValue Object Value to search by (type of value must match attribute value type)\n+     * @return List<User> Found users\n+     */\n+    getUsersByAttribute {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"attributeName\")) {\n+                if (parms.contains(\"attributeValue\")) {\n+                    String attributeName = parms.readString(\"attributeName\");\n+                    Attribute attr = new Attribute(ac.getAttributesManager().getAttributeDefinition(ac.getSession(), attributeName));\n+\n+                    if (attr.getType().equals(Integer.class.getName())) {\n+                        attr.setValue(parms.readInt(\"attributeValue\"));\n+                    } else if (attr.getType().equals(String.class.getName()) || attr.getType().equals(BeansUtils.largeStringClassName)) {\n+                        attr.setValue(parms.readString(\"attributeValue\"));\n+                    } else if (attr.getType().equals(Boolean.class.getName())) {\n+                        attr.setValue(parms.readBoolean(\"attributeValue\"));\n+                    } else if (attr.getType().equals(ArrayList.class.getName()) || attr.getType().equals(BeansUtils.largeArrayListClassName)) {\n+                        attr.setValue(parms.readList(\"attributeValue\", String.class));\n+                    } else if (attr.getType().equals(LinkedHashMap.class.getName())) {\n+                        attr.setValue(parms.read(\"attributeValue\", LinkedHashMap.class));\n+                    } else {\n+                        throw new RpcException(RpcException.Type.CANNOT_DESERIALIZE_VALUE, \"attributeValue is not the same type like value of attribute with the attributeName.\");\n+                    }\n+                    return ac.getUsersManager().getUsersByAttribute(ac.getSession(), attr);\n+                } else {\n+                    throw new RpcException(RpcException.Type.MISSING_VALUE, \"attributeValue\");\n+                }\n+            } else if (parms.contains(\"attribute\")) {\n+                return ac.getUsersManager().getUsersByAttribute(ac.getSession(), parms.read(\"attribute\", Attribute.class));\n+            } else {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"attribute or (attributeName and attributeValue)\");\n+            }\n+        }\n+\n+    },\n+\n+    /*#\n+     * Returns all users who have attribute which have value which contains searchString.\n+     *\n+     * @param attributeName String URN of attribute to search by\n+     * @param attributeValue String Value to search by\n+     * @return List<User> Found users\n+     */\n+    getUsersByAttributeValue {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"attributeName\")) {\n+                if (parms.contains(\"attributeValue\")) {\n+                    return ac.getUsersManager().getUsersByAttributeValue(ac.getSession(), parms.readString(\"attributeName\"), parms.readString(\"attributeValue\"));\n+                } else {\n+                    throw new RpcException(RpcException.Type.MISSING_VALUE, \"attributeValue\");\n+                }\n+            } else {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"attributeName\");\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of VOs, where the user is an Administrator.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<Vo> Found VOs\n+     */\n+    getVosWhereUserIsAdmin {\n+        @Override\n+        public List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getVosWhereUserIsAdmin(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of VOs, where the user is a Member.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<Vo> Found VOs\n+     */\n+    getVosWhereUserIsMember {\n+        @Override\n+        public List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getVosWhereUserIsMember(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of Groups in Perun, where the User is a direct Administrator\n+     * or he is a member of any group which is Administrator of some of these Groups.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<Group> Found Groups\n+     */\n+    /*#\n+     * Returns list of Groups in selected Vo, where the User is a direct Administrator\n+     * or he is a member of any group which is Administrator of some of these Groups.\n+     *\n+     * @param user int User <code>id</code>\n+     * @param vo int Vo <code>id</code>\n+     * @return List<Group> Found Groups\n+     */\n+    getGroupsWhereUserIsAdmin {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"vo\")) {\n+                return ac.getUsersManager().getGroupsWhereUserIsAdmin(ac.getSession(),\n+                        ac.getVoById(parms.readInt(\"vo\")),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            } else {\n+                return ac.getUsersManager().getGroupsWhereUserIsAdmin(ac.getSession(),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Get all resources from the facility which have the user access on.\n+     *\n+     * @param user int User <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @return List<Resource> Allowed resources\n+     */\n+    /*#\n+     * Get all resources which have the user access on.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<Resource> Allowed resources\n+     */\n+    getAllowedResources {\n+        @Override\n+        public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            User user = ac.getUserById(parms.readInt(\"user\"));\n+            if (parms.contains(\"facility\")) {\n+                Facility facility = ac.getFacilityById(parms.readInt(\"facility\"));\n+                return ac.getUsersManager().getAllowedResources(ac.getSession(), facility, user);\n+            } else {\n+                return ac.getUsersManager().getAllowedResources(ac.getSession(), user);\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Get all rich resources which have the user assigned.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<RichResource> Assigned rich resources\n+     */\n+    getAssignedRichResources {\n+        @Override\n+        public List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            User user = ac.getUserById(parms.readInt(\"user\"));\n+            return ac.getUsersManager().getAssignedRichResources(ac.getSession(), user);\n+        }\n+    },\n+\n+    /*#\n+     * Checks if the login is available in the namespace.\n+     *\n+     * @param loginNamespace String Namespace\n+     * @param login String Login\n+     * @exampleResponse 1\n+     * @return int 1: login available, 0: login not available\n+     */\n+    isLoginAvailable {\n+        @Override\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (ac.getUsersManager().isLoginAvailable(ac.getSession(), parms.readString(\"loginNamespace\"), parms.readString(\"login\"))) {\n+                return 1;\n+            } else {\n+                return 0;\n+            }\n+\n+        }\n+    },\n+\n+    /*#\n+     * Returns all users who are not member of any VO.\n+     *\n+     * @return List<User> Found users\n+     */\n+    getUsersWithoutVoAssigned {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUsersWithoutVoAssigned(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Adds PERUNADMIN role to the user.\n+     *\n+     * @param user int User <code>id</code>\n+     */\n+    makeUserPerunAdmin {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            User user = ac.getUserById(parms.readInt(\"user\"));\n+            ac.getUsersManager().makeUserPerunAdmin(ac.getSession(), user);\n+            return null;\n+        }\n+    },\n+\n+\n+    /*#\n+     * Changes user password in defined login-namespace.\n+     *\n+     * @param login String Users login\n+     * @param loginNamespace String Namespace\n+     * @param newPassword String New password\n+     * @param oldPassword String Old password which will be checked. This parameter is required only if checkOldPassword is set to true.\n+     * @param checkOldPassword boolean True if the oldPassword have to be checked. When omitted it defaults to false.\n+     */\n+    /*#\n+     * Changes user password in defined login-namespace.\n+     *\n+     * @param user int User <code>id</code>\n+     * @param loginNamespace String Namespace\n+     * @param newPassword String New password\n+     * @param oldPassword String Old password which will be checked. This parameter is required only if checkOldPassword is set to true.\n+     * @param checkOldPassword boolean True if the oldPassword have to be checked. When omitted it defaults to false.\n+     */\n+    changePassword {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"login\")) {\n+                String login = parms.readString(\"login\");\n+                if (parms.contains(\"checkOldPassword\") && parms.readBoolean(\"checkOldPassword\")) {\n+                    ac.getUsersManager().changePassword(ac.getSession(), login, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), true);\n+                } else {\n+                    ac.getUsersManager().changePassword(ac.getSession(), login, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), false);\n+                }\n+            } else {\n+                User user = ac.getUserById(parms.readInt(\"user\"));\n+                if (parms.contains(\"checkOldPassword\") && parms.readBoolean(\"checkOldPassword\")) {\n+                    ac.getUsersManager().changePassword(ac.getSession(), user, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), true);\n+                } else {\n+                    ac.getUsersManager().changePassword(ac.getSession(), user, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), false);\n+                }\n+            }\n+            return null;\n+        }\n+    },\n+    /*#\n+     * Changes user's password in namespace based on encrypted parameters\n+     *\n+     * @param i String first encrypted parameter\n+     * @param m String second encrypted parameter\n+     * @param password String new password\n+     */\n+    changeNonAuthzPassword {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getUsersManager().changeNonAuthzPassword(ac.getSession(), parms.readString(\"i\"), parms.readString(\"m\"), parms.readString(\"password\"));\n+\n+            return null;\n+        }\n+    },\n+    /*#\n+     * Creates a password in external authz system.\n+     *\n+     * @param login String Login\n+     * @param namespace String Namespace\n+     * @param password String password\n+     */\n+    @Deprecated\n+    createPassword {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"user\")) {\n+                ac.getUsersManager().createPassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"), parms.readString(\"password\"));\n+            } else {\n+                ac.getUsersManager().createPassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"), parms.readString(\"password\"));\n+            }\n+\n+            return null;\n+\n+        }\n+    },\n+    /*#\n+     * Reserves a random password in external authz system. User shouldn't be able to log-in (account disabled, password unknown to him).\n+     * This is usefull when manager create account for others and later send them password reset request.\n+     *\n+     * @param user int User <code>id</code>\n+     * @param namespace String Namespace\n+     */\n+    reserveRandomPassword {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getUsersManager().reserveRandomPassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"));\n+\n+            return null;\n+\n+        }\n+    },\n+    /*#\n+     * Reserves password for a user in specified login-namespace.\n+     *\n+     * @param user int User <code>id</code>\n+     * @param namespace String Namespace\n+     * @param password String password\n+     */\n+    /*#\n+     * Reserves password for a user in specified login-namespace.\n+     *\n+     * @param login String Login\n+     * @param namespace String Namespace\n+     * @param password String password\n+     */\n+    reservePassword {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"user\")) {\n+                ac.getUsersManager().reservePassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"), parms.readString(\"password\"));\n+            } else {\n+                ac.getUsersManager().reservePassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"), parms.readString(\"password\"));\n+            }\n+\n+            return null;\n+\n+        }\n+    },\n+    /*#\n+     * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n+     * in external authz system using his credentials.\n+     *\n+     * @param user int User <code>id</code>\n+     * @param namespace String Namespace\n+     */\n+    /*#\n+     * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n+     * in external authz system using his credentials.\n+     *\n+     * @param login String Login\n+     * @param namespace String Namespace\n+     */\n+    validatePassword {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"user\")) {\n+                ac.getUsersManager().validatePassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"));\n+            } else {\n+                ac.getUsersManager().validatePassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"));\n+            }\n+\n+            return null;\n+\n+        }\n+    },\n+\n+    /*#\n+     * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n+     * in external authz system using his credentials. It also creates UserExtSource and sets some required attributes.\n+     *\n+     * @param user int User <code>id</code>\n+     * @param login String Login\n+     * @param namespace String Namespace\n+     */\n+    validatePasswordAndSetExtSources {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getUsersManager().validatePasswordAndSetExtSources(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"login\"), parms.readString(\"namespace\"));\n+\n+            return null;\n+\n+        }\n+    },\n+    /*#\n+     * Set new login in namespace if login is available and user doesn't have login in that namespace.\n+     * !! Works only for service/guest users => specific users !!\n+     *\n+     * @param user int User <code>id</code>\n+     * @param login String Login\n+     * @param namespace String Namespace\n+     */\n+    setLogin {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getUsersManager().setLogin(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"), parms.readString(\"login\"));\n+\n+            return null;\n+\n+        }\n+    },\n+    /*#\n+     * Request to change preferred email address of user.\n+     * Validation mail is sent on new address.\n+     *\n+     * Change is not saved until user validate new email address\n+     * by calling validatePreferredEmailChange() method with\n+     * proper set of parameters (sent in validation mail).\n+     *\n+     * @param user int User <code>id</code>\n+     * @param email String new email address to set\n+     */\n+    requestPreferredEmailChange {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            String referer = parms.getServletRequest().getHeader(\"Referer\");\n+            if (referer == null || referer.isEmpty()) {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"Missing \\\"Referer\\\" header in HTTP request. Please check your browser settings.\");\n+            }\n+\n+            ac.getUsersManager().requestPreferredEmailChange(ac.getSession(),\n+                    referer,\n+                    ac.getUserById(parms.readInt(\"user\")),\n+                    parms.readString(\"email\"));\n+\n+            return null;\n+\n+        }\n+    },\n+    /*#\n+     * Validate new preferred email address.\n+     *\n+     * Request to validate is determined based\n+     * on encrypted parameters sent in email notice\n+     * by requestPreferredEmailChange() method.\n+     *\n+     * @param i String encrypted request parameter\n+     * @param m String encrypted request parameter\n+     * @param u int <code>id</code> of user you want to validate preferred email request\n+     *\n+     * @return String new validated email address\n+     */\n+    validatePreferredEmailChange {\n+        @Override\n+        public String call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getUsersManager().validatePreferredEmailChange(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"u\")),\n+                    parms.readString(\"i\"),\n+                    parms.readString(\"m\"));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Return list of email addresses of user, which are\n+     * awaiting validation and are inside time window\n+     * for validation.\n+     *\n+     * If there is no preferred email change request pending\n+     * or requests are outside time window for validation,\n+     * returns empty list.\n+     *\n+     * @param user int <code>id</code> of user to check\n+     *\n+     * @return List<String> user's email addresses pending validation\n+     */\n+    getPendingPreferredEmailChanges {\n+        @Override\n+        public List<String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getUsersManager().getPendingPreferredEmailChanges(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Gets count of all users.\n+\n+     * @return int Users count\n+     */\n+    getUsersCount {\n+        @Override\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getUsersManager().getUsersCount(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Creates alternative password in external system.\n+     *\n+     * @param user int Users <code>id</code>\n+     * @param description String Description of a password (e.g. 'mobile phone', 'tablet', ...)\n+     * @param loginNamespace String Login namespace\n+     * @param password String String representation of password\n+     */\n+    createAlternativePassword {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            ac.getUsersManager().createAlternativePassword(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")),\n+                    parms.readString(\"description\"),\n+                    parms.readString(\"loginNamespace\"),\n+                    parms.readString(\"password\"));\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Deletes alternative password in external system.\n+     *\n+     * @param user int Users <code>id</code>\n+     * @param loginNamespace String Login namespace\n+     * @param passwordId String Password <code>id</code>\n+     */\n+    deleteAlternativePassword {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            ac.getUsersManager().deleteAlternativePassword(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")),\n+                    parms.readString(\"loginNamespace\"),\n+                    parms.readString(\"passwordId\"));\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Updates user's userExtSource last access time in DB. We can get information which userExtSource has been used as a last one.\n+     *\n+     * @param userExtSource int UserExtSource <code>id</code>\n+     */\n+    updateUserExtSourceLastAccess {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            ac.getUsersManager().updateUserExtSourceLastAccess(ac.getSession(),\n+                    ac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Generate user account in a backend system associated with login-namespace in Perun.\n+     *\n+     * This method consumes optional parameters map. Requirements are implementation-dependant\n+     * for each login-namespace.\n+     *\n+     * Returns map with\n+     * 1: key=login-namespace attribute urn, value=generated login\n+     * 2: rest of opt response attributes...\n+     *\n+     * @param namespace String\n+     * @param parameters Map\n+     *\n+     * @return Map<String, String> Map of data from backed response\n+     * @throws InternalErrorException\n+     */\n+    generateAccount {\n+        @Override\n+        public Map<String, String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            return ac.getUsersManager().generateAccount(ac.getSession(),\n+                    parms.readString(\"namespace\"),\n+                    parms.read(\"parameters\", HashMap.class));\n+        }\n+\n+    };\n \n }\n",
            "diff_size": 1231
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/34/UsersManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/34/UsersManagerMethod.java\nindex 804fbf5345e..e458e347a6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/34/UsersManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/34/UsersManagerMethod.java\n@@ -2,7 +2,6 @@ package cz.metacentrum.perun.rpc.methods;\n \n import java.util.HashMap;\n import java.util.List;\n-\n import cz.metacentrum.perun.core.api.*;\n import cz.metacentrum.perun.core.api.exceptions.PerunException;\n import cz.metacentrum.perun.rpc.ApiCaller;\n@@ -13,1237 +12,1236 @@ import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n+\n public enum UsersManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Returns user based on one of the userExtSource.\n-\t *\n-\t * @param userExtSource UserExtSource JSON object UserExtSource\n-\t * @return User User object\n-\t */\n-\tgetUserByUserExtSource {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserByUserExtSource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"userExtSource\", UserExtSource.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns user by his login in external source and external source.\n-\t *\n-\t * @param extSourceName String Ext source name\n-\t * @param extLogin String Ext source login\n-\t * @return User User object\n-\t */\n-\tgetUserByExtSourceNameAndExtLogin {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserByExtSourceNameAndExtLogin(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"extSourceName\"),\n-\t\t\t\t\tparms.readString(\"extLogin\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns user by its <code>id</code>.\n-\t *\n-\t * @param id int User <code>id</code>\n-\t * @return User User object\n-\t */\n-\tgetUserById {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUserById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all users in Perun.\n-\t *\n-\t * @return List<User> All Perun users\n-\t */\n-\tgetUsers {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUsers(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all specific users in Perun.\n-\t *\n-\t * @return List<User> All Perun service users\n-\t */\n-\tgetSpecificUsers {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getSpecificUsers(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all specific users who are owned by the user.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<User> Specific users for a user\n-\t */\n-\tgetSpecificUsersByUser {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getSpecificUsersByUser(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all users who owns the specific user.\n-\t *\n-\t * @param specificUser int Specific User <code>id</code>\n-\t * @return List<User> Users for a service user\n-\t */\n-\tgetUsersBySpecificUser {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUsersBySpecificUser(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"specificUser\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Add specific user owner (the user).\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param specificUser int Specific user <code>id</code>\n-\t */\n-\taddSpecificUserOwner {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getUsersManager().addSpecificUserOwner(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"specificUser\")));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove specific user owner (the user).\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param specificUser int Specific user <code>id</code>\n-\t */\n-\tremoveSpecificUserOwner {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getUsersManager().removeSpecificUserOwner(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"specificUser\")));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get User to RichUser without attributes.\n-\t *\n-\t * @param user int user <code>id</code>\n-\t * @return RichUser found rich user\n-\t */\n-\tgetRichUser {\n-\n-\t\t@Override\n-\t\tpublic RichUser call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getRichUser(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get User to RichUser with attributes.\n-\t *\n-\t * @param user int user <code>id</code>\n-\t * @return RichUser found rich user with attributes\n-\t */\n-\tgetRichUserWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic RichUser call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getRichUserWithAttributes(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get All richUsers with or without specificUsers.\n-\t *\n-\t * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n-\t * @return List<RichUser> all rich users without attributes\n-\t */\n-\tgetAllRichUsers {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getAllRichUsers(ac.getSession(),\n-\t\t\t\t\tparms.readBoolean(\"includedSpecificUsers\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get All richUsers with or without specificUsers.\n-\t *\n-\t * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n-\t * @return List<RichUser> all rich users with attributes\n-\t */\n-\tgetAllRichUsersWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(),\n-\t\t\t\t\tparms.readBoolean(\"includedSpecificUsers\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * From Users makes RichUsers without attributes.\n-\t *\n-\t * @param users List<RichUser> users to convert\n-\t * @return List<RichUser> list of rich users\n-\t */\n-\tgetRichUsersFromListOfUsers {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().getRichUsersFromListOfUsers(ac.getSession(),\n-\t\t\t\t\tparms.readList(\"users\", User.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * From Users makes RichUsers with attributes.\n-\t *\n-\t * @param users List<RichUser> users to convert\n-\t * @return List<RichUser> list of richUsers\n-\t */\n-\tgetRichUsersFromListOfUsersWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().getRichUsersWithAttributesFromListOfUsers(ac.getSession(),\n-\t\t\t\t\tparms.readList(\"users\", User.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all RichUsers with attributes who are not member of any VO.\n-\t *\n-\t * @return List<RichUser> list of richUsers who are not member of any VO\n-\t */\n-\tgetRichUsersWithoutVoAssigned {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getRichUsersWithoutVoAssigned(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get All richUsers with or without specificUsers with selected attributes.\n-\t *\n-\t * @param attrsNames List<String> list of attributes name\n-\t * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\t/*#\n-\t * Get All richUsers with or without specificUsers with all included attributes.\n-\t *\n-\t * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\tgetRichUsersWithAttributes {\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif (parms.contains(\"attrsNames\")) {\n-\t\t\t\treturn ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tparms.readBoolean(\"includedSpecificUsers\"),\n-\t\t\t\t\t\tparms.readList(\"attrsNames\", String.class));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tparms.readBoolean(\"includedSpecificUsers\"), null);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of RichUsers with attributes who matches the searchString\n-\t *\n-\t * @param searchString String searched string\n-\t * @param attrsNames List<String> list of attributes name\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\tfindRichUsersWithAttributes {\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif (parms.contains(\"attrsNames\")) {\n-\t\t\t\treturn ac.getUsersManager().findRichUsersWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tparms.readString(\"searchString\"),\n-\t\t\t\t\t\tparms.readList(\"attrsNames\", String.class));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().findRichUsersWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tparms.readString(\"searchString\"), null);\n-\t\t\t}\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of RichUsers which are not members of any VO and with selected attributes\n-\t *\n-\t * @param attrsNames List<String> list of attributes name\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\tgetRichUsersWithoutVoWithAttributes {\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif (parms.contains(\"attrsNames\")) {\n-\t\t\t\treturn ac.getUsersManager().getRichUsersWithoutVoWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tparms.readList(\"attrsNames\", String.class));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().getRichUsersWithoutVoWithAttributes(ac.getSession(), null);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of RichUsers who matches the searchString and are not member in specific VO and with selected attributes.\n-\t *\n-\t * @param vo VO virtual organization\n-\t * @param searchString String searched string\n-\t * @param attrsName List<String> list of attributes name\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\tfindRichUsersWithoutSpecificVoWithAttributes {\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif (parms.contains(\"attrsNames\")) {\n-\t\t\t\treturn ac.getUsersManager().findRichUsersWithoutSpecificVoWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\tparms.readString(\"searchString\"),\n-\t\t\t\t\t\tparms.readList(\"attrsNames\", String.class));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().findRichUsersWithoutSpecificVoWithAttributes(ac.getSession(),\n-\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\tparms.readString(\"searchString\"), null);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes a user. User is not deleted, if is member of any VO or is associated with any service identity.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t * Deletes a user (force).\n-\t * Also removes associated members.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param force boolean If true, use force deletion.\n-\t */\n-\tdeleteUser {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n-\t\t\t\tac.getUsersManager().deleteUser(ac.getSession(),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")), true);\n-\t\t\t} else {\n-\t\t\t\tac.getUsersManager().deleteUser(ac.getSession(),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates users data in DB.\n-\t *\n-\t * @param user User JSON object\n-\t * @return User Updated user\n-\t */\n-\tupdateUser {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().updateUser(ac.getSession(),\n-\t\t\t\t\tparms.read(\"user\", User.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates titles before/after users name\n-\t *\n-\t * Titles must be set in User object.\n-\t * Setting any title to null will remove title from name.\n-\t * Other user's properties are ignored.\n-\t *\n-\t * @param user User JSON object with titles to set\n-\t * @return User Updated user\n-\t */\n-\tupdateNameTitles {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().updateNameTitles(ac.getSession(),\n-\t\t\t\t\tparms.read(\"user\", User.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates user's userExtSource in DB.\n-\t *\n-\t * @param userExtSource UserExtSource JSON object\n-\t * @return UserExtSource Updated userExtSource\n-\t */\n-\tupdateUserExtSource {\n-\n-\t\t@Override\n-\t\tpublic UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().updateUserExtSource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"userExtSource\", UserExtSource.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets list of all user's external sources of the user.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<UserExtSource> list of user's external sources\n-\t */\n-\tgetUserExtSources {\n-\n-\t\t@Override\n-\t\tpublic List<UserExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserExtSources(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds user's external sources.\n-\t * @param user int User <code>id</code>\n-\t * @param userExtSource UserExtSource JSON object\n-\t * @return UserExtSource Newly added UserExtSource\n-\t */\n-\taddUserExtSource {\n-\n-\t\t@Override\n-\t\tpublic UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getUsersManager().addUserExtSource(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tparms.read(\"userExtSource\", UserExtSource.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove user's external source.\n-\t * Persistent UserExtSources are not removed unless <code>force</code> param is present and set to <code>true</code>.\n-\t * @param user int User <code>id</code>\n-\t * @param userExtSource int UserExtSource <code>id</code>\n-\t * @param force boolean If true, use force deletion.\n-\t */\n-\tremoveUserExtSource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n-\t\t\t\tac.getUsersManager().removeUserExtSource(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")), true);\n-\t\t\t} else {\n-\t\t\t\tac.getUsersManager().removeUserExtSource(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n-\t\t\t}\n-\t\t\t\t\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Move user's external source from sourceUser to targetUser.\n-\t * @param sourceUser int User <code>id</code>\n-\t * @param targetUser int User <code>id</code>\n-\t * @param userExtSource int UserExtSource <code>id</code>\n-\t */\n-\tmoveUserExtSource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getUsersManager().moveUserExtSource(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"sourceUser\")),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"targetUser\")),\n-\t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get the user ext source by its id.\n-\t *\n-\t * @param userExtSource int UserExtSource <code>id</code>\n-\t * @return UserExtSource User external source for the id\n-\t */\n-\tgetUserExtSourceById {\n-\n-\t\t@Override\n-\t\tpublic UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserExtSourceById(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"userExtSource\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets user's external source by the user's external login and external source.\n-\t *\n-\t * @param extSource ExtSource JSON object\n-\t * @param extSourceLogin String Login\n-\t * @return UserExtSource UserExtSource found user's external source\n-\t */\n-\tgetUserExtSourceByExtLogin {\n-\n-\t\t@Override\n-\t\tpublic UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserExtSourceByExtLogin(ac.getSession(),\n-\t\t\t\t\tparms.read(\"extSource\", ExtSource.class),\n-\t\t\t\t\tparms.readString(\"extSourceLogin\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns user by VO member.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return User User object\n-\t */\n-\tgetUserByMember {\n-\n-\t\t@Override\n-\t\tpublic User call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUserByMember(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of users who matches the searchString, searching name, email, logins.\n-\t *\n-\t * @param searchString String String to search by\n-\t * @return List<User> Found users\n-\t */\n-\tfindUsers {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().findUsers(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"searchString\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of RichUsers with attributes who matches the searchString, searching name, email, logins.\n-\t *\n-\t * @param searchString String searched string\n-\t * @return List<RichUser> list of RichUsers\n-\t */\n-\tfindRichUsers {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().findRichUsers(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"searchString\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of users who matches the searchString, searching name, email and logins\n-\t * and are not member of specific VO.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @param searchString String String to search by\n-\t * @return List<User> Found users\n-\t */\n-\tgetUsersWithoutSpecificVo {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUsersWithoutSpecificVo(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\tparms.readString(\"searchString\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of users who matches the searchString.\n-\t *\n-\t * @param searchString String String to search by\n-\t * @return List<User> Found users\n-\t */\n-\t/*#\n-\t * Returns list of users who matches the parameters.\n-\t * All parameters must be present, even if empty.\n-\t *\n-\t * @param titleBefore String Title before name\n-\t * @param firstName String First name\n-\t * @param middleName String Middle name\n-\t * @param lastName String Last name\n-\t * @param titleAfter String Title after\n-\t * @return List<User> Found users\n-\t */\n-\tfindUsersByName {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"searchString\")) {\n-\t\t\t\treturn ac.getUsersManager().findUsersByName(ac.getSession(),\n-\t\t\t\t\t\tparms.readString(\"searchString\"));\n-\t\t\t} else if (parms.contains(\"titleBefore\") && parms.contains(\"firstName\") &&\n-\t\t\t\t\tparms.contains(\"middleName\") && parms.contains(\"lastName\") && parms.contains(\"titleAfter\")) {\n-\t\t\t\treturn ac.getUsersManager().findUsersByName(ac.getSession(),\n-\t\t\t\t\t\tparms.readString(\"titleBefore\"), parms.readString(\"firstName\"),\n-\t\t\t\t\t\tparms.readString(\"middleName\"), parms.readString(\"lastName\"),\n-\t\t\t\t\t\tparms.readString(\"titleAfter\"));\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"searchString or (titleBefore and firstName and middleName and lastName and titleAfter)\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n-\t *\n-\t * @param attribute Attribute JSON object\n-\t * @return List<User> Found users\n-\t */\n-\t/*#\n-\t * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n-\t *\n-\t * @param attributeName String URN of attribute to search by\n-\t * @param attributeValue Object Value to search by (type of value must match attribute value type)\n-\t * @return List<User> Found users\n-\t */\n-\tgetUsersByAttribute {\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"attributeName\")) {\n-\t\t\t\tif (parms.contains(\"attributeValue\")) {\n-\t\t\t\t\tString attributeName = parms.readString(\"attributeName\");\n-\t\t\t\t\tAttribute attr = new Attribute(ac.getAttributesManager().getAttributeDefinition(ac.getSession(), attributeName));\n-\n-\t\t\t\t\tif(attr.getType().equals(Integer.class.getName())) {\n-\t\t\t\t\t\tattr.setValue(parms.readInt(\"attributeValue\"));\n-\t\t\t\t\t} else if(attr.getType().equals(String.class.getName()) || attr.getType().equals(BeansUtils.largeStringClassName)) {\n-\t\t\t\t\t\tattr.setValue(parms.readString(\"attributeValue\"));\n-\t\t\t\t\t} else if(attr.getType().equals(Boolean.class.getName())) {\n-\t\t\t\t\t\tattr.setValue(parms.readBoolean(\"attributeValue\"));\n-\t\t\t\t\t} else if(attr.getType().equals(ArrayList.class.getName()) || attr.getType().equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\t\t\t\tattr.setValue(parms.readList(\"attributeValue\", String.class));\n-\t\t\t\t\t} else if(attr.getType().equals(LinkedHashMap.class.getName())) {\n-\t\t\t\t\t\tattr.setValue(parms.read(\"attributeValue\", LinkedHashMap.class));\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new RpcException(RpcException.Type.CANNOT_DESERIALIZE_VALUE, \"attributeValue is not the same type like value of attribute with the attributeName.\");\n-\t\t\t\t\t}\n-\t\t\t\t\treturn ac.getUsersManager().getUsersByAttribute(ac.getSession(),attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"attributeValue\");\n-\t\t\t\t}\n-\t\t\t} else if (parms.contains(\"attribute\")) {\n-\t\t\t\treturn ac.getUsersManager().getUsersByAttribute(ac.getSession(), parms.read(\"attribute\", Attribute.class));\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"attribute or (attributeName and attributeValue)\");\n-\t\t\t}\n-\t\t}\n-\n-\t},\n-\n-\t/*#\n-\t * Returns all users who have attribute which have value which contains searchString.\n-\t *\n-\t * @param attributeName String URN of attribute to search by\n-\t * @param attributeValue String Value to search by\n-\t * @return List<User> Found users\n-\t */\n-\tgetUsersByAttributeValue {\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"attributeName\")) {\n-\t\t\t\tif (parms.contains(\"attributeValue\")) {\n-\t\t\t\t\treturn ac.getUsersManager().getUsersByAttributeValue(ac.getSession(), parms.readString(\"attributeName\"), parms.readString(\"attributeValue\"));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"attributeValue\");\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"attributeName\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of VOs, where the user is an Administrator.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Vo> Found VOs\n-\t */\n-\tgetVosWhereUserIsAdmin {\n-\n-\t\t@Override\n-\t\tpublic List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getVosWhereUserIsAdmin(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of VOs, where the user is a Member.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Vo> Found VOs\n-\t */\n-\tgetVosWhereUserIsMember {\n-\n-\t\t@Override\n-\t\tpublic List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getVosWhereUserIsMember(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of Groups in Perun, where the User is a direct Administrator\n-\t * or he is a member of any group which is Administrator of some of these Groups.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Group> Found Groups\n-\t */\n-\t/*#\n-\t * Returns list of Groups in selected Vo, where the User is a direct Administrator\n-\t * or he is a member of any group which is Administrator of some of these Groups.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param vo int Vo <code>id</code>\n-\t * @return List<Group> Found Groups\n-\t */\n-\tgetGroupsWhereUserIsAdmin {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"vo\")) {\n-\t\t\t\treturn ac.getUsersManager().getGroupsWhereUserIsAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().getGroupsWhereUserIsAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all resources from the facility which have the user access on.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Resource> Allowed resources\n-\t */\n-\t/*#\n-\t * Get all resources which have the user access on.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Resource> Allowed resources\n-\t */\n-\tgetAllowedResources {\n-\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tUser user = ac.getUserById(parms.readInt(\"user\"));\n-\t\t\tif(parms.contains(\"facility\")) {\n-\t\t\t\tFacility facility = ac.getFacilityById(parms.readInt(\"facility\"));\n-\t\t\t\treturn ac.getUsersManager().getAllowedResources(ac.getSession(), facility, user);\n-\t\t\t} else {\n-\t\t\t\treturn ac.getUsersManager().getAllowedResources(ac.getSession(), user);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all rich resources which have the user assigned.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<RichResource> Assigned rich resources\n-\t */\n-\tgetAssignedRichResources {\n-\n-\t\t@Override\n-\t\tpublic List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tUser user = ac.getUserById(parms.readInt(\"user\"));\n-\t\t\treturn ac.getUsersManager().getAssignedRichResources(ac.getSession(), user);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Checks if the login is available in the namespace.\n-\t *\n-\t * @param loginNamespace String Namespace\n-\t * @param login String Login\n-\t * @exampleResponse 1\n-\t * @return int 1: login available, 0: login not available\n-\t */\n-\tisLoginAvailable {\n-\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (ac.getUsersManager().isLoginAvailable(ac.getSession(), parms.readString(\"loginNamespace\"), parms.readString(\"login\"))) {\n-\t\t\t\treturn 1;\n-\t\t\t} else {\n-\t\t\t\treturn 0;\n-\t\t\t}\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all users who are not member of any VO.\n-\t *\n-\t * @return List<User> Found users\n-\t */\n-\tgetUsersWithoutVoAssigned {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUsersWithoutVoAssigned(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds PERUNADMIN role to the user.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t */\n-\tmakeUserPerunAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tUser user = ac.getUserById(parms.readInt(\"user\"));\n-\t\t\tac.getUsersManager().makeUserPerunAdmin(ac.getSession(), user);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\n-\t/*#\n-\t * Changes user password in defined login-namespace.\n-\t *\n-\t * @param login String Users login\n-\t * @param loginNamespace String Namespace\n-\t * @param newPassword String New password\n-\t * @param oldPassword String Old password which will be checked. This parameter is required only if checkOldPassword is set to true.\n-\t * @param checkOldPassword boolean True if the oldPassword have to be checked. When omitted it defaults to false.\n-\t */\n-\t/*#\n-\t * Changes user password in defined login-namespace.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param loginNamespace String Namespace\n-\t * @param newPassword String New password\n-\t * @param oldPassword String Old password which will be checked. This parameter is required only if checkOldPassword is set to true.\n-\t * @param checkOldPassword boolean True if the oldPassword have to be checked. When omitted it defaults to false.\n-\t */\n-\tchangePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"login\")) {\n-\t\t\t\tString login = parms.readString(\"login\");\n-\t\t\t\tif (parms.contains(\"checkOldPassword\") && parms.readBoolean(\"checkOldPassword\")) {\n-\t\t\t\t\tac.getUsersManager().changePassword(ac.getSession(), login, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), true);\n-\t\t\t\t} else {\n-\t\t\t\t\tac.getUsersManager().changePassword(ac.getSession(), login, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), false);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tUser user = ac.getUserById(parms.readInt(\"user\"));\n-\t\t\t\tif (parms.contains(\"checkOldPassword\") && parms.readBoolean(\"checkOldPassword\")) {\n-\t\t\t\t\tac.getUsersManager().changePassword(ac.getSession(), user, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), true);\n-\t\t\t\t} else {\n-\t\t\t\t\tac.getUsersManager().changePassword(ac.getSession(), user, parms.readString(\"loginNamespace\"), parms.readString(\"oldPassword\"), parms.readString(\"newPassword\"), false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\t/*#\n-\t * Changes user's password in namespace based on encrypted parameters\n-\t *\n-\t * @param i String first encrypted parameter\n-\t * @param m String second encrypted parameter\n-\t * @param password String new password\n-\t */\n-\tchangeNonAuthzPassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getUsersManager().changeNonAuthzPassword(ac.getSession(), parms.readString(\"i\"), parms.readString(\"m\"), parms.readString(\"password\"));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\t/*#\n-\t * Creates a password in external authz system.\n-\t *\n-\t * @param login String Login\n-\t * @param namespace String Namespace\n-\t * @param password String password\n-\t */\n-\t@Deprecated\n-\tcreatePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getUsersManager().createPassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"), parms.readString(\"password\"));\n-\t\t\t} else {\n-\t\t\t\tac.getUsersManager().createPassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"), parms.readString(\"password\"));\n-\t\t\t}\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Reserves a random password in external authz system. User shouldn't be able to log-in (account disabled, password unknown to him).\n-\t * This is usefull when manager create account for others and later send them password reset request.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param namespace String Namespace\n-\t */\n-\treserveRandomPassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getUsersManager().reserveRandomPassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"));\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Reserves password for a user in specified login-namespace.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param namespace String Namespace\n-\t * @param password String password\n-\t */\n-\t/*#\n-\t * Reserves password for a user in specified login-namespace.\n-\t *\n-\t * @param login String Login\n-\t * @param namespace String Namespace\n-\t * @param password String password\n-\t */\n-\treservePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getUsersManager().reservePassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"), parms.readString(\"password\"));\n-\t\t\t} else {\n-\t\t\t\tac.getUsersManager().reservePassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"), parms.readString(\"password\"));\n-\t\t\t}\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n-\t * in external authz system using his credentials.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param namespace String Namespace\n-\t */\n-\t/*#\n-\t * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n-\t * in external authz system using his credentials.\n-\t *\n-\t * @param login String Login\n-\t * @param namespace String Namespace\n-\t */\n-\tvalidatePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getUsersManager().validatePassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"));\n-\t\t\t} else {\n-\t\t\t\tac.getUsersManager().validatePassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"));\n-\t\t\t}\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n-\t * in external authz system using his credentials. It also creates UserExtSource and sets some required attributes.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param login String Login\n-\t * @param namespace String Namespace\n-\t */\n-\tvalidatePasswordAndSetExtSources {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getUsersManager().validatePasswordAndSetExtSources(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"login\"), parms.readString(\"namespace\"));\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Set new login in namespace if login is available and user doesn't have login in that namespace.\n-\t * !! Works only for service/guest users => specific users !!\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param login String Login\n-\t * @param namespace String Namespace\n-\t */\n-\tsetLogin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getUsersManager().setLogin(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"), parms.readString(\"login\"));\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Request to change preferred email address of user.\n-\t * Validation mail is sent on new address.\n-\t *\n-\t * Change is not saved until user validate new email address\n-\t * by calling validatePreferredEmailChange() method with\n-\t * proper set of parameters (sent in validation mail).\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @param email String new email address to set\n-\t */\n-\trequestPreferredEmailChange {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tString referer = parms.getServletRequest().getHeader(\"Referer\");\n-\t\t\tif (referer == null || referer.isEmpty()) {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"Missing \\\"Referer\\\" header in HTTP request. Please check your browser settings.\");\n-\t\t\t}\n-\n-\t\t\tac.getUsersManager().requestPreferredEmailChange(ac.getSession(),\n-\t\t\t\t\treferer,\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tparms.readString(\"email\"));\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\t/*#\n-\t * Validate new preferred email address.\n-\t *\n-\t * Request to validate is determined based\n-\t * on encrypted parameters sent in email notice\n-\t * by requestPreferredEmailChange() method.\n-\t *\n-\t * @param i String encrypted request parameter\n-\t * @param m String encrypted request parameter\n-\t * @param u int <code>id</code> of user you want to validate preferred email request\n-\t *\n-\t * @return String new validated email address\n-\t */\n-\tvalidatePreferredEmailChange {\n-\t\t@Override\n-\t\tpublic String call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getUsersManager().validatePreferredEmailChange(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"u\")),\n-\t\t\t\t\tparms.readString(\"i\"),\n-\t\t\t\t\tparms.readString(\"m\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of email addresses of user, which are\n-\t * awaiting validation and are inside time window\n-\t * for validation.\n-\t *\n-\t * If there is no preferred email change request pending\n-\t * or requests are outside time window for validation,\n-\t * returns empty list.\n-\t *\n-\t * @param user int <code>id</code> of user to check\n-\t *\n-\t * @return List<String> user's email addresses pending validation\n-\t */\n-\tgetPendingPreferredEmailChanges {\n-\t\t@Override\n-\t\tpublic List<String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getUsersManager().getPendingPreferredEmailChanges(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets count of all users.\n-\n-\t * @return int Users count\n-\t */\n-\tgetUsersCount {\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getUsersManager().getUsersCount(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates alternative password in external system.\n-\t *\n-\t * @param user int Users <code>id</code>\n-\t * @param description String Description of a password (e.g. 'mobile phone', 'tablet', ...)\n-\t * @param loginNamespace String Login namespace\n-\t * @param password String String representation of password\n-\t */\n-\tcreateAlternativePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tac.getUsersManager().createAlternativePassword(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tparms.readString(\"description\"),\n-\t\t\t\t\tparms.readString(\"loginNamespace\"),\n-\t\t\t\t\tparms.readString(\"password\"));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes alternative password in external system.\n-\t *\n-\t * @param user int Users <code>id</code>\n-\t * @param loginNamespace String Login namespace\n-\t * @param passwordId String Password <code>id</code>\n-\t */\n-\tdeleteAlternativePassword {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tac.getUsersManager().deleteAlternativePassword(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n-\t\t\t\t\tparms.readString(\"loginNamespace\"),\n-\t\t\t\t\tparms.readString(\"passwordId\"));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates user's userExtSource last access time in DB. We can get information which userExtSource has been used as a last one.\n-\t *\n-\t * @param userExtSource int UserExtSource <code>id</code>\n-\t */\n-\tupdateUserExtSourceLastAccess {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tac.getUsersManager().updateUserExtSourceLastAccess(ac.getSession(),\n-\t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Generate user account in a backend system associated with login-namespace in Perun.\n-\t *\n-\t * This method consumes optional parameters map. Requirements are implementation-dependant\n-\t * for each login-namespace.\n-\t *\n-\t * Returns map with\n-\t * 1: key=login-namespace attribute urn, value=generated login\n-\t * 2: rest of opt response attributes...\n-\t *\n-\t * @param namespace String\n-\t * @param parameters Map\n-\t *\n-\t * @return Map<String, String> Map of data from backed response\n-\t * @throws InternalErrorException\n-\t */\n-\tgenerateAccount {\n-\n-\t\t@Override\n-\t\tpublic Map<String, String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\treturn ac.getUsersManager().generateAccount(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"namespace\"),\n-\t\t\t\t\tparms.read(\"parameters\", HashMap.class));\n-\t\t}\n-\n-\t};\n-\n-}\n+ /*#\n+  * Returns user based on one of the userExtSource.\n+  *\n+  * @param userExtSource UserExtSource JSON object UserExtSource\n+  * @return User User object\n+  */\n+\n+\n+ getUserByUserExtSource {\n+  @Override\n+  public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUserByUserExtSource(ac.getSession(), parms.read(\"userExtSource\", UserExtSource.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns user by his login in external source and external source.\n+  *\n+  * @param extSourceName String Ext source name\n+  * @param extLogin String Ext source login\n+  * @return User User object\n+  */\n+\n+\n+ getUserByExtSourceNameAndExtLogin {\n+  @Override\n+  public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUserByExtSourceNameAndExtLogin(ac.getSession(), parms.readString(\"extSourceName\"), parms.readString(\"extLogin\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns user by its <code>id</code>.\n+  *\n+  * @param id int User <code>id</code>\n+  * @return User User object\n+  */\n+\n+\n+ getUserById {\n+  @Override\n+  public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUserById(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all users in Perun.\n+  *\n+  * @return List<User> All Perun users\n+  */\n+\n+\n+ getUsers {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUsers(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Returns all specific users in Perun.\n+  *\n+  * @return List<User> All Perun service users\n+  */\n+\n+\n+ getSpecificUsers {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getSpecificUsers(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Return all specific users who are owned by the user.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<User> Specific users for a user\n+  */\n+\n+\n+ getSpecificUsersByUser {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getSpecificUsersByUser(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+  }\n+ },\n+\n+ /*#\n+  * Return all users who owns the specific user.\n+  *\n+  * @param specificUser int Specific User <code>id</code>\n+  * @return List<User> Users for a service user\n+  */\n+\n+\n+ getUsersBySpecificUser {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUsersBySpecificUser(ac.getSession(), ac.getUserById(parms.readInt(\"specificUser\")));\n+  }\n+ },\n+\n+ /*#\n+  * Add specific user owner (the user).\n+  *\n+  * @param user int User <code>id</code>\n+  * @param specificUser int Specific user <code>id</code>\n+  */\n+\n+\n+ addSpecificUserOwner {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getUsersManager().addSpecificUserOwner(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), ac.getUserById(parms.readInt(\"specificUser\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove specific user owner (the user).\n+  *\n+  * @param user int User <code>id</code>\n+  * @param specificUser int Specific user <code>id</code>\n+  */\n+\n+\n+ removeSpecificUserOwner {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getUsersManager().removeSpecificUserOwner(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), ac.getUserById(parms.readInt(\"specificUser\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get User to RichUser without attributes.\n+  *\n+  * @param user int user <code>id</code>\n+  * @return RichUser found rich user\n+  */\n+\n+\n+ getRichUser {\n+  @Override\n+  public RichUser call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getRichUser(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+  }\n+ },\n+\n+ /*#\n+  * Get User to RichUser with attributes.\n+  *\n+  * @param user int user <code>id</code>\n+  * @return RichUser found rich user with attributes\n+  */\n+\n+\n+ getRichUserWithAttributes {\n+  @Override\n+  public RichUser call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getRichUserWithAttributes(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+  }\n+ },\n+\n+ /*#\n+  * Get All richUsers with or without specificUsers.\n+  *\n+  * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n+  * @return List<RichUser> all rich users without attributes\n+  */\n+\n+\n+ getAllRichUsers {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getAllRichUsers(ac.getSession(), parms.readBoolean(\"includedSpecificUsers\"));\n+  }\n+ },\n+\n+ /*#\n+  * Get All richUsers with or without specificUsers.\n+  *\n+  * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n+  * @return List<RichUser> all rich users with attributes\n+  */\n+\n+\n+ getAllRichUsersWithAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(), parms.readBoolean(\"includedSpecificUsers\"));\n+  }\n+ },\n+\n+ /*#\n+  * From Users makes RichUsers without attributes.\n+  *\n+  * @param users List<RichUser> users to convert\n+  * @return List<RichUser> list of rich users\n+  */\n+\n+\n+ getRichUsersFromListOfUsers {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getUsersManager().getRichUsersFromListOfUsers(ac.getSession(), parms.readList(\"users\", User.class));\n+  }\n+ },\n+\n+ /*#\n+  * From Users makes RichUsers with attributes.\n+  *\n+  * @param users List<RichUser> users to convert\n+  * @return List<RichUser> list of richUsers\n+  */\n+\n+\n+ getRichUsersFromListOfUsersWithAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getUsersManager().getRichUsersWithAttributesFromListOfUsers(ac.getSession(), parms.readList(\"users\", User.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all RichUsers with attributes who are not member of any VO.\n+  *\n+  * @return List<RichUser> list of richUsers who are not member of any VO\n+  */\n+\n+\n+ getRichUsersWithoutVoAssigned {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getRichUsersWithoutVoAssigned(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Get All richUsers with or without specificUsers with selected attributes.\n+  *\n+  * @param attrsNames List<String> list of attributes name\n+  * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n+  * @return List<RichUser> list of RichUsers\n+  */\n+ /*#\n+  * Get All richUsers with or without specificUsers with all included attributes.\n+  *\n+  * @param includedSpecificUsers boolean if you want to or don't want to get specificUsers too\n+  * @return List<RichUser> list of RichUsers\n+  */\n+\n+\n+ getRichUsersWithAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"attrsNames\")) {\n+    return ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(), parms.readBoolean(\"includedSpecificUsers\"), parms.readList(\"attrsNames\", String.class));\n+   } else {\n+    return ac.getUsersManager().getAllRichUsersWithAttributes(ac.getSession(), parms.readBoolean(\"includedSpecificUsers\"), null);\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of RichUsers with attributes who matches the searchString\n+  *\n+  * @param searchString String searched string\n+  * @param attrsNames List<String> list of attributes name\n+  * @return List<RichUser> list of RichUsers\n+  */\n+\n+\n+ findRichUsersWithAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"attrsNames\")) {\n+    return ac.getUsersManager().findRichUsersWithAttributes(ac.getSession(), parms.readString(\"searchString\"), parms.readList(\"attrsNames\", String.class));\n+   } else {\n+    return ac.getUsersManager().findRichUsersWithAttributes(ac.getSession(), parms.readString(\"searchString\"), null);\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of RichUsers which are not members of any VO and with selected attributes\n+  *\n+  * @param attrsNames List<String> list of attributes name\n+  * @return List<RichUser> list of RichUsers\n+  */\n+\n+\n+ getRichUsersWithoutVoWithAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"attrsNames\")) {\n+    return ac.getUsersManager().getRichUsersWithoutVoWithAttributes(ac.getSession(), parms.readList(\"attrsNames\", String.class));\n+   } else {\n+    return ac.getUsersManager().getRichUsersWithoutVoWithAttributes(ac.getSession(), null);\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Return list of RichUsers who matches the searchString and are not member in specific VO and with selected attributes.\n+  *\n+  * @param vo VO virtual organization\n+  * @param searchString String searched string\n+  * @param attrsName List<String> list of attributes name\n+  * @return List<RichUser> list of RichUsers\n+  */\n+\n+\n+ findRichUsersWithoutSpecificVoWithAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"attrsNames\")) {\n+    return ac.getUsersManager().findRichUsersWithoutSpecificVoWithAttributes(ac.getSession(),\n+ac.getVoById(parms.readInt(\"vo\")),\n+parms.readString(\"searchString\"),\n+parms.readList(\"attrsNames\", String.class));\n+   } else {\n+    return ac.getUsersManager().findRichUsersWithoutSpecificVoWithAttributes(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")), parms.readString(\"searchString\"), null);\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Deletes a user. User is not deleted, if is member of any VO or is associated with any service identity.\n+  *\n+  * @param user int User <code>id</code>\n+  */\n+ /*#\n+  * Deletes a user (force).\n+  * Also removes associated members.\n+  *\n+  * @param user int User <code>id</code>\n+  * @param force boolean If true, use force deletion.\n+  */\n+\n+\n+ deleteUser {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n+    ac.getUsersManager().deleteUser(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), true);\n+   } else {\n+    ac.getUsersManager().deleteUser(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Updates users data in DB.\n+  *\n+  * @param user User JSON object\n+  * @return User Updated user\n+  */\n+\n+\n+ updateUser {\n+  @Override\n+  public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getUsersManager().updateUser(ac.getSession(), parms.read(\"user\", User.class));\n+  }\n+ },\n+\n+ /*#\n+  * Updates titles before/after users name\n+  *\n+  * Titles must be set in User object.\n+  * Setting any title to null will remove title from name.\n+  * Other user's properties are ignored.\n+  *\n+  * @param user User JSON object with titles to set\n+  * @return User Updated user\n+  */\n+\n+\n+ updateNameTitles {\n+  @Override\n+  public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getUsersManager().updateNameTitles(ac.getSession(), parms.read(\"user\", User.class));\n+  }\n+ },\n+\n+ /*#\n+  * Updates user's userExtSource in DB.\n+  *\n+  * @param userExtSource UserExtSource JSON object\n+  * @return UserExtSource Updated userExtSource\n+  */\n+\n+\n+ updateUserExtSource {\n+  @Override\n+  public UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getUsersManager().updateUserExtSource(ac.getSession(), parms.read(\"userExtSource\", UserExtSource.class));\n+  }\n+ },\n+\n+ /*#\n+  * Gets list of all user's external sources of the user.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<UserExtSource> list of user's external sources\n+  */\n+\n+\n+ getUserExtSources {\n+  @Override\n+  public List<UserExtSource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUserExtSources(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+  }\n+ },\n+\n+ /*#\n+  * Adds user's external sources.\n+  * @param user int User <code>id</code>\n+  * @param userExtSource UserExtSource JSON object\n+  * @return UserExtSource Newly added UserExtSource\n+  */\n+\n+\n+ addUserExtSource {\n+  @Override\n+  public UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getUsersManager().addUserExtSource(ac.getSession(),\n+ac.getUserById(parms.readInt(\"user\")),\n+parms.read(\"userExtSource\", UserExtSource.class));\n+  }\n+ },\n+\n+ /*#\n+  * Remove user's external source.\n+  * Persistent UserExtSources are not removed unless <code>force</code> param is present and set to <code>true</code>.\n+  * @param user int User <code>id</code>\n+  * @param userExtSource int UserExtSource <code>id</code>\n+  * @param force boolean If true, use force deletion.\n+  */\n+\n+\n+ removeUserExtSource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"force\") && parms.readBoolean(\"force\")) {\n+    ac.getUsersManager().removeUserExtSource(ac.getSession(),\n+ac.getUserById(parms.readInt(\"user\")),\n+ac.getUserExtSourceById(parms.readInt(\"userExtSource\")), true);\n+   } else {\n+    ac.getUsersManager().removeUserExtSource(ac.getSession(),\n+ac.getUserById(parms.readInt(\"user\")),\n+ac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Move user's external source from sourceUser to targetUser.\n+  * @param sourceUser int User <code>id</code>\n+  * @param targetUser int User <code>id</code>\n+  * @param userExtSource int UserExtSource <code>id</code>\n+  */\n+\n+\n+ moveUserExtSource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getUsersManager().moveUserExtSource(ac.getSession(), ac.getUserById(parms.readInt(\"sourceUser\")), ac.getUserById(parms.readInt(\"targetUser\")), ac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get the user ext source by its id.\n+  *\n+  * @param userExtSource int UserExtSource <code>id</code>\n+  * @return UserExtSource User external source for the id\n+  */\n+\n+\n+ getUserExtSourceById {\n+  @Override\n+  public UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUserExtSourceById(ac.getSession(), parms.readInt(\"userExtSource\"));\n+  }\n+ },\n+\n+ /*#\n+  * Gets user's external source by the user's external login and external source.\n+  *\n+  * @param extSource ExtSource JSON object\n+  * @param extSourceLogin String Login\n+  * @return UserExtSource UserExtSource found user's external source\n+  */\n+\n+\n+ getUserExtSourceByExtLogin {\n+  @Override\n+  public UserExtSource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUserExtSourceByExtLogin(ac.getSession(), parms.read(\"extSource\", ExtSource.class), parms.readString(\"extSourceLogin\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns user by VO member.\n+  *\n+  * @param member int Member <code>id</code>\n+  * @return User User object\n+  */\n+\n+\n+ getUserByMember {\n+  @Override\n+  public User call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUserByMember(ac.getSession(), ac.getMemberById(parms.readInt(\"member\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of users who matches the searchString, searching name, email, logins.\n+  *\n+  * @param searchString String String to search by\n+  * @return List<User> Found users\n+  */\n+\n+\n+ findUsers {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().findUsers(ac.getSession(), parms.readString(\"searchString\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of RichUsers with attributes who matches the searchString, searching name, email, logins.\n+  *\n+  * @param searchString String searched string\n+  * @return List<RichUser> list of RichUsers\n+  */\n+\n+\n+ findRichUsers {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().findRichUsers(ac.getSession(), parms.readString(\"searchString\"));\n+  }\n+ },\n+\n+ /*#\n+  * Return list of users who matches the searchString, searching name, email and logins\n+  * and are not member of specific VO.\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @param searchString String String to search by\n+  * @return List<User> Found users\n+  */\n+\n+\n+ getUsersWithoutSpecificVo {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUsersWithoutSpecificVo(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")), parms.readString(\"searchString\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of users who matches the searchString.\n+  *\n+  * @param searchString String String to search by\n+  * @return List<User> Found users\n+  */\n+ /*#\n+  * Returns list of users who matches the parameters.\n+  * All parameters must be present, even if empty.\n+  *\n+  * @param titleBefore String Title before name\n+  * @param firstName String First name\n+  * @param middleName String Middle name\n+  * @param lastName String Last name\n+  * @param titleAfter String Title after\n+  * @return List<User> Found users\n+  */\n+\n+\n+ findUsersByName {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"searchString\")) {\n+    return ac.getUsersManager().findUsersByName(ac.getSession(), parms.readString(\"searchString\"));\n+   } else if (parms.contains(\"titleBefore\") && parms.contains(\"firstName\") && parms.contains(\"middleName\") && parms.contains(\"lastName\") && parms.contains(\"titleAfter\")) {\n+    return ac.getUsersManager().findUsersByName(ac.getSession(), parms.readString(\"titleBefore\"), parms.readString(\"firstName\"), parms.readString(\"middleName\"), parms.readString(\"lastName\"), parms.readString(\"titleAfter\"));\n+   } else {\n+    throw new RpcException(RpcException.Type.MISSING_VALUE,\n+\"searchString or (titleBefore and firstName and middleName and lastName and titleAfter)\");\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n+  *\n+  * @param attribute Attribute JSON object\n+  * @return List<User> Found users\n+  */\n+ /*#\n+  * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n+  *\n+  * @param attributeName String URN of attribute to search by\n+  * @param attributeValue Object Value to search by (type of value must match attribute value type)\n+  * @return List<User> Found users\n+  */\n+\n+\n+ getUsersByAttribute {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"attributeName\")) {\n+    if (parms.contains(\"attributeValue\")) {\n+     String attributeName = parms.readString(\"attributeName\");\n+     Attribute attr = new Attribute(ac.getAttributesManager().getAttributeDefinition(ac.getSession(), attributeName));\n+     if (attr.getType().equals(Integer.class.getName())) {\n+      attr.setValue(parms.readInt(\"attributeValue\"));\n+     } else if (attr.getType().equals(String.class.getName()) || attr.getType().equals(BeansUtils.largeStringClassName)) {\n+      attr.setValue(parms.readString(\"attributeValue\"));\n+     } else if (attr.getType().equals(Boolean.class.getName())) {\n+             attr.setValue(parms.readBoolean(\"attributeValue\"));\n+            } else if (attr.getType().equals(ArrayList.class.getName()) || attr.getType().equals(BeansUtils.largeArrayListClassName)) {\n+             attr.setValue(parms.readList(\"attributeValue\", String.class));\n+            } else if (attr.getType().equals(LinkedHashMap.class.getName())) {\n+                    attr.setValue(parms.read(\"attributeValue\", LinkedHashMap.class));\n+                   } else {\n+                    throw new RpcException(RpcException.Type.CANNOT_DESERIALIZE_VALUE, \"attributeValue is not the same type like value of attribute with the attributeName.\");\n+                   }\n+\n+     return ac.getUsersManager().getUsersByAttribute(ac.getSession(), attr);\n+    } else {\n+     throw new RpcException(RpcException.Type.MISSING_VALUE, \"attributeValue\");\n+    }\n+   } else if (parms.contains(\"attribute\")) {\n+    return ac.getUsersManager().getUsersByAttribute(ac.getSession(), parms.read(\"attribute\", Attribute.class));\n+   } else {\n+    throw new RpcException(RpcException.Type.MISSING_VALUE, \"attribute or (attributeName and attributeValue)\");\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Returns all users who have attribute which have value which contains searchString.\n+  *\n+  * @param attributeName String URN of attribute to search by\n+  * @param attributeValue String Value to search by\n+  * @return List<User> Found users\n+  */\n+\n+\n+ getUsersByAttributeValue {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"attributeName\")) {\n+    if (parms.contains(\"attributeValue\")) {\n+     return ac.getUsersManager().getUsersByAttributeValue(ac.getSession(), parms.readString(\"attributeName\"), parms.readString(\"attributeValue\"));\n+    } else {\n+     throw new RpcException(RpcException.Type.MISSING_VALUE, \"attributeValue\");\n+    }\n+   } else {\n+    throw new RpcException(RpcException.Type.MISSING_VALUE, \"attributeName\");\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of VOs, where the user is an Administrator.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<Vo> Found VOs\n+  */\n+\n+\n+ getVosWhereUserIsAdmin {\n+  @Override\n+  public List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getVosWhereUserIsAdmin(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of VOs, where the user is a Member.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<Vo> Found VOs\n+  */\n+\n+\n+ getVosWhereUserIsMember {\n+  @Override\n+  public List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getVosWhereUserIsMember(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of Groups in Perun, where the User is a direct Administrator\n+  * or he is a member of any group which is Administrator of some of these Groups.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<Group> Found Groups\n+  */\n+ /*#\n+  * Returns list of Groups in selected Vo, where the User is a direct Administrator\n+  * or he is a member of any group which is Administrator of some of these Groups.\n+  *\n+  * @param user int User <code>id</code>\n+  * @param vo int Vo <code>id</code>\n+  * @return List<Group> Found Groups\n+  */\n+\n+\n+ getGroupsWhereUserIsAdmin {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"vo\")) {\n+    return ac.getUsersManager().getGroupsWhereUserIsAdmin(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")), ac.getUserById(parms.readInt(\"user\")));\n+   } else {\n+    return ac.getUsersManager().getGroupsWhereUserIsAdmin(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Get all resources from the facility which have the user access on.\n+  *\n+  * @param user int User <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @return List<Resource> Allowed resources\n+  */\n+ /*#\n+  * Get all resources which have the user access on.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<Resource> Allowed resources\n+  */\n+\n+\n+ getAllowedResources {\n+  @Override\n+  public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   User user = ac.getUserById(parms.readInt(\"user\"));\n+   if (parms.contains(\"facility\")) {\n+    Facility facility = ac.getFacilityById(parms.readInt(\"facility\"));\n+    return ac.getUsersManager().getAllowedResources(ac.getSession(), facility, user);\n+   } else {\n+    return ac.getUsersManager().getAllowedResources(ac.getSession(), user);\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Get all rich resources which have the user assigned.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<RichResource> Assigned rich resources\n+  */\n+\n+\n+ getAssignedRichResources {\n+  @Override\n+  public List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   User user = ac.getUserById(parms.readInt(\"user\"));\n+   return ac.getUsersManager().getAssignedRichResources(ac.getSession(), user);\n+  }\n+ },\n+\n+ /*#\n+  * Checks if the login is available in the namespace.\n+  *\n+  * @param loginNamespace String Namespace\n+  * @param login String Login\n+  * @exampleResponse 1\n+  * @return int 1: login available, 0: login not available\n+  */\n+\n+\n+ isLoginAvailable {\n+  @Override\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (ac.getUsersManager().isLoginAvailable(ac.getSession(), parms.readString(\"loginNamespace\"), parms.readString(\"login\"))) {\n+    return 1;\n+   } else {\n+    return 0;\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Returns all users who are not member of any VO.\n+  *\n+  * @return List<User> Found users\n+  */\n+\n+\n+ getUsersWithoutVoAssigned {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUsersWithoutVoAssigned(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Adds PERUNADMIN role to the user.\n+  *\n+  * @param user int User <code>id</code>\n+  */\n+\n+\n+ makeUserPerunAdmin {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   User user = ac.getUserById(parms.readInt(\"user\"));\n+   ac.getUsersManager().makeUserPerunAdmin(ac.getSession(), user);\n+   return null;\n+  }\n+ },\n+\n+\n+ /*#\n+  * Changes user password in defined login-namespace.\n+  *\n+  * @param login String Users login\n+  * @param loginNamespace String Namespace\n+  * @param newPassword String New password\n+  * @param oldPassword String Old password which will be checked. This parameter is required only if checkOldPassword is set to true.\n+  * @param checkOldPassword boolean True if the oldPassword have to be checked. When omitted it defaults to false.\n+  */\n+ /*#\n+  * Changes user password in defined login-namespace.\n+  *\n+  * @param user int User <code>id</code>\n+  * @param loginNamespace String Namespace\n+  * @param newPassword String New password\n+  * @param oldPassword String Old password which will be checked. This parameter is required only if checkOldPassword is set to true.\n+  * @param checkOldPassword boolean True if the oldPassword have to be checked. When omitted it defaults to false.\n+  */\n+\n+\n+ changePassword {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"login\")) {\n+    String login = parms.readString(\"login\");\n+    if (parms.contains(\"checkOldPassword\") && parms.readBoolean(\"checkOldPassword\")) {\n+     ac.getUsersManager().changePassword(ac.getSession(),\n+login,\n+parms.readString(\"loginNamespace\"),\n+parms.readString(\"oldPassword\"),\n+parms.readString(\"newPassword\"), true);\n+    } else {\n+     ac.getUsersManager().changePassword(ac.getSession(),\n+login,\n+parms.readString(\"loginNamespace\"),\n+parms.readString(\"oldPassword\"),\n+parms.readString(\"newPassword\"), false);\n+    }\n+   } else {\n+    User user = ac.getUserById(parms.readInt(\"user\"));\n+    if (parms.contains(\"checkOldPassword\") && parms.readBoolean(\"checkOldPassword\")) {\n+     ac.getUsersManager().changePassword(ac.getSession(),\n+user,\n+parms.readString(\"loginNamespace\"),\n+parms.readString(\"oldPassword\"),\n+parms.readString(\"newPassword\"), true);\n+    } else {\n+     ac.getUsersManager().changePassword(ac.getSession(),\n+user,\n+parms.readString(\"loginNamespace\"),\n+parms.readString(\"oldPassword\"),\n+parms.readString(\"newPassword\"), false);\n+    }\n+   }\n+\n+   return null;\n+  }\n+ },\n+ /*#\n+  * Changes user's password in namespace based on encrypted parameters\n+  *\n+  * @param i String first encrypted parameter\n+  * @param m String second encrypted parameter\n+  * @param password String new password\n+  */\n+\n+\n+ changeNonAuthzPassword {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getUsersManager().changeNonAuthzPassword(ac.getSession(), parms.readString(\"i\"), parms.readString(\"m\"), parms.readString(\"password\"));\n+   return null;\n+  }\n+ },\n+ /*#\n+  * Creates a password in external authz system.\n+  *\n+  * @param login String Login\n+  * @param namespace String Namespace\n+  * @param password String password\n+  */\n+\n+\n+ @Deprecated\n+ createPassword {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"user\")) {\n+    ac.getUsersManager().createPassword(ac.getSession(),\n+ac.getUserById(parms.readInt(\"user\")),\n+parms.readString(\"namespace\"),\n+parms.readString(\"password\"));\n+   } else {\n+    ac.getUsersManager().createPassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"), parms.readString(\"password\"));\n+   }\n+\n+   return null;\n+  }\n+ },\n+ /*#\n+  * Reserves a random password in external authz system. User shouldn't be able to log-in (account disabled, password unknown to him).\n+  * This is usefull when manager create account for others and later send them password reset request.\n+  *\n+  * @param user int User <code>id</code>\n+  * @param namespace String Namespace\n+  */\n+\n+\n+ reserveRandomPassword {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getUsersManager().reserveRandomPassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"));\n+   return null;\n+  }\n+ },\n+ /*#\n+  * Reserves password for a user in specified login-namespace.\n+  *\n+  * @param user int User <code>id</code>\n+  * @param namespace String Namespace\n+  * @param password String password\n+  */\n+ /*#\n+  * Reserves password for a user in specified login-namespace.\n+  *\n+  * @param login String Login\n+  * @param namespace String Namespace\n+  * @param password String password\n+  */\n+\n+\n+ reservePassword {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"user\")) {\n+    ac.getUsersManager().reservePassword(ac.getSession(),\n+ac.getUserById(parms.readInt(\"user\")),\n+parms.readString(\"namespace\"),\n+parms.readString(\"password\"));\n+   } else {\n+    ac.getUsersManager().reservePassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"), parms.readString(\"password\"));\n+   }\n+\n+   return null;\n+  }\n+ },\n+ /*#\n+  * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n+  * in external authz system using his credentials.\n+  *\n+  * @param user int User <code>id</code>\n+  * @param namespace String Namespace\n+  */\n+ /*#\n+  * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n+  * in external authz system using his credentials.\n+  *\n+  * @param login String Login\n+  * @param namespace String Namespace\n+  */\n+\n+\n+ validatePassword {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"user\")) {\n+    ac.getUsersManager().validatePassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"namespace\"));\n+   } else {\n+    ac.getUsersManager().validatePassword(ac.getSession(), parms.readString(\"login\"), parms.readString(\"namespace\"));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Validates password for a user in specified login-namespace. After that, user should be able to log-in\n+  * in external authz system using his credentials. It also creates UserExtSource and sets some required attributes.\n+  *\n+  * @param user int User <code>id</code>\n+  * @param login String Login\n+  * @param namespace String Namespace\n+  */\n+\n+\n+ validatePasswordAndSetExtSources {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getUsersManager().validatePasswordAndSetExtSources(ac.getSession(),\n+ac.getUserById(parms.readInt(\"user\")),\n+parms.readString(\"login\"),\n+parms.readString(\"namespace\"));\n+   return null;\n+  }\n+ },\n+ /*#\n+  * Set new login in namespace if login is available and user doesn't have login in that namespace.\n+  * !! Works only for service/guest users => specific users !!\n+  *\n+  * @param user int User <code>id</code>\n+  * @param login String Login\n+  * @param namespace String Namespace\n+  */\n+\n+\n+ setLogin {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getUsersManager().setLogin(ac.getSession(),\n+ac.getUserById(parms.readInt(\"user\")),\n+parms.readString(\"namespace\"),\n+parms.readString(\"login\"));\n+   return null;\n+  }\n+ },\n+ /*#\n+  * Request to change preferred email address of user.\n+  * Validation mail is sent on new address.\n+  *\n+  * Change is not saved until user validate new email address\n+  * by calling validatePreferredEmailChange() method with\n+  * proper set of parameters (sent in validation mail).\n+  *\n+  * @param user int User <code>id</code>\n+  * @param email String new email address to set\n+  */\n+\n+\n+ requestPreferredEmailChange {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   String referer = parms.getServletRequest().getHeader(\"Referer\");\n+   if (referer == null || referer.isEmpty()) {\n+    throw new RpcException(RpcException.Type.MISSING_VALUE,\n+\"Missing \\\"Referer\\\" header in HTTP request. Please check your browser settings.\");\n+   }\n+   ac.getUsersManager().requestPreferredEmailChange(ac.getSession(), referer, ac.getUserById(parms.readInt(\"user\")), parms.readString(\"email\"));\n+   return null;\n+  }\n+ },\n+ /*#\n+  * Validate new preferred email address.\n+  *\n+  * Request to validate is determined based\n+  * on encrypted parameters sent in email notice\n+  * by requestPreferredEmailChange() method.\n+  *\n+  * @param i String encrypted request parameter\n+  * @param m String encrypted request parameter\n+  * @param u int <code>id</code> of user you want to validate preferred email request\n+  *\n+  * @return String new validated email address\n+  */\n+\n+\n+ validatePreferredEmailChange {\n+  @Override\n+  public String call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().validatePreferredEmailChange(ac.getSession(), ac.getUserById(parms.readInt(\"u\")), parms.readString(\"i\"), parms.readString(\"m\"));\n+  }\n+ },\n+\n+ /*#\n+  * Return list of email addresses of user, which are\n+  * awaiting validation and are inside time window\n+  * for validation.\n+  *\n+  * If there is no preferred email change request pending\n+  * or requests are outside time window for validation,\n+  * returns empty list.\n+  *\n+  * @param user int <code>id</code> of user to check\n+  *\n+  * @return List<String> user's email addresses pending validation\n+  */\n+\n+\n+ getPendingPreferredEmailChanges {\n+  @Override\n+  public List<String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getPendingPreferredEmailChanges(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+  }\n+ },\n+\n+ /*#\n+  * Gets count of all users.\n+\n+  * @return int Users count\n+  */\n+\n+\n+ getUsersCount {\n+  @Override\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getUsersManager().getUsersCount(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Creates alternative password in external system.\n+  *\n+  * @param user int Users <code>id</code>\n+  * @param description String Description of a password (e.g. 'mobile phone', 'tablet', ...)\n+  * @param loginNamespace String Login namespace\n+  * @param password String String representation of password\n+  */\n+\n+\n+ createAlternativePassword {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getUsersManager().createAlternativePassword(ac.getSession(), ac.getUserById(parms.readInt(\"user\")), parms.readString(\"description\"), parms.readString(\"loginNamespace\"), parms.readString(\"password\"));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Deletes alternative password in external system.\n+  *\n+  * @param user int Users <code>id</code>\n+  * @param loginNamespace String Login namespace\n+  * @param passwordId String Password <code>id</code>\n+  */\n+\n+\n+ deleteAlternativePassword {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getUsersManager().deleteAlternativePassword(ac.getSession(),\n+ac.getUserById(parms.readInt(\"user\")),\n+parms.readString(\"loginNamespace\"),\n+parms.readString(\"passwordId\"));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Updates user's userExtSource last access time in DB. We can get information which userExtSource has been used as a last one.\n+  *\n+  * @param userExtSource int UserExtSource <code>id</code>\n+  */\n+\n+\n+ updateUserExtSourceLastAccess {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getUsersManager().updateUserExtSourceLastAccess(ac.getSession(), ac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Generate user account in a backend system associated with login-namespace in Perun.\n+  *\n+  * This method consumes optional parameters map. Requirements are implementation-dependant\n+  * for each login-namespace.\n+  *\n+  * Returns map with\n+  * 1: key=login-namespace attribute urn, value=generated login\n+  * 2: rest of opt response attributes...\n+  *\n+  * @param namespace String\n+  * @param parameters Map\n+  *\n+  * @return Map<String, String> Map of data from backed response\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ generateAccount {\n+  @Override\n+  public Map<String, String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getUsersManager().generateAccount(ac.getSession(), parms.readString(\"namespace\"), parms.read(\"parameters\", HashMap.class));\n+  }\n+ };\n+}\n\\ No newline at end of file\n",
            "diff_size": 1234
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/34/UsersManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/34/UsersManagerMethod.java\nindex 804fbf5345e..9f46b62a31d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/34/UsersManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/34/UsersManagerMethod.java\n@@ -496,7 +496,7 @@ public enum UsersManagerMethod implements ManagerMethod {\n \t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n \t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n \t\t\t}\n-\t\t\t\t\n+\n \t\t\treturn null;\n \t\t}\n \t},\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/34/UsersManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/34/UsersManagerMethod.java\nindex 804fbf5345e..468af0e7dd5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/34/UsersManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/34/UsersManagerMethod.java\n@@ -495,9 +495,8 @@ public enum UsersManagerMethod implements ManagerMethod {\n \t\t\t\tac.getUsersManager().removeUserExtSource(ac.getSession(),\n \t\t\t\t\tac.getUserById(parms.readInt(\"user\")),\n \t\t\t\t\tac.getUserExtSourceById(parms.readInt(\"userExtSource\")));\n-\t\t\t}\n-\t\t\t\t\n-\t\t\treturn null;\n+\n+\t\t\t\t\t} return null;\n \t\t}\n \t},\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}