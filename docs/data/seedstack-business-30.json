{
    "project_name": "seedstack-business",
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "8",
                "column": "1",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.spi;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/30/BaseDtoInfoResolver.java\nindex 9750072f787..9e8d8e144e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/30/BaseDtoInfoResolver.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.spi;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/30/BaseDtoInfoResolver.java\nindex 9750072f787..9e8d8e144e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/30/BaseDtoInfoResolver.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.spi;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "54",
                    "column": "5",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "column": "5",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "column": "1",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 8, indentation should be the same level as line 81.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "92",
                    "column": "5",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "column": "5",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/30/BaseDtoInfoResolver.java\nindex 9750072f787..7b03f7d8b80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/30/BaseDtoInfoResolver.java\n@@ -50,17 +50,16 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n             } else {\n                 throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_INVALID)\n                         .put(\"dtoIdClass\", id.getClass()\n-                                .getName())\n-                        .put(\"aggregateIdClass\", aggregateIdClass.getName());\n-            }\n+                                .getName()).put(\"aggregateIdClass\", aggregateIdClass.getName());\n+    }\n         } else {\n             if (!Producible.class.isAssignableFrom(aggregateIdClass)) {\n                 throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_NOT_PRODUCIBLE)\n                         .put(\"aggregateIdClass\", aggregateIdClass.getName());\n-            } else {\n+    } else {\n                 return (I) domainRegistry.getFactory(aggregateIdClass.asSubclass(Producible.class))\n                         .create(parameters);\n-            }\n+    }\n         }\n     }\n \n@@ -77,8 +76,7 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n         checkNotNull(parameters);\n \n         Factory<A> factory = domainRegistry.getFactory(aggregateClass);\n-\n-        // Find the method in the factory which match the signature determined with the previously\n+// Find the method in the factory which match the signature determined with the previously\n         // extracted parameters\n         Method factoryMethod;\n         boolean useDefaultFactory = false;\n@@ -91,7 +89,7 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n             throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_FIND_FACTORY_METHOD)\n                     .put(\"aggregateClass\", aggregateClass.getName())\n                     .put(\"parameters\", Arrays.toString(parameters));\n-        }\n+    }\n \n         // Invoke the factory to create the aggregate root\n         try {\n@@ -108,11 +106,9 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n             throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_INVOKE_FACTORY_METHOD)\n                     .put(\"aggregateClass\", aggregateClass.getName())\n                     .put(\"factoryClass\", factory.getClass()\n-                            .getName())\n-                    .put(\"factoryMethod\", Optional.ofNullable(factoryMethod)\n+                            .getName()).put(\"factoryMethod\", Optional.ofNullable(factoryMethod)\n                             .map(Method::getName)\n-                            .orElse(\"create\"))\n-                    .put(\"parameters\", Arrays.toString(parameters));\n-        }\n+                            .orElse(\"create\")).put(\"parameters\", Arrays.toString(parameters));\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "61",
                    "column": "17",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "97",
                    "column": "1",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "column": "1",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "98",
                    "column": "5",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "column": "1",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "column": "1",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "column": "1",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "5",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "column": "1",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/30/BaseDtoInfoResolver.java\nindex 9750072f787..7ac9d1d5987 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/30/BaseDtoInfoResolver.java\n@@ -8,7 +8,6 @@\n package org.seedstack.business.spi;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n-\n import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.Optional;\n@@ -25,7 +24,10 @@ import org.seedstack.shed.reflect.ReflectUtils;\n  * An helper base class that can be extended to create an implementation of {@link\n  * DtoInfoResolver}.\n  */\n+\n+\n public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n+\n     private final DomainRegistry domainRegistry;\n \n     protected BaseDtoInfoResolver(DomainRegistry domainRegistry) {\n@@ -42,6 +44,7 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n      * @param <I>              the type of the aggregate root identifier.\n      * @return the identifier.\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n     protected <I> I createIdentifier(Class<I> aggregateIdClass, I id, Object... parameters) {\n         if (id != null) {\n@@ -49,17 +52,18 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n                 return id;\n             } else {\n                 throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_INVALID)\n-                        .put(\"dtoIdClass\", id.getClass()\n-                                .getName())\n-                        .put(\"aggregateIdClass\", aggregateIdClass.getName());\n+                    .put(\"dtoIdClass\", id.getClass()\n+                        .getName())\n+                    .put(\"aggregateIdClass\", aggregateIdClass.getName());\n             }\n         } else {\n-            if (!Producible.class.isAssignableFrom(aggregateIdClass)) {\n+            if (! Producible.class\n+                .isAssignableFrom(aggregateIdClass)) {\n                 throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_NOT_PRODUCIBLE)\n-                        .put(\"aggregateIdClass\", aggregateIdClass.getName());\n+                    .put(\"aggregateIdClass\", aggregateIdClass.getName());\n             } else {\n                 return (I) domainRegistry.getFactory(aggregateIdClass.asSubclass(Producible.class))\n-                        .create(parameters);\n+                    .create(parameters);\n             }\n         }\n     }\n@@ -72,27 +76,30 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n      * @param <A>            the type of the aggregate root.\n      * @return the aggregate root.\n      */\n+\n     protected <A extends AggregateRoot<?>> A createFromFactory(Class<A> aggregateClass, Object... parameters) {\n         checkNotNull(aggregateClass);\n         checkNotNull(parameters);\n-\n         Factory<A> factory = domainRegistry.getFactory(aggregateClass);\n \n         // Find the method in the factory which match the signature determined with the previously\n         // extracted parameters\n+\n         Method factoryMethod;\n         boolean useDefaultFactory = false;\n         try {\n             factoryMethod = MethodMatcher.findMatchingMethod(factory.getClass(), aggregateClass, parameters);\n-            if (factoryMethod == null) {\n+            if(factoryMethod == null) {\n                 useDefaultFactory = true;\n             }\n-        } catch (Exception e) {\n-            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_FIND_FACTORY_METHOD)\n-                    .put(\"aggregateClass\", aggregateClass.getName())\n-                    .put(\"parameters\", Arrays.toString(parameters));\n         }\n \n+catch(Exception e) {\n+    throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_FIND_FACTORY_METHOD)\n+        .put(\"aggregateClass\", aggregateClass.getName())\n+        .put(\"parameters\", Arrays.toString(parameters));\n+}\n+\n         // Invoke the factory to create the aggregate root\n         try {\n             if (useDefaultFactory) {\n@@ -104,15 +111,18 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n                     return ReflectUtils.invoke(factoryMethod, factory, parameters);\n                 }\n             }\n-        } catch (Exception e) {\n-            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_INVOKE_FACTORY_METHOD)\n-                    .put(\"aggregateClass\", aggregateClass.getName())\n-                    .put(\"factoryClass\", factory.getClass()\n-                            .getName())\n-                    .put(\"factoryMethod\", Optional.ofNullable(factoryMethod)\n-                            .map(Method::getName)\n-                            .orElse(\"create\"))\n-                    .put(\"parameters\", Arrays.toString(parameters));\n         }\n-    }\n+\n+catch(Exception e) {\n+    throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_INVOKE_FACTORY_METHOD)\n+        .put(\"aggregateClass\", aggregateClass.getName())\n+        .put(\"factoryClass\", factory.getClass()\n+            .getName())\n+        .put(\"factoryMethod\",\n+Optional.ofNullable(factoryMethod)\n+    .map(Method::getName)\n+    .orElse(\"create\"))\n+        .put(\"parameters\", Arrays.toString(parameters));\n }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/30/BaseDtoInfoResolver.java\nindex 9750072f787..9e8d8e144e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/30/BaseDtoInfoResolver.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.spi;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/30/BaseDtoInfoResolver.java\nindex 9750072f787..9e8d8e144e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/30/BaseDtoInfoResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/30/BaseDtoInfoResolver.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.spi;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}