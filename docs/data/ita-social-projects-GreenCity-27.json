{
    "project_name": "ita-social-projects-GreenCity",
    "error_id": "27",
    "information": {
        "errors": [
            {
                "line": "229",
                "column": "13",
                "severity": "error",
                "message": "'{' at column 13 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "            if (counter < habitStatistics.size()\n                && zonedDateTime.toLocalDate().equals(habitStatistics.get(counter).getCreatedOn().toLocalDate()))\n            {\n                result.add(new HabitStatisticDto(habit.getHabitStatistics().get(counter)));\n                counter++;\n            } else {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "229",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/errored/1/27/HabitStatisticServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/styler/27/HabitStatisticServiceImpl.java\nindex 46517e8c25b..8ed79c6f227 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/errored/1/27/HabitStatisticServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/styler/27/HabitStatisticServiceImpl.java\n@@ -225,9 +225,8 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n \n         for (int i = 0; i < 21; i++) {\n             if (counter < habitStatistics.size()\n-                && zonedDateTime.toLocalDate().equals(habitStatistics.get(counter).getCreatedOn().toLocalDate()))\n-            {\n-                result.add(new HabitStatisticDto(habit.getHabitStatistics().get(counter)));\n+                && zonedDateTime.toLocalDate().equals(habitStatistics.get(counter).getCreatedOn().toLocalDate())) {\n+                    result.add(new HabitStatisticDto(habit.getHabitStatistics().get(counter)));\n                 counter++;\n             } else {\n                 result.add(new HabitStatisticDto(null, HabitRate.DEFAULT, zonedDateTime, 0));\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/errored/1/27/HabitStatisticServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/intellij/27/HabitStatisticServiceImpl.java\nindex 46517e8c25b..f5b29136e96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/errored/1/27/HabitStatisticServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/intellij/27/HabitStatisticServiceImpl.java\n@@ -225,8 +225,7 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n \n         for (int i = 0; i < 21; i++) {\n             if (counter < habitStatistics.size()\n-                && zonedDateTime.toLocalDate().equals(habitStatistics.get(counter).getCreatedOn().toLocalDate()))\n-            {\n+                && zonedDateTime.toLocalDate().equals(habitStatistics.get(counter).getCreatedOn().toLocalDate())) {\n                 result.add(new HabitStatisticDto(habit.getHabitStatistics().get(counter)));\n                 counter++;\n             } else {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 223).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "211",
                    "column": "9",
                    "severity": "error",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "212",
                    "severity": "error",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "213",
                    "column": "5",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 333).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/errored/1/27/HabitStatisticServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/codebuff/27/HabitStatisticServiceImpl.java\nindex 46517e8c25b..565656b4650 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/errored/1/27/HabitStatisticServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/codebuff/27/HabitStatisticServiceImpl.java\n@@ -40,12 +40,10 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n     /**\n      * Constructor with parameters.\n      */\n+\n+\n     @Autowired\n-    public HabitStatisticServiceImpl(HabitStatisticRepo habitStatisticRepo,\n-                                     HabitRepo habitRepo,\n-                                     HabitStatisticMapper habitStatisticMapper,\n-                                     ModelMapper modelMapper,\n-                                     DateService dateService) {\n+    public HabitStatisticServiceImpl(HabitStatisticRepo habitStatisticRepo, HabitRepo habitRepo, HabitStatisticMapper habitStatisticMapper, ModelMapper modelMapper, DateService dateService) {\n         this.habitStatisticRepo = habitStatisticRepo;\n         this.habitRepo = habitRepo;\n         this.habitStatisticMapper = habitStatisticMapper;\n@@ -58,17 +56,15 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n      *\n      * @author Yuriy Olkhovskyi && Yurii Koval\n      */\n+\n+\n     @Transactional\n     @Override\n     public AddHabitStatisticDto save(AddHabitStatisticDto dto) {\n         if (habitStatisticRepo.findHabitStatByDate(dto.getCreatedOn(), dto.getHabitId()).isPresent()) {\n             throw new NotSavedException(ErrorMessage.HABIT_STATISTIC_ALREADY_EXISTS);\n         }\n-        boolean proceed = isTodayOrYesterday(\n-            dateService\n-                .convertToDatasourceTimezone(dto.getCreatedOn())\n-                .toLocalDate()\n-        );\n+        boolean proceed = isTodayOrYesterday(dateService.convertToDatasourceTimezone(dto.getCreatedOn()).toLocalDate());\n         if (proceed) {\n             HabitStatistic habitStatistic = habitStatisticMapper.convertToEntity(dto);\n             return habitStatisticMapper.convertToDto(habitStatisticRepo.save(habitStatistic));\n@@ -87,15 +83,15 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n      *\n      * @author Yuriy Olkhovskyi\n      */\n+\n+\n     @Transactional\n     @Override\n     public UpdateHabitStatisticDto update(Long habitStatisticId, UpdateHabitStatisticDto dto) {\n         HabitStatistic updatable = findById(habitStatisticId);\n-\n         updatable.setAmountOfItems(dto.getAmountOfItems());\n         updatable.setHabitRate(dto.getHabitRate());\n-        return modelMapper.map(habitStatisticRepo.save(updatable),\n-            UpdateHabitStatisticDto.class);\n+        return modelMapper.map(habitStatisticRepo.save(updatable), UpdateHabitStatisticDto.class);\n     }\n \n     /**\n@@ -103,12 +99,11 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n      *\n      * @author Yuriy Olkhovskyi\n      */\n+\n+\n     @Override\n     public HabitStatistic findById(Long id) {\n-        return habitStatisticRepo\n-            .findById(id)\n-            .orElseThrow(() -> new NotFoundException(ErrorMessage\n-                .HABIT_STATISTIC_NOT_FOUND_BY_ID + id));\n+        return habitStatisticRepo.findById(id).orElseThrow(() -> new NotFoundException(ErrorMessage.HABIT_STATISTIC_NOT_FOUND_BY_ID + id));\n     }\n \n     /**\n@@ -116,10 +111,11 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n      *\n      * @author Yuriy Olkhovskyi\n      */\n+\n+\n     @Override\n     public List<Habit> findAllHabitsByUserId(Long userId) {\n-        return habitRepo.findAllByUserId(userId)\n-            .orElseThrow(() -> new NotFoundException(ErrorMessage.USER_HAS_NOT_ANY_HABITS));\n+        return habitRepo.findAllByUserId(userId).orElseThrow(() -> new NotFoundException(ErrorMessage.USER_HAS_NOT_ANY_HABITS));\n     }\n \n     /**\n@@ -127,12 +123,13 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n      *\n      * @author Yuriy Olkhovskyi\n      */\n+\n+\n     @Override\n     public List<Habit> findAllHabitsByStatus(Long userId, Boolean status) {\n-        List<Habit> habitList = findAllHabitsByUserId(userId)\n-            .stream()\n-            .filter(habit -> habit.getStatusHabit().equals(status))\n-            .collect(Collectors.toList());\n+        List<Habit> habitList = findAllHabitsByUserId(userId).stream()\n+                                                             .filter(habit -> habit.getStatusHabit().equals(status))\n+                                                             .collect(Collectors.toList());\n         if (habitList.isEmpty()) {\n             throw new NotFoundException(ErrorMessage.USER_HAS_NOT_HABITS_WITH_SUCH_STATUS + status);\n         }\n@@ -144,12 +141,13 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n      *\n      * @author Yuriy Olkhovskyi\n      */\n+\n+\n     @Override\n     public List<HabitDto> findAllHabitsAndTheirStatistics(Long id, Boolean status) {\n-        return findAllHabitsByStatus(id, status)\n-            .stream()\n-            .map(this::convertHabitToHabitDto)\n-            .collect(Collectors.toList());\n+        return findAllHabitsByStatus(id, status).stream()\n+                                                .map(this:: convertHabitToHabitDto)\n+                                                .collect(Collectors.toList());\n     }\n \n     /**\n@@ -157,20 +155,17 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n      *\n      * @author Yuriy Olkhovskyi\n      */\n+\n+\n     @Override\n     public CalendarUsefulHabitsDto getInfoAboutUserHabits(Long userId) {\n         List<Habit> allHabitsByUserId = findAllHabitsByStatus(userId, true);\n-\n         List<HabitLogItemDto> statisticByHabitsPerMonth = getAmountOfUnTakenItemsPerMonth(allHabitsByUserId);\n-\n-        List<HabitLogItemDto> statisticUnTakenItemsWithPrevMonth =\n-            getDifferenceItemsWithPrevDay(allHabitsByUserId);\n-\n+        List<HabitLogItemDto> statisticUnTakenItemsWithPrevMonth = getDifferenceItemsWithPrevDay(allHabitsByUserId);\n         CalendarUsefulHabitsDto dto = new CalendarUsefulHabitsDto();\n         dto.setCreationDate(allHabitsByUserId.get(0).getCreateDate());\n         dto.setAllItemsPerMonth(statisticByHabitsPerMonth);\n         dto.setDifferenceUnTakenItemsWithPreviousDay(statisticUnTakenItemsWithPrevMonth);\n-\n         return dto;\n     }\n \n@@ -184,22 +179,13 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n \n     private List<HabitLogItemDto> getAmountOfUnTakenItemsPerMonth(List<Habit> allHabitsByUserId) {\n         ZonedDateTime firstDayOfMonth = dateService.getDatasourceZonedDateTime();\n-        return allHabitsByUserId\n-            .stream()\n-            .map(habit -> new HabitLogItemDto(\n-                habit.getHabitDictionary().getHabitItem(),\n-                habitStatisticRepo\n-                    .getSumOfAllItemsPerMonth(habit.getId(),\n-                        firstDayOfMonth.withDayOfMonth(1)).orElse(0))).collect(Collectors.toList());\n+        return allHabitsByUserId.stream().map(habit -> new HabitLogItemDto(habit.getHabitDictionary().getHabitItem(), habitStatisticRepo.getSumOfAllItemsPerMonth(habit.getId(), firstDayOfMonth.withDayOfMonth(1)).orElse(0)))\n+                                         .collect(Collectors.toList());\n     }\n \n     private List<HabitLogItemDto> getDifferenceItemsWithPrevDay(List<Habit> allHabitsByUserId) {\n-        return allHabitsByUserId\n-            .stream()\n-            .map(habit -> new HabitLogItemDto(\n-                habit.getHabitDictionary().getHabitItem(),\n-                getItemsTakenToday(habit.getId()) - getItemsForPreviousDay(habit.getId())\n-            )).collect(Collectors.toList());\n+        return allHabitsByUserId.stream().map(habit -> new HabitLogItemDto(habit.getHabitDictionary().getHabitItem(), getItemsTakenToday(habit.getId()) - getItemsForPreviousDay(habit.getId())))\n+                                         .collect(Collectors.toList());\n     }\n \n     /**\n@@ -207,12 +193,13 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n      *\n      * @author Yuriy Olkovskyi\n      */\n+\n+\n     @Override\n     public List<HabitStatisticDto> findAllByHabitId(Long habitId) {\n-        return habitStatisticRepo.findAllByHabitId(habitId)\n-            .stream()\n-            .map(HabitStatisticDto::new)\n-            .collect(Collectors.toList());\n+        return habitStatisticRepo.findAllByHabitId(habitId).stream()\n+                                                           .map(HabitStatisticDto::new)\n+                                                           .collect(Collectors.toList());\n     }\n \n     private HabitDto convertHabitToHabitDto(Habit habit) {\n@@ -220,13 +207,12 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n         List<HabitStatistic> habitStatistics = habit.getHabitStatistics();\n         ZonedDateTime zonedDateTime = habit.getCreateDate();\n         int counter = 0;\n-\n         habitStatistics.sort(Comparator.comparing(HabitStatistic::getCreatedOn));\n-\n-        for (int i = 0; i < 21; i++) {\n-            if (counter < habitStatistics.size()\n-                && zonedDateTime.toLocalDate().equals(habitStatistics.get(counter).getCreatedOn().toLocalDate()))\n-            {\n+        for(int i = 0;\n+i < 21;\n+i++ ) {\n+            if (counter < habitStatistics.size() && zonedDateTime.toLocalDate().equals(habitStatistics.get(counter).getCreatedOn()\n+                                                                                                                   .toLocalDate())) {\n                 result.add(new HabitStatisticDto(habit.getHabitStatistics().get(counter)));\n                 counter++;\n             } else {\n@@ -234,15 +220,6 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n             }\n             zonedDateTime = zonedDateTime.plusDays(1);\n         }\n-        return new HabitDto(habit.getId(),\n-            habit.getHabitDictionary().getName(),\n-            habit.getStatusHabit(),\n-            habit.getHabitDictionary().getDescription(),\n-            habit.getHabitDictionary().getName(),\n-            habit.getHabitDictionary().getHabitItem(),\n-            habit.getCreateDate(),\n-            result,\n-            modelMapper.map(habit.getHabitDictionary(), HabitDictionaryDto.class)\n-        );\n+        return new HabitDto(habit.getId(), habit.getHabitDictionary().getName(), habit.getStatusHabit(), habit.getHabitDictionary().getDescription(), habit.getHabitDictionary().getName(), habit.getHabitDictionary().getHabitItem(), habit.getCreateDate(), result, modelMapper.map(habit.getHabitDictionary(), HabitDictionaryDto.class));\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 84
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "229",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/errored/1/27/HabitStatisticServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/styler_random/27/HabitStatisticServiceImpl.java\nindex 46517e8c25b..8ed79c6f227 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/errored/1/27/HabitStatisticServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/styler_random/27/HabitStatisticServiceImpl.java\n@@ -225,9 +225,8 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n \n         for (int i = 0; i < 21; i++) {\n             if (counter < habitStatistics.size()\n-                && zonedDateTime.toLocalDate().equals(habitStatistics.get(counter).getCreatedOn().toLocalDate()))\n-            {\n-                result.add(new HabitStatisticDto(habit.getHabitStatistics().get(counter)));\n+                && zonedDateTime.toLocalDate().equals(habitStatistics.get(counter).getCreatedOn().toLocalDate())) {\n+                    result.add(new HabitStatisticDto(habit.getHabitStatistics().get(counter)));\n                 counter++;\n             } else {\n                 result.add(new HabitStatisticDto(null, HabitRate.DEFAULT, zonedDateTime, 0));\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "229",
                    "severity": "error",
                    "message": "'if lcurly' has incorrect indentation level 16, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "229",
                    "column": "17",
                    "severity": "error",
                    "message": "'{' at column 17 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "229",
                    "column": "17",
                    "severity": "error",
                    "message": "'{' at column 17 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/errored/1/27/HabitStatisticServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/styler_three_grams/27/HabitStatisticServiceImpl.java\nindex 46517e8c25b..b4e92e0e5cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/errored/1/27/HabitStatisticServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ita-social-projects-GreenCity/styler_three_grams/27/HabitStatisticServiceImpl.java\n@@ -226,8 +226,7 @@ public class HabitStatisticServiceImpl implements HabitStatisticService {\n         for (int i = 0; i < 21; i++) {\n             if (counter < habitStatistics.size()\n                 && zonedDateTime.toLocalDate().equals(habitStatistics.get(counter).getCreatedOn().toLocalDate()))\n-            {\n-                result.add(new HabitStatisticDto(habit.getHabitStatistics().get(counter)));\n+                { result.add(new HabitStatisticDto(habit.getHabitStatistics().get(counter)));\n                 counter++;\n             } else {\n                 result.add(new HabitStatisticDto(null, HabitRate.DEFAULT, zonedDateTime, 0));\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}