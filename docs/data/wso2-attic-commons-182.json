{
    "project_name": "wso2-attic-commons",
    "error_id": "182",
    "information": {
        "errors": [
            {
                "line": "111",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 132).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        HashMap<QName, Object> ee = new HashMap<QName,Object>();\n        for (BpelObject child  :getChildren()) {\n            if (child.getType().getNamespaceURI() != null && !child.getType().getNamespaceURI().equals(getType().getNamespaceURI()))\n                ee.put(child.getType(), child.getElement());\n        }\n        ",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/182/BpelObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/182/BpelObject.java\nindex 215f1a400d7..7819ecc6fe2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/182/BpelObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/182/BpelObject.java\n@@ -108,7 +108,8 @@ public class BpelObject extends SourceLocation {\n         // extensibility element/attribute. \n         HashMap<QName, Object> ee = new HashMap<QName,Object>();\n         for (BpelObject child  :getChildren()) {\n-            if (child.getType().getNamespaceURI() != null && !child.getType().getNamespaceURI().equals(getType().getNamespaceURI()))\n+            if (child.getType().getNamespaceURI() != null && !child.getType().getNamespaceURI().equals(getType().\n+                getNamespaceURI()))\n                 ee.put(child.getType(), child.getElement());\n         }\n         \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/182/BpelObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/182/BpelObject.java\nindex 215f1a400d7..3a8d6105340 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/182/BpelObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/182/BpelObject.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.compiler.bom;\n \n import org.apache.ode.bpel.compiler.SourceLocation;\n@@ -43,263 +44,276 @@ import java.util.Map;\n  */\n public class BpelObject extends SourceLocation {\n \n-    public static final QName ATTR_LINENO = new QName(\"urn:org.apache.ode.bpel.compiler\", \"lineno\");\n+  public static final QName ATTR_LINENO = new QName(\"urn:org.apache.ode.bpel.compiler\", \"lineno\");\n \n-    private final Element _element;\n+  private final Element _element;\n \n-    private final QName _type;\n+  private final QName _type;\n \n-    private final NSContext _nsContext;\n+  private final NSContext _nsContext;\n \n-    private List<BpelObject> _children = null;\n-    \n-    /** URI of the source document. */ \n-    private URI _docURI;\n-    \n+  private List<BpelObject> _children = null;\n \n-    public BpelObject(Element el) {\n-        _element = el;\n-        _type = new QName(el.getNamespaceURI(), el.getLocalName());\n-        _nsContext = new NSContext();\n-        \n-        initNSContext(el);\n-    }\n+  /**\n+   * URI of the source document.\n+   */\n+  private URI _docURI;\n \n-    public QName getType() {\n-        return _type;\n-    }\n-    \n-    public Element getElement() {\n-        return _element;\n+\n+  public BpelObject(Element el) {\n+    _element = el;\n+    _type = new QName(el.getNamespaceURI(), el.getLocalName());\n+    _nsContext = new NSContext();\n+\n+    initNSContext(el);\n+  }\n+\n+  public QName getType() {\n+    return _type;\n+  }\n+\n+  public Element getElement() {\n+    return _element;\n+  }\n+\n+  /**\n+   * Get the line number in the BPEL source document where this object is\n+   * defined.\n+   *\n+   * @return line number\n+   */\n+  public int getLineNo() {\n+    return Integer.valueOf(getAttribute(ATTR_LINENO, \"-1\"));\n+  }\n+\n+  /**\n+   * Get the namespace context for this BPEL object (i.e. prefix-to-namespace\n+   * mapping).\n+   *\n+   * @return namespace context\n+   */\n+  public NSContext getNamespaceContext() {\n+    return _nsContext;\n+  }\n+\n+\n+  /**\n+   * Return the declared extensibility elements. The extensibility elements\n+   * declared as subelements of this BpelObject will be returned with a value\n+   * type of org.w3c.dom.Element. The ones declared as extensibility\n+   * attributes will be returned as a value type of String.\n+   *\n+   * @return extensibility qualified names and the full elements value (String\n+   * or Element)\n+   */\n+  public Map<QName, Object> getExtensibilityElements() {\n+    // We consider anything that is not in the namespace of this element to be an\n+    // extensibility element/attribute.\n+    HashMap<QName, Object> ee = new HashMap<QName, Object>();\n+    for (BpelObject child : getChildren()) {\n+      if (child.getType().getNamespaceURI() != null &&\n+        !child.getType().getNamespaceURI().equals(getType().getNamespaceURI())) {\n+        ee.put(child.getType(), child.getElement());\n+      }\n     }\n \n-    /**\n-     * Get the line number in the BPEL source document where this object is\n-     * defined.\n-     * \n-     * @return line number\n-     */\n-    public int getLineNo() {\n-        return Integer.valueOf(getAttribute(ATTR_LINENO, \"-1\"));\n+    NamedNodeMap nnm = getElement().getAttributes();\n+    for (int i = 0; i < nnm.getLength(); ++i) {\n+      Node n = nnm.item(i);\n+      if (n.getNamespaceURI() != null && !n.getNamespaceURI().equals(getType().getNamespaceURI())) {\n+        ee.put(new QName(n.getNamespaceURI(), n.getLocalName()), n.getTextContent());\n+      }\n     }\n+    return ee;\n \n-    /**\n-     * Get the namespace context for this BPEL object (i.e. prefix-to-namespace\n-     * mapping).\n-     * \n-     * @return namespace context\n-     */\n-    public NSContext getNamespaceContext() {\n-        return _nsContext;\n+  }\n+\n+\n+  public Element getExtensibilityElement(QName extElName) {\n+    BpelObject e = getFirstChild(extElName);\n+    if (e == null) {\n+      return null;\n     }\n+    return e.getElement();\n+  }\n \n- \n-    /**\n-     * Return the declared extensibility elements. The extensibility elements\n-     * declared as subelements of this BpelObject will be returned with a value\n-     * type of org.w3c.dom.Element. The ones declared as extensibility\n-     * attributes will be returned as a value type of String.\n-     * \n-     * @return extensibility qualified names and the full elements value (String\n-     *         or Element)\n-     */\n-    public Map<QName, Object> getExtensibilityElements() {\n-        // We consider anything that is not in the namespace of this element to be an\n-        // extensibility element/attribute. \n-        HashMap<QName, Object> ee = new HashMap<QName,Object>();\n-        for (BpelObject child  :getChildren()) {\n-            if (child.getType().getNamespaceURI() != null && !child.getType().getNamespaceURI().equals(getType().getNamespaceURI()))\n-                ee.put(child.getType(), child.getElement());\n-        }\n-        \n-        NamedNodeMap nnm = getElement().getAttributes();\n-        for (int i = 0; i < nnm.getLength(); ++i) {\n-            Node n = nnm.item(i);\n-            if (n.getNamespaceURI() != null && !n.getNamespaceURI().equals(getType().getNamespaceURI()))\n-                ee.put(new QName(n.getNamespaceURI(), n.getLocalName()), n.getTextContent());\n-        }\n-        return ee;\n-        \n+  public Element getFirstExtensibilityElement() {\n+    Element child = null;\n+    NodeList nl = getElement().getChildNodes();\n+    for (int i = 0; i < nl.getLength(); ++i) {\n+      Node node = nl.item(i);\n+      if (node.getNodeType() == Node.ELEMENT_NODE &&\n+        !getType().getNamespaceURI().equals(node.getNamespaceURI())) {\n+        child = (Element) node;\n+        break;\n+      }\n     }\n+    return child;\n+  }\n+\n+  /**\n+   * Is this a BPEL 1.1 object?\n+   *\n+   * @return\n+   */\n+  public boolean is11() {\n+    return getType().getNamespaceURI() != null &&\n+      (getType().getNamespaceURI().equals(Bpel11QNames.NS_BPEL4WS_2003_03)\n+        || getType().getNamespaceURI().equals(Bpel11QNames.NS_BPEL4WS_PARTNERLINK_2003_05));\n+  }\n \n+  public boolean is20Draft() {\n+    return getType().getNamespaceURI() != null &&\n+      (getType().getNamespaceURI().equals(Bpel20QNames.NS_WSBPEL2_0)\n+        || getType().getNamespaceURI().equals(Bpel20QNames.NS_WSBPEL_PARTNERLINK_2004_03));\n+  }\n \n-    public Element getExtensibilityElement(QName extElName) {\n-        BpelObject e = getFirstChild(extElName);\n-        if (e == null)\n-            return null;\n-        return e.getElement();\n+  protected boolean isAttributeSet(String attrname) {\n+    return null != getAttribute(attrname, null);\n+  }\n+\n+  protected <T extends BpelObject> List<T> getChildren(Class<T> cls) {\n+    return CollectionsX.filter(new ArrayList<T>(), getChildren(), cls);\n+  }\n+\n+  protected <T extends BpelObject> T getFirstChild(Class<T> cls) {\n+    List<T> children = getChildren(cls);\n+    if (children.size() == 0) {\n+      return null;\n     }\n+    return children.get(0);\n+  }\n+\n+  protected List<BpelObject> getChildren(final QName type) {\n+    return CollectionsX.filter(new ArrayList<BpelObject>(), getChildren(), new MemberOfFunction<BpelObject>() {\n+      @Override\n+      public boolean isMember(BpelObject o) {\n+        return o.getType().equals(type);\n+      }\n+    });\n+  }\n+\n+  protected BpelObject getFirstChild(final QName type) {\n+    return CollectionsX.find_if(getChildren(), new MemberOfFunction<BpelObject>() {\n+      @Override\n+      public boolean isMember(BpelObject o) {\n+        return o.getType().equals(type);\n+      }\n+    });\n+  }\n+\n+  protected QName rewriteTargetNS(QName target) {\n+    return new QName(getType().getNamespaceURI(), target.getLocalPart());\n+  }\n \n-    public Element getFirstExtensibilityElement() {\n-    \tElement child = null;\n-    \tNodeList nl = getElement().getChildNodes();\n-        for (int i = 0; i < nl.getLength(); ++i) {\n-            Node node = nl.item(i);\n-            if (node.getNodeType() == Node.ELEMENT_NODE && \n-            \t\t!getType().getNamespaceURI().equals(node.getNamespaceURI())) {\n-                child = (Element)node;\n-                break;\n-            }\n+  protected List<BpelObject> getChildren() {\n+    if (_children == null) {\n+      _children = new ArrayList<BpelObject>();\n+      NodeList nl = _element.getChildNodes();\n+      for (int i = 0; i < nl.getLength(); ++i) {\n+        Node node = nl.item(i);\n+        if (node.getNodeType() == Node.ELEMENT_NODE) {\n+          _children.add(createBpelObject((Element) node));\n         }\n-        return child;\n-    }\n-    \n-    /**\n-     * Is this a BPEL 1.1 object?\n-     * @return\n-     */\n-    public boolean is11() {\n-        return getType().getNamespaceURI() != null && \n-            (getType().getNamespaceURI().equals(Bpel11QNames.NS_BPEL4WS_2003_03)\n-                    || getType().getNamespaceURI().equals(Bpel11QNames.NS_BPEL4WS_PARTNERLINK_2003_05)); \n+      }\n     }\n \n-    public boolean is20Draft() {\n-        return getType().getNamespaceURI() != null &&\n-            (getType().getNamespaceURI().equals(Bpel20QNames.NS_WSBPEL2_0)\n-                    || getType().getNamespaceURI().equals(Bpel20QNames.NS_WSBPEL_PARTNERLINK_2004_03)); \n-    }\n+    return _children;\n \n-    protected boolean isAttributeSet(String attrname) {\n-        return null != getAttribute(attrname, null);\n-    }\n-    \n-    protected <T extends BpelObject> List<T> getChildren(Class<T> cls) {\n-        return CollectionsX.filter(new ArrayList<T>(), getChildren(), cls);\n-    }\n+  }\n \n-    protected <T extends BpelObject> T getFirstChild(Class<T> cls) {\n-        List<T> children = getChildren(cls);\n-        if (children.size() == 0)\n-            return null;\n-        return children.get(0);\n-    }\n-    \n-    protected List<BpelObject> getChildren(final QName type) {\n-        return CollectionsX.filter(new ArrayList<BpelObject>(), getChildren(), new MemberOfFunction<BpelObject>() {\n-            @Override\n-            public boolean isMember(BpelObject o) {\n-                return o.getType().equals(type);\n-            }\n-        });\n-    }\n+  protected BpelObject createBpelObject(Element element) {\n+    return BpelObjectFactory.getInstance().createBpelObject(element, _docURI);\n+  }\n \n-    protected BpelObject getFirstChild(final QName type) {\n-        return CollectionsX.find_if(getChildren(), new MemberOfFunction<BpelObject>() {\n-            @Override\n-            public boolean isMember(BpelObject o) {\n-                return o.getType().equals(type);\n-            }\n-        });\n+  protected String getAttribute(QName name, String dflt) {\n+    String val = _element.getAttributeNS(name.getNamespaceURI(), name.getLocalPart());\n+    if (val == null || \"\".equals(val)) {\n+      return dflt;\n     }\n+    return val;\n+  }\n \n-    protected QName rewriteTargetNS(QName target) {\n-    \treturn new QName(getType().getNamespaceURI(), target.getLocalPart());\n+  protected String getAttribute(String name, String dflt) {\n+    String val = _element.getAttribute(name);\n+    if (val == null || \"\".equals(val)) {\n+      return dflt;\n     }\n-    \n-    protected List<BpelObject> getChildren() {\n-        if (_children == null) {\n-            _children = new ArrayList<BpelObject>();\n-            NodeList nl = _element.getChildNodes();\n-            for (int i = 0; i < nl.getLength(); ++i) {\n-                Node node = nl.item(i);\n-                if (node.getNodeType() == Node.ELEMENT_NODE)\n-                    _children.add(createBpelObject((Element) node));\n-            }\n-        }\n+    return val;\n+  }\n \n-        return _children;\n+  protected String getAttribute(String name) {\n+    return getAttribute(name, null);\n+  }\n \n+  protected <T> T getAttribute(String attrName, Map<String, T> suppressJoinFailure, T notset) {\n+    String val = getAttribute(attrName, null);\n+    if (val == null || \"\".equals(val)) {\n+      return notset;\n     }\n+    return suppressJoinFailure.get(val);\n+  }\n \n-    protected BpelObject createBpelObject(Element element) {\n-        return BpelObjectFactory.getInstance().createBpelObject(element,_docURI);\n-    }\n \n-    protected String getAttribute(QName name, String dflt) {\n-        String val = _element.getAttributeNS(name.getNamespaceURI(), name.getLocalPart());\n-        if (val == null || \"\".equals(val))\n-            return dflt;\n-        return val;\n-    }\n-    \n-    protected String getAttribute(String name, String dflt) {\n-        String val = _element.getAttribute(name);\n-        if (val == null || \"\".equals(val))\n-            return dflt;\n-        return val;\n-    }\n-    \n-    protected String getAttribute(String name) {\n-        return getAttribute(name, null);\n-    }\n-    \n-    protected <T> T getAttribute(String attrName, Map<String, T> suppressJoinFailure, T notset) {\n-        String val = getAttribute(attrName, null);\n-        if (val == null || \"\".equals(val))\n-            return notset;\n-        return suppressJoinFailure.get(val);\n-    }\n-   \n-    \n-    \n-    /**\n-     * Initialize object's namespace context (recursively).\n-     * \n-     * @param el\n-     *            object's associated element.\n-     */\n-    private void initNSContext(Element el) {\n-        if (el.getParentNode() != null && el.getParentNode().getNodeType() == Node.ELEMENT_NODE)\n-            initNSContext((Element) el.getParentNode());\n-        NamedNodeMap attrs = el.getAttributes();\n-        for (int i = 0; i < attrs.getLength(); ++i) {\n-            Attr attr = (Attr) attrs.item(i);\n-            if (!attr.getName().startsWith(\"xmlns:\"))\n-                continue;\n-            String prefix = attr.getLocalName();\n-            String uri = attr.getValue();\n-\n-            _nsContext.register(prefix, uri);\n-        }\n-        \n-        Attr dflt = el.getAttributeNode(\"xmlns\");\n-        if (dflt != null) {\n-            _nsContext.register(\"\", dflt.getTextContent());\n-        }\n-        \n-    }\n-   \n-    public String getTextValue() { \n-        getElement().normalize();\n-        for (Node n = getElement().getFirstChild(); n != null; n = n.getNextSibling())\n-            switch (n.getNodeType()) {\n-            case Node.TEXT_NODE:\n-            case Node.ELEMENT_NODE:\n-            case Node.CDATA_SECTION_NODE:\n-                return n.getNodeValue();\n-            }\n-        return null;\n+  /**\n+   * Initialize object's namespace context (recursively).\n+   *\n+   * @param el object's associated element.\n+   */\n+  private void initNSContext(Element el) {\n+    if (el.getParentNode() != null && el.getParentNode().getNodeType() == Node.ELEMENT_NODE) {\n+      initNSContext((Element) el.getParentNode());\n     }\n+    NamedNodeMap attrs = el.getAttributes();\n+    for (int i = 0; i < attrs.getLength(); ++i) {\n+      Attr attr = (Attr) attrs.item(i);\n+      if (!attr.getName().startsWith(\"xmlns:\")) {\n+        continue;\n+      }\n+      String prefix = attr.getLocalName();\n+      String uri = attr.getValue();\n \n-    @Override\n-    public String toString() {\n-        return DOMUtils.domToString(_element);\n+      _nsContext.register(prefix, uri);\n     }\n \n-    public int getColumnNo() {\n-        return 0;\n+    Attr dflt = el.getAttributeNode(\"xmlns\");\n+    if (dflt != null) {\n+      _nsContext.register(\"\", dflt.getTextContent());\n     }\n \n-    public String getPath() {\n-        return null;\n-    }\n+  }\n \n-    public URI getURI() {\n-        return _docURI;\n+  public String getTextValue() {\n+    getElement().normalize();\n+    for (Node n = getElement().getFirstChild(); n != null; n = n.getNextSibling()) {\n+      switch (n.getNodeType()) {\n+      case Node.TEXT_NODE:\n+      case Node.ELEMENT_NODE:\n+      case Node.CDATA_SECTION_NODE:\n+        return n.getNodeValue();\n+      }\n     }\n+    return null;\n+  }\n \n-    public void setURI(URI uri) {\n-        _docURI = uri;\n-    }\n+  @Override\n+  public String toString() {\n+    return DOMUtils.domToString(_element);\n+  }\n+\n+  public int getColumnNo() {\n+    return 0;\n+  }\n+\n+  public String getPath() {\n+    return null;\n+  }\n+\n+  public URI getURI() {\n+    return _docURI;\n+  }\n+\n+  public void setURI(URI uri) {\n+    _docURI = uri;\n+  }\n }\n",
            "diff_size": 369
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/182/BpelObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/182/BpelObject.java\nindex 215f1a400d7..b71f7e0b450 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/182/BpelObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/182/BpelObject.java\n@@ -55,9 +55,8 @@ public class BpelObject extends SourceLocation {\n     \n     /** URI of the source document. */ \n     private URI _docURI;\n-    \n \n-    public BpelObject(Element el) {\n+public BpelObject(Element el) {\n         _element = el;\n         _type = new QName(el.getNamespaceURI(), el.getLocalName());\n         _nsContext = new NSContext();\n@@ -107,7 +106,7 @@ public class BpelObject extends SourceLocation {\n         // We consider anything that is not in the namespace of this element to be an\n         // extensibility element/attribute. \n         HashMap<QName, Object> ee = new HashMap<QName,Object>();\n-        for (BpelObject child  :getChildren()) {\n+        for (BpelObject child: getChildren()) {\n             if (child.getType().getNamespaceURI() != null && !child.getType().getNamespaceURI().equals(getType().getNamespaceURI()))\n                 ee.put(child.getType(), child.getElement());\n         }\n@@ -119,11 +118,9 @@ public class BpelObject extends SourceLocation {\n                 ee.put(new QName(n.getNamespaceURI(), n.getLocalName()), n.getTextContent());\n         }\n         return ee;\n-        \n     }\n \n-\n-    public Element getExtensibilityElement(QName extElName) {\n+        public Element getExtensibilityElement(QName extElName) {\n         BpelObject e = getFirstChild(extElName);\n         if (e == null)\n             return null;\n@@ -137,7 +134,7 @@ public class BpelObject extends SourceLocation {\n             Node node = nl.item(i);\n             if (node.getNodeType() == Node.ELEMENT_NODE && \n             \t\t!getType().getNamespaceURI().equals(node.getNamespaceURI())) {\n-                child = (Element)node;\n+    child = (Element)node;\n                 break;\n             }\n         }\n@@ -151,16 +148,17 @@ public class BpelObject extends SourceLocation {\n     public boolean is11() {\n         return getType().getNamespaceURI() != null && \n             (getType().getNamespaceURI().equals(Bpel11QNames.NS_BPEL4WS_2003_03)\n-                    || getType().getNamespaceURI().equals(Bpel11QNames.NS_BPEL4WS_PARTNERLINK_2003_05)); \n-    }\n+                    || getType().getNamespaceURI().equals(Bpel11QNames.NS_BPEL4WS_PARTNERLINK_2003_05));\n+   }\n+\n \n     public boolean is20Draft() {\n         return getType().getNamespaceURI() != null &&\n             (getType().getNamespaceURI().equals(Bpel20QNames.NS_WSBPEL2_0)\n-                    || getType().getNamespaceURI().equals(Bpel20QNames.NS_WSBPEL_PARTNERLINK_2004_03)); \n-    }\n+                    || getType().getNamespaceURI().equals(Bpel20QNames.NS_WSBPEL_PARTNERLINK_2004_03));\n+       }\n \n-    protected boolean isAttributeSet(String attrname) {\n+protected boolean isAttributeSet(String attrname) {\n         return null != getAttribute(attrname, null);\n     }\n     \n@@ -240,16 +238,14 @@ public class BpelObject extends SourceLocation {\n             return notset;\n         return suppressJoinFailure.get(val);\n     }\n-   \n-    \n-    \n-    /**\n+\n+/**\n      * Initialize object's namespace context (recursively).\n      * \n      * @param el\n      *            object's associated element.\n      */\n-    private void initNSContext(Element el) {\n+private void initNSContext(Element el) {\n         if (el.getParentNode() != null && el.getParentNode().getNodeType() == Node.ELEMENT_NODE)\n             initNSContext((Element) el.getParentNode());\n         NamedNodeMap attrs = el.getAttributes();\n@@ -267,9 +263,8 @@ public class BpelObject extends SourceLocation {\n         if (dflt != null) {\n             _nsContext.register(\"\", dflt.getTextContent());\n         }\n-        \n     }\n-   \n+\n     public String getTextValue() { \n         getElement().normalize();\n         for (Node n = getElement().getFirstChild(); n != null; n = n.getNextSibling())\n@@ -302,4 +297,4 @@ public class BpelObject extends SourceLocation {\n     public void setURI(URI uri) {\n         _docURI = uri;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/182/BpelObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/182/BpelObject.java\nindex 215f1a400d7..7819ecc6fe2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/182/BpelObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/182/BpelObject.java\n@@ -108,7 +108,8 @@ public class BpelObject extends SourceLocation {\n         // extensibility element/attribute. \n         HashMap<QName, Object> ee = new HashMap<QName,Object>();\n         for (BpelObject child  :getChildren()) {\n-            if (child.getType().getNamespaceURI() != null && !child.getType().getNamespaceURI().equals(getType().getNamespaceURI()))\n+            if (child.getType().getNamespaceURI() != null && !child.getType().getNamespaceURI().equals(getType().\n+                getNamespaceURI()))\n                 ee.put(child.getType(), child.getElement());\n         }\n         \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}