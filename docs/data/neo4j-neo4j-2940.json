{
    "project_name": "neo4j-neo4j",
    "error_id": "2940",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "101",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2940/Params.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2940/Params.java\nindex ff7a7af958d..8fb4ba72a4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2940/Params.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2940/Params.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.commands;\n \n import java.util.Arrays;\n@@ -41,11 +42,11 @@ import static org.neo4j.shell.prettyprint.CypherVariablesFormatter.escape;\n public class Params implements Command\n {\n     public static final String COMMAND_NAME = \":params\";\n-    private static final Pattern backtickPattern = Pattern.compile( \"^\\\\s*(?<key>(`([^`])*`)+?)\\\\s*\" );\n+    private static final Pattern backtickPattern = Pattern.compile(\"^\\\\s*(?<key>(`([^`])*`)+?)\\\\s*\");\n     private final Logger logger;\n     private final ParameterMap parameterMap;\n \n-    public Params( @Nonnull Logger logger, @Nonnull ParameterMap parameterMap )\n+    public Params(@Nonnull Logger logger, @Nonnull ParameterMap parameterMap)\n     {\n         this.logger = logger;\n         this.parameterMap = parameterMap;\n@@ -83,53 +84,51 @@ public class Params implements Command\n     @Override\n     public List<String> getAliases()\n     {\n-        return Arrays.asList( \":parameters\" );\n+        return Arrays.asList(\":parameters\");\n     }\n \n     @Override\n-    public void execute( @Nonnull final String argString ) throws ExitException, CommandException\n+    public void execute(@Nonnull final String argString) throws ExitException, CommandException\n     {\n         String trim = argString.trim();\n-        Matcher matcher = backtickPattern.matcher( trim );\n-        if ( trim.startsWith( \"`\" ) && matcher.matches() )\n+        Matcher matcher = backtickPattern.matcher(trim);\n+        if (trim.startsWith(\"`\") && matcher.matches())\n         {\n-            listParam( trim );\n-        }\n-        else\n+            listParam(trim);\n+        } else\n         {\n-            String[] args = simpleArgParse( argString, 0, 1, COMMAND_NAME, getUsage() );\n-            if ( args.length > 0 )\n+            String[] args = simpleArgParse(argString, 0, 1, COMMAND_NAME, getUsage());\n+            if (args.length > 0)\n             {\n-                listParam( args[0] );\n-            }\n-            else\n+                listParam(args[0]);\n+            } else\n             {\n                 listAllParams();\n             }\n         }\n     }\n \n-    private void listParam( @Nonnull String name ) throws CommandException\n+    private void listParam(@Nonnull String name) throws CommandException\n     {\n-        String parameterName = CypherVariablesFormatter.unescapedCypherVariable( name );\n-        if ( !this.parameterMap.getAllAsUserInput().containsKey( parameterName ) )\n+        String parameterName = CypherVariablesFormatter.unescapedCypherVariable(name);\n+        if (!this.parameterMap.getAllAsUserInput().containsKey(parameterName))\n         {\n-            throw new CommandException( \"Unknown parameter: \" + name );\n+            throw new CommandException(\"Unknown parameter: \" + name);\n         }\n-        listParam( name.length(), name, this.parameterMap.getAllAsUserInput().get( parameterName ).getValueAsString() );\n+        listParam(name.length(), name, this.parameterMap.getAllAsUserInput().get(parameterName).getValueAsString());\n     }\n \n-    private void listParam( int leftColWidth, @Nonnull String key, @Nonnull Object value )\n+    private void listParam(int leftColWidth, @Nonnull String key, @Nonnull Object value)\n     {\n-        logger.printOut( String.format( \":param %-\" + leftColWidth + \"s => %s\", key, value ) );\n+        logger.printOut(String.format(\":param %-\" + leftColWidth + \"s => %s\", key, value));\n     }\n \n     private void listAllParams()\n     {\n-        List<String> keys = parameterMap.getAllAsUserInput().keySet().stream().sorted().collect( Collectors.toList() );\n+        List<String> keys = parameterMap.getAllAsUserInput().keySet().stream().sorted().collect(Collectors.toList());\n \n-        int leftColWidth = keys.stream().map( s -> escape( s ).length() ).reduce( 0, Math::max );\n+        int leftColWidth = keys.stream().map(s -> escape(s).length()).reduce(0, Math::max);\n \n-        keys.forEach( key -> listParam( leftColWidth, escape( key ), parameterMap.getAllAsUserInput().get( key ).getValueAsString() ) );\n+        keys.forEach(key -> listParam(leftColWidth, escape(key), parameterMap.getAllAsUserInput().get(key).getValueAsString()));\n     }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2940/Params.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2940/Params.java\nindex ff7a7af958d..72763746586 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2940/Params.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2940/Params.java\n@@ -132,4 +132,4 @@ public class Params implements Command\n \n         keys.forEach( key -> listParam( leftColWidth, escape( key ), parameterMap.getAllAsUserInput().get( key ).getValueAsString() ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}