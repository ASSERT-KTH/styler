{
    "project_name": "graphfoundation-ongdb",
    "error_id": "675",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "89",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "265",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "286",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "310",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "370",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "370",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "394",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "394",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "467",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "585",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "692",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "701",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "701",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "714",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "718",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "726",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "734",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "734",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "735",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "737",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "740",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "742",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "742",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "756",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "756",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "804",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "804",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "827",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "827",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "835",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "835",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "840",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "840",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "840",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "859",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "859",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "861",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "861",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "866",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "866",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "879",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "879",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "901",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "901",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "907",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "907",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "912",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "912",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "912",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "914",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "914",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "918",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "918",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "921",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "921",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "924",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "930",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "930",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "930",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "932",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "932",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "935",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "935",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "938",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/675/DocValuesCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/675/DocValuesCollector.java\nindex a3c463fab48..ebf52565a1b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/675/DocValuesCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/675/DocValuesCollector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.index.collector;\n \n import org.apache.lucene.document.Document;\n@@ -69,882 +70,875 @@ import org.neo4j.values.storable.Value;\n  */\n public class DocValuesCollector extends SimpleCollector\n {\n-    private static final EmptyIndexHits<Document> EMPTY_INDEX_HITS = new EmptyIndexHits<>();\n-\n-    private LeafReaderContext context;\n-    private int segmentHits;\n-    private int totalHits;\n-    private Scorer scorer;\n-    private float[] scores;\n-    private final boolean keepScores;\n-    private final List<MatchingDocs> matchingDocs = new ArrayList<>();\n-    private Docs docs;\n+  private static final EmptyIndexHits<Document> EMPTY_INDEX_HITS = new EmptyIndexHits<>();\n+\n+  private LeafReaderContext context;\n+  private int segmentHits;\n+  private int totalHits;\n+  private Scorer scorer;\n+  private float[] scores;\n+  private final boolean keepScores;\n+  private final List<MatchingDocs> matchingDocs = new ArrayList<>();\n+  private Docs docs;\n+\n+  /**\n+   * Default Constructor, does not keep scores.\n+   */\n+  public DocValuesCollector()\n+  {\n+    this(false);\n+  }\n+\n+  /**\n+   * @param keepScores true if you want to trade correctness for speed\n+   */\n+  public DocValuesCollector(boolean keepScores)\n+  {\n+    this.keepScores = keepScores;\n+  }\n+\n+  /**\n+   * @param field the field that contains the values\n+   * @return an iterator over all NumericDocValues from the given field\n+   */\n+  public LongValuesIterator getValuesIterator(String field)\n+  {\n+    return new LongValuesIterator(getMatchingDocs(), getTotalHits(), field);\n+  }\n+\n+  public IndexProgressor getIndexProgressor(String field, IndexProgressor.NodeValueClient client)\n+  {\n+    return new LongValuesIndexProgressor(getMatchingDocs(), getTotalHits(), field, client);\n+  }\n+\n+  /**\n+   * @param field the field that contains the values\n+   * @param sort  how the results should be sorted\n+   * @return an iterator over all NumericDocValues from the given field with respect to the given sort\n+   * @throws IOException\n+   */\n+  public ValuesIterator getSortedValuesIterator(String field, Sort sort) throws IOException\n+  {\n+    if (sort == null || sort == Sort.INDEXORDER)\n+    {\n+      return getValuesIterator(field);\n+    }\n+    int size = getTotalHits();\n+    if (size == 0)\n+    {\n+      return ValuesIterator.EMPTY;\n+    }\n+    TopDocs topDocs = getTopDocs(sort, size);\n+    LeafReaderContext[] contexts = getLeafReaderContexts(getMatchingDocs());\n+    return new TopDocsValuesIterator(topDocs, contexts, field);\n+  }\n+\n+  /**\n+   * Replay the search and collect every hit into TopDocs. One {@code ScoreDoc} is allocated\n+   * for every hit and the {@code Document} instance is loaded lazily with on every iteration step.\n+   *\n+   * @param sort how to sort the iterator. If this is null, results will be in index-order.\n+   * @return an indexhits iterator over all matches\n+   * @throws IOException\n+   */\n+  public IndexHits<Document> getIndexHits(Sort sort) throws IOException\n+  {\n+    List<MatchingDocs> matchingDocs = getMatchingDocs();\n+    int size = getTotalHits();\n+    if (size == 0)\n+    {\n+      return EMPTY_INDEX_HITS;\n+    }\n \n-    /**\n-     * Default Constructor, does not keep scores.\n-     */\n-    public DocValuesCollector()\n+    if (sort == null || sort == Sort.INDEXORDER)\n     {\n-        this( false );\n+      return new DocsInIndexOrderIterator(matchingDocs, size, isKeepScores());\n     }\n \n-    /**\n-     * @param keepScores true if you want to trade correctness for speed\n-     */\n-    public DocValuesCollector( boolean keepScores )\n+    TopDocs topDocs = getTopDocs(sort, size);\n+    LeafReaderContext[] contexts = getLeafReaderContexts(matchingDocs);\n+    return new TopDocsIterator(topDocs, contexts);\n+  }\n+\n+  /**\n+   * @return the total number of hits across all segments.\n+   */\n+  public int getTotalHits()\n+  {\n+    return totalHits;\n+  }\n+\n+  /**\n+   * @return true if scores were saved.\n+   */\n+  public boolean isKeepScores()\n+  {\n+    return keepScores;\n+  }\n+\n+  @Override\n+  public final void collect(int doc) throws IOException\n+  {\n+    docs.addDoc(doc);\n+    if (keepScores)\n+    {\n+      if (segmentHits >= scores.length)\n+      {\n+        float[] newScores = new float[ArrayUtil.oversize(segmentHits + 1, 4)];\n+        System.arraycopy(scores, 0, newScores, 0, segmentHits);\n+        scores = newScores;\n+      }\n+      scores[segmentHits] = scorer.score();\n+    }\n+    segmentHits++;\n+    totalHits++;\n+  }\n+\n+  @Override\n+  public boolean needsScores()\n+  {\n+    return keepScores;\n+  }\n+\n+  @Override\n+  public void setScorer(Scorer scorer)\n+  {\n+    this.scorer = scorer;\n+  }\n+\n+  @Override\n+  public void doSetNextReader(LeafReaderContext context)\n+  {\n+    if (docs != null && segmentHits > 0)\n+    {\n+      createMatchingDocs();\n+    }\n+    int maxDoc = context.reader().maxDoc();\n+    docs = createDocs(maxDoc);\n+    if (keepScores)\n     {\n-        this.keepScores = keepScores;\n+      int initialSize = Math.min(32, maxDoc);\n+      scores = new float[initialSize];\n+    }\n+    segmentHits = 0;\n+    this.context = context;\n+  }\n+\n+  /**\n+   * @return the documents matched by the query, one {@link MatchingDocs} per visited segment that contains a hit.\n+   */\n+  public List<MatchingDocs> getMatchingDocs()\n+  {\n+    if (docs != null && segmentHits > 0)\n+    {\n+      createMatchingDocs();\n+      docs = null;\n+      scores = null;\n+      context = null;\n     }\n \n-    /**\n-     * @param field the field that contains the values\n-     * @return an iterator over all NumericDocValues from the given field\n-     */\n-    public LongValuesIterator getValuesIterator( String field )\n+    return Collections.unmodifiableList(matchingDocs);\n+  }\n+\n+  /**\n+   * @return a new {@link Docs} to record hits.\n+   */\n+  private Docs createDocs(final int maxDoc)\n+  {\n+    return new Docs(maxDoc);\n+  }\n+\n+  private void createMatchingDocs()\n+  {\n+    if (scores == null || scores.length == segmentHits)\n+    {\n+      matchingDocs.add(new MatchingDocs(this.context, docs.getDocIdSet(), segmentHits, scores));\n+    } else\n     {\n-        return new LongValuesIterator( getMatchingDocs(), getTotalHits(), field );\n+      // NOTE: we could skip the copy step here since the MatchingDocs are supposed to be\n+      // consumed through any of the provided Iterators (actually, the replay method),\n+      // which all don't care if scores has null values at the end.\n+      // This is for just sanity's sake, we could also make MatchingDocs private\n+      // and treat this as implementation detail.\n+      float[] finalScores = new float[segmentHits];\n+      System.arraycopy(scores, 0, finalScores, 0, segmentHits);\n+      matchingDocs.add(new MatchingDocs(this.context, docs.getDocIdSet(), segmentHits, finalScores));\n     }\n+  }\n \n-    public IndexProgressor getIndexProgressor( String field, IndexProgressor.NodeValueClient client )\n+  private TopDocs getTopDocs(Sort sort, int size) throws IOException\n+  {\n+    TopDocs topDocs;\n+    if (sort == Sort.RELEVANCE)\n+    {\n+      TopScoreDocCollector collector = TopScoreDocCollector.create(size);\n+      replayTo(collector);\n+      topDocs = collector.topDocs();\n+    } else\n     {\n-        return new LongValuesIndexProgressor( getMatchingDocs(), getTotalHits(), field, client );\n+      TopFieldCollector collector = TopFieldCollector.create(sort, size, false, true, false);\n+      replayTo(collector);\n+      topDocs = collector.topDocs();\n     }\n+    return topDocs;\n+  }\n+\n+  private static LeafReaderContext[] getLeafReaderContexts(List<MatchingDocs> matchingDocs)\n+  {\n+    int segments = matchingDocs.size();\n+    LeafReaderContext[] contexts = new LeafReaderContext[segments];\n+    for (int i = 0; i < segments; i++)\n+    {\n+      MatchingDocs matchingDoc = matchingDocs.get(i);\n+      contexts[i] = matchingDoc.context;\n+    }\n+    return contexts;\n+  }\n \n-    /**\n-     * @param field the field that contains the values\n-     * @param sort how the results should be sorted\n-     * @return an iterator over all NumericDocValues from the given field with respect to the given sort\n-     * @throws IOException\n-     */\n-    public ValuesIterator getSortedValuesIterator( String field, Sort sort ) throws IOException\n+  private void replayTo(Collector collector) throws IOException\n+  {\n+    for (MatchingDocs docs : getMatchingDocs())\n     {\n-        if ( sort == null || sort == Sort.INDEXORDER )\n-        {\n-            return getValuesIterator( field );\n-        }\n-        int size = getTotalHits();\n-        if ( size == 0 )\n-        {\n-            return ValuesIterator.EMPTY;\n-        }\n-        TopDocs topDocs = getTopDocs( sort, size );\n-        LeafReaderContext[] contexts = getLeafReaderContexts( getMatchingDocs() );\n-        return new TopDocsValuesIterator( topDocs, contexts, field );\n+      LeafCollector leafCollector = collector.getLeafCollector(docs.context);\n+      Scorer scorer;\n+      DocIdSetIterator idIterator = docs.docIdSet.iterator();\n+      if (isKeepScores())\n+      {\n+        scorer = new ReplayingScorer(docs.scores);\n+      } else\n+      {\n+        scorer = new ConstantScoreScorer(null, Float.NaN, idIterator);\n+      }\n+      leafCollector.setScorer(scorer);\n+      int doc;\n+      while ((doc = idIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS)\n+      {\n+        leafCollector.collect(doc);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Iterates over all per-segment {@link DocValuesCollector.MatchingDocs}.\n+   * Provides base functionality for extracting entity ids and other values from documents.\n+   */\n+  private abstract static class LongValuesSource\n+  {\n+    private final Iterator<DocValuesCollector.MatchingDocs> matchingDocs;\n+    private final String field;\n+    final int totalHits;\n+    final Map<String, NumericDocValues> docValuesCache;\n+\n+    DocIdSetIterator currentIdIterator;\n+    NumericDocValues currentDocValues;\n+    DocValuesCollector.MatchingDocs currentDocs;\n+    int index;\n+    long next;\n+\n+    LongValuesSource(Iterable<DocValuesCollector.MatchingDocs> allMatchingDocs, int totalHits, String field)\n+    {\n+      this.totalHits = totalHits;\n+      this.field = field;\n+      matchingDocs = allMatchingDocs.iterator();\n+      docValuesCache = new HashMap<>();\n     }\n \n     /**\n-     * Replay the search and collect every hit into TopDocs. One {@code ScoreDoc} is allocated\n-     * for every hit and the {@code Document} instance is loaded lazily with on every iteration step.\n-     *\n-     * @param sort how to sort the iterator. If this is null, results will be in index-order.\n-     * @return an indexhits iterator over all matches\n-     * @throws IOException\n+     * @return true if it was able to make sure, that currentDisi is valid\n      */\n-    public IndexHits<Document> getIndexHits( Sort sort ) throws IOException\n+    boolean ensureValidDisi()\n     {\n-        List<MatchingDocs> matchingDocs = getMatchingDocs();\n-        int size = getTotalHits();\n-        if ( size == 0 )\n-        {\n-            return EMPTY_INDEX_HITS;\n-        }\n-\n-        if ( sort == null || sort == Sort.INDEXORDER )\n+      try\n+      {\n+        while (currentIdIterator == null)\n         {\n-            return new DocsInIndexOrderIterator( matchingDocs, size, isKeepScores() );\n+          if (matchingDocs.hasNext())\n+          {\n+            currentDocs = matchingDocs.next();\n+            currentIdIterator = currentDocs.docIdSet.iterator();\n+            if (currentIdIterator != null)\n+            {\n+              docValuesCache.clear();\n+              currentDocValues = currentDocs.readDocValues(field);\n+            }\n+          } else\n+          {\n+            return false;\n+          }\n         }\n-\n-        TopDocs topDocs = getTopDocs( sort, size );\n-        LeafReaderContext[] contexts = getLeafReaderContexts( matchingDocs );\n-        return new TopDocsIterator( topDocs, contexts );\n+        return true;\n+      } catch (IOException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n     }\n \n-    /**\n-     * @return the total number of hits across all segments.\n-     */\n-    public int getTotalHits()\n+    boolean fetchNextEntityId()\n     {\n-        return totalHits;\n+      try\n+      {\n+        if (ensureValidDisi())\n+        {\n+          int nextDoc = currentIdIterator.nextDoc();\n+          if (nextDoc != DocIdSetIterator.NO_MORE_DOCS)\n+          {\n+            index++;\n+            next = currentDocValues.get(nextDoc);\n+            return true;\n+          } else\n+          {\n+            currentIdIterator = null;\n+            return fetchNextEntityId();\n+          }\n+        }\n+      } catch (IOException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n+\n+      return false;\n     }\n+  }\n+\n+  /**\n+   * Iterates over all per-segment {@link DocValuesCollector.MatchingDocs}. Supports two kinds of lookups.\n+   * One, iterate over all long values of the given field (constructor argument).\n+   * Two, lookup a value for the current doc in a sidecar {@code NumericDocValues} field.\n+   * That is, this iterator has a main field, that drives the iteration and allow for lookups\n+   * in other, secondary fields based on the current document of the main iteration.\n+   * <p>\n+   * Lookups from this class are not thread-safe. Races can happen when the segment barrier\n+   * is crossed; one thread might think it is reading from one segment while another thread has\n+   * already advanced this Iterator to the next segment, having raced the first thread.\n+   */\n+  public static class LongValuesIterator extends LongValuesSource implements ValuesIterator, PrimitiveLongResourceIterator\n+  {\n+    private boolean hasNext;\n+    private boolean hasNextDecided;\n \n     /**\n-     * @return true if scores were saved.\n+     * @param allMatchingDocs all {@link DocValuesCollector.MatchingDocs} across all segments\n+     * @param totalHits       the total number of hits across all segments\n+     * @param field           the main field, whose values drive the iteration\n      */\n-    public boolean isKeepScores()\n+    public LongValuesIterator(Iterable<DocValuesCollector.MatchingDocs> allMatchingDocs, int totalHits, String field)\n     {\n-        return keepScores;\n+      super(allMatchingDocs, totalHits, field);\n     }\n \n     @Override\n-    public final void collect( int doc ) throws IOException\n+    public long current()\n     {\n-        docs.addDoc( doc );\n-        if ( keepScores )\n-        {\n-            if ( segmentHits >= scores.length )\n-            {\n-                float[] newScores = new float[ArrayUtil.oversize( segmentHits + 1, 4 )];\n-                System.arraycopy( scores, 0, newScores, 0, segmentHits );\n-                scores = newScores;\n-            }\n-            scores[segmentHits] = scorer.score();\n-        }\n-        segmentHits++;\n-        totalHits++;\n+      return next;\n     }\n \n     @Override\n-    public boolean needsScores()\n+    public float currentScore()\n     {\n-        return keepScores;\n+      return 0;\n     }\n \n     @Override\n-    public void setScorer( Scorer scorer )\n+    public long getValue(String field)\n     {\n-        this.scorer = scorer;\n+      if (ensureValidDisi())\n+      {\n+        if (docValuesCache.containsKey(field))\n+        {\n+          return docValuesCache.get(field).get(currentIdIterator.docID());\n+        }\n+\n+        NumericDocValues docValues = currentDocs.readDocValues(field);\n+        docValuesCache.put(field, docValues);\n+\n+        return docValues.get(currentIdIterator.docID());\n+      } else\n+      {\n+        // same as DocValues.emptyNumeric()#get\n+        // which means, getValue carries over the semantics of NDV\n+        // -1 would also be a possibility here.\n+        return 0;\n+      }\n     }\n \n     @Override\n-    public void doSetNextReader( LeafReaderContext context )\n+    public boolean hasNext()\n     {\n-        if ( docs != null && segmentHits > 0 )\n-        {\n-            createMatchingDocs();\n-        }\n-        int maxDoc = context.reader().maxDoc();\n-        docs = createDocs( maxDoc );\n-        if ( keepScores )\n-        {\n-            int initialSize = Math.min( 32, maxDoc );\n-            scores = new float[initialSize];\n-        }\n-        segmentHits = 0;\n-        this.context = context;\n+      if (!hasNextDecided)\n+      {\n+        hasNext = fetchNextEntityId();\n+        hasNextDecided = true;\n+      }\n+      return hasNext;\n     }\n \n-    /**\n-     * @return the documents matched by the query, one {@link MatchingDocs} per visited segment that contains a hit.\n-     */\n-    public List<MatchingDocs> getMatchingDocs()\n+    @Override\n+    public long next()\n     {\n-        if ( docs != null && segmentHits > 0 )\n-        {\n-            createMatchingDocs();\n-            docs = null;\n-            scores = null;\n-            context = null;\n-        }\n-\n-        return Collections.unmodifiableList( matchingDocs );\n+      if (!hasNext())\n+      {\n+        throw new NoSuchElementException();\n+      }\n+      hasNextDecided = false;\n+      return next;\n     }\n \n-    /**\n-     * @return a new {@link Docs} to record hits.\n-     */\n-    private Docs createDocs( final int maxDoc )\n+    @Override\n+    public int remaining()\n     {\n-        return new Docs( maxDoc );\n+      return totalHits - index;\n     }\n \n-    private void createMatchingDocs()\n+    @Override\n+    public void close()\n     {\n-        if ( scores == null || scores.length == segmentHits )\n-        {\n-            matchingDocs.add( new MatchingDocs( this.context, docs.getDocIdSet(), segmentHits, scores ) );\n-        }\n-        else\n-        {\n-            // NOTE: we could skip the copy step here since the MatchingDocs are supposed to be\n-            // consumed through any of the provided Iterators (actually, the replay method),\n-            // which all don't care if scores has null values at the end.\n-            // This is for just sanity's sake, we could also make MatchingDocs private\n-            // and treat this as implementation detail.\n-            float[] finalScores = new float[segmentHits];\n-            System.arraycopy( scores, 0, finalScores, 0, segmentHits );\n-            matchingDocs.add( new MatchingDocs( this.context, docs.getDocIdSet(), segmentHits, finalScores ) );\n-        }\n+      // nothing to close\n     }\n+  }\n+\n+  private static class LongValuesIndexProgressor extends LongValuesSource implements IndexProgressor\n+  {\n+    private final NodeValueClient client;\n \n-    private TopDocs getTopDocs( Sort sort, int size ) throws IOException\n+    LongValuesIndexProgressor(Iterable<MatchingDocs> allMatchingDocs, int totalHits, String field, NodeValueClient client)\n     {\n-        TopDocs topDocs;\n-        if ( sort == Sort.RELEVANCE )\n-        {\n-            TopScoreDocCollector collector = TopScoreDocCollector.create( size );\n-            replayTo( collector );\n-            topDocs = collector.topDocs();\n-        }\n-        else\n-        {\n-            TopFieldCollector collector = TopFieldCollector.create( sort, size, false, true, false );\n-            replayTo( collector );\n-            topDocs = collector.topDocs();\n-        }\n-        return topDocs;\n+      super(allMatchingDocs, totalHits, field);\n+      this.client = client;\n     }\n \n-    private static LeafReaderContext[] getLeafReaderContexts( List<MatchingDocs> matchingDocs )\n+    @Override\n+    public boolean next()\n     {\n-        int segments = matchingDocs.size();\n-        LeafReaderContext[] contexts = new LeafReaderContext[segments];\n-        for ( int i = 0; i < segments; i++ )\n+      while (fetchNextEntityId())\n+      {\n+        if (client.acceptNode(next, (Value[]) null))\n         {\n-            MatchingDocs matchingDoc = matchingDocs.get( i );\n-            contexts[i] = matchingDoc.context;\n+          return true;\n         }\n-        return contexts;\n+      }\n+      return false;\n     }\n \n-    private void replayTo( Collector collector ) throws IOException\n+    @Override\n+    public void close()\n     {\n-        for ( MatchingDocs docs : getMatchingDocs() )\n-        {\n-            LeafCollector leafCollector = collector.getLeafCollector( docs.context );\n-            Scorer scorer;\n-            DocIdSetIterator idIterator = docs.docIdSet.iterator();\n-            if ( isKeepScores() )\n-            {\n-                scorer = new ReplayingScorer( docs.scores );\n-            }\n-            else\n-            {\n-                scorer = new ConstantScoreScorer( null, Float.NaN, idIterator );\n-            }\n-            leafCollector.setScorer( scorer );\n-            int doc;\n-            while ( (doc = idIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS )\n-            {\n-                leafCollector.collect( doc );\n-            }\n-        }\n+      // nothing to close\n     }\n+  }\n+\n+  /**\n+   * Holds the documents that were matched per segment.\n+   */\n+  static final class MatchingDocs\n+  {\n \n     /**\n-     * Iterates over all per-segment {@link DocValuesCollector.MatchingDocs}.\n-     * Provides base functionality for extracting entity ids and other values from documents.\n+     * The {@code LeafReaderContext} for this segment.\n      */\n-    private abstract static class LongValuesSource\n-    {\n-        private final Iterator<DocValuesCollector.MatchingDocs> matchingDocs;\n-        private final String field;\n-        final int totalHits;\n-        final Map<String,NumericDocValues> docValuesCache;\n+    public final LeafReaderContext context;\n \n-        DocIdSetIterator currentIdIterator;\n-        NumericDocValues currentDocValues;\n-        DocValuesCollector.MatchingDocs currentDocs;\n-        int index;\n-        long next;\n-\n-        LongValuesSource( Iterable<DocValuesCollector.MatchingDocs> allMatchingDocs, int totalHits, String field )\n-        {\n-            this.totalHits = totalHits;\n-            this.field = field;\n-            matchingDocs = allMatchingDocs.iterator();\n-            docValuesCache = new HashMap<>();\n-        }\n+    /**\n+     * Which documents were seen.\n+     */\n+    public final DocIdSet docIdSet;\n \n-        /**\n-         * @return true if it was able to make sure, that currentDisi is valid\n-         */\n-        boolean ensureValidDisi()\n-        {\n-            try\n-            {\n-                while ( currentIdIterator == null )\n-                {\n-                    if ( matchingDocs.hasNext() )\n-                    {\n-                        currentDocs = matchingDocs.next();\n-                        currentIdIterator = currentDocs.docIdSet.iterator();\n-                        if ( currentIdIterator != null )\n-                        {\n-                            docValuesCache.clear();\n-                            currentDocValues = currentDocs.readDocValues( field );\n-                        }\n-                    }\n-                    else\n-                    {\n-                        return false;\n-                    }\n-                }\n-                return true;\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new RuntimeException( e );\n-            }\n-        }\n+    /**\n+     * Non-sparse scores array. Might be null of no scores were required.\n+     */\n+    public final float[] scores;\n \n-        boolean fetchNextEntityId()\n-        {\n-            try\n-            {\n-                if ( ensureValidDisi() )\n-                {\n-                    int nextDoc = currentIdIterator.nextDoc();\n-                    if ( nextDoc != DocIdSetIterator.NO_MORE_DOCS )\n-                    {\n-                        index++;\n-                        next = currentDocValues.get( nextDoc );\n-                        return true;\n-                    }\n-                    else\n-                    {\n-                        currentIdIterator = null;\n-                        return fetchNextEntityId();\n-                    }\n-                }\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new RuntimeException( e );\n-            }\n+    /**\n+     * Total number of hits\n+     */\n+    public final int totalHits;\n \n-            return false;\n-        }\n+    MatchingDocs(LeafReaderContext context, DocIdSet docIdSet, int totalHits, float[] scores)\n+    {\n+      this.context = context;\n+      this.docIdSet = docIdSet;\n+      this.totalHits = totalHits;\n+      this.scores = scores;\n     }\n \n     /**\n-     * Iterates over all per-segment {@link DocValuesCollector.MatchingDocs}. Supports two kinds of lookups.\n-     * One, iterate over all long values of the given field (constructor argument).\n-     * Two, lookup a value for the current doc in a sidecar {@code NumericDocValues} field.\n-     * That is, this iterator has a main field, that drives the iteration and allow for lookups\n-     * in other, secondary fields based on the current document of the main iteration.\n-     *\n-     * Lookups from this class are not thread-safe. Races can happen when the segment barrier\n-     * is crossed; one thread might think it is reading from one segment while another thread has\n-     * already advanced this Iterator to the next segment, having raced the first thread.\n+     * @return the {@code NumericDocValues} for a given field\n+     * @throws IllegalArgumentException if this field is not indexed with numeric doc values\n      */\n-    public static class LongValuesIterator extends LongValuesSource implements ValuesIterator, PrimitiveLongResourceIterator\n+    public NumericDocValues readDocValues(String field)\n     {\n-        private boolean hasNext;\n-        private boolean hasNextDecided;\n-\n-        /**\n-         * @param allMatchingDocs all {@link DocValuesCollector.MatchingDocs} across all segments\n-         * @param totalHits the total number of hits across all segments\n-         * @param field the main field, whose values drive the iteration\n-         */\n-        public LongValuesIterator( Iterable<DocValuesCollector.MatchingDocs> allMatchingDocs, int totalHits, String field )\n-        {\n-            super( allMatchingDocs, totalHits, field );\n-        }\n-\n-        @Override\n-        public long current()\n-        {\n-            return next;\n-        }\n-\n-        @Override\n-        public float currentScore()\n-        {\n-            return 0;\n-        }\n-\n-        @Override\n-        public long getValue( String field )\n-        {\n-            if ( ensureValidDisi() )\n-            {\n-                if ( docValuesCache.containsKey( field ) )\n-                {\n-                    return docValuesCache.get( field ).get( currentIdIterator.docID() );\n-                }\n-\n-                NumericDocValues docValues = currentDocs.readDocValues( field );\n-                docValuesCache.put( field, docValues );\n-\n-                return docValues.get( currentIdIterator.docID() );\n-            }\n-            else\n-            {\n-                // same as DocValues.emptyNumeric()#get\n-                // which means, getValue carries over the semantics of NDV\n-                // -1 would also be a possibility here.\n-                return 0;\n-            }\n-        }\n-\n-        @Override\n-        public boolean hasNext()\n-        {\n-            if ( !hasNextDecided )\n-            {\n-                hasNext = fetchNextEntityId();\n-                hasNextDecided = true;\n-            }\n-            return hasNext;\n-        }\n-\n-        @Override\n-        public long next()\n-        {\n-            if ( !hasNext() )\n-            {\n-                throw new NoSuchElementException();\n-            }\n-            hasNextDecided = false;\n-            return next;\n-        }\n-\n-        @Override\n-        public int remaining()\n-        {\n-            return totalHits - index;\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            // nothing to close\n-        }\n+      try\n+      {\n+        NumericDocValues dv = context.reader().getNumericDocValues(field);\n+        if (dv == null)\n+        {\n+          FieldInfo fi = context.reader().getFieldInfos().fieldInfo(field);\n+          DocValuesType actual = null;\n+          if (fi != null)\n+          {\n+            actual = fi.getDocValuesType();\n+          }\n+          throw new IllegalStateException(\n+              \"The field '\" + field + \"' is not indexed properly, expected NumericDV, but got '\" +\n+                  actual + \"'\");\n+        }\n+        return dv;\n+      } catch (IOException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n     }\n+  }\n \n-    private static class LongValuesIndexProgressor extends LongValuesSource implements IndexProgressor\n-    {\n-        private final NodeValueClient client;\n+  /**\n+   * Used during collection to record matching docs and then return a\n+   * {@see DocIdSet} that contains them.\n+   */\n+  private static final class Docs\n+  {\n+    private final DocIdSetBuilder bits;\n \n-        LongValuesIndexProgressor( Iterable<MatchingDocs> allMatchingDocs, int totalHits, String field, NodeValueClient client )\n-        {\n-            super( allMatchingDocs, totalHits, field );\n-            this.client = client;\n-        }\n-\n-        @Override\n-        public boolean next()\n-        {\n-            while ( fetchNextEntityId() )\n-            {\n-                if ( client.acceptNode( next, (Value[]) null ) )\n-                {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            // nothing to close\n-        }\n+    Docs(int maxDoc)\n+    {\n+      bits = new DocIdSetBuilder(maxDoc);\n     }\n \n     /**\n-     * Holds the documents that were matched per segment.\n+     * Record the given document.\n      */\n-    static final class MatchingDocs\n+    public void addDoc(int docId)\n     {\n-\n-        /** The {@code LeafReaderContext} for this segment. */\n-        public final LeafReaderContext context;\n-\n-        /** Which documents were seen. */\n-        public final DocIdSet docIdSet;\n-\n-        /** Non-sparse scores array. Might be null of no scores were required. */\n-        public final float[] scores;\n-\n-        /** Total number of hits */\n-        public final int totalHits;\n-\n-        MatchingDocs( LeafReaderContext context, DocIdSet docIdSet, int totalHits, float[] scores )\n-        {\n-            this.context = context;\n-            this.docIdSet = docIdSet;\n-            this.totalHits = totalHits;\n-            this.scores = scores;\n-        }\n-\n-        /**\n-         * @return the {@code NumericDocValues} for a given field\n-         * @throws IllegalArgumentException if this field is not indexed with numeric doc values\n-         */\n-        public NumericDocValues readDocValues( String field )\n-        {\n-            try\n-            {\n-                NumericDocValues dv = context.reader().getNumericDocValues( field );\n-                if ( dv == null )\n-                {\n-                    FieldInfo fi = context.reader().getFieldInfos().fieldInfo( field );\n-                    DocValuesType actual = null;\n-                    if ( fi != null )\n-                    {\n-                        actual = fi.getDocValuesType();\n-                    }\n-                    throw new IllegalStateException(\n-                            \"The field '\" + field + \"' is not indexed properly, expected NumericDV, but got '\" +\n-                            actual + \"'\" );\n-                }\n-                return dv;\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new RuntimeException( e );\n-            }\n-        }\n+      bits.add(docId);\n     }\n \n     /**\n-     * Used during collection to record matching docs and then return a\n-     * {@see DocIdSet} that contains them.\n+     * Return the {@see DocIdSet} which contains all the recorded docs.\n      */\n-    private static final class Docs\n+    public DocIdSet getDocIdSet()\n     {\n-        private final DocIdSetBuilder bits;\n+      return bits.build();\n+    }\n+  }\n \n-        Docs( int maxDoc )\n-        {\n-            bits = new DocIdSetBuilder( maxDoc );\n-        }\n+  private static class ReplayingScorer extends Scorer\n+  {\n \n-        /** Record the given document. */\n-        public void addDoc( int docId )\n-        {\n-            bits.add( docId );\n-        }\n+    private final float[] scores;\n+    private int index;\n \n-        /** Return the {@see DocIdSet} which contains all the recorded docs. */\n-        public DocIdSet getDocIdSet()\n-        {\n-            return bits.build();\n-        }\n+    ReplayingScorer(float[] scores)\n+    {\n+      super(null);\n+      this.scores = scores;\n     }\n \n-    private static class ReplayingScorer extends Scorer\n+    @Override\n+    public float score()\n     {\n+      if (index < scores.length)\n+      {\n+        return scores[index++];\n+      }\n+      return Float.NaN;\n+    }\n \n-        private final float[] scores;\n-        private int index;\n+    @Override\n+    public int freq()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        ReplayingScorer( float[] scores )\n-        {\n-            super( null );\n-            this.scores = scores;\n-        }\n+    @Override\n+    public DocIdSetIterator iterator()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public float score()\n-        {\n-            if ( index < scores.length )\n-            {\n-                return scores[index++];\n-            }\n-            return Float.NaN;\n-        }\n+    @Override\n+    public int docID()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public int freq()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+  }\n \n-        @Override\n-        public DocIdSetIterator iterator()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+  private static final class DocsInIndexOrderIterator extends AbstractIndexHits<Document>\n+  {\n+    private final Iterator<MatchingDocs> docs;\n+    private final int size;\n+    private final boolean keepScores;\n+    private DocIdSetIterator currentIdIterator;\n+    private Scorer currentScorer;\n+    private LeafReader currentReader;\n \n-        @Override\n-        public int docID()\n-        {\n-            throw new UnsupportedOperationException();\n-        }\n+    private DocsInIndexOrderIterator(List<MatchingDocs> docs, int size, boolean keepScores)\n+    {\n+      this.size = size;\n+      this.keepScores = keepScores;\n+      this.docs = docs.iterator();\n+    }\n \n+    @Override\n+    public int size()\n+    {\n+      return size;\n     }\n \n-    private static final class DocsInIndexOrderIterator extends AbstractIndexHits<Document>\n+    @Override\n+    public float currentScore()\n     {\n-        private final Iterator<MatchingDocs> docs;\n-        private final int size;\n-        private final boolean keepScores;\n-        private DocIdSetIterator currentIdIterator;\n-        private Scorer currentScorer;\n-        private LeafReader currentReader;\n+      try\n+      {\n+        return currentScorer.score();\n+      } catch (IOException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n+    }\n \n-        private DocsInIndexOrderIterator( List<MatchingDocs> docs, int size, boolean keepScores )\n-        {\n-            this.size = size;\n-            this.keepScores = keepScores;\n-            this.docs = docs.iterator();\n-        }\n+    @Override\n+    protected Document fetchNextOrNull()\n+    {\n+      if (ensureValidDisi())\n+      {\n+        try\n+        {\n+          int doc = currentIdIterator.nextDoc();\n+          if (doc == DocIdSetIterator.NO_MORE_DOCS)\n+          {\n+            currentIdIterator = null;\n+            currentScorer = null;\n+            currentReader = null;\n+            return fetchNextOrNull();\n+          }\n+          return currentReader.document(doc);\n+        } catch (IOException e)\n+        {\n+          throw new RuntimeException(e);\n+        }\n+      } else\n+      {\n+        return null;\n+      }\n+    }\n \n-        @Override\n-        public int size()\n-        {\n-            return size;\n-        }\n+    private boolean ensureValidDisi()\n+    {\n+      while (currentIdIterator == null && docs.hasNext())\n+      {\n+        MatchingDocs matchingDocs = docs.next();\n+        try\n+        {\n+          currentIdIterator = matchingDocs.docIdSet.iterator();\n+          if (keepScores)\n+          {\n+            currentScorer = new ReplayingScorer(matchingDocs.scores);\n+          } else\n+          {\n+            currentScorer = new ConstantScoreScorer(null, Float.NaN, currentIdIterator);\n+          }\n+          currentReader = matchingDocs.context.reader();\n+        } catch (IOException e)\n+        {\n+          throw new RuntimeException(e);\n+        }\n+      }\n+      return currentIdIterator != null;\n+    }\n+  }\n \n-        @Override\n-        public float currentScore()\n-        {\n-            try\n-            {\n-                return currentScorer.score();\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new RuntimeException( e );\n-            }\n-        }\n+  private abstract static class ScoreDocsIterator extends PrefetchingIterator<ScoreDoc>\n+  {\n+    private final Iterator<ScoreDoc> iterator;\n+    private final int[] docStarts;\n+    private final LeafReaderContext[] contexts;\n+    protected ScoreDoc currentDoc;\n \n-        @Override\n-        protected Document fetchNextOrNull()\n-        {\n-            if ( ensureValidDisi() )\n-            {\n-                try\n-                {\n-                    int doc = currentIdIterator.nextDoc();\n-                    if ( doc == DocIdSetIterator.NO_MORE_DOCS )\n-                    {\n-                        currentIdIterator = null;\n-                        currentScorer = null;\n-                        currentReader = null;\n-                        return fetchNextOrNull();\n-                    }\n-                    return currentReader.document( doc );\n-                }\n-                catch ( IOException e )\n-                {\n-                    throw new RuntimeException( e );\n-                }\n-            }\n-            else\n-            {\n-                return null;\n-            }\n-        }\n+    private ScoreDocsIterator(TopDocs docs, LeafReaderContext[] contexts)\n+    {\n+      this.contexts = contexts;\n+      this.iterator = new ArrayIterator<>(docs.scoreDocs);\n+      int segments = contexts.length;\n+      docStarts = new int[segments + 1];\n+      for (int i = 0; i < segments; i++)\n+      {\n+        LeafReaderContext context = contexts[i];\n+        docStarts[i] = context.docBase;\n+      }\n+      LeafReaderContext lastContext = contexts[segments - 1];\n+      docStarts[segments] = lastContext.docBase + lastContext.reader().maxDoc();\n+    }\n \n-        private boolean ensureValidDisi()\n-        {\n-            while ( currentIdIterator == null && docs.hasNext() )\n-            {\n-                MatchingDocs matchingDocs = docs.next();\n-                try\n-                {\n-                    currentIdIterator = matchingDocs.docIdSet.iterator();\n-                    if ( keepScores )\n-                    {\n-                        currentScorer = new ReplayingScorer( matchingDocs.scores );\n-                    }\n-                    else\n-                    {\n-                        currentScorer = new ConstantScoreScorer( null, Float.NaN, currentIdIterator );\n-                    }\n-                    currentReader = matchingDocs.context.reader();\n-                }\n-                catch ( IOException e )\n-                {\n-                    throw new RuntimeException( e );\n-                }\n-            }\n-            return currentIdIterator != null;\n-        }\n+    public ScoreDoc getCurrentDoc()\n+    {\n+      return currentDoc;\n     }\n \n-    private abstract static class ScoreDocsIterator extends PrefetchingIterator<ScoreDoc>\n+    @Override\n+    protected ScoreDoc fetchNextOrNull()\n     {\n-        private final Iterator<ScoreDoc> iterator;\n-        private final int[] docStarts;\n-        private final LeafReaderContext[] contexts;\n-        protected ScoreDoc currentDoc;\n+      if (!iterator.hasNext())\n+      {\n+        return null;\n+      }\n+      currentDoc = iterator.next();\n+      int subIndex = ReaderUtil.subIndex(currentDoc.doc, docStarts);\n+      LeafReaderContext context = contexts[subIndex];\n+      onNextDoc(currentDoc.doc - context.docBase, context);\n+      return currentDoc;\n+    }\n \n-        private ScoreDocsIterator( TopDocs docs, LeafReaderContext[] contexts )\n-        {\n-            this.contexts = contexts;\n-            this.iterator = new ArrayIterator<>( docs.scoreDocs );\n-            int segments = contexts.length;\n-            docStarts = new int[segments + 1];\n-            for ( int i = 0; i < segments; i++ )\n-            {\n-                LeafReaderContext context = contexts[i];\n-                docStarts[i] = context.docBase;\n-            }\n-            LeafReaderContext lastContext = contexts[segments - 1];\n-            docStarts[segments] = lastContext.docBase + lastContext.reader().maxDoc();\n-        }\n+    protected abstract void onNextDoc(int localDocID, LeafReaderContext context);\n+  }\n \n-        public ScoreDoc getCurrentDoc()\n-        {\n-            return currentDoc;\n-        }\n+  private static final class TopDocsIterator extends AbstractIndexHits<Document>\n+  {\n+    private final int size;\n+    private final ScoreDocsIterator scoreDocs;\n+    private Document currentDoc;\n \n+    private TopDocsIterator(TopDocs docs, LeafReaderContext[] contexts)\n+    {\n+      scoreDocs = new ScoreDocsIterator(docs, contexts)\n+      {\n         @Override\n-        protected ScoreDoc fetchNextOrNull()\n+        protected void onNextDoc(int localDocID, LeafReaderContext context)\n         {\n-            if ( !iterator.hasNext() )\n-            {\n-                return null;\n-            }\n-            currentDoc = iterator.next();\n-            int subIndex = ReaderUtil.subIndex( currentDoc.doc, docStarts );\n-            LeafReaderContext context = contexts[subIndex];\n-            onNextDoc( currentDoc.doc - context.docBase, context );\n-            return currentDoc;\n+          updateCurrentDocument(localDocID, context.reader());\n         }\n-\n-        protected abstract void onNextDoc( int localDocID, LeafReaderContext context );\n+      };\n+      this.size = docs.scoreDocs.length;\n     }\n \n-    private static final class TopDocsIterator extends AbstractIndexHits<Document>\n+    @Override\n+    public int size()\n     {\n-        private final int size;\n-        private final ScoreDocsIterator scoreDocs;\n-        private Document currentDoc;\n-\n-        private TopDocsIterator( TopDocs docs, LeafReaderContext[] contexts )\n-        {\n-            scoreDocs = new ScoreDocsIterator( docs, contexts )\n-            {\n-                @Override\n-                protected void onNextDoc( int localDocID, LeafReaderContext context )\n-                {\n-                    updateCurrentDocument( localDocID, context.reader() );\n-                }\n-            };\n-            this.size = docs.scoreDocs.length;\n-        }\n+      return size;\n+    }\n \n-        @Override\n-        public int size()\n-        {\n-            return size;\n-        }\n+    @Override\n+    public float currentScore()\n+    {\n+      return scoreDocs.getCurrentDoc().score;\n+    }\n \n-        @Override\n-        public float currentScore()\n-        {\n-            return scoreDocs.getCurrentDoc().score;\n-        }\n+    @Override\n+    protected Document fetchNextOrNull()\n+    {\n+      if (!scoreDocs.hasNext())\n+      {\n+        return null;\n+      }\n+      scoreDocs.next();\n+      return currentDoc;\n+    }\n \n+    private void updateCurrentDocument(int docID, LeafReader reader)\n+    {\n+      try\n+      {\n+        currentDoc = reader.document(docID);\n+      } catch (IOException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+  }\n+\n+  private static final class TopDocsValuesIterator extends ValuesIterator.Adapter\n+  {\n+    private final ScoreDocsIterator scoreDocs;\n+    private final String field;\n+    private final Map<LeafReaderContext, NumericDocValues> docValuesCache;\n+    private final Map<String, NumericDocValues> readerCache;\n+    private long currentValue;\n+    private LeafReaderContext currentContext;\n+    private int currentDocID;\n+\n+    TopDocsValuesIterator(TopDocs docs, LeafReaderContext[] contexts, String field)\n+    {\n+      super(docs.totalHits);\n+      this.field = field;\n+      docValuesCache = new HashMap<>(contexts.length);\n+      readerCache = new HashMap<>();\n+      scoreDocs = new ScoreDocsIterator(docs, contexts)\n+      {\n         @Override\n-        protected Document fetchNextOrNull()\n+        protected void onNextDoc(int localDocID, LeafReaderContext context)\n         {\n-            if ( !scoreDocs.hasNext() )\n-            {\n-                return null;\n-            }\n-            scoreDocs.next();\n-            return currentDoc;\n-        }\n-\n-        private void updateCurrentDocument( int docID, LeafReader reader )\n-        {\n-            try\n-            {\n-                currentDoc = reader.document( docID );\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new RuntimeException( e );\n-            }\n+          readerCache.clear();\n+          currentContext = context;\n+          currentDocID = localDocID;\n+          loadNextValue(context, localDocID);\n         }\n+      };\n     }\n \n-    private static final class TopDocsValuesIterator extends ValuesIterator.Adapter\n+    @Override\n+    protected boolean fetchNext()\n     {\n-        private final ScoreDocsIterator scoreDocs;\n-        private final String field;\n-        private final Map<LeafReaderContext,NumericDocValues> docValuesCache;\n-        private final Map<String,NumericDocValues> readerCache;\n-        private long currentValue;\n-        private LeafReaderContext currentContext;\n-        private int currentDocID;\n-\n-        TopDocsValuesIterator( TopDocs docs, LeafReaderContext[] contexts, String field )\n-        {\n-            super( docs.totalHits );\n-            this.field = field;\n-            docValuesCache = new HashMap<>( contexts.length );\n-            readerCache = new HashMap<>();\n-            scoreDocs = new ScoreDocsIterator( docs, contexts )\n-            {\n-                @Override\n-                protected void onNextDoc( int localDocID, LeafReaderContext context )\n-                {\n-                    readerCache.clear();\n-                    currentContext = context;\n-                    currentDocID = localDocID;\n-                    loadNextValue( context, localDocID );\n-                }\n-            };\n-        }\n-\n-        @Override\n-        protected boolean fetchNext()\n-        {\n-            if ( scoreDocs.hasNext() )\n-            {\n-                scoreDocs.next();\n-                index++;\n-                return currentValue != -1 && next( currentValue );\n-            }\n-            return false;\n-        }\n+      if (scoreDocs.hasNext())\n+      {\n+        scoreDocs.next();\n+        index++;\n+        return currentValue != -1 && next(currentValue);\n+      }\n+      return false;\n+    }\n \n-        @Override\n-        public long current()\n-        {\n-            return index;\n-        }\n+    @Override\n+    public long current()\n+    {\n+      return index;\n+    }\n \n-        @Override\n-        public float currentScore()\n-        {\n-            return scoreDocs.getCurrentDoc().score;\n-        }\n+    @Override\n+    public float currentScore()\n+    {\n+      return scoreDocs.getCurrentDoc().score;\n+    }\n \n-        @Override\n-        public long getValue( String field )\n-        {\n-            NumericDocValues fieldValues = readerCache.computeIfAbsent( field, this::getDocValues );\n-            return fieldValues.get( currentDocID );\n-        }\n+    @Override\n+    public long getValue(String field)\n+    {\n+      NumericDocValues fieldValues = readerCache.computeIfAbsent(field, this::getDocValues);\n+      return fieldValues.get(currentDocID);\n+    }\n \n-        private NumericDocValues getDocValues( String field )\n-        {\n-            try\n-            {\n-                return currentContext.reader().getNumericDocValues( field );\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new RuntimeException( \"Fail to read numeric doc values field \" + field + \" from the document.\", e );\n-            }\n-        }\n+    private NumericDocValues getDocValues(String field)\n+    {\n+      try\n+      {\n+        return currentContext.reader().getNumericDocValues(field);\n+      } catch (IOException e)\n+      {\n+        throw new RuntimeException(\"Fail to read numeric doc values field \" + field + \" from the document.\", e);\n+      }\n+    }\n \n-        private void loadNextValue( LeafReaderContext context, int docID )\n-        {\n-            NumericDocValues docValues;\n-            if ( docValuesCache.containsKey( context ) )\n-            {\n-                docValues = docValuesCache.get( context );\n-            }\n-            else\n-            {\n-                try\n-                {\n-                    docValues = context.reader().getNumericDocValues( field );\n-                    docValuesCache.put( context, docValues );\n-                }\n-                catch ( IOException e )\n-                {\n-                    throw new RuntimeException( e );\n-                }\n-            }\n-            if ( docValues != null )\n-            {\n-                currentValue = docValues.get( docID );\n-            }\n-            else\n-            {\n-                currentValue = -1;\n-            }\n-        }\n+    private void loadNextValue(LeafReaderContext context, int docID)\n+    {\n+      NumericDocValues docValues;\n+      if (docValuesCache.containsKey(context))\n+      {\n+        docValues = docValuesCache.get(context);\n+      } else\n+      {\n+        try\n+        {\n+          docValues = context.reader().getNumericDocValues(field);\n+          docValuesCache.put(context, docValues);\n+        } catch (IOException e)\n+        {\n+          throw new RuntimeException(e);\n+        }\n+      }\n+      if (docValues != null)\n+      {\n+        currentValue = docValues.get(docID);\n+      } else\n+      {\n+        currentValue = -1;\n+      }\n     }\n+  }\n }\n",
            "diff_size": 1164
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/675/DocValuesCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/675/DocValuesCollector.java\nindex a3c463fab48..7950cd87055 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/675/DocValuesCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/675/DocValuesCollector.java\n@@ -127,7 +127,8 @@ public class DocValuesCollector extends SimpleCollector\n         {\n             return ValuesIterator.EMPTY;\n         }\n-        TopDocs topDocs = getTopDocs( sort, size );\n+\n+TopDocs topDocs = getTopDocs( sort, size );\n         LeafReaderContext[] contexts = getLeafReaderContexts( getMatchingDocs() );\n         return new TopDocsValuesIterator( topDocs, contexts, field );\n     }\n@@ -187,7 +188,8 @@ public class DocValuesCollector extends SimpleCollector\n                 System.arraycopy( scores, 0, newScores, 0, segmentHits );\n                 scores = newScores;\n             }\n-            scores[segmentHits] = scorer.score();\n+\n+scores[segmentHits] = scorer.score();\n         }\n         segmentHits++;\n         totalHits++;\n@@ -219,7 +221,8 @@ public class DocValuesCollector extends SimpleCollector\n             int initialSize = Math.min( 32, maxDoc );\n             scores = new float[initialSize];\n         }\n-        segmentHits = 0;\n+\n+segmentHits = 0;\n         this.context = context;\n     }\n \n@@ -281,7 +284,8 @@ public class DocValuesCollector extends SimpleCollector\n             replayTo( collector );\n             topDocs = collector.topDocs();\n         }\n-        return topDocs;\n+\n+return topDocs;\n     }\n \n     private static LeafReaderContext[] getLeafReaderContexts( List<MatchingDocs> matchingDocs )\n@@ -293,7 +297,8 @@ public class DocValuesCollector extends SimpleCollector\n             MatchingDocs matchingDoc = matchingDocs.get( i );\n             contexts[i] = matchingDoc.context;\n         }\n-        return contexts;\n+\n+return contexts;\n     }\n \n     private void replayTo( Collector collector ) throws IOException\n@@ -456,8 +461,7 @@ public class DocValuesCollector extends SimpleCollector\n \n                 NumericDocValues docValues = currentDocs.readDocValues( field );\n                 docValuesCache.put( field, docValues );\n-\n-                return docValues.get( currentIdIterator.docID() );\n+return docValues.get( currentIdIterator.docID() );\n             }\n             else\n             {\n@@ -476,7 +480,8 @@ public class DocValuesCollector extends SimpleCollector\n                 hasNext = fetchNextEntityId();\n                 hasNextDecided = true;\n             }\n-            return hasNext;\n+\n+return hasNext;\n         }\n \n         @Override\n@@ -486,7 +491,8 @@ public class DocValuesCollector extends SimpleCollector\n             {\n                 throw new NoSuchElementException();\n             }\n-            hasNextDecided = false;\n+\n+hasNextDecided = false;\n             return next;\n         }\n \n@@ -539,7 +545,7 @@ public class DocValuesCollector extends SimpleCollector\n     static final class MatchingDocs\n     {\n \n-        /** The {@code LeafReaderContext} for this segment. */\n+/** The {@code LeafReaderContext} for this segment. */\n         public final LeafReaderContext context;\n \n         /** Which documents were seen. */\n@@ -576,11 +582,10 @@ public class DocValuesCollector extends SimpleCollector\n                     {\n                         actual = fi.getDocValuesType();\n                     }\n-                    throw new IllegalStateException(\n-                            \"The field '\" + field + \"' is not indexed properly, expected NumericDV, but got '\" +\n-                            actual + \"'\" );\n+                    throw new IllegalStateException( \"The field '\" + field + \"' is not indexed properly, expected NumericDV, but got '\" + actual + \"'\" );\n                 }\n-                return dv;\n+\n+return dv;\n             }\n             catch ( IOException e )\n             {\n@@ -617,8 +622,7 @@ public class DocValuesCollector extends SimpleCollector\n \n     private static class ReplayingScorer extends Scorer\n     {\n-\n-        private final float[] scores;\n+    private final float[] scores;\n         private int index;\n \n         ReplayingScorer( float[] scores )\n@@ -634,7 +638,8 @@ public class DocValuesCollector extends SimpleCollector\n             {\n                 return scores[index++];\n             }\n-            return Float.NaN;\n+\n+return Float.NaN;\n         }\n \n         @Override\n@@ -654,7 +659,6 @@ public class DocValuesCollector extends SimpleCollector\n         {\n             throw new UnsupportedOperationException();\n         }\n-\n     }\n \n     private static final class DocsInIndexOrderIterator extends AbstractIndexHits<Document>\n@@ -707,7 +711,8 @@ public class DocValuesCollector extends SimpleCollector\n                         currentReader = null;\n                         return fetchNextOrNull();\n                     }\n-                    return currentReader.document( doc );\n+\n+return currentReader.document( doc );\n                 }\n                 catch ( IOException e )\n                 {\n@@ -736,7 +741,8 @@ public class DocValuesCollector extends SimpleCollector\n                     {\n                         currentScorer = new ConstantScoreScorer( null, Float.NaN, currentIdIterator );\n                     }\n-                    currentReader = matchingDocs.context.reader();\n+\n+currentReader = matchingDocs.context.reader();\n                 }\n                 catch ( IOException e )\n                 {\n@@ -765,7 +771,8 @@ public class DocValuesCollector extends SimpleCollector\n                 LeafReaderContext context = contexts[i];\n                 docStarts[i] = context.docBase;\n             }\n-            LeafReaderContext lastContext = contexts[segments - 1];\n+\n+LeafReaderContext lastContext = contexts[segments - 1];\n             docStarts[segments] = lastContext.docBase + lastContext.reader().maxDoc();\n         }\n \n@@ -781,7 +788,8 @@ public class DocValuesCollector extends SimpleCollector\n             {\n                 return null;\n             }\n-            currentDoc = iterator.next();\n+\n+currentDoc = iterator.next();\n             int subIndex = ReaderUtil.subIndex( currentDoc.doc, docStarts );\n             LeafReaderContext context = contexts[subIndex];\n             onNextDoc( currentDoc.doc - context.docBase, context );\n@@ -870,7 +878,8 @@ public class DocValuesCollector extends SimpleCollector\n                     readerCache.clear();\n                     currentContext = context;\n                     currentDocID = localDocID;\n-                    loadNextValue( context, localDocID );\n+\n+loadNextValue( context, localDocID );\n                 }\n             };\n         }\n@@ -947,4 +956,4 @@ public class DocValuesCollector extends SimpleCollector\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "123",
                    "column": "26",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "157",
                    "column": "26",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "220",
                    "column": "26",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "243",
                    "column": "26",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "265",
                    "column": "28",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "316",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "333",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "333",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "17",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "544",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "544",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "75",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "759",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "759",
                    "column": "45",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "759",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "43",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/675/DocValuesCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/675/DocValuesCollector.java\nindex a3c463fab48..9c9cf45f57b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/675/DocValuesCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/675/DocValuesCollector.java\n@@ -40,7 +40,6 @@ import org.apache.lucene.search.TopFieldCollector;\n import org.apache.lucene.search.TopScoreDocCollector;\n import org.apache.lucene.util.ArrayUtil;\n import org.apache.lucene.util.DocIdSetBuilder;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -49,7 +48,6 @@ import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n-\n import org.neo4j.collection.primitive.PrimitiveLongResourceIterator;\n import org.neo4j.graphdb.index.IndexHits;\n import org.neo4j.helpers.collection.ArrayIterator;\n@@ -67,10 +65,10 @@ import org.neo4j.values.storable.Value;\n  * and feeding other collectors while this collector focuses on exposing the required per-segment data structures\n  * to the user.\n  */\n+\n public class DocValuesCollector extends SimpleCollector\n {\n     private static final EmptyIndexHits<Document> EMPTY_INDEX_HITS = new EmptyIndexHits<>();\n-\n     private LeafReaderContext context;\n     private int segmentHits;\n     private int totalHits;\n@@ -83,14 +81,16 @@ public class DocValuesCollector extends SimpleCollector\n     /**\n      * Default Constructor, does not keep scores.\n      */\n+\n     public DocValuesCollector()\n     {\n-        this( false );\n+        this ( false );\n     }\n \n     /**\n      * @param keepScores true if you want to trade correctness for speed\n      */\n+\n     public DocValuesCollector( boolean keepScores )\n     {\n         this.keepScores = keepScores;\n@@ -100,6 +100,7 @@ public class DocValuesCollector extends SimpleCollector\n      * @param field the field that contains the values\n      * @return an iterator over all NumericDocValues from the given field\n      */\n+\n     public LongValuesIterator getValuesIterator( String field )\n     {\n         return new LongValuesIterator( getMatchingDocs(), getTotalHits(), field );\n@@ -116,17 +117,20 @@ public class DocValuesCollector extends SimpleCollector\n      * @return an iterator over all NumericDocValues from the given field with respect to the given sort\n      * @throws IOException\n      */\n+\n     public ValuesIterator getSortedValuesIterator( String field, Sort sort ) throws IOException\n     {\n-        if ( sort == null || sort == Sort.INDEXORDER )\n+        if ( sort == null|| sort == Sort.INDEXORDER )\n         {\n             return getValuesIterator( field );\n         }\n+\n         int size = getTotalHits();\n         if ( size == 0 )\n         {\n             return ValuesIterator.EMPTY;\n         }\n+\n         TopDocs topDocs = getTopDocs( sort, size );\n         LeafReaderContext[] contexts = getLeafReaderContexts( getMatchingDocs() );\n         return new TopDocsValuesIterator( topDocs, contexts, field );\n@@ -140,6 +144,7 @@ public class DocValuesCollector extends SimpleCollector\n      * @return an indexhits iterator over all matches\n      * @throws IOException\n      */\n+\n     public IndexHits<Document> getIndexHits( Sort sort ) throws IOException\n     {\n         List<MatchingDocs> matchingDocs = getMatchingDocs();\n@@ -149,7 +154,7 @@ public class DocValuesCollector extends SimpleCollector\n             return EMPTY_INDEX_HITS;\n         }\n \n-        if ( sort == null || sort == Sort.INDEXORDER )\n+        if ( sort == null|| sort == Sort.INDEXORDER )\n         {\n             return new DocsInIndexOrderIterator( matchingDocs, size, isKeepScores() );\n         }\n@@ -162,6 +167,7 @@ public class DocValuesCollector extends SimpleCollector\n     /**\n      * @return the total number of hits across all segments.\n      */\n+\n     public int getTotalHits()\n     {\n         return totalHits;\n@@ -170,6 +176,7 @@ public class DocValuesCollector extends SimpleCollector\n     /**\n      * @return true if scores were saved.\n      */\n+\n     public boolean isKeepScores()\n     {\n         return keepScores;\n@@ -187,8 +194,10 @@ public class DocValuesCollector extends SimpleCollector\n                 System.arraycopy( scores, 0, newScores, 0, segmentHits );\n                 scores = newScores;\n             }\n+\n             scores[segmentHits] = scorer.score();\n         }\n+\n         segmentHits++;\n         totalHits++;\n     }\n@@ -208,10 +217,11 @@ public class DocValuesCollector extends SimpleCollector\n     @Override\n     public void doSetNextReader( LeafReaderContext context )\n     {\n-        if ( docs != null && segmentHits > 0 )\n+        if ( docs != null&& segmentHits > 0 )\n         {\n             createMatchingDocs();\n         }\n+\n         int maxDoc = context.reader().maxDoc();\n         docs = createDocs( maxDoc );\n         if ( keepScores )\n@@ -219,6 +229,7 @@ public class DocValuesCollector extends SimpleCollector\n             int initialSize = Math.min( 32, maxDoc );\n             scores = new float[initialSize];\n         }\n+\n         segmentHits = 0;\n         this.context = context;\n     }\n@@ -226,9 +237,10 @@ public class DocValuesCollector extends SimpleCollector\n     /**\n      * @return the documents matched by the query, one {@link MatchingDocs} per visited segment that contains a hit.\n      */\n+\n     public List<MatchingDocs> getMatchingDocs()\n     {\n-        if ( docs != null && segmentHits > 0 )\n+        if ( docs != null&& segmentHits > 0 )\n         {\n             createMatchingDocs();\n             docs = null;\n@@ -242,6 +254,7 @@ public class DocValuesCollector extends SimpleCollector\n     /**\n      * @return a new {@link Docs} to record hits.\n      */\n+\n     private Docs createDocs( final int maxDoc )\n     {\n         return new Docs( maxDoc );\n@@ -249,7 +262,7 @@ public class DocValuesCollector extends SimpleCollector\n \n     private void createMatchingDocs()\n     {\n-        if ( scores == null || scores.length == segmentHits )\n+        if ( scores == null|| scores.length == segmentHits )\n         {\n             matchingDocs.add( new MatchingDocs( this.context, docs.getDocIdSet(), segmentHits, scores ) );\n         }\n@@ -281,6 +294,7 @@ public class DocValuesCollector extends SimpleCollector\n             replayTo( collector );\n             topDocs = collector.topDocs();\n         }\n+\n         return topDocs;\n     }\n \n@@ -293,12 +307,14 @@ public class DocValuesCollector extends SimpleCollector\n             MatchingDocs matchingDoc = matchingDocs.get( i );\n             contexts[i] = matchingDoc.context;\n         }\n+\n         return contexts;\n     }\n \n     private void replayTo( Collector collector ) throws IOException\n     {\n-        for ( MatchingDocs docs : getMatchingDocs() )\n+        for( MatchingDocs docs : getMatchingDocs()\n+        )\n         {\n             LeafCollector leafCollector = collector.getLeafCollector( docs.context );\n             Scorer scorer;\n@@ -311,9 +327,10 @@ public class DocValuesCollector extends SimpleCollector\n             {\n                 scorer = new ConstantScoreScorer( null, Float.NaN, idIterator );\n             }\n+\n             leafCollector.setScorer( scorer );\n             int doc;\n-            while ( (doc = idIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS )\n+            while( ( doc = idIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS)\n             {\n                 leafCollector.collect( doc );\n             }\n@@ -324,6 +341,7 @@ public class DocValuesCollector extends SimpleCollector\n      * Iterates over all per-segment {@link DocValuesCollector.MatchingDocs}.\n      * Provides base functionality for extracting entity ids and other values from documents.\n      */\n+\n     private abstract static class LongValuesSource\n     {\n         private final Iterator<DocValuesCollector.MatchingDocs> matchingDocs;\n@@ -332,7 +350,9 @@ public class DocValuesCollector extends SimpleCollector\n         final Map<String,NumericDocValues> docValuesCache;\n \n         DocIdSetIterator currentIdIterator;\n+\n         NumericDocValues currentDocValues;\n+\n         DocValuesCollector.MatchingDocs currentDocs;\n         int index;\n         long next;\n@@ -348,11 +368,12 @@ public class DocValuesCollector extends SimpleCollector\n         /**\n          * @return true if it was able to make sure, that currentDisi is valid\n          */\n+\n         boolean ensureValidDisi()\n         {\n             try\n             {\n-                while ( currentIdIterator == null )\n+                while( currentIdIterator == null )\n                 {\n                     if ( matchingDocs.hasNext() )\n                     {\n@@ -369,6 +390,7 @@ public class DocValuesCollector extends SimpleCollector\n                         return false;\n                     }\n                 }\n+\n                 return true;\n             }\n             catch ( IOException e )\n@@ -417,6 +439,7 @@ public class DocValuesCollector extends SimpleCollector\n      * is crossed; one thread might think it is reading from one segment while another thread has\n      * already advanced this Iterator to the next segment, having raced the first thread.\n      */\n+\n     public static class LongValuesIterator extends LongValuesSource implements ValuesIterator, PrimitiveLongResourceIterator\n     {\n         private boolean hasNext;\n@@ -427,6 +450,7 @@ public class DocValuesCollector extends SimpleCollector\n          * @param totalHits the total number of hits across all segments\n          * @param field the main field, whose values drive the iteration\n          */\n+\n         public LongValuesIterator( Iterable<DocValuesCollector.MatchingDocs> allMatchingDocs, int totalHits, String field )\n         {\n             super( allMatchingDocs, totalHits, field );\n@@ -456,7 +480,6 @@ public class DocValuesCollector extends SimpleCollector\n \n                 NumericDocValues docValues = currentDocs.readDocValues( field );\n                 docValuesCache.put( field, docValues );\n-\n                 return docValues.get( currentIdIterator.docID() );\n             }\n             else\n@@ -471,21 +494,23 @@ public class DocValuesCollector extends SimpleCollector\n         @Override\n         public boolean hasNext()\n         {\n-            if ( !hasNextDecided )\n+            if ( ! hasNextDecided )\n             {\n                 hasNext = fetchNextEntityId();\n                 hasNextDecided = true;\n             }\n+\n             return hasNext;\n         }\n \n         @Override\n         public long next()\n         {\n-            if ( !hasNext() )\n+            if ( ! hasNext() )\n             {\n                 throw new NoSuchElementException();\n             }\n+\n             hasNextDecided = false;\n             return next;\n         }\n@@ -516,13 +541,14 @@ public class DocValuesCollector extends SimpleCollector\n         @Override\n         public boolean next()\n         {\n-            while ( fetchNextEntityId() )\n+            while( fetchNextEntityId())\n             {\n                 if ( client.acceptNode( next, (Value[]) null ) )\n                 {\n                     return true;\n                 }\n             }\n+\n             return false;\n         }\n \n@@ -536,6 +562,7 @@ public class DocValuesCollector extends SimpleCollector\n     /**\n      * Holds the documents that were matched per segment.\n      */\n+\n     static final class MatchingDocs\n     {\n \n@@ -543,12 +570,15 @@ public class DocValuesCollector extends SimpleCollector\n         public final LeafReaderContext context;\n \n         /** Which documents were seen. */\n+\n         public final DocIdSet docIdSet;\n \n         /** Non-sparse scores array. Might be null of no scores were required. */\n+\n         public final float[] scores;\n \n         /** Total number of hits */\n+\n         public final int totalHits;\n \n         MatchingDocs( LeafReaderContext context, DocIdSet docIdSet, int totalHits, float[] scores )\n@@ -563,6 +593,7 @@ public class DocValuesCollector extends SimpleCollector\n          * @return the {@code NumericDocValues} for a given field\n          * @throws IllegalArgumentException if this field is not indexed with numeric doc values\n          */\n+\n         public NumericDocValues readDocValues( String field )\n         {\n             try\n@@ -576,10 +607,10 @@ public class DocValuesCollector extends SimpleCollector\n                     {\n                         actual = fi.getDocValuesType();\n                     }\n-                    throw new IllegalStateException(\n-                            \"The field '\" + field + \"' is not indexed properly, expected NumericDV, but got '\" +\n-                            actual + \"'\" );\n+\n+                    throw new IllegalStateException( \"The field '\" + field+ \"' is not indexed properly, expected NumericDV, but got '\" + actual + \"'\" );\n                 }\n+\n                 return dv;\n             }\n             catch ( IOException e )\n@@ -593,6 +624,7 @@ public class DocValuesCollector extends SimpleCollector\n      * Used during collection to record matching docs and then return a\n      * {@see DocIdSet} that contains them.\n      */\n+\n     private static final class Docs\n     {\n         private final DocIdSetBuilder bits;\n@@ -603,12 +635,14 @@ public class DocValuesCollector extends SimpleCollector\n         }\n \n         /** Record the given document. */\n+\n         public void addDoc( int docId )\n         {\n             bits.add( docId );\n         }\n \n         /** Return the {@see DocIdSet} which contains all the recorded docs. */\n+\n         public DocIdSet getDocIdSet()\n         {\n             return bits.build();\n@@ -617,7 +651,6 @@ public class DocValuesCollector extends SimpleCollector\n \n     private static class ReplayingScorer extends Scorer\n     {\n-\n         private final float[] scores;\n         private int index;\n \n@@ -632,8 +665,9 @@ public class DocValuesCollector extends SimpleCollector\n         {\n             if ( index < scores.length )\n             {\n-                return scores[index++];\n+                return scores[ index ++];\n             }\n+\n             return Float.NaN;\n         }\n \n@@ -654,7 +688,6 @@ public class DocValuesCollector extends SimpleCollector\n         {\n             throw new UnsupportedOperationException();\n         }\n-\n     }\n \n     private static final class DocsInIndexOrderIterator extends AbstractIndexHits<Document>\n@@ -707,6 +740,7 @@ public class DocValuesCollector extends SimpleCollector\n                         currentReader = null;\n                         return fetchNextOrNull();\n                     }\n+\n                     return currentReader.document( doc );\n                 }\n                 catch ( IOException e )\n@@ -722,7 +756,7 @@ public class DocValuesCollector extends SimpleCollector\n \n         private boolean ensureValidDisi()\n         {\n-            while ( currentIdIterator == null && docs.hasNext() )\n+            while( currentIdIterator == null&& docs.hasNext())\n             {\n                 MatchingDocs matchingDocs = docs.next();\n                 try\n@@ -736,6 +770,7 @@ public class DocValuesCollector extends SimpleCollector\n                     {\n                         currentScorer = new ConstantScoreScorer( null, Float.NaN, currentIdIterator );\n                     }\n+\n                     currentReader = matchingDocs.context.reader();\n                 }\n                 catch ( IOException e )\n@@ -743,6 +778,7 @@ public class DocValuesCollector extends SimpleCollector\n                     throw new RuntimeException( e );\n                 }\n             }\n+\n             return currentIdIterator != null;\n         }\n     }\n@@ -762,10 +798,11 @@ public class DocValuesCollector extends SimpleCollector\n             docStarts = new int[segments + 1];\n             for ( int i = 0; i < segments; i++ )\n             {\n-                LeafReaderContext context = contexts[i];\n+                LeafReaderContext context = contexts[ i];\n                 docStarts[i] = context.docBase;\n             }\n-            LeafReaderContext lastContext = contexts[segments - 1];\n+\n+            LeafReaderContext lastContext = contexts[ segments - 1];\n             docStarts[segments] = lastContext.docBase + lastContext.reader().maxDoc();\n         }\n \n@@ -777,18 +814,20 @@ public class DocValuesCollector extends SimpleCollector\n         @Override\n         protected ScoreDoc fetchNextOrNull()\n         {\n-            if ( !iterator.hasNext() )\n+            if ( ! iterator.hasNext() )\n             {\n                 return null;\n             }\n+\n             currentDoc = iterator.next();\n             int subIndex = ReaderUtil.subIndex( currentDoc.doc, docStarts );\n-            LeafReaderContext context = contexts[subIndex];\n+            LeafReaderContext context = contexts[ subIndex];\n             onNextDoc( currentDoc.doc - context.docBase, context );\n             return currentDoc;\n         }\n \n-        protected abstract void onNextDoc( int localDocID, LeafReaderContext context );\n+        protected abstract void onNextDoc( int localDocID, LeafReaderContext context )\n+        ;\n     }\n \n     private static final class TopDocsIterator extends AbstractIndexHits<Document>\n@@ -800,13 +839,13 @@ public class DocValuesCollector extends SimpleCollector\n         private TopDocsIterator( TopDocs docs, LeafReaderContext[] contexts )\n         {\n             scoreDocs = new ScoreDocsIterator( docs, contexts )\n-            {\n-                @Override\n-                protected void onNextDoc( int localDocID, LeafReaderContext context )\n-                {\n-                    updateCurrentDocument( localDocID, context.reader() );\n-                }\n-            };\n+{\n+    @Override\n+    protected void onNextDoc( int localDocID, LeafReaderContext context )\n+    {\n+        updateCurrentDocument( localDocID, context.reader() );\n+    }\n+};\n             this.size = docs.scoreDocs.length;\n         }\n \n@@ -825,10 +864,11 @@ public class DocValuesCollector extends SimpleCollector\n         @Override\n         protected Document fetchNextOrNull()\n         {\n-            if ( !scoreDocs.hasNext() )\n+            if ( ! scoreDocs.hasNext() )\n             {\n                 return null;\n             }\n+\n             scoreDocs.next();\n             return currentDoc;\n         }\n@@ -863,16 +903,16 @@ public class DocValuesCollector extends SimpleCollector\n             docValuesCache = new HashMap<>( contexts.length );\n             readerCache = new HashMap<>();\n             scoreDocs = new ScoreDocsIterator( docs, contexts )\n-            {\n-                @Override\n-                protected void onNextDoc( int localDocID, LeafReaderContext context )\n-                {\n-                    readerCache.clear();\n-                    currentContext = context;\n-                    currentDocID = localDocID;\n-                    loadNextValue( context, localDocID );\n-                }\n-            };\n+{\n+    @Override\n+    protected void onNextDoc( int localDocID, LeafReaderContext context )\n+    {\n+        readerCache.clear();\n+        currentContext = context;\n+        currentDocID = localDocID;\n+        loadNextValue( context, localDocID );\n+    }\n+};\n         }\n \n         @Override\n@@ -882,8 +922,9 @@ public class DocValuesCollector extends SimpleCollector\n             {\n                 scoreDocs.next();\n                 index++;\n-                return currentValue != -1 && next( currentValue );\n+                return currentValue != - 1&& next( currentValue );\n             }\n+\n             return false;\n         }\n \n@@ -902,7 +943,7 @@ public class DocValuesCollector extends SimpleCollector\n         @Override\n         public long getValue( String field )\n         {\n-            NumericDocValues fieldValues = readerCache.computeIfAbsent( field, this::getDocValues );\n+            NumericDocValues fieldValues = readerCache.computeIfAbsent( field, this:: getDocValues );\n             return fieldValues.get( currentDocID );\n         }\n \n@@ -937,14 +978,15 @@ public class DocValuesCollector extends SimpleCollector\n                     throw new RuntimeException( e );\n                 }\n             }\n+\n             if ( docValues != null )\n             {\n                 currentValue = docValues.get( docID );\n             }\n             else\n             {\n-                currentValue = -1;\n+                currentValue = - 1;\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 99
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}