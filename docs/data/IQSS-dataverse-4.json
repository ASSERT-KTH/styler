{
    "project_name": "IQSS-dataverse",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "182",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    public void grantAccess(ActionEvent evt) {\n        //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n\t// Find the built in file downloader role (currently by alias)        \n        assignRole(assignRoleRoleAssignee, roleService.findBuiltinRoleByAlias(\"fileDownloader\"));\n    }\n    public void assignRole(ActionEvent evt) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/4/RolePermissionFragment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/4/RolePermissionFragment.java\nindex dd3044d3749..36f0ccfa1d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/4/RolePermissionFragment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/4/RolePermissionFragment.java\n@@ -179,7 +179,7 @@ public class RolePermissionFragment implements java.io.Serializable {\n     \n     public void grantAccess(ActionEvent evt) {\n         //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n-\t// Find the built in file downloader role (currently by alias)        \n+        // Find the built in file downloader role (currently by alias)        \n         assignRole(assignRoleRoleAssignee, roleService.findBuiltinRoleByAlias(\"fileDownloader\"));\n     }\n     public void assignRole(ActionEvent evt) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/4/RolePermissionFragment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/4/RolePermissionFragment.java\nindex dd3044d3749..f32e7ae4e9f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/4/RolePermissionFragment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/4/RolePermissionFragment.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse;\n \n import edu.harvard.iq.dataverse.authorization.AuthenticationServiceBean;\n@@ -40,311 +41,322 @@ import org.apache.commons.text.StringEscapeUtils;\n import org.apache.commons.lang3.StringUtils;\n \n /**\n- *\n  * @author gdurand\n  */\n @ViewScoped\n @Named\n public class RolePermissionFragment implements java.io.Serializable {\n \n-    private static final Logger logger = Logger.getLogger(RolePermissionFragment.class.getCanonicalName());\n-\n-    @EJB\n-    DataverseRoleServiceBean roleService;\n-    @EJB\n-    RoleAssigneeServiceBean roleAssigneeService;\n-    @EJB\n-    PermissionServiceBean permissionService;\n-    @EJB\n-    AuthenticationServiceBean authenticationService;\n-    @EJB\n-    EjbDataverseEngine commandEngine;\n-    @Inject\n-    DataverseRequestServiceBean dvRequestService;\n-\n-    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-    EntityManager em;\n-\n-    @Inject\n-    DataverseSession session;\n-\n-    DvObject dvObject;\n-\n-    public DvObject getDvObject() {\n-        return dvObject;\n+  private static final Logger logger = Logger.getLogger(RolePermissionFragment.class.getCanonicalName());\n+\n+  @EJB\n+  DataverseRoleServiceBean roleService;\n+  @EJB\n+  RoleAssigneeServiceBean roleAssigneeService;\n+  @EJB\n+  PermissionServiceBean permissionService;\n+  @EJB\n+  AuthenticationServiceBean authenticationService;\n+  @EJB\n+  EjbDataverseEngine commandEngine;\n+  @Inject\n+  DataverseRequestServiceBean dvRequestService;\n+\n+  @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+  EntityManager em;\n+\n+  @Inject\n+  DataverseSession session;\n+\n+  DvObject dvObject;\n+\n+  public DvObject getDvObject() {\n+    return dvObject;\n+  }\n+\n+  public void setDvObject(DvObject dvObject) {\n+    this.dvObject = dvObject;\n+    if (dvObject instanceof Dataverse) {\n+      inheritAssignments = !((Dataverse) dvObject).isPermissionRoot();\n     }\n-\n-    public void setDvObject(DvObject dvObject) {\n-        this.dvObject = dvObject;\n-        if (dvObject instanceof Dataverse) {\n-            inheritAssignments = !((Dataverse) dvObject).isPermissionRoot();\n-        }\n-    }\n-\n-    /* Inherit assignments related code */\n-    boolean inheritAssignments;\n-    \n-    public boolean isInheritAssignments() {\n-        return inheritAssignments;\n-    }\n-\n-    public void setInheritAssignments(boolean inheritAssignments) {\n-        this.inheritAssignments = inheritAssignments;\n-    }\n-\n-    public void updatePermissionRoot(javax.faces.event.AjaxBehaviorEvent event) throws javax.faces.event.AbortProcessingException {\n-        try {\n-            dvObject = commandEngine.submit(\n-                    new UpdatePermissionRootCommand(!inheritAssignments, \n-                                                    dvRequestService.getDataverseRequest(),\n-                                                    (Dataverse) dvObject));\n-            inheritAssignments = !((DvObjectContainer) dvObject).isPermissionRoot();\n-        } catch (CommandException ex) {\n-            Logger.getLogger(RolePermissionFragment.class.getName()).log(Level.SEVERE, null, ex);\n-        }\n+  }\n+\n+  /* Inherit assignments related code */\n+  boolean inheritAssignments;\n+\n+  public boolean isInheritAssignments() {\n+    return inheritAssignments;\n+  }\n+\n+  public void setInheritAssignments(boolean inheritAssignments) {\n+    this.inheritAssignments = inheritAssignments;\n+  }\n+\n+  public void updatePermissionRoot(javax.faces.event.AjaxBehaviorEvent event)\n+    throws javax.faces.event.AbortProcessingException {\n+    try {\n+      dvObject = commandEngine.submit(\n+        new UpdatePermissionRootCommand(!inheritAssignments,\n+          dvRequestService.getDataverseRequest(),\n+          (Dataverse) dvObject));\n+      inheritAssignments = !((DvObjectContainer) dvObject).isPermissionRoot();\n+    } catch (CommandException ex) {\n+      Logger.getLogger(RolePermissionFragment.class.getName()).log(Level.SEVERE, null, ex);\n     }\n+  }\n \n-    /* permissions tab related methods */\n-    private String assignRoleUsername; // used if input accepts a username\n-    private RoleAssignee assignRoleRoleAssignee; // used if input accepts a RoleAssignee through a converter\n-    private Long assignRoleRoleId;\n+  /* permissions tab related methods */\n+  private String assignRoleUsername; // used if input accepts a username\n+  private RoleAssignee assignRoleRoleAssignee; // used if input accepts a RoleAssignee through a converter\n+  private Long assignRoleRoleId;\n \n-    private final List<String> identifierList = new ArrayList<>();\n+  private final List<String> identifierList = new ArrayList<>();\n \n-    public List<String> completeIdentifier(String query) {\n-        if (identifierList.isEmpty()) {\n-            for (AuthenticatedUser au : authenticationService.findAllAuthenticatedUsers()) {\n-                identifierList.add(au.getIdentifier());\n-            }\n-        }\n-        List<String> returnList = new ArrayList<>();\n-        for (String identifier : identifierList) {\n-            if (identifier.contains(query)) {\n-                returnList.add(identifier);\n-            }\n-        }\n-        return returnList;\n+  public List<String> completeIdentifier(String query) {\n+    if (identifierList.isEmpty()) {\n+      for (AuthenticatedUser au : authenticationService.findAllAuthenticatedUsers()) {\n+        identifierList.add(au.getIdentifier());\n+      }\n     }\n-    \n-    private final List<RoleAssignee> roleAssigneeList = new ArrayList<>();\n-    \n-    public List<RoleAssignee> completeRoleAssignee(String query) {\n-        if (roleAssigneeList.isEmpty()) {\n-            for (AuthenticatedUser au : authenticationService.findAllAuthenticatedUsers()) {\n-                roleAssigneeList.add(au);\n-            }\n-        }\n-        List<RoleAssignee> returnList = new ArrayList<>();\n-        for (RoleAssignee ra : roleAssigneeList) {\n-            // @todo unsure if containsIgnore case will work for all locales\n-            if (StringUtils.containsIgnoreCase(ra.getDisplayInfo().getTitle(),query)) {\n-                returnList.add(ra);\n-            }\n-        }\n-        return returnList;\n-    }    \n-\n-    public List<DataverseRole> getAvailableRoles() {\n-        List<DataverseRole> roles = new LinkedList<>();\n-        if (dvObject != null && (dvObject instanceof Dataverse || dvObject instanceof Dataset)) {\n-            // current the available roles for a dataset are gotten from its parent\n-            Dataverse dv = dvObject instanceof Dataverse ? (Dataverse) dvObject : ((Dataset) dvObject).getOwner();\n-\n-            roles.addAll(roleService.availableRoles(dv.getId()));\n-\n-            Collections.sort(roles, DataverseRole.CMP_BY_NAME);\n-        }\n-        return roles;\n+    List<String> returnList = new ArrayList<>();\n+    for (String identifier : identifierList) {\n+      if (identifier.contains(query)) {\n+        returnList.add(identifier);\n+      }\n     }\n+    return returnList;\n+  }\n \n-    public List<RoleAssignmentRow> getRoleAssignments() {\n-        List<RoleAssignmentRow> raList = null;\n-        if (dvObject != null) {\n-            Set<RoleAssignment> ras = roleService.rolesAssignments(dvObject);\n-            raList = new ArrayList<>(ras.size());\n-            for (RoleAssignment ra : ras) {\n-                // for files, only show role assihnemnts which can download\n-                if (!(dvObject instanceof DataFile) || ra.getRole().permissions().contains(Permission.DownloadFile)) {\n-                    raList.add(new RoleAssignmentRow(ra, roleAssigneeService.getRoleAssignee(ra.getAssigneeIdentifier()).getDisplayInfo()));\n-                }\n-            }\n-        }\n-        return raList;\n-    }\n+  private final List<RoleAssignee> roleAssigneeList = new ArrayList<>();\n \n-    public void toggleFileRestrict(ActionEvent evt) {\n-        DataFile file = (DataFile) dvObject;\n-        file.setRestricted(!file.isRestricted());\n+  public List<RoleAssignee> completeRoleAssignee(String query) {\n+    if (roleAssigneeList.isEmpty()) {\n+      for (AuthenticatedUser au : authenticationService.findAllAuthenticatedUsers()) {\n+        roleAssigneeList.add(au);\n+      }\n     }\n-    \n-    public void grantAccess(ActionEvent evt) {\n-        //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n-\t// Find the built in file downloader role (currently by alias)        \n-        assignRole(assignRoleRoleAssignee, roleService.findBuiltinRoleByAlias(\"fileDownloader\"));\n-    }\n-    public void assignRole(ActionEvent evt) {\n-        //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n-        assignRole(assignRoleRoleAssignee, roleService.find(assignRoleRoleId));\n+    List<RoleAssignee> returnList = new ArrayList<>();\n+    for (RoleAssignee ra : roleAssigneeList) {\n+      // @todo unsure if containsIgnore case will work for all locales\n+      if (StringUtils.containsIgnoreCase(ra.getDisplayInfo().getTitle(), query)) {\n+        returnList.add(ra);\n+      }\n     }\n+    return returnList;\n+  }\n \n-    private void assignRole(RoleAssignee ra, DataverseRole r) {\n-        try {\n-            String privateUrlToken = null;\n-            commandEngine.submit(new AssignRoleCommand(ra, r, dvObject, dvRequestService.getDataverseRequest(), privateUrlToken));\n-            JH.addMessage(FacesMessage.SEVERITY_INFO,\n-                BundleUtil.getStringFromBundle(\"permission.roleAssignedToOn\" ,\n-                        Arrays.asList( r.getName() , ra.getDisplayInfo().getTitle() , StringEscapeUtils.escapeHtml4(dvObject.getDisplayName()) )) );\n-        } catch (CommandException ex) {\n-            JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"permission.cannotAssignRole\" , Arrays.asList( ex.getMessage())));\n-        }\n-    }\n+  public List<DataverseRole> getAvailableRoles() {\n+    List<DataverseRole> roles = new LinkedList<>();\n+    if (dvObject != null && (dvObject instanceof Dataverse || dvObject instanceof Dataset)) {\n+      // current the available roles for a dataset are gotten from its parent\n+      Dataverse dv = dvObject instanceof Dataverse ? (Dataverse) dvObject : ((Dataset) dvObject).getOwner();\n \n-    public void revokeRole(Long roleAssignmentId) {\n-        try {\n-            commandEngine.submit(new RevokeRoleCommand(em.find(RoleAssignment.class, roleAssignmentId), dvRequestService.getDataverseRequest()));\n-            JH.addMessage(FacesMessage.SEVERITY_INFO, BundleUtil.getStringFromBundle(\"permission.roleRevoked\" ));\n-        } catch (PermissionException ex) {\n-            JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"permission.cannotRevokeRole1\" , Arrays.asList(ex.getRequiredPermissions().toString())));\n-            logger.log(Level.SEVERE, \"Error revoking role assignment: \" + ex.getMessage(), ex);\n-\n-        } catch (CommandException ex) {\n-            JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"permission.cannotRevokeRole2\" , Arrays.asList( ex.getMessage())));\n-            logger.log(Level.SEVERE, \"Error revoking role assignment: \" + ex.getMessage(), ex);\n-        }\n-    }\n+      roles.addAll(roleService.availableRoles(dv.getId()));\n \n-    public String getAssignRoleUsername() {\n-        return assignRoleUsername;\n+      Collections.sort(roles, DataverseRole.CMP_BY_NAME);\n     }\n-\n-    public void setAssignRoleUsername(String assignRoleUsername) {\n-        this.assignRoleUsername = assignRoleUsername;\n-    }\n-\n-    public RoleAssignee getAssignRoleRoleAssignee() {\n-        return assignRoleRoleAssignee;\n+    return roles;\n+  }\n+\n+  public List<RoleAssignmentRow> getRoleAssignments() {\n+    List<RoleAssignmentRow> raList = null;\n+    if (dvObject != null) {\n+      Set<RoleAssignment> ras = roleService.rolesAssignments(dvObject);\n+      raList = new ArrayList<>(ras.size());\n+      for (RoleAssignment ra : ras) {\n+        // for files, only show role assihnemnts which can download\n+        if (!(dvObject instanceof DataFile) || ra.getRole().permissions().contains(Permission.DownloadFile)) {\n+          raList.add(new RoleAssignmentRow(ra,\n+            roleAssigneeService.getRoleAssignee(ra.getAssigneeIdentifier()).getDisplayInfo()));\n+        }\n+      }\n     }\n-\n-    public void setAssignRoleRoleAssignee(RoleAssignee assignRoleRoleAssignee) {\n-        this.assignRoleRoleAssignee = assignRoleRoleAssignee;\n+    return raList;\n+  }\n+\n+  public void toggleFileRestrict(ActionEvent evt) {\n+    DataFile file = (DataFile) dvObject;\n+    file.setRestricted(!file.isRestricted());\n+  }\n+\n+  public void grantAccess(ActionEvent evt) {\n+    //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n+    // Find the built in file downloader role (currently by alias)\n+    assignRole(assignRoleRoleAssignee, roleService.findBuiltinRoleByAlias(\"fileDownloader\"));\n+  }\n+\n+  public void assignRole(ActionEvent evt) {\n+    //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n+    assignRole(assignRoleRoleAssignee, roleService.find(assignRoleRoleId));\n+  }\n+\n+  private void assignRole(RoleAssignee ra, DataverseRole r) {\n+    try {\n+      String privateUrlToken = null;\n+      commandEngine\n+        .submit(new AssignRoleCommand(ra, r, dvObject, dvRequestService.getDataverseRequest(), privateUrlToken));\n+      JH.addMessage(FacesMessage.SEVERITY_INFO,\n+        BundleUtil.getStringFromBundle(\"permission.roleAssignedToOn\",\n+          Arrays.asList(r.getName(), ra.getDisplayInfo().getTitle(),\n+            StringEscapeUtils.escapeHtml4(dvObject.getDisplayName()))));\n+    } catch (CommandException ex) {\n+      JH.addMessage(FacesMessage.SEVERITY_ERROR,\n+        BundleUtil.getStringFromBundle(\"permission.cannotAssignRole\", Arrays.asList(ex.getMessage())));\n     }\n-    \n-    public Long getAssignRoleRoleId() {\n-        return assignRoleRoleId;\n+  }\n+\n+  public void revokeRole(Long roleAssignmentId) {\n+    try {\n+      commandEngine.submit(\n+        new RevokeRoleCommand(em.find(RoleAssignment.class, roleAssignmentId), dvRequestService.getDataverseRequest()));\n+      JH.addMessage(FacesMessage.SEVERITY_INFO, BundleUtil.getStringFromBundle(\"permission.roleRevoked\"));\n+    } catch (PermissionException ex) {\n+      JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil\n+        .getStringFromBundle(\"permission.cannotRevokeRole1\", Arrays.asList(ex.getRequiredPermissions().toString())));\n+      logger.log(Level.SEVERE, \"Error revoking role assignment: \" + ex.getMessage(), ex);\n+\n+    } catch (CommandException ex) {\n+      JH.addMessage(FacesMessage.SEVERITY_ERROR,\n+        BundleUtil.getStringFromBundle(\"permission.cannotRevokeRole2\", Arrays.asList(ex.getMessage())));\n+      logger.log(Level.SEVERE, \"Error revoking role assignment: \" + ex.getMessage(), ex);\n     }\n+  }\n \n-    public void setAssignRoleRoleId(Long assignRoleRoleId) {\n-        this.assignRoleRoleId = assignRoleRoleId;\n-    }\n+  public String getAssignRoleUsername() {\n+    return assignRoleUsername;\n+  }\n \n-    public static class RoleAssignmentRow {\n+  public void setAssignRoleUsername(String assignRoleUsername) {\n+    this.assignRoleUsername = assignRoleUsername;\n+  }\n \n-        private final RoleAssigneeDisplayInfo assigneeDisplayInfo;\n-        private final RoleAssignment ra;\n+  public RoleAssignee getAssignRoleRoleAssignee() {\n+    return assignRoleRoleAssignee;\n+  }\n \n-        public RoleAssignmentRow(RoleAssignment anRa, RoleAssigneeDisplayInfo disInf) {\n-            ra = anRa;\n-            assigneeDisplayInfo = disInf;\n-        }\n+  public void setAssignRoleRoleAssignee(RoleAssignee assignRoleRoleAssignee) {\n+    this.assignRoleRoleAssignee = assignRoleRoleAssignee;\n+  }\n \n-        public RoleAssigneeDisplayInfo getAssigneeDisplayInfo() {\n-            return assigneeDisplayInfo;\n-        }\n+  public Long getAssignRoleRoleId() {\n+    return assignRoleRoleId;\n+  }\n \n-        public DataverseRole getRole() {\n-            return ra.getRole();\n-        }\n-\n-        public String getRoleName() {\n-            return getRole().getName();\n-        }\n+  public void setAssignRoleRoleId(Long assignRoleRoleId) {\n+    this.assignRoleRoleId = assignRoleRoleId;\n+  }\n \n-        public DvObject getDefinitionPoint() {\n-            return ra.getDefinitionPoint();\n-        }\n+  public static class RoleAssignmentRow {\n \n-        public String getAssignedDvName() {\n-            return ra.getDefinitionPoint().getDisplayName();\n-        }\n-\n-        public Long getId() {\n-            return ra.getId();\n-        }\n+    private final RoleAssigneeDisplayInfo assigneeDisplayInfo;\n+    private final RoleAssignment ra;\n \n+    public RoleAssignmentRow(RoleAssignment anRa, RoleAssigneeDisplayInfo disInf) {\n+      ra = anRa;\n+      assigneeDisplayInfo = disInf;\n     }\n \n-    /* Roles tab related methods */\n-    private DataverseRole role = new DataverseRole();\n-    private List<String> selectedPermissions;\n-\n-    public List<Permission> getPermissions() {\n-        return Arrays.asList(Permission.values());\n+    public RoleAssigneeDisplayInfo getAssigneeDisplayInfo() {\n+      return assigneeDisplayInfo;\n     }\n \n-    public List<DataverseRole> getRoles() {\n-        if (dvObject != null) {\n-            return roleService.findByOwnerId(dvObject.getId());\n-        }\n-        return new ArrayList<>();\n+    public DataverseRole getRole() {\n+      return ra.getRole();\n     }\n \n-    public void createNewRole(ActionEvent e) {\n-        setRole(new DataverseRole());\n-        role.setOwner(dvObject);\n-    }\n-    \n-    public void cloneRole(String roleId) {\n-        DataverseRole clonedRole = new DataverseRole();\n-        clonedRole.setOwner(dvObject);\n-        \n-        DataverseRole originalRole = roleService.find(Long.parseLong(roleId));\n-        clonedRole.addPermissions(originalRole.permissions());\n-        setRole(clonedRole);\n+    public String getRoleName() {\n+      return getRole().getName();\n     }\n-    \n \n-    public void editRole(String roleId) {\n-        setRole(roleService.find(Long.parseLong(roleId)));\n+    public DvObject getDefinitionPoint() {\n+      return ra.getDefinitionPoint();\n     }\n \n-    public void updateRole(ActionEvent e) {\n-        // @todo currently only works for Dataverse since CreateRoleCommand only takes a dataverse\n-        // we need to decide if we want roles at the dataset level or not\n-        if (dvObject instanceof Dataverse) {\n-            role.clearPermissions();\n-            for (String pmsnStr : getSelectedPermissions()) {\n-                role.addPermission(Permission.valueOf(pmsnStr));\n-            }\n-            try {\n-                setRole(commandEngine.submit(new CreateRoleCommand(role, dvRequestService.getDataverseRequest(), (Dataverse) role.getOwner())));\n-                JH.addMessage(FacesMessage.SEVERITY_INFO, BundleUtil.getStringFromBundle(\"permission.roleSave\" , Arrays.asList( role.getName() )));\n-            } catch (CommandException ex) {\n-                JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"permission.cannotSaveRole\" , Arrays.asList( ex.getMessage())));\n-                logger.log(Level.SEVERE, \"Saving role failed\", ex);\n-            }\n-        }\n+    public String getAssignedDvName() {\n+      return ra.getDefinitionPoint().getDisplayName();\n     }\n \n-    public DataverseRole getRole() {\n-        return role;\n+    public Long getId() {\n+      return ra.getId();\n     }\n \n-    public void setRole(DataverseRole role) {\n-        this.role = role;\n-        selectedPermissions = new LinkedList<>();\n-        if (role != null) {\n-            for (Permission p : role.permissions()) {\n-                selectedPermissions.add(p.name());\n-            }\n-        }\n-    }\n+  }\n \n-    public List<String> getSelectedPermissions() {\n-        return selectedPermissions;\n-    }\n+  /* Roles tab related methods */\n+  private DataverseRole role = new DataverseRole();\n+  private List<String> selectedPermissions;\n \n-    public void setSelectedPermissions(List<String> selectedPermissions) {\n-        this.selectedPermissions = selectedPermissions;\n+  public List<Permission> getPermissions() {\n+    return Arrays.asList(Permission.values());\n+  }\n+\n+  public List<DataverseRole> getRoles() {\n+    if (dvObject != null) {\n+      return roleService.findByOwnerId(dvObject.getId());\n+    }\n+    return new ArrayList<>();\n+  }\n+\n+  public void createNewRole(ActionEvent e) {\n+    setRole(new DataverseRole());\n+    role.setOwner(dvObject);\n+  }\n+\n+  public void cloneRole(String roleId) {\n+    DataverseRole clonedRole = new DataverseRole();\n+    clonedRole.setOwner(dvObject);\n+\n+    DataverseRole originalRole = roleService.find(Long.parseLong(roleId));\n+    clonedRole.addPermissions(originalRole.permissions());\n+    setRole(clonedRole);\n+  }\n+\n+\n+  public void editRole(String roleId) {\n+    setRole(roleService.find(Long.parseLong(roleId)));\n+  }\n+\n+  public void updateRole(ActionEvent e) {\n+    // @todo currently only works for Dataverse since CreateRoleCommand only takes a dataverse\n+    // we need to decide if we want roles at the dataset level or not\n+    if (dvObject instanceof Dataverse) {\n+      role.clearPermissions();\n+      for (String pmsnStr : getSelectedPermissions()) {\n+        role.addPermission(Permission.valueOf(pmsnStr));\n+      }\n+      try {\n+        setRole(commandEngine\n+          .submit(new CreateRoleCommand(role, dvRequestService.getDataverseRequest(), (Dataverse) role.getOwner())));\n+        JH.addMessage(FacesMessage.SEVERITY_INFO,\n+          BundleUtil.getStringFromBundle(\"permission.roleSave\", Arrays.asList(role.getName())));\n+      } catch (CommandException ex) {\n+        JH.addMessage(FacesMessage.SEVERITY_ERROR,\n+          BundleUtil.getStringFromBundle(\"permission.cannotSaveRole\", Arrays.asList(ex.getMessage())));\n+        logger.log(Level.SEVERE, \"Saving role failed\", ex);\n+      }\n     }\n+  }\n+\n+  public DataverseRole getRole() {\n+    return role;\n+  }\n+\n+  public void setRole(DataverseRole role) {\n+    this.role = role;\n+    selectedPermissions = new LinkedList<>();\n+    if (role != null) {\n+      for (Permission p : role.permissions()) {\n+        selectedPermissions.add(p.name());\n+      }\n+    }\n+  }\n+\n+  public List<String> getSelectedPermissions() {\n+    return selectedPermissions;\n+  }\n+\n+  public void setSelectedPermissions(List<String> selectedPermissions) {\n+    this.selectedPermissions = selectedPermissions;\n+  }\n \n }\n",
            "diff_size": 395
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/4/RolePermissionFragment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/4/RolePermissionFragment.java\nindex dd3044d3749..d1ed6af0214 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/4/RolePermissionFragment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/4/RolePermissionFragment.java\n@@ -34,7 +34,6 @@ import javax.inject.Inject;\n import javax.inject.Named;\n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n-\n import edu.harvard.iq.dataverse.util.BundleUtil;\n import org.apache.commons.text.StringEscapeUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -43,6 +42,8 @@ import org.apache.commons.lang3.StringUtils;\n  *\n  * @author gdurand\n  */\n+\n+\n @ViewScoped\n @Named\n public class RolePermissionFragment implements java.io.Serializable {\n@@ -51,14 +52,19 @@ public class RolePermissionFragment implements java.io.Serializable {\n \n     @EJB\n     DataverseRoleServiceBean roleService;\n+\n     @EJB\n     RoleAssigneeServiceBean roleAssigneeService;\n+\n     @EJB\n     PermissionServiceBean permissionService;\n+\n     @EJB\n     AuthenticationServiceBean authenticationService;\n+\n     @EJB\n     EjbDataverseEngine commandEngine;\n+\n     @Inject\n     DataverseRequestServiceBean dvRequestService;\n \n@@ -67,7 +73,6 @@ public class RolePermissionFragment implements java.io.Serializable {\n \n     @Inject\n     DataverseSession session;\n-\n     DvObject dvObject;\n \n     public DvObject getDvObject() {\n@@ -82,8 +87,9 @@ public class RolePermissionFragment implements java.io.Serializable {\n     }\n \n     /* Inherit assignments related code */\n+\n     boolean inheritAssignments;\n-    \n+\n     public boolean isInheritAssignments() {\n         return inheritAssignments;\n     }\n@@ -94,10 +100,7 @@ public class RolePermissionFragment implements java.io.Serializable {\n \n     public void updatePermissionRoot(javax.faces.event.AjaxBehaviorEvent event) throws javax.faces.event.AbortProcessingException {\n         try {\n-            dvObject = commandEngine.submit(\n-                    new UpdatePermissionRootCommand(!inheritAssignments, \n-                                                    dvRequestService.getDataverseRequest(),\n-                                                    (Dataverse) dvObject));\n+            dvObject = commandEngine.submit(new UpdatePermissionRootCommand(!inheritAssignments, dvRequestService.getDataverseRequest(), (Dataverse) dvObject));\n             inheritAssignments = !((DvObjectContainer) dvObject).isPermissionRoot();\n         } catch (CommandException ex) {\n             Logger.getLogger(RolePermissionFragment.class.getName()).log(Level.SEVERE, null, ex);\n@@ -105,10 +108,10 @@ public class RolePermissionFragment implements java.io.Serializable {\n     }\n \n     /* permissions tab related methods */\n+\n     private String assignRoleUsername; // used if input accepts a username\n     private RoleAssignee assignRoleRoleAssignee; // used if input accepts a RoleAssignee through a converter\n     private Long assignRoleRoleId;\n-\n     private final List<String> identifierList = new ArrayList<>();\n \n     public List<String> completeIdentifier(String query) {\n@@ -117,6 +120,7 @@ public class RolePermissionFragment implements java.io.Serializable {\n                 identifierList.add(au.getIdentifier());\n             }\n         }\n+\n         List<String> returnList = new ArrayList<>();\n         for (String identifier : identifierList) {\n             if (identifier.contains(query)) {\n@@ -125,33 +129,32 @@ public class RolePermissionFragment implements java.io.Serializable {\n         }\n         return returnList;\n     }\n-    \n+\n     private final List<RoleAssignee> roleAssigneeList = new ArrayList<>();\n-    \n+\n     public List<RoleAssignee> completeRoleAssignee(String query) {\n         if (roleAssigneeList.isEmpty()) {\n             for (AuthenticatedUser au : authenticationService.findAllAuthenticatedUsers()) {\n                 roleAssigneeList.add(au);\n             }\n         }\n+\n         List<RoleAssignee> returnList = new ArrayList<>();\n         for (RoleAssignee ra : roleAssigneeList) {\n             // @todo unsure if containsIgnore case will work for all locales\n-            if (StringUtils.containsIgnoreCase(ra.getDisplayInfo().getTitle(),query)) {\n+            if (StringUtils.containsIgnoreCase(ra.getDisplayInfo().getTitle(), query)) {\n                 returnList.add(ra);\n             }\n         }\n         return returnList;\n-    }    \n+    }\n \n     public List<DataverseRole> getAvailableRoles() {\n         List<DataverseRole> roles = new LinkedList<>();\n         if (dvObject != null && (dvObject instanceof Dataverse || dvObject instanceof Dataset)) {\n             // current the available roles for a dataset are gotten from its parent\n             Dataverse dv = dvObject instanceof Dataverse ? (Dataverse) dvObject : ((Dataset) dvObject).getOwner();\n-\n             roles.addAll(roleService.availableRoles(dv.getId()));\n-\n             Collections.sort(roles, DataverseRole.CMP_BY_NAME);\n         }\n         return roles;\n@@ -162,6 +165,7 @@ public class RolePermissionFragment implements java.io.Serializable {\n         if (dvObject != null) {\n             Set<RoleAssignment> ras = roleService.rolesAssignments(dvObject);\n             raList = new ArrayList<>(ras.size());\n+\n             for (RoleAssignment ra : ras) {\n                 // for files, only show role assihnemnts which can download\n                 if (!(dvObject instanceof DataFile) || ra.getRole().permissions().contains(Permission.DownloadFile)) {\n@@ -176,12 +180,13 @@ public class RolePermissionFragment implements java.io.Serializable {\n         DataFile file = (DataFile) dvObject;\n         file.setRestricted(!file.isRestricted());\n     }\n-    \n+\n     public void grantAccess(ActionEvent evt) {\n         //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n-\t// Find the built in file downloader role (currently by alias)        \n+    // Find the built in file downloader role (currently by alias)        \n         assignRole(assignRoleRoleAssignee, roleService.findBuiltinRoleByAlias(\"fileDownloader\"));\n     }\n+\n     public void assignRole(ActionEvent evt) {\n         //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n         assignRole(assignRoleRoleAssignee, roleService.find(assignRoleRoleId));\n@@ -191,24 +196,25 @@ public class RolePermissionFragment implements java.io.Serializable {\n         try {\n             String privateUrlToken = null;\n             commandEngine.submit(new AssignRoleCommand(ra, r, dvObject, dvRequestService.getDataverseRequest(), privateUrlToken));\n-            JH.addMessage(FacesMessage.SEVERITY_INFO,\n-                BundleUtil.getStringFromBundle(\"permission.roleAssignedToOn\" ,\n-                        Arrays.asList( r.getName() , ra.getDisplayInfo().getTitle() , StringEscapeUtils.escapeHtml4(dvObject.getDisplayName()) )) );\n+            JH.addMessage(FacesMessage.SEVERITY_INFO, BundleUtil.getStringFromBundle(\"permission.roleAssignedToOn\", Arrays.asList(\n+                r.getName(),\n+                ra.getDisplayInfo().getTitle(),\n+                StringEscapeUtils.escapeHtml4(dvObject.getDisplayName()))));\n         } catch (CommandException ex) {\n-            JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"permission.cannotAssignRole\" , Arrays.asList( ex.getMessage())));\n+            JH.addMessage(FacesMessage.SEVERITY_ERROR,\n+BundleUtil.getStringFromBundle(\"permission.cannotAssignRole\", Arrays.asList(ex.getMessage())));\n         }\n     }\n \n     public void revokeRole(Long roleAssignmentId) {\n         try {\n             commandEngine.submit(new RevokeRoleCommand(em.find(RoleAssignment.class, roleAssignmentId), dvRequestService.getDataverseRequest()));\n-            JH.addMessage(FacesMessage.SEVERITY_INFO, BundleUtil.getStringFromBundle(\"permission.roleRevoked\" ));\n+            JH.addMessage(FacesMessage.SEVERITY_INFO, BundleUtil.getStringFromBundle(\"permission.roleRevoked\"));\n         } catch (PermissionException ex) {\n-            JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"permission.cannotRevokeRole1\" , Arrays.asList(ex.getRequiredPermissions().toString())));\n+            JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"permission.cannotRevokeRole1\", Arrays.asList(ex.getRequiredPermissions().toString())));\n             logger.log(Level.SEVERE, \"Error revoking role assignment: \" + ex.getMessage(), ex);\n-\n         } catch (CommandException ex) {\n-            JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"permission.cannotRevokeRole2\" , Arrays.asList( ex.getMessage())));\n+            JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"permission.cannotRevokeRole2\", Arrays.asList(ex.getMessage())));\n             logger.log(Level.SEVERE, \"Error revoking role assignment: \" + ex.getMessage(), ex);\n         }\n     }\n@@ -228,7 +234,7 @@ public class RolePermissionFragment implements java.io.Serializable {\n     public void setAssignRoleRoleAssignee(RoleAssignee assignRoleRoleAssignee) {\n         this.assignRoleRoleAssignee = assignRoleRoleAssignee;\n     }\n-    \n+\n     public Long getAssignRoleRoleId() {\n         return assignRoleRoleId;\n     }\n@@ -274,6 +280,7 @@ public class RolePermissionFragment implements java.io.Serializable {\n     }\n \n     /* Roles tab related methods */\n+\n     private DataverseRole role = new DataverseRole();\n     private List<String> selectedPermissions;\n \n@@ -292,16 +299,14 @@ public class RolePermissionFragment implements java.io.Serializable {\n         setRole(new DataverseRole());\n         role.setOwner(dvObject);\n     }\n-    \n+\n     public void cloneRole(String roleId) {\n         DataverseRole clonedRole = new DataverseRole();\n         clonedRole.setOwner(dvObject);\n-        \n         DataverseRole originalRole = roleService.find(Long.parseLong(roleId));\n         clonedRole.addPermissions(originalRole.permissions());\n         setRole(clonedRole);\n     }\n-    \n \n     public void editRole(String roleId) {\n         setRole(roleService.find(Long.parseLong(roleId)));\n@@ -312,14 +317,17 @@ public class RolePermissionFragment implements java.io.Serializable {\n         // we need to decide if we want roles at the dataset level or not\n         if (dvObject instanceof Dataverse) {\n             role.clearPermissions();\n+\n             for (String pmsnStr : getSelectedPermissions()) {\n                 role.addPermission(Permission.valueOf(pmsnStr));\n             }\n             try {\n                 setRole(commandEngine.submit(new CreateRoleCommand(role, dvRequestService.getDataverseRequest(), (Dataverse) role.getOwner())));\n-                JH.addMessage(FacesMessage.SEVERITY_INFO, BundleUtil.getStringFromBundle(\"permission.roleSave\" , Arrays.asList( role.getName() )));\n+                JH.addMessage(FacesMessage.SEVERITY_INFO,\n+BundleUtil.getStringFromBundle(\"permission.roleSave\", Arrays.asList(role.getName())));\n             } catch (CommandException ex) {\n-                JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"permission.cannotSaveRole\" , Arrays.asList( ex.getMessage())));\n+                JH.addMessage(FacesMessage.SEVERITY_ERROR,\n+BundleUtil.getStringFromBundle(\"permission.cannotSaveRole\", Arrays.asList(ex.getMessage())));\n                 logger.log(Level.SEVERE, \"Saving role failed\", ex);\n             }\n         }\n@@ -347,4 +355,4 @@ public class RolePermissionFragment implements java.io.Serializable {\n         this.selectedPermissions = selectedPermissions;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/4/RolePermissionFragment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/4/RolePermissionFragment.java\nindex dd3044d3749..3a6322fc0d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/4/RolePermissionFragment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/4/RolePermissionFragment.java\n@@ -179,8 +179,8 @@ public class RolePermissionFragment implements java.io.Serializable {\n     \n     public void grantAccess(ActionEvent evt) {\n         //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n-\t// Find the built in file downloader role (currently by alias)        \n-        assignRole(assignRoleRoleAssignee, roleService.findBuiltinRoleByAlias(\"fileDownloader\"));\n+        // Find the built in file downloader role (currently by alias)         assignRole(assignRoleRoleAssignee, roleService.findBuiltinRoleByAlias(\"fileDownloader\"));\n+assignRole(assignRoleRoleAssignee, roleService.findBuiltinRoleByAlias(\"fileDownloader\"));\n     }\n     public void assignRole(ActionEvent evt) {\n         //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/4/RolePermissionFragment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/4/RolePermissionFragment.java\nindex dd3044d3749..36f0ccfa1d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/4/RolePermissionFragment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/4/RolePermissionFragment.java\n@@ -179,7 +179,7 @@ public class RolePermissionFragment implements java.io.Serializable {\n     \n     public void grantAccess(ActionEvent evt) {\n         //RoleAssignee assignRoleRoleAssignee = roleAssigneeService.getRoleAssignee(assignRoleUsername);\n-\t// Find the built in file downloader role (currently by alias)        \n+        // Find the built in file downloader role (currently by alias)        \n         assignRole(assignRoleRoleAssignee, roleService.findBuiltinRoleByAlias(\"fileDownloader\"));\n     }\n     public void assignRole(ActionEvent evt) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}