{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1678",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "119",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "124",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1678/UdcSettings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1678/UdcSettings.java\nindex 8a401bb3eef..4befe4591e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1678/UdcSettings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1678/UdcSettings.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.ext.udc;\n \n import java.util.function.Function;\n@@ -39,104 +40,115 @@ import static org.neo4j.kernel.configuration.Settings.matches;\n import static org.neo4j.kernel.configuration.Settings.min;\n import static org.neo4j.kernel.configuration.Settings.setting;\n \n-@Description( \"Usage Data Collector configuration settings\" )\n+@Description(\"Usage Data Collector configuration settings\")\n public class UdcSettings implements LoadableConfig\n {\n-    /** Configuration key for enabling the UDC extension. */\n-    @Description( \"Enable the UDC extension.\" )\n-    public static final Setting<Boolean> udc_enabled = setting(\n-            \"dbms.udc.enabled\", Enabled.UNLESS_EXPLICITLY_DISABLED, Enabled.AS_DEFAULT_VALUE );\n+  /**\n+   * Configuration key for enabling the UDC extension.\n+   */\n+  @Description(\"Enable the UDC extension.\")\n+  public static final Setting<Boolean> udc_enabled = setting(\n+      \"dbms.udc.enabled\", Enabled.UNLESS_EXPLICITLY_DISABLED, Enabled.AS_DEFAULT_VALUE);\n \n-    /** Configuration key for the first delay, expressed in milliseconds. */\n-    @Internal\n-    public static final Setting<Integer> first_delay =\n-            buildSetting( \"unsupported.dbms.udc.first_delay\", INTEGER, Integer.toString( 10 * 1000 * 60 ) ).constraint( min( 1 ) ).build();\n+  /**\n+   * Configuration key for the first delay, expressed in milliseconds.\n+   */\n+  @Internal\n+  public static final Setting<Integer> first_delay =\n+      buildSetting(\"unsupported.dbms.udc.first_delay\", INTEGER, Integer.toString(10 * 1000 * 60)).constraint(min(1)).build();\n \n-    /** Configuration key for the interval for regular updates, expressed in milliseconds. */\n-    @Internal\n-    public static final Setting<Integer> interval = buildSetting( \"unsupported.dbms.udc.interval\", INTEGER, Integer.toString(\n-            1000 * 60 * 60 * 24 ) ).constraint( min( 1 ) ).build();\n+  /**\n+   * Configuration key for the interval for regular updates, expressed in milliseconds.\n+   */\n+  @Internal\n+  public static final Setting<Integer> interval = buildSetting(\"unsupported.dbms.udc.interval\", INTEGER, Integer.toString(\n+      1000 * 60 * 60 * 24)).constraint(min(1)).build();\n \n-    /** The host address to which UDC updates will be sent. Should be of the form hostname[:port]. */\n-    @Internal\n-    public static final Setting<HostnamePort> udc_host = setting( \"unsupported.dbms.udc.host\", HOSTNAME_PORT,\n-            \"udc.neo4j.org\" );\n+  /**\n+   * The host address to which UDC updates will be sent. Should be of the form hostname[:port].\n+   */\n+  @Internal\n+  public static final Setting<HostnamePort> udc_host = setting(\"unsupported.dbms.udc.host\", HOSTNAME_PORT,\n+      \"udc.neo4j.org\");\n \n-    /** Configuration key for overriding the source parameter in UDC */\n-    @Internal\n-    public static final Setting<String> udc_source = buildSetting( \"unsupported.dbms.udc.source\", STRING, \"maven\" )\n-            .constraint(\n-            illegalValueMessage( \"Must be a valid source\", matches( ANY ) ) ).build();\n+  /**\n+   * Configuration key for overriding the source parameter in UDC\n+   */\n+  @Internal\n+  public static final Setting<String> udc_source = buildSetting(\"unsupported.dbms.udc.source\", STRING, \"maven\")\n+      .constraint(\n+          illegalValueMessage(\"Must be a valid source\", matches(ANY))).build();\n \n-    /** Unique registration id */\n-    @Internal\n-    public static final Setting<String> udc_registration_key = buildSetting( \"unsupported.dbms.udc.reg\", STRING, \"unreg\" ).constraint(\n-            illegalValueMessage( \"Must be a valid registration id\", matches( ANY ) ) ).build();\n+  /**\n+   * Unique registration id\n+   */\n+  @Internal\n+  public static final Setting<String> udc_registration_key = buildSetting(\"unsupported.dbms.udc.reg\", STRING, \"unreg\").constraint(\n+      illegalValueMessage(\"Must be a valid registration id\", matches(ANY))).build();\n \n-    private enum Enabled implements Function<String,Boolean>\n-    {\n-        /** Only explicitly configuring this as 'false' disables UDC, all other values leaves UDC enabled. */\n-        UNLESS_EXPLICITLY_DISABLED;\n-        /**\n-         * Explicitly allocate a String here so that we know it is unique and can do identity equality comparisons on it\n-         * to detect that the default value has been used.\n-         */\n-        @SuppressWarnings( \"RedundantStringConstructorCall\" )\n-        static final String AS_DEFAULT_VALUE = new String( TRUE );\n+  private enum Enabled implements Function<String, Boolean>\n+  {\n+    /**\n+     * Only explicitly configuring this as 'false' disables UDC, all other values leaves UDC enabled.\n+     */\n+    UNLESS_EXPLICITLY_DISABLED;\n+    /**\n+     * Explicitly allocate a String here so that we know it is unique and can do identity equality comparisons on it\n+     * to detect that the default value has been used.\n+     */\n+    @SuppressWarnings(\"RedundantStringConstructorCall\")\n+    static final String AS_DEFAULT_VALUE = new String(TRUE);\n \n-        @Override\n-        public Boolean apply( String from )\n-        {\n-            // Perform identity equality here to differentiate between the default value (which is explicitly allocated\n-            // as a new instance, and is thus known to be unique), and explicitly being configured as \"true\".\n-            //noinspection StringEquality\n-            if ( from == AS_DEFAULT_VALUE ) // yes, this should really be ==\n-            { // the default value, as opposed to explicitly configured to \"true\"\n-                // Should result in UDC being enabled, unless one of the other ways to configure explicitly disables it\n-                String enabled = System.getProperty( udc_enabled.name() );\n-                if ( FALSE.equalsIgnoreCase( enabled ) )\n-                { // the 'enabled' system property tries to disable UDC\n-                    String disabled = System.getProperty( udc_disabled() );\n-                    if ( disabled == null || disabled.equalsIgnoreCase( TRUE ) )\n-                    { // the 'disabled' system property does nothing to enable UDC\n-                        return Boolean.FALSE;\n-                    }\n-                }\n-                else if ( TRUE.equalsIgnoreCase( System.getProperty( udc_disabled() ) ) )\n-                { // the 'disabled' system property tries to disable UDC\n-                    return enabled != null; // only disable if 'enabled' was not defined\n-                }\n-                return Boolean.TRUE;\n-            }\n-            else if ( FALSE.equalsIgnoreCase( from ) )\n-            { // the setting tries to disable UDC\n-                // if any other way of configuring UDC enables it, trust that instead.\n-                String enabled = System.getProperty( udc_enabled.name() );\n-                String disabled = System.getProperty( udc_disabled() );\n-                if ( enabled == null || enabled.equalsIgnoreCase( FALSE ) )\n-                { // the 'enabled' system property does nothing to enable UDC\n-                    if ( disabled == null || disabled.equalsIgnoreCase( TRUE ) )\n-                    { // the 'disabled' system property does nothing to enable UDC\n-                        return Boolean.FALSE;\n-                    }\n-                }\n-                return Boolean.TRUE;\n-            }\n-            else\n-            { // the setting enabled UDC\n-                return Boolean.TRUE;\n-            }\n+    @Override\n+    public Boolean apply(String from)\n+    {\n+      // Perform identity equality here to differentiate between the default value (which is explicitly allocated\n+      // as a new instance, and is thus known to be unique), and explicitly being configured as \"true\".\n+      //noinspection StringEquality\n+      if (from == AS_DEFAULT_VALUE) // yes, this should really be ==\n+      { // the default value, as opposed to explicitly configured to \"true\"\n+        // Should result in UDC being enabled, unless one of the other ways to configure explicitly disables it\n+        String enabled = System.getProperty(udc_enabled.name());\n+        if (FALSE.equalsIgnoreCase(enabled))\n+        { // the 'enabled' system property tries to disable UDC\n+          String disabled = System.getProperty(udc_disabled());\n+          if (disabled == null || disabled.equalsIgnoreCase(TRUE))\n+          { // the 'disabled' system property does nothing to enable UDC\n+            return Boolean.FALSE;\n+          }\n+        } else if (TRUE.equalsIgnoreCase(System.getProperty(udc_disabled())))\n+        { // the 'disabled' system property tries to disable UDC\n+          return enabled != null; // only disable if 'enabled' was not defined\n         }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return \"a boolean\";\n+        return Boolean.TRUE;\n+      } else if (FALSE.equalsIgnoreCase(from))\n+      { // the setting tries to disable UDC\n+        // if any other way of configuring UDC enables it, trust that instead.\n+        String enabled = System.getProperty(udc_enabled.name());\n+        String disabled = System.getProperty(udc_disabled());\n+        if (enabled == null || enabled.equalsIgnoreCase(FALSE))\n+        { // the 'enabled' system property does nothing to enable UDC\n+          if (disabled == null || disabled.equalsIgnoreCase(TRUE))\n+          { // the 'disabled' system property does nothing to enable UDC\n+            return Boolean.FALSE;\n+          }\n         }\n+        return Boolean.TRUE;\n+      } else\n+      { // the setting enabled UDC\n+        return Boolean.TRUE;\n+      }\n+    }\n \n-        private static String udc_disabled()\n-        {\n-            return udc_enabled.name().replace( \"enabled\", \"disable\" );\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      return \"a boolean\";\n+    }\n+\n+    private static String udc_disabled()\n+    {\n+      return udc_enabled.name().replace(\"enabled\", \"disable\");\n     }\n+  }\n }\n",
            "diff_size": 121
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1678/UdcSettings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1678/UdcSettings.java\nindex 8a401bb3eef..66615d2f85d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1678/UdcSettings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1678/UdcSettings.java\n@@ -44,40 +44,34 @@ public class UdcSettings implements LoadableConfig\n {\n     /** Configuration key for enabling the UDC extension. */\n     @Description( \"Enable the UDC extension.\" )\n-    public static final Setting<Boolean> udc_enabled = setting(\n-            \"dbms.udc.enabled\", Enabled.UNLESS_EXPLICITLY_DISABLED, Enabled.AS_DEFAULT_VALUE );\n+    public static final Setting<Boolean> udc_enabled = setting( \"dbms.udc.enabled\", Enabled.UNLESS_EXPLICITLY_DISABLED, Enabled.AS_DEFAULT_VALUE );\n \n-    /** Configuration key for the first delay, expressed in milliseconds. */\n+/** Configuration key for the first delay, expressed in milliseconds. */\n     @Internal\n-    public static final Setting<Integer> first_delay =\n-            buildSetting( \"unsupported.dbms.udc.first_delay\", INTEGER, Integer.toString( 10 * 1000 * 60 ) ).constraint( min( 1 ) ).build();\n+    public static final Setting<Integer> first_delay = buildSetting( \"unsupported.dbms.udc.first_delay\", INTEGER, Integer.toString( 10 * 1000 * 60 ) ).constraint( min( 1 ) ).build();\n \n-    /** Configuration key for the interval for regular updates, expressed in milliseconds. */\n+/** Configuration key for the interval for regular updates, expressed in milliseconds. */\n     @Internal\n-    public static final Setting<Integer> interval = buildSetting( \"unsupported.dbms.udc.interval\", INTEGER, Integer.toString(\n-            1000 * 60 * 60 * 24 ) ).constraint( min( 1 ) ).build();\n+    public static final Setting<Integer> interval = buildSetting( \"unsupported.dbms.udc.interval\", INTEGER, Integer.toString( 1000 * 60 * 60 * 24 ) ).constraint( min( 1 ) ).build();\n \n-    /** The host address to which UDC updates will be sent. Should be of the form hostname[:port]. */\n+/** The host address to which UDC updates will be sent. Should be of the form hostname[:port]. */\n     @Internal\n-    public static final Setting<HostnamePort> udc_host = setting( \"unsupported.dbms.udc.host\", HOSTNAME_PORT,\n-            \"udc.neo4j.org\" );\n+    public static final Setting<HostnamePort> udc_host = setting( \"unsupported.dbms.udc.host\", HOSTNAME_PORT, \"udc.neo4j.org\" );\n \n-    /** Configuration key for overriding the source parameter in UDC */\n+/** Configuration key for overriding the source parameter in UDC */\n     @Internal\n-    public static final Setting<String> udc_source = buildSetting( \"unsupported.dbms.udc.source\", STRING, \"maven\" )\n-            .constraint(\n-            illegalValueMessage( \"Must be a valid source\", matches( ANY ) ) ).build();\n+    public static final Setting<String> udc_source = buildSetting( \"unsupported.dbms.udc.source\", STRING, \"maven\" ).constraint( illegalValueMessage( \"Must be a valid source\", matches( ANY ) ) ).build();\n \n-    /** Unique registration id */\n+/** Unique registration id */\n     @Internal\n-    public static final Setting<String> udc_registration_key = buildSetting( \"unsupported.dbms.udc.reg\", STRING, \"unreg\" ).constraint(\n-            illegalValueMessage( \"Must be a valid registration id\", matches( ANY ) ) ).build();\n+    public static final Setting<String> udc_registration_key = buildSetting( \"unsupported.dbms.udc.reg\", STRING, \"unreg\" ).constraint( illegalValueMessage( \"Must be a valid registration id\", matches( ANY ) ) ).build();\n \n-    private enum Enabled implements Function<String,Boolean>\n+private enum Enabled implements Function<String,Boolean>\n     {\n         /** Only explicitly configuring this as 'false' disables UDC, all other values leaves UDC enabled. */\n         UNLESS_EXPLICITLY_DISABLED;\n-        /**\n+\n+/**\n          * Explicitly allocate a String here so that we know it is unique and can do identity equality comparisons on it\n          * to detect that the default value has been used.\n          */\n@@ -106,7 +100,8 @@ public class UdcSettings implements LoadableConfig\n                 { // the 'disabled' system property tries to disable UDC\n                     return enabled != null; // only disable if 'enabled' was not defined\n                 }\n-                return Boolean.TRUE;\n+\n+return Boolean.TRUE;\n             }\n             else if ( FALSE.equalsIgnoreCase( from ) )\n             { // the setting tries to disable UDC\n@@ -139,4 +134,4 @@ public class UdcSettings implements LoadableConfig\n             return udc_enabled.name().replace( \"enabled\", \"disable\" );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}