{
    "project_name": "StevenLooman-sonar-magik",
    "error_id": "22",
    "information": {
        "errors": [
            {
                "line": "85",
                "column": "5",
                "severity": "warning",
                "message": "'}' at column 5 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\n      childNode = getLastDescendant(child, nodeType);\n    } while (childNode == null);\n\n    return null;\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler/22/SizeZeroEmptyCheck.java\nindex deafea66bfa..788faa65c60 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler/22/SizeZeroEmptyCheck.java\n@@ -82,7 +82,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n       }\n \n       childNode = getLastDescendant(child, nodeType);\n-    } while (childNode == null);\n+    }\n+    while (childNode == null);\n \n     return null;\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "85",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/intellij/22/SizeZeroEmptyCheck.java\nindex deafea66bfa..f5f664db978 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/intellij/22/SizeZeroEmptyCheck.java\n@@ -43,8 +43,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n   private boolean hasEqOperator(AstNode node) {\n     AstNode operatorNode = node.getChildren().get(1);\n     return operatorNode.getTokenValue().equals(\"=\")\n-           || operatorNode.getTokenValue().equals(\">=\")\n-           || operatorNode.getTokenValue().equals(\"_is\");\n+        || operatorNode.getTokenValue().equals(\">=\")\n+        || operatorNode.getTokenValue().equals(\"_is\");\n   }\n \n   private boolean isMethodInvocationSize(AstNode node) {\n@@ -61,7 +61,7 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n   private boolean isNumberZero(AstNode node) {\n     AstNode numberNode = node.getFirstDescendant(MagikGrammar.NUMBER);\n     return numberNode != null\n-           && numberNode.getTokenValue().equals(\"0\");\n+        && numberNode.getTokenValue().equals(\"0\");\n   }\n \n   @Nullable\n@@ -76,7 +76,7 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n         return null;\n       }\n \n-      AstNode child = (AstNode)childrenIter.next();\n+      AstNode child = (AstNode) childrenIter.next();\n       if (child.is(nodeType)) {\n         return child;\n       }\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/naturalize/22/SizeZeroEmptyCheck.java\nindex deafea66bfa..fa571d9f323 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/naturalize/22/SizeZeroEmptyCheck.java\n@@ -43,7 +43,7 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n   private boolean hasEqOperator(AstNode node) {\n     AstNode operatorNode = node.getChildren().get(1);\n     return operatorNode.getTokenValue().equals(\"=\")\n-           || operatorNode.getTokenValue().equals(\">=\")\n+    || operatorNode.getTokenValue().equals(\">=\")\n            || operatorNode.getTokenValue().equals(\"_is\");\n   }\n \n@@ -54,14 +54,12 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     }\n \n     AstNode identifierNode = methodInvocationNode.getFirstDescendant(MagikGrammar.IDENTIFIER);\n-    return identifierNode != null\n-        && identifierNode.getTokenValue().equals(\"size\");\n+    return identifierNode != null && identifierNode.getTokenValue().equals(\"size\");\n   }\n \n   private boolean isNumberZero(AstNode node) {\n     AstNode numberNode = node.getFirstDescendant(MagikGrammar.NUMBER);\n-    return numberNode != null\n-           && numberNode.getTokenValue().equals(\"0\");\n+    return numberNode != null && numberNode.getTokenValue().equals(\"0\");\n   }\n \n   @Nullable\n@@ -82,8 +80,9 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n       }\n \n       childNode = getLastDescendant(child, nodeType);\n-    } while (childNode == null);\n+    }\n+while (childNode == null);\n \n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "column": "52",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "43",
                    "column": "96",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "column": "6",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/codebuff/22/SizeZeroEmptyCheck.java\nindex deafea66bfa..22545fa3b3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/codebuff/22/SizeZeroEmptyCheck.java\n@@ -5,7 +5,6 @@ import com.sonar.sslr.api.AstNodeType;\n import org.sonar.check.Rule;\n import org.stevenlooman.sw.magik.MagikCheck;\n import org.stevenlooman.sw.magik.api.MagikGrammar;\n-\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n@@ -25,26 +24,23 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n \n   @Override\n   public List<AstNodeType> subscribedTo() {\n-    return Arrays.asList(\n-        MagikGrammar.EQUALITY_EXPRESSION);\n+    return Arrays.asList(MagikGrammar.EQUALITY_EXPRESSION);\n   }\n \n   @Override\n   public void visitNode(AstNode node) {\n     AstNode leftHandSide = node.getFirstChild();\n     AstNode rightHandSide = node.getLastChild();\n-    if (hasEqOperator(node)\n-        && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n-        || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n+    if (hasEqOperator(node) && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n+                                || isMethodInvocationSize(rightHandSide)\n+&& isNumberZero(leftHandSide))) {\n       addIssue(MESSAGE, node);\n     }\n   }\n \n   private boolean hasEqOperator(AstNode node) {\n     AstNode operatorNode = node.getChildren().get(1);\n-    return operatorNode.getTokenValue().equals(\"=\")\n-           || operatorNode.getTokenValue().equals(\">=\")\n-           || operatorNode.getTokenValue().equals(\"_is\");\n+    return operatorNode.getTokenValue().equals(\"=\")|| operatorNode.getTokenValue().equals(\">=\")|| operatorNode.getTokenValue().equals(\"_is\");\n   }\n \n   private boolean isMethodInvocationSize(AstNode node) {\n@@ -54,36 +50,35 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     }\n \n     AstNode identifierNode = methodInvocationNode.getFirstDescendant(MagikGrammar.IDENTIFIER);\n-    return identifierNode != null\n-        && identifierNode.getTokenValue().equals(\"size\");\n+    return identifierNode != null && identifierNode.getTokenValue().equals(\"size\");\n   }\n \n   private boolean isNumberZero(AstNode node) {\n     AstNode numberNode = node.getFirstDescendant(MagikGrammar.NUMBER);\n-    return numberNode != null\n-           && numberNode.getTokenValue().equals(\"0\");\n+    return numberNode != null && numberNode.getTokenValue().equals(\"0\");\n   }\n \n   @Nullable\n   private AstNode getLastDescendant(AstNode node, AstNodeType nodeType) {\n     List<AstNode> children = node.getChildren();\n     Collections.reverse(children);\n-    Iterator<AstNode> childrenIter = children.iterator();\n \n+    Iterator<AstNode> childrenIter = children.iterator();\n     AstNode childNode;\n     do {\n       if (!childrenIter.hasNext()) {\n         return null;\n       }\n \n-      AstNode child = (AstNode)childrenIter.next();\n+      AstNode child = (AstNode) childrenIter.next();\n       if (child.is(nodeType)) {\n         return child;\n       }\n \n       childNode = getLastDescendant(child, nodeType);\n-    } while (childNode == null);\n+    }\n \n+while(childNode == null);\n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_random/22/SizeZeroEmptyCheck.java\nindex deafea66bfa..788faa65c60 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_random/22/SizeZeroEmptyCheck.java\n@@ -82,7 +82,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n       }\n \n       childNode = getLastDescendant(child, nodeType);\n-    } while (childNode == null);\n+    }\n+    while (childNode == null);\n \n     return null;\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'do..while rcurly' has incorrect indentation level 6, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "column": "7",
                    "severity": "warning",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_three_grams/22/SizeZeroEmptyCheck.java\nindex deafea66bfa..e9bf06b0f7b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/22/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_three_grams/22/SizeZeroEmptyCheck.java\n@@ -82,7 +82,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n       }\n \n       childNode = getLastDescendant(child, nodeType);\n-    } while (childNode == null);\n+\n+      } while (childNode == null);\n \n     return null;\n   }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}