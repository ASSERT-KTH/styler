{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1883",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "52",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "72",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "121",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1883/DeadlockStrategies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1883/DeadlockStrategies.java\nindex effae90b904..443ceca1604 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1883/DeadlockStrategies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1883/DeadlockStrategies.java\n@@ -17,133 +17,130 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.enterprise.lock.forseti;\n \n import org.neo4j.util.FeatureToggles;\n \n public enum DeadlockStrategies implements ForsetiLockManager.DeadlockResolutionStrategy\n {\n-    /**\n-     * When a deadlock occurs, the client with the fewest number of held locks is aborted. If both clients hold the same\n-     * number of\n-     * locks, the client with the lowest client id is aborted.\n-     * <p/>\n-     * This is one side of a long academic argument, where the other says to abort the one with the most locks held,\n-     * since it's old and monolithic and holding up\n-     * the line.\n-     */\n-    ABORT_YOUNG\n-            {\n-                @Override\n-                public boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith )\n-                {\n-                    if ( isSameClient( clientThatsAsking, clientWereDeadlockedWith ) )\n-                    {\n-                        return true;\n-                    }\n+  /**\n+   * When a deadlock occurs, the client with the fewest number of held locks is aborted. If both clients hold the same\n+   * number of\n+   * locks, the client with the lowest client id is aborted.\n+   * <p/>\n+   * This is one side of a long academic argument, where the other says to abort the one with the most locks held,\n+   * since it's old and monolithic and holding up\n+   * the line.\n+   */\n+  ABORT_YOUNG\n+      {\n+        @Override\n+        public boolean shouldAbort(ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith)\n+        {\n+          if (isSameClient(clientThatsAsking, clientWereDeadlockedWith))\n+          {\n+            return true;\n+          }\n \n-                    int ourCount = clientThatsAsking.lockCount();\n-                    int otherCount = clientWereDeadlockedWith.lockCount();\n-                    if ( ourCount > otherCount )\n-                    {\n-                        // We hold more locks than the other client, we stay the course!\n-                        return false;\n-                    }\n-                    else if ( otherCount > ourCount )\n-                    {\n-                        // Other client holds more locks than us, yield to her seniority\n-                        return true;\n-                    }\n-                    else\n-                    {\n-                        return clientThatsAsking.id() >= clientWereDeadlockedWith\n-                                .id(); // >= to guard against bugs where a client thinks its deadlocked itself\n-                    }\n-                }\n-            },\n+          int ourCount = clientThatsAsking.lockCount();\n+          int otherCount = clientWereDeadlockedWith.lockCount();\n+          if (ourCount > otherCount)\n+          {\n+            // We hold more locks than the other client, we stay the course!\n+            return false;\n+          } else if (otherCount > ourCount)\n+          {\n+            // Other client holds more locks than us, yield to her seniority\n+            return true;\n+          } else\n+          {\n+            return clientThatsAsking.id() >= clientWereDeadlockedWith\n+                .id(); // >= to guard against bugs where a client thinks its deadlocked itself\n+          }\n+        }\n+      },\n \n-    /**\n-     * When a deadlock occurs, the client with the highest number of held locks is aborted. If both clients hold the\n-     * same number of\n-     * locks, the client with the highest client id is aborted.\n-     */\n-    ABORT_OLD\n-            {\n-                @Override\n-                public boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith )\n-                {\n-                    if ( isSameClient( clientThatsAsking, clientWereDeadlockedWith ) )\n-                    {\n-                        return true;\n-                    }\n+  /**\n+   * When a deadlock occurs, the client with the highest number of held locks is aborted. If both clients hold the\n+   * same number of\n+   * locks, the client with the highest client id is aborted.\n+   */\n+  ABORT_OLD\n+      {\n+        @Override\n+        public boolean shouldAbort(ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith)\n+        {\n+          if (isSameClient(clientThatsAsking, clientWereDeadlockedWith))\n+          {\n+            return true;\n+          }\n \n-                    return !ABORT_YOUNG.shouldAbort( clientThatsAsking, clientWereDeadlockedWith );\n-                }\n-            },\n+          return !ABORT_YOUNG.shouldAbort(clientThatsAsking, clientWereDeadlockedWith);\n+        }\n+      },\n \n-    /**\n-     * When a deadlock occurs, the client that is blocking the lowest number of other clients aborts.\n-     * If both clients have the same sized wait lists, the one with the lowest client id is aborted.\n-     */\n-    ABORT_SHORT_WAIT_LIST\n-            {\n-                @Override\n-                public boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith )\n-                {\n-                    if ( isSameClient( clientThatsAsking, clientWereDeadlockedWith ) )\n-                    {\n-                        return true;\n-                    }\n+  /**\n+   * When a deadlock occurs, the client that is blocking the lowest number of other clients aborts.\n+   * If both clients have the same sized wait lists, the one with the lowest client id is aborted.\n+   */\n+  ABORT_SHORT_WAIT_LIST\n+      {\n+        @Override\n+        public boolean shouldAbort(ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith)\n+        {\n+          if (isSameClient(clientThatsAsking, clientWereDeadlockedWith))\n+          {\n+            return true;\n+          }\n \n-                    int ourCount = clientThatsAsking.waitListSize();\n-                    int otherCount = clientWereDeadlockedWith.waitListSize();\n-                    if ( ourCount > otherCount )\n-                    {\n-                        // We have a larger wait list than the other client, we stay the course\n-                        return false;\n-                    }\n-                    else if ( otherCount > ourCount )\n-                    {\n-                        // Other client has a longer wait list, we yield\n-                        return true;\n-                    }\n-                    else\n-                    {\n-                        return clientThatsAsking.id() > clientWereDeadlockedWith.id();\n-                    }\n-                }\n-            },\n+          int ourCount = clientThatsAsking.waitListSize();\n+          int otherCount = clientWereDeadlockedWith.waitListSize();\n+          if (ourCount > otherCount)\n+          {\n+            // We have a larger wait list than the other client, we stay the course\n+            return false;\n+          } else if (otherCount > ourCount)\n+          {\n+            // Other client has a longer wait list, we yield\n+            return true;\n+          } else\n+          {\n+            return clientThatsAsking.id() > clientWereDeadlockedWith.id();\n+          }\n+        }\n+      },\n \n-    /**\n-     * When a deadlock occurs, the client that is blocking the highest number of other clients aborts.\n-     * If both clients have the same sized wait lists, the one with the highest client id is aborted.\n-     */\n-    ABORT_LONG_WAIT_LIST\n-            {\n-                @Override\n-                public boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith )\n-                {\n-                    if ( isSameClient( clientThatsAsking, clientWereDeadlockedWith ) )\n-                    {\n-                        return true;\n-                    }\n-                    return !ABORT_SHORT_WAIT_LIST.shouldAbort( clientThatsAsking, clientWereDeadlockedWith );\n-                }\n-            };\n+  /**\n+   * When a deadlock occurs, the client that is blocking the highest number of other clients aborts.\n+   * If both clients have the same sized wait lists, the one with the highest client id is aborted.\n+   */\n+  ABORT_LONG_WAIT_LIST\n+      {\n+        @Override\n+        public boolean shouldAbort(ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith)\n+        {\n+          if (isSameClient(clientThatsAsking, clientWereDeadlockedWith))\n+          {\n+            return true;\n+          }\n+          return !ABORT_SHORT_WAIT_LIST.shouldAbort(clientThatsAsking, clientWereDeadlockedWith);\n+        }\n+      };\n \n-    @Override\n-    public abstract boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith );\n+  @Override\n+  public abstract boolean shouldAbort(ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith);\n \n-    /**\n-     * To aid in experimental testing of strategies on different real workloads, allow toggling which strategy to use.\n-     */\n-    public static final ForsetiLockManager.DeadlockResolutionStrategy DEFAULT =\n-            FeatureToggles.flag( DeadlockStrategies.class, \"strategy\", ABORT_YOUNG );\n+  /**\n+   * To aid in experimental testing of strategies on different real workloads, allow toggling which strategy to use.\n+   */\n+  public static final ForsetiLockManager.DeadlockResolutionStrategy DEFAULT =\n+      FeatureToggles.flag(DeadlockStrategies.class, \"strategy\", ABORT_YOUNG);\n \n-    private static boolean isSameClient( ForsetiClient a, ForsetiClient b )\n-    {\n-        // This should never happen, but as a safety net, guard against bugs\n-        // where a client thinks it's deadlocked with itself.\n-        return a.id() == b.id();\n-    }\n+  private static boolean isSameClient(ForsetiClient a, ForsetiClient b)\n+  {\n+    // This should never happen, but as a safety net, guard against bugs\n+    // where a client thinks it's deadlocked with itself.\n+    return a.id() == b.id();\n+  }\n }\n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "34",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "52",
                    "column": "41",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "99",
                    "column": "34",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "column": "41",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1883/DeadlockStrategies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1883/DeadlockStrategies.java\nindex effae90b904..547b6c0ef46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1883/DeadlockStrategies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1883/DeadlockStrategies.java\n@@ -33,7 +33,7 @@ public enum DeadlockStrategies implements ForsetiLockManager.DeadlockResolutionS\n      * the line.\n      */\n     ABORT_YOUNG\n-            {\n+{\n                 @Override\n                 public boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith )\n                 {\n@@ -44,31 +44,30 @@ public enum DeadlockStrategies implements ForsetiLockManager.DeadlockResolutionS\n \n                     int ourCount = clientThatsAsking.lockCount();\n                     int otherCount = clientWereDeadlockedWith.lockCount();\n-                    if ( ourCount > otherCount )\n+                    if ( ourCount> otherCount )\n                     {\n                         // We hold more locks than the other client, we stay the course!\n                         return false;\n                     }\n-                    else if ( otherCount > ourCount )\n+                    else if ( otherCount> ourCount )\n                     {\n                         // Other client holds more locks than us, yield to her seniority\n                         return true;\n                     }\n                     else\n                     {\n-                        return clientThatsAsking.id() >= clientWereDeadlockedWith\n-                                .id(); // >= to guard against bugs where a client thinks its deadlocked itself\n+                        return clientThatsAsking.id() >= clientWereDeadlockedWith.id(); // >= to guard against bugs where a client thinks its deadlocked itself\n                     }\n                 }\n             },\n \n-    /**\n+/**\n      * When a deadlock occurs, the client with the highest number of held locks is aborted. If both clients hold the\n      * same number of\n      * locks, the client with the highest client id is aborted.\n      */\n     ABORT_OLD\n-            {\n+{\n                 @Override\n                 public boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith )\n                 {\n@@ -81,12 +80,12 @@ public enum DeadlockStrategies implements ForsetiLockManager.DeadlockResolutionS\n                 }\n             },\n \n-    /**\n+/**\n      * When a deadlock occurs, the client that is blocking the lowest number of other clients aborts.\n      * If both clients have the same sized wait lists, the one with the lowest client id is aborted.\n      */\n     ABORT_SHORT_WAIT_LIST\n-            {\n+{\n                 @Override\n                 public boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith )\n                 {\n@@ -97,12 +96,12 @@ public enum DeadlockStrategies implements ForsetiLockManager.DeadlockResolutionS\n \n                     int ourCount = clientThatsAsking.waitListSize();\n                     int otherCount = clientWereDeadlockedWith.waitListSize();\n-                    if ( ourCount > otherCount )\n+                    if ( ourCount> otherCount )\n                     {\n                         // We have a larger wait list than the other client, we stay the course\n                         return false;\n                     }\n-                    else if ( otherCount > ourCount )\n+                    else if ( otherCount> ourCount )\n                     {\n                         // Other client has a longer wait list, we yield\n                         return true;\n@@ -114,12 +113,12 @@ public enum DeadlockStrategies implements ForsetiLockManager.DeadlockResolutionS\n                 }\n             },\n \n-    /**\n+/**\n      * When a deadlock occurs, the client that is blocking the highest number of other clients aborts.\n      * If both clients have the same sized wait lists, the one with the highest client id is aborted.\n      */\n     ABORT_LONG_WAIT_LIST\n-            {\n+{\n                 @Override\n                 public boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith )\n                 {\n@@ -131,19 +130,18 @@ public enum DeadlockStrategies implements ForsetiLockManager.DeadlockResolutionS\n                 }\n             };\n \n-    @Override\n+@Override\n     public abstract boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith );\n \n     /**\n      * To aid in experimental testing of strategies on different real workloads, allow toggling which strategy to use.\n      */\n-    public static final ForsetiLockManager.DeadlockResolutionStrategy DEFAULT =\n-            FeatureToggles.flag( DeadlockStrategies.class, \"strategy\", ABORT_YOUNG );\n+    public static final ForsetiLockManager.DeadlockResolutionStrategy DEFAULT = FeatureToggles.flag( DeadlockStrategies.class, \"strategy\", ABORT_YOUNG );\n \n-    private static boolean isSameClient( ForsetiClient a, ForsetiClient b )\n+private static boolean isSameClient( ForsetiClient a, ForsetiClient b )\n     {\n         // This should never happen, but as a safety net, guard against bugs\n         // where a client thinks it's deadlocked with itself.\n         return a.id() == b.id();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}