{
    "project_name": "graphfoundation-ongdb",
    "error_id": "146",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/146/GraphDatabaseDependencies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/146/GraphDatabaseDependencies.java\nindex 0fddfd601ad..58d9cb942e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/146/GraphDatabaseDependencies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/146/GraphDatabaseDependencies.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel;\n \n import java.util.ArrayList;\n@@ -40,136 +41,136 @@ import static org.neo4j.helpers.collection.Iterables.asList;\n \n public class GraphDatabaseDependencies implements GraphDatabaseFacadeFactory.Dependencies\n {\n-    public static GraphDatabaseDependencies newDependencies( GraphDatabaseFacadeFactory.Dependencies deps )\n-    {\n-        return new GraphDatabaseDependencies( deps.monitors(), deps.userLogProvider(), asList( deps.settingsClasses() ),\n-                asList( deps.kernelExtensions() ), deps.urlAccessRules(), asList( deps.executionEngines() ) );\n-    }\n-\n-    public static GraphDatabaseDependencies newDependencies()\n-    {\n-        List<KernelExtensionFactory<?>> kernelExtensions = new ArrayList<>();\n-        for ( KernelExtensionFactory<?> factory : Service.load( KernelExtensionFactory.class ) )\n-        {\n-            kernelExtensions.add( factory );\n-        }\n-\n-        Map<String,URLAccessRule> urlAccessRules = new HashMap<>();\n-        urlAccessRules.put( \"http\", URLAccessRules.alwaysPermitted() );\n-        urlAccessRules.put( \"https\", URLAccessRules.alwaysPermitted() );\n-        urlAccessRules.put( \"ftp\", URLAccessRules.alwaysPermitted() );\n-        urlAccessRules.put( \"file\", URLAccessRules.fileAccess() );\n-\n-        List<QueryEngineProvider> queryEngineProviders = asList( Service.load( QueryEngineProvider.class ) );\n-\n-        return new GraphDatabaseDependencies( null, null, new ArrayList<>(), kernelExtensions,\n-                urlAccessRules, queryEngineProviders );\n-    }\n-\n-    private final Monitors monitors;\n-    private final LogProvider userLogProvider;\n-    private final List<Class<?>> settingsClasses;\n-    private final List<KernelExtensionFactory<?>> kernelExtensions;\n-    private final Map<String,URLAccessRule> urlAccessRules;\n-    private final List<QueryEngineProvider> queryEngineProviders;\n-\n-    private GraphDatabaseDependencies(\n-            Monitors monitors,\n-            LogProvider userLogProvider,\n-            List<Class<?>> settingsClasses,\n-            List<KernelExtensionFactory<?>> kernelExtensions,\n-            Map<String,URLAccessRule> urlAccessRules,\n-            List<QueryEngineProvider> queryEngineProviders )\n-    {\n-        this.monitors = monitors;\n-        this.userLogProvider = userLogProvider;\n-        this.settingsClasses = settingsClasses;\n-        this.kernelExtensions = kernelExtensions;\n-        this.urlAccessRules = Collections.unmodifiableMap( urlAccessRules );\n-        this.queryEngineProviders = queryEngineProviders;\n-    }\n-\n-    // Builder DSL\n-    public GraphDatabaseDependencies monitors( Monitors monitors )\n-    {\n-        return new GraphDatabaseDependencies( monitors, userLogProvider, settingsClasses, kernelExtensions,\n-                urlAccessRules, queryEngineProviders );\n-    }\n-\n-    public GraphDatabaseDependencies userLogProvider( LogProvider userLogProvider )\n-    {\n-        return new GraphDatabaseDependencies( monitors, userLogProvider, settingsClasses, kernelExtensions,\n-                urlAccessRules, queryEngineProviders );\n-    }\n-\n-    public GraphDatabaseDependencies settingsClasses( List<Class<?>> settingsClasses )\n-    {\n-        return new GraphDatabaseDependencies( monitors, userLogProvider, settingsClasses, kernelExtensions,\n-                urlAccessRules, queryEngineProviders );\n-    }\n-\n-    public GraphDatabaseDependencies settingsClasses( Class<?>... settingsClass )\n-    {\n-        settingsClasses.addAll( Arrays.asList( settingsClass ) );\n-        return new GraphDatabaseDependencies( monitors, userLogProvider, settingsClasses, kernelExtensions,\n-                urlAccessRules, queryEngineProviders );\n-    }\n-\n-    public GraphDatabaseDependencies kernelExtensions( Iterable<KernelExtensionFactory<?>> kernelExtensions )\n-    {\n-        return new GraphDatabaseDependencies( monitors, userLogProvider, settingsClasses,\n-                addAll( new ArrayList<>(), kernelExtensions ),\n-                urlAccessRules, queryEngineProviders );\n-    }\n-\n-    public GraphDatabaseDependencies urlAccessRules( Map<String,URLAccessRule> urlAccessRules )\n-    {\n-        final HashMap<String,URLAccessRule> newUrlAccessRules = new HashMap<>( this.urlAccessRules );\n-        newUrlAccessRules.putAll( urlAccessRules );\n-        return new GraphDatabaseDependencies( monitors, userLogProvider, settingsClasses, kernelExtensions,\n-                newUrlAccessRules, queryEngineProviders );\n-    }\n-\n-    public GraphDatabaseDependencies queryEngineProviders( Iterable<QueryEngineProvider> queryEngineProviders )\n-    {\n-        return new GraphDatabaseDependencies( monitors, userLogProvider, settingsClasses, kernelExtensions,\n-                urlAccessRules, addAll( new ArrayList<>( this.queryEngineProviders ), queryEngineProviders ) );\n-    }\n-\n-    // Dependencies implementation\n-    @Override\n-    public Monitors monitors()\n-    {\n-        return monitors;\n-    }\n-\n-    @Override\n-    public LogProvider userLogProvider()\n-    {\n-        return userLogProvider;\n-    }\n-\n-    @Override\n-    public Iterable<Class<?>> settingsClasses()\n-    {\n-        return settingsClasses;\n-    }\n-\n-    @Override\n-    public Iterable<KernelExtensionFactory<?>> kernelExtensions()\n-    {\n-        return kernelExtensions;\n-    }\n-\n-    @Override\n-    public Map<String,URLAccessRule> urlAccessRules()\n-    {\n-        return urlAccessRules;\n-    }\n-\n-    @Override\n-    public Iterable<QueryEngineProvider> executionEngines()\n-    {\n-        return queryEngineProviders;\n-    }\n+  public static GraphDatabaseDependencies newDependencies(GraphDatabaseFacadeFactory.Dependencies deps)\n+  {\n+    return new GraphDatabaseDependencies(deps.monitors(), deps.userLogProvider(), asList(deps.settingsClasses()),\n+        asList(deps.kernelExtensions()), deps.urlAccessRules(), asList(deps.executionEngines()));\n+  }\n+\n+  public static GraphDatabaseDependencies newDependencies()\n+  {\n+    List<KernelExtensionFactory<?>> kernelExtensions = new ArrayList<>();\n+    for (KernelExtensionFactory<?> factory : Service.load(KernelExtensionFactory.class))\n+    {\n+      kernelExtensions.add(factory);\n+    }\n+\n+    Map<String, URLAccessRule> urlAccessRules = new HashMap<>();\n+    urlAccessRules.put(\"http\", URLAccessRules.alwaysPermitted());\n+    urlAccessRules.put(\"https\", URLAccessRules.alwaysPermitted());\n+    urlAccessRules.put(\"ftp\", URLAccessRules.alwaysPermitted());\n+    urlAccessRules.put(\"file\", URLAccessRules.fileAccess());\n+\n+    List<QueryEngineProvider> queryEngineProviders = asList(Service.load(QueryEngineProvider.class));\n+\n+    return new GraphDatabaseDependencies(null, null, new ArrayList<>(), kernelExtensions,\n+        urlAccessRules, queryEngineProviders);\n+  }\n+\n+  private final Monitors monitors;\n+  private final LogProvider userLogProvider;\n+  private final List<Class<?>> settingsClasses;\n+  private final List<KernelExtensionFactory<?>> kernelExtensions;\n+  private final Map<String, URLAccessRule> urlAccessRules;\n+  private final List<QueryEngineProvider> queryEngineProviders;\n+\n+  private GraphDatabaseDependencies(\n+      Monitors monitors,\n+      LogProvider userLogProvider,\n+      List<Class<?>> settingsClasses,\n+      List<KernelExtensionFactory<?>> kernelExtensions,\n+      Map<String, URLAccessRule> urlAccessRules,\n+      List<QueryEngineProvider> queryEngineProviders)\n+  {\n+    this.monitors = monitors;\n+    this.userLogProvider = userLogProvider;\n+    this.settingsClasses = settingsClasses;\n+    this.kernelExtensions = kernelExtensions;\n+    this.urlAccessRules = Collections.unmodifiableMap(urlAccessRules);\n+    this.queryEngineProviders = queryEngineProviders;\n+  }\n+\n+  // Builder DSL\n+  public GraphDatabaseDependencies monitors(Monitors monitors)\n+  {\n+    return new GraphDatabaseDependencies(monitors, userLogProvider, settingsClasses, kernelExtensions,\n+        urlAccessRules, queryEngineProviders);\n+  }\n+\n+  public GraphDatabaseDependencies userLogProvider(LogProvider userLogProvider)\n+  {\n+    return new GraphDatabaseDependencies(monitors, userLogProvider, settingsClasses, kernelExtensions,\n+        urlAccessRules, queryEngineProviders);\n+  }\n+\n+  public GraphDatabaseDependencies settingsClasses(List<Class<?>> settingsClasses)\n+  {\n+    return new GraphDatabaseDependencies(monitors, userLogProvider, settingsClasses, kernelExtensions,\n+        urlAccessRules, queryEngineProviders);\n+  }\n+\n+  public GraphDatabaseDependencies settingsClasses(Class<?>... settingsClass)\n+  {\n+    settingsClasses.addAll(Arrays.asList(settingsClass));\n+    return new GraphDatabaseDependencies(monitors, userLogProvider, settingsClasses, kernelExtensions,\n+        urlAccessRules, queryEngineProviders);\n+  }\n+\n+  public GraphDatabaseDependencies kernelExtensions(Iterable<KernelExtensionFactory<?>> kernelExtensions)\n+  {\n+    return new GraphDatabaseDependencies(monitors, userLogProvider, settingsClasses,\n+        addAll(new ArrayList<>(), kernelExtensions),\n+        urlAccessRules, queryEngineProviders);\n+  }\n+\n+  public GraphDatabaseDependencies urlAccessRules(Map<String, URLAccessRule> urlAccessRules)\n+  {\n+    final HashMap<String, URLAccessRule> newUrlAccessRules = new HashMap<>(this.urlAccessRules);\n+    newUrlAccessRules.putAll(urlAccessRules);\n+    return new GraphDatabaseDependencies(monitors, userLogProvider, settingsClasses, kernelExtensions,\n+        newUrlAccessRules, queryEngineProviders);\n+  }\n+\n+  public GraphDatabaseDependencies queryEngineProviders(Iterable<QueryEngineProvider> queryEngineProviders)\n+  {\n+    return new GraphDatabaseDependencies(monitors, userLogProvider, settingsClasses, kernelExtensions,\n+        urlAccessRules, addAll(new ArrayList<>(this.queryEngineProviders), queryEngineProviders));\n+  }\n+\n+  // Dependencies implementation\n+  @Override\n+  public Monitors monitors()\n+  {\n+    return monitors;\n+  }\n+\n+  @Override\n+  public LogProvider userLogProvider()\n+  {\n+    return userLogProvider;\n+  }\n+\n+  @Override\n+  public Iterable<Class<?>> settingsClasses()\n+  {\n+    return settingsClasses;\n+  }\n+\n+  @Override\n+  public Iterable<KernelExtensionFactory<?>> kernelExtensions()\n+  {\n+    return kernelExtensions;\n+  }\n+\n+  @Override\n+  public Map<String, URLAccessRule> urlAccessRules()\n+  {\n+    return urlAccessRules;\n+  }\n+\n+  @Override\n+  public Iterable<QueryEngineProvider> executionEngines()\n+  {\n+    return queryEngineProviders;\n+  }\n }\n",
            "diff_size": 133
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}