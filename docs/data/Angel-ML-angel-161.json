{
    "project_name": "Angel-ML-angel",
    "error_id": "161",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/161/NodeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/161/NodeUtils.java\nindex 8dcd526d2b7..9c82aafffe8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/161/NodeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/161/NodeUtils.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.common.data;\n \n import com.tencent.angel.ml.math2.VFactory;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/161/NodeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/161/NodeUtils.java\nindex 8dcd526d2b7..a8264391e70 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/161/NodeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/161/NodeUtils.java\n@@ -41,8 +41,7 @@ public class NodeUtils {\n       len += 4;\n       len += 8 * feats.getSize();\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unsupport storage type \" + feats.getStorage().getClass().getName());\n+      throw new UnsupportedOperationException(\"Unsupport storage type \" + feats.getStorage().getClass().getName());\n     }\n \n     return len;\n@@ -59,9 +58,8 @@ public class NodeUtils {\n       }\n     } else if (feats.isSparse()) {\n       output.writeInt(StorageMethod.SPARSE.getValue());\n-      ObjectIterator<Entry> iter = feats\n-          .getStorage().entryIterator();\n-      while (iter.hasNext()) {\n+      ObjectIterator<Entry> iter = feats.getStorage().entryIterator();\n+while (iter.hasNext()) {\n         Entry entry = iter.next();\n         output.writeInt(entry.getIntKey());\n         output.writeFloat(entry.getFloatValue());\n@@ -115,7 +113,7 @@ public class NodeUtils {\n \n       default:\n         throw new UnsupportedOperationException(\"Unsupport storage type \" + storageMethod);\n-    }\n+  }\n \n     return feats;\n   }\n@@ -131,9 +129,8 @@ public class NodeUtils {\n       }\n     } else if (feats.isSparse()) {\n       output.writeInt(StorageMethod.SPARSE.getValue());\n-      ObjectIterator<Entry> iter = feats\n-          .getStorage().entryIterator();\n-      while (iter.hasNext()) {\n+      ObjectIterator<Entry> iter = feats.getStorage().entryIterator();\n+while (iter.hasNext()) {\n         Entry entry = iter.next();\n         output.writeInt(entry.getIntKey());\n         output.writeFloat(entry.getFloatValue());\n@@ -187,7 +184,7 @@ public class NodeUtils {\n \n       default:\n         throw new UnsupportedOperationException(\"Unsupport storage type \" + storageMethod);\n-    }\n+  }\n \n     return feats;\n   }\n@@ -288,4 +285,4 @@ public class NodeUtils {\n   public static int dataLen(double[] feats) {\n     return 4 + (feats == null ? 0 : feats.length * 8);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/161/NodeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/161/NodeUtils.java\nindex 8dcd526d2b7..7e85681d4e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/161/NodeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/161/NodeUtils.java\n@@ -38,13 +38,11 @@ public class NodeUtils {\n       len += 4;\n       len += 4 * feats.getSize();\n     } else if (feats.isSparse() || feats.isSorted()) {\n-      len += 4;\n-      len += 8 * feats.getSize();\n+             len += 4;\n+             len += 8 * feats.getSize();\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unsupport storage type \" + feats.getStorage().getClass().getName());\n+      throw new UnsupportedOperationException(\"Unsupport storage type \" + feats.getStorage().getClass().getName());\n     }\n-\n     return len;\n   }\n \n@@ -58,25 +56,25 @@ public class NodeUtils {\n         output.writeFloat(values[i]);\n       }\n     } else if (feats.isSparse()) {\n-      output.writeInt(StorageMethod.SPARSE.getValue());\n-      ObjectIterator<Entry> iter = feats\n-          .getStorage().entryIterator();\n-      while (iter.hasNext()) {\n-        Entry entry = iter.next();\n-        output.writeInt(entry.getIntKey());\n-        output.writeFloat(entry.getFloatValue());\n-      }\n+             output.writeInt(StorageMethod.SPARSE.getValue());\n+             ObjectIterator<Entry> iter = feats.getStorage().entryIterator();\n+             while (iter.hasNext()) {\n+               Entry entry = iter.next();\n+               output.writeInt(entry.getIntKey());\n+               output.writeFloat(entry.getFloatValue());\n+             }\n     } else if (feats.isSorted()) {\n-      output.writeInt(StorageMethod.SORTED.getValue());\n-      int[] keys = feats.getStorage().getIndices();\n-      float[] values = feats.getStorage().getValues();\n-      for (int i = 0; i < keys.length; i++) {\n-        output.writeInt(keys[i]);\n-        output.writeFloat(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\"Unsupport storage type \");\n-    }\n+             output.writeInt(StorageMethod.SORTED.getValue());\n+\n+             int[] keys = feats.getStorage().getIndices();\n+             float[] values = feats.getStorage().getValues();\n+             for (int i = 0; i < keys.length; i++) {\n+               output.writeInt(keys[i]);\n+               output.writeFloat(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"Unsupport storage type \");\n+           }\n   }\n \n   public static IntFloatVector deserialize(ByteBuf input) {\n@@ -116,7 +114,6 @@ public class NodeUtils {\n       default:\n         throw new UnsupportedOperationException(\"Unsupport storage type \" + storageMethod);\n     }\n-\n     return feats;\n   }\n \n@@ -130,25 +127,25 @@ public class NodeUtils {\n         output.writeFloat(values[i]);\n       }\n     } else if (feats.isSparse()) {\n-      output.writeInt(StorageMethod.SPARSE.getValue());\n-      ObjectIterator<Entry> iter = feats\n-          .getStorage().entryIterator();\n-      while (iter.hasNext()) {\n-        Entry entry = iter.next();\n-        output.writeInt(entry.getIntKey());\n-        output.writeFloat(entry.getFloatValue());\n-      }\n+             output.writeInt(StorageMethod.SPARSE.getValue());\n+             ObjectIterator<Entry> iter = feats.getStorage().entryIterator();\n+             while (iter.hasNext()) {\n+               Entry entry = iter.next();\n+               output.writeInt(entry.getIntKey());\n+               output.writeFloat(entry.getFloatValue());\n+             }\n     } else if (feats.isSorted()) {\n-      output.writeInt(StorageMethod.SORTED.getValue());\n-      int[] keys = feats.getStorage().getIndices();\n-      float[] values = feats.getStorage().getValues();\n-      for (int i = 0; i < keys.length; i++) {\n-        output.writeInt(keys[i]);\n-        output.writeFloat(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\"Unsupport storage type \");\n-    }\n+             output.writeInt(StorageMethod.SORTED.getValue());\n+\n+             int[] keys = feats.getStorage().getIndices();\n+             float[] values = feats.getStorage().getValues();\n+             for (int i = 0; i < keys.length; i++) {\n+               output.writeInt(keys[i]);\n+               output.writeFloat(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"Unsupport storage type \");\n+           }\n   }\n \n   public static IntFloatVector deserialize(DataInputStream input) throws IOException {\n@@ -188,7 +185,6 @@ public class NodeUtils {\n       default:\n         throw new UnsupportedOperationException(\"Unsupport storage type \" + storageMethod);\n     }\n-\n     return feats;\n   }\n \n@@ -214,7 +210,6 @@ public class NodeUtils {\n     }\n   }\n \n-\n   public static void serialize(float[] feats, DataOutputStream output) throws IOException {\n     if (feats != null) {\n       output.writeInt(feats.length);\n@@ -237,7 +232,6 @@ public class NodeUtils {\n     }\n   }\n \n-\n   public static float[] deserializeFloats(DataInputStream input) throws IOException {\n     int len = input.readInt();\n     if (len > 0) {\n@@ -288,4 +282,5 @@ public class NodeUtils {\n   public static int dataLen(double[] feats) {\n     return 4 + (feats == null ? 0 : feats.length * 8);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}