{
    "project_name": "Qihoo360-Quicksql",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "67",
                "column": "13",
                "severity": "error",
                "message": "'(' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
            }
        ]
    },
    "source_code": "        if (builder.getRunnerProperties().size() > 0 && builder.getRunnerProperties().getProperty(\"dbType\")\n            .equalsIgnoreCase\n            (\"mongo\")) {\n            properties.put(\"spark.mongodb.input.uri\", constructMongoUrl(builder.getRunnerProperties()));\n        }\n        return properties.entrySet().stream()",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/0/ArgumentsSupplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler/0/ArgumentsSupplier.java\nindex d2b40ae0f6f..8f018e00aec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/0/ArgumentsSupplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler/0/ArgumentsSupplier.java\n@@ -63,8 +63,7 @@ public class ArgumentsSupplier {\n             PropertiesReader.readProperties(\"quicksql-runner.properties\", this.getClass());\r\n         //only mongo query job need set 'spark.mongodb.input.uri' parameter.\r\n         if (builder.getRunnerProperties().size() > 0 && builder.getRunnerProperties().getProperty(\"dbType\")\r\n-            .equalsIgnoreCase\r\n-            (\"mongo\")) {\r\n+            .equalsIgnoreCase(\"mongo\")) {\r\n             properties.put(\"spark.mongodb.input.uri\", constructMongoUrl(builder.getRunnerProperties()));\r\n         }\r\n         return properties.entrySet().stream()\r\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "67",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/0/ArgumentsSupplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/intellij/0/ArgumentsSupplier.java\nindex d2b40ae0f6f..771a282ade0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/0/ArgumentsSupplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/intellij/0/ArgumentsSupplier.java\n@@ -64,7 +64,7 @@ public class ArgumentsSupplier {\n         //only mongo query job need set 'spark.mongodb.input.uri' parameter.\r\n         if (builder.getRunnerProperties().size() > 0 && builder.getRunnerProperties().getProperty(\"dbType\")\r\n             .equalsIgnoreCase\r\n-            (\"mongo\")) {\r\n+                (\"mongo\")) {\r\n             properties.put(\"spark.mongodb.input.uri\", constructMongoUrl(builder.getRunnerProperties()));\r\n         }\r\n         return properties.entrySet().stream()\r\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 12, expected level should be 84.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 12, expected level should be 84.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 8, expected level should be 80.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 12, expected level should be 84.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 12, expected level should be 84.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 8, expected level should be 80.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/0/ArgumentsSupplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/codebuff/0/ArgumentsSupplier.java\nindex d2b40ae0f6f..23a42b05bfd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/0/ArgumentsSupplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/codebuff/0/ArgumentsSupplier.java\n@@ -1,133 +1,124 @@\n-package com.qihoo.qsql.launcher;\r\n-\r\n-import com.qihoo.qsql.api.SqlRunner;\r\n-import com.qihoo.qsql.launcher.OptionsParser.SubmitOption;\r\n-import com.qihoo.qsql.utils.PropertiesReader;\r\n-import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import java.util.Properties;\r\n-import java.util.stream.Collectors;\r\n+package com.qihoo.qsql.launcher;\n+\n+import com.qihoo.qsql.api.SqlRunner;\n+import com.qihoo.qsql.launcher.OptionsParser.SubmitOption;\n+import com.qihoo.qsql.utils.PropertiesReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\r\n \r\n /**\r\n  * Generate Spark execution command.\r\n- */\r\n-public class ArgumentsSupplier {\r\n-\r\n-    public OptionsParser parser;\r\n-\r\n-    SqlRunner.Builder builder;\r\n-\r\n-    public ArgumentsSupplier(OptionsParser parser, SqlRunner.Builder builder) {\r\n-        this.parser = parser;\r\n-        this.builder = builder;\r\n+ */\n+\n+\n+public class ArgumentsSupplier {\n+\n+    public OptionsParser parser;\n+    SqlRunner.Builder builder;\n+\n+    public ArgumentsSupplier(OptionsParser parser, SqlRunner.Builder builder) {\n+        this.parser = parser;\n+        this.builder = builder;\n     }\r\n \r\n     /**\r\n      * Assemble spark options.\r\n      *\r\n      * @return options\r\n-     */\r\n-    public List<String> assemblySparkOptions() {\r\n-        List<String> arguments = new ArrayList<>();\r\n-        Arrays.stream(OptionsParser.SubmitOption.values())\r\n-            .filter(submission -> submission.sparkParam != null\r\n-                && !submission.sparkParam.equals(\"'non-opt'\"))\r\n-            .forEach(submission -> {\r\n-                arguments.add(longSparkOpt(submission));\r\n-                arguments.add(parser.getOptionValue(submission));\r\n-            });\r\n-\r\n-        List<String> conf = loadSparkConf();\r\n-        conf.forEach(attr -> {\r\n-            arguments.add(longSparkOpt(\"conf\"));\r\n-            arguments.add(attr);\r\n-        });\r\n-\r\n-\r\n-        arguments.add(longSparkOpt(\"class\"));\r\n-        arguments.add(ProcessExecutor.class.getCanonicalName());\r\n-        arguments.add(parser.getOptionValue(OptionsParser.SubmitOption.JAR_NAME));\r\n-        arguments.add(longSparkOpt(\"jar\"));\r\n-        arguments.add(parser.getOptionValue(SubmitOption.JAR));\r\n-        arguments.add(longSparkOpt(\"master\"));\r\n-        arguments.add(parser.getOptionValue(SubmitOption.MASTER_MODE));\r\n-        arguments.add(longSparkOpt(\"runner\"));\r\n-        arguments.add(parser.getOptionValue(OptionsParser.SubmitOption.RUNNER));\r\n-        return arguments;\r\n-    }\r\n-\r\n-    private List<String> loadSparkConf() {\r\n-        Properties properties =\r\n-            PropertiesReader.readProperties(\"quicksql-runner.properties\", this.getClass());\r\n-        //only mongo query job need set 'spark.mongodb.input.uri' parameter.\r\n-        if (builder.getRunnerProperties().size() > 0 && builder.getRunnerProperties().getProperty(\"dbType\")\r\n-            .equalsIgnoreCase\r\n-            (\"mongo\")) {\r\n-            properties.put(\"spark.mongodb.input.uri\", constructMongoUrl(builder.getRunnerProperties()));\r\n-        }\r\n-        return properties.entrySet().stream()\r\n-            .filter(conf -> conf.getKey().toString().startsWith(\"spark\"))\r\n-            .map(conf -> conf.getKey() + \"=\" + conf.getValue())\r\n-            .collect(Collectors.toList());\r\n-    }\r\n-\r\n-    private String longSparkOpt(OptionsParser.SubmitOption option) {\r\n-        return \"--\" + option.sparkParam;\r\n-    }\r\n-\r\n-    private String longSparkOpt(String attr) {\r\n-        return \"--\" + attr;\r\n+     */\n+\n+\n+    public List<String> assemblySparkOptions() {\n+        List<String> arguments = new ArrayList<>();\n+        Arrays.stream(OptionsParser.SubmitOption.values()).filter(submission -> submission.sparkParam != null\n+                                                                                && ! submission.sparkParam.equals(\"'non-opt'\")).forEach(submission -> {\n+            arguments.add(longSparkOpt(submission));\n+            arguments.add(parser.getOptionValue(submission));\n+        });\n+        List<String> conf = loadSparkConf();\n+        conf.forEach(attr -> {\n+            arguments.add(longSparkOpt(\"conf\"));\n+            arguments.add(attr);\n+        });\n+        arguments.add(longSparkOpt(\"class\"));\n+        arguments.add(ProcessExecutor.class.getCanonicalName());\n+        arguments.add(parser.getOptionValue(OptionsParser.SubmitOption.JAR_NAME));\n+        arguments.add(longSparkOpt(\"jar\"));\n+        arguments.add(parser.getOptionValue(SubmitOption.JAR));\n+        arguments.add(longSparkOpt(\"master\"));\n+        arguments.add(parser.getOptionValue(SubmitOption.MASTER_MODE));\n+        arguments.add(longSparkOpt(\"runner\"));\n+        arguments.add(parser.getOptionValue(OptionsParser.SubmitOption.RUNNER));\n+        return arguments;\n+    }\n+\n+    private List<String> loadSparkConf() {\n+        Properties properties = PropertiesReader.readProperties(\"quicksql-runner.properties\", this.getClass());\r\n+        //only mongo query job need set 'spark.mongodb.input.uri' parameter.\n+        if (builder.getRunnerProperties().size() > 0\n+            && builder.getRunnerProperties().getProperty(\"dbType\")\n+                                            .equalsIgnoreCase(\"mongo\")) {\n+            properties.put(\"spark.mongodb.input.uri\",\n+                constructMongoUrl(builder.getRunnerProperties()));\n+        }\n+        return properties.entrySet().stream()\n+                                    .filter(conf -> conf.getKey().toString()\n+                                                                 .startsWith(\"spark\"))\n+                                    .map(conf -> conf.getKey() + \"=\" + conf.getValue())\n+                                    .collect(Collectors.toList());\n+    }\n+\n+    private String longSparkOpt(OptionsParser.SubmitOption option) {\n+        return \"--\" + option.sparkParam;\n+    }\n+\n+    private String longSparkOpt(String attr) {\n+        return \"--\" + attr;\n     }\r\n \r\n     /**\r\n      * Assemble flink options.\r\n      *\r\n      * @return options\r\n-     */\r\n-    public List<String> assemblyFlinkOptions() {\r\n-        List<String> arguments = new ArrayList<>();\r\n-        Arrays.stream(OptionsParser.SubmitOption.values())\r\n-            .filter(submission -> submission.flinkParam != null\r\n-                && !submission.flinkParam.equals(\"'non-opt'\"))\r\n-            .forEach(submission -> {\r\n-                arguments.add(longSparkOpt(submission));\r\n-                arguments.add(parser.getOptionValue(submission));\r\n-            });\r\n+     */\n+\n+    public List<String> assemblyFlinkOptions() {\n+        List<String> arguments = new ArrayList<>();\n+        Arrays.stream(OptionsParser.SubmitOption.values()).filter(submission -> submission.flinkParam != null\n+                                                                                && ! submission.flinkParam.equals(\"'non-opt'\")).forEach(submission -> {\n+            arguments.add(longSparkOpt(submission));\n+            arguments.add(parser.getOptionValue(submission));\n+        });\r\n \r\n         // List<String> conf = loadSparkConf();\r\n         // conf.forEach(attr -> {\r\n         //     arguments.add(longSparkOpt(\"conf\"));\r\n         //     arguments.add(attr);\r\n-        // });\r\n-\r\n-\r\n-        arguments.add(longSparkOpt(\"class\"));\r\n-        arguments.add(ProcessExecutor.class.getCanonicalName());\r\n-        arguments.add(parser.getOptionValue(OptionsParser.SubmitOption.JAR_NAME));\r\n-        arguments.add(longSparkOpt(\"jar\"));\r\n-        arguments.add(parser.getOptionValue(SubmitOption.JAR));\r\n-        arguments.add(longSparkOpt(\"master\"));\r\n-        arguments.add(parser.getOptionValue(SubmitOption.MASTER_MODE));\r\n-        arguments.add(longSparkOpt(\"runner\"));\r\n-        arguments.add(parser.getOptionValue(OptionsParser.SubmitOption.RUNNER));\r\n-        return arguments;\r\n-    }\r\n-\r\n-\r\n+        // });\n+        arguments.add(longSparkOpt(\"class\"));\n+        arguments.add(ProcessExecutor.class.getCanonicalName());\n+        arguments.add(parser.getOptionValue(OptionsParser.SubmitOption.JAR_NAME));\n+        arguments.add(longSparkOpt(\"jar\"));\n+        arguments.add(parser.getOptionValue(SubmitOption.JAR));\n+        arguments.add(longSparkOpt(\"master\"));\n+        arguments.add(parser.getOptionValue(SubmitOption.MASTER_MODE));\n+        arguments.add(longSparkOpt(\"runner\"));\n+        arguments.add(parser.getOptionValue(OptionsParser.SubmitOption.RUNNER));\n+        return arguments;\n+    }\n+\n     protected String constructMongoUrl(Properties properties) {\r\n-        //mongodb url like \"mongodb://user:pass@localhost:27017/dbName.collectionName\")\r\n-        StringBuilder mongoUrl = new StringBuilder();\r\n-        mongoUrl.append(\"mongodb://\")\r\n-            .append(StringUtils.isNotEmpty(properties.getProperty(\"userName\")) ? properties.getProperty(\"userName\")\r\n-                + \":\" : \"\")\r\n-            .append(StringUtils.isNotEmpty(properties.getProperty(\"password\"))\r\n-                ? properties.getProperty(\"password\") : \"\")\r\n-            .append(\"@\" + properties.getProperty(\"host\"))\r\n-            .append(\":\" + properties.getProperty(\"port\"))\r\n-            .append(\"/\" + properties.getProperty(\"dbName\"))\r\n-            .append(\".\" + properties.getProperty(\"collectionName\"));\r\n-        return mongoUrl.toString();\r\n-    }\r\n-}\r\n+        //mongodb url like \"mongodb://user:pass@localhost:27017/dbName.collectionName\")\n+        StringBuilder mongoUrl = new StringBuilder();\n+        mongoUrl.append(\"mongodb://\").append(StringUtils.isNotEmpty(properties.getProperty(\"userName\")) ? properties.getProperty(\"userName\") + \":\" : \"\")\n+            .append(StringUtils.isNotEmpty(properties.getProperty(\"password\")) ? properties.getProperty(\"password\") : \"\")\n+            .append(\"@\" + properties.getProperty(\"host\"))\n+            .append(\":\" + properties.getProperty(\"port\"))\n+            .append(\"/\" + properties.getProperty(\"dbName\")).append(\".\" + properties.getProperty(\"collectionName\"));\n+        return mongoUrl.toString();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 112
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/0/ArgumentsSupplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler_random/0/ArgumentsSupplier.java\nindex d2b40ae0f6f..8f018e00aec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/0/ArgumentsSupplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler_random/0/ArgumentsSupplier.java\n@@ -63,8 +63,7 @@ public class ArgumentsSupplier {\n             PropertiesReader.readProperties(\"quicksql-runner.properties\", this.getClass());\r\n         //only mongo query job need set 'spark.mongodb.input.uri' parameter.\r\n         if (builder.getRunnerProperties().size() > 0 && builder.getRunnerProperties().getProperty(\"dbType\")\r\n-            .equalsIgnoreCase\r\n-            (\"mongo\")) {\r\n+            .equalsIgnoreCase(\"mongo\")) {\r\n             properties.put(\"spark.mongodb.input.uri\", constructMongoUrl(builder.getRunnerProperties()));\r\n         }\r\n         return properties.entrySet().stream()\r\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/0/ArgumentsSupplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler_three_grams/0/ArgumentsSupplier.java\nindex d2b40ae0f6f..8f018e00aec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/0/ArgumentsSupplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler_three_grams/0/ArgumentsSupplier.java\n@@ -63,8 +63,7 @@ public class ArgumentsSupplier {\n             PropertiesReader.readProperties(\"quicksql-runner.properties\", this.getClass());\r\n         //only mongo query job need set 'spark.mongodb.input.uri' parameter.\r\n         if (builder.getRunnerProperties().size() > 0 && builder.getRunnerProperties().getProperty(\"dbType\")\r\n-            .equalsIgnoreCase\r\n-            (\"mongo\")) {\r\n+            .equalsIgnoreCase(\"mongo\")) {\r\n             properties.put(\"spark.mongodb.input.uri\", constructMongoUrl(builder.getRunnerProperties()));\r\n         }\r\n         return properties.entrySet().stream()\r\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}