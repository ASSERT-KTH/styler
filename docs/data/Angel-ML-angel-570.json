{
    "project_name": "Angel-ML-angel",
    "error_id": "570",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/570/SerDe.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/570/SerDe.java\nindex c398fea6234..9482e7552e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/570/SerDe.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/570/SerDe.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.node2vec.utils;\n \n import io.netty.buffer.ByteBuf;\n@@ -261,7 +262,7 @@ public class SerDe {\n   }\n \n   public static <ARR> void serLong2ArrayHashMap(long[] arr, int start, int end,\n-      Long2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n+                                                Long2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n     buf.writeInt(end - start);\n \n     for (int i = start; i < end; i++) {\n@@ -315,7 +316,7 @@ public class SerDe {\n   }\n \n   public static <ARR> int getLong2ArrayHashMapSerSize(long[] arr, int start, int end,\n-      Long2ObjectOpenHashMap<ARR> obj) {\n+                                                      Long2ObjectOpenHashMap<ARR> obj) {\n     if (obj == null) {\n       return 4;\n     } else {\n@@ -433,7 +434,7 @@ public class SerDe {\n   }\n \n   public static <ARR> void serInt2ArrayHashMap(int[] arr, int start, int end,\n-      Int2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n+                                               Int2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n     buf.writeInt(end - start);\n \n     for (int i = start; i < end; i++) {\n@@ -487,7 +488,7 @@ public class SerDe {\n   }\n \n   public static <ARR> int getInt2ArrayHashMapSerSize(int[] arr, int start, int end,\n-      Int2ObjectOpenHashMap<ARR> obj) {\n+                                                     Int2ObjectOpenHashMap<ARR> obj) {\n     if (obj == null) {\n       return 4;\n     } else {\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/570/SerDe.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/570/SerDe.java\nindex c398fea6234..7925df35dfe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/570/SerDe.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/570/SerDe.java\n@@ -262,7 +262,7 @@ public class SerDe {\n \n   public static <ARR> void serLong2ArrayHashMap(long[] arr, int start, int end,\n       Long2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n-    buf.writeInt(end - start);\n+  buf.writeInt(end - start);\n \n     for (int i = start; i < end; i++) {\n       long key = arr[i];\n@@ -316,7 +316,7 @@ public class SerDe {\n \n   public static <ARR> int getLong2ArrayHashMapSerSize(long[] arr, int start, int end,\n       Long2ObjectOpenHashMap<ARR> obj) {\n-    if (obj == null) {\n+  if (obj == null) {\n       return 4;\n     } else {\n       int len = 4;\n@@ -434,7 +434,7 @@ public class SerDe {\n \n   public static <ARR> void serInt2ArrayHashMap(int[] arr, int start, int end,\n       Int2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n-    buf.writeInt(end - start);\n+  buf.writeInt(end - start);\n \n     for (int i = start; i < end; i++) {\n       int key = arr[i];\n@@ -488,7 +488,7 @@ public class SerDe {\n \n   public static <ARR> int getInt2ArrayHashMapSerSize(int[] arr, int start, int end,\n       Int2ObjectOpenHashMap<ARR> obj) {\n-    if (obj == null) {\n+  if (obj == null) {\n       return 4;\n     } else {\n       int len = 4;\n@@ -607,4 +607,4 @@ public class SerDe {\n \n     return result;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "246",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "297",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "400",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "451",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/570/SerDe.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/570/SerDe.java\nindex c398fea6234..953735ec0de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/570/SerDe.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/570/SerDe.java\n@@ -29,12 +29,10 @@ public class SerDe {\n \n   public static void serArray(int[] arr, ByteBuf buf) {\n     assert buf != null;\n-\n     if (arr == null) {\n       buf.writeInt(0);\n     } else {\n       buf.writeInt(arr.length);\n-\n       for (int e : arr) {\n         buf.writeInt(e);\n       }\n@@ -44,12 +42,10 @@ public class SerDe {\n   public static void serArray(int[] arr, int start, int end, ByteBuf buf) {\n     assert buf != null;\n     assert end >= start;\n-\n     if (arr == null) {\n       buf.writeInt(0);\n     } else {\n       buf.writeInt(end - start);\n-\n       for (int i = start; i < end; i++) {\n         buf.writeInt(arr[i]);\n       }\n@@ -81,12 +77,10 @@ public class SerDe {\n \n   public static void serArray(long[] arr, ByteBuf buf) {\n     assert buf != null;\n-\n     if (arr == null) {\n       buf.writeInt(0);\n     } else {\n       buf.writeInt(arr.length);\n-\n       for (long e : arr) {\n         buf.writeLong(e);\n       }\n@@ -96,12 +90,10 @@ public class SerDe {\n   public static void serArray(long[] arr, int start, int end, ByteBuf buf) {\n     assert buf != null;\n     assert end >= start;\n-\n     if (arr == null) {\n       buf.writeInt(0);\n     } else {\n       buf.writeInt(end - start);\n-\n       for (int i = start; i < end; i++) {\n         buf.writeLong(arr[i]);\n       }\n@@ -133,12 +125,10 @@ public class SerDe {\n \n   public static void serArray(float[] arr, ByteBuf buf) {\n     assert buf != null;\n-\n     if (arr == null) {\n       buf.writeInt(0);\n     } else {\n       buf.writeInt(arr.length);\n-\n       for (float e : arr) {\n         buf.writeFloat(e);\n       }\n@@ -148,12 +138,10 @@ public class SerDe {\n   public static void serArray(float[] arr, int start, int end, ByteBuf buf) {\n     assert buf != null;\n     assert end >= start;\n-\n     if (arr == null) {\n       buf.writeInt(0);\n     } else {\n       buf.writeInt(end - start);\n-\n       for (int i = start; i < end; i++) {\n         buf.writeFloat(arr[i]);\n       }\n@@ -185,12 +173,10 @@ public class SerDe {\n \n   public static void serArray(double[] arr, ByteBuf buf) {\n     assert buf != null;\n-\n     if (arr == null) {\n       buf.writeInt(0);\n     } else {\n       buf.writeInt(arr.length);\n-\n       for (double e : arr) {\n         buf.writeDouble(e);\n       }\n@@ -200,12 +186,10 @@ public class SerDe {\n   public static void serArray(double[] arr, int start, int end, ByteBuf buf) {\n     assert buf != null;\n     assert end >= start;\n-\n     if (arr == null) {\n       buf.writeInt(0);\n     } else {\n       buf.writeInt(end - start);\n-\n       for (int i = start; i < end; i++) {\n         buf.writeDouble(arr[i]);\n       }\n@@ -237,7 +221,6 @@ public class SerDe {\n \n   public static <ARR> void serLong2ArrayHashMap(Long2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n     buf.writeInt(obj.size());\n-\n     ObjectIterator<Long2ObjectMap.Entry<ARR>> iter = obj.long2ObjectEntrySet().fastIterator();\n     while (iter.hasNext()) {\n       Long2ObjectMap.Entry<ARR> entry = iter.next();\n@@ -260,10 +243,8 @@ public class SerDe {\n     }\n   }\n \n-  public static <ARR> void serLong2ArrayHashMap(long[] arr, int start, int end,\n-      Long2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n+  public static <ARR> void serLong2ArrayHashMap(long[] arr, int start, int end, Long2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n     buf.writeInt(end - start);\n-\n     for (int i = start; i < end; i++) {\n       long key = arr[i];\n       buf.writeLong(key);\n@@ -309,13 +290,11 @@ public class SerDe {\n             break;\n         }\n       }\n-\n       return len;\n     }\n   }\n \n-  public static <ARR> int getLong2ArrayHashMapSerSize(long[] arr, int start, int end,\n-      Long2ObjectOpenHashMap<ARR> obj) {\n+  public static <ARR> int getLong2ArrayHashMapSerSize(long[] arr, int start, int end, Long2ObjectOpenHashMap<ARR> obj) {\n     if (obj == null) {\n       return 4;\n     } else {\n@@ -338,78 +317,64 @@ public class SerDe {\n             break;\n         }\n       }\n-\n       return len;\n     }\n   }\n \n   public static Long2ObjectOpenHashMap<int[]> deserLong2IntArray(ByteBuf buf) {\n     int size = buf.readInt();\n-\n     if (size <= 0) {\n       return null;\n     } else {\n       Long2ObjectOpenHashMap<int[]> obj = new Long2ObjectOpenHashMap<>(size);\n-\n       for (int i = 0; i < size; i++) {\n         obj.put(buf.readLong(), deserIntArray(buf));\n       }\n-\n       return obj;\n     }\n   }\n \n   public static Long2ObjectOpenHashMap<long[]> deserLong2LongArray(ByteBuf buf) {\n     int size = buf.readInt();\n-\n     if (size <= 0) {\n       return null;\n     } else {\n       Long2ObjectOpenHashMap<long[]> obj = new Long2ObjectOpenHashMap<>(size);\n-\n       for (int i = 0; i < size; i++) {\n         obj.put(buf.readLong(), deserLongArray(buf));\n       }\n-\n       return obj;\n     }\n   }\n \n   public static Long2ObjectOpenHashMap<float[]> deserLong2FloatArray(ByteBuf buf) {\n     int size = buf.readInt();\n-\n     if (size <= 0) {\n       return null;\n     } else {\n       Long2ObjectOpenHashMap<float[]> obj = new Long2ObjectOpenHashMap<>(size);\n-\n       for (int i = 0; i < size; i++) {\n         obj.put(buf.readLong(), deserFloatArray(buf));\n       }\n-\n       return obj;\n     }\n   }\n \n   public static Long2ObjectOpenHashMap<double[]> deserLong2DoubleArray(ByteBuf buf) {\n     int size = buf.readInt();\n-\n     if (size <= 0) {\n       return null;\n     } else {\n       Long2ObjectOpenHashMap<double[]> obj = new Long2ObjectOpenHashMap<>(size);\n-\n       for (int i = 0; i < size; i++) {\n         obj.put(buf.readLong(), deserDoubleArray(buf));\n       }\n-\n       return obj;\n     }\n   }\n \n   public static <ARR> void serInt2ArrayHashMap(Int2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n     buf.writeInt(obj.size());\n-\n     ObjectIterator<Int2ObjectMap.Entry<ARR>> iter = obj.int2ObjectEntrySet().fastIterator();\n     while (iter.hasNext()) {\n       Int2ObjectMap.Entry<ARR> entry = iter.next();\n@@ -432,10 +397,8 @@ public class SerDe {\n     }\n   }\n \n-  public static <ARR> void serInt2ArrayHashMap(int[] arr, int start, int end,\n-      Int2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n+  public static <ARR> void serInt2ArrayHashMap(int[] arr, int start, int end, Int2ObjectOpenHashMap<ARR> obj, ByteBuf buf) {\n     buf.writeInt(end - start);\n-\n     for (int i = start; i < end; i++) {\n       int key = arr[i];\n       buf.writeInt(key);\n@@ -481,13 +444,11 @@ public class SerDe {\n             break;\n         }\n       }\n-\n       return len;\n     }\n   }\n \n-  public static <ARR> int getInt2ArrayHashMapSerSize(int[] arr, int start, int end,\n-      Int2ObjectOpenHashMap<ARR> obj) {\n+  public static <ARR> int getInt2ArrayHashMapSerSize(int[] arr, int start, int end, Int2ObjectOpenHashMap<ARR> obj) {\n     if (obj == null) {\n       return 4;\n     } else {\n@@ -510,71 +471,58 @@ public class SerDe {\n             break;\n         }\n       }\n-\n       return len;\n     }\n   }\n \n   public static Int2ObjectOpenHashMap<int[]> deserInt2IntArray(ByteBuf buf) {\n     int size = buf.readInt();\n-\n     if (size <= 0) {\n       return null;\n     } else {\n       Int2ObjectOpenHashMap<int[]> obj = new Int2ObjectOpenHashMap<>(size);\n-\n       for (int i = 0; i < size; i++) {\n         obj.put(buf.readInt(), deserIntArray(buf));\n       }\n-\n       return obj;\n     }\n   }\n \n   public static Int2ObjectOpenHashMap<long[]> deserInt2LongArray(ByteBuf buf) {\n     int size = buf.readInt();\n-\n     if (size <= 0) {\n       return null;\n     } else {\n       Int2ObjectOpenHashMap<long[]> obj = new Int2ObjectOpenHashMap<>(size);\n-\n       for (int i = 0; i < size; i++) {\n         obj.put(buf.readInt(), deserLongArray(buf));\n       }\n-\n       return obj;\n     }\n   }\n \n   public static Int2ObjectOpenHashMap<float[]> deserInt2FloatArray(ByteBuf buf) {\n     int size = buf.readInt();\n-\n     if (size <= 0) {\n       return null;\n     } else {\n       Int2ObjectOpenHashMap<float[]> obj = new Int2ObjectOpenHashMap<>(size);\n-\n       for (int i = 0; i < size; i++) {\n         obj.put(buf.readInt(), deserFloatArray(buf));\n       }\n-\n       return obj;\n     }\n   }\n \n   public static Int2ObjectOpenHashMap<double[]> deserInt2DoubleArray(ByteBuf buf) {\n     int size = buf.readInt();\n-\n     if (size <= 0) {\n       return null;\n     } else {\n       Int2ObjectOpenHashMap<double[]> obj = new Int2ObjectOpenHashMap<>(size);\n-\n       for (int i = 0; i < size; i++) {\n         obj.put(buf.readInt(), deserDoubleArray(buf));\n       }\n-\n       return obj;\n     }\n   }\n@@ -595,7 +543,6 @@ public class SerDe {\n \n   public static Int2IntOpenHashMap deserInt2IntMap(ByteBuf buf) {\n     int size = buf.readInt();\n-\n     if (size == 0) {\n       return null;\n     }\n@@ -604,7 +551,7 @@ public class SerDe {\n     for (int i = 0; i < size; i++) {\n       result.put(buf.readInt(), buf.readInt());\n     }\n-\n     return result;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}