{
    "project_name": "Angel-ML-angel",
    "error_id": "605",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/605/IntDoubleSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/605/IntDoubleSortedVectorStorage.java\nindex c5a2e662e7f..0571dc9253e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/605/IntDoubleSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/605/IntDoubleSortedVectorStorage.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.math2.utils.ArrayCopy;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "310",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/605/IntDoubleSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/605/IntDoubleSortedVectorStorage.java\nindex c5a2e662e7f..6a60b46c2fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/605/IntDoubleSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/605/IntDoubleSortedVectorStorage.java\n@@ -307,8 +307,7 @@ public class IntDoubleSortedVectorStorage implements IntDoubleVectorStorage {\n \n   @Override\n   public boolean hasKey(int key) {\n-    return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n-        && Arrays.binarySearch(indices, 0, size - 1, key) > 0);\n+    return (size != 0 && key <= indices[size - 1] && key >= indices[0] && Arrays.binarySearch(indices, 0, size - 1, key) > 0);\n   }\n \n   @Override\n@@ -341,4 +340,4 @@ public class IntDoubleSortedVectorStorage implements IntDoubleVectorStorage {\n   public double[] getValues() {\n     return values;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "312",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/605/IntDoubleSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/605/IntDoubleSortedVectorStorage.java\nindex c5a2e662e7f..fa2c8096486 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/605/IntDoubleSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/605/IntDoubleSortedVectorStorage.java\n@@ -59,7 +59,7 @@ public class IntDoubleSortedVectorStorage implements IntDoubleVectorStorage {\n     if (idx < 0 || idx > dim - 1) {\n       throw new ArrayIndexOutOfBoundsException();\n     } else if (size == 0 || idx > indices[size - 1] || idx < indices[0]) {\n-      return 0;\n+             return 0;\n     } else {\n       int i = Arrays.binarySearch(indices, 0, size - 1, idx);\n       return i >= 0 ? values[i] : 0;\n@@ -73,22 +73,24 @@ public class IntDoubleSortedVectorStorage implements IntDoubleVectorStorage {\n     }\n \n     // 1. find the insert point\n+\n     int point;\n     if (size == 0 || idx < indices[0]) {\n       point = 0;\n     } else if (idx > indices[size - 1]) {\n-      point = size;\n+             point = size;\n     } else {\n-      point = Arrays.binarySearch(indices, 0, size - 1, idx);\n-      if (point >= 0) {\n-        values[point] = value;\n-        return;\n-      } else {\n-        point = -(point + 1);\n-      }\n+             point = Arrays.binarySearch(indices, 0, size - 1, idx);\n+             if (point >= 0) {\n+               values[point] = value;\n+               return;\n+             } else {\n+               point = -(point + 1);\n+             }\n     }\n \n     // 2. check the capacity and insert\n+\n     if (size == indices.length) {\n       int[] newIdxs = new int[(int) (indices.length * 1.5)];\n       double[] newValues = new double[(int) (indices.length * 1.5)];\n@@ -96,13 +98,13 @@ public class IntDoubleSortedVectorStorage implements IntDoubleVectorStorage {\n         System.arraycopy(indices, 0, newIdxs, 1, size);\n         System.arraycopy(values, 0, newValues, 1, size);\n       } else if (point == size) {\n-        System.arraycopy(indices, 0, newIdxs, 0, size);\n-        System.arraycopy(values, 0, newValues, 0, size);\n+               System.arraycopy(indices, 0, newIdxs, 0, size);\n+               System.arraycopy(values, 0, newValues, 0, size);\n       } else {\n-        System.arraycopy(indices, 0, newIdxs, 0, point);\n-        System.arraycopy(values, 0, newValues, 0, point);\n-        System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n-        System.arraycopy(values, point, newValues, point + 1, size - point);\n+               System.arraycopy(indices, 0, newIdxs, 0, point);\n+               System.arraycopy(values, 0, newValues, 0, point);\n+               System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n+               System.arraycopy(values, point, newValues, point + 1, size - point);\n       }\n       newIdxs[point] = idx;\n       newValues[point] = value;\n@@ -123,14 +125,12 @@ public class IntDoubleSortedVectorStorage implements IntDoubleVectorStorage {\n \n   @Override\n   public IntDoubleVectorStorage clone() {\n-    return new IntDoubleSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n+    return new IntDoubleSortedVectorStorage(dim, size, ArrayCopy.copy(indices), ArrayCopy.copy(values));\n   }\n \n   @Override\n   public IntDoubleVectorStorage copy() {\n-    return new IntDoubleSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n+    return new IntDoubleSortedVectorStorage(dim, size, ArrayCopy.copy(indices), ArrayCopy.copy(values));\n   }\n \n   @Override\n@@ -184,6 +184,7 @@ public class IntDoubleSortedVectorStorage implements IntDoubleVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -227,6 +228,7 @@ public class IntDoubleSortedVectorStorage implements IntDoubleVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -307,8 +309,7 @@ public class IntDoubleSortedVectorStorage implements IntDoubleVectorStorage {\n \n   @Override\n   public boolean hasKey(int key) {\n-    return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n-        && Arrays.binarySearch(indices, 0, size - 1, key) > 0);\n+    return (size != 0 && key <= indices[size - 1] && key >= indices[0] && Arrays.binarySearch(indices, 0, size - 1, key) > 0);\n   }\n \n   @Override\n@@ -333,12 +334,13 @@ public class IntDoubleSortedVectorStorage implements IntDoubleVectorStorage {\n \n   @Override\n   public void clear() {\n-    Arrays.parallelSetAll(indices, (int value) -> 0);\n-    Arrays.parallelSetAll(values, (int value) -> 0);\n+    Arrays.parallelSetAll(indices, (int value)-> 0);\n+    Arrays.parallelSetAll(values, (int value)-> 0);\n   }\n \n   @Override\n   public double[] getValues() {\n     return values;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}