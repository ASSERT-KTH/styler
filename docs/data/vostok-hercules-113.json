{
    "project_name": "vostok-hercules",
    "error_id": "113",
    "information": {
        "errors": [
            {
                "line": "53",
                "column": "9",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "     */\n    public static Map<String, Object> toObjectMap(final Container container, @Nullable Set<String> exclusionSet) {\n        if(exclusionSet == null) {\n            exclusionSet = Collections.emptySet();\n        }\n        Map<String, Object> map = new HashMap<>();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/113/ContainerUtil.java\nindex 381c1d3d81c..21c78683cf0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/113/ContainerUtil.java\n@@ -50,7 +50,7 @@ public class ContainerUtil {\n      * @return result Object Map\n      */\n     public static Map<String, Object> toObjectMap(final Container container, @Nullable Set<String> exclusionSet) {\n-        if(exclusionSet == null) {\n+        if (exclusionSet == null) {\n             exclusionSet = Collections.emptySet();\n         }\n         Map<String, Object> map = new HashMap<>();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/113/ContainerUtil.java\nindex 381c1d3d81c..29a4ed29e23 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/113/ContainerUtil.java\n@@ -20,51 +20,51 @@ import java.util.function.Function;\n  */\n public class ContainerUtil {\n \n-    public static <T> T extract(Container container, TagDescription<T> tag) {\n-        Variant variant = container.get(tag.getName());\n-        Type type = Optional.ofNullable(variant).map(Variant::getType).orElse(null);\n-        Function<Object, ? extends T> extractor = tag.getExtractors().get(type);\n-        if (Objects.isNull(extractor)) {\n-            throw new IllegalArgumentException(String.format(\"Tag '%s' cannot contain value of type '%s'\", tag.getName(),  type));\n-        } else {\n-            Object value = Optional.ofNullable(variant).map(Variant::getValue).orElse(null);\n-            return extractor.apply(value);\n-        }\n+  public static <T> T extract(Container container, TagDescription<T> tag) {\n+    Variant variant = container.get(tag.getName());\n+    Type type = Optional.ofNullable(variant).map(Variant::getType).orElse(null);\n+    Function<Object, ? extends T> extractor = tag.getExtractors().get(type);\n+    if (Objects.isNull(extractor)) {\n+      throw new IllegalArgumentException(String.format(\"Tag '%s' cannot contain value of type '%s'\", tag.getName(), type));\n+    } else {\n+      Object value = Optional.ofNullable(variant).map(Variant::getValue).orElse(null);\n+      return extractor.apply(value);\n     }\n+  }\n \n-    /**\n-     * Converts Container to Object Map\n-     *\n-     * @param container Container for converting\n-     * @return result Object Map\n-     */\n-    public static Map<String, Object> toObjectMap(final Container container) {\n-        return toObjectMap(container, null);\n-    }\n+  /**\n+   * Converts Container to Object Map\n+   *\n+   * @param container Container for converting\n+   * @return result Object Map\n+   */\n+  public static Map<String, Object> toObjectMap(final Container container) {\n+    return toObjectMap(container, null);\n+  }\n \n-    /**\n-     * Converts Container to Object Map\n-     *\n-     * @param container Container for converting\n-     * @param exclusionSet Set of string keys which should not be put to result Map\n-     * @return result Object Map\n-     */\n-    public static Map<String, Object> toObjectMap(final Container container, @Nullable Set<String> exclusionSet) {\n-        if(exclusionSet == null) {\n-            exclusionSet = Collections.emptySet();\n-        }\n-        Map<String, Object> map = new HashMap<>();\n-        for (Map.Entry<String, Variant> entry : container) {\n-            String key = entry.getKey();\n-            if (!exclusionSet.contains(key)) {\n-                Optional<Object> valueOptional = VariantUtil.extract(entry.getValue());\n-                map.put(key, valueOptional.orElse(null));\n-            }\n-        }\n-        return map;\n+  /**\n+   * Converts Container to Object Map\n+   *\n+   * @param container    Container for converting\n+   * @param exclusionSet Set of string keys which should not be put to result Map\n+   * @return result Object Map\n+   */\n+  public static Map<String, Object> toObjectMap(final Container container, @Nullable Set<String> exclusionSet) {\n+    if (exclusionSet == null) {\n+      exclusionSet = Collections.emptySet();\n     }\n-\n-    private ContainerUtil() {\n-        /* static class */\n+    Map<String, Object> map = new HashMap<>();\n+    for (Map.Entry<String, Variant> entry : container) {\n+      String key = entry.getKey();\n+      if (!exclusionSet.contains(key)) {\n+        Optional<Object> valueOptional = VariantUtil.extract(entry.getValue());\n+        map.put(key, valueOptional.orElse(null));\n+      }\n     }\n+    return map;\n+  }\n+\n+  private ContainerUtil() {\n+    /* static class */\n+  }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/113/ContainerUtil.java\nindex 381c1d3d81c..017bed69972 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/113/ContainerUtil.java\n@@ -38,7 +38,8 @@ public class ContainerUtil {\n      * @param container Container for converting\n      * @return result Object Map\n      */\n-    public static Map<String, Object> toObjectMap(final Container container) {\n+    public static Map<String, Object> toObjectMap(\n+        final Container container) {\n         return toObjectMap(container, null);\n     }\n \n@@ -49,8 +50,10 @@ public class ContainerUtil {\n      * @param exclusionSet Set of string keys which should not be put to result Map\n      * @return result Object Map\n      */\n-    public static Map<String, Object> toObjectMap(final Container container, @Nullable Set<String> exclusionSet) {\n-        if(exclusionSet == null) {\n+    public static Map<String, Object> toObjectMap(\n+        final Container container,\n+@Nullable Set<String> exclusionSet) {\n+        if (exclusionSet == null) {\n             exclusionSet = Collections.emptySet();\n         }\n         Map<String, Object> map = new HashMap<>();\n@@ -67,4 +70,4 @@ public class ContainerUtil {\n     private ContainerUtil() {\n         /* static class */\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/113/ContainerUtil.java\nindex 381c1d3d81c..c7ce2c9b2b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/113/ContainerUtil.java\n@@ -4,7 +4,6 @@ import org.jetbrains.annotations.Nullable;\n import ru.kontur.vostok.hercules.protocol.Container;\n import ru.kontur.vostok.hercules.protocol.Type;\n import ru.kontur.vostok.hercules.protocol.Variant;\n-\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n@@ -18,16 +17,23 @@ import java.util.function.Function;\n  *\n  * @author Kirill Sulim\n  */\n+\n+\n public class ContainerUtil {\n \n     public static <T> T extract(Container container, TagDescription<T> tag) {\n         Variant variant = container.get(tag.getName());\n-        Type type = Optional.ofNullable(variant).map(Variant::getType).orElse(null);\n-        Function<Object, ? extends T> extractor = tag.getExtractors().get(type);\n+        Type type = Optional.ofNullable(variant)\n+        .map(Variant::getType)\n+        .orElse(null);\n+        Function<Object, ? extends T> extractor = tag.getExtractors()\n+        .get(type);\n         if (Objects.isNull(extractor)) {\n-            throw new IllegalArgumentException(String.format(\"Tag '%s' cannot contain value of type '%s'\", tag.getName(),  type));\n+            throw new IllegalArgumentException(String.format(\"Tag '%s' cannot contain value of type '%s'\", tag.getName(), type));\n         } else {\n-            Object value = Optional.ofNullable(variant).map(Variant::getValue).orElse(null);\n+            Object value = Optional.ofNullable(variant)\n+            .map(Variant::getValue)\n+            .orElse(null);\n             return extractor.apply(value);\n         }\n     }\n@@ -38,6 +44,7 @@ public class ContainerUtil {\n      * @param container Container for converting\n      * @return result Object Map\n      */\n+\n     public static Map<String, Object> toObjectMap(final Container container) {\n         return toObjectMap(container, null);\n     }\n@@ -49,10 +56,12 @@ public class ContainerUtil {\n      * @param exclusionSet Set of string keys which should not be put to result Map\n      * @return result Object Map\n      */\n+\n     public static Map<String, Object> toObjectMap(final Container container, @Nullable Set<String> exclusionSet) {\n-        if(exclusionSet == null) {\n+        if (exclusionSet == null) {\n             exclusionSet = Collections.emptySet();\n         }\n+\n         Map<String, Object> map = new HashMap<>();\n         for (Map.Entry<String, Variant> entry : container) {\n             String key = entry.getKey();\n@@ -67,4 +76,4 @@ public class ContainerUtil {\n     private ContainerUtil() {\n         /* static class */\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/113/ContainerUtil.java\nindex 381c1d3d81c..21c78683cf0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/113/ContainerUtil.java\n@@ -50,7 +50,7 @@ public class ContainerUtil {\n      * @return result Object Map\n      */\n     public static Map<String, Object> toObjectMap(final Container container, @Nullable Set<String> exclusionSet) {\n-        if(exclusionSet == null) {\n+        if (exclusionSet == null) {\n             exclusionSet = Collections.emptySet();\n         }\n         Map<String, Object> map = new HashMap<>();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/113/ContainerUtil.java\nindex 381c1d3d81c..21c78683cf0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/113/ContainerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/113/ContainerUtil.java\n@@ -50,7 +50,7 @@ public class ContainerUtil {\n      * @return result Object Map\n      */\n     public static Map<String, Object> toObjectMap(final Container container, @Nullable Set<String> exclusionSet) {\n-        if(exclusionSet == null) {\n+        if (exclusionSet == null) {\n             exclusionSet = Collections.emptySet();\n         }\n         Map<String, Object> map = new HashMap<>();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}