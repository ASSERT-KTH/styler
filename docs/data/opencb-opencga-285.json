{
    "project_name": "opencb-opencga",
    "error_id": "285",
    "information": {
        "errors": [
            {
                "line": "71",
                "column": "14",
                "severity": "error",
                "message": "'while' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        Bson update = Updates.unset(\"annotationSets\");\n\n        while(iterator.hasNext()) {\n            Document next = iterator.next();\n            AnnotableForMigration annotable = converter.convertToDataModelType(next);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/285/AnnotationSetMigration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/285/AnnotationSetMigration.java\nindex 0581e7fbc41..581d8727799 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/285/AnnotationSetMigration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/285/AnnotationSetMigration.java\n@@ -68,7 +68,7 @@ public class AnnotationSetMigration {\n \n         Bson update = Updates.unset(\"annotationSets\");\n \n-        while(iterator.hasNext()) {\n+        while (iterator.hasNext()) {\n             Document next = iterator.next();\n             AnnotableForMigration annotable = converter.convertToDataModelType(next);\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/285/AnnotationSetMigration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/285/AnnotationSetMigration.java\nindex 0581e7fbc41..662ce75d166 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/285/AnnotationSetMigration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/285/AnnotationSetMigration.java\n@@ -30,99 +30,99 @@ import java.util.*;\n  */\n public class AnnotationSetMigration {\n \n-    private Map<Long, VariableSet> variableSetMap;\n-    private MongoDBAdaptorFactory dbAdaptorFactory;\n-    private GenericDocumentComplexConverter<AnnotableForMigration> converter;\n-    private final Logger logger = LoggerFactory.getLogger(AnnotationSetMigration.class);\n-\n-    public AnnotationSetMigration(CatalogManager catalogManager) throws CatalogDBException {\n-        this.dbAdaptorFactory = new MongoDBAdaptorFactory(catalogManager.getConfiguration());\n-        this.variableSetMap = new HashMap<>();\n-        this.converter = new GenericDocumentComplexConverter<>(AnnotableForMigration.class);\n-    }\n-\n-    public void migrate() throws CatalogException {\n-        logger.info(\"Starting migration of annotations from samples...\");\n-        MongoCursor<Document> iterator = getAnnotatedDocuments(dbAdaptorFactory.getCatalogSampleDBAdaptor().getSampleCollection(), true);\n-        migrateAnnotations(dbAdaptorFactory.getCatalogSampleDBAdaptor(),\n-                dbAdaptorFactory.getCatalogSampleDBAdaptor().getSampleCollection(), iterator);\n-\n-        logger.info(\"Starting migration of annotations from individuals...\");\n-        iterator = getAnnotatedDocuments(dbAdaptorFactory.getCatalogIndividualDBAdaptor().getIndividualCollection(), true);\n-        migrateAnnotations(dbAdaptorFactory.getCatalogIndividualDBAdaptor(),\n-                dbAdaptorFactory.getCatalogIndividualDBAdaptor().getIndividualCollection(), iterator);\n-\n-        logger.info(\"Starting migration of annotations from cohorts...\");\n-        iterator = getAnnotatedDocuments(dbAdaptorFactory.getCatalogCohortDBAdaptor().getCohortCollection(), false);\n-        migrateAnnotations(dbAdaptorFactory.getCatalogCohortDBAdaptor(),\n-                dbAdaptorFactory.getCatalogCohortDBAdaptor().getCohortCollection(), iterator);\n-\n-        logger.info(\"Starting migration of annotations from families...\");\n-        iterator = getAnnotatedDocuments(dbAdaptorFactory.getCatalogFamilyDBAdaptor().getFamilyCollection(), true);\n-        migrateAnnotations(dbAdaptorFactory.getCatalogFamilyDBAdaptor(),\n-                dbAdaptorFactory.getCatalogFamilyDBAdaptor().getFamilyCollection(), iterator);\n-    }\n-\n-    private void migrateAnnotations(AnnotationMongoDBAdaptor dbAdaptor, MongoDBCollection collection, MongoCursor<Document> iterator)\n-            throws CatalogException {\n-\n-        Bson update = Updates.unset(\"annotationSets\");\n-\n-        while(iterator.hasNext()) {\n-            Document next = iterator.next();\n-            AnnotableForMigration annotable = converter.convertToDataModelType(next);\n-\n-            // Remove old annotationSets field from the entry\n-            Document query = new Document(\"_id\", next.get(\"_id\"));\n-            collection.update(query, update, new QueryOptions());\n-\n-            List<ObjectMap> annotationSetAsMap = annotable.getAnnotationSetAsMap();\n-\n-            try {\n-                for (ObjectMap annotationSetMap : annotationSetAsMap) {\n-                    String annotationSetName = annotationSetMap.getString(\"name\");\n-                    long variableSetId = annotationSetMap.getLong(\"variableSetId\");\n-                    Map<String, Object> annotations = annotationSetMap.getMap(\"annotations\");\n-\n-                    VariableSet variableSet = getVariableSet(variableSetId);\n-\n-                    AnnotationSet annotationSet = new AnnotationSet(annotationSetName, variableSet.getId(), annotations,\n-                            Collections.emptyMap());\n-                    AnnotationUtils.checkAnnotationSet(variableSet, annotationSet, null, true);\n-\n-                    dbAdaptor.createAnnotationSetForMigration(next.get(\"_id\"), variableSet, annotationSet);\n-                }\n-            } catch (CatalogException e) {\n-                update = new Document()\n-                        .append(\"$set\", new Document(\"annotationSets\", next.get(\"annotationSets\")))\n-                        .append(\"$unset\", new Document(AnnotationMongoDBAdaptor.AnnotationSetParams.ANNOTATION_SETS.key(), \"\"));\n-                // Restore annotations\n-                collection.update(query, update, new QueryOptions());\n+  private Map<Long, VariableSet> variableSetMap;\n+  private MongoDBAdaptorFactory dbAdaptorFactory;\n+  private GenericDocumentComplexConverter<AnnotableForMigration> converter;\n+  private final Logger logger = LoggerFactory.getLogger(AnnotationSetMigration.class);\n+\n+  public AnnotationSetMigration(CatalogManager catalogManager) throws CatalogDBException {\n+    this.dbAdaptorFactory = new MongoDBAdaptorFactory(catalogManager.getConfiguration());\n+    this.variableSetMap = new HashMap<>();\n+    this.converter = new GenericDocumentComplexConverter<>(AnnotableForMigration.class);\n+  }\n+\n+  public void migrate() throws CatalogException {\n+    logger.info(\"Starting migration of annotations from samples...\");\n+    MongoCursor<Document> iterator = getAnnotatedDocuments(dbAdaptorFactory.getCatalogSampleDBAdaptor().getSampleCollection(), true);\n+    migrateAnnotations(dbAdaptorFactory.getCatalogSampleDBAdaptor(),\n+        dbAdaptorFactory.getCatalogSampleDBAdaptor().getSampleCollection(), iterator);\n+\n+    logger.info(\"Starting migration of annotations from individuals...\");\n+    iterator = getAnnotatedDocuments(dbAdaptorFactory.getCatalogIndividualDBAdaptor().getIndividualCollection(), true);\n+    migrateAnnotations(dbAdaptorFactory.getCatalogIndividualDBAdaptor(),\n+        dbAdaptorFactory.getCatalogIndividualDBAdaptor().getIndividualCollection(), iterator);\n+\n+    logger.info(\"Starting migration of annotations from cohorts...\");\n+    iterator = getAnnotatedDocuments(dbAdaptorFactory.getCatalogCohortDBAdaptor().getCohortCollection(), false);\n+    migrateAnnotations(dbAdaptorFactory.getCatalogCohortDBAdaptor(),\n+        dbAdaptorFactory.getCatalogCohortDBAdaptor().getCohortCollection(), iterator);\n+\n+    logger.info(\"Starting migration of annotations from families...\");\n+    iterator = getAnnotatedDocuments(dbAdaptorFactory.getCatalogFamilyDBAdaptor().getFamilyCollection(), true);\n+    migrateAnnotations(dbAdaptorFactory.getCatalogFamilyDBAdaptor(),\n+        dbAdaptorFactory.getCatalogFamilyDBAdaptor().getFamilyCollection(), iterator);\n+  }\n+\n+  private void migrateAnnotations(AnnotationMongoDBAdaptor dbAdaptor, MongoDBCollection collection, MongoCursor<Document> iterator)\n+      throws CatalogException {\n+\n+    Bson update = Updates.unset(\"annotationSets\");\n+\n+    while (iterator.hasNext()) {\n+      Document next = iterator.next();\n+      AnnotableForMigration annotable = converter.convertToDataModelType(next);\n+\n+      // Remove old annotationSets field from the entry\n+      Document query = new Document(\"_id\", next.get(\"_id\"));\n+      collection.update(query, update, new QueryOptions());\n+\n+      List<ObjectMap> annotationSetAsMap = annotable.getAnnotationSetAsMap();\n+\n+      try {\n+        for (ObjectMap annotationSetMap : annotationSetAsMap) {\n+          String annotationSetName = annotationSetMap.getString(\"name\");\n+          long variableSetId = annotationSetMap.getLong(\"variableSetId\");\n+          Map<String, Object> annotations = annotationSetMap.getMap(\"annotations\");\n+\n+          VariableSet variableSet = getVariableSet(variableSetId);\n+\n+          AnnotationSet annotationSet = new AnnotationSet(annotationSetName, variableSet.getId(), annotations,\n+              Collections.emptyMap());\n+          AnnotationUtils.checkAnnotationSet(variableSet, annotationSet, null, true);\n+\n+          dbAdaptor.createAnnotationSetForMigration(next.get(\"_id\"), variableSet, annotationSet);\n+        }\n+      } catch (CatalogException e) {\n+        update = new Document()\n+            .append(\"$set\", new Document(\"annotationSets\", next.get(\"annotationSets\")))\n+            .append(\"$unset\", new Document(AnnotationMongoDBAdaptor.AnnotationSetParams.ANNOTATION_SETS.key(), \"\"));\n+        // Restore annotations\n+        collection.update(query, update, new QueryOptions());\n \n-                throw e;\n-            }\n+        throw e;\n+      }\n \n-        }\n     }\n-\n-    private VariableSet getVariableSet(long variableSetId) throws CatalogDBException {\n-        if (!this.variableSetMap.containsKey(variableSetId)) {\n-            DataResult<VariableSet> variableSet = dbAdaptorFactory.getCatalogStudyDBAdaptor().getVariableSet(variableSetId,\n-                    new QueryOptions());\n-            if (variableSet.getNumResults() == 0) {\n-                throw new CatalogDBException(\"Variable set \" + variableSetId + \" not found. Migration of annotationSets failed\");\n-            }\n-            variableSetMap.put(variableSetId, variableSet.first());\n-        }\n-        return variableSetMap.get(variableSetId);\n+  }\n+\n+  private VariableSet getVariableSet(long variableSetId) throws CatalogDBException {\n+    if (!this.variableSetMap.containsKey(variableSetId)) {\n+      DataResult<VariableSet> variableSet = dbAdaptorFactory.getCatalogStudyDBAdaptor().getVariableSet(variableSetId,\n+          new QueryOptions());\n+      if (variableSet.getNumResults() == 0) {\n+        throw new CatalogDBException(\"Variable set \" + variableSetId + \" not found. Migration of annotationSets failed\");\n+      }\n+      variableSetMap.put(variableSetId, variableSet.first());\n     }\n+    return variableSetMap.get(variableSetId);\n+  }\n \n-    private MongoCursor<Document> getAnnotatedDocuments(MongoDBCollection sampleCollection, boolean version) {\n-        Document queryDocument = new Document(\"annotationSets\", new Document(\"$exists\", true).append(\"$ne\", Collections.emptyList()));\n-        if (version) {\n-            queryDocument.append(\"_lastOfVersion\", true);\n-        }\n-        QueryOptions options = new QueryOptions(QueryOptions.INCLUDE, Arrays.asList(\"annotationSets\", \"id\", \"_studyId\"));\n-        return sampleCollection.nativeQuery().find(queryDocument, options).iterator();\n+  private MongoCursor<Document> getAnnotatedDocuments(MongoDBCollection sampleCollection, boolean version) {\n+    Document queryDocument = new Document(\"annotationSets\", new Document(\"$exists\", true).append(\"$ne\", Collections.emptyList()));\n+    if (version) {\n+      queryDocument.append(\"_lastOfVersion\", true);\n     }\n+    QueryOptions options = new QueryOptions(QueryOptions.INCLUDE, Arrays.asList(\"annotationSets\", \"id\", \"_studyId\"));\n+    return sampleCollection.nativeQuery().find(queryDocument, options).iterator();\n+  }\n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/285/AnnotationSetMigration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/285/AnnotationSetMigration.java\nindex 0581e7fbc41..36186356531 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/285/AnnotationSetMigration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/285/AnnotationSetMigration.java\n@@ -68,7 +68,7 @@ public class AnnotationSetMigration {\n \n         Bson update = Updates.unset(\"annotationSets\");\n \n-        while(iterator.hasNext()) {\n+        while (iterator.hasNext()) {\n             Document next = iterator.next();\n             AnnotableForMigration annotable = converter.convertToDataModelType(next);\n \n@@ -125,4 +125,4 @@ public class AnnotationSetMigration {\n         QueryOptions options = new QueryOptions(QueryOptions.INCLUDE, Arrays.asList(\"annotationSets\", \"id\", \"_studyId\"));\n         return sampleCollection.nativeQuery().find(queryDocument, options).iterator();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/285/AnnotationSetMigration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/285/AnnotationSetMigration.java\nindex 0581e7fbc41..581d8727799 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/285/AnnotationSetMigration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/285/AnnotationSetMigration.java\n@@ -68,7 +68,7 @@ public class AnnotationSetMigration {\n \n         Bson update = Updates.unset(\"annotationSets\");\n \n-        while(iterator.hasNext()) {\n+        while (iterator.hasNext()) {\n             Document next = iterator.next();\n             AnnotableForMigration annotable = converter.convertToDataModelType(next);\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/285/AnnotationSetMigration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/285/AnnotationSetMigration.java\nindex 0581e7fbc41..581d8727799 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/285/AnnotationSetMigration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/285/AnnotationSetMigration.java\n@@ -68,7 +68,7 @@ public class AnnotationSetMigration {\n \n         Bson update = Updates.unset(\"annotationSets\");\n \n-        while(iterator.hasNext()) {\n+        while (iterator.hasNext()) {\n             Document next = iterator.next();\n             AnnotableForMigration annotable = converter.convertToDataModelType(next);\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}