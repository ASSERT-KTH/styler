{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "301",
    "information": {
        "errors": [
            {
                "line": "27",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class IdentityVariant\n{\n\tprivate final ArrayList<IdentityDanglingReference> m_refs;\n\tprivate final Boolean m_value;\n\n\tpublic IdentityVariant(final ArrayList<IdentityDanglingReference> refs)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/301/IdentityVariant.java\nindex ac03473fa22..7ae312c2c74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/301/IdentityVariant.java\n@@ -24,7 +24,7 @@ import org.genxdm.exceptions.PreCondition;\n  */\n final class IdentityVariant\n {\n-\tprivate final ArrayList<IdentityDanglingReference> m_refs;\n+private final ArrayList<IdentityDanglingReference> m_refs;\n \tprivate final Boolean m_value;\n \n \tpublic IdentityVariant(final ArrayList<IdentityDanglingReference> refs)\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/301/IdentityVariant.java\nindex ac03473fa22..1deb2cd3e9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/301/IdentityVariant.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n@@ -22,42 +23,36 @@ import org.genxdm.exceptions.PreCondition;\n /**\n  * A variant that can store one of two things, dangling references or a value.\n  */\n-final class IdentityVariant\n-{\n-\tprivate final ArrayList<IdentityDanglingReference> m_refs;\n-\tprivate final Boolean m_value;\n-\n-\tpublic IdentityVariant(final ArrayList<IdentityDanglingReference> refs)\n-\t{\n-\t\tm_refs = PreCondition.assertArgumentNotNull(refs, \"refs\");\n-\t\tm_value = null;\n-\t}\n-\n-\tpublic IdentityVariant(final Boolean value)\n-\t{\n-\t\tm_refs = null;\n-\t\tm_value = PreCondition.assertArgumentNotNull(value, \"value\");\n-\t}\n-\n-\tpublic boolean isDanglingRefs()\n-\t{\n-\t\treturn (null != m_refs);\n-\t}\n-\n-\tpublic ArrayList<IdentityDanglingReference> getDanglingRefs()\n-\t{\n-\t\tPreCondition.assertTrue(isDanglingRefs(), \"isDanglingRefs()\");\n-\t\treturn m_refs;\n-\t}\n-\n-\tpublic boolean isValue()\n-\t{\n-\t\treturn (null != m_value);\n-\t}\n-\n-\tpublic Boolean getValue()\n-\t{\n-\t\tPreCondition.assertTrue(isValue(), \"isValue()\");\n-\t\treturn m_value;\n-\t}\n+final class IdentityVariant {\n+    private final ArrayList<IdentityDanglingReference> m_refs;\n+\n+    private final Boolean m_value;\n+\n+    public IdentityVariant(final ArrayList<IdentityDanglingReference> refs) {\n+        m_refs = PreCondition.assertArgumentNotNull(refs, \"refs\");\n+        m_value = null;\n+    }\n+\n+    public IdentityVariant(final Boolean value) {\n+        m_refs = null;\n+        m_value = PreCondition.assertArgumentNotNull(value, \"value\");\n+    }\n+\n+    public boolean isDanglingRefs() {\n+        return (null != m_refs);\n+    }\n+\n+    public ArrayList<IdentityDanglingReference> getDanglingRefs() {\n+        PreCondition.assertTrue(isDanglingRefs(), \"isDanglingRefs()\");\n+        return m_refs;\n+    }\n+\n+    public boolean isValue() {\n+        return (null != m_value);\n+    }\n+\n+    public Boolean getValue() {\n+        PreCondition.assertTrue(isValue(), \"isValue()\");\n+        return m_value;\n+    }\n }\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/301/IdentityVariant.java\nindex ac03473fa22..6868b36c5db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/301/IdentityVariant.java\n@@ -24,40 +24,40 @@ import org.genxdm.exceptions.PreCondition;\n  */\n final class IdentityVariant\n {\n-\tprivate final ArrayList<IdentityDanglingReference> m_refs;\n+    private final ArrayList<IdentityDanglingReference> m_refs;\n \tprivate final Boolean m_value;\n \n \tpublic IdentityVariant(final ArrayList<IdentityDanglingReference> refs)\n \t{\n-\t\tm_refs = PreCondition.assertArgumentNotNull(refs, \"refs\");\n+    m_refs = PreCondition.assertArgumentNotNull(refs, \"refs\");\n \t\tm_value = null;\n-\t}\n+    }\n \n \tpublic IdentityVariant(final Boolean value)\n \t{\n-\t\tm_refs = null;\n+    m_refs = null;\n \t\tm_value = PreCondition.assertArgumentNotNull(value, \"value\");\n-\t}\n+    }\n \n \tpublic boolean isDanglingRefs()\n \t{\n-\t\treturn (null != m_refs);\n-\t}\n+    return (null != m_refs);\n+    }\n \n \tpublic ArrayList<IdentityDanglingReference> getDanglingRefs()\n \t{\n-\t\tPreCondition.assertTrue(isDanglingRefs(), \"isDanglingRefs()\");\n+    PreCondition.assertTrue(isDanglingRefs(), \"isDanglingRefs()\");\n \t\treturn m_refs;\n-\t}\n+    }\n \n \tpublic boolean isValue()\n \t{\n-\t\treturn (null != m_value);\n-\t}\n+    return (null != m_value);\n+    }\n \n \tpublic Boolean getValue()\n \t{\n-\t\tPreCondition.assertTrue(isValue(), \"isValue()\");\n+    PreCondition.assertTrue(isValue(), \"isValue()\");\n \t\treturn m_value;\n-\t}\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/301/IdentityVariant.java\nindex ac03473fa22..8274d53135e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/301/IdentityVariant.java\n@@ -16,48 +16,48 @@\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n-\n import org.genxdm.exceptions.PreCondition;\n \n /**\n  * A variant that can store one of two things, dangling references or a value.\n  */\n+\n final class IdentityVariant\n {\n-\tprivate final ArrayList<IdentityDanglingReference> m_refs;\n-\tprivate final Boolean m_value;\n-\n-\tpublic IdentityVariant(final ArrayList<IdentityDanglingReference> refs)\n-\t{\n-\t\tm_refs = PreCondition.assertArgumentNotNull(refs, \"refs\");\n-\t\tm_value = null;\n-\t}\n-\n-\tpublic IdentityVariant(final Boolean value)\n-\t{\n-\t\tm_refs = null;\n-\t\tm_value = PreCondition.assertArgumentNotNull(value, \"value\");\n-\t}\n-\n-\tpublic boolean isDanglingRefs()\n-\t{\n-\t\treturn (null != m_refs);\n-\t}\n-\n-\tpublic ArrayList<IdentityDanglingReference> getDanglingRefs()\n-\t{\n-\t\tPreCondition.assertTrue(isDanglingRefs(), \"isDanglingRefs()\");\n-\t\treturn m_refs;\n-\t}\n-\n-\tpublic boolean isValue()\n-\t{\n-\t\treturn (null != m_value);\n-\t}\n-\n-\tpublic Boolean getValue()\n-\t{\n-\t\tPreCondition.assertTrue(isValue(), \"isValue()\");\n-\t\treturn m_value;\n-\t}\n-}\n+    private final ArrayList<IdentityDanglingReference> m_refs;\n+    private final Boolean m_value;\n+\n+    public IdentityVariant(final ArrayList<IdentityDanglingReference> refs)\n+    {\n+        m_refs = PreCondition.assertArgumentNotNull(refs, \"refs\");\n+        m_value = null;\n+    }\n+\n+    public IdentityVariant(final Boolean value)\n+    {\n+        m_refs = null;\n+        m_value = PreCondition.assertArgumentNotNull(value, \"value\");\n+    }\n+\n+    public boolean isDanglingRefs()\n+    {\n+        return (null != m_refs);\n+    }\n+\n+    public ArrayList<IdentityDanglingReference> getDanglingRefs()\n+    {\n+        PreCondition.assertTrue(isDanglingRefs(), \"isDanglingRefs()\");\n+        return m_refs;\n+    }\n+\n+    public boolean isValue()\n+    {\n+        return (null != m_value);\n+    }\n+\n+    public Boolean getValue()\n+    {\n+        PreCondition.assertTrue(isValue(), \"isValue()\");\n+        return m_value;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/301/IdentityVariant.java\nindex ac03473fa22..7ae312c2c74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/301/IdentityVariant.java\n@@ -24,7 +24,7 @@ import org.genxdm.exceptions.PreCondition;\n  */\n final class IdentityVariant\n {\n-\tprivate final ArrayList<IdentityDanglingReference> m_refs;\n+private final ArrayList<IdentityDanglingReference> m_refs;\n \tprivate final Boolean m_value;\n \n \tpublic IdentityVariant(final ArrayList<IdentityDanglingReference> refs)\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/301/IdentityVariant.java\nindex ac03473fa22..ce61b3e6fee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/301/IdentityVariant.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/301/IdentityVariant.java\n@@ -24,7 +24,7 @@ import org.genxdm.exceptions.PreCondition;\n  */\n final class IdentityVariant\n {\n-\tprivate final ArrayList<IdentityDanglingReference> m_refs;\n+    private final ArrayList<IdentityDanglingReference> m_refs;\n \tprivate final Boolean m_value;\n \n \tpublic IdentityVariant(final ArrayList<IdentityDanglingReference> refs)\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}