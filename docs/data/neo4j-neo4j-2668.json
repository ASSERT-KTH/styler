{
    "project_name": "neo4j-neo4j",
    "error_id": "2668",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "83",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2668/PartitionedIndexWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2668/PartitionedIndexWriter.java\nindex c7bf9aecf47..ca270c511e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2668/PartitionedIndexWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2668/PartitionedIndexWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema.writer;\n \n import org.apache.lucene.document.Document;\n@@ -44,83 +45,82 @@ public class PartitionedIndexWriter implements LuceneIndexWriter\n \n     // by default we still keep a spare of 10% to the maximum partition size: During concurrent updates\n     // it could happen that 2 threads reserve space in a partition (without claiming it by doing addDocument):\n-    private final Integer MAXIMUM_PARTITION_SIZE = Integer.getInteger( \"luceneSchemaIndex.maxPartitionSize\",\n-            IndexWriter.MAX_DOCS - (IndexWriter.MAX_DOCS / 10) );\n+    private final Integer MAXIMUM_PARTITION_SIZE = Integer.getInteger(\"luceneSchemaIndex.maxPartitionSize\",\n+      IndexWriter.MAX_DOCS - (IndexWriter.MAX_DOCS / 10));\n \n-    public PartitionedIndexWriter( WritableAbstractDatabaseIndex index )\n+    public PartitionedIndexWriter(WritableAbstractDatabaseIndex index)\n     {\n         this.index = index;\n     }\n \n     @Override\n-    public void addDocument( Document doc ) throws IOException\n+    public void addDocument(Document doc) throws IOException\n     {\n-        getIndexWriter( 1 ).addDocument( doc );\n+        getIndexWriter(1).addDocument(doc);\n     }\n \n     @Override\n-    public void addDocuments( int numDocs, Iterable<Document> documents ) throws IOException\n+    public void addDocuments(int numDocs, Iterable<Document> documents) throws IOException\n     {\n-        getIndexWriter( numDocs ).addDocuments( documents );\n+        getIndexWriter(numDocs).addDocuments(documents);\n     }\n \n     @Override\n-    public void updateDocument( Term term, Document doc ) throws IOException\n+    public void updateDocument(Term term, Document doc) throws IOException\n     {\n         List<AbstractIndexPartition> partitions = index.getPartitions();\n-        if ( index.hasSinglePartition( partitions ) && writablePartition( index.getFirstPartition( partitions ), 1 ) )\n+        if (index.hasSinglePartition(partitions) && writablePartition(index.getFirstPartition(partitions), 1))\n         {\n-            index.getFirstPartition( partitions ).getIndexWriter().updateDocument( term, doc );\n-        }\n-        else\n+            index.getFirstPartition(partitions).getIndexWriter().updateDocument(term, doc);\n+        } else\n         {\n-            deleteDocuments( term );\n-            addDocument( doc );\n+            deleteDocuments(term);\n+            addDocument(doc);\n         }\n     }\n \n     @Override\n-    public void deleteDocuments( Query query ) throws IOException\n+    public void deleteDocuments(Query query) throws IOException\n     {\n         List<AbstractIndexPartition> partitions = index.getPartitions();\n-        for ( AbstractIndexPartition partition : partitions )\n+        for (AbstractIndexPartition partition : partitions)\n         {\n-            partition.getIndexWriter().deleteDocuments( query );\n+            partition.getIndexWriter().deleteDocuments(query);\n         }\n     }\n \n     @Override\n-    public void deleteDocuments( Term term ) throws IOException\n+    public void deleteDocuments(Term term) throws IOException\n     {\n         List<AbstractIndexPartition> partitions = index.getPartitions();\n-        for ( AbstractIndexPartition partition : partitions )\n+        for (AbstractIndexPartition partition : partitions)\n         {\n-            partition.getIndexWriter().deleteDocuments( term );\n+            partition.getIndexWriter().deleteDocuments(term);\n         }\n     }\n \n-    private IndexWriter getIndexWriter( int numDocs ) throws IOException\n+    private IndexWriter getIndexWriter(int numDocs) throws IOException\n     {\n-        synchronized ( index )\n+        synchronized (index)\n         {\n             // We synchronise on the index to coordinate with all writers about how many partitions we\n             // have, and when new ones are created. The discovery that a new partition needs to be added,\n             // and the call to index.addNewPartition() must be atomic.\n-            return unsafeGetIndexWriter( numDocs );\n+            return unsafeGetIndexWriter(numDocs);\n         }\n     }\n \n-    private IndexWriter unsafeGetIndexWriter( int numDocs ) throws IOException\n+    private IndexWriter unsafeGetIndexWriter(int numDocs) throws IOException\n     {\n         List<AbstractIndexPartition> indexPartitions = index.getPartitions();\n         int size = indexPartitions.size();\n         //noinspection ForLoopReplaceableByForEach\n-        for ( int i = 0; i < size; i++ )\n+        for (int i = 0; i < size; i++)\n         {\n             // We should find the *first* writable partition, so we can fill holes left by index deletes,\n             // after they were merged away:\n-            AbstractIndexPartition partition = indexPartitions.get( i );\n-            if ( writablePartition( partition, numDocs ) )\n+            AbstractIndexPartition partition = indexPartitions.get(i);\n+            if (writablePartition(partition, numDocs))\n             {\n                 return partition.getIndexWriter();\n             }\n@@ -129,7 +129,7 @@ public class PartitionedIndexWriter implements LuceneIndexWriter\n         return indexPartition.getIndexWriter();\n     }\n \n-    private boolean writablePartition( AbstractIndexPartition partition, int numDocs )\n+    private boolean writablePartition(AbstractIndexPartition partition, int numDocs)\n     {\n         return MAXIMUM_PARTITION_SIZE - partition.getIndexWriter().getDocStats().maxDoc >= numDocs;\n     }\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2668/PartitionedIndexWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2668/PartitionedIndexWriter.java\nindex c7bf9aecf47..4573931b8a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2668/PartitionedIndexWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2668/PartitionedIndexWriter.java\n@@ -133,5 +133,4 @@ public class PartitionedIndexWriter implements LuceneIndexWriter\n     {\n         return MAXIMUM_PARTITION_SIZE - partition.getIndexWriter().getDocStats().maxDoc >= numDocs;\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}