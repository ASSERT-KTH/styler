{
    "project_name": "StuPro-TOSCAna-TOSCAna",
    "error_id": "23",
    "information": {
        "errors": [
            {
                "line": "120",
                "column": "61",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    }\n\n    public void buildAndWriteDockerfile() throws IOException{\n        logger.debug(\"Visiting nodes\");\n        stack.forEachNode(node -> {\n            logger.debug(\"Visitng node: {}\", node.getNode().getNodeName());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler/23/DockerfileBuildingVisitor.java\nindex 8b7e59a4a30..31ff2eb17f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler/23/DockerfileBuildingVisitor.java\n@@ -117,7 +117,7 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         return name[name.length - 1];\n     }\n \n-    public void buildAndWriteDockerfile() throws IOException{\n+    public void buildAndWriteDockerfile() throws IOException {\n         logger.debug(\"Visiting nodes\");\n         stack.forEachNode(node -> {\n             logger.debug(\"Visitng node: {}\", node.getNode().getNodeName());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/intellij/23/DockerfileBuildingVisitor.java\nindex 8b7e59a4a30..f58fa7b5af5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/intellij/23/DockerfileBuildingVisitor.java\n@@ -24,12 +24,15 @@ import org.slf4j.Logger;\n public class DockerfileBuildingVisitor implements NodeVisitor {\n \n     private final Logger logger;\n+\n     private final DockerfileBuilder builder;\n+\n     private final NodeStack stack;\n \n     private List<Integer> ports = new ArrayList<>();\n \n-    public DockerfileBuildingVisitor(String baseImage, NodeStack stack, TransformationContext context) {\n+    public DockerfileBuildingVisitor(String baseImage, NodeStack stack,\n+                                     TransformationContext context) {\n         this.logger = context.getLogger(getClass());\n         this.stack = stack;\n         logger.debug(\"Initiialing DockerfileBilder for {}\", stack);\n@@ -77,7 +80,8 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         try {\n             addToDockerfile(node.getNodeName(), node.getStandardLifecycle());\n         } catch (IOException e) {\n-            throw new UnsupportedOperationException(\"Transformation failed while copying artifacts\", e);\n+            throw new UnsupportedOperationException(\"Transformation failed while copying artifacts\",\n+                e);\n         }\n     }\n \n@@ -86,7 +90,8 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         copyAndExecIfPresent(nodeName, \"configure\", lifecycle.getConfigure());\n     }\n \n-    private void copyAndExecIfPresent(String nodeName, String opName, Optional<Operation> optionalOperation)\n+    private void copyAndExecIfPresent(String nodeName, String opName,\n+                                      Optional<Operation> optionalOperation)\n         throws IOException {\n         if (optionalOperation.isPresent()) {\n             optionalOperation.get().getInputs().forEach(e -> {\n@@ -117,7 +122,7 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         return name[name.length - 1];\n     }\n \n-    public void buildAndWriteDockerfile() throws IOException{\n+    public void buildAndWriteDockerfile() throws IOException {\n         logger.debug(\"Visiting nodes\");\n         stack.forEachNode(node -> {\n             logger.debug(\"Visitng node: {}\", node.getNode().getNodeName());\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/naturalize/23/DockerfileBuildingVisitor.java\nindex 8b7e59a4a30..f59f119decb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/naturalize/23/DockerfileBuildingVisitor.java\n@@ -86,9 +86,8 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         copyAndExecIfPresent(nodeName, \"configure\", lifecycle.getConfigure());\n     }\n \n-    private void copyAndExecIfPresent(String nodeName, String opName, Optional<Operation> optionalOperation)\n-        throws IOException {\n-        if (optionalOperation.isPresent()) {\n+    private void copyAndExecIfPresent(String nodeName, String opName, Optional<Operation> optionalOperation) throws IOException {\n+    if (optionalOperation.isPresent()) {\n             optionalOperation.get().getInputs().forEach(e -> {\n                 if (e.getValue().isPresent()) {\n                     builder.env(e.key, e.getValue().get());\n@@ -117,7 +116,7 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         return name[name.length - 1];\n     }\n \n-    public void buildAndWriteDockerfile() throws IOException{\n+    public void buildAndWriteDockerfile() throws IOException {\n         logger.debug(\"Visiting nodes\");\n         stack.forEachNode(node -> {\n             logger.debug(\"Visitng node: {}\", node.getNode().getNodeName());\n@@ -125,4 +124,4 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         });\n         builder.write();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "110",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "120",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/codebuff/23/DockerfileBuildingVisitor.java\nindex 8b7e59a4a30..5238d40c856 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/codebuff/23/DockerfileBuildingVisitor.java\n@@ -5,7 +5,6 @@ import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n-\n import org.opentosca.toscana.core.transformation.TransformationContext;\n import org.opentosca.toscana.model.node.Apache;\n import org.opentosca.toscana.model.node.Compute;\n@@ -18,7 +17,6 @@ import org.opentosca.toscana.model.operation.StandardLifecycle;\n import org.opentosca.toscana.model.visitor.NodeVisitor;\n import org.opentosca.toscana.plugins.kubernetes.docker.dockerfile.builder.DockerfileBuilder;\n import org.opentosca.toscana.plugins.kubernetes.util.NodeStack;\n-\n import org.slf4j.Logger;\n \n public class DockerfileBuildingVisitor implements NodeVisitor {\n@@ -26,7 +24,6 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n     private final Logger logger;\n     private final DockerfileBuilder builder;\n     private final NodeStack stack;\n-\n     private List<Integer> ports = new ArrayList<>();\n \n     public DockerfileBuildingVisitor(String baseImage, NodeStack stack, TransformationContext context) {\n@@ -34,10 +31,10 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         this.stack = stack;\n         logger.debug(\"Initiialing DockerfileBilder for {}\", stack);\n         this.builder = new DockerfileBuilder(\n-            baseImage,\n-            \"output/docker/\" + stack.getStackName(),\n-            context.getPluginFileAccess()\n-        );\n+                           baseImage,\n+                           \"output/docker/\" + stack.getStackName(),\n+                           context.getPluginFileAccess()\n+                       );\n         builder.workdir(\"/toscana-root\");\n     }\n \n@@ -86,8 +83,7 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         copyAndExecIfPresent(nodeName, \"configure\", lifecycle.getConfigure());\n     }\n \n-    private void copyAndExecIfPresent(String nodeName, String opName, Optional<Operation> optionalOperation)\n-        throws IOException {\n+    private void copyAndExecIfPresent(String nodeName, String opName, Optional<Operation> optionalOperation) throws IOException {\n         if (optionalOperation.isPresent()) {\n             optionalOperation.get().getInputs().forEach(e -> {\n                 if (e.getValue().isPresent()) {\n@@ -102,12 +98,15 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n             }\n             if (operation.getImplementationArtifact().isPresent()) {\n                 String path = operation.getImplementationArtifact().get();\n-                builder.copyFromCsar(path, nodeName, nodeName + \"-\" + opName);\n-                builder.run(\"sh \" + nodeName + \"-\" + opName);\n+                builder.copyFromCsar(path, nodeName, nodeName +\n+                                                         \"-\" + opName);\n+                builder.run(\"sh \" + nodeName +\n+                                \"-\" + opName);\n             }\n         }\n     }\n \n+\n     public List<Integer> getPorts() {\n         return Collections.unmodifiableList(ports);\n     }\n@@ -117,7 +116,8 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         return name[name.length - 1];\n     }\n \n-    public void buildAndWriteDockerfile() throws IOException{\n+\n+    public void buildAndWriteDockerfile() throws IOException {\n         logger.debug(\"Visiting nodes\");\n         stack.forEachNode(node -> {\n             logger.debug(\"Visitng node: {}\", node.getNode().getNodeName());\n@@ -125,4 +125,4 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         });\n         builder.write();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_random/23/DockerfileBuildingVisitor.java\nindex 8b7e59a4a30..31ff2eb17f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_random/23/DockerfileBuildingVisitor.java\n@@ -117,7 +117,7 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         return name[name.length - 1];\n     }\n \n-    public void buildAndWriteDockerfile() throws IOException{\n+    public void buildAndWriteDockerfile() throws IOException {\n         logger.debug(\"Visiting nodes\");\n         stack.forEachNode(node -> {\n             logger.debug(\"Visitng node: {}\", node.getNode().getNodeName());\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_three_grams/23/DockerfileBuildingVisitor.java\nindex 8b7e59a4a30..31ff2eb17f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/23/DockerfileBuildingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_three_grams/23/DockerfileBuildingVisitor.java\n@@ -117,7 +117,7 @@ public class DockerfileBuildingVisitor implements NodeVisitor {\n         return name[name.length - 1];\n     }\n \n-    public void buildAndWriteDockerfile() throws IOException{\n+    public void buildAndWriteDockerfile() throws IOException {\n         logger.debug(\"Visiting nodes\");\n         stack.forEachNode(node -> {\n             logger.debug(\"Visitng node: {}\", node.getNode().getNodeName());\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}