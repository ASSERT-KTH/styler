{
    "project_name": "opencb-opencga",
    "error_id": "42",
    "information": {
        "errors": [
            {
                "line": "251",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 148).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        }\n\n        public CategoricalAccumulator(Function<T, Collection<String>> getCategory, String name, FieldVariantAccumulator<T> nestedFieldAccumulator) {\n            super(nestedFieldAccumulator);\n            this.getCategory = getCategory;\n            this.name = name;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "251",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/42/AbstractLocalVariantAggregationExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/42/AbstractLocalVariantAggregationExecutor.java\nindex de4cebd4d8b..20e7e483728 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/42/AbstractLocalVariantAggregationExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/42/AbstractLocalVariantAggregationExecutor.java\n@@ -18,272 +18,277 @@ import java.util.function.Function;\n \n public abstract class AbstractLocalVariantAggregationExecutor extends VariantAggregationExecutor {\n \n-    protected abstract static class FieldVariantAccumulator<T> {\n-        private FieldVariantAccumulator<T> nestedFieldAccumulator;\n+  protected abstract static class FieldVariantAccumulator<T> {\n+    private FieldVariantAccumulator<T> nestedFieldAccumulator;\n \n-        protected FieldVariantAccumulator(FieldVariantAccumulator<T> nestedFieldAccumulator) {\n-            this.nestedFieldAccumulator = nestedFieldAccumulator;\n-        }\n-\n-        public FieldVariantAccumulator<T> setNestedFieldAccumulator(FieldVariantAccumulator<T> nestedFieldAccumulator) {\n-            this.nestedFieldAccumulator = nestedFieldAccumulator;\n-            return this;\n-        }\n+    protected FieldVariantAccumulator(FieldVariantAccumulator<T> nestedFieldAccumulator) {\n+      this.nestedFieldAccumulator = nestedFieldAccumulator;\n+    }\n \n-        /**\n-         * Get field name.\n-         * @return Field name\n-         */\n-        public abstract String getName();\n-\n-        /**\n-         * Prepare (if required) the list of buckets for this field.\n-         * @return predefined list of buckets.\n-         */\n-        public FacetField createField() {\n-            return new FacetField(getName(), 0, prepareBuckets());\n-        }\n+    public FieldVariantAccumulator<T> setNestedFieldAccumulator(FieldVariantAccumulator<T> nestedFieldAccumulator) {\n+      this.nestedFieldAccumulator = nestedFieldAccumulator;\n+      return this;\n+    }\n \n-        /**\n-         * Prepare (if required) the list of buckets for this field.\n-         * @return predefined list of buckets.\n-         */\n-        public final List<FacetField.Bucket> prepareBuckets() {\n-            List<FacetField.Bucket> valueBuckets = prepareBuckets1();\n-            for (FacetField.Bucket bucket : valueBuckets) {\n-                if (nestedFieldAccumulator != null) {\n-                    bucket.setFacetFields(Collections.singletonList(nestedFieldAccumulator.createField()));\n-                }\n-            }\n-            return valueBuckets;\n-        }\n+    /**\n+     * Get field name.\n+     *\n+     * @return Field name\n+     */\n+    public abstract String getName();\n+\n+    /**\n+     * Prepare (if required) the list of buckets for this field.\n+     *\n+     * @return predefined list of buckets.\n+     */\n+    public FacetField createField() {\n+      return new FacetField(getName(), 0, prepareBuckets());\n+    }\n \n-        protected final FacetField.Bucket addBucket(FacetField field, String value) {\n-            FacetField.Bucket bucket;\n-            bucket = new FacetField.Bucket(value, 0, null);\n-            if (nestedFieldAccumulator != null) {\n-                bucket.setFacetFields(Collections.singletonList(nestedFieldAccumulator.createField()));\n-            }\n-            field.getBuckets().add(bucket);\n-            return bucket;\n+    /**\n+     * Prepare (if required) the list of buckets for this field.\n+     *\n+     * @return predefined list of buckets.\n+     */\n+    public final List<FacetField.Bucket> prepareBuckets() {\n+      List<FacetField.Bucket> valueBuckets = prepareBuckets1();\n+      for (FacetField.Bucket bucket : valueBuckets) {\n+        if (nestedFieldAccumulator != null) {\n+          bucket.setFacetFields(Collections.singletonList(nestedFieldAccumulator.createField()));\n         }\n+      }\n+      return valueBuckets;\n+    }\n \n-        protected abstract List<FacetField.Bucket> prepareBuckets1();\n+    protected final FacetField.Bucket addBucket(FacetField field, String value) {\n+      FacetField.Bucket bucket;\n+      bucket = new FacetField.Bucket(value, 0, null);\n+      if (nestedFieldAccumulator != null) {\n+        bucket.setFacetFields(Collections.singletonList(nestedFieldAccumulator.createField()));\n+      }\n+      field.getBuckets().add(bucket);\n+      return bucket;\n+    }\n \n-        public void cleanEmptyBuckets(FacetField field) {\n-            field.getBuckets().removeIf(bucket -> bucket.getCount() == 0);\n-            if (nestedFieldAccumulator != null) {\n-                for (FacetField.Bucket bucket : field.getBuckets()) {\n-                    nestedFieldAccumulator.cleanEmptyBuckets(bucket.getFacetFields().get(0));\n-                }\n-            }\n-        }\n+    protected abstract List<FacetField.Bucket> prepareBuckets1();\n \n-        /**\n-         * Accumulate variant in the given field.\n-         * @param field   Field\n-         * @param variant Variant\n-         */\n-        public final void accumulate(FacetField field, T variant) {\n-            List<FacetField.Bucket> buckets = getBuckets(field, variant);\n-            if (buckets == null || buckets.isEmpty()) {\n-                return;\n-            }\n-            field.addCount(1);\n-            for (FacetField.Bucket bucket : buckets) {\n-                bucket.addCount(1);\n-                if (nestedFieldAccumulator != null) {\n-                    nestedFieldAccumulator.accumulate(bucket.getFacetFields().get(0), variant);\n-                }\n-            }\n+    public void cleanEmptyBuckets(FacetField field) {\n+      field.getBuckets().removeIf(bucket -> bucket.getCount() == 0);\n+      if (nestedFieldAccumulator != null) {\n+        for (FacetField.Bucket bucket : field.getBuckets()) {\n+          nestedFieldAccumulator.cleanEmptyBuckets(bucket.getFacetFields().get(0));\n         }\n-\n-        protected abstract List<FacetField.Bucket> getBuckets(FacetField field, T variant);\n+      }\n     }\n \n-    protected static class VariantChromDensityAccumulator<T> extends ChromDensityAccumulator<Variant> {\n-\n-        protected VariantChromDensityAccumulator(VariantStorageMetadataManager metadataManager, Region region,\n-                                                 FieldVariantAccumulator<Variant> nestedFieldAccumulator, int step) {\n-            super(metadataManager, region, nestedFieldAccumulator, step, Variant::getStart);\n+    /**\n+     * Accumulate variant in the given field.\n+     *\n+     * @param field   Field\n+     * @param variant Variant\n+     */\n+    public final void accumulate(FacetField field, T variant) {\n+      List<FacetField.Bucket> buckets = getBuckets(field, variant);\n+      if (buckets == null || buckets.isEmpty()) {\n+        return;\n+      }\n+      field.addCount(1);\n+      for (FacetField.Bucket bucket : buckets) {\n+        bucket.addCount(1);\n+        if (nestedFieldAccumulator != null) {\n+          nestedFieldAccumulator.accumulate(bucket.getFacetFields().get(0), variant);\n         }\n+      }\n     }\n \n-    protected static class ChromDensityAccumulator<T> extends FieldVariantAccumulator<T> {\n-        private final VariantStorageMetadataManager metadataManager;\n-        private final Region region;\n-        private final int step;\n-        private final int numSteps;\n-        private final Function<T, Integer> getStart;\n-\n-        public ChromDensityAccumulator(VariantStorageMetadataManager metadataManager, Region region,\n-                                        FieldVariantAccumulator<T> nestedFieldAccumulator, int step, Function<T, Integer> getStart) {\n-            super(nestedFieldAccumulator);\n-            this.metadataManager = metadataManager;\n-            this.region = region;\n-            this.step = step;\n-            this.getStart = getStart;\n-\n-            if (region.getEnd() == Integer.MAX_VALUE) {\n-                for (Integer studyId : this.metadataManager.getStudyIds()) {\n-                    StudyMetadata studyMetadata = this.metadataManager.getStudyMetadata(studyId);\n-                    VariantFileHeaderComplexLine contig = studyMetadata.getVariantHeaderLine(\"contig\", region.getChromosome());\n-                    if (contig == null) {\n-                        contig = studyMetadata.getVariantHeaderLine(\"contig\", \"chr\" + region.getChromosome());\n-                    }\n-                    if (contig != null) {\n-                        String length = contig.getGenericFields().get(\"length\");\n-                        if (StringUtils.isNotEmpty(length) && StringUtils.isNumeric(length)) {\n-                            region.setEnd(Integer.parseInt(length));\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-            if (region.getStart() == 0) {\n-                region.setStart(1);\n-            }\n+    protected abstract List<FacetField.Bucket> getBuckets(FacetField field, T variant);\n+  }\n \n-            int regionLength = region.getEnd() - region.getStart();\n-            if (regionLength != Integer.MAX_VALUE) {\n-                regionLength++;\n+  protected static class VariantChromDensityAccumulator<T> extends ChromDensityAccumulator<Variant> {\n+\n+    protected VariantChromDensityAccumulator(VariantStorageMetadataManager metadataManager, Region region,\n+                                             FieldVariantAccumulator<Variant> nestedFieldAccumulator, int step) {\n+      super(metadataManager, region, nestedFieldAccumulator, step, Variant::getStart);\n+    }\n+  }\n+\n+  protected static class ChromDensityAccumulator<T> extends FieldVariantAccumulator<T> {\n+    private final VariantStorageMetadataManager metadataManager;\n+    private final Region region;\n+    private final int step;\n+    private final int numSteps;\n+    private final Function<T, Integer> getStart;\n+\n+    public ChromDensityAccumulator(VariantStorageMetadataManager metadataManager, Region region,\n+                                   FieldVariantAccumulator<T> nestedFieldAccumulator, int step, Function<T, Integer> getStart) {\n+      super(nestedFieldAccumulator);\n+      this.metadataManager = metadataManager;\n+      this.region = region;\n+      this.step = step;\n+      this.getStart = getStart;\n+\n+      if (region.getEnd() == Integer.MAX_VALUE) {\n+        for (Integer studyId : this.metadataManager.getStudyIds()) {\n+          StudyMetadata studyMetadata = this.metadataManager.getStudyMetadata(studyId);\n+          VariantFileHeaderComplexLine contig = studyMetadata.getVariantHeaderLine(\"contig\", region.getChromosome());\n+          if (contig == null) {\n+            contig = studyMetadata.getVariantHeaderLine(\"contig\", \"chr\" + region.getChromosome());\n+          }\n+          if (contig != null) {\n+            String length = contig.getGenericFields().get(\"length\");\n+            if (StringUtils.isNotEmpty(length) && StringUtils.isNumeric(length)) {\n+              region.setEnd(Integer.parseInt(length));\n+              break;\n             }\n-            numSteps = regionLength / step + 1;\n+          }\n         }\n+      }\n+      if (region.getStart() == 0) {\n+        region.setStart(1);\n+      }\n+\n+      int regionLength = region.getEnd() - region.getStart();\n+      if (regionLength != Integer.MAX_VALUE) {\n+        regionLength++;\n+      }\n+      numSteps = regionLength / step + 1;\n+    }\n \n-        @Override\n-        public String getName() {\n-            return VariantField.START.fieldName();\n-        }\n+    @Override\n+    public String getName() {\n+      return VariantField.START.fieldName();\n+    }\n \n-        @Override\n-        public FacetField createField() {\n-            return new FacetField(VariantField.START.fieldName(), 0,\n-                    prepareBuckets())\n-                    .setStart(region.getStart())\n-                    .setEnd(region.getEnd())\n-                    .setStep(step);\n-        }\n+    @Override\n+    public FacetField createField() {\n+      return new FacetField(VariantField.START.fieldName(), 0,\n+          prepareBuckets())\n+          .setStart(region.getStart())\n+          .setEnd(region.getEnd())\n+          .setStep(step);\n+    }\n \n-        @Override\n-        public List<FacetField.Bucket> prepareBuckets1() {\n-            List<FacetField.Bucket> valueBuckets = new ArrayList<>(numSteps);\n-            for (int i = 0; i < numSteps; i++) {\n-                valueBuckets.add(new FacetField.Bucket(String.valueOf(i * step + region.getStart()), 0, null));\n-            }\n-            return valueBuckets;\n-        }\n+    @Override\n+    public List<FacetField.Bucket> prepareBuckets1() {\n+      List<FacetField.Bucket> valueBuckets = new ArrayList<>(numSteps);\n+      for (int i = 0; i < numSteps; i++) {\n+        valueBuckets.add(new FacetField.Bucket(String.valueOf(i * step + region.getStart()), 0, null));\n+      }\n+      return valueBuckets;\n+    }\n \n-        @Override\n-        protected List<FacetField.Bucket> getBuckets(FacetField field, T variant) {\n-            int idx = (getStart(variant) - region.getStart()) / step;\n-            if (idx < numSteps) {\n-                return Collections.singletonList(field.getBuckets().get(idx));\n-            } else {\n-                return null;\n-            }\n-        }\n+    @Override\n+    protected List<FacetField.Bucket> getBuckets(FacetField field, T variant) {\n+      int idx = (getStart(variant) - region.getStart()) / step;\n+      if (idx < numSteps) {\n+        return Collections.singletonList(field.getBuckets().get(idx));\n+      } else {\n+        return null;\n+      }\n+    }\n \n-        protected Integer getStart(T variant) {\n-            return getStart.apply(variant);\n-        }\n+    protected Integer getStart(T variant) {\n+      return getStart.apply(variant);\n     }\n+  }\n \n-    protected static class VariantTypeAccumulator<T> extends FieldVariantAccumulator<T> {\n+  protected static class VariantTypeAccumulator<T> extends FieldVariantAccumulator<T> {\n \n-        private final Function<T, VariantType> getType;\n+    private final Function<T, VariantType> getType;\n \n-        public VariantTypeAccumulator(Function<T, VariantType> getType) {\n-            this(getType, null);\n-            // TODO: Accept subset of variant type\n-        }\n+    public VariantTypeAccumulator(Function<T, VariantType> getType) {\n+      this(getType, null);\n+      // TODO: Accept subset of variant type\n+    }\n \n-        public VariantTypeAccumulator(Function<T, VariantType> getType, FieldVariantAccumulator<T> nestedFieldAccumulator) {\n-            super(nestedFieldAccumulator);\n-            this.getType = getType;\n-        }\n+    public VariantTypeAccumulator(Function<T, VariantType> getType, FieldVariantAccumulator<T> nestedFieldAccumulator) {\n+      super(nestedFieldAccumulator);\n+      this.getType = getType;\n+    }\n \n-        @Override\n-        public String getName() {\n-            return VariantField.TYPE.fieldName();\n-        }\n+    @Override\n+    public String getName() {\n+      return VariantField.TYPE.fieldName();\n+    }\n \n-        @Override\n-        public List<FacetField.Bucket> prepareBuckets1() {\n-            List<FacetField.Bucket> buckets = new ArrayList<>(VariantType.values().length);\n-            for (VariantType variantType : VariantType.values()) {\n-                buckets.add(new FacetField.Bucket(variantType.name(), 0, null));\n-            }\n-            return buckets;\n-        }\n+    @Override\n+    public List<FacetField.Bucket> prepareBuckets1() {\n+      List<FacetField.Bucket> buckets = new ArrayList<>(VariantType.values().length);\n+      for (VariantType variantType : VariantType.values()) {\n+        buckets.add(new FacetField.Bucket(variantType.name(), 0, null));\n+      }\n+      return buckets;\n+    }\n \n-        @Override\n-        protected List<FacetField.Bucket> getBuckets(FacetField field, T variant) {\n-            return Collections.singletonList(field.getBuckets().get(getType(variant).ordinal()));\n-        }\n+    @Override\n+    protected List<FacetField.Bucket> getBuckets(FacetField field, T variant) {\n+      return Collections.singletonList(field.getBuckets().get(getType(variant).ordinal()));\n+    }\n \n-        protected VariantType getType(T variant) {\n-            return getType.apply(variant);\n-        }\n+    protected VariantType getType(T variant) {\n+      return getType.apply(variant);\n     }\n+  }\n \n-    protected static class ChromosomeAccumulator extends CategoricalAccumulator<Variant> {\n+  protected static class ChromosomeAccumulator extends CategoricalAccumulator<Variant> {\n \n-        public ChromosomeAccumulator() {\n-            this(null);\n-        }\n+    public ChromosomeAccumulator() {\n+      this(null);\n+    }\n \n-        public ChromosomeAccumulator(FieldVariantAccumulator<Variant> nestedFieldAccumulator) {\n-            super(v -> Collections.singletonList(v.getChromosome()), VariantField.CHROMOSOME.fieldName(), nestedFieldAccumulator);\n-        }\n+    public ChromosomeAccumulator(FieldVariantAccumulator<Variant> nestedFieldAccumulator) {\n+      super(v -> Collections.singletonList(v.getChromosome()), VariantField.CHROMOSOME.fieldName(), nestedFieldAccumulator);\n     }\n+  }\n \n-    protected static class CategoricalAccumulator<T> extends FieldVariantAccumulator<T> {\n+  protected static class CategoricalAccumulator<T> extends FieldVariantAccumulator<T> {\n \n-        private final Function<T, Collection<String>> getCategory;\n-        private final String name;\n+    private final Function<T, Collection<String>> getCategory;\n+    private final String name;\n \n-        public CategoricalAccumulator(Function<T, Collection<String>> getCategory, String name) {\n-            this(getCategory, name, null);\n-            // TODO: Accept subset of categories\n-        }\n+    public CategoricalAccumulator(Function<T, Collection<String>> getCategory, String name) {\n+      this(getCategory, name, null);\n+      // TODO: Accept subset of categories\n+    }\n \n-        public CategoricalAccumulator(Function<T, Collection<String>> getCategory, String name, FieldVariantAccumulator<T> nestedFieldAccumulator) {\n-            super(nestedFieldAccumulator);\n-            this.getCategory = getCategory;\n-            this.name = name;\n-        }\n+    public CategoricalAccumulator(Function<T, Collection<String>> getCategory, String name,\n+                                  FieldVariantAccumulator<T> nestedFieldAccumulator) {\n+      super(nestedFieldAccumulator);\n+      this.getCategory = getCategory;\n+      this.name = name;\n+    }\n \n-        @Override\n-        public String getName() {\n-            return name;\n-        }\n+    @Override\n+    public String getName() {\n+      return name;\n+    }\n \n-        @Override\n-        public List<FacetField.Bucket> prepareBuckets1() {\n-            List<FacetField.Bucket> buckets = new ArrayList<>();\n-            return buckets;\n-        }\n+    @Override\n+    public List<FacetField.Bucket> prepareBuckets1() {\n+      List<FacetField.Bucket> buckets = new ArrayList<>();\n+      return buckets;\n+    }\n \n-        @Override\n-        protected List<FacetField.Bucket> getBuckets(FacetField field, T variant) {\n-            Collection<String> values = getCategory.apply(variant);\n-            List<FacetField.Bucket> buckets = new ArrayList<>();\n-            for (String value : values) {\n-                FacetField.Bucket bucket = null;\n-                for (FacetField.Bucket thisBucket : field.getBuckets()) {\n-                    if (thisBucket.getValue().equals(value)) {\n-                        buckets.add(thisBucket);\n-                        bucket = thisBucket;\n-                    }\n-                }\n-                if (bucket == null) {\n-                    buckets.add(addBucket(field, value));\n-                }\n-            }\n-            return buckets;\n+    @Override\n+    protected List<FacetField.Bucket> getBuckets(FacetField field, T variant) {\n+      Collection<String> values = getCategory.apply(variant);\n+      List<FacetField.Bucket> buckets = new ArrayList<>();\n+      for (String value : values) {\n+        FacetField.Bucket bucket = null;\n+        for (FacetField.Bucket thisBucket : field.getBuckets()) {\n+          if (thisBucket.getValue().equals(value)) {\n+            buckets.add(thisBucket);\n+            bucket = thisBucket;\n+          }\n         }\n-\n+        if (bucket == null) {\n+          buckets.add(addBucket(field, value));\n+        }\n+      }\n+      return buckets;\n     }\n \n+  }\n+\n }\n",
            "diff_size": 302
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "251",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/42/AbstractLocalVariantAggregationExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/42/AbstractLocalVariantAggregationExecutor.java\nindex de4cebd4d8b..90e7af7c91d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/42/AbstractLocalVariantAggregationExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/42/AbstractLocalVariantAggregationExecutor.java\n@@ -286,4 +286,4 @@ public abstract class AbstractLocalVariantAggregationExecutor extends VariantAgg\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "251",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "251",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}