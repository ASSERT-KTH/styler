{
    "project_name": "Angel-ML-angel",
    "error_id": "22",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/22/TaskManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/22/TaskManager.java\nindex ec48f37395b..565e71e745f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/22/TaskManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/22/TaskManager.java\n@@ -51,7 +51,7 @@ public class TaskManager {\n     int taskNumInWork =\n         conf.getInt(AngelConf.ANGEL_WORKER_TASK_NUMBER,\n             AngelConf.DEFAULT_ANGEL_WORKER_TASK_NUMBER);\n-    taskPool = Executors.newFixedThreadPool(taskNumInWork);\n+taskPool = Executors.newFixedThreadPool(taskNumInWork);\n   }\n \n   /**\n@@ -149,10 +149,8 @@ public class TaskManager {\n    */\n   public boolean isAllTaskExit() {\n     for (Entry<TaskId, Task> entry : runningTask.entrySet()) {\n-      if (!(entry.getValue().getTaskState() == TaskState.SUCCESS)\n-          && !(entry.getValue().getTaskState() == TaskState.FAILED)\n-          && !(entry.getValue().getTaskState() == TaskState.KILLED)) {\n-        return false;\n+      if (!(entry.getValue().getTaskState() == TaskState.SUCCESS) && !(entry.getValue().getTaskState() == TaskState.FAILED) && !(entry.getValue().getTaskState() == TaskState.KILLED)) {\n+  return false;\n       }\n     }\n     return true;\n@@ -217,8 +215,7 @@ public class TaskManager {\n         long endCol = partKey.getEndCol();\n         for (int j = lastPos; j < size; j++) {\n           if (indexArray[j] >= endCol) {\n-\n-            lastPos = j;\n+  lastPos = j;\n             break;\n           }\n         }\n@@ -242,4 +239,4 @@ public class TaskManager {\n       // }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/22/TaskManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/22/TaskManager.java\nindex ec48f37395b..f2a865dd4fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/22/TaskManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/22/TaskManager.java\n@@ -25,7 +25,6 @@ import it.unimi.dsi.fastutil.ints.IntOpenHashSet;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n-\n import java.util.*;\n import java.util.Map.Entry;\n import java.util.concurrent.ExecutorService;\n@@ -34,7 +33,9 @@ import java.util.concurrent.Executors;\n /**\n  * Manages tasks running,include state monitor and task's indexes update\n  */\n+\n public class TaskManager {\n+\n   private static final Log LOG = LogFactory.getLog(TaskManager.class);\n   private final Map<TaskId, Task> runningTask;\n   private volatile ExecutorService taskPool;\n@@ -46,11 +47,10 @@ public class TaskManager {\n   /**\n    * Init.\n    */\n+\n   public void init() {\n     Configuration conf = WorkerContext.get().getConf();\n-    int taskNumInWork =\n-        conf.getInt(AngelConf.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConf.DEFAULT_ANGEL_WORKER_TASK_NUMBER);\n+    int taskNumInWork = conf.getInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, AngelConf.DEFAULT_ANGEL_WORKER_TASK_NUMBER);\n     taskPool = Executors.newFixedThreadPool(taskNumInWork);\n   }\n \n@@ -60,6 +60,7 @@ public class TaskManager {\n    * @param id the task id\n    * @return the task\n    */\n+\n   public Task findTask(TaskId id) {\n     return runningTask.get(id);\n   }\n@@ -70,6 +71,7 @@ public class TaskManager {\n    * @param id the task id\n    * @return the task context\n    */\n+\n   public TaskContext findTaskContext(TaskId id) {\n     return runningTask.get(id).getTaskContext();\n   }\n@@ -79,6 +81,7 @@ public class TaskManager {\n    *\n    * @return the running task\n    */\n+\n   public Map<TaskId, Task> getRunningTask() {\n     return runningTask;\n   }\n@@ -94,6 +97,7 @@ public class TaskManager {\n    *\n    * @param taskIdToContextMap task contexts\n    */\n+\n   public void startAllTasks(Map<TaskId, TaskContext> taskIdToContextMap) {\n     LOG.info(\"start all tasks\");\n     WorkerContext.get().getDataBlockManager().assignSplitToTasks(taskIdToContextMap.keySet());\n@@ -110,6 +114,7 @@ public class TaskManager {\n    *\n    * @return the task count\n    */\n+\n   public int getTaskCount() {\n     return runningTask.size();\n   }\n@@ -119,6 +124,7 @@ public class TaskManager {\n    *\n    * @return true if all tasks success else false\n    */\n+\n   public boolean isAllTaskSuccess() {\n     for (Entry<TaskId, Task> entry : runningTask.entrySet()) {\n       if (!(entry.getValue().getTaskState() == TaskState.SUCCESS)) {\n@@ -133,6 +139,7 @@ public class TaskManager {\n    *\n    * @return true if all tasks running else false\n    */\n+\n   public boolean isAllTaskRunning() {\n     for (Entry<TaskId, Task> entry : runningTask.entrySet()) {\n       if (!(entry.getValue().getTaskState() == TaskState.RUNNING)) {\n@@ -147,11 +154,10 @@ public class TaskManager {\n    *\n    * @return true if all tasks state is final else false\n    */\n+\n   public boolean isAllTaskExit() {\n     for (Entry<TaskId, Task> entry : runningTask.entrySet()) {\n-      if (!(entry.getValue().getTaskState() == TaskState.SUCCESS)\n-          && !(entry.getValue().getTaskState() == TaskState.FAILED)\n-          && !(entry.getValue().getTaskState() == TaskState.KILLED)) {\n+      if (!(entry.getValue().getTaskState() == TaskState.SUCCESS) && !(entry.getValue().getTaskState() == TaskState.FAILED) && !(entry.getValue().getTaskState() == TaskState.KILLED)) {\n         return false;\n       }\n     }\n@@ -163,6 +169,7 @@ public class TaskManager {\n    *\n    * @return the diagnostics\n    */\n+\n   public String getDiagnostics() {\n     StringBuilder sb = new StringBuilder();\n     for (Entry<TaskId, Task> entry : runningTask.entrySet()) {\n@@ -170,13 +177,13 @@ public class TaskManager {\n         sb.append(entry.getValue().getDiagnostics());\n       }\n     }\n-\n     return sb.toString();\n   }\n \n   /**\n    * Combine update index.\n    */\n+\n   @SuppressWarnings(\"rawtypes\")\n   public void combineUpdateIndex() {\n     IntOpenHashSet indexSet = null;\n@@ -203,13 +210,10 @@ public class TaskManager {\n       while (iter.hasNext()) {\n         indexArray[index++] = iter.nextInt();\n       }\n-\n       Arrays.sort(indexArray);\n-\n-      List<PartitionKey> partKeyList =\n-          WorkerContext.get().getPSAgent().getMatrixPartitionRouter()\n-              .getPartitionKeyList(meta.getId());\n+      List<PartitionKey> partKeyList = WorkerContext.get().getPSAgent().getMatrixPartitionRouter().getPartitionKeyList(meta.getId());\n       Collections.sort(partKeyList);\n+\n       int partNum = partKeyList.size();\n       int lastPos = 0;\n       for (int i = 0; i < partNum; i++) {\n@@ -217,7 +221,6 @@ public class TaskManager {\n         long endCol = partKey.getEndCol();\n         for (int j = lastPos; j < size; j++) {\n           if (indexArray[j] >= endCol) {\n-\n             lastPos = j;\n             break;\n           }\n@@ -242,4 +245,5 @@ public class TaskManager {\n       // }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}