{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1728",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1728/AssertionRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1728/AssertionRunner.java\nindex 24e995f3327..db31aa2a7a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1728/AssertionRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1728/AssertionRunner.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.neo4j.cypher.internal.util.v3_4;\n \n /*\n@@ -26,31 +27,31 @@ We want the Java behaviour in Scala, and this is how we achieve that.\n  */\n public class AssertionRunner\n {\n-    private AssertionRunner()\n-    {\n-        throw new AssertionError( \"No instances\" );\n-    }\n-\n-    public static void runUnderAssertion( Thunk thunk )\n-    {\n-        assert runIt(thunk);\n-    }\n-\n-    private static boolean runIt( Thunk thunk )\n-    {\n-        thunk.apply();\n-        return true;\n-    }\n-\n-    public interface Thunk\n-    {\n-        void apply();\n-    }\n-\n-    public static boolean isAssertionsEnabled()\n-    {\n-        boolean assertionsEnabled = false;\n-        assert assertionsEnabled = true;\n-        return assertionsEnabled;\n-    }\n+  private AssertionRunner()\n+  {\n+    throw new AssertionError(\"No instances\");\n+  }\n+\n+  public static void runUnderAssertion(Thunk thunk)\n+  {\n+    assert runIt(thunk);\n+  }\n+\n+  private static boolean runIt(Thunk thunk)\n+  {\n+    thunk.apply();\n+    return true;\n+  }\n+\n+  public interface Thunk\n+  {\n+    void apply();\n+  }\n+\n+  public static boolean isAssertionsEnabled()\n+  {\n+    boolean assertionsEnabled = false;\n+    assert assertionsEnabled = true;\n+    return assertionsEnabled;\n+  }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1728/AssertionRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1728/AssertionRunner.java\nindex 24e995f3327..6171932bcde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1728/AssertionRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1728/AssertionRunner.java\n@@ -53,4 +53,4 @@ public class AssertionRunner\n         assert assertionsEnabled = true;\n         return assertionsEnabled;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1728/AssertionRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1728/AssertionRunner.java\nindex 24e995f3327..fad6b9ca8bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1728/AssertionRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1728/AssertionRunner.java\n@@ -24,6 +24,7 @@ which means you can't use the same binaries and enable/disable assertions throug\n \n We want the Java behaviour in Scala, and this is how we achieve that.\n  */\n+\n public class AssertionRunner\n {\n     private AssertionRunner()\n@@ -33,7 +34,7 @@ public class AssertionRunner\n \n     public static void runUnderAssertion( Thunk thunk )\n     {\n-        assert runIt(thunk);\n+        assert runIt( thunk );\n     }\n \n     private static boolean runIt( Thunk thunk )\n@@ -43,9 +44,9 @@ public class AssertionRunner\n     }\n \n     public interface Thunk\n-    {\n-        void apply();\n-    }\n+{\n+   void apply()\n+   ;}\n \n     public static boolean isAssertionsEnabled()\n     {\n@@ -53,4 +54,4 @@ public class AssertionRunner\n         assert assertionsEnabled = true;\n         return assertionsEnabled;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}