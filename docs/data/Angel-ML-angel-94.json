{
    "project_name": "Angel-ML-angel",
    "error_id": "94",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/94/UpdatePSFTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/94/UpdatePSFTest.java\nindex 33904d8e9f1..d822a2b1e5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/94/UpdatePSFTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/94/UpdatePSFTest.java\n@@ -755,7 +755,7 @@ public class UpdatePSFTest {\n     int matrixW1Id = client1.getMatrixId();\n \n     int[] index = new int[feaNum];//genIndexs(feaNum, nnz);\n-    for(int i = 0; i < index.length; i++) {\n+    for (int i = 0; i < index.length; i++) {\n       index[i] = i;\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "490",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "513",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "518",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "543",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "565",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "570",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "595",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "616",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "621",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "667",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "672",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "721",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "745",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "772",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "822",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "846",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/94/UpdatePSFTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/94/UpdatePSFTest.java\nindex 33904d8e9f1..a44927729ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/94/UpdatePSFTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/94/UpdatePSFTest.java\n@@ -19,7 +19,6 @@\n package com.tencent.angel.psagent;\n \n import static org.junit.Assert.assertEquals;\n-\n import com.tencent.angel.client.AngelClient;\n import com.tencent.angel.client.AngelClientFactory;\n import com.tencent.angel.conf.AngelConf;\n@@ -82,41 +81,60 @@ import org.junit.Test;\n public class UpdatePSFTest {\n \n   public static String DENSE_DOUBLE_MAT = \"dense_double_mat\";\n+\n   public static String DENSE_DOUBLE_MAT_COMP = \"dense_double_mat_comp\";\n+\n   public static String SPARSE_DOUBLE_MAT = \"sparse_double_mat\";\n+\n   public static String SPARSE_DOUBLE_MAT_COMP = \"sparse_double_mat_comp\";\n \n   public static String DENSE_FLOAT_MAT = \"dense_float_mat\";\n+\n   public static String DENSE_FLOAT_MAT_COMP = \"dense_float_mat_comp\";\n+\n   public static String SPARSE_FLOAT_MAT = \"sparse_float_mat\";\n+\n   public static String SPARSE_FLOAT_MAT_COMP = \"sparse_float_mat_comp\";\n \n   public static String DENSE_INT_MAT = \"dense_int_mat\";\n+\n   public static String DENSE_INT_MAT_COMP = \"dense_int_mat_comp\";\n+\n   public static String SPARSE_INT_MAT = \"sparse_int_mat\";\n+\n   public static String SPARSE_INT_MAT_COMP = \"sparse_int_mat_comp\";\n \n   public static String DENSE_LONG_MAT = \"dense_long_mat\";\n+\n   public static String DENSE_LONG_MAT_COMP = \"dense_long_mat_comp\";\n+\n   public static String SPARSE_LONG_MAT = \"sparse_long_mat\";\n+\n   public static String SPARSE_LONG_MAT_COMP = \"sparse_long_mat_comp\";\n \n   public static String DENSE_DOUBLE_LONG_MAT_COMP = \"dense_double_long_mat_comp\";\n+\n   public static String SPARSE_DOUBLE_LONG_MAT = \"sparse_double_long_mat\";\n+\n   public static String SPARSE_DOUBLE_LONG_MAT_COMP = \"sparse_double_long_mat_comp\";\n \n   public static String DENSE_FLOAT_LONG_MAT_COMP = \"dense_float_long_mat_comp\";\n+\n   public static String SPARSE_FLOAT_LONG_MAT = \"sparse_float_long_mat\";\n+\n   public static String SPARSE_FLOAT_LONG_MAT_COMP = \"sparse_float_long_mat_comp\";\n \n   public static String DENSE_INT_LONG_MAT_COMP = \"dense_int_long_mat_comp\";\n+\n   public static String SPARSE_INT_LONG_MAT = \"sparse_int_long_mat\";\n+\n   public static String SPARSE_INT_LONG_MAT_COMP = \"sparse_int_long_mat_comp\";\n \n   public static String DENSE_LONG_LONG_MAT_COMP = \"dense_long_long_mat_comp\";\n+\n   public static String SPARSE_LONG_LONG_MAT = \"sparse_long_long_mat\";\n-  public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n \n+  public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n   private static final Log LOG = LogFactory.getLog(GetRowTest.class);\n   private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n   private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n@@ -126,7 +144,10 @@ public class UpdatePSFTest {\n   private WorkerId workerId;\n   private WorkerAttemptId workerAttempt0Id;\n \n+\n   int feaNum = 100;\n+\n+\n   int nnz = 10;\n \n   static {\n@@ -148,12 +169,10 @@ public class UpdatePSFTest {\n     conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/out\");\n     conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n     conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n     conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n-\n     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n@@ -420,12 +439,9 @@ public class UpdatePSFTest {\n     angelClient.startPSServer();\n     // Start to run application\n     angelClient.run();\n-\n     Thread.sleep(5000);\n-\n     psId = new ParameterServerId(0);\n     psAttempt0Id = new PSAttemptId(psId, 0);\n-\n     WorkerGroupId workerGroupId = new WorkerGroupId(0);\n     workerId = new WorkerId(workerGroupId, 0);\n     workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n@@ -456,42 +472,31 @@ public class UpdatePSFTest {\n \n     //testDenseLongCompUDF();\n     //testSparseLongCompUDF();*/\n-\n     testSparseDoubleLongKeyUDF();\n     //testSparseDoubleLongKeyCompUDF();\n-\n     testSparseFloatLongKeyUDF();\n     //testSparseFloatLongKeyCompUDF();\n-\n     testSparseIntLongKeyUDF();\n     //testSparseIntLongKeyCompUDF();\n-\n     testSparseLongLongKeyUDF();\n     //testSparseLongLongKeyCompUDF();\n   }\n \n-\n   public void testSparseDoubleLongKeyUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n-    LongDoubleVector deltaVec =\n-        new LongDoubleVector(feaNum, new LongDoubleSparseVectorStorage(feaNum, nnz));\n+    LongDoubleVector deltaVec = new LongDoubleVector(feaNum, new LongDoubleSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < feaNum; i++) {\n       deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n     //client1.clock().get();\n-\n     LongDoubleVector row = (LongDoubleVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n@@ -501,32 +506,26 @@ public class UpdatePSFTest {\n     //Assert.assertTrue(index.length == row.size());\n   }\n \n-\n   public void testSparseDoubleLongKeyCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n     int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n     LongDoubleVector[] vectors = new LongDoubleVector[num];\n     for (int i = 0; i < num; i++) {\n-      vectors[i] = new LongDoubleVector(blockColNum,\n-          new LongDoubleSparseVectorStorage(blockColNum, nnz / num));\n+      vectors[i] = new LongDoubleVector(blockColNum, new LongDoubleSparseVectorStorage(blockColNum, nnz / num));\n     }\n+\n     CompLongDoubleVector deltaVec = new CompLongDoubleVector(feaNum, vectors, blockColNum);\n     for (long i = 0; i < feaNum; i++) {\n       deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompLongDoubleVector row = (CompLongDoubleVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n@@ -537,25 +536,19 @@ public class UpdatePSFTest {\n   }\n \n   public void testSparseFloatLongKeyUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n-    LongFloatVector deltaVec =\n-        new LongFloatVector(feaNum, new LongFloatSparseVectorStorage(feaNum, nnz));\n+    LongFloatVector deltaVec = new LongFloatVector(feaNum, new LongFloatSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < nnz; i++) {\n       deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n     //client1.clock().get();\n-\n     LongFloatVector row = (LongFloatVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n@@ -569,28 +562,22 @@ public class UpdatePSFTest {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n     int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n     LongFloatVector[] vectors = new LongFloatVector[num];\n     for (int i = 0; i < num; i++) {\n-      vectors[i] =\n-          new LongFloatVector(blockColNum,\n-              new LongFloatSparseVectorStorage(blockColNum, nnz / num));\n+      vectors[i] = new LongFloatVector(blockColNum, new LongFloatSparseVectorStorage(blockColNum, nnz / num));\n     }\n+\n     CompLongFloatVector deltaVec = new CompLongFloatVector(feaNum, vectors, blockColNum);\n     for (int i = 0; i < nnz; i++) {\n       deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompLongFloatVector row = (CompLongFloatVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n@@ -601,24 +588,18 @@ public class UpdatePSFTest {\n   }\n \n   public void testSparseLongLongKeyUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n-    LongLongVector deltaVec =\n-        new LongLongVector(feaNum, new LongLongSparseVectorStorage(feaNum, nnz));\n+    LongLongVector deltaVec = new LongLongVector(feaNum, new LongLongSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < nnz; i++) {\n       deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     LongLongVector row = (LongLongVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n@@ -632,27 +613,22 @@ public class UpdatePSFTest {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n     int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n     LongLongVector[] vectors = new LongLongVector[num];\n     for (int i = 0; i < num; i++) {\n-      vectors[i] =\n-          new LongLongVector(blockColNum, new LongLongSparseVectorStorage(blockColNum, nnz / num));\n+      vectors[i] = new LongLongVector(blockColNum, new LongLongSparseVectorStorage(blockColNum, nnz / num));\n     }\n+\n     CompLongLongVector deltaVec = new CompLongLongVector(feaNum, vectors, blockColNum);\n     for (int i = 0; i < nnz; i++) {\n       deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompLongLongVector row = (CompLongLongVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n@@ -663,23 +639,18 @@ public class UpdatePSFTest {\n   }\n \n   public void testSparseIntLongKeyUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n     LongIntVector deltaVec = new LongIntVector(feaNum, new LongIntSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < nnz; i++) {\n       deltaVec.set(index[i], (int) index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     LongIntVector row = (LongIntVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n@@ -693,27 +664,22 @@ public class UpdatePSFTest {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n     int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n     LongIntVector[] vectors = new LongIntVector[num];\n     for (int i = 0; i < num; i++) {\n-      vectors[i] =\n-          new LongIntVector(blockColNum, new LongIntSparseVectorStorage(blockColNum, nnz / num));\n+      vectors[i] = new LongIntVector(blockColNum, new LongIntSparseVectorStorage(blockColNum, nnz / num));\n     }\n+\n     CompLongIntVector deltaVec = new CompLongIntVector(feaNum, vectors, blockColNum);\n     for (int i = 0; i < nnz; i++) {\n       deltaVec.set(index[i], (int) index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompLongIntVector row = (CompLongIntVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n@@ -723,24 +689,19 @@ public class UpdatePSFTest {\n     //Assert.assertTrue(index.length == row.size());\n   }\n \n-\n   public void testDenseDoubleUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_DOUBLE_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntDoubleVector deltaVec = new IntDoubleVector(feaNum, new IntDoubleDenseVectorStorage(feaNum));\n     for (int i = 0; i < feaNum; i++) {\n       deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntDoubleVector row = (IntDoubleVector) client1.getRow(0);\n     for (int id : index) {\n       Assert.assertEquals(row.get(id), deltaVec.get(id), 0);\n@@ -749,37 +710,30 @@ public class UpdatePSFTest {\n   }\n \n   public void testSparseDoubleUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = new int[feaNum];//genIndexs(feaNum, nnz);\n-    for(int i = 0; i < index.length; i++) {\n+    for (int i = 0; i < index.length; i++) {\n       index[i] = i;\n     }\n \n-    IntDoubleVector deltaVec =\n-        new IntDoubleVector(feaNum, new IntDoubleSparseVectorStorage(feaNum, nnz));\n+    IntDoubleVector deltaVec = new IntDoubleVector(feaNum, new IntDoubleSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < index.length; i++) {\n       deltaVec.set(index[i], index[i]);\n     }\n     //for (int i = 0; i < feaNum; i++) {\n     //  deltaVec.set(i, i);\n     //}\n-\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntDoubleVector row = (IntDoubleVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n       Assert.assertEquals(row.get(id), deltaVec.get(id), 0);\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n   }\n \n@@ -787,11 +741,8 @@ public class UpdatePSFTest {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_DOUBLE_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntDoubleVector[] subVecs = new IntDoubleVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n@@ -803,29 +754,22 @@ public class UpdatePSFTest {\n       deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntDoubleVector row = (CompIntDoubleVector) client1.getRow(0);\n     for (int id : index) {\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n-\n   }\n \n   public void testSparseDoubleCompUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntDoubleVector[] subVecs = new IntDoubleVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n@@ -839,17 +783,14 @@ public class UpdatePSFTest {\n       deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntDoubleVector row = (CompIntDoubleVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n   }\n \n@@ -857,37 +798,28 @@ public class UpdatePSFTest {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_FLOAT_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntFloatVector deltaVec = new IntFloatVector(feaNum, new IntFloatDenseVectorStorage(feaNum));\n     for (int i = 0; i < feaNum; i++) {\n       deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntFloatVector row = (IntFloatVector) client1.getRow(0);\n     for (int id : index) {\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n-\n   }\n \n   public void testSparseFloatUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n-    IntFloatVector deltaVec =\n-        new IntFloatVector(feaNum, new IntFloatSparseVectorStorage(feaNum, nnz));\n+    IntFloatVector deltaVec = new IntFloatVector(feaNum, new IntFloatSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < index.length; i++) {\n       deltaVec.set(index[i], index[i]);\n     }\n@@ -895,17 +827,14 @@ public class UpdatePSFTest {\n     //  deltaVec.set(i, i);\n     //}\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntFloatVector row = (IntFloatVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n       assertEquals(row.get(id), deltaVec.get(id), 0.000001);\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n   }\n \n@@ -913,11 +842,8 @@ public class UpdatePSFTest {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_FLOAT_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntFloatVector[] subVecs = new IntFloatVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n@@ -929,28 +855,22 @@ public class UpdatePSFTest {\n       deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntFloatVector row = (CompIntFloatVector) client1.getRow(0);\n     for (int id : index) {\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n-\n   }\n \n   public void testSparseFloatCompUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n     MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_FLOAT_MAT_COMP);\n-\n     long blockColNum = meta.getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntFloatVector[] subVecs = new IntFloatVector[partNum];\n@@ -959,60 +879,46 @@ public class UpdatePSFTest {\n     }\n \n     CompIntFloatVector deltaVec = new CompIntFloatVector(feaNum, subVecs, (int) blockColNum);\n-\n     for (int i = 0; i < index.length; i++) {\n       deltaVec.set(index[i], index[i]);\n     }\n-\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntFloatVector row = (CompIntFloatVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n       Assert.assertEquals(row.get(id), deltaVec.get(id), 0.000000001);\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n   }\n \n-\n   public void testDenseIntUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_INT_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntIntVector deltaVec = new IntIntVector(feaNum, new IntIntDenseVectorStorage(feaNum));\n     for (int i = 0; i < feaNum; i++) {\n       deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntIntVector row = (IntIntVector) client1.getRow(0);\n     for (int id : index) {\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n-\n   }\n \n   public void testSparseIntUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntIntVector deltaVec = new IntIntVector(feaNum, new IntIntSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < index.length; i++) {\n       deltaVec.set(index[i], index[i]);\n@@ -1021,17 +927,14 @@ public class UpdatePSFTest {\n     //  deltaVec.set(i, i);\n     //}\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntIntVector row = (IntIntVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n   }\n \n@@ -1039,11 +942,8 @@ public class UpdatePSFTest {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_INT_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     MatrixMeta meta = worker.getPSAgent().getMatrix(DENSE_INT_MAT_COMP);\n-\n     long blockColNum = meta.getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntIntVector[] subVecs = new IntIntVector[partNum];\n@@ -1052,33 +952,26 @@ public class UpdatePSFTest {\n     }\n \n     CompIntIntVector deltaVec = new CompIntIntVector(feaNum, subVecs, (int) blockColNum);\n-\n     for (int i = 0; i < feaNum; i++) {\n       deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntIntVector row = (CompIntIntVector) client1.getRow(0);\n     for (int id : index) {\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n-\n   }\n \n   public void testDenseLongCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     MatrixMeta meta = worker.getPSAgent().getMatrix(DENSE_LONG_MAT_COMP);\n-\n     long blockColNum = meta.getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntLongVector[] subVecs = new IntLongVector[partNum];\n@@ -1087,33 +980,26 @@ public class UpdatePSFTest {\n     }\n \n     CompIntLongVector deltaVec = new CompIntLongVector(feaNum, subVecs, (int) blockColNum);\n-\n     for (int i = 0; i < feaNum; i++) {\n       deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntLongVector row = (CompIntLongVector) client1.getRow(0);\n     for (int id : index) {\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n-\n   }\n \n   public void testSparseLongCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_LONG_MAT_COMP);\n-\n     long blockColNum = meta.getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntLongVector[] subVecs = new IntLongVector[partNum];\n@@ -1122,16 +1008,13 @@ public class UpdatePSFTest {\n     }\n \n     CompIntLongVector deltaVec = new CompIntLongVector(feaNum, subVecs, (int) blockColNum);\n-\n     for (int i = 0; i < nnz; i++) {\n       deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntLongVector row = (CompIntLongVector) client1.getRow(0);\n     for (int id : index) {\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n@@ -1143,36 +1026,28 @@ public class UpdatePSFTest {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntLongVector deltaVec = new IntLongVector(feaNum, new IntLongDenseVectorStorage(feaNum));\n     for (int i = 0; i < feaNum; i++) {\n       deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntLongVector row = (IntLongVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n       Assert.assertEquals(row.get(id), deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n-\n   }\n \n   public void testSparseLongUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntLongVector deltaVec = new IntLongVector(feaNum, new IntLongSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < index.length; i++) {\n       deltaVec.set(index[i], index[i]);\n@@ -1181,29 +1056,23 @@ public class UpdatePSFTest {\n     //  deltaVec.set(i, i);\n     //}\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntLongVector row = (IntLongVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n   }\n \n   public void testSparseIntCompUDF() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n     MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_INT_MAT_COMP);\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     long blockColNum = meta.getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntIntVector[] subVecs = new IntIntVector[partNum];\n@@ -1216,23 +1085,18 @@ public class UpdatePSFTest {\n       deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntIntVector row = (CompIntIntVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n       Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n   }\n \n-\n   public static int[] genIndexs(int feaNum, int nnz) {\n-\n     int[] sortedIndex = new int[nnz];\n     Random random = new Random(System.currentTimeMillis());\n     sortedIndex[0] = random.nextInt(feaNum / nnz);\n@@ -1243,7 +1107,6 @@ public class UpdatePSFTest {\n       }\n       sortedIndex[i] = rand + sortedIndex[i - 1];\n     }\n-\n     return sortedIndex;\n   }\n \n@@ -1261,4 +1124,5 @@ public class UpdatePSFTest {\n     LOG.info(\"stop local cluster\");\n     angelClient.stop();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 210
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}