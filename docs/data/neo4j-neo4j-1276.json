{
    "project_name": "neo4j-neo4j",
    "error_id": "1276",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "214",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1276/KernelTransaction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1276/KernelTransaction.java\nindex e7eb27250f2..50fd8a25d5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1276/KernelTransaction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1276/KernelTransaction.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api;\n \n import java.util.Map;\n@@ -56,7 +57,7 @@ import org.neo4j.memory.MemoryTracker;\n \n /**\n  * A transaction with the graph database.\n- *\n+ * <p>\n  * Access to the graph is performed via sub-interfaces like {@link Read}.\n  * Changes made within a transaction are immediately visible to all operations within it, but are only\n  * visible to other transactions after the successful commit of the transaction.\n@@ -106,7 +107,7 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n     /**\n      * Commit and any changes introduced as part of this transaction.\n      * Any transaction that was not committed will be rolled back when it will be closed.\n-     *\n+     * <p>\n      * When {@code commit()} is completed, all resources are released and no more changes are possible in this transaction.\n      *\n      * @return id of the committed transaction or {@link #ROLLBACK_ID} if transaction was rolled back or\n@@ -116,7 +117,7 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n \n     /**\n      * Roll back and any changes introduced as part of this transaction.\n-     *\n+     * <p>\n      * When {@code rollback()} is completed, all resources are released and no more changes are possible in this transaction.\n      */\n     void rollback() throws TransactionFailureException;\n@@ -129,7 +130,7 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n     /**\n      * @return The Write operations of the graph. The returned instance writes to the active transaction state layer.\n      * @throws InvalidTransactionTypeKernelException when transaction cannot be upgraded to a write transaction. This\n-     * can happen when there have been schema modifications.\n+     *                                               can happen when there have been schema modifications.\n      */\n     Write dataWrite() throws InvalidTransactionTypeKernelException;\n \n@@ -167,7 +168,7 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n      * Forbid acquisition and releasing of locks on this transaction. Any call through the kernel API that\n      * requires a lock to be acquired or released will throw a {@link FrozenLocksException}. Calling `freezeLocks`\n      * several times will nest the freezing.\n-     *\n+     * <p>\n      * A transaction can be opened to new lock interactions again by calling {@link KernelTransaction#thawLocks()}\n      * once for every freeze.\n      */\n@@ -210,7 +211,7 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n     @Override\n     default void close() throws TransactionFailureException\n     {\n-        if ( isOpen() )\n+        if (isOpen())\n         {\n             closeTransaction();\n         }\n@@ -241,20 +242,21 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n      * terminated by having other methods throw a specific termination exception, as to sooner reach the assumed\n      * point where {@link #close()} will be invoked.\n      */\n-    void markForTermination( Status reason );\n+    void markForTermination(Status reason);\n \n     /**\n      * Sets the user defined meta data to be associated with started queries.\n+     *\n      * @param data the meta data\n      */\n-    void setMetaData( Map<String,Object> data );\n+    void setMetaData(Map<String, Object> data);\n \n     /**\n      * Gets associated meta data.\n      *\n      * @return the meta data\n      */\n-    Map<String,Object> getMetaData();\n+    Map<String, Object> getMetaData();\n \n     enum Type\n     {\n@@ -277,7 +279,7 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n      * @param prototype the prototype of the unique index to create.\n      * @return IndexReference for the index to be created.\n      */\n-    IndexDescriptor indexUniqueCreate( IndexPrototype prototype ) throws KernelException;\n+    IndexDescriptor indexUniqueCreate(IndexPrototype prototype) throws KernelException;\n \n     /**\n      * @return the security context this transaction is currently executing in.\n@@ -307,12 +309,14 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n \n     /**\n      * Bind this kernel transaction to a user transaction\n+     *\n      * @param internalTransaction\n      */\n-    void bindToUserTransaction( InternalTransaction internalTransaction );\n+    void bindToUserTransaction(InternalTransaction internalTransaction);\n \n     /**\n      * Return user transaction that is bound to current kernel transaction\n+     *\n      * @return\n      */\n     InternalTransaction internalTransaction();\n@@ -329,13 +333,14 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n \n     /**\n      * Timeout for transaction in milliseconds.\n+     *\n      * @return transaction timeout in milliseconds.\n      */\n     long timeout();\n \n     /**\n      * Kernel transaction type\n-     *\n+     * <p>\n      * Implicit if created internally in the database\n      * Explicit if created by the end user\n      *\n@@ -345,6 +350,7 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n \n     /**\n      * Return transaction id that assigned during transaction commit process.\n+     *\n      * @return transaction id.\n      * @throws IllegalStateException if transaction id is not assigned yet\n      */\n@@ -352,6 +358,7 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n \n     /**\n      * Return transaction commit time (in millis) that assigned during transaction commit process.\n+     *\n      * @return transaction commit time\n      * @throws IllegalStateException if commit time is not assigned yet\n      */\n@@ -364,7 +371,7 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n      * @param context the temporary SecurityContext.\n      * @return {@link Revertable} which reverts to the original SecurityContext.\n      */\n-    Revertable overrideWith( SecurityContext context );\n+    Revertable overrideWith(SecurityContext context);\n \n     /**\n      * Clocks associated with this transaction.\n@@ -400,12 +407,14 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n \n     /**\n      * Get transaction local page cursor tracer\n+     *\n      * @return page cursor tracer\n      */\n     PageCursorTracer pageCursorTracer();\n \n     /**\n      * Get the memory tracker for this transaction.\n+     *\n      * @return underlying transaction memory tracker\n      */\n     MemoryTracker memoryTracker();\n@@ -419,12 +428,14 @@ public interface KernelTransaction extends AssertOpen, AutoCloseable\n \n     /**\n      * The id of the database which the transaction is connected to.\n+     *\n      * @return database id.\n      */\n     UUID getDatabaseId();\n \n     /**\n      * The name of the database which the transaction is connected to.\n+     *\n      * @return database name.\n      */\n     String getDatabaseName();\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}