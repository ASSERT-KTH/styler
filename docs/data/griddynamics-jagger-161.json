{
    "project_name": "griddynamics-jagger",
    "error_id": "161",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "warning",
                "message": "Line is longer than 150 characters (found 156).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * @details\n * Metric comparison will be provided by @ref BasicTGDecisionMakerListener decision maker or @n\n * by custom implementation of @ref com.griddynamics.jagger.engine.e1.collector.testgroup.TestGroupDecisionMakerListener \"TestGroupDecisionMakerListener\" @n\n * Metric value will be compared with some reference: ref, where ref is: @n\n * @li value from baseline when refValue = null @n\n * @li refValue in all other cases @n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/161/Limit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/161/Limit.java\nindex b9502662176..117b51469f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/161/Limit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/161/Limit.java\n@@ -20,15 +20,15 @@\n \n package com.griddynamics.jagger.engine.e1.collector.limits;\n \n-/** Class is used to describe individual limits for some metric. Limits are used for decision making\n+/**\n+ * Class is used to describe individual limits for some metric. Limits are used for decision making\n  *\n- * @details\n- * Metric comparison will be provided by @ref BasicTGDecisionMakerListener decision maker or @n\n+ * @details Metric comparison will be provided by @ref BasicTGDecisionMakerListener decision maker or @n\n  * by custom implementation of @ref com.griddynamics.jagger.engine.e1.collector.testgroup.TestGroupDecisionMakerListener \"TestGroupDecisionMakerListener\" @n\n  * Metric value will be compared with some reference: ref, where ref is: @n\n  * @li value from baseline when refValue = null @n\n  * @li refValue in all other cases @n\n- *\n+ * <p>\n  * Result OK when value in range (LWT*ref .. UWT*ref) @n\n  * Result WARNING when value in range (LET*ref .. LWT*ref) OR (UWT*ref .. UET*ref) @n\n  * Result FATAL when value is less than LET*ref OR is greater than UET*ref @n\n@@ -42,9 +42,12 @@ public class Limit {\n     private Double lowerErrorThreshold = 0D;\n     private Double upperErrorThreshold = 0D;\n \n-    public Limit() {}\n+    public Limit() {\n+    }\n \n-    /** Returns metric name (aka metric Id) - metric we are going to compare */\n+    /**\n+     * Returns metric name (aka metric Id) - metric we are going to compare\n+     */\n     public String getMetricName() {\n         return metricName;\n     }\n@@ -53,7 +56,9 @@ public class Limit {\n         this.metricName = metricName;\n     }\n \n-    /** Returns description of this limit */\n+    /**\n+     * Returns description of this limit\n+     */\n     public String getLimitDescription() {\n         return limitDescription;\n     }\n@@ -62,7 +67,9 @@ public class Limit {\n         this.limitDescription = limitDescription;\n     }\n \n-    /** Returns reference value - absolute value used as reference for comparison. When refValue=null we will compare to baseline session value */\n+    /**\n+     * Returns reference value - absolute value used as reference for comparison. When refValue=null we will compare to baseline session value\n+     */\n     public Double getRefValue() {\n         return refValue;\n     }\n@@ -71,7 +78,9 @@ public class Limit {\n         this.refValue = refValue;\n     }\n \n-    /** Returns lower warning threshold - LWT. Relative value */\n+    /**\n+     * Returns lower warning threshold - LWT. Relative value\n+     */\n     public Double getLowerWarningThreshold() {\n         return lowerWarningThreshold;\n     }\n@@ -80,7 +89,9 @@ public class Limit {\n         this.lowerWarningThreshold = lowerWarningThreshold;\n     }\n \n-    /** Returns upper warning threshold - UWT. Relative value */\n+    /**\n+     * Returns upper warning threshold - UWT. Relative value\n+     */\n     public Double getUpperWarningThreshold() {\n         return upperWarningThreshold;\n     }\n@@ -89,7 +100,9 @@ public class Limit {\n         this.upperWarningThreshold = upperWarningThreshold;\n     }\n \n-    /** Returns lower error threshold - LET. Relative value */\n+    /**\n+     * Returns lower error threshold - LET. Relative value\n+     */\n     public Double getLowerErrorThreshold() {\n         return lowerErrorThreshold;\n     }\n@@ -98,7 +111,9 @@ public class Limit {\n         this.lowerErrorThreshold = lowerErrorThreshold;\n     }\n \n-    /** Returns upper error threshold - UET. Relative value */\n+    /**\n+     * Returns upper error threshold - UET. Relative value\n+     */\n     public Double getUpperErrorThreshold() {\n         return upperErrorThreshold;\n     }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/161/Limit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/161/Limit.java\nindex b9502662176..3b3bf04b7c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/161/Limit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/161/Limit.java\n@@ -119,5 +119,4 @@ public class Limit {\n                 \", upperErrorThreshold=\" + upperErrorThreshold +\n                 '}';\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/161/Limit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/codebuff/161/Limit.java\nindex b9502662176..04c661885f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/161/Limit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/codebuff/161/Limit.java\n@@ -33,7 +33,9 @@ package com.griddynamics.jagger.engine.e1.collector.limits;\n  * Result WARNING when value in range (LET*ref .. LWT*ref) OR (UWT*ref .. UET*ref) @n\n  * Result FATAL when value is less than LET*ref OR is greater than UET*ref @n\n  */\n+\n public class Limit {\n+\n     private String metricName = null;\n     private String limitDescription;\n     private Double refValue = null;\n@@ -45,6 +47,7 @@ public class Limit {\n     public Limit() {}\n \n     /** Returns metric name (aka metric Id) - metric we are going to compare */\n+\n     public String getMetricName() {\n         return metricName;\n     }\n@@ -54,6 +57,7 @@ public class Limit {\n     }\n \n     /** Returns description of this limit */\n+\n     public String getLimitDescription() {\n         return limitDescription;\n     }\n@@ -63,6 +67,7 @@ public class Limit {\n     }\n \n     /** Returns reference value - absolute value used as reference for comparison. When refValue=null we will compare to baseline session value */\n+\n     public Double getRefValue() {\n         return refValue;\n     }\n@@ -72,6 +77,7 @@ public class Limit {\n     }\n \n     /** Returns lower warning threshold - LWT. Relative value */\n+\n     public Double getLowerWarningThreshold() {\n         return lowerWarningThreshold;\n     }\n@@ -81,6 +87,7 @@ public class Limit {\n     }\n \n     /** Returns upper warning threshold - UWT. Relative value */\n+\n     public Double getUpperWarningThreshold() {\n         return upperWarningThreshold;\n     }\n@@ -90,6 +97,7 @@ public class Limit {\n     }\n \n     /** Returns lower error threshold - LET. Relative value */\n+\n     public Double getLowerErrorThreshold() {\n         return lowerErrorThreshold;\n     }\n@@ -99,6 +107,7 @@ public class Limit {\n     }\n \n     /** Returns upper error threshold - UET. Relative value */\n+\n     public Double getUpperErrorThreshold() {\n         return upperErrorThreshold;\n     }\n@@ -110,14 +119,12 @@ public class Limit {\n     @Override\n     public String toString() {\n         return \"Limit{\" +\n-                \"metricName='\" + metricName + '\\'' +\n-                \", limitDescription='\" + limitDescription + '\\'' +\n-                \", refValue=\" + refValue +\n-                \", lowerWarningThreshold=\" + lowerWarningThreshold +\n-                \", upperWarningThreshold=\" + upperWarningThreshold +\n-                \", lowerErrorThreshold=\" + lowerErrorThreshold +\n-                \", upperErrorThreshold=\" + upperErrorThreshold +\n-                '}';\n+        \"metricName='\" + metricName + '\\'' +\n+        \", limitDescription='\" + limitDescription + '\\'' +\n+        \", refValue=\" + refValue +\n+        \", lowerWarningThreshold=\" + lowerWarningThreshold +\n+        \", upperWarningThreshold=\" + upperWarningThreshold +\n+        \", lowerErrorThreshold=\" + lowerErrorThreshold +\n+        \", upperErrorThreshold=\" + upperErrorThreshold + '}';\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}