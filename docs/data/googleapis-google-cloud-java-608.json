{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "608",
    "information": {
        "errors": [
            {
                "line": "145",
                "severity": "warning",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    assertEquals(tableInfo, tableInfo.toBuilder().build());\n  }\n  @Test\n  public void testBuilder() {\n    assertEquals(TABLE_ID, TABLE_INFO.tableId());\n    assertEquals(TABLE_SCHEMA, TABLE_INFO.schema());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/608/TableInfoTest.java\nindex b29ddef665d..ccb23ac6d66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/608/TableInfoTest.java\n@@ -142,6 +142,7 @@ public class TableInfoTest {\n     TableInfo tableInfo = TableInfo.of(TABLE_ID, VIEW_QUERY);\n     assertEquals(tableInfo, tableInfo.toBuilder().build());\n   }\n+\n   @Test\n   public void testBuilder() {\n     assertEquals(TABLE_ID, TABLE_INFO.tableId());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/608/TableInfoTest.java\nindex b29ddef665d..ccb23ac6d66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/608/TableInfoTest.java\n@@ -142,6 +142,7 @@ public class TableInfoTest {\n     TableInfo tableInfo = TableInfo.of(TABLE_ID, VIEW_QUERY);\n     assertEquals(tableInfo, tableInfo.toBuilder().build());\n   }\n+\n   @Test\n   public void testBuilder() {\n     assertEquals(TABLE_ID, TABLE_INFO.tableId());\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'Field' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'Field' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/608/TableInfoTest.java\nindex b29ddef665d..796ce2ea8b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/608/TableInfoTest.java\n@@ -32,17 +32,17 @@ public class TableInfoTest {\n           .mode(Field.Mode.NULLABLE)\n           .description(\"FieldDescription1\")\n           .build();\n-  private static final Field FIELD_SCHEMA2 =\n+    private static final Field FIELD_SCHEMA2 =\n       Field.builder(\"IntegerField\", Field.Type.integer())\n           .mode(Field.Mode.REPEATED)\n           .description(\"FieldDescription2\")\n           .build();\n-  private static final Field FIELD_SCHEMA3 =\n+    private static final Field FIELD_SCHEMA3 =\n       Field.builder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2))\n           .mode(Field.Mode.REQUIRED)\n           .description(\"FieldDescription3\")\n           .build();\n-  private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n+    private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n   private static final String VIEW_QUERY = \"VIEW QUERY\";\n   private static final List<String> SOURCE_URIS = ImmutableList.of(\"uri1\", \"uri2\");\n   private static final String SOURCE_FORMAT = \"CSV\";\n@@ -50,8 +50,7 @@ public class TableInfoTest {\n   private static final Boolean IGNORE_UNKNOWN_VALUES = true;\n   private static final String COMPRESSION = \"GZIP\";\n   private static final CsvOptions CSV_OPTIONS = CsvOptions.builder().build();\n-  private static final ExternalDataConfiguration CONFIGURATION = ExternalDataConfiguration\n-      .builder(SOURCE_URIS, TABLE_SCHEMA, SOURCE_FORMAT)\n+  private static final ExternalDataConfiguration CONFIGURATION = ExternalDataConfiguration.builder(SOURCE_URIS, TABLE_SCHEMA, SOURCE_FORMAT)\n       .compression(COMPRESSION)\n       .csvOptions(CSV_OPTIONS)\n       .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n@@ -119,7 +118,7 @@ public class TableInfoTest {\n           .type(TableInfo.Type.VIEW)\n           .build();\n \n-  @Test\n+@Test\n   public void testToBuilder() {\n     compareTableInfo(TABLE_INFO, TABLE_INFO.toBuilder().build());\n     compareTableInfo(VIEW_INFO, VIEW_INFO.toBuilder().build());\n@@ -142,7 +141,8 @@ public class TableInfoTest {\n     TableInfo tableInfo = TableInfo.of(TABLE_ID, VIEW_QUERY);\n     assertEquals(tableInfo, tableInfo.toBuilder().build());\n   }\n-  @Test\n+\n+@Test\n   public void testBuilder() {\n     assertEquals(TABLE_ID, TABLE_INFO.tableId());\n     assertEquals(TABLE_SCHEMA, TABLE_INFO.schema());\n@@ -224,4 +224,4 @@ public class TableInfoTest {\n     assertEquals(expected.streamingBuffer(), value.streamingBuffer());\n     assertEquals(expected.type(), value.type());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 272).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 402).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 412).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 422).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/608/TableInfoTest.java\nindex b29ddef665d..0217c0165ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/608/TableInfoTest.java\n@@ -20,28 +20,15 @@ import static org.junit.Assert.assertEquals;\n \n import com.google.common.collect.ImmutableList;\n import com.google.gcloud.bigquery.TableInfo.StreamingBuffer;\n-\n import org.junit.Test;\n-\n import java.util.List;\n \n+\n public class TableInfoTest {\n \n-  private static final Field FIELD_SCHEMA1 =\n-      Field.builder(\"StringField\", Field.Type.string())\n-          .mode(Field.Mode.NULLABLE)\n-          .description(\"FieldDescription1\")\n-          .build();\n-  private static final Field FIELD_SCHEMA2 =\n-      Field.builder(\"IntegerField\", Field.Type.integer())\n-          .mode(Field.Mode.REPEATED)\n-          .description(\"FieldDescription2\")\n-          .build();\n-  private static final Field FIELD_SCHEMA3 =\n-      Field.builder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2))\n-          .mode(Field.Mode.REQUIRED)\n-          .description(\"FieldDescription3\")\n-          .build();\n+  private static final Field FIELD_SCHEMA1 = Field.builder(\"StringField\", Field.Type.string()).mode(Field.Mode.NULLABLE).description(\"FieldDescription1\").build();\n+  private static final Field FIELD_SCHEMA2 = Field.builder(\"IntegerField\", Field.Type.integer()).mode(Field.Mode.REPEATED).description(\"FieldDescription2\").build();\n+  private static final Field FIELD_SCHEMA3 = Field.builder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2)).mode(Field.Mode.REQUIRED).description(\"FieldDescription3\").build();\n   private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n   private static final String VIEW_QUERY = \"VIEW QUERY\";\n   private static final List<String> SOURCE_URIS = ImmutableList.of(\"uri1\", \"uri2\");\n@@ -50,13 +37,7 @@ public class TableInfoTest {\n   private static final Boolean IGNORE_UNKNOWN_VALUES = true;\n   private static final String COMPRESSION = \"GZIP\";\n   private static final CsvOptions CSV_OPTIONS = CsvOptions.builder().build();\n-  private static final ExternalDataConfiguration CONFIGURATION = ExternalDataConfiguration\n-      .builder(SOURCE_URIS, TABLE_SCHEMA, SOURCE_FORMAT)\n-      .compression(COMPRESSION)\n-      .csvOptions(CSV_OPTIONS)\n-      .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-      .maxBadRecords(MAX_BAD_RECORDS)\n-      .build();\n+  private static final ExternalDataConfiguration CONFIGURATION = ExternalDataConfiguration.builder(SOURCE_URIS, TABLE_SCHEMA, SOURCE_FORMAT).compression(COMPRESSION).csvOptions(CSV_OPTIONS).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).maxBadRecords(MAX_BAD_RECORDS).build();\n   private static final String ETAG = \"etag\";\n   private static final String ID = \"project:dataset:table\";\n   private static final String SELF_LINK = \"selfLink\";\n@@ -70,70 +51,20 @@ public class TableInfoTest {\n   private static final Long LAST_MODIFIED_TIME = 20L;\n   private static final String LOCATION = \"US\";\n   private static final StreamingBuffer STREAMING_BUFFER = new StreamingBuffer(1L, 2L, 3L);\n-  private static final TableInfo TABLE_INFO = TableInfo.builder(TABLE_ID, TABLE_SCHEMA)\n-      .creationTime(CREATION_TIME)\n-      .description(DESCRIPTION)\n-      .etag(ETAG)\n-      .expirationTime(EXPIRATION_TIME)\n-      .friendlyName(FRIENDLY_NAME)\n-      .id(ID)\n-      .lastModifiedTime(LAST_MODIFIED_TIME)\n-      .location(LOCATION)\n-      .numBytes(NUM_BYTES)\n-      .numRows(NUM_ROWS)\n-      .selfLink(SELF_LINK)\n-      .streamingBuffer(STREAMING_BUFFER)\n-      .type(TableInfo.Type.TABLE)\n-      .build();\n-  private static final TableInfo EXTERNAL_TABLE_INFO = TableInfo.builder(TABLE_ID, CONFIGURATION)\n-      .creationTime(CREATION_TIME)\n-      .description(DESCRIPTION)\n-      .etag(ETAG)\n-      .expirationTime(EXPIRATION_TIME)\n-      .friendlyName(FRIENDLY_NAME)\n-      .id(ID)\n-      .lastModifiedTime(LAST_MODIFIED_TIME)\n-      .location(LOCATION)\n-      .numBytes(NUM_BYTES)\n-      .numRows(NUM_ROWS)\n-      .selfLink(SELF_LINK)\n-      .streamingBuffer(STREAMING_BUFFER)\n-      .type(TableInfo.Type.TABLE)\n-      .build();\n-  private static List<UserDefinedFunction> USER_DEFINED_FUNCTIONS = ImmutableList.of(\n-      UserDefinedFunction.inline(\"Function\"), UserDefinedFunction.fromUri(\"URI\"));\n-  private static final TableInfo VIEW_INFO =\n-      TableInfo.builder(TABLE_ID, VIEW_QUERY, USER_DEFINED_FUNCTIONS)\n-          .creationTime(CREATION_TIME)\n-          .description(DESCRIPTION)\n-          .etag(ETAG)\n-          .expirationTime(EXPIRATION_TIME)\n-          .friendlyName(FRIENDLY_NAME)\n-          .id(ID)\n-          .lastModifiedTime(LAST_MODIFIED_TIME)\n-          .location(LOCATION)\n-          .numBytes(NUM_BYTES)\n-          .numRows(NUM_ROWS)\n-          .selfLink(SELF_LINK)\n-          .streamingBuffer(STREAMING_BUFFER)\n-          .type(TableInfo.Type.VIEW)\n-          .build();\n+  private static final TableInfo TABLE_INFO = TableInfo.builder(TABLE_ID, TABLE_SCHEMA).creationTime(CREATION_TIME).description(DESCRIPTION).etag(ETAG).expirationTime(EXPIRATION_TIME).friendlyName(FRIENDLY_NAME).id(ID).lastModifiedTime(LAST_MODIFIED_TIME).location(LOCATION).numBytes(NUM_BYTES).numRows(NUM_ROWS).selfLink(SELF_LINK).streamingBuffer(STREAMING_BUFFER).type(TableInfo.Type.TABLE).build();\n+  private static final TableInfo EXTERNAL_TABLE_INFO = TableInfo.builder(TABLE_ID, CONFIGURATION).creationTime(CREATION_TIME).description(DESCRIPTION).etag(ETAG).expirationTime(EXPIRATION_TIME).friendlyName(FRIENDLY_NAME).id(ID).lastModifiedTime(LAST_MODIFIED_TIME).location(LOCATION).numBytes(NUM_BYTES).numRows(NUM_ROWS).selfLink(SELF_LINK).streamingBuffer(STREAMING_BUFFER).type(TableInfo.Type.TABLE).build();\n+  private static List<UserDefinedFunction> USER_DEFINED_FUNCTIONS = ImmutableList.of(UserDefinedFunction.inline(\"Function\"), UserDefinedFunction.fromUri(\"URI\"));\n+  private static final TableInfo VIEW_INFO = TableInfo.builder(TABLE_ID, VIEW_QUERY, USER_DEFINED_FUNCTIONS).creationTime(CREATION_TIME).description(DESCRIPTION).etag(ETAG).expirationTime(EXPIRATION_TIME).friendlyName(FRIENDLY_NAME).id(ID).lastModifiedTime(LAST_MODIFIED_TIME).location(LOCATION).numBytes(NUM_BYTES).numRows(NUM_ROWS).selfLink(SELF_LINK).streamingBuffer(STREAMING_BUFFER).type(TableInfo.Type.VIEW).build();\n \n   @Test\n   public void testToBuilder() {\n     compareTableInfo(TABLE_INFO, TABLE_INFO.toBuilder().build());\n     compareTableInfo(VIEW_INFO, VIEW_INFO.toBuilder().build());\n     compareTableInfo(EXTERNAL_TABLE_INFO, EXTERNAL_TABLE_INFO.toBuilder().build());\n-    TableInfo tableInfo = TABLE_INFO.toBuilder()\n-        .type(TableInfo.Type.VIEW)\n-        .description(\"newDescription\")\n-        .build();\n+    TableInfo tableInfo = TABLE_INFO.toBuilder().type(TableInfo.Type.VIEW).description(\"newDescription\").build();\n     assertEquals(TableInfo.Type.VIEW, tableInfo.type());\n     assertEquals(\"newDescription\", tableInfo.description());\n-    tableInfo = tableInfo.toBuilder()\n-        .type(TableInfo.Type.TABLE)\n-        .description(\"description\")\n-        .build();\n+    tableInfo = tableInfo.toBuilder().type(TableInfo.Type.TABLE).description(\"description\").build();\n     compareTableInfo(TABLE_INFO, tableInfo);\n   }\n \n@@ -142,6 +73,7 @@ public class TableInfoTest {\n     TableInfo tableInfo = TableInfo.of(TABLE_ID, VIEW_QUERY);\n     assertEquals(tableInfo, tableInfo.toBuilder().build());\n   }\n+\n   @Test\n   public void testBuilder() {\n     assertEquals(TABLE_ID, TABLE_INFO.tableId());\n@@ -224,4 +156,4 @@ public class TableInfoTest {\n     assertEquals(expected.streamingBuffer(), value.streamingBuffer());\n     assertEquals(expected.type(), value.type());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 83
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/608/TableInfoTest.java\nindex b29ddef665d..ccb23ac6d66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/608/TableInfoTest.java\n@@ -142,6 +142,7 @@ public class TableInfoTest {\n     TableInfo tableInfo = TableInfo.of(TABLE_ID, VIEW_QUERY);\n     assertEquals(tableInfo, tableInfo.toBuilder().build());\n   }\n+\n   @Test\n   public void testBuilder() {\n     assertEquals(TABLE_ID, TABLE_INFO.tableId());\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/608/TableInfoTest.java\nindex b29ddef665d..ccb23ac6d66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/608/TableInfoTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/608/TableInfoTest.java\n@@ -142,6 +142,7 @@ public class TableInfoTest {\n     TableInfo tableInfo = TableInfo.of(TABLE_ID, VIEW_QUERY);\n     assertEquals(tableInfo, tableInfo.toBuilder().build());\n   }\n+\n   @Test\n   public void testBuilder() {\n     assertEquals(TABLE_ID, TABLE_INFO.tableId());\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}