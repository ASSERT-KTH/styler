{
    "project_name": "graphfoundation-ongdb",
    "error_id": "603",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/603/UpstreamDatabaseStrategiesLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/603/UpstreamDatabaseStrategiesLoader.java\nindex a3ce7bf2a19..6000e082b04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/603/UpstreamDatabaseStrategiesLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/603/UpstreamDatabaseStrategiesLoader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.upstream;\n \n import java.util.Collection;\n@@ -38,51 +39,51 @@ import org.neo4j.logging.LogProvider;\n  */\n public class UpstreamDatabaseStrategiesLoader implements Iterable<UpstreamDatabaseSelectionStrategy>\n {\n-    private final TopologyService topologyService;\n-    private final Config config;\n-    private final MemberId myself;\n-    private final Log log;\n-    private final LogProvider logProvider;\n+  private final TopologyService topologyService;\n+  private final Config config;\n+  private final MemberId myself;\n+  private final Log log;\n+  private final LogProvider logProvider;\n \n-    public UpstreamDatabaseStrategiesLoader( TopologyService topologyService, Config config, MemberId myself, LogProvider logProvider )\n-    {\n-        this.topologyService = topologyService;\n-        this.config = config;\n-        this.myself = myself;\n-        this.log = logProvider.getLog( this.getClass() );\n-        this.logProvider = logProvider;\n-    }\n+  public UpstreamDatabaseStrategiesLoader(TopologyService topologyService, Config config, MemberId myself, LogProvider logProvider)\n+  {\n+    this.topologyService = topologyService;\n+    this.config = config;\n+    this.myself = myself;\n+    this.log = logProvider.getLog(this.getClass());\n+    this.logProvider = logProvider;\n+  }\n \n-    @Override\n-    public Iterator<UpstreamDatabaseSelectionStrategy> iterator()\n-    {\n-        Iterable<UpstreamDatabaseSelectionStrategy> allImplementationsOnClasspath = Service.load( UpstreamDatabaseSelectionStrategy.class );\n+  @Override\n+  public Iterator<UpstreamDatabaseSelectionStrategy> iterator()\n+  {\n+    Iterable<UpstreamDatabaseSelectionStrategy> allImplementationsOnClasspath = Service.load(UpstreamDatabaseSelectionStrategy.class);\n \n-        LinkedHashSet<UpstreamDatabaseSelectionStrategy> candidates = new LinkedHashSet<>();\n-        for ( String key : config.get( CausalClusteringSettings.upstream_selection_strategy ) )\n+    LinkedHashSet<UpstreamDatabaseSelectionStrategy> candidates = new LinkedHashSet<>();\n+    for (String key : config.get(CausalClusteringSettings.upstream_selection_strategy))\n+    {\n+      for (UpstreamDatabaseSelectionStrategy candidate : allImplementationsOnClasspath)\n+      {\n+        if (candidate.getKeys().iterator().next().equals(key))\n         {\n-            for ( UpstreamDatabaseSelectionStrategy candidate : allImplementationsOnClasspath )\n-            {\n-                if ( candidate.getKeys().iterator().next().equals( key ) )\n-                {\n-                    candidate.inject( topologyService, config, logProvider, myself );\n-                    candidates.add( candidate );\n-                }\n-            }\n+          candidate.inject(topologyService, config, logProvider, myself);\n+          candidates.add(candidate);\n         }\n+      }\n+    }\n \n-        log( candidates );\n+    log(candidates);\n \n-        return candidates.iterator();\n-    }\n+    return candidates.iterator();\n+  }\n \n-    private void log( LinkedHashSet<UpstreamDatabaseSelectionStrategy> candidates )\n-    {\n-        log.debug( \"Upstream database strategies loaded in order of precedence: \" + nicelyCommaSeparatedList( candidates ) );\n-    }\n+  private void log(LinkedHashSet<UpstreamDatabaseSelectionStrategy> candidates)\n+  {\n+    log.debug(\"Upstream database strategies loaded in order of precedence: \" + nicelyCommaSeparatedList(candidates));\n+  }\n \n-    private static String nicelyCommaSeparatedList( Collection<UpstreamDatabaseSelectionStrategy> items )\n-    {\n-        return items.stream().map( UpstreamDatabaseSelectionStrategy::toString ).collect( Collectors.joining( \", \" ) );\n-    }\n+  private static String nicelyCommaSeparatedList(Collection<UpstreamDatabaseSelectionStrategy> items)\n+  {\n+    return items.stream().map(UpstreamDatabaseSelectionStrategy::toString).collect(Collectors.joining(\", \"));\n+  }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/603/UpstreamDatabaseStrategiesLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/603/UpstreamDatabaseStrategiesLoader.java\nindex a3ce7bf2a19..03e94e6eae3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/603/UpstreamDatabaseStrategiesLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/603/UpstreamDatabaseStrategiesLoader.java\n@@ -72,8 +72,7 @@ public class UpstreamDatabaseStrategiesLoader implements Iterable<UpstreamDataba\n         }\n \n         log( candidates );\n-\n-        return candidates.iterator();\n+return candidates.iterator();\n     }\n \n     private void log( LinkedHashSet<UpstreamDatabaseSelectionStrategy> candidates )\n@@ -85,4 +84,4 @@ public class UpstreamDatabaseStrategiesLoader implements Iterable<UpstreamDataba\n     {\n         return items.stream().map( UpstreamDatabaseSelectionStrategy::toString ).collect( Collectors.joining( \", \" ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}