{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "178",
    "information": {
        "errors": [
            {
                "line": "27",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class MergeSort\n{\n\tprivate MergeSort()\n\t{\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/178/MergeSort.java\nindex a9145370380..f51e8e11fd8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/178/MergeSort.java\n@@ -24,7 +24,7 @@ import java.util.Comparator;\n \r\n public class MergeSort\r\n {\r\n-\tprivate MergeSort()\r\n+private MergeSort()\r\n \t{\r\n \t}\r\n \r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/178/MergeSort.java\nindex a9145370380..b8a62264b63 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/178/MergeSort.java\n@@ -3,83 +3,78 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ * <p>\r\n  * Portions copyright (c) 2009-2010 TIBCO Software Inc.\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *    http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10;\r\n \r\n import java.util.Comparator;\r\n \r\n-public class MergeSort\r\n-{\r\n-\tprivate MergeSort()\r\n-\t{\r\n-\t}\r\n+public class MergeSort {\r\n+    private MergeSort() {\r\n+    }\r\n \r\n-\tpublic static <T> void sort(final Comparator<T> cmp, final T[] src, final int off, final int len, final T[] temp, final int tempOff)\r\n-\t{\r\n-\t\tif (len <= 1)\r\n-\t\t{\r\n-\t\t\treturn;\r\n-\t\t}\r\n-\t\tint halfLen = len / 2;\r\n-\t\tsortCopy(cmp, src, off, halfLen, temp, tempOff);\r\n-\t\tsortCopy(cmp, src, off + halfLen, len - halfLen, temp, tempOff + halfLen);\r\n-\t\tmerge(cmp, temp, tempOff, halfLen, len - halfLen, src, off);\r\n-\t}\r\n+    public static <T> void sort(final Comparator<T> cmp, final T[] src, final int off,\r\n+                                final int len, final T[] temp, final int tempOff) {\r\n+        if (len <= 1) {\r\n+            return;\r\n+        }\r\n+        int halfLen = len / 2;\r\n+        sortCopy(cmp, src, off, halfLen, temp, tempOff);\r\n+        sortCopy(cmp, src, off + halfLen, len - halfLen, temp, tempOff + halfLen);\r\n+        merge(cmp, temp, tempOff, halfLen, len - halfLen, src, off);\r\n+    }\r\n \r\n-\tprivate static <T> void sortCopy(final Comparator<T> cmp, final T[] src, final int off, final int len, final T[] dest, final int destOff)\r\n-\t{\r\n-\t\tif (len <= 1)\r\n-\t\t{\r\n-\t\t\tif (len != 0)\r\n-\t\t\t{\r\n-\t\t\t\tdest[destOff] = src[off];\r\n-\t\t\t}\r\n-\t\t\treturn;\r\n-\t\t}\r\n-\t\tint halfLen = len / 2;\r\n-\t\tsort(cmp, src, off, halfLen, dest, destOff);\r\n-\t\tsort(cmp, src, off + halfLen, len - halfLen, dest, destOff + halfLen);\r\n-\t\tmerge(cmp, src, off, halfLen, len - halfLen, dest, destOff);\r\n-\t}\r\n+    private static <T> void sortCopy(final Comparator<T> cmp, final T[] src, final int off,\r\n+                                     final int len, final T[] dest, final int destOff) {\r\n+        if (len <= 1) {\r\n+            if (len != 0) {\r\n+                dest[destOff] = src[off];\r\n+            }\r\n+            return;\r\n+        }\r\n+        int halfLen = len / 2;\r\n+        sort(cmp, src, off, halfLen, dest, destOff);\r\n+        sort(cmp, src, off + halfLen, len - halfLen, dest, destOff + halfLen);\r\n+        merge(cmp, src, off, halfLen, len - halfLen, dest, destOff);\r\n+    }\r\n \r\n-\tprivate static <T> void merge(Comparator<T> cmp, T[] src, int off1, int len1, int len2, T[] dest, int destOff)\r\n-\t{\r\n-\t\tint off2 = off1 + len1;\r\n-\t\tif (len1 != 0 && len2 != 0)\r\n-\t\t{\r\n-\t\t\tfor (;;)\r\n-\t\t\t{\r\n-\t\t\t\tif (cmp.compare(src[off1], src[off2]) <= 0)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tdest[destOff++] = src[off1++];\r\n-\t\t\t\t\tif (--len1 == 0)\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\telse\r\n-\t\t\t\t{\r\n-\t\t\t\t\tdest[destOff++] = src[off2++];\r\n-\t\t\t\t\tif (--len2 == 0)\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tfor (; len1 > 0; --len1)\r\n-\t\t\tdest[destOff++] = src[off1++];\r\n-\t\tfor (; len2 > 0; --len2)\r\n-\t\t\tdest[destOff++] = src[off2++];\r\n-\t}\r\n+    private static <T> void merge(Comparator<T> cmp, T[] src, int off1, int len1, int len2,\r\n+                                  T[] dest, int destOff) {\r\n+        int off2 = off1 + len1;\r\n+        if (len1 != 0 && len2 != 0) {\r\n+            for (; ; ) {\r\n+                if (cmp.compare(src[off1], src[off2]) <= 0) {\r\n+                    dest[destOff++] = src[off1++];\r\n+                    if (--len1 == 0) {\r\n+                        break;\r\n+                    }\r\n+                } else {\r\n+                    dest[destOff++] = src[off2++];\r\n+                    if (--len2 == 0) {\r\n+                        break;\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        for (; len1 > 0; --len1) {\r\n+            dest[destOff++] = src[off1++];\r\n+        }\r\n+        for (; len2 > 0; --len2) {\r\n+            dest[destOff++] = src[off2++];\r\n+        }\r\n+    }\r\n }\r\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/178/MergeSort.java\nindex a9145370380..9fa48ad23b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/178/MergeSort.java\n@@ -23,63 +23,64 @@ package org.genxdm.processor.xpath.v10;\n import java.util.Comparator;\r\n \r\n public class MergeSort\r\n-{\r\n-\tprivate MergeSort()\r\n+{\n+    private MergeSort()\r\n \t{\r\n \t}\r\n \r\n \tpublic static <T> void sort(final Comparator<T> cmp, final T[] src, final int off, final int len, final T[] temp, final int tempOff)\r\n-\t{\r\n-\t\tif (len <= 1)\r\n-\t\t{\r\n-\t\t\treturn;\r\n-\t\t}\r\n+\t{\n+    if (len <= 1)\r\n+\t\t{\n+    return;\n+    }\r\n \t\tint halfLen = len / 2;\r\n \t\tsortCopy(cmp, src, off, halfLen, temp, tempOff);\r\n \t\tsortCopy(cmp, src, off + halfLen, len - halfLen, temp, tempOff + halfLen);\r\n-\t\tmerge(cmp, temp, tempOff, halfLen, len - halfLen, src, off);\r\n-\t}\r\n+\t\tmerge(cmp, temp, tempOff, halfLen, len - halfLen, src, off);\n+    }\r\n \r\n \tprivate static <T> void sortCopy(final Comparator<T> cmp, final T[] src, final int off, final int len, final T[] dest, final int destOff)\r\n-\t{\r\n-\t\tif (len <= 1)\r\n-\t\t{\r\n-\t\t\tif (len != 0)\r\n-\t\t\t{\r\n-\t\t\t\tdest[destOff] = src[off];\r\n-\t\t\t}\r\n-\t\t\treturn;\r\n-\t\t}\r\n+\t{\n+    if (len <= 1)\r\n+\t\t{\n+    if (len != 0)\r\n+\t\t\t{\n+    dest[destOff] = src[off];\n+    }\r\n+\t\t\treturn;\n+    }\r\n \t\tint halfLen = len / 2;\r\n \t\tsort(cmp, src, off, halfLen, dest, destOff);\r\n \t\tsort(cmp, src, off + halfLen, len - halfLen, dest, destOff + halfLen);\r\n-\t\tmerge(cmp, src, off, halfLen, len - halfLen, dest, destOff);\r\n-\t}\r\n+\t\tmerge(cmp, src, off, halfLen, len - halfLen, dest, destOff);\n+    }\r\n \r\n \tprivate static <T> void merge(Comparator<T> cmp, T[] src, int off1, int len1, int len2, T[] dest, int destOff)\r\n-\t{\r\n-\t\tint off2 = off1 + len1;\r\n+\t{\n+    int off2 = off1 + len1;\r\n \t\tif (len1 != 0 && len2 != 0)\r\n-\t\t{\r\n-\t\t\tfor (;;)\r\n-\t\t\t{\r\n-\t\t\t\tif (cmp.compare(src[off1], src[off2]) <= 0)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tdest[destOff++] = src[off1++];\r\n-\t\t\t\t\tif (--len1 == 0)\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n+\t\t{\n+    for (;;)\r\n+\t\t\t{\n+    if (cmp.compare(src[off1], src[off2]) <= 0)\r\n+\t\t\t\t{\n+    dest[destOff++] = src[off1++];\r\n+\t\t\t\t\tif (--len1 == 0)\n+    break;\n+    }\r\n \t\t\t\telse\r\n-\t\t\t\t{\r\n-\t\t\t\t\tdest[destOff++] = src[off2++];\r\n-\t\t\t\t\tif (--len2 == 0)\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tfor (; len1 > 0; --len1)\r\n-\t\t\tdest[destOff++] = src[off1++];\r\n-\t\tfor (; len2 > 0; --len2)\r\n-\t\t\tdest[destOff++] = src[off2++];\r\n-\t}\r\n-}\r\n+\t\t\t\t{\n+    dest[destOff++] = src[off2++];\r\n+\t\t\t\t\tif (--len2 == 0)\n+    break;\n+    }\n+    }\n+    }\r\n+\t\tfor (; len1 > 0;\n+--len1)dest[destOff++] = src[off1++];\n+\n+for (; len2 > 0;\n+--len2)dest[destOff++] = src[off2++];\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/178/MergeSort.java\nindex a9145370380..81c88827643 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/178/MergeSort.java\n@@ -18,68 +18,68 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10;\r\n-\r\n-import java.util.Comparator;\r\n-\r\n-public class MergeSort\r\n-{\r\n-\tprivate MergeSort()\r\n-\t{\r\n-\t}\r\n-\r\n-\tpublic static <T> void sort(final Comparator<T> cmp, final T[] src, final int off, final int len, final T[] temp, final int tempOff)\r\n-\t{\r\n-\t\tif (len <= 1)\r\n-\t\t{\r\n-\t\t\treturn;\r\n-\t\t}\r\n-\t\tint halfLen = len / 2;\r\n-\t\tsortCopy(cmp, src, off, halfLen, temp, tempOff);\r\n-\t\tsortCopy(cmp, src, off + halfLen, len - halfLen, temp, tempOff + halfLen);\r\n-\t\tmerge(cmp, temp, tempOff, halfLen, len - halfLen, src, off);\r\n-\t}\r\n-\r\n-\tprivate static <T> void sortCopy(final Comparator<T> cmp, final T[] src, final int off, final int len, final T[] dest, final int destOff)\r\n-\t{\r\n-\t\tif (len <= 1)\r\n-\t\t{\r\n-\t\t\tif (len != 0)\r\n-\t\t\t{\r\n-\t\t\t\tdest[destOff] = src[off];\r\n-\t\t\t}\r\n-\t\t\treturn;\r\n-\t\t}\r\n-\t\tint halfLen = len / 2;\r\n-\t\tsort(cmp, src, off, halfLen, dest, destOff);\r\n-\t\tsort(cmp, src, off + halfLen, len - halfLen, dest, destOff + halfLen);\r\n-\t\tmerge(cmp, src, off, halfLen, len - halfLen, dest, destOff);\r\n-\t}\r\n-\r\n-\tprivate static <T> void merge(Comparator<T> cmp, T[] src, int off1, int len1, int len2, T[] dest, int destOff)\r\n-\t{\r\n-\t\tint off2 = off1 + len1;\r\n-\t\tif (len1 != 0 && len2 != 0)\r\n-\t\t{\r\n-\t\t\tfor (;;)\r\n-\t\t\t{\r\n-\t\t\t\tif (cmp.compare(src[off1], src[off2]) <= 0)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tdest[destOff++] = src[off1++];\r\n-\t\t\t\t\tif (--len1 == 0)\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\telse\r\n-\t\t\t\t{\r\n-\t\t\t\t\tdest[destOff++] = src[off2++];\r\n-\t\t\t\t\tif (--len2 == 0)\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tfor (; len1 > 0; --len1)\r\n-\t\t\tdest[destOff++] = src[off1++];\r\n-\t\tfor (; len2 > 0; --len2)\r\n-\t\t\tdest[destOff++] = src[off2++];\r\n-\t}\r\n-}\r\n+package org.genxdm.processor.xpath.v10;\n+\n+import java.util.Comparator;\n+\n+public class MergeSort\n+{\n+    private MergeSort()\n+    {\n+    }\n+\n+    public static <T> void sort(final Comparator<T> cmp, final T[] src, final int off, final int len, final T[] temp, final int tempOff)\n+    {\n+        if (len <= 1)\n+        {\n+            return;\n+        }\n+        int halfLen = len / 2;\n+        sortCopy(cmp, src, off, halfLen, temp, tempOff);\n+        sortCopy(cmp, src, off + halfLen, len - halfLen, temp, tempOff + halfLen);\n+        merge(cmp, temp, tempOff, halfLen, len - halfLen, src, off);\n+    }\n+\n+    private static <T> void sortCopy(final Comparator<T> cmp, final T[] src, final int off, final int len, final T[] dest, final int destOff)\n+    {\n+        if (len <= 1)\n+        {\n+            if (len != 0)\n+            {\n+                dest[destOff] = src[off];\n+            }\n+            return;\n+        }\n+        int halfLen = len / 2;\n+        sort(cmp, src, off, halfLen, dest, destOff);\n+        sort(cmp, src, off + halfLen, len - halfLen, dest, destOff + halfLen);\n+        merge(cmp, src, off, halfLen, len - halfLen, dest, destOff);\n+    }\n+\n+    private static <T> void merge(Comparator<T> cmp, T[] src, int off1, int len1, int len2, T[] dest, int destOff)\n+    {\n+        int off2 = off1 + len1;\n+        if (len1 != 0 && len2 != 0)\n+        {\n+            for (;;)\n+            {\n+                if (cmp.compare(src[off1], src[off2]) <= 0)\n+                {\n+                    dest[destOff++] = src[off1++];\n+                    if (--len1 == 0)\n+                    break;\n+                }\n+                else\n+                {\n+                    dest[destOff++] = src[off2++];\n+                    if (--len2 == 0)\n+                    break;\n+                }\n+            }\n+        }\n+        for (; len1 > 0; --len1)\n+        dest[destOff++] = src[off1++];\n+        for (; len2 > 0; --len2)\n+        dest[destOff++] = src[off2++];\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/178/MergeSort.java\nindex a9145370380..f51e8e11fd8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/178/MergeSort.java\n@@ -24,7 +24,7 @@ import java.util.Comparator;\n \r\n public class MergeSort\r\n {\r\n-\tprivate MergeSort()\r\n+private MergeSort()\r\n \t{\r\n \t}\r\n \r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/178/MergeSort.java\nindex a9145370380..ebb68b271d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/178/MergeSort.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/178/MergeSort.java\n@@ -24,7 +24,7 @@ import java.util.Comparator;\n \r\n public class MergeSort\r\n {\r\n-\tprivate MergeSort()\r\n+    private MergeSort()\r\n \t{\r\n \t}\r\n \r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}