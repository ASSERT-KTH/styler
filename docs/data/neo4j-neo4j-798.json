{
    "project_name": "neo4j-neo4j",
    "error_id": "798",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "111",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/798/SchemaAndIndexingFileIndexListing.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/798/SchemaAndIndexingFileIndexListing.java\nindex b9c76bc9cd6..05ae231d265 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/798/SchemaAndIndexingFileIndexListing.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/798/SchemaAndIndexingFileIndexListing.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import org.eclipse.collections.api.set.primitive.LongSet;\n@@ -35,14 +36,14 @@ import org.neo4j.storageengine.api.StoreFileMetadata;\n \n public class SchemaAndIndexingFileIndexListing\n {\n-    private static final Function<Path,StoreFileMetadata> toStoreFileMetadata = path -> new StoreFileMetadata( path, 1 );\n+    private static final Function<Path, StoreFileMetadata> toStoreFileMetadata = path -> new StoreFileMetadata(path, 1);\n \n     private final LabelScanStore labelScanStore;\n     private final RelationshipTypeScanStore relationshipTypeScanStore;\n     private final IndexingService indexingService;\n \n-    SchemaAndIndexingFileIndexListing( LabelScanStore labelScanStore, RelationshipTypeScanStore relationshipTypeScanStore,\n-            IndexingService indexingService )\n+    SchemaAndIndexingFileIndexListing(LabelScanStore labelScanStore, RelationshipTypeScanStore relationshipTypeScanStore,\n+                                      IndexingService indexingService)\n     {\n         this.labelScanStore = labelScanStore;\n         this.relationshipTypeScanStore = relationshipTypeScanStore;\n@@ -54,35 +55,35 @@ public class SchemaAndIndexingFileIndexListing\n         return indexingService.getIndexIds();\n     }\n \n-    Resource gatherSchemaIndexFiles( Collection<StoreFileMetadata> targetFiles ) throws IOException\n+    Resource gatherSchemaIndexFiles(Collection<StoreFileMetadata> targetFiles) throws IOException\n     {\n         ResourceIterator<Path> snapshot = indexingService.snapshotIndexFiles();\n-        getSnapshotFilesMetadata( snapshot, targetFiles );\n+        getSnapshotFilesMetadata(snapshot, targetFiles);\n         // Intentionally don't close the snapshot here, return it for closing by the consumer of\n         // the targetFiles list.\n         return snapshot;\n     }\n \n-    Resource gatherLabelScanStoreFiles( Collection<StoreFileMetadata> targetFiles )\n+    Resource gatherLabelScanStoreFiles(Collection<StoreFileMetadata> targetFiles)\n     {\n         ResourceIterator<Path> snapshot = labelScanStore.snapshotStoreFiles();\n-        getSnapshotFilesMetadata( snapshot, targetFiles );\n+        getSnapshotFilesMetadata(snapshot, targetFiles);\n         // Intentionally don't close the snapshot here, return it for closing by the consumer of\n         // the targetFiles list.\n         return snapshot;\n     }\n \n-    Resource gatherRelationshipTypeScanStoreFiles( Collection<StoreFileMetadata> targetFiles )\n+    Resource gatherRelationshipTypeScanStoreFiles(Collection<StoreFileMetadata> targetFiles)\n     {\n         ResourceIterator<Path> snapshot = relationshipTypeScanStore.snapshotStoreFiles();\n-        getSnapshotFilesMetadata( snapshot, targetFiles );\n+        getSnapshotFilesMetadata(snapshot, targetFiles);\n         // Intentionally don't close the snapshot here, return it for closing by the consumer of\n         // the targetFiles list.\n         return snapshot;\n     }\n \n-    private void getSnapshotFilesMetadata( ResourceIterator<Path> snapshot, Collection<StoreFileMetadata> targetFiles )\n+    private void getSnapshotFilesMetadata(ResourceIterator<Path> snapshot, Collection<StoreFileMetadata> targetFiles)\n     {\n-        snapshot.stream().map( toStoreFileMetadata ).forEach( targetFiles::add );\n+        snapshot.stream().map(toStoreFileMetadata).forEach(targetFiles::add);\n     }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}