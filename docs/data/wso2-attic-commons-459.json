{
    "project_name": "wso2-attic-commons",
    "error_id": "459",
    "information": {
        "errors": [
            {
                "line": "97",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                .append(\"@\").append(CARBON_CLIENT_ID)\n                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                .toString();\n    }\n ",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/459/QueueSenderMessage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/459/QueueSenderMessage.java\nindex 0c7f70667c8..72532a9cd07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/459/QueueSenderMessage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/459/QueueSenderMessage.java\n@@ -1,20 +1,20 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n \n \n import javax.jms.JMSException;\n@@ -29,75 +29,77 @@ import javax.naming.NamingException;\n import java.util.Properties;\n \n public class QueueSenderMessage {\n-    public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n-    private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n-    private static final String QUEUE_NAME_PREFIX = \"queue.\";\n-    private static final String CF_NAME = \"qpidConnectionfactory\";\n-    String userName = \"admin\";\n-    String password = \"admin\";\n-    private static String CARBON_CLIENT_ID = \"carbon\";\n-    private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n-    private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";//localhost\n-    private static String CARBON_DEFAULT_PORT = \"5672\";\n-    String queueName = \"lanka\";\n- \n-    public static void main(String[] args) throws NamingException, JMSException {\n-        QueueSenderMessage queueSender = new QueueSenderMessage();\n-        queueSender.sendMessages();\n-    }\n-    public void sendMessages() throws NamingException, JMSException {\n+  public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n+  private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n+  private static final String QUEUE_NAME_PREFIX = \"queue.\";\n+  private static final String CF_NAME = \"qpidConnectionfactory\";\n+  String userName = \"admin\";\n+  String password = \"admin\";\n+  private static String CARBON_CLIENT_ID = \"carbon\";\n+  private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n+  private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";//localhost\n+  private static String CARBON_DEFAULT_PORT = \"5672\";\n+  String queueName = \"lanka\";\n \n-        Properties properties = new Properties();\n-        properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n-        properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n-        properties.put(QUEUE_NAME_PREFIX + queueName, queueName);\n+  public static void main(String[] args) throws NamingException, JMSException {\n+    QueueSenderMessage queueSender = new QueueSenderMessage();\n+    queueSender.sendMessages();\n+  }\n \n-        System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n+  public void sendMessages() throws NamingException, JMSException {\n \n-        InitialContext ctx = new InitialContext(properties);\n+    Properties properties = new Properties();\n+    properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n+    properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n+    properties.put(QUEUE_NAME_PREFIX + queueName, queueName);\n \n-        // Lookup connection factory\n-        QueueConnectionFactory connFactory = (QueueConnectionFactory) ctx.lookup(CF_NAME);\n-        QueueConnection queueConnection = connFactory.createQueueConnection();\n-        queueConnection.start();\n+    System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n \n-        QueueSession queueSession =\n-                queueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n+    InitialContext ctx = new InitialContext(properties);\n \n-        // Send message\n-        Queue queue = (Queue)ctx.lookup(queueName);\n-        // create the message to send\n+    // Lookup connection factory\n+    QueueConnectionFactory connFactory = (QueueConnectionFactory) ctx.lookup(CF_NAME);\n+    QueueConnection queueConnection = connFactory.createQueueConnection();\n+    queueConnection.start();\n \n-\tjavax.jms.QueueSender queueSender = queueSession.createSender(queue);\n+    QueueSession queueSession =\n+      queueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n \n-\tfor(int i=1;i<=100;i=i+1){\n-       \n-\t\t\t\n-\t\tjavax.jms.Message message=queueSession.createMessage();\n-\t\t\n-\t\t\n-\t\tmessage.setJMSType(\"asanka\");\n-\t\n-                queueSender.send(message);\n+    // Send message\n+    Queue queue = (Queue) ctx.lookup(queueName);\n+    // create the message to send\n \n-\t}\n+    javax.jms.QueueSender queueSender = queueSession.createSender(queue);\n \n-        queueSender.close();\n-        queueSession.close();\n-        queueConnection.close();\n+    for (int i = 1; i <= 100; i = i + 1) {\n \n \n+      javax.jms.Message message = queueSession.createMessage();\n+\n+\n+      message.setJMSType(\"asanka\");\n+\n+      queueSender.send(message);\n+\n     }\n-    public String getTCPConnectionURL(String username, String password) {\n-        // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'\n-        return new StringBuffer()\n-                .append(\"amqp://\").append(username).append(\":\").append(password)\n-                .append(\"@\").append(CARBON_CLIENT_ID)\n-                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n-                .toString();\n-    }\n- \n+\n+    queueSender.close();\n+    queueSession.close();\n+    queueConnection.close();\n+\n+\n+  }\n+\n+  public String getTCPConnectionURL(String username, String password) {\n+    // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'\n+    return new StringBuffer()\n+      .append(\"amqp://\").append(username).append(\":\").append(password)\n+      .append(\"@\").append(CARBON_CLIENT_ID)\n+      .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n+      .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+      .toString();\n+  }\n+\n }\n \n \n",
            "diff_size": 92
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}