{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3445",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "145",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "253",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "413",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "422",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "447",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3445/ByteCodeVerifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3445/ByteCodeVerifier.java\nindex a23777f1289..2892e15c4d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3445/ByteCodeVerifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3445/ByteCodeVerifier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen.bytecode;\n \n import org.objectweb.asm.ClassReader;\n@@ -53,420 +54,406 @@ import org.neo4j.codegen.CompilationFailureException;\n \n import static org.objectweb.asm.ClassReader.SKIP_DEBUG;\n \n-@SuppressWarnings( \"unused\"/*used through reflection, since it depends on optional code*/ )\n+@SuppressWarnings(\"unused\"/*used through reflection, since it depends on optional code*/)\n class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n {\n-    /**\n-     * Invoked by {@link ByteCode#load(String)} to load this class.\n-     *\n-     * @return an instance of this class, if all dependencies are available.\n-     */\n-    static CodeGeneratorOption loadVerifier()\n+  /**\n+   * Invoked by {@link ByteCode#load(String)} to load this class.\n+   *\n+   * @return an instance of this class, if all dependencies are available.\n+   */\n+  static CodeGeneratorOption loadVerifier()\n+  {\n+    if (Analyzer.class.getName().isEmpty() || CheckClassAdapter.class.getName().isEmpty())\n     {\n-        if ( Analyzer.class.getName().isEmpty() || CheckClassAdapter.class.getName().isEmpty() )\n-        {\n-            throw new AssertionError( \"This code is here to ensure the optional ASM classes are on the classpath\" );\n-        }\n-        return new ByteCodeVerifier();\n+      throw new AssertionError(\"This code is here to ensure the optional ASM classes are on the classpath\");\n+    }\n+    return new ByteCodeVerifier();\n+  }\n+\n+  /**\n+   * Add this verification step to the configuration, if applicable.\n+   *\n+   * @param target the configuration to add this verification step to.\n+   */\n+  @Override\n+  public void applyTo(Object target)\n+  {\n+    if (target instanceof Configuration)\n+    {\n+      ((Configuration) target).withBytecodeChecker(this);\n+    }\n+  }\n+\n+  /**\n+   * Check the bytecode from one round of bytecode generation.\n+   *\n+   * @param classpathLoader the ClassLoader to use for loading classes from the classpath.\n+   * @param byteCodes       the bytecodes generated in this round.\n+   * @throws CompilationFailureException if any issue is discovered in the verification.\n+   */\n+  @Override\n+  public void check(ClassLoader classpathLoader, Collection<ByteCodes> byteCodes) throws CompilationFailureException\n+  {\n+    List<ClassNode> classes = new ArrayList<>(byteCodes.size());\n+    List<Failure> failures = new ArrayList<>();\n+    // load (and verify) the structure of the generated classes\n+    for (ByteCodes byteCode : byteCodes)\n+    {\n+      try\n+      {\n+        classes.add(classNode(byteCode.bytes()));\n+      } catch (Exception e)\n+      {\n+        failures.add(new Failure(e, e.toString()));\n+      }\n+    }\n+    // if there are problems with the structure of the generated classes,\n+    // we are not going to be able to verify their methods\n+    if (!failures.isEmpty())\n+    {\n+      throw compilationFailure(failures);\n+    }\n+    // continue with verifying the methods of the classes\n+    AssignmentChecker check = new AssignmentChecker(classpathLoader, classes);\n+    for (ClassNode clazz : classes)\n+    {\n+      verify(check, clazz, failures);\n     }\n+    if (!failures.isEmpty())\n+    {\n+      throw compilationFailure(failures);\n+    }\n+  }\n+\n+  /**\n+   * Verify the methods of a single class.\n+   *\n+   * @param check    a helper for verifying assignments.\n+   * @param clazz    the class to check the methods of.\n+   * @param failures where any detected errors are added.\n+   */\n+  private static void verify(AssignmentChecker check, ClassNode clazz, List<Failure> failures)\n+  {\n+    Verifier verifier = new Verifier(clazz, check);\n+    for (MethodNode method : clazz.methods)\n+    {\n+      Analyzer<?> analyzer = new Analyzer<>(verifier);\n+      try\n+      {\n+        analyzer.analyze(clazz.name, method);\n+      } catch (Exception cause)\n+      {\n+        failures.add(new Failure(cause, detailedMessage(\n+            cause.getMessage(),\n+            method,\n+            analyzer.getFrames(),\n+            cause instanceof AnalyzerException ? ((AnalyzerException) cause).node : null)));\n+      }\n+    }\n+  }\n \n-    /**\n-     * Add this verification step to the configuration, if applicable.\n-     *\n-     * @param target\n-     *         the configuration to add this verification step to.\n-     */\n-    @Override\n-    public void applyTo( Object target )\n+  private static ClassNode classNode(ByteBuffer bytecode)\n+  {\n+    byte[] bytes;\n+    if (bytecode.hasArray())\n     {\n-        if ( target instanceof Configuration )\n-        {\n-            ((Configuration) target).withBytecodeChecker( this );\n-        }\n+      bytes = bytecode.array();\n+    } else\n+    {\n+      bytes = new byte[bytecode.limit()];\n+      bytecode.get(bytes);\n+    }\n+    ClassNode classNode = new ClassNode();\n+    new ClassReader(bytes).accept(new CheckClassAdapter(classNode, false), SKIP_DEBUG);\n+    return classNode;\n+  }\n+\n+  private static CompilationFailureException compilationFailure(List<Failure> failures)\n+  {\n+    List<Diagnostic<?>> diagnostics = new ArrayList<>(failures.size());\n+    for (Failure failure : failures)\n+    {\n+      diagnostics.add(new BytecodeDiagnostic(failure.message));\n+    }\n+    CompilationFailureException exception = new CompilationFailureException(diagnostics);\n+    for (Failure failure : failures)\n+    {\n+      exception.addSuppressed(failure.cause);\n     }\n+    return exception;\n+  }\n \n-    /**\n-     * Check the bytecode from one round of bytecode generation.\n-     *\n-     * @param classpathLoader\n-     *         the ClassLoader to use for loading classes from the classpath.\n-     * @param byteCodes\n-     *         the bytecodes generated in this round.\n-     * @throws CompilationFailureException\n-     *         if any issue is discovered in the verification.\n-     */\n-    @Override\n-    public void check( ClassLoader classpathLoader, Collection<ByteCodes> byteCodes ) throws CompilationFailureException\n+  private static class Failure\n+  {\n+    final Throwable cause;\n+    final String message;\n+\n+    Failure(Throwable cause, String message)\n     {\n-        List<ClassNode> classes = new ArrayList<>( byteCodes.size() );\n-        List<Failure> failures = new ArrayList<>();\n-        // load (and verify) the structure of the generated classes\n-        for ( ByteCodes byteCode : byteCodes )\n-        {\n-            try\n-            {\n-                classes.add( classNode( byteCode.bytes() ) );\n-            }\n-            catch ( Exception e )\n-            {\n-                failures.add( new Failure( e, e.toString() ) );\n-            }\n-        }\n-        // if there are problems with the structure of the generated classes,\n-        // we are not going to be able to verify their methods\n-        if ( !failures.isEmpty() )\n+      this.cause = cause;\n+      this.message = message;\n+    }\n+  }\n+\n+  private static String detailedMessage(\n+      String errorMessage,\n+      MethodNode method,\n+      Frame[] frames,\n+      AbstractInsnNode errorLocation)\n+  {\n+    StringWriter message = new StringWriter();\n+    try (PrintWriter out = new PrintWriter(message))\n+    {\n+      List<Integer> localLengths = new ArrayList<>();\n+      List<Integer> stackLengths = new ArrayList<>();\n+      for (Frame frame : frames)\n+      {\n+        if (frame != null)\n         {\n-            throw compilationFailure( failures );\n+          for (int i = 0; i < frame.getLocals(); i++)\n+          {\n+            insert(i, frame.getLocal(i), localLengths);\n+          }\n+          for (int i = 0; i < frame.getStackSize(); i++)\n+          {\n+            insert(i, frame.getStack(i), stackLengths);\n+          }\n         }\n-        // continue with verifying the methods of the classes\n-        AssignmentChecker check = new AssignmentChecker( classpathLoader, classes );\n-        for ( ClassNode clazz : classes )\n+      }\n+      Textifier formatted = new Textifier();\n+      TraceMethodVisitor mv = new TraceMethodVisitor(formatted);\n+\n+      out.println(errorMessage);\n+      out.append(\"\\t\\tin \").append(method.name).append(method.desc).println();\n+      for (int i = 0; i < method.instructions.size(); i++)\n+      {\n+        AbstractInsnNode insn = method.instructions.get(i);\n+        insn.accept(mv);\n+        Frame frame = frames[i];\n+        out.append(\"\\t\\t\");\n+        out.append(insn == errorLocation ? \">>> \" : \"    \");\n+        out.format(\"%05d [\", i);\n+        if (frame == null)\n         {\n-            verify( check, clazz, failures );\n-        }\n-        if ( !failures.isEmpty() )\n+          padding(out, localLengths.listIterator(), '?');\n+          out.append(\" : \");\n+          padding(out, stackLengths.listIterator(), '?');\n+        } else\n         {\n-            throw compilationFailure( failures );\n+          emit(out, localLengths, frame::getLocal, frame.getLocals());\n+          padding(out, localLengths.listIterator(frame.getLocals()), '-');\n+          out.append(\" : \");\n+          emit(out, stackLengths, frame::getStack, frame.getStackSize());\n+          padding(out, stackLengths.listIterator(frame.getStackSize()), ' ');\n         }\n+        out.print(\"] : \");\n+        out.print(formatted.text.get(formatted.text.size() - 1));\n+      }\n+      for (int j = 0; j < method.tryCatchBlocks.size(); j++)\n+      {\n+        method.tryCatchBlocks.get(j).accept(mv);\n+        out.print(\" \" + formatted.text.get(formatted.text.size() - 1));\n+      }\n     }\n+    return message.toString();\n+  }\n \n-    /**\n-     * Verify the methods of a single class.\n-     *\n-     * @param check\n-     *         a helper for verifying assignments.\n-     * @param clazz\n-     *         the class to check the methods of.\n-     * @param failures\n-     *         where any detected errors are added.\n-     */\n-    private static void verify( AssignmentChecker check, ClassNode clazz, List<Failure> failures )\n+  private static void emit(PrintWriter out, List<Integer> lengths, IntFunction<Value> valueLookup, int values)\n+  {\n+    for (int i = 0; i < values; i++)\n     {\n-        Verifier verifier = new Verifier( clazz, check );\n-        for ( MethodNode method : clazz.methods )\n-        {\n-            Analyzer<?> analyzer = new Analyzer<>( verifier );\n-            try\n-            {\n-                analyzer.analyze( clazz.name, method );\n-            }\n-            catch ( Exception cause )\n-            {\n-                failures.add( new Failure( cause, detailedMessage(\n-                        cause.getMessage(),\n-                        method,\n-                        analyzer.getFrames(),\n-                        cause instanceof AnalyzerException ? ((AnalyzerException) cause).node : null ) ) );\n-            }\n-        }\n+      if (i > 0)\n+      {\n+        out.append(' ');\n+      }\n+      String name = shortName(valueLookup.apply(i).toString());\n+      for (int pad = lengths.get(i) - name.length(); pad-- > 0; )\n+      {\n+        out.append(' ');\n+      }\n+      out.append(name);\n     }\n+  }\n \n-    private static ClassNode classNode( ByteBuffer bytecode )\n+  private static void padding(PrintWriter out, ListIterator<Integer> lengths, char var)\n+  {\n+    while (lengths.hasNext())\n     {\n-        byte[] bytes;\n-        if ( bytecode.hasArray() )\n-        {\n-            bytes = bytecode.array();\n-        }\n-        else\n-        {\n-            bytes = new byte[bytecode.limit()];\n-            bytecode.get( bytes );\n-        }\n-        ClassNode classNode = new ClassNode();\n-        new ClassReader( bytes ).accept( new CheckClassAdapter( classNode, false ), SKIP_DEBUG );\n-        return classNode;\n+      if (lengths.nextIndex() > 0)\n+      {\n+        out.append(' ');\n+      }\n+      for (int length = lengths.next(); length-- > 1; )\n+      {\n+        out.append(' ');\n+      }\n+      out.append(var);\n     }\n+  }\n \n-    private static CompilationFailureException compilationFailure( List<Failure> failures )\n+  private static void insert(int i, Value value, List<Integer> values)\n+  {\n+    int length = shortName(value.toString()).length();\n+    while (i >= values.size())\n     {\n-        List<Diagnostic<?>> diagnostics = new ArrayList<>( failures.size() );\n-        for ( Failure failure : failures )\n-        {\n-            diagnostics.add( new BytecodeDiagnostic( failure.message ) );\n-        }\n-        CompilationFailureException exception = new CompilationFailureException( diagnostics );\n-        for ( Failure failure : failures )\n-        {\n-            exception.addSuppressed( failure.cause );\n-        }\n-        return exception;\n+      values.add(1);\n     }\n-\n-    private static class Failure\n+    if (length > values.get(i))\n     {\n-        final Throwable cause;\n-        final String message;\n-\n-        Failure( Throwable cause, String message )\n-        {\n-            this.cause = cause;\n-            this.message = message;\n-        }\n+      values.set(i, length);\n     }\n+  }\n \n-    private static String detailedMessage(\n-            String errorMessage,\n-            MethodNode method,\n-            Frame[] frames,\n-            AbstractInsnNode errorLocation )\n+  private static String shortName(String name)\n+  {\n+    int start = name.lastIndexOf('/');\n+    int end = name.length();\n+    if (name.charAt(end - 1) == ';')\n     {\n-        StringWriter message = new StringWriter();\n-        try ( PrintWriter out = new PrintWriter( message ) )\n-        {\n-            List<Integer> localLengths = new ArrayList<>();\n-            List<Integer> stackLengths = new ArrayList<>();\n-            for ( Frame frame : frames )\n-            {\n-                if ( frame != null )\n-                {\n-                    for ( int i = 0; i < frame.getLocals(); i++ )\n-                    {\n-                        insert( i, frame.getLocal( i ), localLengths );\n-                    }\n-                    for ( int i = 0; i < frame.getStackSize(); i++ )\n-                    {\n-                        insert( i, frame.getStack( i ), stackLengths );\n-                    }\n-                }\n-            }\n-            Textifier formatted = new Textifier();\n-            TraceMethodVisitor mv = new TraceMethodVisitor( formatted );\n-\n-            out.println( errorMessage );\n-            out.append( \"\\t\\tin \" ).append( method.name ).append( method.desc ).println();\n-            for ( int i = 0; i < method.instructions.size(); i++ )\n-            {\n-                AbstractInsnNode insn = method.instructions.get( i );\n-                insn.accept( mv );\n-                Frame frame = frames[i];\n-                out.append( \"\\t\\t\" );\n-                out.append( insn == errorLocation ? \">>> \" : \"    \" );\n-                out.format( \"%05d [\", i );\n-                if ( frame == null )\n-                {\n-                    padding( out, localLengths.listIterator(), '?' );\n-                    out.append( \" : \" );\n-                    padding( out, stackLengths.listIterator(), '?' );\n-                }\n-                else\n-                {\n-                    emit( out, localLengths, frame::getLocal, frame.getLocals() );\n-                    padding( out, localLengths.listIterator( frame.getLocals() ), '-' );\n-                    out.append( \" : \" );\n-                    emit( out, stackLengths, frame::getStack, frame.getStackSize() );\n-                    padding( out, stackLengths.listIterator( frame.getStackSize() ), ' ' );\n-                }\n-                out.print( \"] : \" );\n-                out.print( formatted.text.get( formatted.text.size() - 1 ) );\n-            }\n-            for ( int j = 0; j < method.tryCatchBlocks.size(); j++ )\n-            {\n-                method.tryCatchBlocks.get( j ).accept( mv );\n-                out.print( \" \" + formatted.text.get( formatted.text.size() - 1 ) );\n-            }\n-        }\n-        return message.toString();\n+      end--;\n     }\n+    return start == -1 ? name : name.substring(start + 1, end);\n+  }\n+\n+  // This class might look failed in the IDE, but javac will accept it\n+  // The reason is because the base class has been re-written to work on old JVMs - generics have been dropped.\n+  private static class Verifier extends SimpleVerifier\n+  {\n+    private final AssignmentChecker check;\n \n-    private static void emit( PrintWriter out, List<Integer> lengths, IntFunction<Value> valueLookup, int values )\n+    Verifier(ClassNode clazz, AssignmentChecker check)\n     {\n-        for ( int i = 0; i < values; i++ )\n-        {\n-            if ( i > 0 )\n-            {\n-                out.append( ' ' );\n-            }\n-            String name = shortName( valueLookup.apply( i ).toString() );\n-            for ( int pad = lengths.get( i ) - name.length(); pad-- > 0; )\n-            {\n-                out.append( ' ' );\n-            }\n-            out.append( name );\n-        }\n+      super(Opcodes.ASM6, Type.getObjectType(clazz.name), superClass(clazz), interfaces(clazz),\n+          isInterfaceNode(clazz));\n+      this.check = check;\n     }\n \n-    private static void padding( PrintWriter out, ListIterator<Integer> lengths, char var )\n+    @Override\n+    protected boolean isAssignableFrom(Type target, Type value)\n     {\n-        while ( lengths.hasNext() )\n-        {\n-            if ( lengths.nextIndex() > 0 )\n-            {\n-                out.append( ' ' );\n-            }\n-            for ( int length = lengths.next(); length-- > 1; )\n-            {\n-                out.append( ' ' );\n-            }\n-            out.append( var );\n-        }\n+      return check.isAssignableFrom(target, value);\n     }\n \n-    private static void insert( int i, Value value, List<Integer> values )\n+    @Override\n+    protected boolean isSubTypeOf(BasicValue value, BasicValue expected)\n     {\n-        int length = shortName( value.toString() ).length();\n-        while ( i >= values.size() )\n-        {\n-            values.add( 1 );\n-        }\n-        if ( length > values.get( i ) )\n-        {\n-            values.set( i, length );\n-        }\n+      return super.isSubTypeOf(value, expected) || check\n+          .invokableInterface(expected.getType(), value.getType());\n     }\n \n-    private static String shortName( String name )\n+    private static Type superClass(ClassNode clazz)\n     {\n-        int start = name.lastIndexOf( '/' );\n-        int end = name.length();\n-        if ( name.charAt( end - 1 ) == ';' )\n-        {\n-            end--;\n-        }\n-        return start == -1 ? name : name.substring( start + 1, end );\n+      return clazz.superName == null ? null : Type.getObjectType(clazz.superName);\n     }\n \n-    // This class might look failed in the IDE, but javac will accept it\n-    // The reason is because the base class has been re-written to work on old JVMs - generics have been dropped.\n-    private static class Verifier extends SimpleVerifier\n+    @SuppressWarnings(\"unchecked\")\n+    private static List<Type> interfaces(ClassNode clazz)\n     {\n-        private final AssignmentChecker check;\n-\n-        Verifier( ClassNode clazz, AssignmentChecker check )\n-        {\n-            super( Opcodes.ASM6, Type.getObjectType( clazz.name ), superClass( clazz ), interfaces( clazz ),\n-                    isInterfaceNode( clazz ) );\n-            this.check = check;\n-        }\n-\n-        @Override\n-        protected boolean isAssignableFrom( Type target, Type value )\n-        {\n-            return check.isAssignableFrom( target, value );\n-        }\n-\n-        @Override\n-        protected boolean isSubTypeOf( BasicValue value, BasicValue expected )\n-        {\n-            return super.isSubTypeOf( value, expected ) || check\n-                    .invokableInterface( expected.getType(), value.getType() );\n-        }\n+      List<Type> interfaces = new ArrayList<>(clazz.interfaces.size());\n+      for (String iFace : clazz.interfaces)\n+      {\n+        interfaces.add(Type.getObjectType(iFace));\n+      }\n+      return interfaces;\n+    }\n+  }\n \n-        private static Type superClass( ClassNode clazz )\n-        {\n-            return clazz.superName == null ? null : Type.getObjectType( clazz.superName );\n-        }\n+  private static class AssignmentChecker\n+  {\n+    private final ClassLoader classpathLoader;\n+    private final Map<Type, ClassNode> classes = new HashMap<>();\n \n-        @SuppressWarnings( \"unchecked\" )\n-        private static List<Type> interfaces( ClassNode clazz )\n-        {\n-            List<Type> interfaces = new ArrayList<>( clazz.interfaces.size() );\n-            for ( String iFace : clazz.interfaces )\n-            {\n-                interfaces.add( Type.getObjectType( iFace ) );\n-            }\n-            return interfaces;\n-        }\n+    AssignmentChecker(ClassLoader classpathLoader, List<ClassNode> classes)\n+    {\n+      this.classpathLoader = classpathLoader;\n+      for (ClassNode node : classes)\n+      {\n+        this.classes.put(Type.getObjectType(node.name), node);\n+      }\n     }\n \n-    private static class AssignmentChecker\n+    boolean invokableInterface(Type target, Type value)\n     {\n-        private final ClassLoader classpathLoader;\n-        private final Map<Type,ClassNode> classes = new HashMap<>();\n-\n-        AssignmentChecker( ClassLoader classpathLoader, List<ClassNode> classes )\n-        {\n-            this.classpathLoader = classpathLoader;\n-            for ( ClassNode node : classes )\n-            {\n-                this.classes.put( Type.getObjectType( node.name ), node );\n-            }\n-        }\n-\n-        boolean invokableInterface( Type target, Type value )\n+      // this method allows a bit too much through,\n+      // it really ought to only be used for the target type of INVOKEINTERFACE,\n+      // since any object type is allowed as target for INVOKEINTERFACE,\n+      // this allows fewer CHECKCAST instructions when using generics.\n+      ClassNode targetNode = classes.get(target);\n+      if (targetNode != null)\n+      {\n+        if (isInterfaceNode(targetNode))\n         {\n-            // this method allows a bit too much through,\n-            // it really ought to only be used for the target type of INVOKEINTERFACE,\n-            // since any object type is allowed as target for INVOKEINTERFACE,\n-            // this allows fewer CHECKCAST instructions when using generics.\n-            ClassNode targetNode = classes.get( target );\n-            if ( targetNode != null )\n-            {\n-                if ( isInterfaceNode( targetNode ) )\n-                {\n-                    return value.getSort() == Type.OBJECT || value.getSort() == Type.ARRAY;\n-                }\n-                return false;\n-            }\n-            Class<?> targetClass = getClass( target );\n-            if ( targetClass.isInterface() )\n-            {\n-                return value.getSort() == Type.OBJECT || value.getSort() == Type.ARRAY;\n-            }\n-            return false;\n+          return value.getSort() == Type.OBJECT || value.getSort() == Type.ARRAY;\n         }\n+        return false;\n+      }\n+      Class<?> targetClass = getClass(target);\n+      if (targetClass.isInterface())\n+      {\n+        return value.getSort() == Type.OBJECT || value.getSort() == Type.ARRAY;\n+      }\n+      return false;\n+    }\n \n-        boolean isAssignableFrom( Type target, Type value )\n-        {\n-            if ( target.equals( value ) )\n-            {\n-                return true;\n-            }\n-            ClassNode targetNode = classes.get( target );\n-            ClassNode valueNode = classes.get( value );\n-            if ( targetNode != null && valueNode == null )\n-            {\n-                // if the target is among the types we have generated and the value isn't, then\n-                // the value type either doesn't exist, or it is defined in the class loader, and thus cannot\n-                // be a subtype of the target type\n-                return false;\n-            }\n-            else if ( valueNode != null )\n-            {\n-                return isAssignableFrom( target, valueNode );\n-            }\n-            else\n-            {\n-                return getClass( target ).isAssignableFrom( getClass( value ) );\n-            }\n-        }\n+    boolean isAssignableFrom(Type target, Type value)\n+    {\n+      if (target.equals(value))\n+      {\n+        return true;\n+      }\n+      ClassNode targetNode = classes.get(target);\n+      ClassNode valueNode = classes.get(value);\n+      if (targetNode != null && valueNode == null)\n+      {\n+        // if the target is among the types we have generated and the value isn't, then\n+        // the value type either doesn't exist, or it is defined in the class loader, and thus cannot\n+        // be a subtype of the target type\n+        return false;\n+      } else if (valueNode != null)\n+      {\n+        return isAssignableFrom(target, valueNode);\n+      } else\n+      {\n+        return getClass(target).isAssignableFrom(getClass(value));\n+      }\n+    }\n \n-        private boolean isAssignableFrom( Type target, ClassNode value )\n+    private boolean isAssignableFrom(Type target, ClassNode value)\n+    {\n+      if (value.superName != null && isAssignableFrom(target, Type.getObjectType(value.superName)))\n+      {\n+        return true;\n+      }\n+      for (String iFace : value.interfaces)\n+      {\n+        if (isAssignableFrom(target, Type.getObjectType(iFace)))\n         {\n-            if ( value.superName != null && isAssignableFrom( target, Type.getObjectType( value.superName ) ) )\n-            {\n-                return true;\n-            }\n-            for ( String iFace : value.interfaces )\n-            {\n-                if ( isAssignableFrom( target, Type.getObjectType( iFace ) ) )\n-                {\n-                    return true;\n-                }\n-            }\n-            return false;\n+          return true;\n         }\n+      }\n+      return false;\n+    }\n \n-        private Class<?> getClass( Type type )\n+    private Class<?> getClass(Type type)\n+    {\n+      try\n+      {\n+        if (type.getSort() == Type.ARRAY)\n         {\n-            try\n-            {\n-                if ( type.getSort() == Type.ARRAY )\n-                {\n-                    return Class.forName( type.getDescriptor().replace( '/', '.' ), false, classpathLoader );\n-                }\n-                return Class.forName( type.getClassName(), false, classpathLoader );\n-            }\n-            catch ( ClassNotFoundException e )\n-            {\n-                throw new RuntimeException( e.toString() );\n-            }\n+          return Class.forName(type.getDescriptor().replace('/', '.'), false, classpathLoader);\n         }\n+        return Class.forName(type.getClassName(), false, classpathLoader);\n+      } catch (ClassNotFoundException e)\n+      {\n+        throw new RuntimeException(e.toString());\n+      }\n     }\n+  }\n \n-    private static boolean isInterfaceNode( ClassNode clazz )\n-    {\n-        return (clazz.access & Opcodes.ACC_INTERFACE) != 0;\n-    }\n+  private static boolean isInterfaceNode(ClassNode clazz)\n+  {\n+    return (clazz.access & Opcodes.ACC_INTERFACE) != 0;\n+  }\n }\n \n",
            "diff_size": 543
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "313",
                    "column": "12",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3445/ByteCodeVerifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3445/ByteCodeVerifier.java\nindex a23777f1289..91e4c2ad6c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3445/ByteCodeVerifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3445/ByteCodeVerifier.java\n@@ -124,7 +124,8 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n         {\n             verify( check, clazz, failures );\n         }\n-        if ( !failures.isEmpty() )\n+\n+if ( !failures.isEmpty() )\n         {\n             throw compilationFailure( failures );\n         }\n@@ -152,12 +153,9 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n             }\n             catch ( Exception cause )\n             {\n-                failures.add( new Failure( cause, detailedMessage(\n-                        cause.getMessage(),\n-                        method,\n-                        analyzer.getFrames(),\n-                        cause instanceof AnalyzerException ? ((AnalyzerException) cause).node : null ) ) );\n-            }\n+                failures.add( new Failure( cause, detailedMessage( cause.getMessage(), method,\n+                        analyzer.getFrames(), cause instanceof AnalyzerException ? ((AnalyzerException) cause).node : null ) ) );\n+    }\n         }\n     }\n \n@@ -173,7 +171,8 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n             bytes = new byte[bytecode.limit()];\n             bytecode.get( bytes );\n         }\n-        ClassNode classNode = new ClassNode();\n+\n+ClassNode classNode = new ClassNode();\n         new ClassReader( bytes ).accept( new CheckClassAdapter( classNode, false ), SKIP_DEBUG );\n         return classNode;\n     }\n@@ -185,12 +184,14 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n         {\n             diagnostics.add( new BytecodeDiagnostic( failure.message ) );\n         }\n-        CompilationFailureException exception = new CompilationFailureException( diagnostics );\n+\n+CompilationFailureException exception = new CompilationFailureException( diagnostics );\n         for ( Failure failure : failures )\n         {\n             exception.addSuppressed( failure.cause );\n         }\n-        return exception;\n+\n+return exception;\n     }\n \n     private static class Failure\n@@ -205,8 +206,7 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n         }\n     }\n \n-    private static String detailedMessage(\n-            String errorMessage,\n+    private static String detailedMessage( String errorMessage,\n             MethodNode method,\n             Frame[] frames,\n             AbstractInsnNode errorLocation )\n@@ -232,8 +232,7 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n             }\n             Textifier formatted = new Textifier();\n             TraceMethodVisitor mv = new TraceMethodVisitor( formatted );\n-\n-            out.println( errorMessage );\n+out.println( errorMessage );\n             out.append( \"\\t\\tin \" ).append( method.name ).append( method.desc ).println();\n             for ( int i = 0; i < method.instructions.size(); i++ )\n             {\n@@ -277,7 +276,8 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n             {\n                 out.append( ' ' );\n             }\n-            String name = shortName( valueLookup.apply( i ).toString() );\n+\n+String name = shortName( valueLookup.apply( i ).toString() );\n             for ( int pad = lengths.get( i ) - name.length(); pad-- > 0; )\n             {\n                 out.append( ' ' );\n@@ -309,7 +309,8 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n         {\n             values.add( 1 );\n         }\n-        if ( length > values.get( i ) )\n+\n+if ( length> values.get( i ) )\n         {\n             values.set( i, length );\n         }\n@@ -323,7 +324,8 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n         {\n             end--;\n         }\n-        return start == -1 ? name : name.substring( start + 1, end );\n+\n+return start == -1 ? name : name.substring( start + 1, end );\n     }\n \n     // This class might look failed in the IDE, but javac will accept it\n@@ -334,9 +336,8 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n \n         Verifier( ClassNode clazz, AssignmentChecker check )\n         {\n-            super( Opcodes.ASM6, Type.getObjectType( clazz.name ), superClass( clazz ), interfaces( clazz ),\n-                    isInterfaceNode( clazz ) );\n-            this.check = check;\n+            super( Opcodes.ASM6, Type.getObjectType( clazz.name ), superClass( clazz ), interfaces( clazz ), isInterfaceNode( clazz ) );\n+this.check = check;\n         }\n \n         @Override\n@@ -348,8 +349,7 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n         @Override\n         protected boolean isSubTypeOf( BasicValue value, BasicValue expected )\n         {\n-            return super.isSubTypeOf( value, expected ) || check\n-                    .invokableInterface( expected.getType(), value.getType() );\n+            return super.isSubTypeOf( value, expected ) || check.invokableInterface( expected.getType(), value.getType() );\n         }\n \n         private static Type superClass( ClassNode clazz )\n@@ -365,7 +365,8 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n             {\n                 interfaces.add( Type.getObjectType( iFace ) );\n             }\n-            return interfaces;\n+\n+return interfaces;\n         }\n     }\n \n@@ -412,7 +413,8 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n             {\n                 return true;\n             }\n-            ClassNode targetNode = classes.get( target );\n+\n+ClassNode targetNode = classes.get( target );\n             ClassNode valueNode = classes.get( value );\n             if ( targetNode != null && valueNode == null )\n             {\n@@ -455,7 +457,8 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n                 {\n                     return Class.forName( type.getDescriptor().replace( '/', '.' ), false, classpathLoader );\n                 }\n-                return Class.forName( type.getClassName(), false, classpathLoader );\n+\n+return Class.forName( type.getClassName(), false, classpathLoader );\n             }\n             catch ( ClassNotFoundException e )\n             {\n@@ -468,5 +471,4 @@ class ByteCodeVerifier implements ByteCodeChecker, CodeGeneratorOption\n     {\n         return (clazz.access & Opcodes.ACC_INTERFACE) != 0;\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}