{
    "project_name": "vassalengine-vassal",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "1104",
                "column": "5",
                "severity": "error",
                "message": "'if' child has incorrect indentation level 4, expected level should be 6.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "    String s2 = s;\n    if (s2.isEmpty() || (QuickColors.getQuickColor(s) == -1)) { // Quick Colors \"opt in\" HTML\n    s2 = s2.replaceAll(\"<\", \"&lt;\")  // So < symbols in warning messages don't get misinterpreted as HTML //$NON-NLS\n           .replaceAll(\">\", \"&gt;\"); //$NON-NLS\n    }\n    if (chat == null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/2/GameModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler/2/GameModule.java\nindex 22f1fa0dfd5..fdb8358d621 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/2/GameModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler/2/GameModule.java\n@@ -1101,7 +1101,7 @@ public class GameModule extends AbstractConfigurable\n   public void warn(String s) {\n     String s2 = s;\n     if (s2.isEmpty() || (QuickColors.getQuickColor(s) == -1)) { // Quick Colors \"opt in\" HTML\n-    s2 = s2.replaceAll(\"<\", \"&lt;\")  // So < symbols in warning messages don't get misinterpreted as HTML //$NON-NLS\n+      s2 = s2.replaceAll(\"<\", \"&lt;\")  // So < symbols in warning messages don't get misinterpreted as HTML //$NON-NLS\n            .replaceAll(\">\", \"&gt;\"); //$NON-NLS\n     }\n     if (chat == null) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/2/GameModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/intellij/2/GameModule.java\nindex 22f1fa0dfd5..1ce18490950 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/2/GameModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/intellij/2/GameModule.java\n@@ -15,6 +15,7 @@\n  * License along with this library; if not, copies are available\n  * at http://www.opensource.org.\n  */\n+\n package VASSAL.build;\n \n import VASSAL.Info;\n@@ -152,7 +153,7 @@ import org.w3c.dom.Element;\n  * the root of the Editor's {@link ConfigureTree}. GameModule's implementation\n  * of {@link CommandEncoder} is slightly different, serving as a central dispatch\n  * point for all other CommandEncoders, which register themselves with GameModule.\n- *\n+ * <p>\n  * Components which are intended to be added directly to the GameModule are contained\n  * in the <code>VASSAL.build.module</code> package.\n  *\n@@ -178,11 +179,17 @@ public class GameModule extends AbstractConfigurable\n   public static final String BUILDFILE = \"buildFile.xml\";\n   public static final String BUILDFILE_OLD = \"buildFile\";\n \n-  /** The {@link Prefs} key for the user's real name */\n+  /**\n+   * The {@link Prefs} key for the user's real name\n+   */\n   public static final String REAL_NAME = \"RealName\"; //$NON-NLS-1$\n-  /** The {@link Prefs} key for the user's secret name */\n+  /**\n+   * The {@link Prefs} key for the user's secret name\n+   */\n   public static final String SECRET_NAME = \"SecretName\"; //$NON-NLS-1$\n-  /** The {@link Prefs} key for the user's personal info */\n+  /**\n+   * The {@link Prefs} key for the user's personal info\n+   */\n   public static final String PERSONAL_INFO = \"Profile\"; //$NON-NLS-1$\n \n   public static final String MODULE_NAME_PROPERTY = \"ModuleName\";\n@@ -234,7 +241,7 @@ public class GameModule extends AbstractConfigurable\n   private FileChooser fileChooser;\n   private FileDialog fileDialog;\n   private final MutablePropertiesContainer propsContainer = new Impl();\n-  private final PropertyChangeListener repaintOnPropertyChange = \n+  private final PropertyChangeListener repaintOnPropertyChange =\n     evt -> {\n       for (final Map map : Map.getMapList()) {\n         map.repaint();\n@@ -279,7 +286,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * The Chat Log Console\n    */\n-  private   Console console = new Console();\n+  private Console console = new Console();\n \n   /**\n    * Random number generator\n@@ -320,11 +327,11 @@ public class GameModule extends AbstractConfigurable\n   private final Object loggingLock = new Object();\n   private Command pausedCommands;\n \n-  private String gameFile     = \"\"; //NON-NLS\n+  private String gameFile = \"\"; //NON-NLS\n   private GameFileMode gameFileMode = GameFileMode.NEW_GAME;\n-  \n+\n   private boolean iFeelDirty = false; // Touched the module in ways not detectable by buildString compare\n-  \n+\n   /**\n    * Store the currently building GpId source. Only meaningful while\n    * the GameModule or an Extension is actually in the process of being built\n@@ -434,6 +441,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Constructor for a GameModule.\n+   *\n    * @param archive The .vmod (or .tmp) archive to associate\n    */\n   public GameModule(DataArchive archive) {\n@@ -460,7 +468,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Builds the module's component hierarchy from the XML buildFile, or if the module file does not\n    * yet exist, builds the default \"new module\" hierarchy.\n-   *\n+   * <p>\n    * Method is package-private for testing purposes.\n    *\n    * @throws IOException IOException\n@@ -472,8 +480,7 @@ public class GameModule extends AbstractConfigurable\n     if (!f.exists() || f.length() == 0) {\n       // new module, no buildFile\n       build(null);\n-    }\n-    else {\n+    } else {\n       final AbstractMetaData data = MetaDataFactory.buildMetaData(f);\n \n       if (!(data instanceof ModuleMetaData)) {\n@@ -482,20 +489,20 @@ public class GameModule extends AbstractConfigurable\n           null);\n       }\n \n-      final String properBuildFileName = (VersionUtils.compareVersions(VersionUtils.truncateToMinorVersion(data.getVassalVersion()), \"3.5\") < 0) ? BUILDFILE_OLD : BUILDFILE;\n+      final String properBuildFileName =\n+        (VersionUtils.compareVersions(VersionUtils.truncateToMinorVersion(data.getVassalVersion()), \"3.5\") < 0) ? BUILDFILE_OLD :\n+          BUILDFILE;\n \n       // existing module\n       try (InputStream inner = darch.getInputStream(properBuildFileName);\n            BufferedInputStream in = new BufferedInputStream(inner)) {\n         final Document doc = Builder.createDocument(in);\n         build(doc.getDocumentElement());\n-      }\n-      catch (FileNotFoundException e) {\n+      } catch (FileNotFoundException e) {\n         throw new IOException(\n           Resources.getString(\"BasicModule.no_buildfile\"), //$NON-NLS-1$\n           e);\n-      }\n-      catch (IOException e) {\n+      } catch (IOException e) {\n         throw new IOException(\n           Resources.getString(\"BasicModule.io_error_reading_archive\"), //$NON-NLS-1$\n           e);\n@@ -515,6 +522,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Builds the module's component hierarchy from a given XML element, or a null one is given initializes\n    * a brand new default \"new module\" hierarchy.\n+   *\n    * @param e XML element to build from, or null to build the default hierarchy\n    */\n   @Override\n@@ -548,8 +556,7 @@ public class GameModule extends AbstractConfigurable\n       ensureComponent(PrototypesContainer.class);\n       ensureComponent(Chatter.class);\n       ensureComponent(KeyNamer.class);\n-    }\n-    else {\n+    } else {\n       buildDefaultComponents();\n     }\n     initFrame();\n@@ -560,11 +567,16 @@ public class GameModule extends AbstractConfigurable\n    */\n   private void initIdentityPreferences() {\n     idChangeSupport = new PropertyChangeSupport(this);\n-    final StringConfigurer fullName = new StringConfigurer(GameModule.REAL_NAME, Resources.getString(\"Prefs.name_label\"), Resources.getString(\"Prefs.newbie\"));   //$NON-NLS-1$ //$NON-NLS-2$\n+    final StringConfigurer fullName = new StringConfigurer(GameModule.REAL_NAME, Resources.getString(\"Prefs.name_label\"),\n+      Resources.getString(\"Prefs.newbie\"));   //$NON-NLS-1$ //$NON-NLS-2$\n     fullName.addPropertyChangeListener(evt -> idChangeSupport.firePropertyChange(evt));\n-    final TextConfigurer profile = new TextConfigurer(GameModule.PERSONAL_INFO, Resources.getString(\"Prefs.personal_info\"), \"\");   //$NON-NLS-1$ //$NON-NLS-2$\n+    final TextConfigurer profile =\n+      new TextConfigurer(GameModule.PERSONAL_INFO, Resources.getString(\"Prefs.personal_info\"), \"\");   //$NON-NLS-1$ //$NON-NLS-2$\n     profile.addPropertyChangeListener(evt -> idChangeSupport.firePropertyChange(evt));\n-    final ToggleablePasswordConfigurer user = new ToggleablePasswordConfigurer(GameModule.SECRET_NAME, Resources.getString(\"Prefs.password_label\"), Resources.getString(\"Prefs.password_prompt\", System.getProperty(\"user.name\"))); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n+    final ToggleablePasswordConfigurer user =\n+      new ToggleablePasswordConfigurer(GameModule.SECRET_NAME, Resources.getString(\"Prefs.password_label\"), Resources\n+        .getString(\"Prefs.password_prompt\",\n+          System.getProperty(\"user.name\"))); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n     user.addPropertyChangeListener(evt -> GameModule.setUserId((String) evt.getNewValue()));\n     getPrefs().addOption(Resources.getString(\"Prefs.personal_tab\"), fullName);   //$NON-NLS-1$ //$NON-NLS-2$\n     getPrefs().addOption(Resources.getString(\"Prefs.personal_tab\"), user);   //$NON-NLS-1$ //$NON-NLS-2$\n@@ -588,7 +600,8 @@ public class GameModule extends AbstractConfigurable\n     ChatServerFactory.register(\"jabber\", oncf);\n \n     server = new DynamicClient();\n-    final AddressBookServerConfigurer config = new AddressBookServerConfigurer(\"ServerSelected\", \"Server\", (HybridClient) server); //NON-NLS\n+    final AddressBookServerConfigurer config =\n+      new AddressBookServerConfigurer(\"ServerSelected\", \"Server\", (HybridClient) server); //NON-NLS\n     Prefs.getGlobalPrefs().addOption(Resources.getString(\"Chat.server\"), config); //$NON-NLS-1$\n     serverControls = new ChatServerControls();\n     serverControls.addTo(this);\n@@ -642,8 +655,7 @@ public class GameModule extends AbstractConfigurable\n // FIXME: annoying!\n       frame.setLocation(screen.getLocation());\n       frame.setSize(screen.width, screen.height / 3);\n-    }\n-    else {\n+    } else {\n       final String key = \"BoundsOfGameModule\"; //$NON-NLS-1$\n       final Rectangle r = new Rectangle(0, 0, screen.width, screen.height / 4);\n       getPrefs().addOption(new PositionOption(key, frame, r));\n@@ -660,6 +672,7 @@ public class GameModule extends AbstractConfigurable\n    * Ensures that the module contains at least one component of the specified class.\n    * This is used to protect modules from accidental deletion of necessary (or potentially necessary)\n    * objects for which there is no easy interface provided to restore them (e.g. the PlayerRoster)\n+   *\n    * @param componentClass a subcomponent class. If the module has no subcomponents of that class, a nice fresh new one is added.\n    */\n   private void ensureComponent(Class<? extends Buildable> componentClass) {\n@@ -671,14 +684,14 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Adds a subcomponent of the specified class to the module hierarchy. \"Build\" the\n    * child in its default form, and register it with the module.\n+   *\n    * @param componentClass a subcomponent class, to be added.\n    */\n   private void addComponent(Class<? extends Buildable> componentClass) {\n     Buildable child = null;\n     try {\n       child = componentClass.getConstructor().newInstance();\n-    }\n-    catch (Throwable t) {\n+    } catch (Throwable t) {\n       ReflectionUtils.handleNewInstanceFailure(t, componentClass);\n     }\n \n@@ -691,7 +704,8 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Sets a buildFile (XML) attribute value for this component.\n-   * @param name the name of the attribute. Will be one of those listed in {@link #getAttributeNames}\n+   *\n+   * @param name  the name of the attribute. Will be one of those listed in {@link #getAttributeNames}\n    * @param value If the <code>value</code> parameter is a String, it will be the value returned by {@link #getAttributeValueString} for the same\n    *              <code>key</code>. If the implementing class extends {@link AbstractConfigurable}, then <code>value</code> can also be an instance of\n    */\n@@ -700,38 +714,30 @@ public class GameModule extends AbstractConfigurable\n     if (MODULE_NAME.equals(name)) {\n       if (Localization.getInstance().isTranslationInProgress()) {\n         localizedGameName = (String) value;\n-      }\n-      else {\n+      } else {\n         gameName = (String) value;\n       }\n       setConfigureName((String) value);\n-    }\n-    else if (MODULE_VERSION.equals(name)) {\n+    } else if (MODULE_VERSION.equals(name)) {\n       moduleVersion = (String) value;\n-    }\n-    else if (VASSAL_VERSION_CREATED.equals(name)) {\n+    } else if (VASSAL_VERSION_CREATED.equals(name)) {\n       vassalVersionCreated = (String) value;\n       final String runningVersion = Info.getVersion();\n       if (VersionUtils.compareVersions(vassalVersionCreated, runningVersion) > 0) {\n         WarningDialog.show(\"GameModule.version_warning\", //NON-NLS\n-                           vassalVersionCreated, runningVersion);\n+          vassalVersionCreated, runningVersion);\n       }\n-    }\n-    else if (NEXT_PIECESLOT_ID.equals(name)) {\n+    } else if (NEXT_PIECESLOT_ID.equals(name)) {\n       try {\n         nextGpId = Integer.parseInt((String) value);\n-      }\n-      catch (NumberFormatException e) {\n+      } catch (NumberFormatException e) {\n         throw new IllegalBuildException(e);\n       }\n-    }\n-    else if (DESCRIPTION.equals(name)) {\n+    } else if (DESCRIPTION.equals(name)) {\n       description = (String) value;\n-    }\n-    else if (MODULE_OTHER1_PROPERTY.equals(name)) {\n+    } else if (MODULE_OTHER1_PROPERTY.equals(name)) {\n       moduleOther1 = (String) value;\n-    }\n-    else if (MODULE_OTHER2_PROPERTY.equals(name)) {\n+    } else if (MODULE_OTHER2_PROPERTY.equals(name)) {\n       moduleOther2 = (String) value;\n     }\n   }\n@@ -744,26 +750,19 @@ public class GameModule extends AbstractConfigurable\n   public String getAttributeValueString(String name) {\n     if (MODULE_NAME.equals(name)) {\n       return gameName;\n-    }\n-    else if (MODULE_VERSION.equals(name)) {\n+    } else if (MODULE_VERSION.equals(name)) {\n       return moduleVersion;\n-    }\n-    else if (VASSAL_VERSION_CREATED.equals(name)) {\n+    } else if (VASSAL_VERSION_CREATED.equals(name)) {\n       return vassalVersionCreated;\n-    }\n-    else if (VASSAL_VERSION_RUNNING.equals(name)) {\n+    } else if (VASSAL_VERSION_RUNNING.equals(name)) {\n       return Info.getVersion();\n-    }\n-    else if (NEXT_PIECESLOT_ID.equals(name)) {\n+    } else if (NEXT_PIECESLOT_ID.equals(name)) {\n       return String.valueOf(nextGpId);\n-    }\n-    else if (DESCRIPTION.equals(name)) {\n+    } else if (DESCRIPTION.equals(name)) {\n       return description;\n-    }\n-    else if (MODULE_OTHER1_PROPERTY.equals(name)) {\n+    } else if (MODULE_OTHER1_PROPERTY.equals(name)) {\n       return moduleOther1;\n-    }\n-    else if (MODULE_OTHER2_PROPERTY.equals(name)) {\n+    } else if (MODULE_OTHER2_PROPERTY.equals(name)) {\n       return moduleOther2;\n     }\n     return null;\n@@ -772,10 +771,10 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * A valid version format is \"w.x.y[bz]\", where\n    * 'w','x','y', and 'z' are integers.\n+   *\n    * @return a negative number if <code>v2</code> is a later version\n    * the <code>v1</code>, a positive number if an earlier version,\n    * or zero if the versions are the same.\n-   *\n    * @deprecated use {@link VersionUtils#compareVersions(String, String)}\n    */\n   @Deprecated(since = \"2020-08-06\", forRemoval = true)\n@@ -786,6 +785,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Game Module is normally at the root of the hierarchy, so it doesn't expect to get added to anything.\n+   *\n    * @param b Notional \"parent\" of this GameModule\n    */\n   @Override\n@@ -795,6 +795,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Gets the generic name for this type of class across all instances of it. Appears\n    * in the Editor window in [..] as e.g. [Map], [Prototype], etc.\n+   *\n    * @return The generic name for this kind of component, i.e. the part appearing [In Brackets] in the Editor's {@link ConfigureTree}.\n    */\n   public static String getConfigureTypeName() {\n@@ -803,6 +804,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Since we aren't expecting to be {@link #addTo}'ed to a parent, we likewise don't need to do much about being \"removeFrom'ed\" one.\n+   *\n    * @param parent Notional \"parent\" of this GameModule\n    */\n   @Override\n@@ -821,12 +823,13 @@ public class GameModule extends AbstractConfigurable\n    * Lists all the buildFile (XML) attribute names for this component.\n    * If this component is ALSO an {@link AbstractConfigurable}, then this list of attributes determines the appropriate\n    * attribute order for {@link AbstractConfigurable#getAttributeDescriptions()} and {@link AbstractConfigurable#getAttributeTypes()}.\n+   *\n    * @return a list of all buildFile (XML) attribute names for this component\n    * @see AbstractBuildable\n    */\n   @Override\n   public String[] getAttributeNames() {\n-    return new String[]{\n+    return new String[] {\n       MODULE_NAME,\n       MODULE_VERSION,\n       DESCRIPTION,\n@@ -845,7 +848,7 @@ public class GameModule extends AbstractConfigurable\n    */\n   @Override\n   public String[] getAttributeDescriptions() {\n-    return new String[]{\n+    return new String[] {\n       Resources.getString(\"Editor.GameModule.name_label\"),    //$NON-NLS-1$\n       Resources.getString(\"Editor.GameModule.version_label\"), //$NON-NLS-1$\n       Resources.getString(\"Editor.description_label\"),    //NON-NLS\n@@ -858,13 +861,13 @@ public class GameModule extends AbstractConfigurable\n    * @return the Class for the buildFile (XML) attributes of this component. Valid classes include: String, Integer, Double, Boolean, Image,\n    * Color, and KeyStroke, along with any class for which a Configurer exists in VASSAL.configure. The class determines, among other things,\n    * which type of {@link AutoConfigurer} will be used to configure the attribute when the object is configured in the Editor.\n-   *\n+   * <p>\n    * The order of classes should be the same as the order of names in {@link AbstractBuildable#getAttributeNames}\n    * @see AbstractConfigurable\n    */\n   @Override\n   public Class<?>[] getAttributeTypes() {\n-    return new Class<?>[]{\n+    return new Class<?>[] {\n       String.class,\n       String.class,\n       String.class,\n@@ -885,7 +888,7 @@ public class GameModule extends AbstractConfigurable\n    */\n   @Override\n   public Class<?>[] getAllowableConfigureComponents() {\n-    return new Class<?>[]{\n+    return new Class<?>[] {\n       Map.class,\n       PieceWindow.class,\n       PrototypesContainer.class,\n@@ -911,10 +914,11 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * The GameModule acts as the mediator for hotkey events.\n-   *\n+   * <p>\n    * Components that wish to fire hotkey events when they have the\n    * focus should register themselves using this method.  These events will be\n    * forwarded to all listeners that have registered themselves with {@link #addKeyStrokeListener}\n+   *\n    * @param src KeyStrokeSource Component that wants to register as a source for hotkey events\n    */\n   public void addKeyStrokeSource(KeyStrokeSource src) {\n@@ -926,7 +930,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * The GameModule acts as the mediator for hotkey events.\n-   *\n+   * <p>\n    * Objects that react to hotkey events should register themselves\n    * using this method.  Any component that has been registered with {@link #addKeyStrokeSource}\n    * will forward hotkey events to listeners registered with this method.\n@@ -962,6 +966,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Invokes a {@link NamedKeyStroke} to all of our listeners.\n+   *\n    * @param stroke NamedKeyStroke to invoke\n    */\n   public void fireKeyStroke(NamedKeyStroke stroke) {\n@@ -1000,6 +1005,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Currently used to listen for changes to player names\n+   *\n    * @param l propertyChangeListener to add\n    */\n   public void addIdChangeListener(PropertyChangeListener l) {\n@@ -1008,6 +1014,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Currently used to listen for changes to player names\n+   *\n    * @param l propertyChangeListener to remove\n    */\n   public void removeIdChangeListener(PropertyChangeListener l) {\n@@ -1026,6 +1033,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * A set of preferences that applies to all modules\n+   *\n    * @deprecated use {@link Prefs#getGlobalPrefs()}\n    */\n   @Deprecated(since = \"2020-08-06\", forRemoval = true)\n@@ -1096,22 +1104,22 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Display the given text in the control window's status line.\n    * Save the messages for later if the Chatter has not been initialised yet\n+   *\n    * @param s message to display in Chat Log\n    */\n   public void warn(String s) {\n     String s2 = s;\n     if (s2.isEmpty() || (QuickColors.getQuickColor(s) == -1)) { // Quick Colors \"opt in\" HTML\n-    s2 = s2.replaceAll(\"<\", \"&lt;\")  // So < symbols in warning messages don't get misinterpreted as HTML //$NON-NLS\n-           .replaceAll(\">\", \"&gt;\"); //$NON-NLS\n+      s2 = s2.replaceAll(\"<\", \"&lt;\")  // So < symbols in warning messages don't get misinterpreted as HTML //$NON-NLS\n+        .replaceAll(\">\", \"&gt;\"); //$NON-NLS\n     }\n     if (chat == null) {\n       deferredChat.add(s2);\n-    }\n-    else {\n+    } else {\n       chat.show(\" - \" + s2); //$NON-NLS-1$\n     }\n   }\n-  \n+\n   /**\n    * @return a single Random number generator that all objects may share\n    */\n@@ -1159,7 +1167,6 @@ public class GameModule extends AbstractConfigurable\n   }\n \n   /**\n-   *\n    * @deprecated no replacement\n    */\n   @Deprecated(since = \"2020-08-06\", forRemoval = true)\n@@ -1184,8 +1191,7 @@ public class GameModule extends AbstractConfigurable\n     final String first = st.nextToken();\n     if (command.equals(first)) {\n       c = decodeSubCommand(first);\n-    }\n-    else {\n+    } else {\n       Command next;\n       c = decode(first);\n       while (st.hasMoreTokens()) {\n@@ -1199,6 +1205,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Deserializes a single anonymous subcommand String into a {@link Command}, by invoking #decode from each of our registered\n    * command encoders in turn until one of them is able to successfully recognize and deserialize the command.\n+   *\n    * @param subCommand A single command, to be deserialized\n    * @return a {@link Command} object for this command, ready to be executed.\n    */\n@@ -1243,6 +1250,7 @@ public class GameModule extends AbstractConfigurable\n    * Serializes a single anonymous {@link Command} object into an ascii-compatible string, by invoking #encode on\n    * from each of our registered {@link CommandEncoder}s in turn until one of them is successfully able to recognize\n    * and serialize the Command.\n+   *\n    * @param c A Command object containing a single Command of any type.\n    * @return ascii-friendly String form of the command, ready to be sent to other players' clients.\n    */\n@@ -1262,8 +1270,7 @@ public class GameModule extends AbstractConfigurable\n     if (fileChooser == null) {\n       fileChooser = FileChooser.createFileChooser(getPlayerWindow(),\n         getGameState().getSavedGameDirectoryPreference());\n-    }\n-    else {\n+    } else {\n       fileChooser.resetChoosableFileFilters();\n       fileChooser.rescanCurrentDirectory();\n     }\n@@ -1284,8 +1291,7 @@ public class GameModule extends AbstractConfigurable\n         fileDialog.setDirectory(f.getPath());\n       }\n       fileDialog.setModal(true);\n-    }\n-    else {\n+    } else {\n       fileDialog.setDirectory(fileDialog.getDirectory());\n     }\n     return fileDialog;\n@@ -1293,6 +1299,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Provides access to the Game Module's toolbar.\n+   *\n    * @return the JToolBar of the command window\n    */\n   @Override\n@@ -1303,15 +1310,15 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Returns an appropriate Title Bar string for a window, based on the module name,\n    * the last read/written game file, and the manner of interaction with it.\n-   * @return appropriate title bar string for a window.\n-   * @param key Localization key to be used to generate string\n+   *\n+   * @param key  Localization key to be used to generate string\n    * @param name Name of the object whose title bar is to be generated\n+   * @return appropriate title bar string for a window.\n    */\n   public String getWindowTitleString(String key, String name) {\n     if (StringUtils.isEmpty(gameFile) || GameFileMode.NEW_GAME.equals(gameFileMode)) {\n       return Resources.getString(key + \"_title\", name);  //NON-NLS-1$\n-    }\n-    else {\n+    } else {\n       return Resources.getString(key + \"_title_\" + gameFileMode, name, gameFile); //NON-NLS-1$\n     }\n   }\n@@ -1319,6 +1326,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Returns an appropriate Title Bar string for the main module window, based on the module name,\n    * the last read/written game file, and the manner of interaction with it.\n+   *\n    * @return appropriate title bar string for main module window.\n    */\n   public String getTitleString() {\n@@ -1337,8 +1345,8 @@ public class GameModule extends AbstractConfigurable\n   }\n \n   /**\n-   * @deprecated use {@link #updateTitleBar()}\n    * @param s String to append to title\n+   * @deprecated use {@link #updateTitleBar()}\n    */\n   @Deprecated(since = \"2020-09-16\", forRemoval = true)\n   public void appendToTitle(String s) {\n@@ -1348,8 +1356,9 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Sets the most recent .VSAV / .VLOG file saved, loaded, or logged to, along with\n    * the type of action taken with that file.\n+   *\n    * @param gameFile Most recent VSAV/VLOG if any\n-   * @param mode mode of access\n+   * @param mode     mode of access\n    */\n   public void setGameFile(String gameFile, GameFileMode mode) {\n     this.gameFile = gameFile;\n@@ -1367,6 +1376,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Sets the type of interaction we most recently had with saving/loading/replaying/logging, for managing title bars\n    * of windows.\n+   *\n    * @param mode mode of access\n    */\n   public void setGameFileMode(GameFileMode mode) {\n@@ -1393,6 +1403,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Prompt user to save open game and modules/extensions being edited\n+   *\n    * @return true if shutDown should proceed, i.e. user did not cancel\n    */\n   public boolean shutDown() {\n@@ -1402,10 +1413,10 @@ public class GameModule extends AbstractConfigurable\n \n     if (!cancelled) {\n       if (getDataArchive() instanceof ArchiveWriter\n-          && (!buildString().equals(lastSavedConfiguration) || iFeelDirty)) {\n+        && (!buildString().equals(lastSavedConfiguration) || iFeelDirty)) {\n         switch (JOptionPane.showConfirmDialog(frame,\n           Resources.getString(\"GameModule.save_module\"),  //$NON-NLS-1$\n-             \"\", JOptionPane.YES_NO_CANCEL_OPTION)) {  //$NON-NLS-1$\n+          \"\", JOptionPane.YES_NO_CANCEL_OPTION)) {  //$NON-NLS-1$\n         case JOptionPane.YES_OPTION:\n           save();\n           break;\n@@ -1426,16 +1437,13 @@ public class GameModule extends AbstractConfigurable\n       try {\n         p = getPrefs();\n         p.write();\n-      }\n-      catch (IOException e) {\n+      } catch (IOException e) {\n         WriteErrorDialog.error(e, p.getFile());\n-      }\n-      finally {\n+      } finally {\n         if (p != null) {\n           try {\n             p.close();\n-          }\n-          catch (IOException e) {\n+          } catch (IOException e) {\n             log.error(\"Error while closing module preferences\", e); //NON-NLS\n           }\n         }\n@@ -1444,8 +1452,7 @@ public class GameModule extends AbstractConfigurable\n       // close the module\n       try {\n         archive.close();\n-      }\n-      catch (IOException e) {\n+      } catch (IOException e) {\n         ReadErrorDialog.error(e, archive.getName());\n       }\n \n@@ -1460,8 +1467,8 @@ public class GameModule extends AbstractConfigurable\n    * any other players' clients), the action should be encapsulated into a {@link Command} and sent here. This method\n    * encodes the {@link Command}, sends it to the server (if we're online) and write it to a .vlog PBEM logfile (if\n    * any is open). It thus drives both formats of multiplayer game through a common interface.\n-   * @param c The {@link Command} to be sent and logged.\n    *\n+   * @param c The {@link Command} to be sent and logged.\n    * @see #encode\n    */\n   public void sendAndLog(Command c) {\n@@ -1470,12 +1477,10 @@ public class GameModule extends AbstractConfigurable\n         if (loggingPaused) {\n           if (pausedCommands == null) {\n             pausedCommands = c;\n-          }\n-          else {\n+          } else {\n             pausedCommands.append(c);\n           }\n-        }\n-        else {\n+        } else {\n           getServer().sendToOthers(c);\n           getLogger().log(c);\n         }\n@@ -1486,7 +1491,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Pause logging and return true if successful.\n    * Return false if logging already paused\n-   *\n+   * <p>\n    * While Paused, commands are accumulated into pausedCommands so that they\n    * can all be logged at the same time, and generate a single UNDO command.\n    *\n@@ -1505,6 +1510,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Restart logging and return any outstanding commands\n+   *\n    * @return any outstanding {@link Command} (can contain multiple chained commands)\n    */\n   public Command resumeLogging() {\n@@ -1548,7 +1554,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Loads a module object into the player window.\n-   *\n+   * <p>\n    * Registers a <a href=\"https://en.wikipedia.org/wiki/Singleton_pattern\">singleton</a> GameModule\n    * and invokes {@link Buildable#build} on it to build it from the XML buildFile. This will have the effect of\n    * invoking {@link Buildable#build} on all of the module's subcomponents as well, effectively building our whole\n@@ -1559,14 +1565,12 @@ public class GameModule extends AbstractConfigurable\n       throw new UnsupportedOperationException(\n         Resources.getString(\"GameModule.open_error\",\n           theModule.getDataArchive().getName()));\n-    }\n-    else {\n+    } else {\n       theModule = module;\n       theModule.setGpIdSupport(theModule);\n       try {\n         theModule.build();\n-      }\n-      catch (IOException e) {\n+      } catch (IOException e) {\n         theModule = null;\n         throw e;\n       }\n@@ -1598,6 +1602,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Allocates the next available GamePiece ID and returns it.\n+   *\n    * @return an available GpID\n    * @see GpIdSupport\n    */\n@@ -1617,6 +1622,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Sets the next available GamePiece ID\n+   *\n    * @param id new value for nextGpId.\n    * @see GpIdSupport\n    */\n@@ -1627,6 +1633,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Registers a GamePiece ID support object for us to manage a namespace for unique GamePiece objects.\n+   *\n    * @param s GamePiece ID object\n    */\n   public void setGpIdSupport(GpIdSupport s) {\n@@ -1643,6 +1650,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Check every PieceSlot and PlaceMarker trait for duplicate,\n    * illegal or Missing GamePiece id's and update them if necessary\n+   *\n    * @see GpIdSupport\n    */\n   private void checkGpIds() {\n@@ -1662,6 +1670,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * VASSAL modules are stored in \".vmod\" files, which are actually simple \".zip\" files with\n    * a unique extension.\n+   *\n    * @return the object which stores data for the module -- our .vmod Zip file.\n    */\n   public DataArchive getDataArchive() {\n@@ -1671,8 +1680,9 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * VASSAL modules are stored in \".vmod\" files, which are actually simple \".zip\" files with\n    * a unique extension.\n-   *\n+   * <p>\n    * If the module is being edited, return the writeable archive for the module\n+   *\n    * @return the writer for our .vmod Zip file\n    */\n   public ArchiveWriter getArchiveWriter() {\n@@ -1737,6 +1747,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * If the module is being edited, write the module data\n+   *\n    * @param saveAs true to force display of a {@link FileChooser} to offer a new choice of filenames\n    */\n   private void save(boolean saveAs) {\n@@ -1748,8 +1759,7 @@ public class GameModule extends AbstractConfigurable\n \n     try {\n       (new ModuleMetaData(this)).save(writer);\n-    }\n-    catch (IOException e) {\n+    } catch (IOException e) {\n       WriteErrorDialog.error(e, writer.getName());\n     }\n \n@@ -1758,16 +1768,19 @@ public class GameModule extends AbstractConfigurable\n       writer.addFile(BUILDFILE,\n         new ByteArrayInputStream(save.getBytes(StandardCharsets.UTF_8)));\n \n-      writer.removeFile(BUILDFILE_OLD); // Don't leave old non-extension buildfile around if we successfully write the new one.     \n+      writer\n+        .removeFile(BUILDFILE_OLD); // Don't leave old non-extension buildfile around if we successfully write the new one.\n \n-      if (saveAs) writer.saveAs(true);\n-      else writer.save(true);\n+      if (saveAs) {\n+        writer.saveAs(true);\n+      } else {\n+        writer.save(true);\n+      }\n \n       lastSavedConfiguration = save;\n \n       GameModule.getGameModule().warn(Resources.getString(\"Editor.GameModule.saved\", writer.getArchive().getFile().getName()));\n-    }\n-    catch (IOException e) {\n+    } catch (IOException e) {\n       WriteErrorDialog.error(e, writer.getName());\n     }\n   }\n@@ -1784,6 +1797,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Gets the value of a module level global property -- this includes identification information for the\n    * local player as well as the contents of any Global Property objects defined at module level in the Module.\n+   *\n    * @param key identifies the global property to be returned\n    * @return value of designated global property\n    */\n@@ -1792,32 +1806,23 @@ public class GameModule extends AbstractConfigurable\n     if (GlobalOptions.PLAYER_SIDE.equals(key) || GlobalOptions.PLAYER_SIDE_ALT.equals(key)) {\n       final String mySide = PlayerRoster.getMySide();\n       return mySide == null ? \"\" : mySide;  //$NON-NLS-1$\n-    }\n-    else if (GlobalOptions.PLAYER_NAME.equals(key) || GlobalOptions.PLAYER_NAME_ALT.equals(key)) {\n+    } else if (GlobalOptions.PLAYER_NAME.equals(key) || GlobalOptions.PLAYER_NAME_ALT.equals(key)) {\n       return getPrefs().getValue(GameModule.REAL_NAME);\n-    }\n-    else if (GlobalOptions.PLAYER_ID.equals(key) || GlobalOptions.PLAYER_ID_ALT.equals(key)) {\n+    } else if (GlobalOptions.PLAYER_ID.equals(key) || GlobalOptions.PLAYER_ID_ALT.equals(key)) {\n       return GlobalOptions.getInstance().getPlayerId();\n-    }\n-    else if (MODULE_NAME_PROPERTY.equals(key)) {\n+    } else if (MODULE_NAME_PROPERTY.equals(key)) {\n       return gameName;\n-    }\n-    else if (MODULE_VERSION_PROPERTY.equals(key)) {\n+    } else if (MODULE_VERSION_PROPERTY.equals(key)) {\n       return moduleVersion;\n-    }\n-    else if (MODULE_DESCRIPTION_PROPERTY.equals(key)) {\n+    } else if (MODULE_DESCRIPTION_PROPERTY.equals(key)) {\n       return description;\n-    }\n-    else if (MODULE_VASSAL_VERSION_CREATED_PROPERTY.equals(key)) {\n+    } else if (MODULE_VASSAL_VERSION_CREATED_PROPERTY.equals(key)) {\n       return vassalVersionCreated;\n-    }\n-    else if (MODULE_VASSAL_VERSION_RUNNING_PROPERTY.equals(key)) {\n+    } else if (MODULE_VASSAL_VERSION_RUNNING_PROPERTY.equals(key)) {\n       return Info.getVersion();\n-    }\n-    else if (MODULE_OTHER1_PROPERTY.equals(key)) {\n+    } else if (MODULE_OTHER1_PROPERTY.equals(key)) {\n       return moduleOther1;\n-    }\n-    else if (MODULE_OTHER2_PROPERTY.equals(key)) {\n+    } else if (MODULE_OTHER2_PROPERTY.equals(key)) {\n       return moduleOther2;\n     }\n     final MutableProperty p = propsContainer.getMutableProperty(String.valueOf(key));\n@@ -1828,6 +1833,7 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Gets the value of a mutable (changeable) \"Global Property\". Module level Global Properties serve as the\n    * \"global variables\" of a VASSAL Module, as they are accessible by any component at any time.\n+   *\n    * @param name identifies the Global Property whose value should be returned\n    * @return value of designated global property\n    */\n@@ -1839,8 +1845,9 @@ public class GameModule extends AbstractConfigurable\n   /**\n    * Adds a new mutable (changeable) \"Global Property\" to the Module. Module level Global Properties serve as the\n    * \"global variables\" of a VASSAL Module, as they are accessible by any component at any time.\n+   *\n    * @param key Name for the new Global Property\n-   * @param p Starting property value\n+   * @param p   Starting property value\n    */\n   @Override\n   public void addMutableProperty(String key, MutableProperty p) {\n@@ -1850,6 +1857,7 @@ public class GameModule extends AbstractConfigurable\n \n   /**\n    * Removes a mutable property from the Global Properties list.\n+   *\n    * @param key Name of the Global Property\n    * @return the removed property, for some reason.\n    */\n@@ -1879,8 +1887,7 @@ public class GameModule extends AbstractConfigurable\n     if (GlobalOptions.PLAYER_SIDE.equals(key) || GlobalOptions.PLAYER_SIDE_ALT.equals(key)) {\n       final String mySide = PlayerRoster.getMyLocalizedSide();\n       return mySide == null ? \"\" : mySide;  //$NON-NLS-1$\n-    }\n-    else {\n+    } else {\n       return getProperty(key);\n     }\n   }\n@@ -1912,8 +1919,7 @@ public class GameModule extends AbstractConfigurable\n \n     try {\n       return CRCUtils.getCRC(files);\n-    }\n-    catch (IOException e) {\n+    } catch (IOException e) {\n       log.error(\"Error generating CRC\", e); //NON-NLS\n       return 0L;\n     }\n@@ -1935,12 +1941,13 @@ public class GameModule extends AbstractConfigurable\n    */\n   public PlayerRoster getPlayerRoster() {\n     return getComponentsOf(PlayerRoster.class).stream()\n-                                              .findFirst()\n-                                              .orElse(null);\n+      .findFirst()\n+      .orElse(null);\n   }\n \n   /**\n    * Adds listener for players changing sides\n+   *\n    * @param l new SideChangeListener\n    */\n   public void addSideChangeListenerToPlayerRoster(PlayerRoster.SideChangeListener l) {\n",
            "diff_size": 197
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/2/GameModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_random/2/GameModule.java\nindex 22f1fa0dfd5..fdb8358d621 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/2/GameModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_random/2/GameModule.java\n@@ -1101,7 +1101,7 @@ public class GameModule extends AbstractConfigurable\n   public void warn(String s) {\n     String s2 = s;\n     if (s2.isEmpty() || (QuickColors.getQuickColor(s) == -1)) { // Quick Colors \"opt in\" HTML\n-    s2 = s2.replaceAll(\"<\", \"&lt;\")  // So < symbols in warning messages don't get misinterpreted as HTML //$NON-NLS\n+      s2 = s2.replaceAll(\"<\", \"&lt;\")  // So < symbols in warning messages don't get misinterpreted as HTML //$NON-NLS\n            .replaceAll(\">\", \"&gt;\"); //$NON-NLS\n     }\n     if (chat == null) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1104",
                    "column": "5",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}