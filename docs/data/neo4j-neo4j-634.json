{
    "project_name": "neo4j-neo4j",
    "error_id": "634",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/634/JavaSourceGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/634/JavaSourceGenerator.java\nindex fc673fbba2e..16313596765 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/634/JavaSourceGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/634/JavaSourceGenerator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen.source;\n \n import java.util.ArrayList;\n@@ -36,7 +37,7 @@ import org.neo4j.codegen.TypeReference;\n  * {@link CodeGenerator} that generates code by writing java source files, and compiling these using {@link JavaCompiler}.\n  * <p/>\n  * NOTE: This generator does not support generating classes that depend on previously generated classes. If you\n- *       need to generate multiple dependent classes they have to be compiled in the same compilation unit (See {@link CodeGenerator})\n+ * need to generate multiple dependent classes they have to be compiled in the same compilation unit (See {@link CodeGenerator})\n  */\n class JavaSourceGenerator extends CodeGenerator\n {\n@@ -44,55 +45,55 @@ class JavaSourceGenerator extends CodeGenerator\n     private final Map<TypeReference, StringBuilder> classes = new HashMap<>();\n     private final JavaSourceCompiler compiler;\n \n-    JavaSourceGenerator( ClassLoader parentClassLoader, Configuration configuration, JavaSourceCompiler compiler )\n+    JavaSourceGenerator(ClassLoader parentClassLoader, Configuration configuration, JavaSourceCompiler compiler)\n     {\n-        super( parentClassLoader );\n+        super(parentClassLoader);\n         this.configuration = configuration;\n         this.compiler = compiler;\n     }\n \n     @Override\n-    protected ClassWriter generate( TypeReference type, TypeReference base, TypeReference... interfaces )\n+    protected ClassWriter generate(TypeReference type, TypeReference base, TypeReference... interfaces)\n     {\n         StringBuilder target = new StringBuilder();\n-        synchronized ( this )\n+        synchronized (this)\n         {\n-            StringBuilder old = classes.put( type, target );\n-            if ( old != null )\n+            StringBuilder old = classes.put(type, target);\n+            if (old != null)\n             {\n-                classes.put( type, old );\n-                throw new IllegalStateException( \"Trying to generate class twice: \" + type );\n+                classes.put(type, old);\n+                throw new IllegalStateException(\"Trying to generate class twice: \" + type);\n             }\n         }\n-        JavaSourceClassWriter writer = new JavaSourceClassWriter( target, configuration );\n-        writer.declarePackage( type );\n-        writer.javadoc( \"Generated by \" + getClass().getName() );\n-        writer.publicClass( type );\n-        writer.extendClass( base );\n-        writer.implement( interfaces );\n+        JavaSourceClassWriter writer = new JavaSourceClassWriter(target, configuration);\n+        writer.declarePackage(type);\n+        writer.javadoc(\"Generated by \" + getClass().getName());\n+        writer.publicClass(type);\n+        writer.extendClass(base);\n+        writer.implement(interfaces);\n         writer.begin();\n         return writer;\n     }\n \n     @Override\n-    protected Iterable<? extends ByteCodes> compile( ClassLoader classpathLoader ) throws CompilationFailureException\n+    protected Iterable<? extends ByteCodes> compile(ClassLoader classpathLoader) throws CompilationFailureException\n     {\n-        return compiler.compile( sourceFiles(), classpathLoader );\n+        return compiler.compile(sourceFiles(), classpathLoader);\n     }\n \n     private synchronized List<JavaSourceFile> sourceFiles()\n     {\n         List<JavaSourceFile> sourceFiles;\n-        synchronized ( this )\n+        synchronized (this)\n         {\n-            sourceFiles = new ArrayList<>( classes.size() );\n-            for ( Map.Entry<TypeReference, StringBuilder> entry : classes.entrySet() )\n+            sourceFiles = new ArrayList<>(classes.size());\n+            for (Map.Entry<TypeReference, StringBuilder> entry : classes.entrySet())\n             {\n                 TypeReference reference = entry.getKey();\n                 StringBuilder source = entry.getValue();\n-                configuration.visit( reference, source );\n-                sourceFiles.add( new JavaSourceFile( configuration.sourceBase().uri(\n-                        reference.packageName(), reference.name(), JavaFileObject.Kind.SOURCE ), source ) );\n+                configuration.visit(reference, source);\n+                sourceFiles.add(new JavaSourceFile(configuration.sourceBase().uri(\n+                  reference.packageName(), reference.name(), JavaFileObject.Kind.SOURCE), source));\n             }\n             classes.clear();\n         }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}