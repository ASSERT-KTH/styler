{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2836",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "146",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "206",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "283",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "314",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "374",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2836/SystemDiagnostics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2836/SystemDiagnostics.java\nindex 0112be8c8bf..d86d5aad61e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2836/SystemDiagnostics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2836/SystemDiagnostics.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.info;\n \n import java.io.File;\n@@ -55,346 +56,340 @@ import static org.neo4j.helpers.Format.bytes;\n \n enum SystemDiagnostics implements DiagnosticsProvider\n {\n-    SYSTEM_MEMORY( \"System memory information:\" )\n-    {\n+  SYSTEM_MEMORY(\"System memory information:\")\n+      {\n         @Override\n-        void dump( Logger logger )\n+        void dump(Logger logger)\n         {\n-            logBytes( logger, \"Total Physical memory: \", OsBeanUtil.getTotalPhysicalMemory() );\n-            logBytes( logger, \"Free Physical memory: \", OsBeanUtil.getFreePhysicalMemory() );\n-            logBytes( logger, \"Committed virtual memory: \", OsBeanUtil.getCommittedVirtualMemory() );\n-            logBytes( logger, \"Total swap space: \", OsBeanUtil.getTotalSwapSpace() );\n-            logBytes( logger, \"Free swap space: \", OsBeanUtil.getFreeSwapSpace() );\n+          logBytes(logger, \"Total Physical memory: \", OsBeanUtil.getTotalPhysicalMemory());\n+          logBytes(logger, \"Free Physical memory: \", OsBeanUtil.getFreePhysicalMemory());\n+          logBytes(logger, \"Committed virtual memory: \", OsBeanUtil.getCommittedVirtualMemory());\n+          logBytes(logger, \"Total swap space: \", OsBeanUtil.getTotalSwapSpace());\n+          logBytes(logger, \"Free swap space: \", OsBeanUtil.getFreeSwapSpace());\n         }\n-    },\n-    JAVA_MEMORY( \"JVM memory information:\" )\n-    {\n+      },\n+  JAVA_MEMORY(\"JVM memory information:\")\n+      {\n         @Override\n-        void dump( Logger logger )\n+        void dump(Logger logger)\n         {\n-            logger.log( \"Free  memory: \" + bytes( Runtime.getRuntime().freeMemory() ) );\n-            logger.log( \"Total memory: \" + bytes( Runtime.getRuntime().totalMemory() ) );\n-            logger.log( \"Max   memory: \" + bytes( Runtime.getRuntime().maxMemory() ) );\n-            for ( GarbageCollectorMXBean gc : ManagementFactory.getGarbageCollectorMXBeans() )\n-            {\n-                logger.log( \"Garbage Collector: \" + gc.getName() + \": \" + Arrays.toString( gc.getMemoryPoolNames() ) );\n-            }\n-            for ( MemoryPoolMXBean pool : ManagementFactory.getMemoryPoolMXBeans() )\n-            {\n-                MemoryUsage usage = pool.getUsage();\n-                logger.log( String.format( \"Memory Pool: %s (%s): committed=%s, used=%s, max=%s, threshold=%s\",\n-                        pool.getName(), pool.getType(), usage == null ? \"?\" : bytes( usage.getCommitted() ),\n-                        usage == null ? \"?\" : bytes( usage.getUsed() ), usage == null ? \"?\" : bytes( usage.getMax() ),\n-                        pool.isUsageThresholdSupported() ? bytes( pool.getUsageThreshold() ) : \"?\" ) );\n-            }\n+          logger.log(\"Free  memory: \" + bytes(Runtime.getRuntime().freeMemory()));\n+          logger.log(\"Total memory: \" + bytes(Runtime.getRuntime().totalMemory()));\n+          logger.log(\"Max   memory: \" + bytes(Runtime.getRuntime().maxMemory()));\n+          for (GarbageCollectorMXBean gc : ManagementFactory.getGarbageCollectorMXBeans())\n+          {\n+            logger.log(\"Garbage Collector: \" + gc.getName() + \": \" + Arrays.toString(gc.getMemoryPoolNames()));\n+          }\n+          for (MemoryPoolMXBean pool : ManagementFactory.getMemoryPoolMXBeans())\n+          {\n+            MemoryUsage usage = pool.getUsage();\n+            logger.log(String.format(\"Memory Pool: %s (%s): committed=%s, used=%s, max=%s, threshold=%s\",\n+                pool.getName(), pool.getType(), usage == null ? \"?\" : bytes(usage.getCommitted()),\n+                usage == null ? \"?\" : bytes(usage.getUsed()), usage == null ? \"?\" : bytes(usage.getMax()),\n+                pool.isUsageThresholdSupported() ? bytes(pool.getUsageThreshold()) : \"?\"));\n+          }\n         }\n-    },\n-    OPERATING_SYSTEM( \"Operating system information:\" )\n-    {\n+      },\n+  OPERATING_SYSTEM(\"Operating system information:\")\n+      {\n         @Override\n-        void dump( Logger logger )\n+        void dump(Logger logger)\n         {\n-            OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n-            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            logger.log( String.format( \"Operating System: %s; version: %s; arch: %s; cpus: %s\", os.getName(),\n-                    os.getVersion(), os.getArch(), os.getAvailableProcessors() ) );\n-            logLong( logger, \"Max number of file descriptors: \", OsBeanUtil.getMaxFileDescriptors() );\n-            logLong( logger, \"Number of open file descriptors: \", OsBeanUtil.getOpenFileDescriptors() );\n-            logger.log( \"Process id: \" + runtime.getName() );\n-            logger.log( \"Byte order: \" + ByteOrder.nativeOrder() );\n-            logger.log( \"Local timezone: \" + getLocalTimeZone() );\n+          OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n+          RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+          logger.log(String.format(\"Operating System: %s; version: %s; arch: %s; cpus: %s\", os.getName(),\n+              os.getVersion(), os.getArch(), os.getAvailableProcessors()));\n+          logLong(logger, \"Max number of file descriptors: \", OsBeanUtil.getMaxFileDescriptors());\n+          logLong(logger, \"Number of open file descriptors: \", OsBeanUtil.getOpenFileDescriptors());\n+          logger.log(\"Process id: \" + runtime.getName());\n+          logger.log(\"Byte order: \" + ByteOrder.nativeOrder());\n+          logger.log(\"Local timezone: \" + getLocalTimeZone());\n         }\n \n         private String getLocalTimeZone()\n         {\n-            TimeZone tz = Calendar.getInstance().getTimeZone();\n-            return tz.getID();\n+          TimeZone tz = Calendar.getInstance().getTimeZone();\n+          return tz.getID();\n         }\n-    },\n-    JAVA_VIRTUAL_MACHINE( \"JVM information:\" )\n-    {\n+      },\n+  JAVA_VIRTUAL_MACHINE(\"JVM information:\")\n+      {\n         @Override\n-        void dump( Logger logger )\n+        void dump(Logger logger)\n         {\n-            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            logger.log( \"VM Name: \" + runtime.getVmName() );\n-            logger.log( \"VM Vendor: \" + runtime.getVmVendor() );\n-            logger.log( \"VM Version: \" + runtime.getVmVersion() );\n-            CompilationMXBean compiler = ManagementFactory.getCompilationMXBean();\n-            logger.log( \"JIT compiler: \" + ( ( compiler == null ) ? \"unknown\" : compiler.getName() ) );\n-            logger.log( \"VM Arguments: \" + runtime.getInputArguments() );\n+          RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+          logger.log(\"VM Name: \" + runtime.getVmName());\n+          logger.log(\"VM Vendor: \" + runtime.getVmVendor());\n+          logger.log(\"VM Version: \" + runtime.getVmVersion());\n+          CompilationMXBean compiler = ManagementFactory.getCompilationMXBean();\n+          logger.log(\"JIT compiler: \" + ((compiler == null) ? \"unknown\" : compiler.getName()));\n+          logger.log(\"VM Arguments: \" + runtime.getInputArguments());\n         }\n-    },\n-    CLASSPATH( \"Java classpath:\" )\n-    {\n+      },\n+  CLASSPATH(\"Java classpath:\")\n+      {\n         @Override\n-        void dump( Logger logger )\n+        void dump(Logger logger)\n         {\n-            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            Collection<String> classpath;\n-            if ( runtime.isBootClassPathSupported() )\n-            {\n-                classpath = buildClassPath( getClass().getClassLoader(),\n-                        new String[] { \"bootstrap\", \"classpath\" },\n-                        runtime.getBootClassPath(), runtime.getClassPath() );\n-            }\n-            else\n-            {\n-                classpath = buildClassPath( getClass().getClassLoader(),\n-                        new String[] { \"classpath\" }, runtime.getClassPath() );\n-            }\n-            for ( String path : classpath )\n-            {\n-                logger.log( path );\n-            }\n+          RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+          Collection<String> classpath;\n+          if (runtime.isBootClassPathSupported())\n+          {\n+            classpath = buildClassPath(getClass().getClassLoader(),\n+                new String[] {\"bootstrap\", \"classpath\"},\n+                runtime.getBootClassPath(), runtime.getClassPath());\n+          } else\n+          {\n+            classpath = buildClassPath(getClass().getClassLoader(),\n+                new String[] {\"classpath\"}, runtime.getClassPath());\n+          }\n+          for (String path : classpath)\n+          {\n+            logger.log(path);\n+          }\n         }\n \n-        private Collection<String> buildClassPath( ClassLoader loader, String[] pathKeys, String... classPaths )\n+        private Collection<String> buildClassPath(ClassLoader loader, String[] pathKeys, String... classPaths)\n         {\n-            Map<String, String> paths = new HashMap<>();\n-            assert pathKeys.length == classPaths.length;\n-            for ( int i = 0; i < classPaths.length; i++ )\n+          Map<String, String> paths = new HashMap<>();\n+          assert pathKeys.length == classPaths.length;\n+          for (int i = 0; i < classPaths.length; i++)\n+          {\n+            for (String path : classPaths[i].split(File.pathSeparator))\n             {\n-                for ( String path : classPaths[i].split( File.pathSeparator ) )\n-                {\n-                    paths.put( canonicalize( path ), pathValue( paths, pathKeys[i], path ) );\n-                }\n+              paths.put(canonicalize(path), pathValue(paths, pathKeys[i], path));\n             }\n-            for ( int level = 0; loader != null; level++ )\n+          }\n+          for (int level = 0; loader != null; level++)\n+          {\n+            if (loader instanceof URLClassLoader)\n             {\n-                if ( loader instanceof URLClassLoader )\n+              URLClassLoader urls = (URLClassLoader) loader;\n+              URL[] classLoaderUrls = urls.getURLs();\n+              if (classLoaderUrls != null)\n+              {\n+                for (URL url : classLoaderUrls)\n                 {\n-                    URLClassLoader urls = (URLClassLoader) loader;\n-                    URL[] classLoaderUrls = urls.getURLs();\n-                    if ( classLoaderUrls != null )\n-                    {\n-                        for ( URL url : classLoaderUrls )\n-                        {\n-                            if ( \"file\".equalsIgnoreCase( url.getProtocol() ) )\n-                            {\n-                                paths.put( url.toString(), pathValue( paths, \"loader.\" + level, url.getPath() ) );\n-                            }\n-                        }\n-                    }\n-                    else\n-                    {\n-                        paths.put( loader.toString(), \"<ClassLoader unexpectedly has null URL array>\" );\n-                    }\n+                  if (\"file\".equalsIgnoreCase(url.getProtocol()))\n+                  {\n+                    paths.put(url.toString(), pathValue(paths, \"loader.\" + level, url.getPath()));\n+                  }\n                 }\n-                loader = loader.getParent();\n-            }\n-            List<String> result = new ArrayList<>( paths.size() );\n-            for ( Map.Entry<String, String> path : paths.entrySet() )\n-            {\n-                result.add( \" [\" + path.getValue() + \"] \" + path.getKey() );\n+              } else\n+              {\n+                paths.put(loader.toString(), \"<ClassLoader unexpectedly has null URL array>\");\n+              }\n             }\n-            return result;\n+            loader = loader.getParent();\n+          }\n+          List<String> result = new ArrayList<>(paths.size());\n+          for (Map.Entry<String, String> path : paths.entrySet())\n+          {\n+            result.add(\" [\" + path.getValue() + \"] \" + path.getKey());\n+          }\n+          return result;\n         }\n \n-        private String pathValue( Map<String, String> paths, String key, String path )\n+        private String pathValue(Map<String, String> paths, String key, String path)\n         {\n-            String value;\n-            if ( null != ( value = paths.remove( canonicalize( path ) ) ) )\n-            {\n-                value += \" + \" + key;\n-            }\n-            else\n-            {\n-                value = key;\n-            }\n-            return value;\n+          String value;\n+          if (null != (value = paths.remove(canonicalize(path))))\n+          {\n+            value += \" + \" + key;\n+          } else\n+          {\n+            value = key;\n+          }\n+          return value;\n         }\n-    },\n-    LIBRARY_PATH( \"Library path:\" )\n-    {\n+      },\n+  LIBRARY_PATH(\"Library path:\")\n+      {\n         @Override\n-        void dump( Logger logger )\n+        void dump(Logger logger)\n         {\n-            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            for ( String path : runtime.getLibraryPath().split( File.pathSeparator ) )\n-            {\n-                logger.log( canonicalize( path ) );\n-            }\n+          RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+          for (String path : runtime.getLibraryPath().split(File.pathSeparator))\n+          {\n+            logger.log(canonicalize(path));\n+          }\n         }\n-    },\n-    SYSTEM_PROPERTIES( \"System.properties:\" )\n-    {\n+      },\n+  SYSTEM_PROPERTIES(\"System.properties:\")\n+      {\n         @Override\n-        void dump( Logger logger )\n+        void dump(Logger logger)\n         {\n-            for ( Object property : System.getProperties().keySet() )\n+          for (Object property : System.getProperties().keySet())\n+          {\n+            if (property instanceof String)\n             {\n-                if ( property instanceof String )\n-                {\n-                    String key = (String) property;\n-                    if ( key.startsWith( \"java.\" ) || key.startsWith( \"os.\" ) || key.endsWith( \".boot.class.path\" ) ||\n-                            key.equals( \"line.separator\" ) )\n-                    {\n-                        continue;\n-                    }\n-                    logger.log( key + \" = \" + System.getProperty( key ) );\n-                }\n+              String key = (String) property;\n+              if (key.startsWith(\"java.\") || key.startsWith(\"os.\") || key.endsWith(\".boot.class.path\") ||\n+                  key.equals(\"line.separator\"))\n+              {\n+                continue;\n+              }\n+              logger.log(key + \" = \" + System.getProperty(key));\n             }\n+          }\n         }\n-    },\n-    TIMEZONE_DATABASE( \"(IANA) TimeZone Database Version:\" )\n-    {\n+      },\n+  TIMEZONE_DATABASE(\"(IANA) TimeZone Database Version:\")\n+      {\n         @Override\n-        void dump( Logger logger )\n+        void dump(Logger logger)\n         {\n-            Map<String,Integer> versions = new HashMap<>();\n-            for ( String tz : ZoneRulesProvider.getAvailableZoneIds() )\n+          Map<String, Integer> versions = new HashMap<>();\n+          for (String tz : ZoneRulesProvider.getAvailableZoneIds())\n+          {\n+            for (String version : ZoneRulesProvider.getVersions(tz).keySet())\n             {\n-                for ( String version : ZoneRulesProvider.getVersions( tz ).keySet() )\n-                {\n-                    versions.compute( version, ( key, value ) -> value == null ? 1 : (value + 1) );\n-                }\n-            }\n-            String[] sorted = versions.keySet().toArray( new String[0] );\n-            Arrays.sort( sorted );\n-            for ( String tz : sorted )\n-            {\n-                logger.log( \"  TimeZone version: %s (available for %d zone identifiers)\", tz, versions.get( tz ) );\n+              versions.compute(version, (key, value) -> value == null ? 1 : (value + 1));\n             }\n+          }\n+          String[] sorted = versions.keySet().toArray(new String[0]);\n+          Arrays.sort(sorted);\n+          for (String tz : sorted)\n+          {\n+            logger.log(\"  TimeZone version: %s (available for %d zone identifiers)\", tz, versions.get(tz));\n+          }\n         }\n-    },\n-    LINUX_SCHEDULERS( \"Linux scheduler information:\" )\n-    {\n-        private final File SYS_BLOCK = new File( \"/sys/block\" );\n+      },\n+  LINUX_SCHEDULERS(\"Linux scheduler information:\")\n+      {\n+        private final File SYS_BLOCK = new File(\"/sys/block\");\n \n         @Override\n         boolean isApplicable()\n         {\n-            return SYS_BLOCK.isDirectory();\n+          return SYS_BLOCK.isDirectory();\n         }\n \n         @Override\n-        void dump( Logger logger )\n+        void dump(Logger logger)\n         {\n-            File[] files = SYS_BLOCK.listFiles( File::isDirectory );\n-            if ( files != null )\n+          File[] files = SYS_BLOCK.listFiles(File::isDirectory);\n+          if (files != null)\n+          {\n+            for (File subdir : files)\n             {\n-                for ( File subdir : files )\n+              File scheduler = new File(subdir, \"queue/scheduler\");\n+              if (scheduler.isFile())\n+              {\n+                try (Stream<String> lines = Files.lines(scheduler.toPath()))\n+                {\n+                  lines.forEach(logger::log);\n+                } catch (IOException e)\n                 {\n-                    File scheduler = new File( subdir, \"queue/scheduler\" );\n-                    if ( scheduler.isFile() )\n-                    {\n-                        try ( Stream<String> lines = Files.lines( scheduler.toPath() ) )\n-                        {\n-                            lines.forEach( logger::log );\n-                        }\n-                        catch ( IOException e )\n-                        {\n-                            // ignore\n-                        }\n-                    }\n+                  // ignore\n                 }\n+              }\n             }\n+          }\n         }\n-    },\n-    NETWORK( \"Network information:\" )\n-    {\n+      },\n+  NETWORK(\"Network information:\")\n+      {\n         @Override\n-        void dump( Logger logger )\n+        void dump(Logger logger)\n         {\n-            try\n-            {\n-                Enumeration<NetworkInterface> networkInterfaces = getNetworkInterfaces();\n+          try\n+          {\n+            Enumeration<NetworkInterface> networkInterfaces = getNetworkInterfaces();\n \n-                while ( networkInterfaces.hasMoreElements() )\n-                {\n-                    NetworkInterface iface = networkInterfaces.nextElement();\n-                    logger.log( String.format( \"Interface %s:\", iface.getDisplayName() ) );\n-\n-                    Enumeration<InetAddress> addresses = iface.getInetAddresses();\n-                    while ( addresses.hasMoreElements() )\n-                    {\n-                        InetAddress address = addresses.nextElement();\n-                        String hostAddress = address.getHostAddress();\n-                        logger.log( \"    address: %s\", hostAddress );\n-                    }\n-                }\n-            }\n-            catch ( SocketException e )\n+            while (networkInterfaces.hasMoreElements())\n             {\n-                logger.log( \"ERROR: failed to inspect network interfaces and addresses: \" + e.getMessage() );\n+              NetworkInterface iface = networkInterfaces.nextElement();\n+              logger.log(String.format(\"Interface %s:\", iface.getDisplayName()));\n+\n+              Enumeration<InetAddress> addresses = iface.getInetAddresses();\n+              while (addresses.hasMoreElements())\n+              {\n+                InetAddress address = addresses.nextElement();\n+                String hostAddress = address.getHostAddress();\n+                logger.log(\"    address: %s\", hostAddress);\n+              }\n             }\n+          } catch (SocketException e)\n+          {\n+            logger.log(\"ERROR: failed to inspect network interfaces and addresses: \" + e.getMessage());\n+          }\n         }\n-    },\n-    ;\n+      },\n+  ;\n \n-    private final String message;\n+  private final String message;\n \n-    SystemDiagnostics( String message )\n-    {\n-        this.message = message;\n-    }\n+  SystemDiagnostics(String message)\n+  {\n+    this.message = message;\n+  }\n \n-    static void registerWith( DiagnosticsManager manager )\n+  static void registerWith(DiagnosticsManager manager)\n+  {\n+    for (SystemDiagnostics provider : values())\n     {\n-        for ( SystemDiagnostics provider : values() )\n-        {\n-            if ( provider.isApplicable() )\n-            {\n-                manager.appendProvider( provider );\n-            }\n-        }\n+      if (provider.isApplicable())\n+      {\n+        manager.appendProvider(provider);\n+      }\n     }\n+  }\n \n-    boolean isApplicable()\n-    {\n-        return true;\n-    }\n+  boolean isApplicable()\n+  {\n+    return true;\n+  }\n \n-    @Override\n-    public String getDiagnosticsIdentifier()\n-    {\n-        return name();\n-    }\n+  @Override\n+  public String getDiagnosticsIdentifier()\n+  {\n+    return name();\n+  }\n \n-    @Override\n-    public void acceptDiagnosticsVisitor( Object visitor )\n-    {\n-        // nothing visits this\n-    }\n+  @Override\n+  public void acceptDiagnosticsVisitor(Object visitor)\n+  {\n+    // nothing visits this\n+  }\n \n-    @Override\n-    public void dump( DiagnosticsPhase phase, Logger logger )\n+  @Override\n+  public void dump(DiagnosticsPhase phase, Logger logger)\n+  {\n+    if (phase.isInitialization() || phase.isExplicitlyRequested())\n     {\n-        if ( phase.isInitialization() || phase.isExplicitlyRequested() )\n-        {\n-            logger.log( message );\n-            dump( logger );\n-        }\n+      logger.log(message);\n+      dump(logger);\n     }\n+  }\n \n-    abstract void dump( Logger logger );\n+  abstract void dump(Logger logger);\n \n-    private static String canonicalize( String path )\n+  private static String canonicalize(String path)\n+  {\n+    try\n     {\n-        try\n-        {\n-            return new File( path ).getCanonicalFile().getAbsolutePath();\n-        }\n-        catch ( IOException e )\n-        {\n-            return new File( path ).getAbsolutePath();\n-        }\n+      return new File(path).getCanonicalFile().getAbsolutePath();\n+    } catch (IOException e)\n+    {\n+      return new File(path).getAbsolutePath();\n     }\n+  }\n \n-    private static void logBytes( Logger logger, String message, long value )\n+  private static void logBytes(Logger logger, String message, long value)\n+  {\n+    if (value != OsBeanUtil.VALUE_UNAVAILABLE)\n     {\n-        if ( value != OsBeanUtil.VALUE_UNAVAILABLE )\n-        {\n-            logger.log( message + bytes( value ) );\n-        }\n+      logger.log(message + bytes(value));\n     }\n+  }\n \n-    private static void logLong( Logger logger, String message, long value )\n+  private static void logLong(Logger logger, String message, long value)\n+  {\n+    if (value != OsBeanUtil.VALUE_UNAVAILABLE)\n     {\n-        if ( value != OsBeanUtil.VALUE_UNAVAILABLE )\n-        {\n-            logger.log( message + value );\n-        }\n+      logger.log(message + value);\n     }\n+  }\n }\n",
            "diff_size": 325
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 283).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "227",
                    "column": "117",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2836/SystemDiagnostics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2836/SystemDiagnostics.java\nindex 0112be8c8bf..6da9ab6bf9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2836/SystemDiagnostics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2836/SystemDiagnostics.java\n@@ -83,10 +83,8 @@ enum SystemDiagnostics implements DiagnosticsProvider\n             {\n                 MemoryUsage usage = pool.getUsage();\n                 logger.log( String.format( \"Memory Pool: %s (%s): committed=%s, used=%s, max=%s, threshold=%s\",\n-                        pool.getName(), pool.getType(), usage == null ? \"?\" : bytes( usage.getCommitted() ),\n-                        usage == null ? \"?\" : bytes( usage.getUsed() ), usage == null ? \"?\" : bytes( usage.getMax() ),\n-                        pool.isUsageThresholdSupported() ? bytes( pool.getUsageThreshold() ) : \"?\" ) );\n-            }\n+                        pool.getName(), pool.getType(), usage == null ? \"?\" : bytes( usage.getCommitted() ), usage == null ? \"?\" : bytes( usage.getUsed() ), usage == null ? \"?\" : bytes( usage.getMax() ), pool.isUsageThresholdSupported() ? bytes( pool.getUsageThreshold() ) : \"?\" ) );\n+    }\n         }\n     },\n     OPERATING_SYSTEM( \"Operating system information:\" )\n@@ -96,9 +94,8 @@ enum SystemDiagnostics implements DiagnosticsProvider\n         {\n             OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n             RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            logger.log( String.format( \"Operating System: %s; version: %s; arch: %s; cpus: %s\", os.getName(),\n-                    os.getVersion(), os.getArch(), os.getAvailableProcessors() ) );\n-            logLong( logger, \"Max number of file descriptors: \", OsBeanUtil.getMaxFileDescriptors() );\n+            logger.log( String.format( \"Operating System: %s; version: %s; arch: %s; cpus: %s\", os.getName(), os.getVersion(), os.getArch(), os.getAvailableProcessors() ) );\n+logLong( logger, \"Max number of file descriptors: \", OsBeanUtil.getMaxFileDescriptors() );\n             logLong( logger, \"Number of open file descriptors: \", OsBeanUtil.getOpenFileDescriptors() );\n             logger.log( \"Process id: \" + runtime.getName() );\n             logger.log( \"Byte order: \" + ByteOrder.nativeOrder() );\n@@ -134,14 +131,12 @@ enum SystemDiagnostics implements DiagnosticsProvider\n             Collection<String> classpath;\n             if ( runtime.isBootClassPathSupported() )\n             {\n-                classpath = buildClassPath( getClass().getClassLoader(),\n-                        new String[] { \"bootstrap\", \"classpath\" },\n+                classpath = buildClassPath( getClass().getClassLoader(), new String[] { \"bootstrap\", \"classpath\" },\n                         runtime.getBootClassPath(), runtime.getClassPath() );\n             }\n             else\n             {\n-                classpath = buildClassPath( getClass().getClassLoader(),\n-                        new String[] { \"classpath\" }, runtime.getClassPath() );\n+                classpath = buildClassPath( getClass().getClassLoader(), new String[] { \"classpath\" }, runtime.getClassPath() );\n             }\n             for ( String path : classpath )\n             {\n@@ -151,7 +146,7 @@ enum SystemDiagnostics implements DiagnosticsProvider\n \n         private Collection<String> buildClassPath( ClassLoader loader, String[] pathKeys, String... classPaths )\n         {\n-            Map<String, String> paths = new HashMap<>();\n+            Map<String,String> paths = new HashMap<>();\n             assert pathKeys.length == classPaths.length;\n             for ( int i = 0; i < classPaths.length; i++ )\n             {\n@@ -184,14 +179,15 @@ enum SystemDiagnostics implements DiagnosticsProvider\n                 loader = loader.getParent();\n             }\n             List<String> result = new ArrayList<>( paths.size() );\n-            for ( Map.Entry<String, String> path : paths.entrySet() )\n+            for ( Map.Entry<String,String> path : paths.entrySet() )\n             {\n                 result.add( \" [\" + path.getValue() + \"] \" + path.getKey() );\n             }\n-            return result;\n+\n+return result;\n         }\n \n-        private String pathValue( Map<String, String> paths, String key, String path )\n+        private String pathValue( Map<String,String> paths, String key, String path )\n         {\n             String value;\n             if ( null != ( value = paths.remove( canonicalize( path ) ) ) )\n@@ -202,7 +198,8 @@ enum SystemDiagnostics implements DiagnosticsProvider\n             {\n                 value = key;\n             }\n-            return value;\n+\n+return value;\n         }\n     },\n     LIBRARY_PATH( \"Library path:\" )\n@@ -227,8 +224,7 @@ enum SystemDiagnostics implements DiagnosticsProvider\n                 if ( property instanceof String )\n                 {\n                     String key = (String) property;\n-                    if ( key.startsWith( \"java.\" ) || key.startsWith( \"os.\" ) || key.endsWith( \".boot.class.path\" ) ||\n-                            key.equals( \"line.separator\" ) )\n+                    if ( key.startsWith( \"java.\" ) || key.startsWith( \"os.\" ) || key.endsWith( \".boot.class.path\" ) ||key.equals( \"line.separator\" ) )\n                     {\n                         continue;\n                     }\n@@ -247,10 +243,11 @@ enum SystemDiagnostics implements DiagnosticsProvider\n             {\n                 for ( String version : ZoneRulesProvider.getVersions( tz ).keySet() )\n                 {\n-                    versions.compute( version, ( key, value ) -> value == null ? 1 : (value + 1) );\n+                    versions.compute( version, ( key, value ) -> value == null ? 1 : (value + 1 ) );\n                 }\n             }\n-            String[] sorted = versions.keySet().toArray( new String[0] );\n+\n+String[] sorted = versions.keySet().toArray( new String[0] );\n             Arrays.sort( sorted );\n             for ( String tz : sorted )\n             {\n@@ -397,4 +394,4 @@ enum SystemDiagnostics implements DiagnosticsProvider\n             logger.log( message + value );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "54",
                    "severity": "error",
                    "message": "'{' at column 54 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "55",
                    "column": "54",
                    "severity": "error",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "55",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "65",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "72",
                    "column": "67",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "column": "67",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 425).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "116",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "column": "76",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "143",
                    "column": "80",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "158",
                    "column": "88",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "158",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "176",
                    "column": "76",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "199",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "204",
                    "column": "79",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "210",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "214",
                    "column": "82",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "220",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "220",
                    "column": "120",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "220",
                    "column": "146",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "220",
                    "column": "183",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "229",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "234",
                    "column": "85",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "237",
                    "column": "89",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "240",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "246",
                    "column": "85",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "246",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "251",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "265",
                    "column": "92",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "265",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "271",
                    "column": "162",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "289",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "290",
                    "column": "95",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "290",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "295",
                    "column": "99",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "295",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "318",
                    "column": "94",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "348",
                    "column": "123",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "370",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "378",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2836/SystemDiagnostics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2836/SystemDiagnostics.java\nindex 0112be8c8bf..2b929a2ba73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2836/SystemDiagnostics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2836/SystemDiagnostics.java\n@@ -46,355 +46,341 @@ import java.util.List;\n import java.util.Map;\n import java.util.TimeZone;\n import java.util.stream.Stream;\n-\n import org.neo4j.io.os.OsBeanUtil;\n import org.neo4j.logging.Logger;\n-\n import static java.net.NetworkInterface.getNetworkInterfaces;\n+\n import static org.neo4j.helpers.Format.bytes;\n \n-enum SystemDiagnostics implements DiagnosticsProvider\n-{\n-    SYSTEM_MEMORY( \"System memory information:\" )\n-    {\n-        @Override\n-        void dump( Logger logger )\n-        {\n-            logBytes( logger, \"Total Physical memory: \", OsBeanUtil.getTotalPhysicalMemory() );\n-            logBytes( logger, \"Free Physical memory: \", OsBeanUtil.getFreePhysicalMemory() );\n-            logBytes( logger, \"Committed virtual memory: \", OsBeanUtil.getCommittedVirtualMemory() );\n-            logBytes( logger, \"Total swap space: \", OsBeanUtil.getTotalSwapSpace() );\n-            logBytes( logger, \"Free swap space: \", OsBeanUtil.getFreeSwapSpace() );\n-        }\n-    },\n-    JAVA_MEMORY( \"JVM memory information:\" )\n-    {\n-        @Override\n-        void dump( Logger logger )\n-        {\n-            logger.log( \"Free  memory: \" + bytes( Runtime.getRuntime().freeMemory() ) );\n-            logger.log( \"Total memory: \" + bytes( Runtime.getRuntime().totalMemory() ) );\n-            logger.log( \"Max   memory: \" + bytes( Runtime.getRuntime().maxMemory() ) );\n-            for ( GarbageCollectorMXBean gc : ManagementFactory.getGarbageCollectorMXBeans() )\n-            {\n-                logger.log( \"Garbage Collector: \" + gc.getName() + \": \" + Arrays.toString( gc.getMemoryPoolNames() ) );\n-            }\n-            for ( MemoryPoolMXBean pool : ManagementFactory.getMemoryPoolMXBeans() )\n-            {\n-                MemoryUsage usage = pool.getUsage();\n-                logger.log( String.format( \"Memory Pool: %s (%s): committed=%s, used=%s, max=%s, threshold=%s\",\n-                        pool.getName(), pool.getType(), usage == null ? \"?\" : bytes( usage.getCommitted() ),\n-                        usage == null ? \"?\" : bytes( usage.getUsed() ), usage == null ? \"?\" : bytes( usage.getMax() ),\n-                        pool.isUsageThresholdSupported() ? bytes( pool.getUsageThreshold() ) : \"?\" ) );\n-            }\n-        }\n-    },\n-    OPERATING_SYSTEM( \"Operating system information:\" )\n-    {\n-        @Override\n-        void dump( Logger logger )\n-        {\n-            OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n-            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            logger.log( String.format( \"Operating System: %s; version: %s; arch: %s; cpus: %s\", os.getName(),\n-                    os.getVersion(), os.getArch(), os.getAvailableProcessors() ) );\n-            logLong( logger, \"Max number of file descriptors: \", OsBeanUtil.getMaxFileDescriptors() );\n-            logLong( logger, \"Number of open file descriptors: \", OsBeanUtil.getOpenFileDescriptors() );\n-            logger.log( \"Process id: \" + runtime.getName() );\n-            logger.log( \"Byte order: \" + ByteOrder.nativeOrder() );\n-            logger.log( \"Local timezone: \" + getLocalTimeZone() );\n-        }\n+enum SystemDiagnostics implements DiagnosticsProvider{ SYSTEM_MEMORY( \"System memory information:\")\n+                                                       {\n+                                                           @Override void dump( Logger logger )\n+                                                           {\n+                                                               logBytes( logger, \"Total Physical memory: \", OsBeanUtil.getTotalPhysicalMemory() );\n+                                                               logBytes( logger, \"Free Physical memory: \", OsBeanUtil.getFreePhysicalMemory() );\n+                                                               logBytes( logger, \"Committed virtual memory: \", OsBeanUtil.getCommittedVirtualMemory() );\n+                                                               logBytes( logger, \"Total swap space: \", OsBeanUtil.getTotalSwapSpace() );\n+                                                               logBytes( logger, \"Free swap space: \", OsBeanUtil.getFreeSwapSpace() );\n+                                                           }\n+                                                       }, JAVA_MEMORY( \"JVM memory information:\")\n+                                                          {\n+                                                              @Override void dump( Logger logger )\n+                                                              {\n+                                                                  logger.log( \"Free  memory: \" + bytes( Runtime.getRuntime().freeMemory() ) );\n+                                                                  logger.log( \"Total memory: \" + bytes( Runtime.getRuntime().totalMemory() ) );\n+                                                                  logger.log( \"Max   memory: \" + bytes( Runtime.getRuntime().maxMemory() ) );\n+                                                                  for( GarbageCollectorMXBean gc : ManagementFactory.getGarbageCollectorMXBeans()\n+                                                                  )\n+                                                                  {\n+                                                                      logger.log( \"Garbage Collector: \" + gc.getName() + \": \" + Arrays.toString( gc.getMemoryPoolNames() ) );\n+                                                                  }\n \n-        private String getLocalTimeZone()\n-        {\n-            TimeZone tz = Calendar.getInstance().getTimeZone();\n-            return tz.getID();\n-        }\n-    },\n-    JAVA_VIRTUAL_MACHINE( \"JVM information:\" )\n-    {\n-        @Override\n-        void dump( Logger logger )\n-        {\n-            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            logger.log( \"VM Name: \" + runtime.getVmName() );\n-            logger.log( \"VM Vendor: \" + runtime.getVmVendor() );\n-            logger.log( \"VM Version: \" + runtime.getVmVersion() );\n-            CompilationMXBean compiler = ManagementFactory.getCompilationMXBean();\n-            logger.log( \"JIT compiler: \" + ( ( compiler == null ) ? \"unknown\" : compiler.getName() ) );\n-            logger.log( \"VM Arguments: \" + runtime.getInputArguments() );\n-        }\n-    },\n-    CLASSPATH( \"Java classpath:\" )\n-    {\n-        @Override\n-        void dump( Logger logger )\n-        {\n-            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            Collection<String> classpath;\n-            if ( runtime.isBootClassPathSupported() )\n-            {\n-                classpath = buildClassPath( getClass().getClassLoader(),\n-                        new String[] { \"bootstrap\", \"classpath\" },\n-                        runtime.getBootClassPath(), runtime.getClassPath() );\n-            }\n-            else\n-            {\n-                classpath = buildClassPath( getClass().getClassLoader(),\n-                        new String[] { \"classpath\" }, runtime.getClassPath() );\n-            }\n-            for ( String path : classpath )\n-            {\n-                logger.log( path );\n-            }\n-        }\n+                                                                  for( MemoryPoolMXBean pool : ManagementFactory.getMemoryPoolMXBeans()\n+                                                                  )\n+                                                                  {\n+                                                                      MemoryUsage usage = pool.getUsage();\n+                                                                      logger.log( String.format( \"Memory Pool: %s (%s): committed=%s, used=%s, max=%s, threshold=%s\", pool.getName(), pool.getType(), usage == null ? \"?\" : bytes( usage.getCommitted() ), usage == null ? \"?\" : bytes( usage.getUsed() ), usage == null ? \"?\" : bytes( usage.getMax() ), pool.isUsageThresholdSupported() ? bytes( pool.getUsageThreshold() ) : \"?\" ) );\n+                                                                  }\n+                                                              }\n+                                                          }, OPERATING_SYSTEM( \"Operating system information:\")\n+                                                             {\n+                                                                 @Override void dump( Logger logger )\n+                                                                 {\n+                                                                     OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n+                                                                     RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+                                                                     logger.log( String.format( \"Operating System: %s; version: %s; arch: %s; cpus: %s\", os.getName(), os.getVersion(), os.getArch(), os.getAvailableProcessors() ) );\n+                                                                     logLong( logger, \"Max number of file descriptors: \", OsBeanUtil.getMaxFileDescriptors() );\n+                                                                     logLong( logger, \"Number of open file descriptors: \", OsBeanUtil.getOpenFileDescriptors() );\n+                                                                     logger.log( \"Process id: \" + runtime.getName() );\n+                                                                     logger.log( \"Byte order: \" + ByteOrder.nativeOrder() );\n+                                                                     logger.log( \"Local timezone: \" + getLocalTimeZone() );\n+                                                                 }\n \n-        private Collection<String> buildClassPath( ClassLoader loader, String[] pathKeys, String... classPaths )\n-        {\n-            Map<String, String> paths = new HashMap<>();\n-            assert pathKeys.length == classPaths.length;\n-            for ( int i = 0; i < classPaths.length; i++ )\n-            {\n-                for ( String path : classPaths[i].split( File.pathSeparator ) )\n-                {\n-                    paths.put( canonicalize( path ), pathValue( paths, pathKeys[i], path ) );\n-                }\n-            }\n-            for ( int level = 0; loader != null; level++ )\n-            {\n-                if ( loader instanceof URLClassLoader )\n-                {\n-                    URLClassLoader urls = (URLClassLoader) loader;\n-                    URL[] classLoaderUrls = urls.getURLs();\n-                    if ( classLoaderUrls != null )\n-                    {\n-                        for ( URL url : classLoaderUrls )\n-                        {\n-                            if ( \"file\".equalsIgnoreCase( url.getProtocol() ) )\n-                            {\n-                                paths.put( url.toString(), pathValue( paths, \"loader.\" + level, url.getPath() ) );\n-                            }\n-                        }\n-                    }\n-                    else\n-                    {\n-                        paths.put( loader.toString(), \"<ClassLoader unexpectedly has null URL array>\" );\n-                    }\n-                }\n-                loader = loader.getParent();\n-            }\n-            List<String> result = new ArrayList<>( paths.size() );\n-            for ( Map.Entry<String, String> path : paths.entrySet() )\n-            {\n-                result.add( \" [\" + path.getValue() + \"] \" + path.getKey() );\n-            }\n-            return result;\n-        }\n+                                                                 private String getLocalTimeZone()\n+                                                                 {\n+                                                                     TimeZone tz = Calendar.getInstance().getTimeZone();\n+                                                                     return tz.getID();\n+                                                                 }\n+                                                             }, JAVA_VIRTUAL_MACHINE( \"JVM information:\")\n+                                                                {\n+                                                                    @Override void dump( Logger logger )\n+                                                                    {\n+                                                                        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+                                                                        logger.log( \"VM Name: \" + runtime.getVmName() );\n+                                                                        logger.log( \"VM Vendor: \" + runtime.getVmVendor() );\n+                                                                        logger.log( \"VM Version: \" + runtime.getVmVersion() );\n+                                                                        CompilationMXBean compiler = ManagementFactory.getCompilationMXBean();\n+                                                                        logger.log( \"JIT compiler: \" + (( compiler == null) ? \"unknown\" : compiler.getName()) );\n+                                                                        logger.log( \"VM Arguments: \" + runtime.getInputArguments() );\n+                                                                    }\n+                                                                }, CLASSPATH( \"Java classpath:\")\n+                                                                   {\n+                                                                       @Override void dump( Logger logger )\n+                                                                       {\n+                                                                           RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+                                                                           Collection<String> classpath;\n+                                                                           if ( runtime.isBootClassPathSupported() )\n+                                                                           {\n+                                                                               classpath = buildClassPath( getClass().getClassLoader(), new String[] { \"bootstrap\", \"classpath\" }, runtime.getBootClassPath(), runtime.getClassPath() );\n+                                                                           }\n+                                                                           else\n+                                                                           {\n+                                                                               classpath = buildClassPath( getClass().getClassLoader(), new String[]{\"classpath\"}, runtime.getClassPath() );\n+                                                                           }\n \n-        private String pathValue( Map<String, String> paths, String key, String path )\n-        {\n-            String value;\n-            if ( null != ( value = paths.remove( canonicalize( path ) ) ) )\n-            {\n-                value += \" + \" + key;\n-            }\n-            else\n-            {\n-                value = key;\n-            }\n-            return value;\n-        }\n-    },\n-    LIBRARY_PATH( \"Library path:\" )\n-    {\n-        @Override\n-        void dump( Logger logger )\n-        {\n-            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            for ( String path : runtime.getLibraryPath().split( File.pathSeparator ) )\n-            {\n-                logger.log( canonicalize( path ) );\n-            }\n-        }\n-    },\n-    SYSTEM_PROPERTIES( \"System.properties:\" )\n-    {\n-        @Override\n-        void dump( Logger logger )\n-        {\n-            for ( Object property : System.getProperties().keySet() )\n-            {\n-                if ( property instanceof String )\n-                {\n-                    String key = (String) property;\n-                    if ( key.startsWith( \"java.\" ) || key.startsWith( \"os.\" ) || key.endsWith( \".boot.class.path\" ) ||\n-                            key.equals( \"line.separator\" ) )\n-                    {\n-                        continue;\n-                    }\n-                    logger.log( key + \" = \" + System.getProperty( key ) );\n-                }\n-            }\n-        }\n-    },\n-    TIMEZONE_DATABASE( \"(IANA) TimeZone Database Version:\" )\n-    {\n-        @Override\n-        void dump( Logger logger )\n-        {\n-            Map<String,Integer> versions = new HashMap<>();\n-            for ( String tz : ZoneRulesProvider.getAvailableZoneIds() )\n-            {\n-                for ( String version : ZoneRulesProvider.getVersions( tz ).keySet() )\n-                {\n-                    versions.compute( version, ( key, value ) -> value == null ? 1 : (value + 1) );\n-                }\n-            }\n-            String[] sorted = versions.keySet().toArray( new String[0] );\n-            Arrays.sort( sorted );\n-            for ( String tz : sorted )\n-            {\n-                logger.log( \"  TimeZone version: %s (available for %d zone identifiers)\", tz, versions.get( tz ) );\n-            }\n-        }\n-    },\n-    LINUX_SCHEDULERS( \"Linux scheduler information:\" )\n-    {\n-        private final File SYS_BLOCK = new File( \"/sys/block\" );\n+                                                                           for( String path : classpath)\n+                                                                           {\n+                                                                               logger.log( path );\n+                                                                           }\n+                                                                       }\n \n-        @Override\n-        boolean isApplicable()\n-        {\n-            return SYS_BLOCK.isDirectory();\n-        }\n+                                                                       private Collection<String> buildClassPath( ClassLoader loader, String[] pathKeys, String... classPaths )\n+                                                                       {\n+                                                                           Map<String,String> paths = new HashMap<>();\n+                                                                           assert pathKeys.length == classPaths.length;\n+                                                                           for ( int i = 0; i < classPaths.length; i++ )\n+                                                                           {\n+                                                                               for( String path : classPaths[ i].split( File.pathSeparator )\n+                                                                               )\n+                                                                               {\n+                                                                                   paths.put( canonicalize( path ), pathValue( paths, pathKeys[ i], path ) );\n+                                                                               }\n+                                                                           }\n \n-        @Override\n-        void dump( Logger logger )\n-        {\n-            File[] files = SYS_BLOCK.listFiles( File::isDirectory );\n-            if ( files != null )\n-            {\n-                for ( File subdir : files )\n-                {\n-                    File scheduler = new File( subdir, \"queue/scheduler\" );\n-                    if ( scheduler.isFile() )\n-                    {\n-                        try ( Stream<String> lines = Files.lines( scheduler.toPath() ) )\n-                        {\n-                            lines.forEach( logger::log );\n-                        }\n-                        catch ( IOException e )\n-                        {\n-                            // ignore\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    },\n-    NETWORK( \"Network information:\" )\n-    {\n-        @Override\n-        void dump( Logger logger )\n-        {\n-            try\n-            {\n-                Enumeration<NetworkInterface> networkInterfaces = getNetworkInterfaces();\n+                                                                           for ( int level = 0; loader != null; level++ )\n+                                                                           {\n+                                                                               if ( loader instanceof URLClassLoader )\n+                                                                               {\n+                                                                                   URLClassLoader urls = (URLClassLoader) loader;\n+                                                                                   URL[] classLoaderUrls = urls.getURLs();\n+                                                                                   if ( classLoaderUrls != null )\n+                                                                                   {\n+                                                                                       for( URL url : classLoaderUrls)\n+                                                                                       {\n+                                                                                           if ( \"file\".equalsIgnoreCase( url.getProtocol() ) )\n+                                                                                           {\n+                                                                                               paths.put( url.toString(), pathValue( paths, \"loader.\" + level, url.getPath() ) );\n+                                                                                           }\n+                                                                                       }\n+                                                                                   }\n+                                                                                   else\n+                                                                                   {\n+                                                                                       paths.put( loader.toString(), \"<ClassLoader unexpectedly has null URL array>\" );\n+                                                                                   }\n+                                                                               }\n+\n+                                                                               loader = loader.getParent();\n+                                                                           }\n \n-                while ( networkInterfaces.hasMoreElements() )\n-                {\n-                    NetworkInterface iface = networkInterfaces.nextElement();\n-                    logger.log( String.format( \"Interface %s:\", iface.getDisplayName() ) );\n+                                                                           List<String> result = new ArrayList<>( paths.size() );\n+                                                                           for( Map.Entry<String,String> path : paths.entrySet()\n+                                                                           )\n+                                                                           {\n+                                                                               result.add( \" [\" + path.getValue() + \"] \" + path.getKey() );\n+                                                                           }\n \n-                    Enumeration<InetAddress> addresses = iface.getInetAddresses();\n-                    while ( addresses.hasMoreElements() )\n-                    {\n-                        InetAddress address = addresses.nextElement();\n-                        String hostAddress = address.getHostAddress();\n-                        logger.log( \"    address: %s\", hostAddress );\n-                    }\n-                }\n-            }\n-            catch ( SocketException e )\n-            {\n-                logger.log( \"ERROR: failed to inspect network interfaces and addresses: \" + e.getMessage() );\n-            }\n-        }\n-    },\n-    ;\n+                                                                           return result;\n+                                                                       }\n \n-    private final String message;\n+                                                                       private String pathValue( Map<String,String> paths, String key, String path )\n+                                                                       {\n+                                                                           String value;\n+                                                                           if ( null != ( value = paths.remove( canonicalize( path ) )) )\n+                                                                           {\n+                                                                               value += \" + \" + key;\n+                                                                           }\n+                                                                           else\n+                                                                           {\n+                                                                               value = key;\n+                                                                           }\n \n-    SystemDiagnostics( String message )\n-    {\n-        this.message = message;\n-    }\n+                                                                           return value;\n+                                                                       }\n+                                                                   }, LIBRARY_PATH( \"Library path:\")\n+                                                                      {\n+                                                                          @Override void dump( Logger logger )\n+                                                                          {\n+                                                                              RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+                                                                              for( String path : runtime.getLibraryPath().split( File.pathSeparator )\n+                                                                              )\n+                                                                              {\n+                                                                                  logger.log( canonicalize( path ) );\n+                                                                              }\n+                                                                          }\n+                                                                      }, SYSTEM_PROPERTIES( \"System.properties:\")\n+                                                                         {\n+                                                                             @Override void dump( Logger logger )\n+                                                                             {\n+                                                                                 for( Object property : System.getProperties().keySet()\n+                                                                                 )\n+                                                                                 {\n+                                                                                     if ( property instanceof String )\n+                                                                                     {\n+                                                                                         String key = (String) property;\n+                                                                                         if ( key.startsWith( \"java.\" )|| key.startsWith( \"os.\" )|| key.endsWith( \".boot.class.path\" )|| key.equals( \"line.separator\" ) )\n+                                                                                         {\n+                                                                                             continue;\n+                                                                                         }\n \n-    static void registerWith( DiagnosticsManager manager )\n-    {\n-        for ( SystemDiagnostics provider : values() )\n-        {\n-            if ( provider.isApplicable() )\n-            {\n-                manager.appendProvider( provider );\n-            }\n-        }\n-    }\n+                                                                                         logger.log( key + \" = \" + System.getProperty( key ) );\n+                                                                                     }\n+                                                                                 }\n+                                                                             }\n+                                                                         }, TIMEZONE_DATABASE( \"(IANA) TimeZone Database Version:\")\n+                                                                            {\n+                                                                                @Override void dump( Logger logger )\n+                                                                                {\n+                                                                                    Map<String,Integer> versions = new HashMap<>();\n+                                                                                    for( String tz : ZoneRulesProvider.getAvailableZoneIds()\n+                                                                                    )\n+                                                                                    {\n+                                                                                        for( String version : ZoneRulesProvider.getVersions( tz ).keySet()\n+                                                                                        )\n+                                                                                        {\n+                                                                                            versions.compute( version, ( key, value ) -> value == null ? 1 : ( value + 1) );\n+                                                                                        }\n+                                                                                    }\n \n-    boolean isApplicable()\n-    {\n-        return true;\n-    }\n+                                                                                    String[] sorted = versions.keySet().toArray( new String[0] );\n+                                                                                    Arrays.sort( sorted );\n+                                                                                    for( String tz : sorted)\n+                                                                                    {\n+                                                                                        logger.log( \"  TimeZone version: %s (available for %d zone identifiers)\", tz, versions.get( tz ) );\n+                                                                                    }\n+                                                                                }\n+                                                                            }, LINUX_SCHEDULERS( \"Linux scheduler information:\")\n+                                                                               {\n+                                                                                   private final File SYS_BLOCK = new File( \"/sys/block\" );\n+                                                                                   @Override\n+                                                                                   boolean isApplicable()\n+                                                                                   {\n+                                                                                       return SYS_BLOCK.isDirectory();\n+                                                                                   }\n \n-    @Override\n-    public String getDiagnosticsIdentifier()\n-    {\n-        return name();\n-    }\n+                                                                                   @Override void dump( Logger logger )\n+                                                                                   {\n+                                                                                       File[] files = SYS_BLOCK.listFiles( File::isDirectory );\n+                                                                                       if ( files != null )\n+                                                                                       {\n+                                                                                           for( File subdir : files)\n+                                                                                           {\n+                                                                                               File scheduler = new File( subdir, \"queue/scheduler\" );\n+                                                                                               if ( scheduler.isFile() )\n+                                                                                               {\n+                                                                                                   try\n+                                                                                                       ( Stream<String> lines = Files.lines( scheduler.toPath() ))\n+                                                                                                   {\n+                                                                                                       lines.forEach( logger::log );\n+                                                                                                   }\n+                                                                                                       catch ( IOException e )\n+                                                                                                       {\n+                            // ignore\n+                                                                                                       }\n+                                                                                               }\n+                                                                                           }\n+                                                                                       }\n+                                                                                   }\n+                                                                               }, NETWORK( \"Network information:\")\n+                                                                                  {\n+                                                                                      @Override void dump( Logger logger )\n+                                                                                      {\n+                                                                                          try\n+                                                                                          {\n+                                                                                              Enumeration<NetworkInterface> networkInterfaces = getNetworkInterfaces();\n+                                                                                              while( networkInterfaces.hasMoreElements())\n+                                                                                              {\n+                                                                                                  NetworkInterface iface = networkInterfaces.nextElement();\n+                                                                                                  logger.log( String.format( \"Interface %s:\", iface.getDisplayName() ) );\n+                                                                                                  Enumeration<InetAddress> addresses = iface.getInetAddresses();\n+                                                                                                  while( addresses.hasMoreElements())\n+                                                                                                  {\n+                                                                                                      InetAddress address = addresses.nextElement();\n+                                                                                                      String hostAddress = address.getHostAddress();\n+                                                                                                      logger.log( \"    address: %s\", hostAddress );\n+                                                                                                  }\n+                                                                                              }\n+                                                                                          }\n+                                                                                          catch ( SocketException e )\n+                                                                                          {\n+                                                                                              logger.log( \"ERROR: failed to inspect network interfaces and addresses: \" + e.getMessage() );\n+                                                                                          }\n+                                                                                      }\n+                                                                                  }, ;\n+                                                                                         private final String message;\n \n-    @Override\n-    public void acceptDiagnosticsVisitor( Object visitor )\n-    {\n+                                                                                         SystemDiagnostics( String message )\n+                                                                                         {\n+                                                                                             this.message = message;\n+                                                                                         }\n+\n+                                                                                         static void registerWith( DiagnosticsManager manager )\n+                                                                                         {\n+                                                                                             for( SystemDiagnostics provider : values()\n+                                                                                             )\n+                                                                                             {\n+                                                                                                 if ( provider.isApplicable() )\n+                                                                                                 {\n+                                                                                                     manager.appendProvider( provider );\n+                                                                                                 }\n+                                                                                             }\n+                                                                                         }\n+\n+                                                                                         boolean isApplicable()\n+                                                                                         {\n+                                                                                             return true;\n+                                                                                         }\n+\n+                                                                                         @Override\n+                                                                                         public String getDiagnosticsIdentifier()\n+                                                                                         {\n+                                                                                             return name();\n+                                                                                         }\n+\n+                                                                                         @Override\n+                                                                                         public void acceptDiagnosticsVisitor( Object visitor )\n+                                                                                         {\n         // nothing visits this\n-    }\n+                                                                                         }\n+\n+                                                                                         @Override\n+                                                                                         public void dump( DiagnosticsPhase phase, Logger logger )\n+                                                                                         {\n+                                                                                             if ( phase.isInitialization()|| phase.isExplicitlyRequested() )\n+                                                                                             {\n+                                                                                                 logger.log( message );\n+                                                                                                 dump( logger );\n+                                                                                             }\n+                                                                                         }\n \n-    @Override\n-    public void dump( DiagnosticsPhase phase, Logger logger )\n-    {\n-        if ( phase.isInitialization() || phase.isExplicitlyRequested() )\n-        {\n-            logger.log( message );\n-            dump( logger );\n-        }\n-    }\n+                                                                                         abstract void dump( Logger logger )\n+                                                                                         ;\n \n-    abstract void dump( Logger logger );\n+                                                                                         private static String canonicalize( String path )\n+                                                                                         {\n+                                                                                             try\n+                                                                                             {\n+                                                                                                 return new File( path ).getCanonicalFile().getAbsolutePath();\n+                                                                                             }\n+                                                                                             catch ( IOException e )\n+                                                                                             {\n+                                                                                                 return new File( path ).getAbsolutePath();\n+                                                                                             }\n+                                                                                         }\n \n-    private static String canonicalize( String path )\n-    {\n-        try\n-        {\n-            return new File( path ).getCanonicalFile().getAbsolutePath();\n-        }\n-        catch ( IOException e )\n-        {\n-            return new File( path ).getAbsolutePath();\n-        }\n-    }\n+                                                                                         private static void logBytes( Logger logger, String message, long value )\n+                                                                                         {\n+                                                                                             if ( value != OsBeanUtil.VALUE_UNAVAILABLE )\n+                                                                                             {\n+                                                                                                 logger.log( message + bytes( value ) );\n+                                                                                             }\n+                                                                                         }\n \n-    private static void logBytes( Logger logger, String message, long value )\n-    {\n-        if ( value != OsBeanUtil.VALUE_UNAVAILABLE )\n-        {\n-            logger.log( message + bytes( value ) );\n-        }\n-    }\n+                                                                                         private static void logLong( Logger logger, String message, long value )\n+                                                                                         {\n+                                                                                             if ( value != OsBeanUtil.VALUE_UNAVAILABLE )\n+                                                                                             {\n+                                                                                                 logger.log( message + value );\n+                                                                                             }\n+                                                                                         }\n \n-    private static void logLong( Logger logger, String message, long value )\n-    {\n-        if ( value != OsBeanUtil.VALUE_UNAVAILABLE )\n-        {\n-            logger.log( message + value );\n-        }\n-    }\n-}\n+                                                     }\n\\ No newline at end of file\n",
            "diff_size": 483
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}