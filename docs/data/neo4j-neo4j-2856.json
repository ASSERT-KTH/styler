{
    "project_name": "neo4j-neo4j",
    "error_id": "2856",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "82",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2856/SystemGraphRealmHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2856/SystemGraphRealmHelper.java\nindex 4a2e6d80155..de74c802a64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2856/SystemGraphRealmHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2856/SystemGraphRealmHelper.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.security.systemgraph;\n \n import java.util.function.Supplier;\n@@ -51,53 +52,52 @@ public class SystemGraphRealmHelper\n     public static final String IS_SUSPENDED = \"is_suspended\";\n     public static final String DEFAULT_DATABASE = \"default_database\";\n \n-    public SystemGraphRealmHelper( Supplier<GraphDatabaseService> systemSupplier, SecureHasher secureHasher )\n+    public SystemGraphRealmHelper(Supplier<GraphDatabaseService> systemSupplier, SecureHasher secureHasher)\n     {\n         this.systemSupplier = systemSupplier;\n         this.secureHasher = secureHasher;\n     }\n \n-    public User getUser( String username ) throws InvalidArgumentsException, FormatException\n+    public User getUser(String username) throws InvalidArgumentsException, FormatException\n     {\n-        try ( Transaction tx = getSystemDb().beginTx() )\n+        try (Transaction tx = getSystemDb().beginTx())\n         {\n-            Node userNode = tx.findNode( Label.label( \"User\" ), \"name\", username );\n+            Node userNode = tx.findNode(Label.label(\"User\"), \"name\", username);\n \n-            if ( userNode == null )\n+            if (userNode == null)\n             {\n-                throw new InvalidArgumentsException( \"User '\" + username + \"' does not exist.\" );\n+                throw new InvalidArgumentsException(\"User '\" + username + \"' does not exist.\");\n             }\n \n-            Credential credential = SystemGraphCredential.deserialize( (String) userNode.getProperty( \"credentials\" ), secureHasher );\n-            boolean requirePasswordChange = (boolean) userNode.getProperty( \"passwordChangeRequired\" );\n-            boolean suspended = (boolean) userNode.getProperty( \"suspended\" );\n-            String defaultDatabase = (String) userNode.getProperty( \"defaultDatabase\", null );\n+            Credential credential = SystemGraphCredential.deserialize((String) userNode.getProperty(\"credentials\"), secureHasher);\n+            boolean requirePasswordChange = (boolean) userNode.getProperty(\"passwordChangeRequired\");\n+            boolean suspended = (boolean) userNode.getProperty(\"suspended\");\n+            String defaultDatabase = (String) userNode.getProperty(\"defaultDatabase\", null);\n             tx.commit();\n \n-            User.Builder builder = new User.Builder( username, credential ).withRequiredPasswordChange( requirePasswordChange );\n-            builder = suspended ? builder.withFlag( IS_SUSPENDED ) : builder.withoutFlag( IS_SUSPENDED );\n-            builder = builder.withDefaultDatabase( defaultDatabase );\n+            User.Builder builder = new User.Builder(username, credential).withRequiredPasswordChange(requirePasswordChange);\n+            builder = suspended ? builder.withFlag(IS_SUSPENDED) : builder.withoutFlag(IS_SUSPENDED);\n+            builder = builder.withDefaultDatabase(defaultDatabase);\n             return builder.build();\n-        }\n-        catch ( NotFoundException n )\n+        } catch (NotFoundException n)\n         {\n             // Can occur if the user was dropped by another thread after the null check.\n-            throw new InvalidArgumentsException( \"User '\" + username + \"' does not exist.\" );\n+            throw new InvalidArgumentsException(\"User '\" + username + \"' does not exist.\");\n         }\n     }\n \n     public GraphDatabaseService getSystemDb()\n     {\n-        if ( systemDb == null )\n+        if (systemDb == null)\n         {\n             systemDb = systemSupplier.get();\n         }\n         return systemDb;\n     }\n \n-    public static Supplier<GraphDatabaseService> makeSystemSupplier( DatabaseManager<?> databaseManager )\n+    public static Supplier<GraphDatabaseService> makeSystemSupplier(DatabaseManager<?> databaseManager)\n     {\n-        return () -> databaseManager.getDatabaseContext( NAMED_SYSTEM_DATABASE_ID ).orElseThrow(\n-                () -> new AuthProviderFailedException( \"No database called `\" + SYSTEM_DATABASE_NAME + \"` was found.\" ) ).databaseFacade();\n+        return () -> databaseManager.getDatabaseContext(NAMED_SYSTEM_DATABASE_ID).orElseThrow(\n+          () -> new AuthProviderFailedException(\"No database called `\" + SYSTEM_DATABASE_NAME + \"` was found.\")).databaseFacade();\n     }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}