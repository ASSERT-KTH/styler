{
    "project_name": "wso2-attic-commons",
    "error_id": "87",
    "information": {
        "errors": [
            {
                "line": "53",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 166).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private static final String DEFAULT_HIBERNATE_DIALECT = \"org.hibernate.dialect.DerbyDialect\";\n\n    private static final HashMap<String, DialectFactory.VersionInsensitiveMapper> HIBERNATE_DIALECTS = new HashMap<String, DialectFactory.VersionInsensitiveMapper>();\n\n    private static final String _guid = new GUID().toString();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/87/DbConfStoreConnectionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/87/DbConfStoreConnectionFactory.java\nindex 6f921bc06ff..77f1e9d67fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/87/DbConfStoreConnectionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/87/DbConfStoreConnectionFactory.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.store.hib;\n \n import org.apache.commons.logging.Log;\n@@ -44,140 +45,142 @@ import java.util.Properties;\n import java.util.concurrent.ConcurrentHashMap;\n \n public class DbConfStoreConnectionFactory implements ConfStoreConnectionFactory {\n-    private static final Log __log = LogFactory.getLog(DbConfStoreConnectionFactory.class);\n-\n-    private static final Messages __msgs = MessageBundle.getMessages(Messages.class);\n-\n-    private static final String DEFAULT_HIBERNATE_DIALECT = \"org.hibernate.dialect.DerbyDialect\";\n-\n-    private static final HashMap<String, DialectFactory.VersionInsensitiveMapper> HIBERNATE_DIALECTS = new HashMap<String, DialectFactory.VersionInsensitiveMapper>();\n-\n-    private static final String _guid = new GUID().toString();\n-\n-    private static final Map<String, DataSource> _dataSources = new ConcurrentHashMap<String, DataSource>();\n-\n-    static {\n-        // Hibernate has a nice table that resolves the dialect from the database\n-        // product name,\n-        // but doesn't include all the drivers. So this is supplementary, and some\n-        // day in the\n-        // future they'll add more drivers and we can get rid of this.\n-        // Drivers already recognized by Hibernate:\n-        // HSQL Database Engine\n-        // DB2/NT\n-        // MySQL\n-        // PostgreSQL\n-        // Microsoft SQL Server Database, Microsoft SQL Server\n-        // Sybase SQL Server\n-        // Informix Dynamic Server\n-        // Oracle 8 and Oracle >8\n-        HIBERNATE_DIALECTS.put(\"Apache Derby\", new DialectFactory.VersionInsensitiveMapper(DEFAULT_HIBERNATE_DIALECT));\n-    }\n+  private static final Log __log = LogFactory.getLog(DbConfStoreConnectionFactory.class);\n \n-    private final DataSource _ds;\n+  private static final Messages __msgs = MessageBundle.getMessages(Messages.class);\n \n-    final SessionFactory _sessionFactory;\n+  private static final String DEFAULT_HIBERNATE_DIALECT = \"org.hibernate.dialect.DerbyDialect\";\n \n-    public DbConfStoreConnectionFactory(DataSource ds, Properties initialProps, boolean createDatamodel) {\n-        _ds = ds;\n+  private static final HashMap<String, DialectFactory.VersionInsensitiveMapper> HIBERNATE_DIALECTS =\n+    new HashMap<String, DialectFactory.VersionInsensitiveMapper>();\n \n-        // Don't want to pollute original properties\n-        Properties properties = new Properties();\n-        for (Object prop : initialProps.keySet()) {\n-            properties.put(prop, initialProps.get(prop));\n-        }\n+  private static final String _guid = new GUID().toString();\n \n-        __log.debug(\"using data source: \" + ds);\n-        _dataSources.put(_guid, ds);\n-        properties.put(\"guid\", _guid);\n-        properties.put(Environment.CONNECTION_PROVIDER, DataSourceConnectionProvider.class.getName());\n-\n-        if (properties.get(Environment.DIALECT) == null) {\n-            try {\n-                properties.put(Environment.DIALECT, guessDialect(_ds));\n-            } catch (Exception ex) {\n-                String errmsg = __msgs.msgOdeInitHibernateDialectDetectFailed();\n-                __log.error(errmsg, ex);\n-                throw new BpelEngineException(errmsg, ex);\n-            }\n-        }\n+  private static final Map<String, DataSource> _dataSources = new ConcurrentHashMap<String, DataSource>();\n \n-        if (createDatamodel) {\n-            properties.put(Environment.HBM2DDL_AUTO, \"create-drop\");\n-        }\n+  static {\n+    // Hibernate has a nice table that resolves the dialect from the database\n+    // product name,\n+    // but doesn't include all the drivers. So this is supplementary, and some\n+    // day in the\n+    // future they'll add more drivers and we can get rid of this.\n+    // Drivers already recognized by Hibernate:\n+    // HSQL Database Engine\n+    // DB2/NT\n+    // MySQL\n+    // PostgreSQL\n+    // Microsoft SQL Server Database, Microsoft SQL Server\n+    // Sybase SQL Server\n+    // Informix Dynamic Server\n+    // Oracle 8 and Oracle >8\n+    HIBERNATE_DIALECTS.put(\"Apache Derby\", new DialectFactory.VersionInsensitiveMapper(DEFAULT_HIBERNATE_DIALECT));\n+  }\n+\n+  private final DataSource _ds;\n+\n+  final SessionFactory _sessionFactory;\n \n-        _sessionFactory = getDefaultConfiguration().setProperties(properties).buildSessionFactory();\n+  public DbConfStoreConnectionFactory(DataSource ds, Properties initialProps, boolean createDatamodel) {\n+    _ds = ds;\n \n+    // Don't want to pollute original properties\n+    Properties properties = new Properties();\n+    for (Object prop : initialProps.keySet()) {\n+      properties.put(prop, initialProps.get(prop));\n     }\n \n-    public ConfStoreConnectionHib getConnection() {\n-        return new ConfStoreConnectionHib(_sessionFactory.openSession());\n+    __log.debug(\"using data source: \" + ds);\n+    _dataSources.put(_guid, ds);\n+    properties.put(\"guid\", _guid);\n+    properties.put(Environment.CONNECTION_PROVIDER, DataSourceConnectionProvider.class.getName());\n+\n+    if (properties.get(Environment.DIALECT) == null) {\n+      try {\n+        properties.put(Environment.DIALECT, guessDialect(_ds));\n+      } catch (Exception ex) {\n+        String errmsg = __msgs.msgOdeInitHibernateDialectDetectFailed();\n+        __log.error(errmsg, ex);\n+        throw new BpelEngineException(errmsg, ex);\n+      }\n     }\n \n-    private String guessDialect(DataSource dataSource) throws Exception {\n-\n-        String dialect = null;\n-        // Open a connection and use that connection to figure out database\n-        // product name/version number in order to decide which Hibernate\n-        // dialect to use.\n-        Connection conn = dataSource.getConnection();\n-        try {\n-            DatabaseMetaData metaData = conn.getMetaData();\n-            if (metaData != null) {\n-                String dbProductName = metaData.getDatabaseProductName();\n-                int dbMajorVer = metaData.getDatabaseMajorVersion();\n-                __log.info(\"Using database \" + dbProductName + \" major version \" + dbMajorVer);\n-                DialectFactory.DatabaseDialectMapper mapper = HIBERNATE_DIALECTS.get(dbProductName);\n-                if (mapper != null) {\n-                    dialect = mapper.getDialectClass(dbMajorVer);\n-                } else {\n-                    Dialect hbDialect = DialectFactory.determineDialect(dbProductName, dbMajorVer);\n-                    if (hbDialect != null)\n-                        dialect = hbDialect.getClass().getName();\n-                }\n-            }\n-        } finally {\n-            conn.close();\n-        }\n+    if (createDatamodel) {\n+      properties.put(Environment.HBM2DDL_AUTO, \"create-drop\");\n+    }\n \n-        if (dialect == null) {\n-            __log.info(\"Cannot determine hibernate dialect for this database: using the default one.\");\n-            dialect = DEFAULT_HIBERNATE_DIALECT;\n+    _sessionFactory = getDefaultConfiguration().setProperties(properties).buildSessionFactory();\n+\n+  }\n+\n+  public ConfStoreConnectionHib getConnection() {\n+    return new ConfStoreConnectionHib(_sessionFactory.openSession());\n+  }\n+\n+  private String guessDialect(DataSource dataSource) throws Exception {\n+\n+    String dialect = null;\n+    // Open a connection and use that connection to figure out database\n+    // product name/version number in order to decide which Hibernate\n+    // dialect to use.\n+    Connection conn = dataSource.getConnection();\n+    try {\n+      DatabaseMetaData metaData = conn.getMetaData();\n+      if (metaData != null) {\n+        String dbProductName = metaData.getDatabaseProductName();\n+        int dbMajorVer = metaData.getDatabaseMajorVersion();\n+        __log.info(\"Using database \" + dbProductName + \" major version \" + dbMajorVer);\n+        DialectFactory.DatabaseDialectMapper mapper = HIBERNATE_DIALECTS.get(dbProductName);\n+        if (mapper != null) {\n+          dialect = mapper.getDialectClass(dbMajorVer);\n+        } else {\n+          Dialect hbDialect = DialectFactory.determineDialect(dbProductName, dbMajorVer);\n+          if (hbDialect != null) {\n+            dialect = hbDialect.getClass().getName();\n+          }\n         }\n-\n-        return dialect;\n-\n+      }\n+    } finally {\n+      conn.close();\n     }\n \n-    static Configuration getDefaultConfiguration() throws MappingException {\n-        return new Configuration().addClass(ProcessConfDaoImpl.class).addClass(DeploymentUnitDaoImpl.class)\n-                .addClass(VersionTrackerDAOImpl.class);\n+    if (dialect == null) {\n+      __log.info(\"Cannot determine hibernate dialect for this database: using the default one.\");\n+      dialect = DEFAULT_HIBERNATE_DIALECT;\n     }\n \n-    public static class DataSourceConnectionProvider implements ConnectionProvider {\n-        private String _guid;\n+    return dialect;\n \n-        public DataSourceConnectionProvider() {\n-        }\n+  }\n \n-        public void configure(Properties props) throws HibernateException {\n-            _guid = props.getProperty(\"guid\");\n-        }\n+  static Configuration getDefaultConfiguration() throws MappingException {\n+    return new Configuration().addClass(ProcessConfDaoImpl.class).addClass(DeploymentUnitDaoImpl.class)\n+      .addClass(VersionTrackerDAOImpl.class);\n+  }\n \n-        public Connection getConnection() throws SQLException {\n-            return _dataSources.get(_guid).getConnection();\n-        }\n+  public static class DataSourceConnectionProvider implements ConnectionProvider {\n+    private String _guid;\n \n-        public void closeConnection(Connection arg0) throws SQLException {\n-            arg0.close();\n-        }\n+    public DataSourceConnectionProvider() {\n+    }\n \n-        public void close() throws HibernateException {\n-        }\n+    public void configure(Properties props) throws HibernateException {\n+      _guid = props.getProperty(\"guid\");\n+    }\n \n-        public boolean supportsAggressiveRelease() {\n-            return true;\n-        }\n+    public Connection getConnection() throws SQLException {\n+      return _dataSources.get(_guid).getConnection();\n+    }\n+\n+    public void closeConnection(Connection arg0) throws SQLException {\n+      arg0.close();\n+    }\n+\n+    public void close() throws HibernateException {\n+    }\n+\n+    public boolean supportsAggressiveRelease() {\n+      return true;\n     }\n+  }\n \n }\n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/87/DbConfStoreConnectionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/87/DbConfStoreConnectionFactory.java\nindex 6f921bc06ff..a1b7f5fb9e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/87/DbConfStoreConnectionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/87/DbConfStoreConnectionFactory.java\n@@ -146,7 +146,6 @@ public class DbConfStoreConnectionFactory implements ConfStoreConnectionFactory\n         }\n \n         return dialect;\n-\n     }\n \n     static Configuration getDefaultConfiguration() throws MappingException {\n@@ -180,4 +179,4 @@ public class DbConfStoreConnectionFactory implements ConfStoreConnectionFactory\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}