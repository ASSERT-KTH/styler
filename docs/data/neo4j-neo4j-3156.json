{
    "project_name": "neo4j-neo4j",
    "error_id": "3156",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3156/LockingNodeUniqueIndexSeek.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3156/LockingNodeUniqueIndexSeek.java\nindex 87d984d62f3..80a5d2c9de6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3156/LockingNodeUniqueIndexSeek.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3156/LockingNodeUniqueIndexSeek.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import org.neo4j.internal.kernel.api.IndexQuery;\n@@ -33,38 +34,38 @@ import static org.neo4j.lock.ResourceTypes.INDEX_ENTRY;\n \n public class LockingNodeUniqueIndexSeek\n {\n-    public static <CURSOR extends NodeValueIndexCursor> long apply( Locks.Client locks,\n-                                                                    LockTracer lockTracer,\n-                                                                    CURSOR cursor,\n-                                                                    UniqueNodeIndexSeeker<CURSOR> nodeIndexSeeker,\n-                                                                    Read read,\n-                                                                    IndexDescriptor index,\n-                                                                    IndexQuery.ExactPredicate... predicates )\n-            throws IndexNotApplicableKernelException, IndexNotFoundKernelException\n+    public static <CURSOR extends NodeValueIndexCursor> long apply(Locks.Client locks,\n+                                                                   LockTracer lockTracer,\n+                                                                   CURSOR cursor,\n+                                                                   UniqueNodeIndexSeeker<CURSOR> nodeIndexSeeker,\n+                                                                   Read read,\n+                                                                   IndexDescriptor index,\n+                                                                   IndexQuery.ExactPredicate... predicates)\n+      throws IndexNotApplicableKernelException, IndexNotFoundKernelException\n     {\n         int[] entityTokenIds = index.schema().getEntityTokenIds();\n-        if ( entityTokenIds.length != 1 )\n+        if (entityTokenIds.length != 1)\n         {\n-            throw new IndexNotApplicableKernelException( \"Multi-token index \" + index + \" does not support uniqueness.\" );\n+            throw new IndexNotApplicableKernelException(\"Multi-token index \" + index + \" does not support uniqueness.\");\n         }\n-        long indexEntryId = indexEntryResourceId( entityTokenIds[0], predicates );\n+        long indexEntryId = indexEntryResourceId(entityTokenIds[0], predicates);\n \n         //First try to find node under a shared lock\n         //if not found upgrade to exclusive and try again\n-        locks.acquireShared( lockTracer, INDEX_ENTRY, indexEntryId );\n-        try ( IndexReaders readers = new IndexReaders( index, read ) )\n+        locks.acquireShared(lockTracer, INDEX_ENTRY, indexEntryId);\n+        try (IndexReaders readers = new IndexReaders(index, read))\n         {\n-            nodeIndexSeeker.nodeIndexSeekWithFreshIndexReader( cursor, readers.createReader(), predicates );\n-            if ( !cursor.next() )\n+            nodeIndexSeeker.nodeIndexSeekWithFreshIndexReader(cursor, readers.createReader(), predicates);\n+            if (!cursor.next())\n             {\n-                locks.releaseShared( INDEX_ENTRY, indexEntryId );\n-                locks.acquireExclusive( lockTracer, INDEX_ENTRY, indexEntryId );\n-                nodeIndexSeeker.nodeIndexSeekWithFreshIndexReader( cursor, readers.createReader(), predicates );\n-                if ( cursor.next() ) // we found it under the exclusive lock\n+                locks.releaseShared(INDEX_ENTRY, indexEntryId);\n+                locks.acquireExclusive(lockTracer, INDEX_ENTRY, indexEntryId);\n+                nodeIndexSeeker.nodeIndexSeekWithFreshIndexReader(cursor, readers.createReader(), predicates);\n+                if (cursor.next()) // we found it under the exclusive lock\n                 {\n                     // downgrade to a shared lock\n-                    locks.acquireShared( lockTracer, INDEX_ENTRY, indexEntryId );\n-                    locks.releaseExclusive( INDEX_ENTRY, indexEntryId );\n+                    locks.acquireShared(lockTracer, INDEX_ENTRY, indexEntryId);\n+                    locks.releaseExclusive(INDEX_ENTRY, indexEntryId);\n                 }\n             }\n \n@@ -75,8 +76,8 @@ public class LockingNodeUniqueIndexSeek\n     @FunctionalInterface\n     interface UniqueNodeIndexSeeker<CURSOR extends NodeValueIndexCursor>\n     {\n-        void nodeIndexSeekWithFreshIndexReader( CURSOR cursor,\n-                                                IndexReader indexReader,\n-                                                IndexQuery.ExactPredicate... predicates ) throws IndexNotApplicableKernelException;\n+        void nodeIndexSeekWithFreshIndexReader(CURSOR cursor,\n+                                               IndexReader indexReader,\n+                                               IndexQuery.ExactPredicate... predicates) throws IndexNotApplicableKernelException;\n     }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3156/LockingNodeUniqueIndexSeek.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3156/LockingNodeUniqueIndexSeek.java\nindex 87d984d62f3..395f13c4ed3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3156/LockingNodeUniqueIndexSeek.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3156/LockingNodeUniqueIndexSeek.java\n@@ -33,8 +33,7 @@ import static org.neo4j.lock.ResourceTypes.INDEX_ENTRY;\n \n public class LockingNodeUniqueIndexSeek\n {\n-    public static <CURSOR extends NodeValueIndexCursor> long apply( Locks.Client locks,\n-                                                                    LockTracer lockTracer,\n+    public static <CURSOR extends NodeValueIndexCursor> long apply( Locks.Client locks, LockTracer lockTracer,\n                                                                     CURSOR cursor,\n                                                                     UniqueNodeIndexSeeker<CURSOR> nodeIndexSeeker,\n                                                                     Read read,\n@@ -75,8 +74,7 @@ public class LockingNodeUniqueIndexSeek\n     @FunctionalInterface\n     interface UniqueNodeIndexSeeker<CURSOR extends NodeValueIndexCursor>\n     {\n-        void nodeIndexSeekWithFreshIndexReader( CURSOR cursor,\n-                                                IndexReader indexReader,\n+        void nodeIndexSeekWithFreshIndexReader( CURSOR cursor, IndexReader indexReader,\n                                                 IndexQuery.ExactPredicate... predicates ) throws IndexNotApplicableKernelException;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}