{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4190",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "155",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "170",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4190/PrimitiveLongIntKeyValueArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4190/PrimitiveLongIntKeyValueArray.java\nindex e7d910e2b84..a9959e0df96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4190/PrimitiveLongIntKeyValueArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4190/PrimitiveLongIntKeyValueArray.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.collection.primitive;\n \n import java.util.Arrays;\n@@ -28,181 +29,179 @@ import java.util.Arrays;\n  */\n public class PrimitiveLongIntKeyValueArray\n {\n-    public static final int DEFAULT_INITIAL_CAPACITY = 100;\n-    public static final double DEFAULT_GROWTH_FACTOR = 0.2;\n-\n-    private long[] naturalKeys = new long[DEFAULT_INITIAL_CAPACITY];\n-    private int[] naturalValues = new int[DEFAULT_INITIAL_CAPACITY];\n-    private long[] sortedKeys = new long[DEFAULT_INITIAL_CAPACITY];\n-    private int[] sortedValues = new int[DEFAULT_INITIAL_CAPACITY];\n-    private double growthFactor;\n-    private int size;\n-\n-    public PrimitiveLongIntKeyValueArray( int initialCapacity, double growthFactor )\n-    {\n-        if ( initialCapacity <= 0 )\n-        {\n-            throw new IllegalArgumentException( \"Illegal initial capacity: \" + initialCapacity );\n-        }\n-        if ( growthFactor <= 0 )\n-        {\n-            throw new IllegalArgumentException( \"Illegal growth factor: \" + growthFactor );\n-        }\n-        naturalKeys = new long[DEFAULT_INITIAL_CAPACITY];\n-        naturalValues = new int[DEFAULT_INITIAL_CAPACITY];\n-        sortedKeys = new long[DEFAULT_INITIAL_CAPACITY];\n-        sortedValues = new int[DEFAULT_INITIAL_CAPACITY];\n-        this.growthFactor = growthFactor;\n-    }\n-\n-    public PrimitiveLongIntKeyValueArray( int initialCapacity )\n-    {\n-        this( initialCapacity, DEFAULT_GROWTH_FACTOR );\n-    }\n-\n-    public PrimitiveLongIntKeyValueArray()\n-    {\n-        this( DEFAULT_INITIAL_CAPACITY, DEFAULT_GROWTH_FACTOR );\n-    }\n-\n-    /**\n-     * The current capacity.\n-     *\n-     * @return current capacity\n-     */\n-    public int capacity()\n+  public static final int DEFAULT_INITIAL_CAPACITY = 100;\n+  public static final double DEFAULT_GROWTH_FACTOR = 0.2;\n+\n+  private long[] naturalKeys = new long[DEFAULT_INITIAL_CAPACITY];\n+  private int[] naturalValues = new int[DEFAULT_INITIAL_CAPACITY];\n+  private long[] sortedKeys = new long[DEFAULT_INITIAL_CAPACITY];\n+  private int[] sortedValues = new int[DEFAULT_INITIAL_CAPACITY];\n+  private double growthFactor;\n+  private int size;\n+\n+  public PrimitiveLongIntKeyValueArray(int initialCapacity, double growthFactor)\n+  {\n+    if (initialCapacity <= 0)\n     {\n-        return naturalKeys.length;\n+      throw new IllegalArgumentException(\"Illegal initial capacity: \" + initialCapacity);\n     }\n-\n-    /**\n-     * The proportion by which this array will automatically grow when full.\n-     *\n-     * @return the growth factor\n-     */\n-    public double growthFactor()\n+    if (growthFactor <= 0)\n     {\n-        return growthFactor;\n+      throw new IllegalArgumentException(\"Illegal growth factor: \" + growthFactor);\n     }\n-\n-    /**\n-     * Ensure the array has at least the capacity requested. The\n-     * capacity will only ever increase or stay the same.\n-     *\n-     * @param newCapacity the new capacity requirement\n-     */\n-    public void ensureCapacity( int newCapacity )\n+    naturalKeys = new long[DEFAULT_INITIAL_CAPACITY];\n+    naturalValues = new int[DEFAULT_INITIAL_CAPACITY];\n+    sortedKeys = new long[DEFAULT_INITIAL_CAPACITY];\n+    sortedValues = new int[DEFAULT_INITIAL_CAPACITY];\n+    this.growthFactor = growthFactor;\n+  }\n+\n+  public PrimitiveLongIntKeyValueArray(int initialCapacity)\n+  {\n+    this(initialCapacity, DEFAULT_GROWTH_FACTOR);\n+  }\n+\n+  public PrimitiveLongIntKeyValueArray()\n+  {\n+    this(DEFAULT_INITIAL_CAPACITY, DEFAULT_GROWTH_FACTOR);\n+  }\n+\n+  /**\n+   * The current capacity.\n+   *\n+   * @return current capacity\n+   */\n+  public int capacity()\n+  {\n+    return naturalKeys.length;\n+  }\n+\n+  /**\n+   * The proportion by which this array will automatically grow when full.\n+   *\n+   * @return the growth factor\n+   */\n+  public double growthFactor()\n+  {\n+    return growthFactor;\n+  }\n+\n+  /**\n+   * Ensure the array has at least the capacity requested. The\n+   * capacity will only ever increase or stay the same.\n+   *\n+   * @param newCapacity the new capacity requirement\n+   */\n+  public void ensureCapacity(int newCapacity)\n+  {\n+    int capacity = naturalKeys.length;\n+    if (newCapacity > capacity)\n     {\n-        int capacity = naturalKeys.length;\n-        if ( newCapacity > capacity )\n-        {\n-            long[] newNaturalKeys = new long[newCapacity];\n-            int[] newNaturalValues = new int[newCapacity];\n-            long[] newSortedKeys = new long[newCapacity];\n-            int[] newSortedValues = new int[newCapacity];\n-            for ( int i = 0; i < capacity; i++ )\n-            {\n-                newNaturalKeys[i] = naturalKeys[i];\n-                newNaturalValues[i] = naturalValues[i];\n-                newSortedKeys[i] = sortedKeys[i];\n-                newSortedValues[i] = sortedValues[i];\n-            }\n-            naturalKeys = newNaturalKeys;\n-            naturalValues = newNaturalValues;\n-            sortedKeys = newSortedKeys;\n-            sortedValues = newSortedValues;\n-        }\n+      long[] newNaturalKeys = new long[newCapacity];\n+      int[] newNaturalValues = new int[newCapacity];\n+      long[] newSortedKeys = new long[newCapacity];\n+      int[] newSortedValues = new int[newCapacity];\n+      for (int i = 0; i < capacity; i++)\n+      {\n+        newNaturalKeys[i] = naturalKeys[i];\n+        newNaturalValues[i] = naturalValues[i];\n+        newSortedKeys[i] = sortedKeys[i];\n+        newSortedValues[i] = sortedValues[i];\n+      }\n+      naturalKeys = newNaturalKeys;\n+      naturalValues = newNaturalValues;\n+      sortedKeys = newSortedKeys;\n+      sortedValues = newSortedValues;\n     }\n-\n-    /**\n-     * The number of items in this array.\n-     *\n-     * @return number of items in the array\n-     */\n-    public int size()\n+  }\n+\n+  /**\n+   * The number of items in this array.\n+   *\n+   * @return number of items in the array\n+   */\n+  public int size()\n+  {\n+    return size;\n+  }\n+\n+  /**\n+   * Fetch the integer mapped to the given key or defaultValue if\n+   * that key does not exist.\n+   *\n+   * @param key          the handle for the required value\n+   * @param defaultValue value to return if the key is not found\n+   * @return the integer value mapped to the key provided\n+   */\n+  public int getOrDefault(long key, int defaultValue)\n+  {\n+    int index = Arrays.binarySearch(sortedKeys, 0, size, key);\n+    if (index >= 0)\n     {\n-        return size;\n-    }\n-\n-    /**\n-     * Fetch the integer mapped to the given key or defaultValue if\n-     * that key does not exist.\n-     *\n-     * @param key          the handle for the required value\n-     * @param defaultValue value to return if the key is not found\n-     * @return the integer value mapped to the key provided\n-     */\n-    public int getOrDefault( long key, int defaultValue )\n+      return sortedValues[index];\n+    } else\n     {\n-        int index = Arrays.binarySearch( sortedKeys, 0, size, key );\n-        if ( index >= 0 )\n-        {\n-            return sortedValues[index];\n-        }\n-        else\n-        {\n-            return defaultValue;\n-        }\n+      return defaultValue;\n     }\n-\n-    /**\n-     * Set the value for a given key if that key is not already in use.\n-     *\n-     * @param key the key against which to put the value\n-     * @param value the value to include\n-     * @return true if the value was successfully included, false otherwise\n-     */\n-    public boolean putIfAbsent( long key, int value )\n+  }\n+\n+  /**\n+   * Set the value for a given key if that key is not already in use.\n+   *\n+   * @param key   the key against which to put the value\n+   * @param value the value to include\n+   * @return true if the value was successfully included, false otherwise\n+   */\n+  public boolean putIfAbsent(long key, int value)\n+  {\n+    int capacity = naturalKeys.length;\n+    if (size == capacity)\n     {\n-        int capacity = naturalKeys.length;\n-        if ( size == capacity )\n-        {\n-            ensureCapacity( (int) Math.floor( growthFactor * capacity ) );\n-        }\n-\n-        int index = Arrays.binarySearch( sortedKeys, 0, size, key );\n-        if ( index >= 0 )\n-        {\n-            return false;\n-        }\n-        else\n-        {\n-            index = -index - 1;\n-            for ( int i = size; i > index; i-- )\n-            {\n-                int j = i - 1;\n-                sortedKeys[i] = sortedKeys[j];\n-                sortedValues[i] = sortedValues[j];\n-            }\n-            naturalKeys[size] = key;\n-            naturalValues[size] = value;\n-            sortedKeys[index] = key;\n-            sortedValues[index] = value;\n-\n-            size += 1;\n-            return true;\n-        }\n+      ensureCapacity((int) Math.floor(growthFactor * capacity));\n     }\n \n-    /**\n-     * Clear the array and set a new capacity if not already large enough.\n-     *\n-     * @param newCapacity the new capacity requirement\n-     */\n-    public void reset( int newCapacity )\n+    int index = Arrays.binarySearch(sortedKeys, 0, size, key);\n+    if (index >= 0)\n     {\n-        size = 0;\n-        ensureCapacity( newCapacity );\n-    }\n-\n-    /**\n-     * Return an array of all key values, in order of insertion.\n-     *\n-     * @return array of key values\n-     */\n-    public long[] keys()\n+      return false;\n+    } else\n     {\n-        return Arrays.copyOfRange( naturalKeys, 0, size );\n+      index = -index - 1;\n+      for (int i = size; i > index; i--)\n+      {\n+        int j = i - 1;\n+        sortedKeys[i] = sortedKeys[j];\n+        sortedValues[i] = sortedValues[j];\n+      }\n+      naturalKeys[size] = key;\n+      naturalValues[size] = value;\n+      sortedKeys[index] = key;\n+      sortedValues[index] = value;\n+\n+      size += 1;\n+      return true;\n     }\n+  }\n+\n+  /**\n+   * Clear the array and set a new capacity if not already large enough.\n+   *\n+   * @param newCapacity the new capacity requirement\n+   */\n+  public void reset(int newCapacity)\n+  {\n+    size = 0;\n+    ensureCapacity(newCapacity);\n+  }\n+\n+  /**\n+   * Return an array of all key values, in order of insertion.\n+   *\n+   * @return array of key values\n+   */\n+  public long[] keys()\n+  {\n+    return Arrays.copyOfRange(naturalKeys, 0, size);\n+  }\n \n }\n",
            "diff_size": 257
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "100",
                    "column": "25",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "164",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "34",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4190/PrimitiveLongIntKeyValueArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4190/PrimitiveLongIntKeyValueArray.java\nindex e7d910e2b84..d20286598d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4190/PrimitiveLongIntKeyValueArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4190/PrimitiveLongIntKeyValueArray.java\n@@ -29,7 +29,8 @@ import java.util.Arrays;\n public class PrimitiveLongIntKeyValueArray\n {\n     public static final int DEFAULT_INITIAL_CAPACITY = 100;\n-    public static final double DEFAULT_GROWTH_FACTOR = 0.2;\n+\n+public static final double DEFAULT_GROWTH_FACTOR = 0.2;\n \n     private long[] naturalKeys = new long[DEFAULT_INITIAL_CAPACITY];\n     private int[] naturalValues = new int[DEFAULT_INITIAL_CAPACITY];\n@@ -44,11 +45,13 @@ public class PrimitiveLongIntKeyValueArray\n         {\n             throw new IllegalArgumentException( \"Illegal initial capacity: \" + initialCapacity );\n         }\n-        if ( growthFactor <= 0 )\n+\n+if ( growthFactor <= 0 )\n         {\n             throw new IllegalArgumentException( \"Illegal growth factor: \" + growthFactor );\n         }\n-        naturalKeys = new long[DEFAULT_INITIAL_CAPACITY];\n+\n+naturalKeys = new long[DEFAULT_INITIAL_CAPACITY];\n         naturalValues = new int[DEFAULT_INITIAL_CAPACITY];\n         sortedKeys = new long[DEFAULT_INITIAL_CAPACITY];\n         sortedValues = new int[DEFAULT_INITIAL_CAPACITY];\n@@ -94,7 +97,7 @@ public class PrimitiveLongIntKeyValueArray\n     public void ensureCapacity( int newCapacity )\n     {\n         int capacity = naturalKeys.length;\n-        if ( newCapacity > capacity )\n+        if ( newCapacity> capacity )\n         {\n             long[] newNaturalKeys = new long[newCapacity];\n             int[] newNaturalValues = new int[newCapacity];\n@@ -107,7 +110,8 @@ public class PrimitiveLongIntKeyValueArray\n                 newSortedKeys[i] = sortedKeys[i];\n                 newSortedValues[i] = sortedValues[i];\n             }\n-            naturalKeys = newNaturalKeys;\n+\n+naturalKeys = newNaturalKeys;\n             naturalValues = newNaturalValues;\n             sortedKeys = newSortedKeys;\n             sortedValues = newSortedValues;\n@@ -157,7 +161,7 @@ public class PrimitiveLongIntKeyValueArray\n         int capacity = naturalKeys.length;\n         if ( size == capacity )\n         {\n-            ensureCapacity( (int) Math.floor( growthFactor * capacity ) );\n+            ensureCapacity( ( int) Math.floor( growthFactor * capacity ) );\n         }\n \n         int index = Arrays.binarySearch( sortedKeys, 0, size, key );\n@@ -168,13 +172,14 @@ public class PrimitiveLongIntKeyValueArray\n         else\n         {\n             index = -index - 1;\n-            for ( int i = size; i > index; i-- )\n+            for ( int i = size; i> index; i-- )\n             {\n                 int j = i - 1;\n                 sortedKeys[i] = sortedKeys[j];\n                 sortedValues[i] = sortedValues[j];\n             }\n-            naturalKeys[size] = key;\n+\n+naturalKeys[size] = key;\n             naturalValues[size] = value;\n             sortedKeys[index] = key;\n             sortedValues[index] = value;\n@@ -204,5 +209,4 @@ public class PrimitiveLongIntKeyValueArray\n     {\n         return Arrays.copyOfRange( naturalKeys, 0, size );\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}