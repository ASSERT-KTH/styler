{
    "project_name": "graphfoundation-ongdb",
    "error_id": "663",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "166",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/663/Bits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/663/Bits.java\nindex f7fbff3451a..72c0b100576 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/663/Bits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/663/Bits.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.util.Arrays;\n@@ -27,389 +28,388 @@ import java.util.Arrays;\n  */\n public final class Bits implements Cloneable\n {\n-    // 3: ...\n-    // 2:   [   23    ][   22    ][   21    ][   20    ][   19    ][   18    ][   17    ][   16    ] <--\\\n-    //                                                                                                   |\n-    //    /---------------------------------------------------------------------------------------------/\n-    //   |\n-    // 1: \\-[   15    ][   14    ][   13    ][   12    ][   11    ][   10    ][    9    ][    8    ] <--\\\n-    //                                                                                                   |\n-    //    /---------------------------------------------------------------------------------------------/\n-    //   |\n-    // 0: \\-[    7    ][    6    ][    5    ][    4    ][    3    ][    2    ][    1    ][    0    ] <---- START\n-    private final long[] longs;\n-    private final int numberOfBytes;\n-    private int writePosition;\n-    private int readPosition;\n-\n-    /*\n-     * Calculate all the right overflow masks\n-     */\n-    private static final long[] RIGHT_OVERFLOW_MASKS;\n-\n-    static\n-    {\n-        RIGHT_OVERFLOW_MASKS = new long[Long.SIZE];\n-        long mask = 1L;\n-        for ( int i = 0; i < RIGHT_OVERFLOW_MASKS.length; i++ )\n-        {\n-            RIGHT_OVERFLOW_MASKS[i] = mask;\n-            mask <<= 1;\n-            mask |= 0x1L;\n-        }\n-    }\n-\n-    public static Bits bits( int numberOfBytes )\n-    {\n-        int requiredLongs = requiredLongs( numberOfBytes );\n-        return new Bits( new long[requiredLongs], numberOfBytes );\n-    }\n-\n-    public static int requiredLongs( int numberOfBytes )\n-    {\n-        return ((numberOfBytes - 1) >> 3) + 1; // /8\n-    }\n-\n-    public static Bits bitsFromLongs( long[] longs )\n-    {\n-        return new Bits( longs, longs.length << 3 ); // *8\n-    }\n-\n-    public static Bits bitsFromBytes( byte[] bytes )\n-    {\n-        return bitsFromBytes( bytes, 0 );\n-    }\n-\n-    public static Bits bitsFromBytes( byte[] bytes, int startIndex )\n-    {\n-        final int count = bytes.length;\n-        Bits bits = bits( count - startIndex );\n-        for ( int i = startIndex; i < count; i++ )\n-        {\n-            bits.put( bytes[i] );\n-        }\n-        return bits;\n-    }\n-\n-    public static Bits bitsFromBytes( byte[] bytes, int offset, int length )\n-    {\n-        Bits bits = bits( length - offset );\n-        for ( int i = offset; i < (offset + length); i++ )\n-        {\n-            bits.put( bytes[i] );\n-        }\n-        return bits;\n-    }\n-\n-    private Bits( long[] longs, int numberOfBytes )\n-    {\n-        this.longs = longs;\n-        this.numberOfBytes = numberOfBytes;\n-    }\n-\n-    /**\n-     * A mask which has the {@code steps} least significant bits set to 1, all others 0.\n-     * It's used to carry bits over between carriers (longs) when shifting right.\n-     *\n-     * @param steps the number of least significant bits to have set to 1 in the mask.\n-     * @return the created mask.\n-     */\n-    public static long rightOverflowMask( int steps )\n-    {\n-        return RIGHT_OVERFLOW_MASKS[steps - 1];\n-    }\n-\n-    /**\n-     * Returns the underlying long values that has got all the bits applied.\n-     * The first item in the array has got the most significant bits.\n-     *\n-     * @return the underlying long values that has got all the bits applied.\n-     */\n-    @SuppressWarnings( \"EI_EXPOSE_REP\" )\n-    public long[] getLongs()\n-    {\n-        return longs;\n-    }\n-\n-    public byte[] asBytes()\n-    {\n-        return asBytes(0);\n-    }\n-\n-    public byte[] asBytes( int offsetBytes )\n-    {\n-        int readPositionBefore = readPosition;\n-        readPosition = 0;\n-        try\n-        {\n-            byte[] result = new byte[numberOfBytes + offsetBytes];\n-            for ( int i = 0; i < numberOfBytes; i++ )\n-            {\n-                result[i + offsetBytes] = getByte();\n-            }\n-            return result;\n-        }\n-        finally\n-        {\n-            readPosition = readPositionBefore;\n-        }\n-    }\n-\n-    /**\n-     * A very nice toString, showing each bit, divided into groups of bytes and\n-     * lines of 8 bytes.\n-     */\n-    @Override\n-    public String toString()\n-    {\n-        StringBuilder builder = new StringBuilder();\n-        for ( int longIndex = longs.length - 1; longIndex >= 0; longIndex-- )\n-        {\n-            long value = longs[longIndex];\n-            if ( builder.length() > 0 )\n-            {\n-                builder.append( '\\n' );\n-            }\n-            builder.append( longIndex );\n-            builder.append( ':' );\n-            numberToString( builder, value, 8 );\n-            if ( longIndex == 0 )\n-            {\n-                builder.append( \" <-- START\" );\n-            }\n-        }\n-        return builder.toString();\n-    }\n-\n-    public static void numberToString( StringBuilder builder, long value, int numberOfBytes )\n-    {\n-        builder.append( '[' );\n-        for ( int i = 8 * numberOfBytes - 1; i >= 0; i-- )\n-        {\n-            boolean isSet = (value & (1L << i)) != 0;\n-            builder.append( isSet ? \"1\" : \"0\" );\n-            if ( i > 0 && i % 8 == 0 )\n-            {\n-                builder.append( ',' );\n-            }\n-        }\n-        builder.append( ']' );\n-    }\n-\n-    public static String numbersToBitString( byte[] values )\n-    {\n-        StringBuilder builder = new StringBuilder();\n-        for ( byte value : values )\n-        {\n-            numberToString( builder, value, 1 );\n-        }\n-        return builder.toString();\n-    }\n-\n-    public static String numbersToBitString( short[] values )\n-    {\n-        StringBuilder builder = new StringBuilder();\n-        for ( short value : values )\n-        {\n-            numberToString( builder, value, 2 );\n-        }\n-        return builder.toString();\n-    }\n-\n-    public static String numbersToBitString( int[] values )\n-    {\n-        StringBuilder builder = new StringBuilder();\n-        for ( int value : values )\n-        {\n-            numberToString( builder, value, 4 );\n-        }\n-        return builder.toString();\n-    }\n-\n-    public static String numbersToBitString( long[] values )\n-    {\n-        StringBuilder builder = new StringBuilder();\n-        for ( long value : values )\n-        {\n-            numberToString( builder, value, 8 );\n-        }\n-        return builder.toString();\n-    }\n-\n-    @Override\n-    public Bits clone()\n-    {\n-        return new Bits( Arrays.copyOf( longs, longs.length ), numberOfBytes );\n-    }\n-\n-    public Bits put( byte value )\n-    {\n-        return put( value, Byte.SIZE );\n-    }\n-\n-    public Bits put( byte value, int steps )\n-    {\n-        return put( (long) value, steps );\n-    }\n-\n-    public Bits put( short value )\n-    {\n-        return put( value, Short.SIZE );\n-    }\n-\n-    public Bits put( short value, int steps )\n-    {\n-        return put( (long) value, steps );\n-    }\n-\n-    public Bits put( int value )\n-    {\n-        return put( value, Integer.SIZE );\n-    }\n-\n-    public Bits put( int value, int steps )\n-    {\n-        return put( (long) value, steps );\n-    }\n-\n-    public Bits put( long value )\n-    {\n-        return put( value, Long.SIZE );\n-    }\n-\n-    public Bits put( long value, int steps )\n-    {\n-        int lowLongIndex = writePosition >> 6; // /64\n-        int lowBitInLong = writePosition % 64;\n-        int lowBitsAvailable = 64 - lowBitInLong;\n-        long lowValueMask = rightOverflowMask( Math.min( lowBitsAvailable, steps ) );\n-        longs[lowLongIndex] |= (value & lowValueMask) << lowBitInLong;\n-        if ( steps > lowBitsAvailable )\n-        {   // High bits\n-            long highValueMask = rightOverflowMask( steps - lowBitsAvailable );\n-            longs[lowLongIndex + 1] |= (value >>> lowBitsAvailable) & highValueMask;\n-        }\n-        writePosition += steps;\n-        return this;\n-    }\n-\n-    public Bits put( byte[] bytes, int offset, int length )\n-    {\n-        for ( int i = offset; i < offset + length; i++ )\n-        {\n-            put( bytes[i], Byte.SIZE );\n-        }\n-        return this;\n-    }\n-\n-    public boolean available()\n-    {\n-        return readPosition < writePosition;\n-    }\n-\n-    public byte getByte()\n-    {\n-        return getByte( Byte.SIZE );\n-    }\n-\n-    public byte getByte( int steps )\n-    {\n-        return (byte) getLong( steps );\n-    }\n-\n-    public short getShort()\n-    {\n-        return getShort( Short.SIZE );\n-    }\n-\n-    public short getShort( int steps )\n-    {\n-        return (short) getLong( steps );\n-    }\n-\n-    public int getInt()\n-    {\n-        return getInt( Integer.SIZE );\n-    }\n-\n-    public int getInt( int steps )\n-    {\n-        return (int) getLong( steps );\n-    }\n-\n-    public long getUnsignedInt()\n-    {\n-        return getInt( Integer.SIZE ) & 0xFFFFFFFFL;\n-    }\n-\n-    public long getLong()\n-    {\n-        return getLong( Long.SIZE );\n-    }\n-\n-    public long getLong( int steps )\n-    {\n-        int lowLongIndex = readPosition >> 6; // 64\n-        int lowBitInLong = readPosition % 64;\n-        int lowBitsAvailable = 64 - lowBitInLong;\n-        long lowLongMask = rightOverflowMask( Math.min( lowBitsAvailable, steps ) ) << lowBitInLong;\n-        long lowValue = longs[lowLongIndex] & lowLongMask;\n-        long result = lowValue >>> lowBitInLong;\n-        if ( steps > lowBitsAvailable )\n-        {   // High bits\n-            long highLongMask = rightOverflowMask( steps - lowBitsAvailable );\n-            result |= (longs[lowLongIndex + 1] & highLongMask) << lowBitsAvailable;\n-        }\n-        readPosition += steps;\n-        return result;\n-    }\n-\n-    public static boolean bitFlag( byte flags, byte flag )\n-    {\n-        assert (flag & (-flag)) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString( flag );\n-        return (flags & flag) == flag;\n-    }\n-\n-    public static byte bitFlag( boolean value, byte flag )\n-    {\n-        assert (flag & (-flag)) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString( flag );\n-        return value ? flag : 0;\n-    }\n-\n-    public static byte notFlag( byte flags, byte flag )\n-    {\n-        assert (flag & (-flag)) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString( flag );\n-        return (byte) (flags & (~flag));\n-    }\n-\n-    public static byte bitFlags( byte... flags )\n-    {\n-        byte result = 0;\n-        for ( byte flag : flags )\n-        {\n-            result |= flag;\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * Clear the position and data.\n-     */\n-    public void clear( boolean zeroBits )\n-    {\n-        if ( zeroBits )\n-        {\n-            // TODO optimize so that only the touched longs gets cleared\n-            Arrays.fill( longs, 0L );\n-        }\n-        readPosition = writePosition = 0;\n-    }\n-\n-    /**\n-     * Given the write position, how many longs are in use.\n-     */\n-    public int longsInUse()\n-    {\n-        return ((writePosition - 1) / Long.SIZE) + 1;\n-    }\n+  // 3: ...\n+  // 2:   [   23    ][   22    ][   21    ][   20    ][   19    ][   18    ][   17    ][   16    ] <--\\\n+  //                                                                                                   |\n+  //    /---------------------------------------------------------------------------------------------/\n+  //   |\n+  // 1: \\-[   15    ][   14    ][   13    ][   12    ][   11    ][   10    ][    9    ][    8    ] <--\\\n+  //                                                                                                   |\n+  //    /---------------------------------------------------------------------------------------------/\n+  //   |\n+  // 0: \\-[    7    ][    6    ][    5    ][    4    ][    3    ][    2    ][    1    ][    0    ] <---- START\n+  private final long[] longs;\n+  private final int numberOfBytes;\n+  private int writePosition;\n+  private int readPosition;\n+\n+  /*\n+   * Calculate all the right overflow masks\n+   */\n+  private static final long[] RIGHT_OVERFLOW_MASKS;\n+\n+  static\n+  {\n+    RIGHT_OVERFLOW_MASKS = new long[Long.SIZE];\n+    long mask = 1L;\n+    for (int i = 0; i < RIGHT_OVERFLOW_MASKS.length; i++)\n+    {\n+      RIGHT_OVERFLOW_MASKS[i] = mask;\n+      mask <<= 1;\n+      mask |= 0x1L;\n+    }\n+  }\n+\n+  public static Bits bits(int numberOfBytes)\n+  {\n+    int requiredLongs = requiredLongs(numberOfBytes);\n+    return new Bits(new long[requiredLongs], numberOfBytes);\n+  }\n+\n+  public static int requiredLongs(int numberOfBytes)\n+  {\n+    return ((numberOfBytes - 1) >> 3) + 1; // /8\n+  }\n+\n+  public static Bits bitsFromLongs(long[] longs)\n+  {\n+    return new Bits(longs, longs.length << 3); // *8\n+  }\n+\n+  public static Bits bitsFromBytes(byte[] bytes)\n+  {\n+    return bitsFromBytes(bytes, 0);\n+  }\n+\n+  public static Bits bitsFromBytes(byte[] bytes, int startIndex)\n+  {\n+    final int count = bytes.length;\n+    Bits bits = bits(count - startIndex);\n+    for (int i = startIndex; i < count; i++)\n+    {\n+      bits.put(bytes[i]);\n+    }\n+    return bits;\n+  }\n+\n+  public static Bits bitsFromBytes(byte[] bytes, int offset, int length)\n+  {\n+    Bits bits = bits(length - offset);\n+    for (int i = offset; i < (offset + length); i++)\n+    {\n+      bits.put(bytes[i]);\n+    }\n+    return bits;\n+  }\n+\n+  private Bits(long[] longs, int numberOfBytes)\n+  {\n+    this.longs = longs;\n+    this.numberOfBytes = numberOfBytes;\n+  }\n+\n+  /**\n+   * A mask which has the {@code steps} least significant bits set to 1, all others 0.\n+   * It's used to carry bits over between carriers (longs) when shifting right.\n+   *\n+   * @param steps the number of least significant bits to have set to 1 in the mask.\n+   * @return the created mask.\n+   */\n+  public static long rightOverflowMask(int steps)\n+  {\n+    return RIGHT_OVERFLOW_MASKS[steps - 1];\n+  }\n+\n+  /**\n+   * Returns the underlying long values that has got all the bits applied.\n+   * The first item in the array has got the most significant bits.\n+   *\n+   * @return the underlying long values that has got all the bits applied.\n+   */\n+  @SuppressWarnings(\"EI_EXPOSE_REP\")\n+  public long[] getLongs()\n+  {\n+    return longs;\n+  }\n+\n+  public byte[] asBytes()\n+  {\n+    return asBytes(0);\n+  }\n+\n+  public byte[] asBytes(int offsetBytes)\n+  {\n+    int readPositionBefore = readPosition;\n+    readPosition = 0;\n+    try\n+    {\n+      byte[] result = new byte[numberOfBytes + offsetBytes];\n+      for (int i = 0; i < numberOfBytes; i++)\n+      {\n+        result[i + offsetBytes] = getByte();\n+      }\n+      return result;\n+    } finally\n+    {\n+      readPosition = readPositionBefore;\n+    }\n+  }\n+\n+  /**\n+   * A very nice toString, showing each bit, divided into groups of bytes and\n+   * lines of 8 bytes.\n+   */\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    for (int longIndex = longs.length - 1; longIndex >= 0; longIndex--)\n+    {\n+      long value = longs[longIndex];\n+      if (builder.length() > 0)\n+      {\n+        builder.append('\\n');\n+      }\n+      builder.append(longIndex);\n+      builder.append(':');\n+      numberToString(builder, value, 8);\n+      if (longIndex == 0)\n+      {\n+        builder.append(\" <-- START\");\n+      }\n+    }\n+    return builder.toString();\n+  }\n+\n+  public static void numberToString(StringBuilder builder, long value, int numberOfBytes)\n+  {\n+    builder.append('[');\n+    for (int i = 8 * numberOfBytes - 1; i >= 0; i--)\n+    {\n+      boolean isSet = (value & (1L << i)) != 0;\n+      builder.append(isSet ? \"1\" : \"0\");\n+      if (i > 0 && i % 8 == 0)\n+      {\n+        builder.append(',');\n+      }\n+    }\n+    builder.append(']');\n+  }\n+\n+  public static String numbersToBitString(byte[] values)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    for (byte value : values)\n+    {\n+      numberToString(builder, value, 1);\n+    }\n+    return builder.toString();\n+  }\n+\n+  public static String numbersToBitString(short[] values)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    for (short value : values)\n+    {\n+      numberToString(builder, value, 2);\n+    }\n+    return builder.toString();\n+  }\n+\n+  public static String numbersToBitString(int[] values)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    for (int value : values)\n+    {\n+      numberToString(builder, value, 4);\n+    }\n+    return builder.toString();\n+  }\n+\n+  public static String numbersToBitString(long[] values)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    for (long value : values)\n+    {\n+      numberToString(builder, value, 8);\n+    }\n+    return builder.toString();\n+  }\n+\n+  @Override\n+  public Bits clone()\n+  {\n+    return new Bits(Arrays.copyOf(longs, longs.length), numberOfBytes);\n+  }\n+\n+  public Bits put(byte value)\n+  {\n+    return put(value, Byte.SIZE);\n+  }\n+\n+  public Bits put(byte value, int steps)\n+  {\n+    return put((long) value, steps);\n+  }\n+\n+  public Bits put(short value)\n+  {\n+    return put(value, Short.SIZE);\n+  }\n+\n+  public Bits put(short value, int steps)\n+  {\n+    return put((long) value, steps);\n+  }\n+\n+  public Bits put(int value)\n+  {\n+    return put(value, Integer.SIZE);\n+  }\n+\n+  public Bits put(int value, int steps)\n+  {\n+    return put((long) value, steps);\n+  }\n+\n+  public Bits put(long value)\n+  {\n+    return put(value, Long.SIZE);\n+  }\n+\n+  public Bits put(long value, int steps)\n+  {\n+    int lowLongIndex = writePosition >> 6; // /64\n+    int lowBitInLong = writePosition % 64;\n+    int lowBitsAvailable = 64 - lowBitInLong;\n+    long lowValueMask = rightOverflowMask(Math.min(lowBitsAvailable, steps));\n+    longs[lowLongIndex] |= (value & lowValueMask) << lowBitInLong;\n+    if (steps > lowBitsAvailable)\n+    {   // High bits\n+      long highValueMask = rightOverflowMask(steps - lowBitsAvailable);\n+      longs[lowLongIndex + 1] |= (value >>> lowBitsAvailable) & highValueMask;\n+    }\n+    writePosition += steps;\n+    return this;\n+  }\n+\n+  public Bits put(byte[] bytes, int offset, int length)\n+  {\n+    for (int i = offset; i < offset + length; i++)\n+    {\n+      put(bytes[i], Byte.SIZE);\n+    }\n+    return this;\n+  }\n+\n+  public boolean available()\n+  {\n+    return readPosition < writePosition;\n+  }\n+\n+  public byte getByte()\n+  {\n+    return getByte(Byte.SIZE);\n+  }\n+\n+  public byte getByte(int steps)\n+  {\n+    return (byte) getLong(steps);\n+  }\n+\n+  public short getShort()\n+  {\n+    return getShort(Short.SIZE);\n+  }\n+\n+  public short getShort(int steps)\n+  {\n+    return (short) getLong(steps);\n+  }\n+\n+  public int getInt()\n+  {\n+    return getInt(Integer.SIZE);\n+  }\n+\n+  public int getInt(int steps)\n+  {\n+    return (int) getLong(steps);\n+  }\n+\n+  public long getUnsignedInt()\n+  {\n+    return getInt(Integer.SIZE) & 0xFFFFFFFFL;\n+  }\n+\n+  public long getLong()\n+  {\n+    return getLong(Long.SIZE);\n+  }\n+\n+  public long getLong(int steps)\n+  {\n+    int lowLongIndex = readPosition >> 6; // 64\n+    int lowBitInLong = readPosition % 64;\n+    int lowBitsAvailable = 64 - lowBitInLong;\n+    long lowLongMask = rightOverflowMask(Math.min(lowBitsAvailable, steps)) << lowBitInLong;\n+    long lowValue = longs[lowLongIndex] & lowLongMask;\n+    long result = lowValue >>> lowBitInLong;\n+    if (steps > lowBitsAvailable)\n+    {   // High bits\n+      long highLongMask = rightOverflowMask(steps - lowBitsAvailable);\n+      result |= (longs[lowLongIndex + 1] & highLongMask) << lowBitsAvailable;\n+    }\n+    readPosition += steps;\n+    return result;\n+  }\n+\n+  public static boolean bitFlag(byte flags, byte flag)\n+  {\n+    assert (flag & (-flag)) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString(flag);\n+    return (flags & flag) == flag;\n+  }\n+\n+  public static byte bitFlag(boolean value, byte flag)\n+  {\n+    assert (flag & (-flag)) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString(flag);\n+    return value ? flag : 0;\n+  }\n+\n+  public static byte notFlag(byte flags, byte flag)\n+  {\n+    assert (flag & (-flag)) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString(flag);\n+    return (byte) (flags & (~flag));\n+  }\n+\n+  public static byte bitFlags(byte... flags)\n+  {\n+    byte result = 0;\n+    for (byte flag : flags)\n+    {\n+      result |= flag;\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * Clear the position and data.\n+   */\n+  public void clear(boolean zeroBits)\n+  {\n+    if (zeroBits)\n+    {\n+      // TODO optimize so that only the touched longs gets cleared\n+      Arrays.fill(longs, 0L);\n+    }\n+    readPosition = writePosition = 0;\n+  }\n+\n+  /**\n+   * Given the write position, how many longs are in use.\n+   */\n+  public int longsInUse()\n+  {\n+    return ((writePosition - 1) / Long.SIZE) + 1;\n+  }\n }\n",
            "diff_size": 386
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "294",
                    "column": "19",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "346",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "19",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/663/Bits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/663/Bits.java\nindex f7fbff3451a..057146ce55e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/663/Bits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/663/Bits.java\n@@ -88,7 +88,8 @@ public final class Bits implements Cloneable\n         {\n             bits.put( bytes[i] );\n         }\n-        return bits;\n+\n+return bits;\n     }\n \n     public static Bits bitsFromBytes( byte[] bytes, int offset, int length )\n@@ -98,7 +99,8 @@ public final class Bits implements Cloneable\n         {\n             bits.put( bytes[i] );\n         }\n-        return bits;\n+\n+return bits;\n     }\n \n     private Bits( long[] longs, int numberOfBytes )\n@@ -133,7 +135,7 @@ public final class Bits implements Cloneable\n \n     public byte[] asBytes()\n     {\n-        return asBytes(0);\n+        return asBytes( 0);\n     }\n \n     public byte[] asBytes( int offsetBytes )\n@@ -147,7 +149,8 @@ public final class Bits implements Cloneable\n             {\n                 result[i + offsetBytes] = getByte();\n             }\n-            return result;\n+\n+return result;\n         }\n         finally\n         {\n@@ -186,7 +189,7 @@ public final class Bits implements Cloneable\n         builder.append( '[' );\n         for ( int i = 8 * numberOfBytes - 1; i >= 0; i-- )\n         {\n-            boolean isSet = (value & (1L << i)) != 0;\n+            boolean isSet = (value & ( 1L << i)) != 0;\n             builder.append( isSet ? \"1\" : \"0\" );\n             if ( i > 0 && i % 8 == 0 )\n             {\n@@ -203,7 +206,8 @@ public final class Bits implements Cloneable\n         {\n             numberToString( builder, value, 1 );\n         }\n-        return builder.toString();\n+\n+return builder.toString();\n     }\n \n     public static String numbersToBitString( short[] values )\n@@ -213,7 +217,8 @@ public final class Bits implements Cloneable\n         {\n             numberToString( builder, value, 2 );\n         }\n-        return builder.toString();\n+\n+return builder.toString();\n     }\n \n     public static String numbersToBitString( int[] values )\n@@ -223,7 +228,8 @@ public final class Bits implements Cloneable\n         {\n             numberToString( builder, value, 4 );\n         }\n-        return builder.toString();\n+\n+return builder.toString();\n     }\n \n     public static String numbersToBitString( long[] values )\n@@ -233,7 +239,8 @@ public final class Bits implements Cloneable\n         {\n             numberToString( builder, value, 8 );\n         }\n-        return builder.toString();\n+\n+return builder.toString();\n     }\n \n     @Override\n@@ -283,13 +290,15 @@ public final class Bits implements Cloneable\n         int lowBitInLong = writePosition % 64;\n         int lowBitsAvailable = 64 - lowBitInLong;\n         long lowValueMask = rightOverflowMask( Math.min( lowBitsAvailable, steps ) );\n-        longs[lowLongIndex] |= (value & lowValueMask) << lowBitInLong;\n-        if ( steps > lowBitsAvailable )\n-        {   // High bits\n+        longs[lowLongIndex] |= ( value & lowValueMask) << lowBitInLong;\n+        if ( steps> lowBitsAvailable )\n+        {\n+    // High bits\n             long highValueMask = rightOverflowMask( steps - lowBitsAvailable );\n-            longs[lowLongIndex + 1] |= (value >>> lowBitsAvailable) & highValueMask;\n+            longs[lowLongIndex + 1] |= ( value >>> lowBitsAvailable) & highValueMask;\n         }\n-        writePosition += steps;\n+\n+writePosition += steps;\n         return this;\n     }\n \n@@ -334,7 +343,7 @@ public final class Bits implements Cloneable\n \n     public int getInt( int steps )\n     {\n-        return (int) getLong( steps );\n+        return ( int) getLong( steps );\n     }\n \n     public long getUnsignedInt()\n@@ -355,31 +364,33 @@ public final class Bits implements Cloneable\n         long lowLongMask = rightOverflowMask( Math.min( lowBitsAvailable, steps ) ) << lowBitInLong;\n         long lowValue = longs[lowLongIndex] & lowLongMask;\n         long result = lowValue >>> lowBitInLong;\n-        if ( steps > lowBitsAvailable )\n-        {   // High bits\n+        if ( steps> lowBitsAvailable )\n+        {\n+    // High bits\n             long highLongMask = rightOverflowMask( steps - lowBitsAvailable );\n             result |= (longs[lowLongIndex + 1] & highLongMask) << lowBitsAvailable;\n         }\n-        readPosition += steps;\n+\n+readPosition += steps;\n         return result;\n     }\n \n     public static boolean bitFlag( byte flags, byte flag )\n     {\n-        assert (flag & (-flag)) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString( flag );\n-        return (flags & flag) == flag;\n+        assert ( flag & (-flag) ) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString( flag );\n+        return ( flags & flag) == flag;\n     }\n \n     public static byte bitFlag( boolean value, byte flag )\n     {\n-        assert (flag & (-flag)) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString( flag );\n+        assert ( flag & (-flag) ) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString( flag );\n         return value ? flag : 0;\n     }\n \n     public static byte notFlag( byte flags, byte flag )\n     {\n-        assert (flag & (-flag)) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString( flag );\n-        return (byte) (flags & (~flag));\n+        assert ( flag & (-flag) ) == flag : \"flag should be a power of 2, not: 0x\" + Integer.toHexString( flag );\n+        return (byte) ( flags & (~flag) );\n     }\n \n     public static byte bitFlags( byte... flags )\n@@ -389,7 +400,8 @@ public final class Bits implements Cloneable\n         {\n             result |= flag;\n         }\n-        return result;\n+\n+return result;\n     }\n \n     /**\n@@ -402,7 +414,8 @@ public final class Bits implements Cloneable\n             // TODO optimize so that only the touched longs gets cleared\n             Arrays.fill( longs, 0L );\n         }\n-        readPosition = writePosition = 0;\n+\n+readPosition = writePosition = 0;\n     }\n \n     /**\n@@ -412,4 +425,4 @@ public final class Bits implements Cloneable\n     {\n         return ((writePosition - 1) / Long.SIZE) + 1;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}