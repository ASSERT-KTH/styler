{
    "project_name": "Angel-ML-angel",
    "error_id": "231",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/231/MatrixMetaManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/231/MatrixMetaManager.java\nindex f6be897da8e..dccaf840d91 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/231/MatrixMetaManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/231/MatrixMetaManager.java\n@@ -52,7 +52,7 @@ public class MatrixMetaManager {\n    */\n   public void addMatrices(List<MatrixMeta> matrixMetas) {\n     int size = matrixMetas.size();\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       addMatrix(matrixMetas.get(i));\n     }\n   }\n@@ -69,11 +69,12 @@ public class MatrixMetaManager {\n \n   /**\n    * Remove a matrix\n+   *\n    * @param matrixId matrix id\n    */\n   public void removeMatrix(int matrixId) {\n     MatrixMeta meta = matrixIdToMetaMap.remove(matrixId);\n-    if(meta != null) {\n+    if (meta != null) {\n       matrixNameToIdMap.remove(meta.getName());\n     }\n   }\n@@ -110,7 +111,7 @@ public class MatrixMetaManager {\n    */\n   public MatrixMeta getMatrixMeta(String matrixName) {\n     int matrixId = getMatrixId(matrixName);\n-    if(matrixId == -1) {\n+    if (matrixId == -1) {\n       return null;\n     } else {\n       return matrixIdToMetaMap.get(matrixId);\n@@ -137,6 +138,7 @@ public class MatrixMetaManager {\n \n   /**\n    * Is a matrix exist\n+   *\n    * @param matrixName matrix name\n    * @return true means exist\n    */\n@@ -146,28 +148,33 @@ public class MatrixMetaManager {\n \n   /**\n    * Is a matrix exist\n+   *\n    * @param matrixId matrix id\n    * @return true means exist\n    */\n-  public boolean exists(int matrixId) { return matrixIdToMetaMap.containsKey(matrixId); }\n+  public boolean exists(int matrixId) {\n+    return matrixIdToMetaMap.containsKey(matrixId);\n+  }\n \n   /**\n    * Get all matrices meta\n+   *\n    * @return all matrices meta\n    */\n-  public Map<Integer,MatrixMeta> getMatrixMetas() {\n+  public Map<Integer, MatrixMeta> getMatrixMetas() {\n     return matrixIdToMetaMap;\n   }\n \n   /**\n    * Get the stored pss for a matrix partition\n+   *\n    * @param matrixId matrix id\n-   * @param partId partition id\n+   * @param partId   partition id\n    * @return the stored pss\n    */\n   public List<ParameterServerId> getPss(int matrixId, int partId) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return null;\n     }\n \n@@ -176,10 +183,11 @@ public class MatrixMetaManager {\n \n   /**\n    * Remove the matrix\n+   *\n    * @param matrixName matrix name\n    */\n   public void removeMatrix(String matrixName) {\n-    if(matrixNameToIdMap.containsKey(matrixName)) {\n+    if (matrixNameToIdMap.containsKey(matrixName)) {\n       int matrixId = matrixNameToIdMap.remove(matrixName);\n       matrixIdToMetaMap.remove(matrixId);\n     }\n@@ -195,13 +203,14 @@ public class MatrixMetaManager {\n \n   /**\n    * Get the master stored ps for a matrix partition\n+   *\n    * @param matrixId matrix id\n-   * @param partId partition id\n+   * @param partId   partition id\n    * @return the master stored ps\n    */\n   public ParameterServerId getMasterPs(int matrixId, int partId) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return null;\n     }\n \n@@ -210,34 +219,37 @@ public class MatrixMetaManager {\n \n   /**\n    * Remove matrices\n+   *\n    * @param matrixIds matrix ids\n    */\n   public void removeMatrices(List<Integer> matrixIds) {\n     int size = matrixIds.size();\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       removeMatrix(matrixIds.get(i));\n     }\n   }\n \n   /**\n    * Remove the stored ps for all matrix partitions\n+   *\n    * @param psId ps id\n    */\n   public void removePs(ParameterServerId psId) {\n-    for(MatrixMeta matrixMeta : matrixIdToMetaMap.values()) {\n+    for (MatrixMeta matrixMeta : matrixIdToMetaMap.values()) {\n       matrixMeta.removePs(psId);\n     }\n   }\n \n   /**\n    * Set the stored pss for a matrix partition\n+   *\n    * @param matrixId matrix id\n-   * @param partId partition id\n-   * @param psIds the stored pss\n+   * @param partId   partition id\n+   * @param psIds    the stored pss\n    */\n   public void setPss(int matrixId, int partId, List<ParameterServerId> psIds) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return;\n     }\n \n@@ -246,13 +258,14 @@ public class MatrixMetaManager {\n \n   /**\n    * Add a the stored ps for a matrix partition\n+   *\n    * @param matrixId matrix id\n    * @param partId\n-   * @param psId ps id\n+   * @param psId     ps id\n    */\n   public void addPs(int matrixId, int partId, ParameterServerId psId) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return;\n     }\n \n@@ -261,12 +274,13 @@ public class MatrixMetaManager {\n \n   /**\n    * Get estimate sparsity\n+   *\n    * @param matrixId matrix id\n    * @return estimate sparsity\n    */\n   public double getEstSparsity(int matrixId) {\n     MatrixMeta meta = matrixIdToMetaMap.get(matrixId);\n-    if(meta == null) {\n+    if (meta == null) {\n       return 1.0;\n     } else {\n       return meta.getEstSparsity();\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/231/MatrixMetaManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/231/MatrixMetaManager.java\nindex f6be897da8e..f8a71bf2c1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/231/MatrixMetaManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/231/MatrixMetaManager.java\n@@ -52,7 +52,7 @@ public class MatrixMetaManager {\n    */\n   public void addMatrices(List<MatrixMeta> matrixMetas) {\n     int size = matrixMetas.size();\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       addMatrix(matrixMetas.get(i));\n     }\n   }\n@@ -73,7 +73,7 @@ public class MatrixMetaManager {\n    */\n   public void removeMatrix(int matrixId) {\n     MatrixMeta meta = matrixIdToMetaMap.remove(matrixId);\n-    if(meta != null) {\n+    if (meta != null) {\n       matrixNameToIdMap.remove(meta.getName());\n     }\n   }\n@@ -110,7 +110,7 @@ public class MatrixMetaManager {\n    */\n   public MatrixMeta getMatrixMeta(String matrixName) {\n     int matrixId = getMatrixId(matrixName);\n-    if(matrixId == -1) {\n+    if (matrixId == -1) {\n       return null;\n     } else {\n       return matrixIdToMetaMap.get(matrixId);\n@@ -149,13 +149,15 @@ public class MatrixMetaManager {\n    * @param matrixId matrix id\n    * @return true means exist\n    */\n-  public boolean exists(int matrixId) { return matrixIdToMetaMap.containsKey(matrixId); }\n+  public boolean exists(int matrixId) {\n+  return matrixIdToMetaMap.containsKey(matrixId);\n+  }\n \n   /**\n    * Get all matrices meta\n    * @return all matrices meta\n    */\n-  public Map<Integer,MatrixMeta> getMatrixMetas() {\n+  public Map<Integer, MatrixMeta> getMatrixMetas() {\n     return matrixIdToMetaMap;\n   }\n \n@@ -167,7 +169,7 @@ public class MatrixMetaManager {\n    */\n   public List<ParameterServerId> getPss(int matrixId, int partId) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return null;\n     }\n \n@@ -201,7 +203,7 @@ public class MatrixMetaManager {\n    */\n   public ParameterServerId getMasterPs(int matrixId, int partId) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return null;\n     }\n \n@@ -214,7 +216,7 @@ public class MatrixMetaManager {\n    */\n   public void removeMatrices(List<Integer> matrixIds) {\n     int size = matrixIds.size();\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       removeMatrix(matrixIds.get(i));\n     }\n   }\n@@ -224,7 +226,7 @@ public class MatrixMetaManager {\n    * @param psId ps id\n    */\n   public void removePs(ParameterServerId psId) {\n-    for(MatrixMeta matrixMeta : matrixIdToMetaMap.values()) {\n+    for (MatrixMeta matrixMeta : matrixIdToMetaMap.values()) {\n       matrixMeta.removePs(psId);\n     }\n   }\n@@ -237,7 +239,7 @@ public class MatrixMetaManager {\n    */\n   public void setPss(int matrixId, int partId, List<ParameterServerId> psIds) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return;\n     }\n \n@@ -252,7 +254,7 @@ public class MatrixMetaManager {\n    */\n   public void addPs(int matrixId, int partId, ParameterServerId psId) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return;\n     }\n \n@@ -266,10 +268,10 @@ public class MatrixMetaManager {\n    */\n   public double getEstSparsity(int matrixId) {\n     MatrixMeta meta = matrixIdToMetaMap.get(matrixId);\n-    if(meta == null) {\n+    if (meta == null) {\n       return 1.0;\n     } else {\n       return meta.getEstSparsity();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/231/MatrixMetaManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/231/MatrixMetaManager.java\nindex f6be897da8e..b885537ef50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/231/MatrixMetaManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/231/MatrixMetaManager.java\n@@ -17,7 +17,6 @@\n package com.tencent.angel.ml.matrix;\n \n import com.tencent.angel.ps.ParameterServerId;\n-\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -26,10 +25,12 @@ import java.util.concurrent.ConcurrentHashMap;\n /**\n  * The matrix meta manager.\n  */\n+\n public class MatrixMetaManager {\n   /**\n    * Matrix id to matrix meta map\n    */\n+\n   private final ConcurrentHashMap<Integer, MatrixMeta> matrixIdToMetaMap;\n \n   /**\n@@ -40,6 +41,7 @@ public class MatrixMetaManager {\n   /**\n    * Creates a new matrix meta manager.\n    */\n+\n   public MatrixMetaManager() {\n     this.matrixIdToMetaMap = new ConcurrentHashMap<>();\n     this.matrixNameToIdMap = new ConcurrentHashMap<>();\n@@ -50,9 +52,10 @@ public class MatrixMetaManager {\n    *\n    * @param matrixMetas the matrix metas\n    */\n+\n   public void addMatrices(List<MatrixMeta> matrixMetas) {\n     int size = matrixMetas.size();\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       addMatrix(matrixMetas.get(i));\n     }\n   }\n@@ -62,6 +65,7 @@ public class MatrixMetaManager {\n    *\n    * @param matrixMeta the matrix meta\n    */\n+\n   public void addMatrix(MatrixMeta matrixMeta) {\n     this.matrixIdToMetaMap.putIfAbsent(matrixMeta.getId(), matrixMeta);\n     this.matrixNameToIdMap.putIfAbsent(matrixMeta.getName(), matrixMeta.getId());\n@@ -71,9 +75,10 @@ public class MatrixMetaManager {\n    * Remove a matrix\n    * @param matrixId matrix id\n    */\n+\n   public void removeMatrix(int matrixId) {\n     MatrixMeta meta = matrixIdToMetaMap.remove(matrixId);\n-    if(meta != null) {\n+    if (meta != null) {\n       matrixNameToIdMap.remove(meta.getName());\n     }\n   }\n@@ -84,6 +89,7 @@ public class MatrixMetaManager {\n    * @param matrixName the matrix name\n    * @return the matrix id\n    */\n+\n   public int getMatrixId(String matrixName) {\n     if (matrixNameToIdMap.containsKey(matrixName)) {\n       return matrixNameToIdMap.get(matrixName);\n@@ -98,6 +104,7 @@ public class MatrixMetaManager {\n    * @param matrixId the matrix id\n    * @return the matrix meta\n    */\n+\n   public MatrixMeta getMatrixMeta(int matrixId) {\n     return matrixIdToMetaMap.get(matrixId);\n   }\n@@ -108,9 +115,10 @@ public class MatrixMetaManager {\n    * @param matrixName the matrix name\n    * @return the matrix meta\n    */\n+\n   public MatrixMeta getMatrixMeta(String matrixName) {\n     int matrixId = getMatrixId(matrixName);\n-    if(matrixId == -1) {\n+    if (matrixId == -1) {\n       return null;\n     } else {\n       return matrixIdToMetaMap.get(matrixId);\n@@ -122,6 +130,7 @@ public class MatrixMetaManager {\n    *\n    * @return the matrix ids\n    */\n+\n   public Set<Integer> getMatrixIds() {\n     return matrixIdToMetaMap.keySet();\n   }\n@@ -131,6 +140,7 @@ public class MatrixMetaManager {\n    *\n    * @return the matrix names\n    */\n+\n   public Set<String> getMatrixNames() {\n     return matrixNameToIdMap.keySet();\n   }\n@@ -140,6 +150,7 @@ public class MatrixMetaManager {\n    * @param matrixName matrix name\n    * @return true means exist\n    */\n+\n   public boolean exists(String matrixName) {\n     return matrixNameToIdMap.containsKey(matrixName);\n   }\n@@ -149,13 +160,17 @@ public class MatrixMetaManager {\n    * @param matrixId matrix id\n    * @return true means exist\n    */\n-  public boolean exists(int matrixId) { return matrixIdToMetaMap.containsKey(matrixId); }\n+\n+  public boolean exists(int matrixId) {\n+    return matrixIdToMetaMap.containsKey(matrixId);\n+  }\n \n   /**\n    * Get all matrices meta\n    * @return all matrices meta\n    */\n-  public Map<Integer,MatrixMeta> getMatrixMetas() {\n+\n+  public Map<Integer, MatrixMeta> getMatrixMetas() {\n     return matrixIdToMetaMap;\n   }\n \n@@ -165,12 +180,12 @@ public class MatrixMetaManager {\n    * @param partId partition id\n    * @return the stored pss\n    */\n+\n   public List<ParameterServerId> getPss(int matrixId, int partId) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return null;\n     }\n-\n     return matrixMeta.getPss(partId);\n   }\n \n@@ -178,8 +193,9 @@ public class MatrixMetaManager {\n    * Remove the matrix\n    * @param matrixName matrix name\n    */\n+\n   public void removeMatrix(String matrixName) {\n-    if(matrixNameToIdMap.containsKey(matrixName)) {\n+    if (matrixNameToIdMap.containsKey(matrixName)) {\n       int matrixId = matrixNameToIdMap.remove(matrixName);\n       matrixIdToMetaMap.remove(matrixId);\n     }\n@@ -188,6 +204,7 @@ public class MatrixMetaManager {\n   /**\n    * Remove all matrices\n    */\n+\n   public void clear() {\n     matrixIdToMetaMap.clear();\n     matrixNameToIdMap.clear();\n@@ -199,12 +216,12 @@ public class MatrixMetaManager {\n    * @param partId partition id\n    * @return the master stored ps\n    */\n+\n   public ParameterServerId getMasterPs(int matrixId, int partId) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return null;\n     }\n-\n     return matrixMeta.getMasterPs(partId);\n   }\n \n@@ -212,9 +229,10 @@ public class MatrixMetaManager {\n    * Remove matrices\n    * @param matrixIds matrix ids\n    */\n+\n   public void removeMatrices(List<Integer> matrixIds) {\n     int size = matrixIds.size();\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       removeMatrix(matrixIds.get(i));\n     }\n   }\n@@ -223,8 +241,9 @@ public class MatrixMetaManager {\n    * Remove the stored ps for all matrix partitions\n    * @param psId ps id\n    */\n+\n   public void removePs(ParameterServerId psId) {\n-    for(MatrixMeta matrixMeta : matrixIdToMetaMap.values()) {\n+    for (MatrixMeta matrixMeta : matrixIdToMetaMap.values()) {\n       matrixMeta.removePs(psId);\n     }\n   }\n@@ -235,12 +254,12 @@ public class MatrixMetaManager {\n    * @param partId partition id\n    * @param psIds the stored pss\n    */\n+\n   public void setPss(int matrixId, int partId, List<ParameterServerId> psIds) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return;\n     }\n-\n     matrixMeta.setPss(partId, psIds);\n   }\n \n@@ -250,12 +269,12 @@ public class MatrixMetaManager {\n    * @param partId\n    * @param psId ps id\n    */\n+\n   public void addPs(int matrixId, int partId, ParameterServerId psId) {\n     MatrixMeta matrixMeta = matrixIdToMetaMap.get(matrixId);\n-    if(matrixMeta == null) {\n+    if (matrixMeta == null) {\n       return;\n     }\n-\n     matrixMeta.addPs(partId, psId);\n   }\n \n@@ -264,12 +283,14 @@ public class MatrixMetaManager {\n    * @param matrixId matrix id\n    * @return estimate sparsity\n    */\n+\n   public double getEstSparsity(int matrixId) {\n     MatrixMeta meta = matrixIdToMetaMap.get(matrixId);\n-    if(meta == null) {\n+    if (meta == null) {\n       return 1.0;\n     } else {\n       return meta.getEstSparsity();\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}