{
    "project_name": "IQSS-dataverse",
    "error_id": "70",
    "information": {
        "errors": [
            {
                "line": "68",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        XMLStreamWriter xmlw = XMLOutputFactory.newInstance().createXMLStreamWriter(outputStream);\n        if (DC_FLAVOR_DCTERMS.equals(dcFlavor)) {\n\t\txmlw.writeStartDocument();\n            xmlw.writeStartElement(\"metadata\");\n            xmlw.writeAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n            xmlw.writeAttribute(\"xmlns:dc\", DC_XML_NAMESPACE);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/70/DublinCoreExportUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/70/DublinCoreExportUtil.java\nindex a4ee78ee3a8..5c674f8bc3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/70/DublinCoreExportUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/70/DublinCoreExportUtil.java\n@@ -65,7 +65,7 @@ public class DublinCoreExportUtil {\n     private static void dto2dublincore(DatasetDTO datasetDto, OutputStream outputStream, String dcFlavor) throws XMLStreamException {\n         XMLStreamWriter xmlw = XMLOutputFactory.newInstance().createXMLStreamWriter(outputStream);\n         if (DC_FLAVOR_DCTERMS.equals(dcFlavor)) {\n-\t\txmlw.writeStartDocument();\n+            xmlw.writeStartDocument();\n             xmlw.writeStartElement(\"metadata\");\n             xmlw.writeAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n             xmlw.writeAttribute(\"xmlns:dc\", DC_XML_NAMESPACE);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/70/DublinCoreExportUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/70/DublinCoreExportUtil.java\nindex a4ee78ee3a8..8fd001beaff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/70/DublinCoreExportUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/70/DublinCoreExportUtil.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse.export.dublincore;\n \n import com.google.gson.Gson;\n@@ -28,474 +29,487 @@ import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamWriter;\n \n /**\n- *\n  * @author skraffmi\n  */\n public class DublinCoreExportUtil {\n- \n-    private static final Logger logger = Logger.getLogger(DdiExportUtil.class.getCanonicalName());\n-    \n-    public static String OAI_DC_XML_NAMESPACE = \"http://www.openarchives.org/OAI/2.0/oai_dc/\"; \n-    public static String OAI_DC_XML_SCHEMALOCATION = \"http://www.openarchives.org/OAI/2.0/oai_dc.xsd\";\n-    \n-    public static String DC_XML_NAMESPACE = \"http://purl.org/dc/elements/1.1/\";\n-    \n-    public static String DCTERMS_XML_NAMESPACE = \"http://purl.org/dc/terms/\";\n-    public static String DCTERMS_DEFAULT_NAMESPACE=\"http://dublincore.org/documents/dcmi-terms/\";\n-    public static String DCTERMS_XML_SCHEMALOCATION=\"http://dublincore.org/schemas/xmls/qdc/dcterms.xsd\";\n-    public static String DEFAULT_XML_VERSION = \"2.0\";\n-    \n-    public static String DC_FLAVOR_OAI = \"dc\";\n-    public static String DC_FLAVOR_DCTERMS = \"dcterms\";\n-    \n-    public static String DEFAULT_DC_FLAVOR = DC_FLAVOR_DCTERMS;\n-\n-        \n-    public static void datasetJson2dublincore(JsonObject datasetDtoAsJson, OutputStream outputStream, String dcFlavor) throws XMLStreamException {\n-        logger.fine(JsonUtil.prettyPrint(datasetDtoAsJson.toString()));\n-        Gson gson = new Gson();\n-        DatasetDTO datasetDto = gson.fromJson(datasetDtoAsJson.toString(), DatasetDTO.class);\n-        //try {\n-        dto2dublincore(datasetDto, outputStream, dcFlavor);\n-        //} catch (XMLStreamException ex) {\n-        //    Logger.getLogger(DdiExportUtil.class.getName()).log(Level.SEVERE, null, ex);\n-        //}\n-    }\n-    \n-    private static void dto2dublincore(DatasetDTO datasetDto, OutputStream outputStream, String dcFlavor) throws XMLStreamException {\n-        XMLStreamWriter xmlw = XMLOutputFactory.newInstance().createXMLStreamWriter(outputStream);\n-        if (DC_FLAVOR_DCTERMS.equals(dcFlavor)) {\n-\t\txmlw.writeStartDocument();\n-            xmlw.writeStartElement(\"metadata\");\n-            xmlw.writeAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n-            xmlw.writeAttribute(\"xmlns:dc\", DC_XML_NAMESPACE);\n-            xmlw.writeAttribute(\"xmlns:dcterms\", DCTERMS_XML_NAMESPACE);\n-            xmlw.writeDefaultNamespace(DCTERMS_DEFAULT_NAMESPACE);\n-            //xmlw.writeAttribute(\"xsi:schemaLocation\", DCTERMS_DEFAULT_NAMESPACE+\" \"+DCTERMS_XML_SCHEMALOCATION);\n-            createDC(xmlw, datasetDto, dcFlavor);\n-        } else if (DC_FLAVOR_OAI.equals(dcFlavor)) {      \n-            xmlw.writeStartElement(\"oai_dc:dc\");        \n-            xmlw.writeAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n-            xmlw.writeAttribute(\"xmlns:oai_dc\", OAI_DC_XML_NAMESPACE);\n-            xmlw.writeAttribute(\"xmlns:dc\", DC_XML_NAMESPACE);\n-            xmlw.writeAttribute(\"xsi:schemaLocation\", OAI_DC_XML_NAMESPACE+\" \"+OAI_DC_XML_SCHEMALOCATION);\n-            //writeAttribute(xmlw, \"version\", DEFAULT_XML_VERSION);\n-            createOAIDC(xmlw, datasetDto, dcFlavor);\n-        }\n-        \n-        \n-        xmlw.writeEndElement(); // <metadata> or <oai_dc:dc>\n-        xmlw.flush();\n-    }\n-    \n-    //UPDATED by rmo-cdsp:\n-    // If the requested flavor is \"OAI_DC\" (the minimal, original 15 field format), \n-    // we shuld NOT be exporting the extended, DCTERMS fields (aka not createDC)\n-    // - such as, for example, \"dateSubmitted\" ... (4.5.1?)\n-    // -- L.A. \n-    // but use createOAIDC instead (the minimal, original 15 field format)\n-    \n-    private static void createDC(XMLStreamWriter xmlw, DatasetDTO datasetDto, String dcFlavor) throws XMLStreamException {\n-        DatasetVersionDTO version = datasetDto.getDatasetVersion();\n-        String persistentAgency = datasetDto.getProtocol();\n-        String persistentAuthority = datasetDto.getAuthority();\n-        String persistentId = datasetDto.getIdentifier();\n-        GlobalId globalId = new GlobalId(persistentAgency, persistentAuthority, persistentId);\n-  \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"title\", dto2Primitive(version, DatasetFieldConstant.title));                       \n-        \n-        xmlw.writeStartElement(dcFlavor+\":\"+\"identifier\");\n-        xmlw.writeCharacters(globalId.toURL().toString());\n-        xmlw.writeEndElement(); // decterms:identifier       \n-\n-        writeAuthorsElement(xmlw, version, dcFlavor);\n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"publisher\", datasetDto.getPublisher());\n-        writeFullElement(xmlw, dcFlavor+\":\"+\"issued\", datasetDto.getPublicationDate());\n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"modified\", datasetDto.getDatasetVersion().getLastUpdateTime());\n-        writeAbstractElement(xmlw, version, dcFlavor); // Description\n-        writeSubjectElement(xmlw, version, dcFlavor);   //Subjects and Key Words\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"language\", dto2PrimitiveList(version, DatasetFieldConstant.language));        \n-        \n-        writeRelPublElement(xmlw, version, dcFlavor);\n-        writeFullElement(xmlw, dcFlavor+\":\"+\"date\", dto2Primitive(version, DatasetFieldConstant.productionDate));  \n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"contributor\", dto2Primitive(version, DatasetFieldConstant.depositor));  \n-        \n-        writeContributorElement(xmlw, version, dcFlavor);\n-        writeFullElement(xmlw, dcFlavor+\":\"+\"dateSubmitted\", dto2Primitive(version, DatasetFieldConstant.dateOfDeposit));  \n-        \n-        writeTimeElements(xmlw, version, dcFlavor);\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"relation\", dto2PrimitiveList(version, DatasetFieldConstant.relatedDatasets));\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"type\", dto2PrimitiveList(version, DatasetFieldConstant.kindOfData));\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"source\", dto2PrimitiveList(version, DatasetFieldConstant.dataSources));\n-        \n-        //Geo Elements\n-        writeSpatialElements(xmlw, version, dcFlavor);\n-        \n-        //License and Terms\n-        writeFullElement(xmlw, dcFlavor+\":\"+\"license\", version.getLicense());        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"rights\", version.getTermsOfUse()); \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"rights\", version.getRestrictions()); \n \n-    }\n-    \n-    private static void createOAIDC(XMLStreamWriter xmlw, DatasetDTO datasetDto, String dcFlavor) throws XMLStreamException {\n-        DatasetVersionDTO version = datasetDto.getDatasetVersion();\n-        String persistentAgency = datasetDto.getProtocol();\n-        String persistentAuthority = datasetDto.getAuthority();\n-        String persistentId = datasetDto.getIdentifier();\n-        GlobalId globalId = new GlobalId(persistentAgency, persistentAuthority, persistentId);\n-  \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"title\", dto2Primitive(version, DatasetFieldConstant.title));                       \n-        \n-        xmlw.writeStartElement(dcFlavor+\":\"+\"identifier\");\n-        xmlw.writeCharacters(globalId.toURL().toString());\n-        xmlw.writeEndElement(); // decterms:identifier       \n-\n-        writeAuthorsElement(xmlw, version, dcFlavor); //creator\n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"publisher\", datasetDto.getPublisher());\n-        \n-        writeAbstractElement(xmlw, version, dcFlavor); // Description\n-        writeSubjectElement(xmlw, version, dcFlavor);   //Subjects and Key Words\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"language\", dto2PrimitiveList(version, DatasetFieldConstant.language));        \n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"date\", dto2Primitive(version, DatasetFieldConstant.productionDate));  \n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"contributor\", dto2Primitive(version, DatasetFieldConstant.depositor));  \n-        \n-        writeContributorElement(xmlw, version, dcFlavor);\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"relation\", dto2PrimitiveList(version, DatasetFieldConstant.relatedDatasets));\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"type\", dto2PrimitiveList(version, DatasetFieldConstant.kindOfData));\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"source\", dto2PrimitiveList(version, DatasetFieldConstant.dataSources));\n-        \n+  private static final Logger logger = Logger.getLogger(DdiExportUtil.class.getCanonicalName());\n+\n+  public static String OAI_DC_XML_NAMESPACE = \"http://www.openarchives.org/OAI/2.0/oai_dc/\";\n+  public static String OAI_DC_XML_SCHEMALOCATION = \"http://www.openarchives.org/OAI/2.0/oai_dc.xsd\";\n+\n+  public static String DC_XML_NAMESPACE = \"http://purl.org/dc/elements/1.1/\";\n+\n+  public static String DCTERMS_XML_NAMESPACE = \"http://purl.org/dc/terms/\";\n+  public static String DCTERMS_DEFAULT_NAMESPACE = \"http://dublincore.org/documents/dcmi-terms/\";\n+  public static String DCTERMS_XML_SCHEMALOCATION = \"http://dublincore.org/schemas/xmls/qdc/dcterms.xsd\";\n+  public static String DEFAULT_XML_VERSION = \"2.0\";\n+\n+  public static String DC_FLAVOR_OAI = \"dc\";\n+  public static String DC_FLAVOR_DCTERMS = \"dcterms\";\n+\n+  public static String DEFAULT_DC_FLAVOR = DC_FLAVOR_DCTERMS;\n+\n \n+  public static void datasetJson2dublincore(JsonObject datasetDtoAsJson, OutputStream outputStream, String dcFlavor)\n+    throws XMLStreamException {\n+    logger.fine(JsonUtil.prettyPrint(datasetDtoAsJson.toString()));\n+    Gson gson = new Gson();\n+    DatasetDTO datasetDto = gson.fromJson(datasetDtoAsJson.toString(), DatasetDTO.class);\n+    //try {\n+    dto2dublincore(datasetDto, outputStream, dcFlavor);\n+    //} catch (XMLStreamException ex) {\n+    //    Logger.getLogger(DdiExportUtil.class.getName()).log(Level.SEVERE, null, ex);\n+    //}\n+  }\n+\n+  private static void dto2dublincore(DatasetDTO datasetDto, OutputStream outputStream, String dcFlavor)\n+    throws XMLStreamException {\n+    XMLStreamWriter xmlw = XMLOutputFactory.newInstance().createXMLStreamWriter(outputStream);\n+    if (DC_FLAVOR_DCTERMS.equals(dcFlavor)) {\n+      xmlw.writeStartDocument();\n+      xmlw.writeStartElement(\"metadata\");\n+      xmlw.writeAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n+      xmlw.writeAttribute(\"xmlns:dc\", DC_XML_NAMESPACE);\n+      xmlw.writeAttribute(\"xmlns:dcterms\", DCTERMS_XML_NAMESPACE);\n+      xmlw.writeDefaultNamespace(DCTERMS_DEFAULT_NAMESPACE);\n+      //xmlw.writeAttribute(\"xsi:schemaLocation\", DCTERMS_DEFAULT_NAMESPACE+\" \"+DCTERMS_XML_SCHEMALOCATION);\n+      createDC(xmlw, datasetDto, dcFlavor);\n+    } else if (DC_FLAVOR_OAI.equals(dcFlavor)) {\n+      xmlw.writeStartElement(\"oai_dc:dc\");\n+      xmlw.writeAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n+      xmlw.writeAttribute(\"xmlns:oai_dc\", OAI_DC_XML_NAMESPACE);\n+      xmlw.writeAttribute(\"xmlns:dc\", DC_XML_NAMESPACE);\n+      xmlw.writeAttribute(\"xsi:schemaLocation\", OAI_DC_XML_NAMESPACE + \" \" + OAI_DC_XML_SCHEMALOCATION);\n+      //writeAttribute(xmlw, \"version\", DEFAULT_XML_VERSION);\n+      createOAIDC(xmlw, datasetDto, dcFlavor);\n     }\n-    \n-    private static void writeAuthorsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n-\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.author.equals(fieldDTO.getTypeName())) {\n-                        String authorName = \"\";\n-                        for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n-                            for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.authorName.equals(next.getTypeName())) {\n-                                    authorName = next.getSinglePrimitive();\n-                                }\n-                            }\n-                            if (!authorName.isEmpty()) {\n-                                xmlw.writeStartElement(dcFlavor+\":\"+\"creator\");\n-                                xmlw.writeCharacters(authorName);\n-                                xmlw.writeEndElement(); //AuthEnty\n-                            }\n-                        }\n-                    }\n+\n+\n+    xmlw.writeEndElement(); // <metadata> or <oai_dc:dc>\n+    xmlw.flush();\n+  }\n+\n+  //UPDATED by rmo-cdsp:\n+  // If the requested flavor is \"OAI_DC\" (the minimal, original 15 field format),\n+  // we shuld NOT be exporting the extended, DCTERMS fields (aka not createDC)\n+  // - such as, for example, \"dateSubmitted\" ... (4.5.1?)\n+  // -- L.A.\n+  // but use createOAIDC instead (the minimal, original 15 field format)\n+\n+  private static void createDC(XMLStreamWriter xmlw, DatasetDTO datasetDto, String dcFlavor) throws XMLStreamException {\n+    DatasetVersionDTO version = datasetDto.getDatasetVersion();\n+    String persistentAgency = datasetDto.getProtocol();\n+    String persistentAuthority = datasetDto.getAuthority();\n+    String persistentId = datasetDto.getIdentifier();\n+    GlobalId globalId = new GlobalId(persistentAgency, persistentAuthority, persistentId);\n+\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"title\", dto2Primitive(version, DatasetFieldConstant.title));\n+\n+    xmlw.writeStartElement(dcFlavor + \":\" + \"identifier\");\n+    xmlw.writeCharacters(globalId.toURL().toString());\n+    xmlw.writeEndElement(); // decterms:identifier\n+\n+    writeAuthorsElement(xmlw, version, dcFlavor);\n+\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"publisher\", datasetDto.getPublisher());\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"issued\", datasetDto.getPublicationDate());\n+\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"modified\", datasetDto.getDatasetVersion().getLastUpdateTime());\n+    writeAbstractElement(xmlw, version, dcFlavor); // Description\n+    writeSubjectElement(xmlw, version, dcFlavor);   //Subjects and Key Words\n+\n+    writeFullElementList(xmlw, dcFlavor + \":\" + \"language\", dto2PrimitiveList(version, DatasetFieldConstant.language));\n+\n+    writeRelPublElement(xmlw, version, dcFlavor);\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"date\", dto2Primitive(version, DatasetFieldConstant.productionDate));\n+\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"contributor\", dto2Primitive(version, DatasetFieldConstant.depositor));\n+\n+    writeContributorElement(xmlw, version, dcFlavor);\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"dateSubmitted\",\n+      dto2Primitive(version, DatasetFieldConstant.dateOfDeposit));\n+\n+    writeTimeElements(xmlw, version, dcFlavor);\n+\n+    writeFullElementList(xmlw, dcFlavor + \":\" + \"relation\",\n+      dto2PrimitiveList(version, DatasetFieldConstant.relatedDatasets));\n+\n+    writeFullElementList(xmlw, dcFlavor + \":\" + \"type\", dto2PrimitiveList(version, DatasetFieldConstant.kindOfData));\n+\n+    writeFullElementList(xmlw, dcFlavor + \":\" + \"source\", dto2PrimitiveList(version, DatasetFieldConstant.dataSources));\n+\n+    //Geo Elements\n+    writeSpatialElements(xmlw, version, dcFlavor);\n+\n+    //License and Terms\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"license\", version.getLicense());\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"rights\", version.getTermsOfUse());\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"rights\", version.getRestrictions());\n+\n+  }\n+\n+  private static void createOAIDC(XMLStreamWriter xmlw, DatasetDTO datasetDto, String dcFlavor)\n+    throws XMLStreamException {\n+    DatasetVersionDTO version = datasetDto.getDatasetVersion();\n+    String persistentAgency = datasetDto.getProtocol();\n+    String persistentAuthority = datasetDto.getAuthority();\n+    String persistentId = datasetDto.getIdentifier();\n+    GlobalId globalId = new GlobalId(persistentAgency, persistentAuthority, persistentId);\n+\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"title\", dto2Primitive(version, DatasetFieldConstant.title));\n+\n+    xmlw.writeStartElement(dcFlavor + \":\" + \"identifier\");\n+    xmlw.writeCharacters(globalId.toURL().toString());\n+    xmlw.writeEndElement(); // decterms:identifier\n+\n+    writeAuthorsElement(xmlw, version, dcFlavor); //creator\n+\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"publisher\", datasetDto.getPublisher());\n+\n+    writeAbstractElement(xmlw, version, dcFlavor); // Description\n+    writeSubjectElement(xmlw, version, dcFlavor);   //Subjects and Key Words\n+\n+    writeFullElementList(xmlw, dcFlavor + \":\" + \"language\", dto2PrimitiveList(version, DatasetFieldConstant.language));\n+\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"date\", dto2Primitive(version, DatasetFieldConstant.productionDate));\n+\n+    writeFullElement(xmlw, dcFlavor + \":\" + \"contributor\", dto2Primitive(version, DatasetFieldConstant.depositor));\n+\n+    writeContributorElement(xmlw, version, dcFlavor);\n+\n+    writeFullElementList(xmlw, dcFlavor + \":\" + \"relation\",\n+      dto2PrimitiveList(version, DatasetFieldConstant.relatedDatasets));\n+\n+    writeFullElementList(xmlw, dcFlavor + \":\" + \"type\", dto2PrimitiveList(version, DatasetFieldConstant.kindOfData));\n+\n+    writeFullElementList(xmlw, dcFlavor + \":\" + \"source\", dto2PrimitiveList(version, DatasetFieldConstant.dataSources));\n+\n+\n+  }\n+\n+  private static void writeAuthorsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor)\n+    throws XMLStreamException {\n+\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.author.equals(fieldDTO.getTypeName())) {\n+            String authorName = \"\";\n+            for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n+              for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.authorName.equals(next.getTypeName())) {\n+                  authorName = next.getSinglePrimitive();\n                 }\n+              }\n+              if (!authorName.isEmpty()) {\n+                xmlw.writeStartElement(dcFlavor + \":\" + \"creator\");\n+                xmlw.writeCharacters(authorName);\n+                xmlw.writeEndElement(); //AuthEnty\n+              }\n             }\n+          }\n         }\n+      }\n     }\n-    \n-    private static void writeAbstractElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.description.equals(fieldDTO.getTypeName())) {\n-                        String descriptionText = \"\";\n-                        for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n-                            for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.descriptionText.equals(next.getTypeName())) {\n-                                    descriptionText =  next.getSinglePrimitive();\n-                                }\n-                            }\n-                            if (!descriptionText.isEmpty()){\n-                                xmlw.writeStartElement(dcFlavor+\":\"+\"description\");  \n-                                xmlw.writeCharacters(descriptionText);\n-                                xmlw.writeEndElement(); //abstract\n-                            }\n-                        }\n-                    }\n+  }\n+\n+  private static void writeAbstractElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor)\n+    throws XMLStreamException {\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.description.equals(fieldDTO.getTypeName())) {\n+            String descriptionText = \"\";\n+            for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n+              for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.descriptionText.equals(next.getTypeName())) {\n+                  descriptionText = next.getSinglePrimitive();\n                 }\n+              }\n+              if (!descriptionText.isEmpty()) {\n+                xmlw.writeStartElement(dcFlavor + \":\" + \"description\");\n+                xmlw.writeCharacters(descriptionText);\n+                xmlw.writeEndElement(); //abstract\n+              }\n             }\n+          }\n         }\n+      }\n     }\n-    \n-    private static void writeSubjectElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException{ \n-        \n-        //Key Words and Subject\n-      \n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.subject.equals(fieldDTO.getTypeName())){\n-                        for ( String subject : fieldDTO.getMultipleVocab()){\n-                            xmlw.writeStartElement(dcFlavor+\":\"+\"subject\");\n-                            xmlw.writeCharacters(subject);\n-                            xmlw.writeEndElement(); //Keyword\n-                        }\n-                    }\n-                    \n-                    if (DatasetFieldConstant.keyword.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n-                            String keywordValue = \"\";\n-                            for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.keywordValue.equals(next.getTypeName())) {\n-                                    keywordValue =  next.getSinglePrimitive();\n-                                }\n-                            }\n-                            if (!keywordValue.isEmpty()){\n-                                xmlw.writeStartElement(dcFlavor+\":\"+\"subject\"); \n-                                xmlw.writeCharacters(keywordValue);\n-                                xmlw.writeEndElement(); //Keyword\n-                            }\n-                        }\n-                    }\n-                }\n+  }\n+\n+  private static void writeSubjectElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor)\n+    throws XMLStreamException {\n+\n+    //Key Words and Subject\n+\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.subject.equals(fieldDTO.getTypeName())) {\n+            for (String subject : fieldDTO.getMultipleVocab()) {\n+              xmlw.writeStartElement(dcFlavor + \":\" + \"subject\");\n+              xmlw.writeCharacters(subject);\n+              xmlw.writeEndElement(); //Keyword\n             }\n-        }             \n-    }\n-    \n-    private static void writeRelPublElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.publication.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n-                            String pubString = \"\";\n-                            String citation = \"\";\n-                            String IDType = \"\";\n-                            String IDNo = \"\";\n-                            String url = \"\";\n-                            for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.publicationCitation.equals(next.getTypeName())) {\n-                                    citation =  next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.publicationIDType.equals(next.getTypeName())) {\n-                                    IDType =  next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.publicationIDNumber.equals(next.getTypeName())) {\n-                                    IDNo =   next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.publicationURL.equals(next.getTypeName())) {\n-                                    url =  next.getSinglePrimitive();\n-                                }\n-                            }\n-                            pubString = appendCommaSeparatedValue(citation, IDType);\n-                            pubString = appendCommaSeparatedValue(pubString, IDNo);\n-                            pubString = appendCommaSeparatedValue(pubString, url);\n-                            if (!pubString.isEmpty()){\n-                                xmlw.writeStartElement(dcFlavor+\":\"+\"isReferencedBy\"); \n-                                xmlw.writeCharacters(pubString);\n-                                xmlw.writeEndElement(); //relPubl\n-                            }\n-                        }\n-                    }\n+          }\n+\n+          if (DatasetFieldConstant.keyword.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n+              String keywordValue = \"\";\n+              for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.keywordValue.equals(next.getTypeName())) {\n+                  keywordValue = next.getSinglePrimitive();\n                 }\n+              }\n+              if (!keywordValue.isEmpty()) {\n+                xmlw.writeStartElement(dcFlavor + \":\" + \"subject\");\n+                xmlw.writeCharacters(keywordValue);\n+                xmlw.writeEndElement(); //Keyword\n+              }\n             }\n+          }\n         }\n+      }\n     }\n-    \n-    private static void writeContributorElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.contributor.equals(fieldDTO.getTypeName())) {\n-                        String contributorName = \"\";\n-                        for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n-                            for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.contributorName.equals(next.getTypeName())) {\n-                                    contributorName =  next.getSinglePrimitive();\n-                                }\n-                            }\n-                            if (!contributorName.isEmpty()){\n-                                xmlw.writeStartElement(dcFlavor+\":\"+\"contributor\");  \n-                                xmlw.writeCharacters(contributorName);\n-                                xmlw.writeEndElement(); //abstract\n-                            }\n-                        }\n-                    }\n+  }\n+\n+  private static void writeRelPublElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor)\n+    throws XMLStreamException {\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.publication.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n+              String pubString = \"\";\n+              String citation = \"\";\n+              String IDType = \"\";\n+              String IDNo = \"\";\n+              String url = \"\";\n+              for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.publicationCitation.equals(next.getTypeName())) {\n+                  citation = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.publicationIDType.equals(next.getTypeName())) {\n+                  IDType = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.publicationIDNumber.equals(next.getTypeName())) {\n+                  IDNo = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.publicationURL.equals(next.getTypeName())) {\n+                  url = next.getSinglePrimitive();\n                 }\n+              }\n+              pubString = appendCommaSeparatedValue(citation, IDType);\n+              pubString = appendCommaSeparatedValue(pubString, IDNo);\n+              pubString = appendCommaSeparatedValue(pubString, url);\n+              if (!pubString.isEmpty()) {\n+                xmlw.writeStartElement(dcFlavor + \":\" + \"isReferencedBy\");\n+                xmlw.writeCharacters(pubString);\n+                xmlw.writeEndElement(); //relPubl\n+              }\n             }\n+          }\n         }\n+      }\n     }\n+  }\n \n-    private static void writeTimeElements(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.timePeriodCovered.equals(fieldDTO.getTypeName())) {\n-                        String dateValStart = \"\";\n-                        String dateValEnd = \"\";\n-                        for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n-                            for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.timePeriodCoveredStart.equals(next.getTypeName())) {\n-                                    dateValStart = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.timePeriodCoveredEnd.equals(next.getTypeName())) {\n-                                    dateValEnd = next.getSinglePrimitive();\n-                                }\n-                            }\n-                            if (!dateValStart.isEmpty()) {\n-                                writeFullElement(xmlw, dcFlavor+\":\"+\"temporal\", dateValStart); \n-                            }\n-                            if (!dateValEnd.isEmpty()) {\n-                                writeFullElement(xmlw, dcFlavor+\":\"+\"temporal\", dateValEnd); \n-                            }\n-                        }\n-                    }\n-                    if (DatasetFieldConstant.dateOfCollection.equals(fieldDTO.getTypeName())) {\n-                        String dateValStart = \"\";\n-                        String dateValEnd = \"\";\n-                        for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n-                            for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.dateOfCollectionStart.equals(next.getTypeName())) {\n-                                    dateValStart = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.dateOfCollectionEnd.equals(next.getTypeName())) {\n-                                    dateValEnd = next.getSinglePrimitive();\n-                                }\n-                            }\n-                            if (!dateValStart.isEmpty()) {\n-                               writeFullElement(xmlw, dcFlavor+\":\"+\"temporal\", dateValStart); \n-                            }\n-                            if (!dateValEnd.isEmpty()) {\n-                                writeFullElement(xmlw, dcFlavor+\":\"+\"temporal\", dateValEnd); \n-                            }\n-                        }\n-                    }\n+  private static void writeContributorElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO,\n+                                              String dcFlavor) throws XMLStreamException {\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.contributor.equals(fieldDTO.getTypeName())) {\n+            String contributorName = \"\";\n+            for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n+              for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.contributorName.equals(next.getTypeName())) {\n+                  contributorName = next.getSinglePrimitive();\n                 }\n+              }\n+              if (!contributorName.isEmpty()) {\n+                xmlw.writeStartElement(dcFlavor + \":\" + \"contributor\");\n+                xmlw.writeCharacters(contributorName);\n+                xmlw.writeEndElement(); //abstract\n+              }\n             }\n-        }    \n+          }\n+        }\n+      }\n     }\n-    \n-        private static void writeSpatialElements(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if(\"geospatial\".equals(key)){                \n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.geographicCoverage.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n-                            for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.country.equals(next.getTypeName())) {\n-                                    writeFullElement(xmlw, dcFlavor+\":\"+\"spatial\", next.getSinglePrimitive());\n-                                }\n-                                if (DatasetFieldConstant.city.equals(next.getTypeName())) {\n-                                    writeFullElement(xmlw, dcFlavor+\":\"+\"spatial\", next.getSinglePrimitive());\n-                                }\n-                                if (DatasetFieldConstant.state.equals(next.getTypeName())) {\n-                                    writeFullElement(xmlw, dcFlavor+\":\"+\"spatial\", next.getSinglePrimitive());\n-                                } \n-                                if (DatasetFieldConstant.otherGeographicCoverage.equals(next.getTypeName())) {\n-                                    writeFullElement(xmlw, dcFlavor+\":\"+\"spatial\", next.getSinglePrimitive());\n-                                } \n-                            }\n-                        }\n-                    }\n+  }\n+\n+  private static void writeTimeElements(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor)\n+    throws XMLStreamException {\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.timePeriodCovered.equals(fieldDTO.getTypeName())) {\n+            String dateValStart = \"\";\n+            String dateValEnd = \"\";\n+            for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n+              for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.timePeriodCoveredStart.equals(next.getTypeName())) {\n+                  dateValStart = next.getSinglePrimitive();\n                 }\n+                if (DatasetFieldConstant.timePeriodCoveredEnd.equals(next.getTypeName())) {\n+                  dateValEnd = next.getSinglePrimitive();\n+                }\n+              }\n+              if (!dateValStart.isEmpty()) {\n+                writeFullElement(xmlw, dcFlavor + \":\" + \"temporal\", dateValStart);\n+              }\n+              if (!dateValEnd.isEmpty()) {\n+                writeFullElement(xmlw, dcFlavor + \":\" + \"temporal\", dateValEnd);\n+              }\n             }\n-        }   \n-    }\n-    \n-    private static String appendCommaSeparatedValue(String inVal, String next) {\n-        if (!next.isEmpty()) {\n-            if (!inVal.isEmpty()) {\n-                return inVal + \", \" + next;\n-            } else {\n-                return next;\n-            }\n-        }\n-        return inVal;\n-    }\n-    \n-    \n-    private static String dto2Primitive(DatasetVersionDTO datasetVersionDTO, String datasetFieldTypeName) {\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            MetadataBlockDTO value = entry.getValue();\n-            for (FieldDTO fieldDTO : value.getFields()) {\n-                if (datasetFieldTypeName.equals(fieldDTO.getTypeName())) {\n-                    return fieldDTO.getSinglePrimitive();\n+          }\n+          if (DatasetFieldConstant.dateOfCollection.equals(fieldDTO.getTypeName())) {\n+            String dateValStart = \"\";\n+            String dateValEnd = \"\";\n+            for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n+              for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.dateOfCollectionStart.equals(next.getTypeName())) {\n+                  dateValStart = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.dateOfCollectionEnd.equals(next.getTypeName())) {\n+                  dateValEnd = next.getSinglePrimitive();\n                 }\n+              }\n+              if (!dateValStart.isEmpty()) {\n+                writeFullElement(xmlw, dcFlavor + \":\" + \"temporal\", dateValStart);\n+              }\n+              if (!dateValEnd.isEmpty()) {\n+                writeFullElement(xmlw, dcFlavor + \":\" + \"temporal\", dateValEnd);\n+              }\n             }\n+          }\n         }\n-        return null;\n+      }\n     }\n-    \n-    private static List<String> dto2PrimitiveList(DatasetVersionDTO datasetVersionDTO, String datasetFieldTypeName) {\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            MetadataBlockDTO value = entry.getValue();\n-            for (FieldDTO fieldDTO : value.getFields()) {\n-                if (datasetFieldTypeName.equals(fieldDTO.getTypeName())) {\n-                    return fieldDTO.getMultiplePrimitive();\n+  }\n+\n+  private static void writeSpatialElements(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor)\n+    throws XMLStreamException {\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"geospatial\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.geographicCoverage.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n+              for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.country.equals(next.getTypeName())) {\n+                  writeFullElement(xmlw, dcFlavor + \":\" + \"spatial\", next.getSinglePrimitive());\n+                }\n+                if (DatasetFieldConstant.city.equals(next.getTypeName())) {\n+                  writeFullElement(xmlw, dcFlavor + \":\" + \"spatial\", next.getSinglePrimitive());\n+                }\n+                if (DatasetFieldConstant.state.equals(next.getTypeName())) {\n+                  writeFullElement(xmlw, dcFlavor + \":\" + \"spatial\", next.getSinglePrimitive());\n                 }\n+                if (DatasetFieldConstant.otherGeographicCoverage.equals(next.getTypeName())) {\n+                  writeFullElement(xmlw, dcFlavor + \":\" + \"spatial\", next.getSinglePrimitive());\n+                }\n+              }\n             }\n+          }\n         }\n-        return null;\n+      }\n     }\n-    \n-    private static void writeFullElementList(XMLStreamWriter xmlw, String name, List<String> values) throws XMLStreamException {\n-        //For the simplest Elements we can \n-        if (values != null && !values.isEmpty()) {\n-            for (String value : values) {\n-                xmlw.writeStartElement(name);\n-                xmlw.writeCharacters(value);\n-                xmlw.writeEndElement(); // labl\n-            }\n-        }\n+  }\n+\n+  private static String appendCommaSeparatedValue(String inVal, String next) {\n+    if (!next.isEmpty()) {\n+      if (!inVal.isEmpty()) {\n+        return inVal + \", \" + next;\n+      } else {\n+        return next;\n+      }\n     }\n-    \n-    \n-    private static void writeFullElement (XMLStreamWriter xmlw, String name, String value) throws XMLStreamException {\n-        //For the simplest Elements we can \n-        if (!StringUtilisEmpty(value)) {\n-            xmlw.writeStartElement(name);\n-            xmlw.writeCharacters(value);\n-            xmlw.writeEndElement(); // labl\n+    return inVal;\n+  }\n+\n+\n+  private static String dto2Primitive(DatasetVersionDTO datasetVersionDTO, String datasetFieldTypeName) {\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      MetadataBlockDTO value = entry.getValue();\n+      for (FieldDTO fieldDTO : value.getFields()) {\n+        if (datasetFieldTypeName.equals(fieldDTO.getTypeName())) {\n+          return fieldDTO.getSinglePrimitive();\n         }\n+      }\n     }\n+    return null;\n+  }\n \n-    private static void writeAttribute(XMLStreamWriter xmlw, String name, String value) throws XMLStreamException {\n-        if (!StringUtilisEmpty(value)) {\n-            xmlw.writeAttribute(name, value);\n+  private static List<String> dto2PrimitiveList(DatasetVersionDTO datasetVersionDTO, String datasetFieldTypeName) {\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      MetadataBlockDTO value = entry.getValue();\n+      for (FieldDTO fieldDTO : value.getFields()) {\n+        if (datasetFieldTypeName.equals(fieldDTO.getTypeName())) {\n+          return fieldDTO.getMultiplePrimitive();\n         }\n+      }\n     }\n+    return null;\n+  }\n \n-    private static boolean StringUtilisEmpty(String str) {\n-        if (str == null || str.trim().equals(\"\")) {\n-            return true;\n-        }\n-        return false;\n+  private static void writeFullElementList(XMLStreamWriter xmlw, String name, List<String> values)\n+    throws XMLStreamException {\n+    //For the simplest Elements we can\n+    if (values != null && !values.isEmpty()) {\n+      for (String value : values) {\n+        xmlw.writeStartElement(name);\n+        xmlw.writeCharacters(value);\n+        xmlw.writeEndElement(); // labl\n+      }\n+    }\n+  }\n+\n+\n+  private static void writeFullElement(XMLStreamWriter xmlw, String name, String value) throws XMLStreamException {\n+    //For the simplest Elements we can\n+    if (!StringUtilisEmpty(value)) {\n+      xmlw.writeStartElement(name);\n+      xmlw.writeCharacters(value);\n+      xmlw.writeEndElement(); // labl\n     }\n-    \n+  }\n+\n+  private static void writeAttribute(XMLStreamWriter xmlw, String name, String value) throws XMLStreamException {\n+    if (!StringUtilisEmpty(value)) {\n+      xmlw.writeAttribute(name, value);\n+    }\n+  }\n+\n+  private static boolean StringUtilisEmpty(String str) {\n+    if (str == null || str.trim().equals(\"\")) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n }\n",
            "diff_size": 679
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/70/DublinCoreExportUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/70/DublinCoreExportUtil.java\nindex a4ee78ee3a8..653923af710 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/70/DublinCoreExportUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/70/DublinCoreExportUtil.java\n@@ -31,26 +31,32 @@ import javax.xml.stream.XMLStreamWriter;\n  *\n  * @author skraffmi\n  */\n+\n+\n public class DublinCoreExportUtil {\n- \n+\n     private static final Logger logger = Logger.getLogger(DdiExportUtil.class.getCanonicalName());\n-    \n-    public static String OAI_DC_XML_NAMESPACE = \"http://www.openarchives.org/OAI/2.0/oai_dc/\"; \n+\n+    public static String OAI_DC_XML_NAMESPACE = \"http://www.openarchives.org/OAI/2.0/oai_dc/\";\n+\n     public static String OAI_DC_XML_SCHEMALOCATION = \"http://www.openarchives.org/OAI/2.0/oai_dc.xsd\";\n-    \n+\n     public static String DC_XML_NAMESPACE = \"http://purl.org/dc/elements/1.1/\";\n-    \n+\n     public static String DCTERMS_XML_NAMESPACE = \"http://purl.org/dc/terms/\";\n-    public static String DCTERMS_DEFAULT_NAMESPACE=\"http://dublincore.org/documents/dcmi-terms/\";\n-    public static String DCTERMS_XML_SCHEMALOCATION=\"http://dublincore.org/schemas/xmls/qdc/dcterms.xsd\";\n+\n+    public static String DCTERMS_DEFAULT_NAMESPACE = \"http://dublincore.org/documents/dcmi-terms/\";\n+\n+    public static String DCTERMS_XML_SCHEMALOCATION = \"http://dublincore.org/schemas/xmls/qdc/dcterms.xsd\";\n+\n     public static String DEFAULT_XML_VERSION = \"2.0\";\n-    \n+\n     public static String DC_FLAVOR_OAI = \"dc\";\n+\n     public static String DC_FLAVOR_DCTERMS = \"dcterms\";\n-    \n+\n     public static String DEFAULT_DC_FLAVOR = DC_FLAVOR_DCTERMS;\n \n-        \n     public static void datasetJson2dublincore(JsonObject datasetDtoAsJson, OutputStream outputStream, String dcFlavor) throws XMLStreamException {\n         logger.fine(JsonUtil.prettyPrint(datasetDtoAsJson.toString()));\n         Gson gson = new Gson();\n@@ -61,11 +67,11 @@ public class DublinCoreExportUtil {\n         //    Logger.getLogger(DdiExportUtil.class.getName()).log(Level.SEVERE, null, ex);\n         //}\n     }\n-    \n+\n     private static void dto2dublincore(DatasetDTO datasetDto, OutputStream outputStream, String dcFlavor) throws XMLStreamException {\n         XMLStreamWriter xmlw = XMLOutputFactory.newInstance().createXMLStreamWriter(outputStream);\n         if (DC_FLAVOR_DCTERMS.equals(dcFlavor)) {\n-\t\txmlw.writeStartDocument();\n+            xmlw.writeStartDocument();\n             xmlw.writeStartElement(\"metadata\");\n             xmlw.writeAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n             xmlw.writeAttribute(\"xmlns:dc\", DC_XML_NAMESPACE);\n@@ -73,17 +79,15 @@ public class DublinCoreExportUtil {\n             xmlw.writeDefaultNamespace(DCTERMS_DEFAULT_NAMESPACE);\n             //xmlw.writeAttribute(\"xsi:schemaLocation\", DCTERMS_DEFAULT_NAMESPACE+\" \"+DCTERMS_XML_SCHEMALOCATION);\n             createDC(xmlw, datasetDto, dcFlavor);\n-        } else if (DC_FLAVOR_OAI.equals(dcFlavor)) {      \n-            xmlw.writeStartElement(\"oai_dc:dc\");        \n+        } else if (DC_FLAVOR_OAI.equals(dcFlavor)) {\n+            xmlw.writeStartElement(\"oai_dc:dc\");\n             xmlw.writeAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n             xmlw.writeAttribute(\"xmlns:oai_dc\", OAI_DC_XML_NAMESPACE);\n             xmlw.writeAttribute(\"xmlns:dc\", DC_XML_NAMESPACE);\n-            xmlw.writeAttribute(\"xsi:schemaLocation\", OAI_DC_XML_NAMESPACE+\" \"+OAI_DC_XML_SCHEMALOCATION);\n+            xmlw.writeAttribute(\"xsi:schemaLocation\", OAI_DC_XML_NAMESPACE + \" \" + OAI_DC_XML_SCHEMALOCATION);\n             //writeAttribute(xmlw, \"version\", DEFAULT_XML_VERSION);\n             createOAIDC(xmlw, datasetDto, dcFlavor);\n         }\n-        \n-        \n         xmlw.writeEndElement(); // <metadata> or <oai_dc:dc>\n         xmlw.flush();\n     }\n@@ -94,96 +98,67 @@ public class DublinCoreExportUtil {\n     // - such as, for example, \"dateSubmitted\" ... (4.5.1?)\n     // -- L.A. \n     // but use createOAIDC instead (the minimal, original 15 field format)\n-    \n+\n     private static void createDC(XMLStreamWriter xmlw, DatasetDTO datasetDto, String dcFlavor) throws XMLStreamException {\n         DatasetVersionDTO version = datasetDto.getDatasetVersion();\n         String persistentAgency = datasetDto.getProtocol();\n         String persistentAuthority = datasetDto.getAuthority();\n         String persistentId = datasetDto.getIdentifier();\n         GlobalId globalId = new GlobalId(persistentAgency, persistentAuthority, persistentId);\n-  \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"title\", dto2Primitive(version, DatasetFieldConstant.title));                       \n-        \n-        xmlw.writeStartElement(dcFlavor+\":\"+\"identifier\");\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"title\", dto2Primitive(version, DatasetFieldConstant.title));\n+        xmlw.writeStartElement(dcFlavor + \":\" + \"identifier\");\n         xmlw.writeCharacters(globalId.toURL().toString());\n         xmlw.writeEndElement(); // decterms:identifier       \n-\n         writeAuthorsElement(xmlw, version, dcFlavor);\n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"publisher\", datasetDto.getPublisher());\n-        writeFullElement(xmlw, dcFlavor+\":\"+\"issued\", datasetDto.getPublicationDate());\n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"modified\", datasetDto.getDatasetVersion().getLastUpdateTime());\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"publisher\", datasetDto.getPublisher());\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"issued\", datasetDto.getPublicationDate());\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"modified\", datasetDto.getDatasetVersion().getLastUpdateTime());\n         writeAbstractElement(xmlw, version, dcFlavor); // Description\n         writeSubjectElement(xmlw, version, dcFlavor);   //Subjects and Key Words\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"language\", dto2PrimitiveList(version, DatasetFieldConstant.language));        \n-        \n+        writeFullElementList(xmlw, dcFlavor + \":\" + \"language\", dto2PrimitiveList(version, DatasetFieldConstant.language));\n         writeRelPublElement(xmlw, version, dcFlavor);\n-        writeFullElement(xmlw, dcFlavor+\":\"+\"date\", dto2Primitive(version, DatasetFieldConstant.productionDate));  \n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"contributor\", dto2Primitive(version, DatasetFieldConstant.depositor));  \n-        \n+        writeFullElement(xmlw, dcFlavor + \":\" + \"date\", dto2Primitive(version, DatasetFieldConstant.productionDate));\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"contributor\", dto2Primitive(version, DatasetFieldConstant.depositor));\n         writeContributorElement(xmlw, version, dcFlavor);\n-        writeFullElement(xmlw, dcFlavor+\":\"+\"dateSubmitted\", dto2Primitive(version, DatasetFieldConstant.dateOfDeposit));  \n-        \n+        writeFullElement(xmlw, dcFlavor + \":\" + \"dateSubmitted\", dto2Primitive(version, DatasetFieldConstant.dateOfDeposit));\n         writeTimeElements(xmlw, version, dcFlavor);\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"relation\", dto2PrimitiveList(version, DatasetFieldConstant.relatedDatasets));\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"type\", dto2PrimitiveList(version, DatasetFieldConstant.kindOfData));\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"source\", dto2PrimitiveList(version, DatasetFieldConstant.dataSources));\n+        writeFullElementList(xmlw, dcFlavor + \":\" + \"relation\", dto2PrimitiveList(version, DatasetFieldConstant.relatedDatasets));\n+        writeFullElementList(xmlw, dcFlavor + \":\" + \"type\", dto2PrimitiveList(version, DatasetFieldConstant.kindOfData));\n+        writeFullElementList(xmlw, dcFlavor + \":\" + \"source\", dto2PrimitiveList(version, DatasetFieldConstant.dataSources));\n         \n         //Geo Elements\n         writeSpatialElements(xmlw, version, dcFlavor);\n         \n         //License and Terms\n-        writeFullElement(xmlw, dcFlavor+\":\"+\"license\", version.getLicense());        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"rights\", version.getTermsOfUse()); \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"rights\", version.getRestrictions()); \n-\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"license\", version.getLicense());\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"rights\", version.getTermsOfUse());\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"rights\", version.getRestrictions());\n     }\n-    \n+\n     private static void createOAIDC(XMLStreamWriter xmlw, DatasetDTO datasetDto, String dcFlavor) throws XMLStreamException {\n         DatasetVersionDTO version = datasetDto.getDatasetVersion();\n         String persistentAgency = datasetDto.getProtocol();\n         String persistentAuthority = datasetDto.getAuthority();\n         String persistentId = datasetDto.getIdentifier();\n         GlobalId globalId = new GlobalId(persistentAgency, persistentAuthority, persistentId);\n-  \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"title\", dto2Primitive(version, DatasetFieldConstant.title));                       \n-        \n-        xmlw.writeStartElement(dcFlavor+\":\"+\"identifier\");\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"title\", dto2Primitive(version, DatasetFieldConstant.title));\n+        xmlw.writeStartElement(dcFlavor + \":\" + \"identifier\");\n         xmlw.writeCharacters(globalId.toURL().toString());\n         xmlw.writeEndElement(); // decterms:identifier       \n-\n         writeAuthorsElement(xmlw, version, dcFlavor); //creator\n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"publisher\", datasetDto.getPublisher());\n-        \n+        writeFullElement(xmlw, dcFlavor + \":\" + \"publisher\", datasetDto.getPublisher());\n         writeAbstractElement(xmlw, version, dcFlavor); // Description\n         writeSubjectElement(xmlw, version, dcFlavor);   //Subjects and Key Words\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"language\", dto2PrimitiveList(version, DatasetFieldConstant.language));        \n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"date\", dto2Primitive(version, DatasetFieldConstant.productionDate));  \n-        \n-        writeFullElement(xmlw, dcFlavor+\":\"+\"contributor\", dto2Primitive(version, DatasetFieldConstant.depositor));  \n-        \n+        writeFullElementList(xmlw, dcFlavor + \":\" + \"language\", dto2PrimitiveList(version, DatasetFieldConstant.language));\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"date\", dto2Primitive(version, DatasetFieldConstant.productionDate));\n+        writeFullElement(xmlw, dcFlavor + \":\" + \"contributor\", dto2Primitive(version, DatasetFieldConstant.depositor));\n         writeContributorElement(xmlw, version, dcFlavor);\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"relation\", dto2PrimitiveList(version, DatasetFieldConstant.relatedDatasets));\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"type\", dto2PrimitiveList(version, DatasetFieldConstant.kindOfData));\n-        \n-        writeFullElementList(xmlw, dcFlavor+\":\"+\"source\", dto2PrimitiveList(version, DatasetFieldConstant.dataSources));\n-        \n-\n+        writeFullElementList(xmlw, dcFlavor + \":\" + \"relation\", dto2PrimitiveList(version, DatasetFieldConstant.relatedDatasets));\n+        writeFullElementList(xmlw, dcFlavor + \":\" + \"type\", dto2PrimitiveList(version, DatasetFieldConstant.kindOfData));\n+        writeFullElementList(xmlw, dcFlavor + \":\" + \"source\", dto2PrimitiveList(version, DatasetFieldConstant.dataSources));\n     }\n-    \n-    private static void writeAuthorsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n \n+    private static void writeAuthorsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n             MetadataBlockDTO value = entry.getValue();\n@@ -198,8 +173,9 @@ public class DublinCoreExportUtil {\n                                     authorName = next.getSinglePrimitive();\n                                 }\n                             }\n+\n                             if (!authorName.isEmpty()) {\n-                                xmlw.writeStartElement(dcFlavor+\":\"+\"creator\");\n+                                xmlw.writeStartElement(dcFlavor + \":\" + \"creator\");\n                                 xmlw.writeCharacters(authorName);\n                                 xmlw.writeEndElement(); //AuthEnty\n                             }\n@@ -209,7 +185,7 @@ public class DublinCoreExportUtil {\n             }\n         }\n     }\n-    \n+\n     private static void writeAbstractElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n@@ -222,11 +198,12 @@ public class DublinCoreExportUtil {\n                             for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.descriptionText.equals(next.getTypeName())) {\n-                                    descriptionText =  next.getSinglePrimitive();\n+                                    descriptionText = next.getSinglePrimitive();\n                                 }\n                             }\n-                            if (!descriptionText.isEmpty()){\n-                                xmlw.writeStartElement(dcFlavor+\":\"+\"description\");  \n+\n+                            if (!descriptionText.isEmpty()) {\n+                                xmlw.writeStartElement(dcFlavor + \":\" + \"description\");\n                                 xmlw.writeCharacters(descriptionText);\n                                 xmlw.writeEndElement(); //abstract\n                             }\n@@ -236,35 +213,35 @@ public class DublinCoreExportUtil {\n             }\n         }\n     }\n-    \n-    private static void writeSubjectElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException{ \n+\n+    private static void writeSubjectElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException { \n         \n         //Key Words and Subject\n-      \n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n             MetadataBlockDTO value = entry.getValue();\n             if (\"citation\".equals(key)) {\n                 for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.subject.equals(fieldDTO.getTypeName())){\n-                        for ( String subject : fieldDTO.getMultipleVocab()){\n-                            xmlw.writeStartElement(dcFlavor+\":\"+\"subject\");\n+                    if (DatasetFieldConstant.subject.equals(fieldDTO.getTypeName())) {\n+                        for (String subject : fieldDTO.getMultipleVocab()) {\n+                            xmlw.writeStartElement(dcFlavor + \":\" + \"subject\");\n                             xmlw.writeCharacters(subject);\n                             xmlw.writeEndElement(); //Keyword\n                         }\n                     }\n-                    \n+\n                     if (DatasetFieldConstant.keyword.equals(fieldDTO.getTypeName())) {\n                         for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n                             String keywordValue = \"\";\n                             for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.keywordValue.equals(next.getTypeName())) {\n-                                    keywordValue =  next.getSinglePrimitive();\n+                                    keywordValue = next.getSinglePrimitive();\n                                 }\n                             }\n-                            if (!keywordValue.isEmpty()){\n-                                xmlw.writeStartElement(dcFlavor+\":\"+\"subject\"); \n+\n+                            if (!keywordValue.isEmpty()) {\n+                                xmlw.writeStartElement(dcFlavor + \":\" + \"subject\");\n                                 xmlw.writeCharacters(keywordValue);\n                                 xmlw.writeEndElement(); //Keyword\n                             }\n@@ -272,9 +249,9 @@ public class DublinCoreExportUtil {\n                     }\n                 }\n             }\n-        }             \n+        }\n     }\n-    \n+\n     private static void writeRelPublElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n@@ -291,23 +268,26 @@ public class DublinCoreExportUtil {\n                             for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.publicationCitation.equals(next.getTypeName())) {\n-                                    citation =  next.getSinglePrimitive();\n+                                    citation = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.publicationIDType.equals(next.getTypeName())) {\n-                                    IDType =  next.getSinglePrimitive();\n+                                    IDType = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.publicationIDNumber.equals(next.getTypeName())) {\n-                                    IDNo =   next.getSinglePrimitive();\n+                                    IDNo = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.publicationURL.equals(next.getTypeName())) {\n-                                    url =  next.getSinglePrimitive();\n+                                    url = next.getSinglePrimitive();\n                                 }\n                             }\n                             pubString = appendCommaSeparatedValue(citation, IDType);\n                             pubString = appendCommaSeparatedValue(pubString, IDNo);\n                             pubString = appendCommaSeparatedValue(pubString, url);\n-                            if (!pubString.isEmpty()){\n-                                xmlw.writeStartElement(dcFlavor+\":\"+\"isReferencedBy\"); \n+                            if (!pubString.isEmpty()) {\n+                                xmlw.writeStartElement(dcFlavor + \":\" + \"isReferencedBy\");\n                                 xmlw.writeCharacters(pubString);\n                                 xmlw.writeEndElement(); //relPubl\n                             }\n@@ -317,7 +297,7 @@ public class DublinCoreExportUtil {\n             }\n         }\n     }\n-    \n+\n     private static void writeContributorElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n@@ -330,11 +310,12 @@ public class DublinCoreExportUtil {\n                             for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.contributorName.equals(next.getTypeName())) {\n-                                    contributorName =  next.getSinglePrimitive();\n+                                    contributorName = next.getSinglePrimitive();\n                                 }\n                             }\n-                            if (!contributorName.isEmpty()){\n-                                xmlw.writeStartElement(dcFlavor+\":\"+\"contributor\");  \n+\n+                            if (!contributorName.isEmpty()) {\n+                                xmlw.writeStartElement(dcFlavor + \":\" + \"contributor\");\n                                 xmlw.writeCharacters(contributorName);\n                                 xmlw.writeEndElement(); //abstract\n                             }\n@@ -360,18 +341,22 @@ public class DublinCoreExportUtil {\n                                 if (DatasetFieldConstant.timePeriodCoveredStart.equals(next.getTypeName())) {\n                                     dateValStart = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.timePeriodCoveredEnd.equals(next.getTypeName())) {\n                                     dateValEnd = next.getSinglePrimitive();\n                                 }\n                             }\n+\n                             if (!dateValStart.isEmpty()) {\n-                                writeFullElement(xmlw, dcFlavor+\":\"+\"temporal\", dateValStart); \n+                                writeFullElement(xmlw, dcFlavor + \":\" + \"temporal\", dateValStart);\n                             }\n+\n                             if (!dateValEnd.isEmpty()) {\n-                                writeFullElement(xmlw, dcFlavor+\":\"+\"temporal\", dateValEnd); \n+                                writeFullElement(xmlw, dcFlavor + \":\" + \"temporal\", dateValEnd);\n                             }\n                         }\n                     }\n+\n                     if (DatasetFieldConstant.dateOfCollection.equals(fieldDTO.getTypeName())) {\n                         String dateValStart = \"\";\n                         String dateValEnd = \"\";\n@@ -381,53 +366,59 @@ public class DublinCoreExportUtil {\n                                 if (DatasetFieldConstant.dateOfCollectionStart.equals(next.getTypeName())) {\n                                     dateValStart = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.dateOfCollectionEnd.equals(next.getTypeName())) {\n                                     dateValEnd = next.getSinglePrimitive();\n                                 }\n                             }\n+\n                             if (!dateValStart.isEmpty()) {\n-                               writeFullElement(xmlw, dcFlavor+\":\"+\"temporal\", dateValStart); \n+                                writeFullElement(xmlw, dcFlavor + \":\" + \"temporal\", dateValStart);\n                             }\n+\n                             if (!dateValEnd.isEmpty()) {\n-                                writeFullElement(xmlw, dcFlavor+\":\"+\"temporal\", dateValEnd); \n+                                writeFullElement(xmlw, dcFlavor + \":\" + \"temporal\", dateValEnd);\n                             }\n                         }\n                     }\n                 }\n             }\n-        }    \n+        }\n     }\n-    \n-        private static void writeSpatialElements(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n+\n+    private static void writeSpatialElements(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String dcFlavor) throws XMLStreamException {\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n             MetadataBlockDTO value = entry.getValue();\n-            if(\"geospatial\".equals(key)){                \n+            if (\"geospatial\".equals(key)) {\n                 for (FieldDTO fieldDTO : value.getFields()) {\n                     if (DatasetFieldConstant.geographicCoverage.equals(fieldDTO.getTypeName())) {\n                         for (HashSet<FieldDTO> foo : fieldDTO.getMultipleCompound()) {\n                             for (Iterator<FieldDTO> iterator = foo.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.country.equals(next.getTypeName())) {\n-                                    writeFullElement(xmlw, dcFlavor+\":\"+\"spatial\", next.getSinglePrimitive());\n+                                    writeFullElement(xmlw, dcFlavor + \":\" + \"spatial\", next.getSinglePrimitive());\n                                 }\n+\n                                 if (DatasetFieldConstant.city.equals(next.getTypeName())) {\n-                                    writeFullElement(xmlw, dcFlavor+\":\"+\"spatial\", next.getSinglePrimitive());\n+                                    writeFullElement(xmlw, dcFlavor + \":\" + \"spatial\", next.getSinglePrimitive());\n                                 }\n+\n                                 if (DatasetFieldConstant.state.equals(next.getTypeName())) {\n-                                    writeFullElement(xmlw, dcFlavor+\":\"+\"spatial\", next.getSinglePrimitive());\n-                                } \n+                                    writeFullElement(xmlw, dcFlavor + \":\" + \"spatial\", next.getSinglePrimitive());\n+                                }\n+\n                                 if (DatasetFieldConstant.otherGeographicCoverage.equals(next.getTypeName())) {\n-                                    writeFullElement(xmlw, dcFlavor+\":\"+\"spatial\", next.getSinglePrimitive());\n-                                } \n+                                    writeFullElement(xmlw, dcFlavor + \":\" + \"spatial\", next.getSinglePrimitive());\n+                                }\n                             }\n                         }\n                     }\n                 }\n             }\n-        }   \n+        }\n     }\n-    \n+\n     private static String appendCommaSeparatedValue(String inVal, String next) {\n         if (!next.isEmpty()) {\n             if (!inVal.isEmpty()) {\n@@ -438,8 +429,7 @@ public class DublinCoreExportUtil {\n         }\n         return inVal;\n     }\n-    \n-    \n+\n     private static String dto2Primitive(DatasetVersionDTO datasetVersionDTO, String datasetFieldTypeName) {\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             MetadataBlockDTO value = entry.getValue();\n@@ -451,7 +441,7 @@ public class DublinCoreExportUtil {\n         }\n         return null;\n     }\n-    \n+\n     private static List<String> dto2PrimitiveList(DatasetVersionDTO datasetVersionDTO, String datasetFieldTypeName) {\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             MetadataBlockDTO value = entry.getValue();\n@@ -463,7 +453,7 @@ public class DublinCoreExportUtil {\n         }\n         return null;\n     }\n-    \n+\n     private static void writeFullElementList(XMLStreamWriter xmlw, String name, List<String> values) throws XMLStreamException {\n         //For the simplest Elements we can \n         if (values != null && !values.isEmpty()) {\n@@ -474,9 +464,8 @@ public class DublinCoreExportUtil {\n             }\n         }\n     }\n-    \n-    \n-    private static void writeFullElement (XMLStreamWriter xmlw, String name, String value) throws XMLStreamException {\n+\n+    private static void writeFullElement(XMLStreamWriter xmlw, String name, String value) throws XMLStreamException {\n         //For the simplest Elements we can \n         if (!StringUtilisEmpty(value)) {\n             xmlw.writeStartElement(name);\n@@ -497,5 +486,5 @@ public class DublinCoreExportUtil {\n         }\n         return false;\n     }\n-    \n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 150
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/70/DublinCoreExportUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/70/DublinCoreExportUtil.java\nindex a4ee78ee3a8..5c674f8bc3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/70/DublinCoreExportUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/70/DublinCoreExportUtil.java\n@@ -65,7 +65,7 @@ public class DublinCoreExportUtil {\n     private static void dto2dublincore(DatasetDTO datasetDto, OutputStream outputStream, String dcFlavor) throws XMLStreamException {\n         XMLStreamWriter xmlw = XMLOutputFactory.newInstance().createXMLStreamWriter(outputStream);\n         if (DC_FLAVOR_DCTERMS.equals(dcFlavor)) {\n-\t\txmlw.writeStartDocument();\n+            xmlw.writeStartDocument();\n             xmlw.writeStartElement(\"metadata\");\n             xmlw.writeAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n             xmlw.writeAttribute(\"xmlns:dc\", DC_XML_NAMESPACE);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/70/DublinCoreExportUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/70/DublinCoreExportUtil.java\nindex a4ee78ee3a8..c729e052c67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/70/DublinCoreExportUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/70/DublinCoreExportUtil.java\n@@ -65,7 +65,7 @@ public class DublinCoreExportUtil {\n     private static void dto2dublincore(DatasetDTO datasetDto, OutputStream outputStream, String dcFlavor) throws XMLStreamException {\n         XMLStreamWriter xmlw = XMLOutputFactory.newInstance().createXMLStreamWriter(outputStream);\n         if (DC_FLAVOR_DCTERMS.equals(dcFlavor)) {\n-\t\txmlw.writeStartDocument();\n+        xmlw.writeStartDocument();\n             xmlw.writeStartElement(\"metadata\");\n             xmlw.writeAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n             xmlw.writeAttribute(\"xmlns:dc\", DC_XML_NAMESPACE);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}