{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "130",
    "information": {
        "errors": [
            {
                "line": "71",
                "column": "7",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    // cookies handler are enabled by default start from 3.8.3\n    String pattern = DynamicPropertyFactory.getInstance().getStringProperty(KEY_PATTERN, null).get();\n    if(pattern == null) {\n      router.route().handler(createBodyHandler());\n      router.route().failureHandler(this::failureHandler).handler(this::onRequest);\n    } else {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/130/VertxRestDispatcher.java\nindex 235a71d015c..91e85c0308c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/130/VertxRestDispatcher.java\n@@ -68,7 +68,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n   public void init(Router router) {\n     // cookies handler are enabled by default start from 3.8.3\n     String pattern = DynamicPropertyFactory.getInstance().getStringProperty(KEY_PATTERN, null).get();\n-    if(pattern == null) {\n+    if (pattern == null) {\n       router.route().handler(createBodyHandler());\n       router.route().failureHandler(this::failureHandler).handler(this::onRequest);\n     } else {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/130/VertxRestDispatcher.java\nindex 235a71d015c..a8f3c1047d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/130/VertxRestDispatcher.java\n@@ -68,7 +68,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n   public void init(Router router) {\n     // cookies handler are enabled by default start from 3.8.3\n     String pattern = DynamicPropertyFactory.getInstance().getStringProperty(KEY_PATTERN, null).get();\n-    if(pattern == null) {\n+    if (pattern == null) {\n       router.route().handler(createBodyHandler());\n       router.route().failureHandler(this::failureHandler).handler(this::onRequest);\n     } else {\n@@ -98,7 +98,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n    * Try to find out the failure information and send it in response.\n    */\n   private void handleFailureAndClose(RoutingContext context, AbstractRestInvocation restProducerInvocation,\n-      Throwable e) {\n+                                     Throwable e) {\n     if (null != restProducerInvocation) {\n       // if there is restProducerInvocation, let it send exception in response. The exception is allowed to be null.\n       sendFailResponseByInvocation(context, restProducerInvocation, e);\n@@ -170,6 +170,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n \n   /**\n    * Check if the message is a valid Json string.\n+   *\n    * @param message the message to be checked.\n    * @return true if message is a valid Json string, otherwise false.\n    */\n@@ -186,7 +187,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n    * Use restProducerInvocation to send failure message. The throwable is allowed to be null.\n    */\n   private void sendFailResponseByInvocation(RoutingContext context, AbstractRestInvocation restProducerInvocation,\n-      Throwable e) {\n+                                            Throwable e) {\n     restProducerInvocation.sendFailResponse(e);\n     context.response().close();\n   }\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/130/VertxRestDispatcher.java\nindex 235a71d015c..fdcb424df97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/130/VertxRestDispatcher.java\n@@ -68,7 +68,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n   public void init(Router router) {\n     // cookies handler are enabled by default start from 3.8.3\n     String pattern = DynamicPropertyFactory.getInstance().getStringProperty(KEY_PATTERN, null).get();\n-    if(pattern == null) {\n+    if (pattern == null) {\n       router.route().handler(createBodyHandler());\n       router.route().failureHandler(this::failureHandler).handler(this::onRequest);\n     } else {\n@@ -120,8 +120,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n    */\n   private void sendFailureRespDeterminedByStatus(RoutingContext context) {\n     Family statusFamily = Family.familyOf(context.statusCode());\n-    if (Family.CLIENT_ERROR.equals(statusFamily) || Family.SERVER_ERROR.equals(statusFamily) || Family.OTHER\n-        .equals(statusFamily)) {\n+    if (Family.CLIENT_ERROR.equals(statusFamily) || Family.SERVER_ERROR.equals(statusFamily) || Family.OTHER.equals(statusFamily)) {\n       context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.WILDCARD)\n           .setStatusCode(context.statusCode()).end();\n     } else {\n@@ -202,4 +201,4 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n     context.put(RestConst.REST_PRODUCER_INVOCATION, vertxRestInvocation);\n     vertxRestInvocation.invoke(transport, requestEx, responseEx, httpServerFilters);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/130/VertxRestDispatcher.java\nindex 235a71d015c..2274a9fa23d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/130/VertxRestDispatcher.java\n@@ -21,7 +21,6 @@ import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response.Status;\n import javax.ws.rs.core.Response.Status.Family;\n-\n import org.apache.servicecomb.common.rest.AbstractRestInvocation;\n import org.apache.servicecomb.common.rest.RestConst;\n import org.apache.servicecomb.common.rest.VertxRestInvocation;\n@@ -35,9 +34,7 @@ import org.apache.servicecomb.foundation.vertx.http.VertxServerResponseToHttpSer\n import org.apache.servicecomb.swagger.invocation.exception.InvocationException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.netflix.config.DynamicPropertyFactory;\n-\n import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.ErrorDataDecoderException;\n import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.Router;\n@@ -56,19 +53,22 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n \n   @Override\n   public int getOrder() {\n-    return DynamicPropertyFactory.getInstance().getIntProperty(KEY_ORDER, Integer.MAX_VALUE).get();\n+    return DynamicPropertyFactory.getInstance().getIntProperty(KEY_ORDER, Integer.MAX_VALUE)\n+                                               .get();\n   }\n \n   @Override\n   public boolean enabled() {\n-    return DynamicPropertyFactory.getInstance().getBooleanProperty(KEY_ENABLED, true).get();\n+    return DynamicPropertyFactory.getInstance().getBooleanProperty(KEY_ENABLED, true)\n+                                               .get();\n   }\n \n   @Override\n   public void init(Router router) {\n     // cookies handler are enabled by default start from 3.8.3\n-    String pattern = DynamicPropertyFactory.getInstance().getStringProperty(KEY_PATTERN, null).get();\n-    if(pattern == null) {\n+    String pattern = DynamicPropertyFactory.getInstance().getStringProperty(KEY_PATTERN, null)\n+                                                         .get();\n+    if (pattern == null) {\n       router.route().handler(createBodyHandler());\n       router.route().failureHandler(this::failureHandler).handler(this::onRequest);\n     } else {\n@@ -91,14 +91,16 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n \n     // only when unexpected exception happens, it will run into here.\n     // the connection should be closed.\n+\n     handleFailureAndClose(context, restProducerInvocation, e);\n   }\n \n   /**\n    * Try to find out the failure information and send it in response.\n    */\n-  private void handleFailureAndClose(RoutingContext context, AbstractRestInvocation restProducerInvocation,\n-      Throwable e) {\n+\n+  private void handleFailureAndClose(RoutingContext context,\n+    AbstractRestInvocation restProducerInvocation, Throwable e) {\n     if (null != restProducerInvocation) {\n       // if there is restProducerInvocation, let it send exception in response. The exception is allowed to be null.\n       sendFailResponseByInvocation(context, restProducerInvocation, e);\n@@ -112,41 +114,45 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n     }\n \n     // if there is no exception, the response is determined by status code.\n+\n     sendFailureRespDeterminedByStatus(context);\n   }\n \n   /**\n    * Try to determine response by status code, and send response.\n    */\n+\n   private void sendFailureRespDeterminedByStatus(RoutingContext context) {\n     Family statusFamily = Family.familyOf(context.statusCode());\n-    if (Family.CLIENT_ERROR.equals(statusFamily) || Family.SERVER_ERROR.equals(statusFamily) || Family.OTHER\n-        .equals(statusFamily)) {\n+    if (Family.CLIENT_ERROR.equals(statusFamily) || Family.SERVER_ERROR.equals(statusFamily)\n+        || Family.OTHER.equals(statusFamily)) {\n       context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.WILDCARD)\n-          .setStatusCode(context.statusCode()).end();\n+                        .setStatusCode(context.statusCode()).end();\n     } else {\n       // it seems the status code is not set properly\n       context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.WILDCARD)\n-          .setStatusCode(Status.INTERNAL_SERVER_ERROR.getStatusCode())\n-          .setStatusMessage(Status.INTERNAL_SERVER_ERROR.getReasonPhrase())\n-          .end(wrapResponseBody(Status.INTERNAL_SERVER_ERROR.getReasonPhrase()));\n+                        .setStatusCode(Status.INTERNAL_SERVER_ERROR.getStatusCode())\n+                        .setStatusMessage(Status.INTERNAL_SERVER_ERROR.getReasonPhrase()).end(wrapResponseBody(Status.INTERNAL_SERVER_ERROR.getReasonPhrase()));\n     }\n+\n     context.response().close();\n   }\n \n   /**\n    * Use routingContext to send failure information in throwable.\n    */\n+\n   private void sendExceptionByRoutingContext(RoutingContext context, Throwable e) {\n     if (InvocationException.class.isInstance(e)) {\n       InvocationException invocationException = (InvocationException) e;\n       context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.WILDCARD)\n-          .setStatusCode(invocationException.getStatusCode()).setStatusMessage(invocationException.getReasonPhrase())\n-          .end(wrapResponseBody(invocationException.getReasonPhrase()));\n+                        .setStatusCode(invocationException.getStatusCode())\n+                        .setStatusMessage(invocationException.getReasonPhrase()).end(wrapResponseBody(invocationException.getReasonPhrase()));\n     } else {\n       context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.WILDCARD)\n-          .setStatusCode(Status.INTERNAL_SERVER_ERROR.getStatusCode()).end(wrapResponseBody(e.getMessage()));\n+                        .setStatusCode(Status.INTERNAL_SERVER_ERROR.getStatusCode()).end(wrapResponseBody(e.getMessage()));\n     }\n+\n     context.response().close();\n   }\n \n@@ -157,6 +163,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n    * @param message response body\n    * @return response body wrapped as Json string\n    */\n+\n   String wrapResponseBody(String message) {\n     if (isValidJson(message)) {\n       return message;\n@@ -164,7 +171,6 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n \n     JsonObject jsonObject = new JsonObject();\n     jsonObject.put(\"message\", message);\n-\n     return jsonObject.toString();\n   }\n \n@@ -173,6 +179,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n    * @param message the message to be checked.\n    * @return true if message is a valid Json string, otherwise false.\n    */\n+\n   private boolean isValidJson(String message) {\n     try {\n       new JsonObject(message);\n@@ -185,21 +192,23 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n   /**\n    * Use restProducerInvocation to send failure message. The throwable is allowed to be null.\n    */\n-  private void sendFailResponseByInvocation(RoutingContext context, AbstractRestInvocation restProducerInvocation,\n-      Throwable e) {\n+\n+  private void sendFailResponseByInvocation(RoutingContext context,\n+    AbstractRestInvocation restProducerInvocation, Throwable e) {\n     restProducerInvocation.sendFailResponse(e);\n     context.response().close();\n   }\n \n   protected void onRequest(RoutingContext context) {\n     if (transport == null) {\n-      transport = SCBEngine.getInstance().getTransportManager().findTransport(Const.RESTFUL);\n+      transport = SCBEngine.getInstance().getTransportManager()\n+                                         .findTransport(Const.RESTFUL);\n     }\n+\n     HttpServletRequestEx requestEx = new VertxServerRequestToHttpServletRequest(context);\n     HttpServletResponseEx responseEx = new VertxServerResponseToHttpServletResponse(context.response());\n-\n     VertxRestInvocation vertxRestInvocation = new VertxRestInvocation();\n     context.put(RestConst.REST_PRODUCER_INVOCATION, vertxRestInvocation);\n     vertxRestInvocation.invoke(transport, requestEx, responseEx, httpServerFilters);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/130/VertxRestDispatcher.java\nindex 235a71d015c..91e85c0308c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/130/VertxRestDispatcher.java\n@@ -68,7 +68,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n   public void init(Router router) {\n     // cookies handler are enabled by default start from 3.8.3\n     String pattern = DynamicPropertyFactory.getInstance().getStringProperty(KEY_PATTERN, null).get();\n-    if(pattern == null) {\n+    if (pattern == null) {\n       router.route().handler(createBodyHandler());\n       router.route().failureHandler(this::failureHandler).handler(this::onRequest);\n     } else {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/130/VertxRestDispatcher.java\nindex 235a71d015c..91e85c0308c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/130/VertxRestDispatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/130/VertxRestDispatcher.java\n@@ -68,7 +68,7 @@ public class VertxRestDispatcher extends AbstractVertxHttpDispatcher {\n   public void init(Router router) {\n     // cookies handler are enabled by default start from 3.8.3\n     String pattern = DynamicPropertyFactory.getInstance().getStringProperty(KEY_PATTERN, null).get();\n-    if(pattern == null) {\n+    if (pattern == null) {\n       router.route().handler(createBodyHandler());\n       router.route().failureHandler(this::failureHandler).handler(this::onRequest);\n     } else {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}