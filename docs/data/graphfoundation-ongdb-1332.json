{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1332",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "99",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "157",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "183",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1332/SunMiscUTF8Encoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1332/SunMiscUTF8Encoder.java\nindex 376ea29de44..26a1e31fd14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1332/SunMiscUTF8Encoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1332/SunMiscUTF8Encoder.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v1.packstream.utf8;\n \n import java.lang.invoke.MethodHandle;\n@@ -53,142 +54,136 @@ import static org.neo4j.util.FeatureToggles.getInteger;\n  */\n public class SunMiscUTF8Encoder implements UTF8Encoder\n {\n-    private static final int BUFFER_SIZE = getInteger( SunMiscUTF8Encoder.class, \"buffer_size\", 1024 * 16 );\n-    private static final int fallbackAtStringLength =\n-            (int) (BUFFER_SIZE / StandardCharsets.UTF_8.newEncoder().averageBytesPerChar());\n-    private static final MethodHandle getCharArray = charArrayGetter();\n-    private static final MethodHandle arrayEncode = arrayEncode();\n-    private static final MethodHandle getOffset = offsetHandle();\n-    private final CharsetEncoder charsetEncoder = StandardCharsets.UTF_8.newEncoder();\n+  private static final int BUFFER_SIZE = getInteger(SunMiscUTF8Encoder.class, \"buffer_size\", 1024 * 16);\n+  private static final int fallbackAtStringLength =\n+      (int) (BUFFER_SIZE / StandardCharsets.UTF_8.newEncoder().averageBytesPerChar());\n+  private static final MethodHandle getCharArray = charArrayGetter();\n+  private static final MethodHandle arrayEncode = arrayEncode();\n+  private static final MethodHandle getOffset = offsetHandle();\n+  private final CharsetEncoder charsetEncoder = StandardCharsets.UTF_8.newEncoder();\n \n-    private final byte[] out = new byte[BUFFER_SIZE];\n-    private final ByteBuffer outBuf = ByteBuffer.wrap( out );\n-    private final UTF8Encoder fallbackEncoder = new VanillaUTF8Encoder();\n+  private final byte[] out = new byte[BUFFER_SIZE];\n+  private final ByteBuffer outBuf = ByteBuffer.wrap(out);\n+  private final UTF8Encoder fallbackEncoder = new VanillaUTF8Encoder();\n \n-    @Override\n-    public ByteBuffer encode( String input )\n+  @Override\n+  public ByteBuffer encode(String input)\n+  {\n+    try\n     {\n-        try\n-        {\n-            // If it's unlikely we will fit the encoded data, just use stdlib encoder\n-            if ( input.length() > fallbackAtStringLength )\n-            {\n-                return fallbackEncoder.encode( input );\n-            }\n+      // If it's unlikely we will fit the encoded data, just use stdlib encoder\n+      if (input.length() > fallbackAtStringLength)\n+      {\n+        return fallbackEncoder.encode(input);\n+      }\n \n-            char[] rawChars = (char[]) getCharArray.invoke( input );\n-            int len = (int) arrayEncode.invoke( charsetEncoder, rawChars, offset(input), input.length(), out );\n+      char[] rawChars = (char[]) getCharArray.invoke(input);\n+      int len = (int) arrayEncode.invoke(charsetEncoder, rawChars, offset(input), input.length(), out);\n \n-            if ( len == -1 )\n-            {\n-                return fallbackEncoder.encode( input );\n-            }\n+      if (len == -1)\n+      {\n+        return fallbackEncoder.encode(input);\n+      }\n \n-            outBuf.position( 0 );\n-            outBuf.limit( len );\n-            return outBuf;\n-        }\n-        catch ( ArrayIndexOutOfBoundsException e )\n-        {\n-            // This happens when we can't fit the encoded string.\n-            // We try and avoid this altogether by falling back to the\n-            // vanilla encoder if the string looks like it'll not fit -\n-            // but this is probabilistic since we don't know until we've encoded.\n-            // So, if our guess is wrong, we fall back here instead.\n-            return fallbackEncoder.encode( input );\n-        }\n-        catch ( Throwable e )\n-        {\n-            throw new AssertionError( \"This encoder depends on sun.nio.cs.ArrayEncoder, which failed to load: \" +\n-                                      e.getMessage(), e );\n-        }\n+      outBuf.position(0);\n+      outBuf.limit(len);\n+      return outBuf;\n+    } catch (ArrayIndexOutOfBoundsException e)\n+    {\n+      // This happens when we can't fit the encoded string.\n+      // We try and avoid this altogether by falling back to the\n+      // vanilla encoder if the string looks like it'll not fit -\n+      // but this is probabilistic since we don't know until we've encoded.\n+      // So, if our guess is wrong, we fall back here instead.\n+      return fallbackEncoder.encode(input);\n+    } catch (Throwable e)\n+    {\n+      throw new AssertionError(\"This encoder depends on sun.nio.cs.ArrayEncoder, which failed to load: \" +\n+          e.getMessage(), e);\n     }\n+  }\n \n-    private static MethodHandle arrayEncode()\n+  private static MethodHandle arrayEncode()\n+  {\n+    // Because we need to be able to compile on IBM's JVM, we can't\n+    // depend on ArrayEncoder. Unfortunately, ArrayEncoders encode method\n+    // is twoish orders of magnitude faster than regular encoders for ascii\n+    // so we go through the hurdle of calling that encode method via\n+    // a MethodHandle.\n+    MethodHandles.Lookup lookup = MethodHandles.lookup();\n+    try\n+    {\n+      return lookup.unreflect(Class.forName(\"sun.nio.cs.ArrayEncoder\")\n+          .getMethod(\"encode\", char[].class, int.class, int.class, byte[].class));\n+    } catch (Throwable e)\n     {\n-        // Because we need to be able to compile on IBM's JVM, we can't\n-        // depend on ArrayEncoder. Unfortunately, ArrayEncoders encode method\n-        // is twoish orders of magnitude faster than regular encoders for ascii\n-        // so we go through the hurdle of calling that encode method via\n-        // a MethodHandle.\n-        MethodHandles.Lookup lookup = MethodHandles.lookup();\n-        try\n-        {\n-            return lookup.unreflect( Class.forName( \"sun.nio.cs.ArrayEncoder\" )\n-                    .getMethod( \"encode\", char[].class, int.class, int.class, byte[].class ) );\n-        }\n-        catch ( Throwable e )\n-        {\n-            throw new AssertionError(\n-                    \"This encoder depends on sun.nio.cs.ArrayEncoder, which failed to load: \" +\n-                    e.getMessage(), e );\n-        }\n+      throw new AssertionError(\n+          \"This encoder depends on sun.nio.cs.ArrayEncoder, which failed to load: \" +\n+              e.getMessage(), e);\n     }\n+  }\n \n-    private static MethodHandle charArrayGetter()\n+  private static MethodHandle charArrayGetter()\n+  {\n+    MethodHandles.Lookup lookup = MethodHandles.lookup();\n+    try\n     {\n-        MethodHandles.Lookup lookup = MethodHandles.lookup();\n-        try\n-        {\n-            Field value = String.class.getDeclaredField( \"value\" );\n-            if ( value.getType() != char[].class )\n-            {\n-                throw new AssertionError(\n-                        \"This encoder depends being able to access raw char[] in java.lang.String, but the class is backed by a \" +\n-                                value.getType().getCanonicalName() );\n-            }\n-            value.setAccessible( true );\n-            return lookup.unreflectGetter( value );\n-        }\n-        catch ( Throwable e )\n-        {\n-            throw new AssertionError(\n-                    \"This encoder depends being able to access raw char[] in java.lang.String, which failed: \" +\n-                    e.getMessage(), e );\n-        }\n+      Field value = String.class.getDeclaredField(\"value\");\n+      if (value.getType() != char[].class)\n+      {\n+        throw new AssertionError(\n+            \"This encoder depends being able to access raw char[] in java.lang.String, but the class is backed by a \" +\n+                value.getType().getCanonicalName());\n+      }\n+      value.setAccessible(true);\n+      return lookup.unreflectGetter(value);\n+    } catch (Throwable e)\n+    {\n+      throw new AssertionError(\n+          \"This encoder depends being able to access raw char[] in java.lang.String, which failed: \" +\n+              e.getMessage(), e);\n     }\n+  }\n \n-    /*\n-     * If String.class is backed by a char[] together with an offset, return\n-     * the offset otherwise return 0.\n-     */\n-    private static int offset( String value )\n+  /*\n+   * If String.class is backed by a char[] together with an offset, return\n+   * the offset otherwise return 0.\n+   */\n+  private static int offset(String value)\n+  {\n+    try\n+    {\n+      return getOffset == null ? 0 : (int) getOffset.invoke(value);\n+    } catch (Throwable e)\n     {\n-        try\n-        {\n-            return getOffset == null ? 0 : (int) getOffset.invoke( value );\n-        }\n-        catch ( Throwable e )\n-        {\n-            throw new AssertionError(\n-                    \"This encoder depends being able to access the offset in the char[] array in java.lang.String, \" +\n-                    \"which failed: \" +\n-                    e.getMessage(), e );\n-        }\n+      throw new AssertionError(\n+          \"This encoder depends being able to access the offset in the char[] array in java.lang.String, \" +\n+              \"which failed: \" +\n+              e.getMessage(), e);\n     }\n+  }\n \n-    private static MethodHandle offsetHandle()\n+  private static MethodHandle offsetHandle()\n+  {\n+    //We need access to the internal char[] in order to do gc free\n+    //encoding. However for ibm jdk it is not always true that\n+    //\"foo\" is backed by exactly ['f', 'o', 'o'], for example single\n+    //ascii characters strings like \"a\" is backed by:\n+    //\n+    //    value = ['0', '1', ..., 'A', 'B', ..., 'a', 'b', ...]\n+    //    offset = 'a'\n+    //\n+    //Hence we need access both to `value` and `offset`\n+    MethodHandles.Lookup lookup = MethodHandles.lookup();\n+    try\n+    {\n+      Field value = String.class.getDeclaredField(\"offset\");\n+      value.setAccessible(true);\n+      return lookup.unreflectGetter(value);\n+    } catch (Throwable e)\n     {\n-        //We need access to the internal char[] in order to do gc free\n-        //encoding. However for ibm jdk it is not always true that\n-        //\"foo\" is backed by exactly ['f', 'o', 'o'], for example single\n-        //ascii characters strings like \"a\" is backed by:\n-        //\n-        //    value = ['0', '1', ..., 'A', 'B', ..., 'a', 'b', ...]\n-        //    offset = 'a'\n-        //\n-        //Hence we need access both to `value` and `offset`\n-        MethodHandles.Lookup lookup = MethodHandles.lookup();\n-        try\n-        {\n-            Field value = String.class.getDeclaredField( \"offset\" );\n-            value.setAccessible( true );\n-            return lookup.unreflectGetter( value );\n-        }\n-        catch ( Throwable e )\n-        {\n-            //there is no offset in String implementation\n-            return null;\n-        }\n+      //there is no offset in String implementation\n+      return null;\n     }\n+  }\n }\n",
            "diff_size": 164
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1332/SunMiscUTF8Encoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1332/SunMiscUTF8Encoder.java\nindex 376ea29de44..747b20fa42b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1332/SunMiscUTF8Encoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1332/SunMiscUTF8Encoder.java\n@@ -54,9 +54,9 @@ import static org.neo4j.util.FeatureToggles.getInteger;\n public class SunMiscUTF8Encoder implements UTF8Encoder\n {\n     private static final int BUFFER_SIZE = getInteger( SunMiscUTF8Encoder.class, \"buffer_size\", 1024 * 16 );\n-    private static final int fallbackAtStringLength =\n-            (int) (BUFFER_SIZE / StandardCharsets.UTF_8.newEncoder().averageBytesPerChar());\n-    private static final MethodHandle getCharArray = charArrayGetter();\n+    private static final int fallbackAtStringLength = (int) ( BUFFER_SIZE / StandardCharsets.UTF_8.newEncoder().averageBytesPerChar() );\n+\n+private static final MethodHandle getCharArray = charArrayGetter();\n     private static final MethodHandle arrayEncode = arrayEncode();\n     private static final MethodHandle getOffset = offsetHandle();\n     private final CharsetEncoder charsetEncoder = StandardCharsets.UTF_8.newEncoder();\n@@ -77,9 +77,8 @@ public class SunMiscUTF8Encoder implements UTF8Encoder\n             }\n \n             char[] rawChars = (char[]) getCharArray.invoke( input );\n-            int len = (int) arrayEncode.invoke( charsetEncoder, rawChars, offset(input), input.length(), out );\n-\n-            if ( len == -1 )\n+            int len = ( int) arrayEncode.invoke( charsetEncoder, rawChars, offset(input), input.length(), out );\n+if ( len == -1 )\n             {\n                 return fallbackEncoder.encode( input );\n             }\n@@ -99,9 +98,8 @@ public class SunMiscUTF8Encoder implements UTF8Encoder\n         }\n         catch ( Throwable e )\n         {\n-            throw new AssertionError( \"This encoder depends on sun.nio.cs.ArrayEncoder, which failed to load: \" +\n-                                      e.getMessage(), e );\n-        }\n+            throw new AssertionError( \"This encoder depends on sun.nio.cs.ArrayEncoder, which failed to load: \" + e.getMessage(), e );\n+    }\n     }\n \n     private static MethodHandle arrayEncode()\n@@ -114,15 +112,12 @@ public class SunMiscUTF8Encoder implements UTF8Encoder\n         MethodHandles.Lookup lookup = MethodHandles.lookup();\n         try\n         {\n-            return lookup.unreflect( Class.forName( \"sun.nio.cs.ArrayEncoder\" )\n-                    .getMethod( \"encode\", char[].class, int.class, int.class, byte[].class ) );\n-        }\n+            return lookup.unreflect( Class.forName( \"sun.nio.cs.ArrayEncoder\" ).getMethod( \"encode\", char[].class, int.class, int.class, byte[].class ) );\n+    }\n         catch ( Throwable e )\n         {\n-            throw new AssertionError(\n-                    \"This encoder depends on sun.nio.cs.ArrayEncoder, which failed to load: \" +\n-                    e.getMessage(), e );\n-        }\n+            throw new AssertionError( \"This encoder depends on sun.nio.cs.ArrayEncoder, which failed to load: \" + e.getMessage(), e );\n+    }\n     }\n \n     private static MethodHandle charArrayGetter()\n@@ -133,19 +128,15 @@ public class SunMiscUTF8Encoder implements UTF8Encoder\n             Field value = String.class.getDeclaredField( \"value\" );\n             if ( value.getType() != char[].class )\n             {\n-                throw new AssertionError(\n-                        \"This encoder depends being able to access raw char[] in java.lang.String, but the class is backed by a \" +\n-                                value.getType().getCanonicalName() );\n-            }\n+                throw new AssertionError( \"This encoder depends being able to access raw char[] in java.lang.String, but the class is backed by a \" + value.getType().getCanonicalName() );\n+    }\n             value.setAccessible( true );\n             return lookup.unreflectGetter( value );\n         }\n         catch ( Throwable e )\n         {\n-            throw new AssertionError(\n-                    \"This encoder depends being able to access raw char[] in java.lang.String, which failed: \" +\n-                    e.getMessage(), e );\n-        }\n+            throw new AssertionError( \"This encoder depends being able to access raw char[] in java.lang.String, which failed: \" + e.getMessage(), e );\n+    }\n     }\n \n     /*\n@@ -156,15 +147,12 @@ public class SunMiscUTF8Encoder implements UTF8Encoder\n     {\n         try\n         {\n-            return getOffset == null ? 0 : (int) getOffset.invoke( value );\n+            return getOffset == null ? 0 : ( int) getOffset.invoke( value );\n         }\n         catch ( Throwable e )\n         {\n-            throw new AssertionError(\n-                    \"This encoder depends being able to access the offset in the char[] array in java.lang.String, \" +\n-                    \"which failed: \" +\n-                    e.getMessage(), e );\n-        }\n+            throw new AssertionError( \"This encoder depends being able to access the offset in the char[] array in java.lang.String, \" + \"which failed: \" + e.getMessage(), e );\n+    }\n     }\n \n     private static MethodHandle offsetHandle()\n@@ -191,4 +179,4 @@ public class SunMiscUTF8Encoder implements UTF8Encoder\n             return null;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}