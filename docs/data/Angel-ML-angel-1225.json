{
    "project_name": "Angel-ML-angel",
    "error_id": "1225",
    "information": {
        "errors": [
            {
                "line": "130",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 109).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n      for(Entry<Integer, TVector> rowEntry:rows.entrySet()) {\n        LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n      }\n\n      for(int i = 0; i < 100; i++) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1225/MatrixOpLogTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1225/MatrixOpLogTest.java\nindex f859439321c..ea763d3bb2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1225/MatrixOpLogTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1225/MatrixOpLogTest.java\n@@ -102,20 +102,20 @@ public class MatrixOpLogTest {\n \n   @Test\n   public void testUDF() throws ServiceException, IOException, InvalidParameterException,\n-    AngelException, InterruptedException, ExecutionException {\n+      AngelException, InterruptedException, ExecutionException {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient w1Task0Client = worker.getPSAgent().getMatrixClient(\"w1\", 0);\n     MatrixClient w1Task1Client = worker.getPSAgent().getMatrixClient(\"w1\", 1);\n     int matrixW1Id = w1Task0Client.getMatrixId();\n     List<Integer> rowIndexes = new ArrayList<Integer>();\n-    for(int i = 0; i < 100; i++) {\n+    for (int i = 0; i < 100; i++) {\n       rowIndexes.add(i);\n     }\n \n     GetRowsFunc func = new GetRowsFunc(new GetRowsParam(matrixW1Id, rowIndexes));\n \n-    int [] delta = new int[100000];\n-    for(int i = 0; i < 100000; i++) {\n+    int[] delta = new int[100000];\n+    for (int i = 0; i < 100000; i++) {\n       delta[i] = 1;\n     }\n \n@@ -124,13 +124,14 @@ public class MatrixOpLogTest {\n     //deltaVec.setRowId(0);\n \n     int index = 0;\n-    while(index++ < 10) {\n+    while (index++ < 10) {\n       Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n-      for(Entry<Integer, TVector> rowEntry:rows.entrySet()) {\n-        LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n+      for (Entry<Integer, TVector> rowEntry : rows.entrySet()) {\n+        LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" +\n+            sum((DenseIntVector) rowEntry.getValue()));\n       }\n \n-      for(int i = 0; i < 100; i++) {\n+      for (int i = 0; i < 100; i++) {\n         DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n         deltaVec.setMatrixId(matrixW1Id);\n         deltaVec.setRowId(i);\n@@ -148,10 +149,10 @@ public class MatrixOpLogTest {\n     }\n   }\n \n-  private int sum(DenseIntVector vec){\n-    int [] values = vec.getValues();\n+  private int sum(DenseIntVector vec) {\n+    int[] values = vec.getValues();\n     int sum = 0;\n-    for(int i = 0; i < values.length; i++) {\n+    for (int i = 0; i < values.length; i++) {\n       sum += values[i];\n     }\n     return sum;\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1225/MatrixOpLogTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1225/MatrixOpLogTest.java\nindex f859439321c..05c32e40a4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1225/MatrixOpLogTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1225/MatrixOpLogTest.java\n@@ -108,14 +108,14 @@ public class MatrixOpLogTest {\n     MatrixClient w1Task1Client = worker.getPSAgent().getMatrixClient(\"w1\", 1);\n     int matrixW1Id = w1Task0Client.getMatrixId();\n     List<Integer> rowIndexes = new ArrayList<Integer>();\n-    for(int i = 0; i < 100; i++) {\n+    for (int i = 0; i < 100; i++) {\n       rowIndexes.add(i);\n     }\n \n     GetRowsFunc func = new GetRowsFunc(new GetRowsParam(matrixW1Id, rowIndexes));\n \n-    int [] delta = new int[100000];\n-    for(int i = 0; i < 100000; i++) {\n+    int[] delta = new int[100000];\n+    for (int i = 0; i < 100000; i++) {\n       delta[i] = 1;\n     }\n \n@@ -124,13 +124,14 @@ public class MatrixOpLogTest {\n     //deltaVec.setRowId(0);\n \n     int index = 0;\n-    while(index++ < 10) {\n+    while (index++ < 10) {\n       Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n-      for(Entry<Integer, TVector> rowEntry:rows.entrySet()) {\n+      for (Entry<Integer, TVector> rowEntry:\n+  rows.entrySet()) {\n         LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n       }\n \n-      for(int i = 0; i < 100; i++) {\n+      for (int i = 0; i < 100; i++) {\n         DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n         deltaVec.setMatrixId(matrixW1Id);\n         deltaVec.setRowId(i);\n@@ -148,10 +149,10 @@ public class MatrixOpLogTest {\n     }\n   }\n \n-  private int sum(DenseIntVector vec){\n-    int [] values = vec.getValues();\n+  private int sum(DenseIntVector vec) {\n+    int[] values = vec.getValues();\n     int sum = 0;\n-    for(int i = 0; i < values.length; i++) {\n+    for (int i = 0; i < values.length; i++) {\n       sum += values[i];\n     }\n     return sum;\n@@ -162,4 +163,4 @@ public class MatrixOpLogTest {\n     LOG.info(\"stop local cluster\");\n     angelClient.stop();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1225/MatrixOpLogTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1225/MatrixOpLogTest.java\nindex f859439321c..13e8699aaa2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1225/MatrixOpLogTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1225/MatrixOpLogTest.java\n@@ -31,7 +31,6 @@ import org.apache.log4j.PropertyConfigurator;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -40,6 +39,7 @@ import java.util.Map.Entry;\n import java.util.concurrent.ExecutionException;\n \n public class MatrixOpLogTest {\n+\n   private static final Log LOG = LogFactory.getLog(MatrixOpLogTest.class);\n   private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n   private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n@@ -68,7 +68,6 @@ public class MatrixOpLogTest {\n     conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/out\");\n     conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n     conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n     conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 2);\n@@ -89,7 +88,6 @@ public class MatrixOpLogTest {\n     mMatrix.set(MatrixConf.MATRIX_AVERAGE, \"false\");\n     mMatrix.set(MatrixConf.MATRIX_OPLOG_TYPE, \"DENSE_INT\");\n     angelClient.addMatrix(mMatrix);\n-\n     angelClient.startPSServer();\n     angelClient.run();\n     Thread.sleep(5000);\n@@ -101,21 +99,19 @@ public class MatrixOpLogTest {\n   }\n \n   @Test\n-  public void testUDF() throws ServiceException, IOException, InvalidParameterException,\n-    AngelException, InterruptedException, ExecutionException {\n+  public void testUDF() throws ServiceException, IOException, InvalidParameterException, AngelException, InterruptedException, ExecutionException {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient w1Task0Client = worker.getPSAgent().getMatrixClient(\"w1\", 0);\n     MatrixClient w1Task1Client = worker.getPSAgent().getMatrixClient(\"w1\", 1);\n     int matrixW1Id = w1Task0Client.getMatrixId();\n     List<Integer> rowIndexes = new ArrayList<Integer>();\n-    for(int i = 0; i < 100; i++) {\n+    for (int i = 0; i < 100; i++) {\n       rowIndexes.add(i);\n     }\n \n     GetRowsFunc func = new GetRowsFunc(new GetRowsParam(matrixW1Id, rowIndexes));\n-\n-    int [] delta = new int[100000];\n-    for(int i = 0; i < 100000; i++) {\n+    int[] delta = new int[100000];\n+    for (int i = 0; i < 100000; i++) {\n       delta[i] = 1;\n     }\n \n@@ -124,34 +120,31 @@ public class MatrixOpLogTest {\n     //deltaVec.setRowId(0);\n \n     int index = 0;\n-    while(index++ < 10) {\n+    while (index++ < 10) {\n       Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n-      for(Entry<Integer, TVector> rowEntry:rows.entrySet()) {\n+      for (Entry<Integer, TVector> rowEntry : rows.entrySet()) {\n         LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n       }\n \n-      for(int i = 0; i < 100; i++) {\n+      for (int i = 0; i < 100; i++) {\n         DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n         deltaVec.setMatrixId(matrixW1Id);\n         deltaVec.setRowId(i);\n-\n         w1Task0Client.increment(deltaVec);\n-\n         deltaVec = new DenseIntVector(100000, delta);\n         deltaVec.setMatrixId(matrixW1Id);\n         deltaVec.setRowId(i);\n         w1Task1Client.increment(deltaVec);\n       }\n-\n       w1Task0Client.clock().get();\n       w1Task1Client.clock().get();\n     }\n   }\n \n-  private int sum(DenseIntVector vec){\n-    int [] values = vec.getValues();\n+  private int sum(DenseIntVector vec) {\n+    int[] values = vec.getValues();\n     int sum = 0;\n-    for(int i = 0; i < values.length; i++) {\n+    for (int i = 0; i < values.length; i++) {\n       sum += values[i];\n     }\n     return sum;\n@@ -162,4 +155,4 @@ public class MatrixOpLogTest {\n     LOG.info(\"stop local cluster\");\n     angelClient.stop();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}