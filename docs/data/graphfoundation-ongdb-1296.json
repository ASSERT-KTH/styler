{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1296",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1296/DefaultCapableIndexReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1296/DefaultCapableIndexReference.java\nindex 5ab68d7d636..ca9f2949c90 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1296/DefaultCapableIndexReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1296/DefaultCapableIndexReference.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.store;\n \n import java.util.Arrays;\n@@ -34,108 +35,108 @@ import org.neo4j.values.storable.ValueCategory;\n \n public class DefaultCapableIndexReference implements CapableIndexReference\n {\n-    private final int label;\n-    private final int[] properties;\n-    private final boolean unique;\n-    private final IndexProvider.Descriptor providerDescriptor;\n-    private final IndexCapability capability;\n-\n-    public DefaultCapableIndexReference( boolean unique, IndexCapability indexCapability,\n-                IndexProvider.Descriptor providerDescriptor, int label, int... properties )\n-    {\n-        this.unique = unique;\n-        this.capability = indexCapability;\n-        this.label = label;\n-        this.providerDescriptor = providerDescriptor;\n-        this.properties = properties;\n-    }\n-\n-    @Override\n-    public boolean isUnique()\n-    {\n-        return unique;\n-    }\n-\n-    @Override\n-    public int label()\n-    {\n-        return label;\n-    }\n-\n-    @Override\n-    public int[] properties()\n-    {\n-        return properties;\n-    }\n-\n-    @Override\n-    public String providerKey()\n-    {\n-        return providerDescriptor.getKey();\n-    }\n-\n-    @Override\n-    public String providerVersion()\n-    {\n-        return providerDescriptor.getVersion();\n-    }\n-\n-    @Override\n-    public IndexLimitation[] limitations()\n-    {\n-        return capability.limitations();\n-    }\n-\n-    @Override\n-    public IndexOrder[] orderCapability( ValueCategory... valueCategories )\n+  private final int label;\n+  private final int[] properties;\n+  private final boolean unique;\n+  private final IndexProvider.Descriptor providerDescriptor;\n+  private final IndexCapability capability;\n+\n+  public DefaultCapableIndexReference(boolean unique, IndexCapability indexCapability,\n+                                      IndexProvider.Descriptor providerDescriptor, int label, int... properties)\n+  {\n+    this.unique = unique;\n+    this.capability = indexCapability;\n+    this.label = label;\n+    this.providerDescriptor = providerDescriptor;\n+    this.properties = properties;\n+  }\n+\n+  @Override\n+  public boolean isUnique()\n+  {\n+    return unique;\n+  }\n+\n+  @Override\n+  public int label()\n+  {\n+    return label;\n+  }\n+\n+  @Override\n+  public int[] properties()\n+  {\n+    return properties;\n+  }\n+\n+  @Override\n+  public String providerKey()\n+  {\n+    return providerDescriptor.getKey();\n+  }\n+\n+  @Override\n+  public String providerVersion()\n+  {\n+    return providerDescriptor.getVersion();\n+  }\n+\n+  @Override\n+  public IndexLimitation[] limitations()\n+  {\n+    return capability.limitations();\n+  }\n+\n+  @Override\n+  public IndexOrder[] orderCapability(ValueCategory... valueCategories)\n+  {\n+    return capability.orderCapability(valueCategories);\n+  }\n+\n+  @Override\n+  public IndexValueCapability valueCapability(ValueCategory... valueCategories)\n+  {\n+    return capability.valueCapability(valueCategories);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return capability.orderCapability( valueCategories );\n+      return true;\n     }\n-\n-    @Override\n-    public IndexValueCapability valueCapability( ValueCategory... valueCategories )\n-    {\n-        return capability.valueCapability( valueCategories );\n-    }\n-\n-    @Override\n-    public boolean equals( Object o )\n+    if (!(o instanceof IndexReference))\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( !(o instanceof IndexReference) )\n-        {\n-            return false;\n-        }\n-\n-        IndexReference that = (IndexReference) o;\n-\n-        return label == that.label() && unique == that.isUnique() && Arrays.equals( properties, that.properties() );\n+      return false;\n     }\n \n-    @Override\n-    public String toString()\n-    {\n-        return String.format( \"Index(%d:%s)\", label, Arrays.toString( properties ) );\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        int result = label;\n-        result = 31 * result + Arrays.hashCode( properties );\n-        result = 31 * result + (unique ? 1 : 0);\n-        result = 31 * result + (providerDescriptor != null ? providerDescriptor.hashCode() : 0);\n-        return result;\n-    }\n-\n-    public static CapableIndexReference fromDescriptor( SchemaIndexDescriptor descriptor )\n-    {\n-        boolean unique =  descriptor.type() == SchemaIndexDescriptor.Type.UNIQUE;\n-        final SchemaDescriptor schema = descriptor.schema();\n-        return new DefaultCapableIndexReference( unique, IndexCapability.NO_CAPABILITY, IndexProvider.UNDECIDED,\n-                schema.keyId(), schema.getPropertyIds() );\n-    }\n+    IndexReference that = (IndexReference) o;\n+\n+    return label == that.label() && unique == that.isUnique() && Arrays.equals(properties, that.properties());\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return String.format(\"Index(%d:%s)\", label, Arrays.toString(properties));\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = label;\n+    result = 31 * result + Arrays.hashCode(properties);\n+    result = 31 * result + (unique ? 1 : 0);\n+    result = 31 * result + (providerDescriptor != null ? providerDescriptor.hashCode() : 0);\n+    return result;\n+  }\n+\n+  public static CapableIndexReference fromDescriptor(SchemaIndexDescriptor descriptor)\n+  {\n+    boolean unique = descriptor.type() == SchemaIndexDescriptor.Type.UNIQUE;\n+    final SchemaDescriptor schema = descriptor.schema();\n+    return new DefaultCapableIndexReference(unique, IndexCapability.NO_CAPABILITY, IndexProvider.UNDECIDED,\n+        schema.keyId(), schema.getPropertyIds());\n+  }\n }\n",
            "diff_size": 119
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1296/DefaultCapableIndexReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1296/DefaultCapableIndexReference.java\nindex 5ab68d7d636..cdbd5dfd91d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1296/DefaultCapableIndexReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1296/DefaultCapableIndexReference.java\n@@ -40,9 +40,8 @@ public class DefaultCapableIndexReference implements CapableIndexReference\n     private final IndexProvider.Descriptor providerDescriptor;\n     private final IndexCapability capability;\n \n-    public DefaultCapableIndexReference( boolean unique, IndexCapability indexCapability,\n-                IndexProvider.Descriptor providerDescriptor, int label, int... properties )\n-    {\n+    public DefaultCapableIndexReference( boolean unique, IndexCapability indexCapability, IndexProvider.Descriptor providerDescriptor, int label, int... properties )\n+{\n         this.unique = unique;\n         this.capability = indexCapability;\n         this.label = label;\n@@ -105,7 +104,8 @@ public class DefaultCapableIndexReference implements CapableIndexReference\n         {\n             return true;\n         }\n-        if ( !(o instanceof IndexReference) )\n+\n+if ( !( o instanceof IndexReference) )\n         {\n             return false;\n         }\n@@ -126,16 +126,16 @@ public class DefaultCapableIndexReference implements CapableIndexReference\n     {\n         int result = label;\n         result = 31 * result + Arrays.hashCode( properties );\n-        result = 31 * result + (unique ? 1 : 0);\n-        result = 31 * result + (providerDescriptor != null ? providerDescriptor.hashCode() : 0);\n+        result = 31 * result + ( unique ? 1 : 0 );\n+        result = 31 * result + (providerDescriptor != null ? providerDescriptor.hashCode() : 0 );\n         return result;\n     }\n \n     public static CapableIndexReference fromDescriptor( SchemaIndexDescriptor descriptor )\n     {\n-        boolean unique =  descriptor.type() == SchemaIndexDescriptor.Type.UNIQUE;\n+        boolean unique = descriptor.type() == SchemaIndexDescriptor.Type.UNIQUE;\n         final SchemaDescriptor schema = descriptor.schema();\n         return new DefaultCapableIndexReference( unique, IndexCapability.NO_CAPABILITY, IndexProvider.UNDECIDED,\n                 schema.keyId(), schema.getPropertyIds() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}