{
    "project_name": "IQSS-dataverse",
    "error_id": "92",
    "information": {
        "errors": [
            {
                "line": "1285",
                "column": "25",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n                        /*if (StringUtils.isNotBlank(seriesName)){\n                        \tcontributor_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n                        \t\n                        \twriteDescriptionElement(xmlw, \"SeriesInformation\", seriesName);\n                        }*/",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1285",
                    "column": "25",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/92/OpenAireExportUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/92/OpenAireExportUtil.java\nindex fe0c15969ca..0b2fbff01a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/92/OpenAireExportUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/92/OpenAireExportUtil.java\n@@ -290,7 +290,7 @@ public class OpenAireExportUtil {\n                                 } else {\n                                     String givenName = FirstNames.getInstance().getFirstName(creatorName);\n                                     boolean isOrganization = Organizations.getInstance().isOrganization(creatorName);\n-                                    \n+\n                                     if (givenName != null && !isOrganization) {\n                                         // givenName ok, creatorName=<FirstName> <FamilyName>\n                                         creator_map.put(\"nameType\", \"Personal\");\n@@ -1340,7 +1340,7 @@ public class OpenAireExportUtil {\n         // write geoLocations\n         geoLocations_check = writeOpenTag(xmlw, \"geoLocations\", geoLocations_check);\n         writeGeolocationPlace(xmlw, geoLocationPlace, language);\n-                \n+\n         // get DatasetFieldConstant.geographicBoundingBox\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             MetadataBlockDTO value = entry.getValue();\n@@ -1373,14 +1373,14 @@ public class OpenAireExportUtil {\n      */\n     public static void writeGeolocationPlace(XMLStreamWriter xmlw, String geoLocationPlace, String language) throws XMLStreamException {\n         boolean geoLocation_check = false;\n-        \n+\n         if (StringUtils.isNotBlank(geoLocationPlace)) {\n             geoLocation_check = writeOpenTag(xmlw, \"geoLocation\", geoLocation_check);\n             writeFullElement(xmlw, null, \"geoLocationPlace\", null, geoLocationPlace, language);\n         }\n         writeEndTag(xmlw, geoLocation_check);\n     }\n-    \n+\n     /**\n      * 18 GeoLocation (R)\n      *\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1312",
                    "column": "25",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/92/OpenAireExportUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/92/OpenAireExportUtil.java\nindex fe0c15969ca..f015a074cf8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/92/OpenAireExportUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/92/OpenAireExportUtil.java\n@@ -31,1575 +31,1610 @@ import javax.mail.internet.InternetAddress;\n \n public class OpenAireExportUtil {\n \n-    private static final Logger logger = Logger.getLogger(OpenAireExportUtil.class.getCanonicalName());\n+  private static final Logger logger = Logger.getLogger(OpenAireExportUtil.class.getCanonicalName());\n \n-    public static String XSI_NAMESPACE = \"http://www.w3.org/2001/XMLSchema-instance\";\n-    public static String SCHEMA_VERSION = \"4.1\";\n-    public static String RESOURCE_NAMESPACE = \"http://datacite.org/schema/kernel-4\";\n-    public static String RESOURCE_SCHEMA_LOCATION = \"http://schema.datacite.org/meta/kernel-4.1/metadata.xsd\";\n+  public static String XSI_NAMESPACE = \"http://www.w3.org/2001/XMLSchema-instance\";\n+  public static String SCHEMA_VERSION = \"4.1\";\n+  public static String RESOURCE_NAMESPACE = \"http://datacite.org/schema/kernel-4\";\n+  public static String RESOURCE_SCHEMA_LOCATION = \"http://schema.datacite.org/meta/kernel-4.1/metadata.xsd\";\n \n-    public static String FunderType = \"Funder\";\n+  public static String FunderType = \"Funder\";\n \n-    public static void datasetJson2openaire(JsonObject datasetDtoAsJson, OutputStream outputStream) throws XMLStreamException {\n-        logger.fine(JsonUtil.prettyPrint(datasetDtoAsJson.toString()));\n-        Gson gson = new Gson();\n-        DatasetDTO datasetDto = gson.fromJson(datasetDtoAsJson.toString(), DatasetDTO.class);\n+  public static void datasetJson2openaire(JsonObject datasetDtoAsJson, OutputStream outputStream)\n+    throws XMLStreamException {\n+    logger.fine(JsonUtil.prettyPrint(datasetDtoAsJson.toString()));\n+    Gson gson = new Gson();\n+    DatasetDTO datasetDto = gson.fromJson(datasetDtoAsJson.toString(), DatasetDTO.class);\n \n-        dto2openaire(datasetDto, outputStream);\n-    }\n-\n-    private static void dto2openaire(DatasetDTO datasetDto, OutputStream outputStream) throws XMLStreamException {\n-        XMLStreamWriter xmlw = XMLOutputFactory.newInstance().createXMLStreamWriter(outputStream);\n-\n-        xmlw.writeStartElement(\"resource\"); // <resource>\n-\n-        xmlw.writeAttribute(\"xmlns:xsi\", XSI_NAMESPACE);\n-        xmlw.writeAttribute(\"xmlns\", RESOURCE_NAMESPACE);\n-        xmlw.writeAttribute(\"xsi:schemaLocation\", RESOURCE_NAMESPACE + \" \" + RESOURCE_SCHEMA_LOCATION);\n-\n-        createOpenAire(xmlw, datasetDto);\n-\n-        xmlw.writeEndElement(); // </resource>\n-\n-        xmlw.flush();\n-    }\n-\n-    private static void createOpenAire(XMLStreamWriter xmlw, DatasetDTO datasetDto) throws XMLStreamException {\n-        DatasetVersionDTO version = datasetDto.getDatasetVersion();\n-        String persistentAgency = datasetDto.getProtocol();\n-        String persistentAuthority = datasetDto.getAuthority();\n-        String persistentId = datasetDto.getIdentifier();\n-        GlobalId globalId = new GlobalId(persistentAgency, persistentAuthority, persistentId);\n-\n-        // The sequence is revied using sample:\n-        // https://schema.datacite.org/meta/kernel-4.0/example/datacite-example-full-v4.0.xml\n-        //\n-        // See also: https://schema.datacite.org/meta/kernel-4.0/doc/DataCite-MetadataKernel_v4.0.pdf\n-        // Table 1: DataCite Mandatory Properties\n-        // set language \n-        //String language = getLanguage(xmlw, version);\n-        String language = null;\n-\n-        // 1, Identifier (with mandatory type sub-property) (M)\n-        writeIdentifierElement(xmlw, globalId.toURL().toString(), language);\n-\n-        // 2, Creator (with optional given name, family name, \n-        //      name identifier and affiliation sub-properties) (M)\n-        writeCreatorsElement(xmlw, version, language);\n-\n-        // 3, Title (with optional type sub-properties)\n-        writeTitlesElement(xmlw, version, language);\n-\n-        // 4, Publisher (M)\n-        String publisher = datasetDto.getPublisher();\n-        if (StringUtils.isNotBlank(publisher)) {\n-            writeFullElement(xmlw, null, \"publisher\", null, publisher, language);\n-        }\n-\n-        // 5, PublicationYear (M)\n-        String publicationDate = datasetDto.getPublicationDate();\n-        writePublicationYearElement(xmlw, version, publicationDate, language);\n+    dto2openaire(datasetDto, outputStream);\n+  }\n \n-        // 6, Subject (with scheme sub-property)\n-        writeSubjectsElement(xmlw, version, language);\n+  private static void dto2openaire(DatasetDTO datasetDto, OutputStream outputStream) throws XMLStreamException {\n+    XMLStreamWriter xmlw = XMLOutputFactory.newInstance().createXMLStreamWriter(outputStream);\n \n-        // 7, Contributor (with optional given name, family name, \n-        //      name identifier and affiliation sub-properties)\n-        writeContributorsElement(xmlw, version, language);\n+    xmlw.writeStartElement(\"resource\"); // <resource>\n \n-        // 8, Date (with type sub-property)  (R)\n-        writeDatesElement(xmlw, version, language);\n+    xmlw.writeAttribute(\"xmlns:xsi\", XSI_NAMESPACE);\n+    xmlw.writeAttribute(\"xmlns\", RESOURCE_NAMESPACE);\n+    xmlw.writeAttribute(\"xsi:schemaLocation\", RESOURCE_NAMESPACE + \" \" + RESOURCE_SCHEMA_LOCATION);\n \n-        // 9, Language (MA), language\n-        writeFullElement(xmlw, null, \"language\", null, language, null);\n+    createOpenAire(xmlw, datasetDto);\n \n-        // 10, ResourceType (with mandatory general type \n-        //      description sub- property) (M)\n-        writeResourceTypeElement(xmlw, version, language);\n+    xmlw.writeEndElement(); // </resource>\n \n-        // 11. AlternateIdentifier (with type sub-property) (O)\n-        writeAlternateIdentifierElement(xmlw, version, language);\n+    xmlw.flush();\n+  }\n \n-        // 12, RelatedIdentifier (with type and relation type sub-properties) (R)\n-        writeRelatedIdentifierElement(xmlw, version, language);\n+  private static void createOpenAire(XMLStreamWriter xmlw, DatasetDTO datasetDto) throws XMLStreamException {\n+    DatasetVersionDTO version = datasetDto.getDatasetVersion();\n+    String persistentAgency = datasetDto.getProtocol();\n+    String persistentAuthority = datasetDto.getAuthority();\n+    String persistentId = datasetDto.getIdentifier();\n+    GlobalId globalId = new GlobalId(persistentAgency, persistentAuthority, persistentId);\n \n-        // 13, Size (O)\n-        writeSizeElement(xmlw, version, language);\n+    // The sequence is revied using sample:\n+    // https://schema.datacite.org/meta/kernel-4.0/example/datacite-example-full-v4.0.xml\n+    //\n+    // See also: https://schema.datacite.org/meta/kernel-4.0/doc/DataCite-MetadataKernel_v4.0.pdf\n+    // Table 1: DataCite Mandatory Properties\n+    // set language\n+    //String language = getLanguage(xmlw, version);\n+    String language = null;\n \n-        // 14 Format (O)\n-        writeFormatElement(xmlw, version, language);\n+    // 1, Identifier (with mandatory type sub-property) (M)\n+    writeIdentifierElement(xmlw, globalId.toURL().toString(), language);\n \n-        // 15 Version (O)\n-        writeVersionElement(xmlw, version, language);\n+    // 2, Creator (with optional given name, family name,\n+    //      name identifier and affiliation sub-properties) (M)\n+    writeCreatorsElement(xmlw, version, language);\n \n-        // 16 Rights (O), rights\n-        writeAccessRightsElement(xmlw, version/*, version.getTermsOfAccess(), version.getRestrictions()*/, language);\n+    // 3, Title (with optional type sub-properties)\n+    writeTitlesElement(xmlw, version, language);\n \n-        // 17 Description (R), description\n-        writeDescriptionsElement(xmlw, version, language);\n-\n-        // 18 GeoLocation (with point, box and polygon sub-properties) (R)\n-        writeGeoLocationsElement(xmlw, version, language);\n-\n-        // 19 FundingReference (with name, identifier, and award related sub- properties) (O)\n-        writeFundingReferencesElement(xmlw, version, language);\n+    // 4, Publisher (M)\n+    String publisher = datasetDto.getPublisher();\n+    if (StringUtils.isNotBlank(publisher)) {\n+      writeFullElement(xmlw, null, \"publisher\", null, publisher, language);\n     }\n \n-    /**\n-     * Get the language value or null\n-     *\n-     * @param xmlw\n-     * @param datasetVersionDTO\n-     * @return\n-     * @throws XMLStreamException\n-     */\n-    public static String getLanguage(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO) throws XMLStreamException {\n-        String language = null;\n-\n-        // set the default language (using language attribute)\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.language.equals(fieldDTO.getTypeName())) {\n-                        for (String language_found : fieldDTO.getMultipleVocab()) {\n-                            if (StringUtils.isNotBlank(language_found)) {\n-                                language = language_found;\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n+    // 5, PublicationYear (M)\n+    String publicationDate = datasetDto.getPublicationDate();\n+    writePublicationYearElement(xmlw, version, publicationDate, language);\n+\n+    // 6, Subject (with scheme sub-property)\n+    writeSubjectsElement(xmlw, version, language);\n+\n+    // 7, Contributor (with optional given name, family name,\n+    //      name identifier and affiliation sub-properties)\n+    writeContributorsElement(xmlw, version, language);\n+\n+    // 8, Date (with type sub-property)  (R)\n+    writeDatesElement(xmlw, version, language);\n+\n+    // 9, Language (MA), language\n+    writeFullElement(xmlw, null, \"language\", null, language, null);\n+\n+    // 10, ResourceType (with mandatory general type\n+    //      description sub- property) (M)\n+    writeResourceTypeElement(xmlw, version, language);\n+\n+    // 11. AlternateIdentifier (with type sub-property) (O)\n+    writeAlternateIdentifierElement(xmlw, version, language);\n+\n+    // 12, RelatedIdentifier (with type and relation type sub-properties) (R)\n+    writeRelatedIdentifierElement(xmlw, version, language);\n+\n+    // 13, Size (O)\n+    writeSizeElement(xmlw, version, language);\n+\n+    // 14 Format (O)\n+    writeFormatElement(xmlw, version, language);\n+\n+    // 15 Version (O)\n+    writeVersionElement(xmlw, version, language);\n+\n+    // 16 Rights (O), rights\n+    writeAccessRightsElement(xmlw, version/*, version.getTermsOfAccess(), version.getRestrictions()*/, language);\n+\n+    // 17 Description (R), description\n+    writeDescriptionsElement(xmlw, version, language);\n+\n+    // 18 GeoLocation (with point, box and polygon sub-properties) (R)\n+    writeGeoLocationsElement(xmlw, version, language);\n+\n+    // 19 FundingReference (with name, identifier, and award related sub- properties) (O)\n+    writeFundingReferencesElement(xmlw, version, language);\n+  }\n+\n+  /**\n+   * Get the language value or null\n+   *\n+   * @param xmlw\n+   * @param datasetVersionDTO\n+   * @return\n+   * @throws XMLStreamException\n+   */\n+  public static String getLanguage(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO)\n+    throws XMLStreamException {\n+    String language = null;\n+\n+    // set the default language (using language attribute)\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.language.equals(fieldDTO.getTypeName())) {\n+            for (String language_found : fieldDTO.getMultipleVocab()) {\n+              if (StringUtils.isNotBlank(language_found)) {\n+                language = language_found;\n+                break;\n+              }\n             }\n+          }\n         }\n-\n-        return language;\n+      }\n     }\n \n-    /**\n-     * 1, Identifier (with mandatory type sub-property) (M)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param identifier The identifier url like https://doi.org/10.123/123\n-     * @throws XMLStreamException\n-     */\n-    public static void writeIdentifierElement(XMLStreamWriter xmlw, String identifier, String language) throws XMLStreamException {\n-        // identifier with identifierType attribute        \n-        if (StringUtils.isNotBlank(identifier)) {\n-            Map<String, String> identifier_map = new HashMap<String, String>();\n-\n-            if (StringUtils.containsIgnoreCase(identifier, GlobalId.DOI_RESOLVER_URL)) {\n-                identifier_map.put(\"identifierType\", \"DOI\");\n-                identifier = StringUtils.substring(identifier, identifier.indexOf(\"10.\"));\n-            } else if (StringUtils.containsIgnoreCase(identifier, GlobalId.HDL_RESOLVER_URL)) {\n-                identifier_map.put(\"identifierType\", \"Handle\");\n-                if (StringUtils.contains(identifier, \"http\")) {\n-                    identifier = identifier.replace(identifier.substring(0, identifier.indexOf(\"/\") + 2), \"\");\n-                    identifier = identifier.substring(identifier.indexOf(\"/\") + 1);\n-                }\n-            }\n-            writeFullElement(xmlw, null, \"identifier\", identifier_map, identifier, language);\n+    return language;\n+  }\n+\n+  /**\n+   * 1, Identifier (with mandatory type sub-property) (M)\n+   *\n+   * @param xmlw       The Steam writer\n+   * @param identifier The identifier url like https://doi.org/10.123/123\n+   * @throws XMLStreamException\n+   */\n+  public static void writeIdentifierElement(XMLStreamWriter xmlw, String identifier, String language)\n+    throws XMLStreamException {\n+    // identifier with identifierType attribute\n+    if (StringUtils.isNotBlank(identifier)) {\n+      Map<String, String> identifier_map = new HashMap<String, String>();\n+\n+      if (StringUtils.containsIgnoreCase(identifier, GlobalId.DOI_RESOLVER_URL)) {\n+        identifier_map.put(\"identifierType\", \"DOI\");\n+        identifier = StringUtils.substring(identifier, identifier.indexOf(\"10.\"));\n+      } else if (StringUtils.containsIgnoreCase(identifier, GlobalId.HDL_RESOLVER_URL)) {\n+        identifier_map.put(\"identifierType\", \"Handle\");\n+        if (StringUtils.contains(identifier, \"http\")) {\n+          identifier = identifier.replace(identifier.substring(0, identifier.indexOf(\"/\") + 2), \"\");\n+          identifier = identifier.substring(identifier.indexOf(\"/\") + 1);\n         }\n+      }\n+      writeFullElement(xmlw, null, \"identifier\", identifier_map, identifier, language);\n     }\n-\n-    /**\n-     * 2, Creator (with optional given name, family name, name identifier and\n-     * affiliation sub-properties) (M)\n-     *\n-     * @param xmlw The stream writer\n-     * @param datasetVersionDTO\n-     * @param language current language value\n-     * @throws XMLStreamException\n-     */\n-    public static void writeCreatorsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // creators -> creator -> creatorName with nameType attribute, givenName, familyName, nameIdentifier\n-        // write all creators\n-        boolean creator_check = false;\n-\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.author.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String creatorName = null;\n-                            String affiliation = null;\n-                            String nameIdentifier = null;\n-                            String nameIdentifierScheme = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.authorName.equals(next.getTypeName())) {\n-                                    creatorName = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.authorIdValue.equals(next.getTypeName())) {\n-                                    nameIdentifier = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.authorIdType.equals(next.getTypeName())) {\n-                                    nameIdentifierScheme = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.authorAffiliation.equals(next.getTypeName())) {\n-                                    affiliation = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(creatorName)) {\n-                                creator_check = writeOpenTag(xmlw, \"creators\", creator_check);\n-                                xmlw.writeStartElement(\"creator\"); // <creator>\n-\n-                                boolean nameType_check = false;\n-                                Map<String, String> creator_map = new HashMap<String, String>();\n-                                if ((StringUtils.containsIgnoreCase(nameIdentifierScheme, \"orcid\"))) {\n-                                    creator_map.put(\"nameType\", \"Personal\");\n-                                    nameType_check = true;\n-                                }\n-\n-                                creatorName = Cleanup.normalize(creatorName);\n-                                // Datacite algorithm, https://github.com/IQSS/dataverse/issues/2243#issuecomment-358615313\n-                                if (creatorName.contains(\",\")) {\n-                                    String givenName = FirstNames.getInstance().getFirstName(creatorName);\n-                                    boolean isOrganization = Organizations.getInstance().isOrganization(creatorName);\n-\n-                                    // creatorName=<FamilyName>, <FirstName>\n-                                    if (givenName != null && !isOrganization) {\n-                                        // givenName ok\n-                                        creator_map.put(\"nameType\", \"Personal\");\n-                                        nameType_check = true;\n-                                    } else if (isOrganization) {\n-                                        creator_map.put(\"nameType\", \"Organizational\");\n-                                        nameType_check = false;\n-                                    }\n-                                    writeFullElement(xmlw, null, \"creatorName\", creator_map, creatorName, language);\n-\n-                                    if ((nameType_check) && (!creatorName.replaceFirst(\",\", \"\").contains(\",\"))) {\n-                                        // creatorName=<FamilyName>, <FirstName>\n-                                        String[] fullName = creatorName.split(\", \");\n-                                        if (fullName.length == 2) {\n-                                            givenName = fullName[1];\n-                                            String familyName = fullName[0];\n-\n-                                            writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n-                                            writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n-                                        } else {\n-                                            // It's possible to get here if \"Smith,\" is entered as an author name.\n-                                            logger.info(\"Unable to write givenName and familyName based on creatorName '\" + creatorName + \"'.\");\n-                                        }\n-                                    }\n-                                } else {\n-                                    String givenName = FirstNames.getInstance().getFirstName(creatorName);\n-                                    boolean isOrganization = Organizations.getInstance().isOrganization(creatorName);\n-                                    \n-                                    if (givenName != null && !isOrganization) {\n-                                        // givenName ok, creatorName=<FirstName> <FamilyName>\n-                                        creator_map.put(\"nameType\", \"Personal\");\n-                                        nameType_check = true;\n-                                        writeFullElement(xmlw, null, \"creatorName\", creator_map, creatorName, language);\n-\n-                                        String familyName = \"\";\n-                                        if (givenName.length() + 1 < creatorName.length()) {\n-                                            familyName = creatorName.substring(givenName.length() + 1);\n-                                        }\n-\n-                                        writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n-                                        writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n-                                    } else {\n-                                        // default\n-                                        if (isOrganization) {\n-                                            creator_map.put(\"nameType\", \"Organizational\");\n-                                        }\n-                                        writeFullElement(xmlw, null, \"creatorName\", creator_map, creatorName, language);\n-                                    }\n-                                }\n-\n-                                if (StringUtils.isNotBlank(nameIdentifier)) {\n-                                    creator_map.clear();\n-\n-                                    if (StringUtils.contains(nameIdentifier, \"http\")) {\n-                                        String site = nameIdentifier.substring(0, nameIdentifier.indexOf(\"/\") + 2);\n-                                        nameIdentifier = nameIdentifier.replace(nameIdentifier.substring(0, nameIdentifier.indexOf(\"/\") + 2), \"\");\n-                                        site = site + nameIdentifier.substring(0, nameIdentifier.indexOf(\"/\") + 1);\n-                                        nameIdentifier = nameIdentifier.substring(nameIdentifier.indexOf(\"/\") + 1);\n-\n-                                        creator_map.put(\"SchemeURI\", site);\n-                                    }\n-\n-                                    if (StringUtils.isNotBlank(nameIdentifierScheme)) {\n-                                        creator_map.put(\"nameIdentifierScheme\", nameIdentifierScheme);\n-                                        writeFullElement(xmlw, null, \"nameIdentifier\", creator_map, nameIdentifier, language);\n-                                    } else {\n-                                        writeFullElement(xmlw, null, \"nameIdentifier\", null, nameIdentifier, language);\n-                                    }\n-                                }\n-\n-                                if (StringUtils.isNotBlank(affiliation)) {\n-                                    writeFullElement(xmlw, null, \"affiliation\", null, affiliation, language);\n-                                }\n-                                xmlw.writeEndElement(); // </creator>\n-                            }\n-                        }\n-                    }\n+  }\n+\n+  /**\n+   * 2, Creator (with optional given name, family name, name identifier and\n+   * affiliation sub-properties) (M)\n+   *\n+   * @param xmlw              The stream writer\n+   * @param datasetVersionDTO\n+   * @param language          current language value\n+   * @throws XMLStreamException\n+   */\n+  public static void writeCreatorsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language)\n+    throws XMLStreamException {\n+    // creators -> creator -> creatorName with nameType attribute, givenName, familyName, nameIdentifier\n+    // write all creators\n+    boolean creator_check = false;\n+\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.author.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String creatorName = null;\n+              String affiliation = null;\n+              String nameIdentifier = null;\n+              String nameIdentifierScheme = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.authorName.equals(next.getTypeName())) {\n+                  creatorName = next.getSinglePrimitive();\n                 }\n-            }\n-        }\n-        writeEndTag(xmlw, creator_check);\n-    }\n-\n-    /**\n-     * 3, Title (with optional type sub-properties) (M)\n-     *\n-     * @param xmlw The stream writer\n-     * @param datasetVersionDTO\n-     * @param language current language value\n-     * @throws XMLStreamException\n-     */\n-    public static void writeTitlesElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // titles -> title with titleType attribute\n-        boolean title_check = false;\n+                if (DatasetFieldConstant.authorIdValue.equals(next.getTypeName())) {\n+                  nameIdentifier = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.authorIdType.equals(next.getTypeName())) {\n+                  nameIdentifierScheme = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.authorAffiliation.equals(next.getTypeName())) {\n+                  affiliation = next.getSinglePrimitive();\n+                }\n+              }\n \n-        String title = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.title);\n-        title_check = writeTitleElement(xmlw, null, title, title_check, language);\n+              if (StringUtils.isNotBlank(creatorName)) {\n+                creator_check = writeOpenTag(xmlw, \"creators\", creator_check);\n+                xmlw.writeStartElement(\"creator\"); // <creator>\n \n-        String subtitle = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.subTitle);\n-        title_check = writeTitleElement(xmlw, \"Subtitle\", subtitle, title_check, language);\n+                boolean nameType_check = false;\n+                Map<String, String> creator_map = new HashMap<String, String>();\n+                if ((StringUtils.containsIgnoreCase(nameIdentifierScheme, \"orcid\"))) {\n+                  creator_map.put(\"nameType\", \"Personal\");\n+                  nameType_check = true;\n+                }\n \n-        String alternativeTitle = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.alternativeTitle);\n-        title_check = writeTitleElement(xmlw, \"AlternativeTitle\", alternativeTitle, title_check, language);\n+                creatorName = Cleanup.normalize(creatorName);\n+                // Datacite algorithm, https://github.com/IQSS/dataverse/issues/2243#issuecomment-358615313\n+                if (creatorName.contains(\",\")) {\n+                  String givenName = FirstNames.getInstance().getFirstName(creatorName);\n+                  boolean isOrganization = Organizations.getInstance().isOrganization(creatorName);\n+\n+                  // creatorName=<FamilyName>, <FirstName>\n+                  if (givenName != null && !isOrganization) {\n+                    // givenName ok\n+                    creator_map.put(\"nameType\", \"Personal\");\n+                    nameType_check = true;\n+                  } else if (isOrganization) {\n+                    creator_map.put(\"nameType\", \"Organizational\");\n+                    nameType_check = false;\n+                  }\n+                  writeFullElement(xmlw, null, \"creatorName\", creator_map, creatorName, language);\n+\n+                  if ((nameType_check) && (!creatorName.replaceFirst(\",\", \"\").contains(\",\"))) {\n+                    // creatorName=<FamilyName>, <FirstName>\n+                    String[] fullName = creatorName.split(\", \");\n+                    if (fullName.length == 2) {\n+                      givenName = fullName[1];\n+                      String familyName = fullName[0];\n+\n+                      writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n+                      writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n+                    } else {\n+                      // It's possible to get here if \"Smith,\" is entered as an author name.\n+                      logger\n+                        .info(\"Unable to write givenName and familyName based on creatorName '\" + creatorName + \"'.\");\n+                    }\n+                  }\n+                } else {\n+                  String givenName = FirstNames.getInstance().getFirstName(creatorName);\n+                  boolean isOrganization = Organizations.getInstance().isOrganization(creatorName);\n+\n+                  if (givenName != null && !isOrganization) {\n+                    // givenName ok, creatorName=<FirstName> <FamilyName>\n+                    creator_map.put(\"nameType\", \"Personal\");\n+                    nameType_check = true;\n+                    writeFullElement(xmlw, null, \"creatorName\", creator_map, creatorName, language);\n+\n+                    String familyName = \"\";\n+                    if (givenName.length() + 1 < creatorName.length()) {\n+                      familyName = creatorName.substring(givenName.length() + 1);\n+                    }\n \n-        writeEndTag(xmlw, title_check);\n-    }\n+                    writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n+                    writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n+                  } else {\n+                    // default\n+                    if (isOrganization) {\n+                      creator_map.put(\"nameType\", \"Organizational\");\n+                    }\n+                    writeFullElement(xmlw, null, \"creatorName\", creator_map, creatorName, language);\n+                  }\n+                }\n \n-    /**\n-     * 3, Title (with optional type sub-properties) (M)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param titleType The item type, for instance AlternativeTitle\n-     * @param title The title\n-     * @param title_check\n-     * @param language current language\n-     * @return\n-     * @throws XMLStreamException\n-     */\n-    private static boolean writeTitleElement(XMLStreamWriter xmlw, String titleType, String title, boolean title_check, String language) throws XMLStreamException {\n-        // write a title\n-        if (StringUtils.isNotBlank(title)) {\n-            title_check = writeOpenTag(xmlw, \"titles\", title_check);\n-            xmlw.writeStartElement(\"title\"); // <title>\n-\n-            if (StringUtils.isNotBlank(language)) {\n-                xmlw.writeAttribute(\"xml:lang\", language);\n-            }\n+                if (StringUtils.isNotBlank(nameIdentifier)) {\n+                  creator_map.clear();\n+\n+                  if (StringUtils.contains(nameIdentifier, \"http\")) {\n+                    String site = nameIdentifier.substring(0, nameIdentifier.indexOf(\"/\") + 2);\n+                    nameIdentifier =\n+                      nameIdentifier.replace(nameIdentifier.substring(0, nameIdentifier.indexOf(\"/\") + 2), \"\");\n+                    site = site + nameIdentifier.substring(0, nameIdentifier.indexOf(\"/\") + 1);\n+                    nameIdentifier = nameIdentifier.substring(nameIdentifier.indexOf(\"/\") + 1);\n+\n+                    creator_map.put(\"SchemeURI\", site);\n+                  }\n+\n+                  if (StringUtils.isNotBlank(nameIdentifierScheme)) {\n+                    creator_map.put(\"nameIdentifierScheme\", nameIdentifierScheme);\n+                    writeFullElement(xmlw, null, \"nameIdentifier\", creator_map, nameIdentifier, language);\n+                  } else {\n+                    writeFullElement(xmlw, null, \"nameIdentifier\", null, nameIdentifier, language);\n+                  }\n+                }\n \n-            if (StringUtils.isNotBlank(titleType)) {\n-                xmlw.writeAttribute(\"titleType\", titleType);\n+                if (StringUtils.isNotBlank(affiliation)) {\n+                  writeFullElement(xmlw, null, \"affiliation\", null, affiliation, language);\n+                }\n+                xmlw.writeEndElement(); // </creator>\n+              }\n             }\n-\n-            xmlw.writeCharacters(title);\n-            xmlw.writeEndElement(); // </title>\n+          }\n         }\n-        return title_check;\n+      }\n     }\n-\n-    /**\n-     * 5, PublicationYear (M)\n-     *\n-     * @param xmlw The stream writer\n-     * @param datasetVersionDTO\n-     * @param language current language value\n-     * @throws XMLStreamException\n-     */\n-    public static void writePublicationYearElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String publicationDate, String language) throws XMLStreamException {\n-\n-        // publicationYear\n-        String distributionDate = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.distributionDate);\n-        //String publicationDate = datasetDto.getPublicationDate();\n-        String depositDate = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.dateOfDeposit);\n-\n-        int distributionYear = -1;\n-        int publicationYear = -1;\n-        int yearOfDeposit = -1;\n-        int pubYear = 0;\n-\n-        if (distributionDate != null) {\n-            distributionYear = Integer.parseInt(distributionDate.substring(0, 4));\n-        }\n-        if (publicationDate != null) {\n-            publicationYear = Integer.parseInt(publicationDate.substring(0, 4));\n-        }\n-        if (depositDate != null) {\n-            yearOfDeposit = Integer.parseInt(depositDate.substring(0, 4));\n-        }\n-\n-        pubYear = Integer.max(Integer.max(distributionYear, publicationYear), yearOfDeposit);\n-        if (pubYear > -1) {\n-            writeFullElement(xmlw, null, \"publicationYear\", null, String.valueOf(pubYear), language);\n-        }\n+    writeEndTag(xmlw, creator_check);\n+  }\n+\n+  /**\n+   * 3, Title (with optional type sub-properties) (M)\n+   *\n+   * @param xmlw              The stream writer\n+   * @param datasetVersionDTO\n+   * @param language          current language value\n+   * @throws XMLStreamException\n+   */\n+  public static void writeTitlesElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language)\n+    throws XMLStreamException {\n+    // titles -> title with titleType attribute\n+    boolean title_check = false;\n+\n+    String title = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.title);\n+    title_check = writeTitleElement(xmlw, null, title, title_check, language);\n+\n+    String subtitle = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.subTitle);\n+    title_check = writeTitleElement(xmlw, \"Subtitle\", subtitle, title_check, language);\n+\n+    String alternativeTitle = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.alternativeTitle);\n+    title_check = writeTitleElement(xmlw, \"AlternativeTitle\", alternativeTitle, title_check, language);\n+\n+    writeEndTag(xmlw, title_check);\n+  }\n+\n+  /**\n+   * 3, Title (with optional type sub-properties) (M)\n+   *\n+   * @param xmlw        The Steam writer\n+   * @param titleType   The item type, for instance AlternativeTitle\n+   * @param title       The title\n+   * @param title_check\n+   * @param language    current language\n+   * @return\n+   * @throws XMLStreamException\n+   */\n+  private static boolean writeTitleElement(XMLStreamWriter xmlw, String titleType, String title, boolean title_check,\n+                                           String language) throws XMLStreamException {\n+    // write a title\n+    if (StringUtils.isNotBlank(title)) {\n+      title_check = writeOpenTag(xmlw, \"titles\", title_check);\n+      xmlw.writeStartElement(\"title\"); // <title>\n+\n+      if (StringUtils.isNotBlank(language)) {\n+        xmlw.writeAttribute(\"xml:lang\", language);\n+      }\n+\n+      if (StringUtils.isNotBlank(titleType)) {\n+        xmlw.writeAttribute(\"titleType\", titleType);\n+      }\n+\n+      xmlw.writeCharacters(title);\n+      xmlw.writeEndElement(); // </title>\n+    }\n+    return title_check;\n+  }\n+\n+  /**\n+   * 5, PublicationYear (M)\n+   *\n+   * @param xmlw              The stream writer\n+   * @param datasetVersionDTO\n+   * @param language          current language value\n+   * @throws XMLStreamException\n+   */\n+  public static void writePublicationYearElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO,\n+                                                 String publicationDate, String language) throws XMLStreamException {\n+\n+    // publicationYear\n+    String distributionDate = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.distributionDate);\n+    //String publicationDate = datasetDto.getPublicationDate();\n+    String depositDate = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.dateOfDeposit);\n+\n+    int distributionYear = -1;\n+    int publicationYear = -1;\n+    int yearOfDeposit = -1;\n+    int pubYear = 0;\n+\n+    if (distributionDate != null) {\n+      distributionYear = Integer.parseInt(distributionDate.substring(0, 4));\n+    }\n+    if (publicationDate != null) {\n+      publicationYear = Integer.parseInt(publicationDate.substring(0, 4));\n+    }\n+    if (depositDate != null) {\n+      yearOfDeposit = Integer.parseInt(depositDate.substring(0, 4));\n     }\n \n-    /**\n-     * 6, Subject (with scheme sub-property) R\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeSubjectsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // subjects -> subject with subjectScheme and schemeURI attributes\n-        boolean subject_check = false;\n-\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.subject.equals(fieldDTO.getTypeName())) {\n-                        for (String subject : fieldDTO.getMultipleVocab()) {\n-                            if (StringUtils.isNotBlank(subject)) {\n-                                subject_check = writeOpenTag(xmlw, \"subjects\", subject_check);\n-                                writeSubjectElement(xmlw, null, null, subject, language);\n-                            }\n-                        }\n-                    }\n+    pubYear = Integer.max(Integer.max(distributionYear, publicationYear), yearOfDeposit);\n+    if (pubYear > -1) {\n+      writeFullElement(xmlw, null, \"publicationYear\", null, String.valueOf(pubYear), language);\n+    }\n+  }\n+\n+  /**\n+   * 6, Subject (with scheme sub-property) R\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeSubjectsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language)\n+    throws XMLStreamException {\n+    // subjects -> subject with subjectScheme and schemeURI attributes\n+    boolean subject_check = false;\n+\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.subject.equals(fieldDTO.getTypeName())) {\n+            for (String subject : fieldDTO.getMultipleVocab()) {\n+              if (StringUtils.isNotBlank(subject)) {\n+                subject_check = writeOpenTag(xmlw, \"subjects\", subject_check);\n+                writeSubjectElement(xmlw, null, null, subject, language);\n+              }\n+            }\n+          }\n+\n+          if (DatasetFieldConstant.keyword.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String subject = null;\n+              String subjectScheme = null;\n+              String schemeURI = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.keywordValue.equals(next.getTypeName())) {\n+                  subject = next.getSinglePrimitive();\n+                }\n \n-                    if (DatasetFieldConstant.keyword.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String subject = null;\n-                            String subjectScheme = null;\n-                            String schemeURI = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.keywordValue.equals(next.getTypeName())) {\n-                                    subject = next.getSinglePrimitive();\n-                                }\n-\n-                                if (DatasetFieldConstant.keywordVocab.equals(next.getTypeName())) {\n-                                    subjectScheme = next.getSinglePrimitive();\n-                                }\n-\n-                                if (DatasetFieldConstant.keywordVocabURI.equals(next.getTypeName())) {\n-                                    schemeURI = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(subject)) {\n-                                subject_check = writeOpenTag(xmlw, \"subjects\", subject_check);\n-                                writeSubjectElement(xmlw, subjectScheme, schemeURI, subject, language);\n-                            }\n-                        }\n-                    }\n+                if (DatasetFieldConstant.keywordVocab.equals(next.getTypeName())) {\n+                  subjectScheme = next.getSinglePrimitive();\n+                }\n \n-                    if (DatasetFieldConstant.topicClassification.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String subject = null;\n-                            String subjectScheme = null;\n-                            String schemeURI = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.topicClassValue.equals(next.getTypeName())) {\n-                                    subject = next.getSinglePrimitive();\n-                                }\n-\n-                                if (DatasetFieldConstant.topicClassVocab.equals(next.getTypeName())) {\n-                                    subjectScheme = next.getSinglePrimitive();\n-                                }\n-\n-                                if (DatasetFieldConstant.topicClassVocabURI.equals(next.getTypeName())) {\n-                                    schemeURI = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(subject)) {\n-                                subject_check = writeOpenTag(xmlw, \"subjects\", subject_check);\n-                                writeSubjectElement(xmlw, subjectScheme, schemeURI, subject, language);\n-                            }\n-                        }\n-                    }\n+                if (DatasetFieldConstant.keywordVocabURI.equals(next.getTypeName())) {\n+                  schemeURI = next.getSinglePrimitive();\n                 }\n-            }\n-        }\n-        writeEndTag(xmlw, subject_check);\n-    }\n+              }\n \n-    /**\n-     * 6, Subject (with scheme sub-property) R\n-     *\n-     * @param xmlw\n-     * @param subjectScheme\n-     * @param schemeURI\n-     * @param value\n-     * @param language\n-     * @throws XMLStreamException\n-     */\n-    private static void writeSubjectElement(XMLStreamWriter xmlw, String subjectScheme, String schemeURI, String value, String language) throws XMLStreamException {\n-        // write a subject\n-        Map<String, String> subject_map = new HashMap<String, String>();\n+              if (StringUtils.isNotBlank(subject)) {\n+                subject_check = writeOpenTag(xmlw, \"subjects\", subject_check);\n+                writeSubjectElement(xmlw, subjectScheme, schemeURI, subject, language);\n+              }\n+            }\n+          }\n+\n+          if (DatasetFieldConstant.topicClassification.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String subject = null;\n+              String subjectScheme = null;\n+              String schemeURI = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.topicClassValue.equals(next.getTypeName())) {\n+                  subject = next.getSinglePrimitive();\n+                }\n \n-        if (StringUtils.isNotBlank(language)) {\n-            subject_map.put(\"xml:lang\", language);\n-        }\n+                if (DatasetFieldConstant.topicClassVocab.equals(next.getTypeName())) {\n+                  subjectScheme = next.getSinglePrimitive();\n+                }\n \n-        if (StringUtils.isNotBlank(subjectScheme)) {\n-            subject_map.put(\"subjectScheme\", subjectScheme);\n-        }\n-        if (StringUtils.isNotBlank(schemeURI)) {\n-            subject_map.put(\"schemeURI\", schemeURI);\n-        }\n+                if (DatasetFieldConstant.topicClassVocabURI.equals(next.getTypeName())) {\n+                  schemeURI = next.getSinglePrimitive();\n+                }\n+              }\n \n-        if (!subject_map.isEmpty()) {\n-            writeFullElement(xmlw, null, \"subject\", subject_map, value, language);\n-        } else {\n-            writeFullElement(xmlw, null, \"subject\", null, value, language);\n+              if (StringUtils.isNotBlank(subject)) {\n+                subject_check = writeOpenTag(xmlw, \"subjects\", subject_check);\n+                writeSubjectElement(xmlw, subjectScheme, schemeURI, subject, language);\n+              }\n+            }\n+          }\n         }\n+      }\n+    }\n+    writeEndTag(xmlw, subject_check);\n+  }\n+\n+  /**\n+   * 6, Subject (with scheme sub-property) R\n+   *\n+   * @param xmlw\n+   * @param subjectScheme\n+   * @param schemeURI\n+   * @param value\n+   * @param language\n+   * @throws XMLStreamException\n+   */\n+  private static void writeSubjectElement(XMLStreamWriter xmlw, String subjectScheme, String schemeURI, String value,\n+                                          String language) throws XMLStreamException {\n+    // write a subject\n+    Map<String, String> subject_map = new HashMap<String, String>();\n+\n+    if (StringUtils.isNotBlank(language)) {\n+      subject_map.put(\"xml:lang\", language);\n     }\n \n-    /**\n-     * 7, Contributor (with optional given name, family name, name identifier\n-     * and affiliation sub-properties)\n-     *\n-     * @see #writeContributorElement(javax.xml.stream.XMLStreamWriter,\n-     * java.lang.String, java.lang.String, java.lang.String)\n-     *\n-     * @param xmlw The stream writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeContributorsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // contributors -> contributor with ContributorType attribute -> contributorName, affiliation\n-        boolean contributor_check = false;\n-\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    // skip non-scompound value\n-\n-                    if (DatasetFieldConstant.producer.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String producerName = null;\n-                            String producerAffiliation = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.producerName.equals(next.getTypeName())) {\n-                                    producerName = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.producerAffiliation.equals(next.getTypeName())) {\n-                                    producerAffiliation = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(producerName)) {\n-                                contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n-                                writeContributorElement(xmlw, \"Producer\", producerName, producerAffiliation, language);\n-                            }\n-                        }\n-                    } else if (DatasetFieldConstant.distributor.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String distributorName = null;\n-                            String distributorAffiliation = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.distributorName.equals(next.getTypeName())) {\n-                                    distributorName = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.distributorAffiliation.equals(next.getTypeName())) {\n-                                    distributorAffiliation = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(distributorName)) {\n-                                contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n-                                writeContributorElement(xmlw, \"Distributor\", distributorName, distributorAffiliation, language);\n-                            }\n-                        }\n-                    } else if (DatasetFieldConstant.datasetContact.equals(fieldDTO.getTypeName())) {\n-                        if (\"primitive\".equals(fieldDTO.getTypeClass())) {\n-                            String contactAffiliation = null;\n-                            String contactName = null;\n-\n-                            for (Iterator<String> iterator = fieldDTO.getMultiplePrimitive().iterator(); iterator.hasNext();) {\n-                                contactName = iterator.next();\n-\n-                                if (StringUtils.isNotBlank(contactName)) {\n-                                    contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n-                                    writeContributorElement(xmlw, \"ContactPerson\", contactName, contactAffiliation, language);\n-                                }\n-                            }\n-                        } else {\n-                            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                                String contactName = null;\n-                                String contactAffiliation = null;\n-\n-                                for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                    FieldDTO next = iterator.next();\n-                                    if (DatasetFieldConstant.datasetContactName.equals(next.getTypeName())) {\n-                                        contactName = next.getSinglePrimitive();\n-                                    }\n-                                    if (DatasetFieldConstant.datasetContactAffiliation.equals(next.getTypeName())) {\n-                                        contactAffiliation = next.getSinglePrimitive();\n-                                    }\n-                                }\n-\n-                                if (StringUtils.isNotBlank(contactName)) {\n-                                    contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n-                                    writeContributorElement(xmlw, \"ContactPerson\", contactName, contactAffiliation, language);\n-                                }\n-                            }\n-                        }\n-                    } else if (DatasetFieldConstant.contributor.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String contributorName = null;\n-                            String contributorType = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.contributorName.equals(next.getTypeName())) {\n-                                    contributorName = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.contributorType.equals(next.getTypeName())) {\n-                                    contributorType = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            // Fix Funder contributorType\n-                            if (StringUtils.isNotBlank(contributorName) && !StringUtils.equalsIgnoreCase(FunderType, contributorType)) {\n-                                contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n-                                writeContributorElement(xmlw, contributorType, contributorName, null, language);\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        writeEndTag(xmlw, contributor_check);\n+    if (StringUtils.isNotBlank(subjectScheme)) {\n+      subject_map.put(\"subjectScheme\", subjectScheme);\n+    }\n+    if (StringUtils.isNotBlank(schemeURI)) {\n+      subject_map.put(\"schemeURI\", schemeURI);\n     }\n \n-    /**\n-     * 7, Contributor (with optional given name, family name, name identifier\n-     * and affiliation sub-properties)\n-     *\n-     * Write single contributor tag.\n-     *\n-     * @param xmlw The stream writer\n-     * @param contributorType The contributorType (M)\n-     * @param contributorName The contributorName (M)\n-     * @param contributorAffiliation\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeContributorElement(XMLStreamWriter xmlw, String contributorType, String contributorName, String contributorAffiliation, String language) throws XMLStreamException {\n-        // write a contributor\n-        xmlw.writeStartElement(\"contributor\"); // <contributor>\n-\n-        if (StringUtils.isNotBlank(contributorType)) {\n-            xmlw.writeAttribute(\"contributorType\", contributorType.replaceAll(\" \", \"\"));\n-        }\n+    if (!subject_map.isEmpty()) {\n+      writeFullElement(xmlw, null, \"subject\", subject_map, value, language);\n+    } else {\n+      writeFullElement(xmlw, null, \"subject\", null, value, language);\n+    }\n+  }\n+\n+  /**\n+   * 7, Contributor (with optional given name, family name, name identifier\n+   * and affiliation sub-properties)\n+   *\n+   * @param xmlw              The stream writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   * @see #writeContributorElement(javax.xml.stream.XMLStreamWriter,\n+   * java.lang.String, java.lang.String, java.lang.String)\n+   */\n+  public static void writeContributorsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO,\n+                                              String language) throws XMLStreamException {\n+    // contributors -> contributor with ContributorType attribute -> contributorName, affiliation\n+    boolean contributor_check = false;\n+\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          // skip non-scompound value\n+\n+          if (DatasetFieldConstant.producer.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String producerName = null;\n+              String producerAffiliation = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.producerName.equals(next.getTypeName())) {\n+                  producerName = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.producerAffiliation.equals(next.getTypeName())) {\n+                  producerAffiliation = next.getSinglePrimitive();\n+                }\n+              }\n \n-        boolean nameType_check = false;\n-        Map<String, String> contributor_map = new HashMap<String, String>();\n-\n-        contributorName = Cleanup.normalize(contributorName);\n-        // Datacite algorithm, https://github.com/IQSS/dataverse/issues/2243#issuecomment-358615313\n-        if (contributorName.contains(\",\")) {\n-            String givenName = FirstNames.getInstance().getFirstName(contributorName);\n-            boolean isOrganization = Organizations.getInstance().isOrganization(contributorName);\n-\n-            // contributorName=<FamilyName>, <FirstName>\n-            if (givenName != null && !isOrganization) {\n-                // givenName ok\n-                contributor_map.put(\"nameType\", \"Personal\");\n-                nameType_check = true;\n-            } else if (isOrganization || (\"ContactPerson\".equals(contributorType) && !isValidEmailAddress(contributorName))) {\n-                contributor_map.put(\"nameType\", \"Organizational\");\n+              if (StringUtils.isNotBlank(producerName)) {\n+                contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n+                writeContributorElement(xmlw, \"Producer\", producerName, producerAffiliation, language);\n+              }\n             }\n-            writeFullElement(xmlw, null, \"contributorName\", contributor_map, contributorName, language);\n-\n-            if ((nameType_check) && (!contributorName.replaceFirst(\",\", \"\").contains(\",\"))) {\n-                // contributorName=<FamilyName>, <FirstName>\n-                String[] fullName = contributorName.split(\", \");\n-                givenName = fullName[1];\n-                String familyName = fullName[0];\n+          } else if (DatasetFieldConstant.distributor.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String distributorName = null;\n+              String distributorAffiliation = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.distributorName.equals(next.getTypeName())) {\n+                  distributorName = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.distributorAffiliation.equals(next.getTypeName())) {\n+                  distributorAffiliation = next.getSinglePrimitive();\n+                }\n+              }\n \n-                writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n-                writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n+              if (StringUtils.isNotBlank(distributorName)) {\n+                contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n+                writeContributorElement(xmlw, \"Distributor\", distributorName, distributorAffiliation, language);\n+              }\n             }\n-        } else {\n-            String givenName = FirstNames.getInstance().getFirstName(contributorName);\n-            boolean isOrganization = Organizations.getInstance().isOrganization(contributorName);\n+          } else if (DatasetFieldConstant.datasetContact.equals(fieldDTO.getTypeName())) {\n+            if (\"primitive\".equals(fieldDTO.getTypeClass())) {\n+              String contactAffiliation = null;\n+              String contactName = null;\n \n-            if (givenName != null && !isOrganization) {\n-                contributor_map.put(\"nameType\", \"Personal\");\n-                writeFullElement(xmlw, null, \"contributorName\", contributor_map, contributorName, language);\n+              for (Iterator<String> iterator = fieldDTO.getMultiplePrimitive().iterator(); iterator.hasNext(); ) {\n+                contactName = iterator.next();\n \n-                String familyName = \"\";\n-                if (givenName.length() + 1 < contributorName.length()) {\n-                    familyName = contributorName.substring(givenName.length() + 1);\n+                if (StringUtils.isNotBlank(contactName)) {\n+                  contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n+                  writeContributorElement(xmlw, \"ContactPerson\", contactName, contactAffiliation, language);\n                 }\n-\n-                writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n-                writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n+              }\n             } else {\n-                // default\n-                if (isOrganization || (\"ContactPerson\".equals(contributorType) && !isValidEmailAddress(contributorName))) {\n-                    contributor_map.put(\"nameType\", \"Organizational\");\n+              for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+                String contactName = null;\n+                String contactAffiliation = null;\n+\n+                for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                  FieldDTO next = iterator.next();\n+                  if (DatasetFieldConstant.datasetContactName.equals(next.getTypeName())) {\n+                    contactName = next.getSinglePrimitive();\n+                  }\n+                  if (DatasetFieldConstant.datasetContactAffiliation.equals(next.getTypeName())) {\n+                    contactAffiliation = next.getSinglePrimitive();\n+                  }\n                 }\n-                writeFullElement(xmlw, null, \"contributorName\", contributor_map, contributorName, language);\n+\n+                if (StringUtils.isNotBlank(contactName)) {\n+                  contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n+                  writeContributorElement(xmlw, \"ContactPerson\", contactName, contactAffiliation, language);\n+                }\n+              }\n             }\n+          } else if (DatasetFieldConstant.contributor.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String contributorName = null;\n+              String contributorType = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.contributorName.equals(next.getTypeName())) {\n+                  contributorName = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.contributorType.equals(next.getTypeName())) {\n+                  contributorType = next.getSinglePrimitive();\n+                }\n+              }\n+\n+              // Fix Funder contributorType\n+              if (StringUtils.isNotBlank(contributorName) &&\n+                !StringUtils.equalsIgnoreCase(FunderType, contributorType)) {\n+                contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n+                writeContributorElement(xmlw, contributorType, contributorName, null, language);\n+              }\n+            }\n+          }\n         }\n+      }\n+    }\n+    writeEndTag(xmlw, contributor_check);\n+  }\n+\n+  /**\n+   * 7, Contributor (with optional given name, family name, name identifier\n+   * and affiliation sub-properties)\n+   * <p>\n+   * Write single contributor tag.\n+   *\n+   * @param xmlw                   The stream writer\n+   * @param contributorType        The contributorType (M)\n+   * @param contributorName        The contributorName (M)\n+   * @param contributorAffiliation\n+   * @param language               current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeContributorElement(XMLStreamWriter xmlw, String contributorType, String contributorName,\n+                                             String contributorAffiliation, String language) throws XMLStreamException {\n+    // write a contributor\n+    xmlw.writeStartElement(\"contributor\"); // <contributor>\n+\n+    if (StringUtils.isNotBlank(contributorType)) {\n+      xmlw.writeAttribute(\"contributorType\", contributorType.replaceAll(\" \", \"\"));\n+    }\n \n-        if (StringUtils.isNotBlank(contributorAffiliation)) {\n-            writeFullElement(xmlw, null, \"affiliation\", null, contributorAffiliation, language);\n+    boolean nameType_check = false;\n+    Map<String, String> contributor_map = new HashMap<String, String>();\n+\n+    contributorName = Cleanup.normalize(contributorName);\n+    // Datacite algorithm, https://github.com/IQSS/dataverse/issues/2243#issuecomment-358615313\n+    if (contributorName.contains(\",\")) {\n+      String givenName = FirstNames.getInstance().getFirstName(contributorName);\n+      boolean isOrganization = Organizations.getInstance().isOrganization(contributorName);\n+\n+      // contributorName=<FamilyName>, <FirstName>\n+      if (givenName != null && !isOrganization) {\n+        // givenName ok\n+        contributor_map.put(\"nameType\", \"Personal\");\n+        nameType_check = true;\n+      } else if (isOrganization || (\"ContactPerson\".equals(contributorType) && !isValidEmailAddress(contributorName))) {\n+        contributor_map.put(\"nameType\", \"Organizational\");\n+      }\n+      writeFullElement(xmlw, null, \"contributorName\", contributor_map, contributorName, language);\n+\n+      if ((nameType_check) && (!contributorName.replaceFirst(\",\", \"\").contains(\",\"))) {\n+        // contributorName=<FamilyName>, <FirstName>\n+        String[] fullName = contributorName.split(\", \");\n+        givenName = fullName[1];\n+        String familyName = fullName[0];\n+\n+        writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n+        writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n+      }\n+    } else {\n+      String givenName = FirstNames.getInstance().getFirstName(contributorName);\n+      boolean isOrganization = Organizations.getInstance().isOrganization(contributorName);\n+\n+      if (givenName != null && !isOrganization) {\n+        contributor_map.put(\"nameType\", \"Personal\");\n+        writeFullElement(xmlw, null, \"contributorName\", contributor_map, contributorName, language);\n+\n+        String familyName = \"\";\n+        if (givenName.length() + 1 < contributorName.length()) {\n+          familyName = contributorName.substring(givenName.length() + 1);\n         }\n-        xmlw.writeEndElement(); // </contributor>\n-    }\n \n-    /**\n-     * 8, Date (with type sub-property) (R)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeDatesElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        boolean date_check = false;\n-        String dateOfDistribution = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.distributionDate);\n-        if (StringUtils.isNotBlank(dateOfDistribution)) {\n-            date_check = writeOpenTag(xmlw, \"dates\", date_check);\n-\n-            Map<String, String> date_map = new HashMap<String, String>();\n-            date_map.put(\"dateType\", \"Issued\");\n-            writeFullElement(xmlw, null, \"date\", date_map, dateOfDistribution, language);\n+        writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n+        writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n+      } else {\n+        // default\n+        if (isOrganization || (\"ContactPerson\".equals(contributorType) && !isValidEmailAddress(contributorName))) {\n+          contributor_map.put(\"nameType\", \"Organizational\");\n         }\n-        // dates -> date with dateType attribute\n+        writeFullElement(xmlw, null, \"contributorName\", contributor_map, contributorName, language);\n+      }\n+    }\n \n-        String dateOfProduction = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.productionDate);\n-        if (StringUtils.isNotBlank(dateOfProduction)) {\n-            date_check = writeOpenTag(xmlw, \"dates\", date_check);\n+    if (StringUtils.isNotBlank(contributorAffiliation)) {\n+      writeFullElement(xmlw, null, \"affiliation\", null, contributorAffiliation, language);\n+    }\n+    xmlw.writeEndElement(); // </contributor>\n+  }\n+\n+  /**\n+   * 8, Date (with type sub-property) (R)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeDatesElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language)\n+    throws XMLStreamException {\n+    boolean date_check = false;\n+    String dateOfDistribution = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.distributionDate);\n+    if (StringUtils.isNotBlank(dateOfDistribution)) {\n+      date_check = writeOpenTag(xmlw, \"dates\", date_check);\n+\n+      Map<String, String> date_map = new HashMap<String, String>();\n+      date_map.put(\"dateType\", \"Issued\");\n+      writeFullElement(xmlw, null, \"date\", date_map, dateOfDistribution, language);\n+    }\n+    // dates -> date with dateType attribute\n \n-            Map<String, String> date_map = new HashMap<String, String>();\n-            date_map.put(\"dateType\", \"Created\");\n-            writeFullElement(xmlw, null, \"date\", date_map, dateOfProduction, language);\n-        }\n+    String dateOfProduction = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.productionDate);\n+    if (StringUtils.isNotBlank(dateOfProduction)) {\n+      date_check = writeOpenTag(xmlw, \"dates\", date_check);\n \n-        String dateOfDeposit = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.dateOfDeposit);\n-        if (StringUtils.isNotBlank(dateOfDeposit)) {\n-            date_check = writeOpenTag(xmlw, \"dates\", date_check);\n+      Map<String, String> date_map = new HashMap<String, String>();\n+      date_map.put(\"dateType\", \"Created\");\n+      writeFullElement(xmlw, null, \"date\", date_map, dateOfProduction, language);\n+    }\n \n-            Map<String, String> date_map = new HashMap<String, String>();\n-            date_map.put(\"dateType\", \"Submitted\");\n-            writeFullElement(xmlw, null, \"date\", date_map, dateOfDeposit, language);\n-        }\n+    String dateOfDeposit = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.dateOfDeposit);\n+    if (StringUtils.isNotBlank(dateOfDeposit)) {\n+      date_check = writeOpenTag(xmlw, \"dates\", date_check);\n \n-        String dateOfVersion = datasetVersionDTO.getReleaseTime();\n-        if (StringUtils.isNotBlank(dateOfVersion)) {\n-            date_check = writeOpenTag(xmlw, \"dates\", date_check);\n+      Map<String, String> date_map = new HashMap<String, String>();\n+      date_map.put(\"dateType\", \"Submitted\");\n+      writeFullElement(xmlw, null, \"date\", date_map, dateOfDeposit, language);\n+    }\n \n-            Map<String, String> date_map = new HashMap<String, String>();\n-            date_map.put(\"dateType\", \"Updated\");\n-            writeFullElement(xmlw, null, \"date\", date_map, dateOfVersion.substring(0, 10), language);\n-        }\n+    String dateOfVersion = datasetVersionDTO.getReleaseTime();\n+    if (StringUtils.isNotBlank(dateOfVersion)) {\n+      date_check = writeOpenTag(xmlw, \"dates\", date_check);\n \n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.dateOfCollection.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String dateOfCollectionStart = null;\n-                            String dateOfCollectionEnd = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.dateOfCollectionStart.equals(next.getTypeName())) {\n-                                    dateOfCollectionStart = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.dateOfCollectionEnd.equals(next.getTypeName())) {\n-                                    dateOfCollectionEnd = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(dateOfCollectionStart) && StringUtils.isNotBlank(dateOfCollectionEnd)) {\n-                                date_check = writeOpenTag(xmlw, \"dates\", date_check);\n-\n-                                Map<String, String> date_map = new HashMap<String, String>();\n-                                date_map.put(\"dateType\", \"Collected\");\n-                                writeFullElement(xmlw, null, \"date\", date_map, dateOfCollectionStart + \"/\" + dateOfCollectionEnd, language);\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        writeEndTag(xmlw, date_check);\n+      Map<String, String> date_map = new HashMap<String, String>();\n+      date_map.put(\"dateType\", \"Updated\");\n+      writeFullElement(xmlw, null, \"date\", date_map, dateOfVersion.substring(0, 10), language);\n     }\n \n-    /**\n-     * 10, ResourceType (with mandatory general type description sub- property)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeResourceTypeElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // resourceType with resourceTypeGeneral attribute\n-        boolean resourceTypeFound = false;\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.kindOfData.equals(fieldDTO.getTypeName())) {\n-                        for (String resourceType : fieldDTO.getMultipleVocab()) {\n-                            if (StringUtils.isNotBlank(resourceType)) {\n-                                Map<String, String> resourceType_map = new HashMap<String, String>();\n-                                resourceType_map.put(\"resourceTypeGeneral\", \"Dataset\");\n-                                writeFullElement(xmlw, null, \"resourceType\", resourceType_map, resourceType, language);\n-                                resourceTypeFound = true;\n-                                break;\n-                            }\n-                        }\n-                    }\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.dateOfCollection.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String dateOfCollectionStart = null;\n+              String dateOfCollectionEnd = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.dateOfCollectionStart.equals(next.getTypeName())) {\n+                  dateOfCollectionStart = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.dateOfCollectionEnd.equals(next.getTypeName())) {\n+                  dateOfCollectionEnd = next.getSinglePrimitive();\n                 }\n+              }\n+\n+              if (StringUtils.isNotBlank(dateOfCollectionStart) && StringUtils.isNotBlank(dateOfCollectionEnd)) {\n+                date_check = writeOpenTag(xmlw, \"dates\", date_check);\n+\n+                Map<String, String> date_map = new HashMap<String, String>();\n+                date_map.put(\"dateType\", \"Collected\");\n+                writeFullElement(xmlw, null, \"date\", date_map, dateOfCollectionStart + \"/\" + dateOfCollectionEnd,\n+                  language);\n+              }\n             }\n+          }\n         }\n-        if (!resourceTypeFound) {\n-            xmlw.writeStartElement(\"resourceType\"); // <resourceType>\n-            xmlw.writeAttribute(\"resourceTypeGeneral\", \"Dataset\");\n-            xmlw.writeEndElement(); // </resourceType>\n-        }\n+      }\n     }\n-\n-    /**\n-     * 11 AlternateIdentifier (with type sub-property) (O)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeAlternateIdentifierElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // alternateIdentifiers -> alternateIdentifier with alternateIdentifierType attribute\n-        boolean alternateIdentifier_check = false;\n-\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.otherId.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String alternateIdentifier = null;\n-                            String alternateIdentifierType = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.otherIdValue.equals(next.getTypeName())) {\n-                                    alternateIdentifier = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.otherIdAgency.equals(next.getTypeName())) {\n-                                    alternateIdentifierType = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(alternateIdentifier)) {\n-                                alternateIdentifier_check = writeOpenTag(xmlw, \"alternateIdentifiers\", alternateIdentifier_check);\n-\n-                                if (StringUtils.isNotBlank(alternateIdentifierType)) {\n-                                    Map<String, String> alternateIdentifier_map = new HashMap<String, String>();\n-                                    alternateIdentifier_map.put(\"alternateIdentifierType\", alternateIdentifierType);\n-                                    writeFullElement(xmlw, null, \"alternateIdentifier\", alternateIdentifier_map, alternateIdentifier, language);\n-                                } else {\n-                                    writeFullElement(xmlw, null, \"alternateIdentifier\", null, alternateIdentifier, language);\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n+    writeEndTag(xmlw, date_check);\n+  }\n+\n+  /**\n+   * 10, ResourceType (with mandatory general type description sub- property)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeResourceTypeElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO,\n+                                              String language) throws XMLStreamException {\n+    // resourceType with resourceTypeGeneral attribute\n+    boolean resourceTypeFound = false;\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.kindOfData.equals(fieldDTO.getTypeName())) {\n+            for (String resourceType : fieldDTO.getMultipleVocab()) {\n+              if (StringUtils.isNotBlank(resourceType)) {\n+                Map<String, String> resourceType_map = new HashMap<String, String>();\n+                resourceType_map.put(\"resourceTypeGeneral\", \"Dataset\");\n+                writeFullElement(xmlw, null, \"resourceType\", resourceType_map, resourceType, language);\n+                resourceTypeFound = true;\n+                break;\n+              }\n             }\n+          }\n         }\n-        writeEndTag(xmlw, alternateIdentifier_check);\n+      }\n+    }\n+    if (!resourceTypeFound) {\n+      xmlw.writeStartElement(\"resourceType\"); // <resourceType>\n+      xmlw.writeAttribute(\"resourceTypeGeneral\", \"Dataset\");\n+      xmlw.writeEndElement(); // </resourceType>\n     }\n+  }\n+\n+  /**\n+   * 11 AlternateIdentifier (with type sub-property) (O)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeAlternateIdentifierElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO,\n+                                                     String language) throws XMLStreamException {\n+    // alternateIdentifiers -> alternateIdentifier with alternateIdentifierType attribute\n+    boolean alternateIdentifier_check = false;\n+\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.otherId.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String alternateIdentifier = null;\n+              String alternateIdentifierType = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.otherIdValue.equals(next.getTypeName())) {\n+                  alternateIdentifier = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.otherIdAgency.equals(next.getTypeName())) {\n+                  alternateIdentifierType = next.getSinglePrimitive();\n+                }\n+              }\n \n-    /**\n-     * 12, RelatedIdentifier (with type and relation type sub-properties) (R)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeRelatedIdentifierElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // relatedIdentifiers -> relatedIdentifier with relatedIdentifierType and relationType attributes\n-        boolean relatedIdentifier_check = false;\n-        HashMap relatedIdentifierTypeMap = new HashMap();\n-        {\n-            relatedIdentifierTypeMap.put(\"ARK\".toLowerCase(), \"ARK\");\n-            relatedIdentifierTypeMap.put(\"arXiv\".toLowerCase(), \"arXiv\");\n-            relatedIdentifierTypeMap.put(\"bibcode\".toLowerCase(), \"bibcode\");\n-            relatedIdentifierTypeMap.put(\"DOI\".toLowerCase(), \"DOI\");\n-            relatedIdentifierTypeMap.put(\"EAN13\".toLowerCase(), \"EAN13\");\n-            relatedIdentifierTypeMap.put(\"EISSN\".toLowerCase(), \"EISSN\");\n-            relatedIdentifierTypeMap.put(\"Handle\".toLowerCase(), \"Handle\");\n-            relatedIdentifierTypeMap.put(\"IGSN\".toLowerCase(), \"IGSN\");\n-            relatedIdentifierTypeMap.put(\"ISBN\".toLowerCase(), \"ISBN\");\n-            relatedIdentifierTypeMap.put(\"ISSN\".toLowerCase(), \"ISSN\");\n-            relatedIdentifierTypeMap.put(\"ISTC\".toLowerCase(), \"ISTC\");\n-            relatedIdentifierTypeMap.put(\"LISSN\".toLowerCase(), \"LISSN\");\n-            relatedIdentifierTypeMap.put(\"LSID\".toLowerCase(), \"LSID\");\n-            relatedIdentifierTypeMap.put(\"PISSN\".toLowerCase(), \"PISSN\");\n-            relatedIdentifierTypeMap.put(\"PMID\".toLowerCase(), \"PMID\");\n-            relatedIdentifierTypeMap.put(\"PURL\".toLowerCase(), \"PURL\");\n-            relatedIdentifierTypeMap.put(\"UPC\".toLowerCase(), \"UPC\");\n-            relatedIdentifierTypeMap.put(\"URL\".toLowerCase(), \"URL\");\n-            relatedIdentifierTypeMap.put(\"URN\".toLowerCase(), \"URN\");\n-            relatedIdentifierTypeMap.put(\"WOS\".toLowerCase(), \"WOS\");\n-        }\n+              if (StringUtils.isNotBlank(alternateIdentifier)) {\n+                alternateIdentifier_check = writeOpenTag(xmlw, \"alternateIdentifiers\", alternateIdentifier_check);\n \n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.publication.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String relatedIdentifierType = null;\n-                            String relatedIdentifier = null; // is used when relatedIdentifierType variable is not URL\n-                            String relatedURL = null; // is used when relatedIdentifierType variable is URL\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.publicationIDType.equals(next.getTypeName())) {\n-                                    relatedIdentifierType = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.publicationIDNumber.equals(next.getTypeName())) {\n-                                    relatedIdentifier = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.publicationURL.equals(next.getTypeName())) {\n-                                    relatedURL = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(relatedIdentifierType)) {\n-                                relatedIdentifier_check = writeOpenTag(xmlw, \"relatedIdentifiers\", relatedIdentifier_check);\n-\n-                                Map<String, String> relatedIdentifier_map = new HashMap<String, String>();\n-                                // fix case\n-                                if (relatedIdentifierTypeMap.containsKey(relatedIdentifierType)) {\n-                                    relatedIdentifierType = (String) relatedIdentifierTypeMap.get(relatedIdentifierType);\n-                                }\n-\n-                                relatedIdentifier_map.put(\"relatedIdentifierType\", relatedIdentifierType);\n-                                relatedIdentifier_map.put(\"relationType\", \"IsCitedBy\");\n-\n-                                if (StringUtils.containsIgnoreCase(relatedIdentifierType, \"url\")) {\n-                                    writeFullElement(xmlw, null, \"relatedIdentifier\", relatedIdentifier_map, relatedURL, language);\n-                                } else {\n-                                    if (StringUtils.contains(relatedIdentifier, \"http\")) {\n-                                        String site = relatedIdentifier.substring(0, relatedIdentifier.indexOf(\"/\") + 2);\n-                                        relatedIdentifier = relatedIdentifier.replace(relatedIdentifier.substring(0, relatedIdentifier.indexOf(\"/\") + 2), \"\");\n-                                        site = site + relatedIdentifier.substring(0, relatedIdentifier.indexOf(\"/\") + 1);\n-                                        relatedIdentifier = relatedIdentifier.substring(relatedIdentifier.indexOf(\"/\") + 1);\n-\n-                                        relatedIdentifier_map.put(\"SchemeURI\", site);\n-                                    }\n-                                    writeFullElement(xmlw, null, \"relatedIdentifier\", relatedIdentifier_map, relatedIdentifier, language);\n-                                }\n-                            }\n-                        }\n-                    }\n+                if (StringUtils.isNotBlank(alternateIdentifierType)) {\n+                  Map<String, String> alternateIdentifier_map = new HashMap<String, String>();\n+                  alternateIdentifier_map.put(\"alternateIdentifierType\", alternateIdentifierType);\n+                  writeFullElement(xmlw, null, \"alternateIdentifier\", alternateIdentifier_map, alternateIdentifier,\n+                    language);\n+                } else {\n+                  writeFullElement(xmlw, null, \"alternateIdentifier\", null, alternateIdentifier, language);\n                 }\n+              }\n             }\n+          }\n         }\n-        writeEndTag(xmlw, relatedIdentifier_check);\n+      }\n+    }\n+    writeEndTag(xmlw, alternateIdentifier_check);\n+  }\n+\n+  /**\n+   * 12, RelatedIdentifier (with type and relation type sub-properties) (R)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeRelatedIdentifierElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO,\n+                                                   String language) throws XMLStreamException {\n+    // relatedIdentifiers -> relatedIdentifier with relatedIdentifierType and relationType attributes\n+    boolean relatedIdentifier_check = false;\n+    HashMap relatedIdentifierTypeMap = new HashMap();\n+    {\n+      relatedIdentifierTypeMap.put(\"ARK\".toLowerCase(), \"ARK\");\n+      relatedIdentifierTypeMap.put(\"arXiv\".toLowerCase(), \"arXiv\");\n+      relatedIdentifierTypeMap.put(\"bibcode\".toLowerCase(), \"bibcode\");\n+      relatedIdentifierTypeMap.put(\"DOI\".toLowerCase(), \"DOI\");\n+      relatedIdentifierTypeMap.put(\"EAN13\".toLowerCase(), \"EAN13\");\n+      relatedIdentifierTypeMap.put(\"EISSN\".toLowerCase(), \"EISSN\");\n+      relatedIdentifierTypeMap.put(\"Handle\".toLowerCase(), \"Handle\");\n+      relatedIdentifierTypeMap.put(\"IGSN\".toLowerCase(), \"IGSN\");\n+      relatedIdentifierTypeMap.put(\"ISBN\".toLowerCase(), \"ISBN\");\n+      relatedIdentifierTypeMap.put(\"ISSN\".toLowerCase(), \"ISSN\");\n+      relatedIdentifierTypeMap.put(\"ISTC\".toLowerCase(), \"ISTC\");\n+      relatedIdentifierTypeMap.put(\"LISSN\".toLowerCase(), \"LISSN\");\n+      relatedIdentifierTypeMap.put(\"LSID\".toLowerCase(), \"LSID\");\n+      relatedIdentifierTypeMap.put(\"PISSN\".toLowerCase(), \"PISSN\");\n+      relatedIdentifierTypeMap.put(\"PMID\".toLowerCase(), \"PMID\");\n+      relatedIdentifierTypeMap.put(\"PURL\".toLowerCase(), \"PURL\");\n+      relatedIdentifierTypeMap.put(\"UPC\".toLowerCase(), \"UPC\");\n+      relatedIdentifierTypeMap.put(\"URL\".toLowerCase(), \"URL\");\n+      relatedIdentifierTypeMap.put(\"URN\".toLowerCase(), \"URN\");\n+      relatedIdentifierTypeMap.put(\"WOS\".toLowerCase(), \"WOS\");\n     }\n \n-    /**\n-     * 13, Size (O)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeSizeElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // sizes -> size\n-        boolean size_check = false;\n-\n-        if (datasetVersionDTO.getFiles() != null) {\n-            for (int i = 0; i < datasetVersionDTO.getFiles().size(); i++) {\n-                Long size = datasetVersionDTO.getFiles().get(i).getDataFile().getFileSize();\n-                if (size != null) {\n-                    size_check = writeOpenTag(xmlw, \"sizes\", size_check);\n-                    writeFullElement(xmlw, null, \"size\", null, size.toString(), language);\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.publication.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String relatedIdentifierType = null;\n+              String relatedIdentifier = null; // is used when relatedIdentifierType variable is not URL\n+              String relatedURL = null; // is used when relatedIdentifierType variable is URL\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.publicationIDType.equals(next.getTypeName())) {\n+                  relatedIdentifierType = next.getSinglePrimitive();\n                 }\n-            }\n-            writeEndTag(xmlw, size_check);\n-        }\n-    }\n+                if (DatasetFieldConstant.publicationIDNumber.equals(next.getTypeName())) {\n+                  relatedIdentifier = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.publicationURL.equals(next.getTypeName())) {\n+                  relatedURL = next.getSinglePrimitive();\n+                }\n+              }\n+\n+              if (StringUtils.isNotBlank(relatedIdentifierType)) {\n+                relatedIdentifier_check = writeOpenTag(xmlw, \"relatedIdentifiers\", relatedIdentifier_check);\n \n-    /**\n-     * 14, Format (O)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeFormatElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // formats -> format\n-        boolean format_check = false;\n-\n-        if (datasetVersionDTO.getFiles() != null) {\n-            for (int i = 0; i < datasetVersionDTO.getFiles().size(); i++) {\n-                String format = datasetVersionDTO.getFiles().get(i).getDataFile().getContentType();\n-                if (StringUtils.isNotBlank(format)) {\n-                    format_check = writeOpenTag(xmlw, \"formats\", format_check);\n-                    writeFullElement(xmlw, null, \"format\", null, format, language);\n+                Map<String, String> relatedIdentifier_map = new HashMap<String, String>();\n+                // fix case\n+                if (relatedIdentifierTypeMap.containsKey(relatedIdentifierType)) {\n+                  relatedIdentifierType = (String) relatedIdentifierTypeMap.get(relatedIdentifierType);\n                 }\n+\n+                relatedIdentifier_map.put(\"relatedIdentifierType\", relatedIdentifierType);\n+                relatedIdentifier_map.put(\"relationType\", \"IsCitedBy\");\n+\n+                if (StringUtils.containsIgnoreCase(relatedIdentifierType, \"url\")) {\n+                  writeFullElement(xmlw, null, \"relatedIdentifier\", relatedIdentifier_map, relatedURL, language);\n+                } else {\n+                  if (StringUtils.contains(relatedIdentifier, \"http\")) {\n+                    String site = relatedIdentifier.substring(0, relatedIdentifier.indexOf(\"/\") + 2);\n+                    relatedIdentifier =\n+                      relatedIdentifier.replace(relatedIdentifier.substring(0, relatedIdentifier.indexOf(\"/\") + 2), \"\");\n+                    site = site + relatedIdentifier.substring(0, relatedIdentifier.indexOf(\"/\") + 1);\n+                    relatedIdentifier = relatedIdentifier.substring(relatedIdentifier.indexOf(\"/\") + 1);\n+\n+                    relatedIdentifier_map.put(\"SchemeURI\", site);\n+                  }\n+                  writeFullElement(xmlw, null, \"relatedIdentifier\", relatedIdentifier_map, relatedIdentifier, language);\n+                }\n+              }\n             }\n-            writeEndTag(xmlw, format_check);\n+          }\n         }\n+      }\n     }\n-\n-    /**\n-     * 15, Version (O)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeVersionElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        Long majorVersionNumber = datasetVersionDTO.getVersionNumber();\n-        Long minorVersionNumber = datasetVersionDTO.getMinorVersionNumber();\n-\n-        if (majorVersionNumber != null && StringUtils.isNotBlank(majorVersionNumber.toString())) {\n-            if (minorVersionNumber != null && StringUtils.isNotBlank(minorVersionNumber.toString())) {\n-                writeFullElement(xmlw, null, \"version\", null, majorVersionNumber.toString() + \".\" + minorVersionNumber.toString(), language);\n-            } else {\n-                writeFullElement(xmlw, null, \"version\", null, majorVersionNumber.toString(), language);\n-            }\n+    writeEndTag(xmlw, relatedIdentifier_check);\n+  }\n+\n+  /**\n+   * 13, Size (O)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeSizeElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language)\n+    throws XMLStreamException {\n+    // sizes -> size\n+    boolean size_check = false;\n+\n+    if (datasetVersionDTO.getFiles() != null) {\n+      for (int i = 0; i < datasetVersionDTO.getFiles().size(); i++) {\n+        Long size = datasetVersionDTO.getFiles().get(i).getDataFile().getFileSize();\n+        if (size != null) {\n+          size_check = writeOpenTag(xmlw, \"sizes\", size_check);\n+          writeFullElement(xmlw, null, \"size\", null, size.toString(), language);\n         }\n+      }\n+      writeEndTag(xmlw, size_check);\n     }\n-\n-    /**\n-     * 16 Rights (O)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeAccessRightsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // rightsList -> rights with rightsURI attribute\n-        xmlw.writeStartElement(\"rightsList\"); // <rightsList>\n-\n-        // set terms from the info:eu-repo-Access-Terms vocabulary\n-        writeRightsHeader(xmlw, language);\n-        boolean restrict = false;\n-        boolean closed = false;\n-\n-        if (datasetVersionDTO.isFileAccessRequest()) {\n-            restrict = true;\n+  }\n+\n+  /**\n+   * 14, Format (O)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeFormatElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language)\n+    throws XMLStreamException {\n+    // formats -> format\n+    boolean format_check = false;\n+\n+    if (datasetVersionDTO.getFiles() != null) {\n+      for (int i = 0; i < datasetVersionDTO.getFiles().size(); i++) {\n+        String format = datasetVersionDTO.getFiles().get(i).getDataFile().getContentType();\n+        if (StringUtils.isNotBlank(format)) {\n+          format_check = writeOpenTag(xmlw, \"formats\", format_check);\n+          writeFullElement(xmlw, null, \"format\", null, format, language);\n         }\n-        if (datasetVersionDTO.getFiles() != null) {\n-            for (int i = 0; i < datasetVersionDTO.getFiles().size(); i++) {\n-                if (datasetVersionDTO.getFiles().get(i).isRestricted()) {\n-                    closed = true;\n-                    break;\n-                }\n-            }\n+      }\n+      writeEndTag(xmlw, format_check);\n+    }\n+  }\n+\n+  /**\n+   * 15, Version (O)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeVersionElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language)\n+    throws XMLStreamException {\n+    Long majorVersionNumber = datasetVersionDTO.getVersionNumber();\n+    Long minorVersionNumber = datasetVersionDTO.getMinorVersionNumber();\n+\n+    if (majorVersionNumber != null && StringUtils.isNotBlank(majorVersionNumber.toString())) {\n+      if (minorVersionNumber != null && StringUtils.isNotBlank(minorVersionNumber.toString())) {\n+        writeFullElement(xmlw, null, \"version\", null,\n+          majorVersionNumber.toString() + \".\" + minorVersionNumber.toString(), language);\n+      } else {\n+        writeFullElement(xmlw, null, \"version\", null, majorVersionNumber.toString(), language);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * 16 Rights (O)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeAccessRightsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO,\n+                                              String language) throws XMLStreamException {\n+    // rightsList -> rights with rightsURI attribute\n+    xmlw.writeStartElement(\"rightsList\"); // <rightsList>\n+\n+    // set terms from the info:eu-repo-Access-Terms vocabulary\n+    writeRightsHeader(xmlw, language);\n+    boolean restrict = false;\n+    boolean closed = false;\n+\n+    if (datasetVersionDTO.isFileAccessRequest()) {\n+      restrict = true;\n+    }\n+    if (datasetVersionDTO.getFiles() != null) {\n+      for (int i = 0; i < datasetVersionDTO.getFiles().size(); i++) {\n+        if (datasetVersionDTO.getFiles().get(i).isRestricted()) {\n+          closed = true;\n+          break;\n         }\n+      }\n+    }\n \n-        if (restrict && closed) {\n-            xmlw.writeAttribute(\"rightsURI\", \"info:eu-repo/semantics/restrictedAccess\");\n-        } else if (!restrict && closed) {\n-            xmlw.writeAttribute(\"rightsURI\", \"info:eu-repo/semantics/closedAccess\");\n-        } else {\n-            xmlw.writeAttribute(\"rightsURI\", \"info:eu-repo/semantics/openAccess\");\n+    if (restrict && closed) {\n+      xmlw.writeAttribute(\"rightsURI\", \"info:eu-repo/semantics/restrictedAccess\");\n+    } else if (!restrict && closed) {\n+      xmlw.writeAttribute(\"rightsURI\", \"info:eu-repo/semantics/closedAccess\");\n+    } else {\n+      xmlw.writeAttribute(\"rightsURI\", \"info:eu-repo/semantics/openAccess\");\n+    }\n+    xmlw.writeEndElement(); // </rights>\n+\n+    // check if getLicense() method contains CC0\n+    // check if getTermsOfUse() method starts with http://\n+    writeRightsHeader(xmlw, language);\n+    if (StringUtils.isNotBlank(datasetVersionDTO.getLicense())) {\n+      if (StringUtils.containsIgnoreCase(datasetVersionDTO.getLicense(), \"cc0\")) {\n+        xmlw.writeAttribute(\"rightsURI\", \"https://creativecommons.org/publicdomain/zero/1.0/\");\n+        if (StringUtils.isNotBlank(datasetVersionDTO.getTermsOfUse())) {\n+          xmlw.writeCharacters(datasetVersionDTO.getTermsOfUse());\n         }\n-        xmlw.writeEndElement(); // </rights>\n-\n-        // check if getLicense() method contains CC0\n-        // check if getTermsOfUse() method starts with http://\n-        writeRightsHeader(xmlw, language);\n-        if (StringUtils.isNotBlank(datasetVersionDTO.getLicense())) {\n-            if (StringUtils.containsIgnoreCase(datasetVersionDTO.getLicense(), \"cc0\")) {\n-                xmlw.writeAttribute(\"rightsURI\", \"https://creativecommons.org/publicdomain/zero/1.0/\");\n-                if (StringUtils.isNotBlank(datasetVersionDTO.getTermsOfUse())) {\n-                    xmlw.writeCharacters(datasetVersionDTO.getTermsOfUse());\n-                }\n-            } else if (StringUtils.isNotBlank(datasetVersionDTO.getTermsOfUse())) {\n-                if (StringUtils.startsWithIgnoreCase(datasetVersionDTO.getTermsOfUse().trim(), \"http\")) {\n-                    xmlw.writeAttribute(\"rightsURI\", datasetVersionDTO.getTermsOfUse());\n-                } else {\n-                    xmlw.writeCharacters(datasetVersionDTO.getTermsOfUse());\n-                }\n-            }\n-        } else if (StringUtils.isNotBlank(datasetVersionDTO.getTermsOfUse())) {\n-            if (StringUtils.startsWithIgnoreCase(datasetVersionDTO.getTermsOfUse().trim(), \"http\")) {\n-                xmlw.writeAttribute(\"rightsURI\", datasetVersionDTO.getTermsOfUse());\n-            } else {\n-                xmlw.writeCharacters(datasetVersionDTO.getTermsOfUse());\n-            }\n+      } else if (StringUtils.isNotBlank(datasetVersionDTO.getTermsOfUse())) {\n+        if (StringUtils.startsWithIgnoreCase(datasetVersionDTO.getTermsOfUse().trim(), \"http\")) {\n+          xmlw.writeAttribute(\"rightsURI\", datasetVersionDTO.getTermsOfUse());\n+        } else {\n+          xmlw.writeCharacters(datasetVersionDTO.getTermsOfUse());\n         }\n-        xmlw.writeEndElement(); // </rights>\n-        xmlw.writeEndElement(); // </rightsList>\n+      }\n+    } else if (StringUtils.isNotBlank(datasetVersionDTO.getTermsOfUse())) {\n+      if (StringUtils.startsWithIgnoreCase(datasetVersionDTO.getTermsOfUse().trim(), \"http\")) {\n+        xmlw.writeAttribute(\"rightsURI\", datasetVersionDTO.getTermsOfUse());\n+      } else {\n+        xmlw.writeCharacters(datasetVersionDTO.getTermsOfUse());\n+      }\n     }\n-\n-    /**\n-     * 16 Rights (O)\n-     *\n-     * Write headers\n-     *\n-     * @param xmlw The Steam writer\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    private static void writeRightsHeader(XMLStreamWriter xmlw, String language) throws XMLStreamException {\n-        // write the rights header\n-        xmlw.writeStartElement(\"rights\"); // <rights>\n-\n-        if (StringUtils.isNotBlank(language)) {\n-            xmlw.writeAttribute(\"xml:lang\", language);\n-        }\n+    xmlw.writeEndElement(); // </rights>\n+    xmlw.writeEndElement(); // </rightsList>\n+  }\n+\n+  /**\n+   * 16 Rights (O)\n+   * <p>\n+   * Write headers\n+   *\n+   * @param xmlw     The Steam writer\n+   * @param language current language\n+   * @throws XMLStreamException\n+   */\n+  private static void writeRightsHeader(XMLStreamWriter xmlw, String language) throws XMLStreamException {\n+    // write the rights header\n+    xmlw.writeStartElement(\"rights\"); // <rights>\n+\n+    if (StringUtils.isNotBlank(language)) {\n+      xmlw.writeAttribute(\"xml:lang\", language);\n     }\n-\n-    /**\n-     * 17 Descriptions (R)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeDescriptionsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // descriptions -> description with descriptionType attribute\n-        boolean description_check = false;\n-\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.description.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String descriptionOfAbstract = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.descriptionText.equals(next.getTypeName())) {\n-                                    descriptionOfAbstract = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(descriptionOfAbstract)) {\n-                                description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n-                                writeDescriptionElement(xmlw, \"Abstract\", descriptionOfAbstract, language);\n-                            }\n-                        }\n-                    }\n+  }\n+\n+  /**\n+   * 17 Descriptions (R)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeDescriptionsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO,\n+                                              String language) throws XMLStreamException {\n+    // descriptions -> description with descriptionType attribute\n+    boolean description_check = false;\n+\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.description.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String descriptionOfAbstract = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.descriptionText.equals(next.getTypeName())) {\n+                  descriptionOfAbstract = next.getSinglePrimitive();\n                 }\n+              }\n+\n+              if (StringUtils.isNotBlank(descriptionOfAbstract)) {\n+                description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n+                writeDescriptionElement(xmlw, \"Abstract\", descriptionOfAbstract, language);\n+              }\n             }\n+          }\n         }\n+      }\n+    }\n \n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.software.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String softwareName = null;\n-                            String softwareVersion = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.softwareName.equals(next.getTypeName())) {\n-                                    softwareName = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.softwareVersion.equals(next.getTypeName())) {\n-                                    softwareVersion = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(softwareName) && StringUtils.isNotBlank(softwareVersion)) {\n-                                description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n-                                writeDescriptionElement(xmlw, \"TechnicalInfo\", softwareName + \", \" + softwareVersion, language);\n-                            }\n-                        }\n-                    }\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.software.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String softwareName = null;\n+              String softwareVersion = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.softwareName.equals(next.getTypeName())) {\n+                  softwareName = next.getSinglePrimitive();\n+                }\n+                if (DatasetFieldConstant.softwareVersion.equals(next.getTypeName())) {\n+                  softwareVersion = next.getSinglePrimitive();\n                 }\n+              }\n+\n+              if (StringUtils.isNotBlank(softwareName) && StringUtils.isNotBlank(softwareVersion)) {\n+                description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n+                writeDescriptionElement(xmlw, \"TechnicalInfo\", softwareName + \", \" + softwareVersion, language);\n+              }\n             }\n+          }\n         }\n+      }\n+    }\n \n-        String descriptionOfMethodsOrigin = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.originOfSources);\n-        if (StringUtils.isNotBlank(descriptionOfMethodsOrigin)) {\n-            description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n-            writeDescriptionElement(xmlw, \"Methods\", descriptionOfMethodsOrigin, language);\n-        }\n+    String descriptionOfMethodsOrigin = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.originOfSources);\n+    if (StringUtils.isNotBlank(descriptionOfMethodsOrigin)) {\n+      description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n+      writeDescriptionElement(xmlw, \"Methods\", descriptionOfMethodsOrigin, language);\n+    }\n \n-        String descriptionOfMethodsCharacteristic = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.characteristicOfSources);\n-        if (StringUtils.isNotBlank(descriptionOfMethodsCharacteristic)) {\n-            description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n-            writeDescriptionElement(xmlw, \"Methods\", descriptionOfMethodsCharacteristic, language);\n-        }\n+    String descriptionOfMethodsCharacteristic =\n+      dto2Primitive(datasetVersionDTO, DatasetFieldConstant.characteristicOfSources);\n+    if (StringUtils.isNotBlank(descriptionOfMethodsCharacteristic)) {\n+      description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n+      writeDescriptionElement(xmlw, \"Methods\", descriptionOfMethodsCharacteristic, language);\n+    }\n \n-        String descriptionOfMethodsAccess = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.accessToSources);\n-        if (StringUtils.isNotBlank(descriptionOfMethodsAccess)) {\n-            description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n-            writeDescriptionElement(xmlw, \"Methods\", descriptionOfMethodsAccess, language);\n-        }\n+    String descriptionOfMethodsAccess = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.accessToSources);\n+    if (StringUtils.isNotBlank(descriptionOfMethodsAccess)) {\n+      description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n+      writeDescriptionElement(xmlw, \"Methods\", descriptionOfMethodsAccess, language);\n+    }\n \n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.series.equals(fieldDTO.getTypeName())) {\n-                        // String seriesName = null;\n-                        String seriesInformation = null;\n-\n-                        Set<FieldDTO> fieldDTOs = fieldDTO.getSingleCompound();\n-                        for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                            FieldDTO next = iterator.next();\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.series.equals(fieldDTO.getTypeName())) {\n+            // String seriesName = null;\n+            String seriesInformation = null;\n+\n+            Set<FieldDTO> fieldDTOs = fieldDTO.getSingleCompound();\n+            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+              FieldDTO next = iterator.next();\n                             /*if (DatasetFieldConstant.seriesName.equals(next.getTypeName())) {\n                                 seriesName =  next.getSinglePrimitive();\n                             }*/\n-                            if (DatasetFieldConstant.seriesInformation.equals(next.getTypeName())) {\n-                                seriesInformation = next.getSinglePrimitive();\n-                            }\n-                        }\n+              if (DatasetFieldConstant.seriesInformation.equals(next.getTypeName())) {\n+                seriesInformation = next.getSinglePrimitive();\n+              }\n+            }\n \n                         /*if (StringUtils.isNotBlank(seriesName)){\n                         \tcontributor_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n                         \t\n                         \twriteDescriptionElement(xmlw, \"SeriesInformation\", seriesName);\n                         }*/\n-                        if (StringUtils.isNotBlank(seriesInformation)) {\n-                            description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n-                            writeDescriptionElement(xmlw, \"SeriesInformation\", seriesInformation, language);\n-                        }\n-                    }\n-                }\n+            if (StringUtils.isNotBlank(seriesInformation)) {\n+              description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n+              writeDescriptionElement(xmlw, \"SeriesInformation\", seriesInformation, language);\n             }\n+          }\n         }\n-\n-        String descriptionOfOther = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.notesText);\n-        if (StringUtils.isNotBlank(descriptionOfOther)) {\n-            description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n-            writeDescriptionElement(xmlw, \"Other\", descriptionOfOther, language);\n-        }\n-        writeEndTag(xmlw, description_check);\n+      }\n     }\n \n-    /**\n-     * 17 Descriptions (R)\n-     *\n-     * @param xmlw\n-     * @param descriptionType\n-     * @param description\n-     * @param language\n-     * @throws XMLStreamException\n-     */\n-    private static void writeDescriptionElement(XMLStreamWriter xmlw, String descriptionType, String description, String language) throws XMLStreamException {\n-        // write a description\n-        Map<String, String> description_map = new HashMap<String, String>();\n-\n-        if (StringUtils.isNotBlank(language)) {\n-            description_map.put(\"xml:lang\", language);\n-        }\n-\n-        description_map.put(\"descriptionType\", descriptionType);\n-        writeFullElement(xmlw, null, \"description\", description_map, description, language);\n+    String descriptionOfOther = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.notesText);\n+    if (StringUtils.isNotBlank(descriptionOfOther)) {\n+      description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n+      writeDescriptionElement(xmlw, \"Other\", descriptionOfOther, language);\n+    }\n+    writeEndTag(xmlw, description_check);\n+  }\n+\n+  /**\n+   * 17 Descriptions (R)\n+   *\n+   * @param xmlw\n+   * @param descriptionType\n+   * @param description\n+   * @param language\n+   * @throws XMLStreamException\n+   */\n+  private static void writeDescriptionElement(XMLStreamWriter xmlw, String descriptionType, String description,\n+                                              String language) throws XMLStreamException {\n+    // write a description\n+    Map<String, String> description_map = new HashMap<String, String>();\n+\n+    if (StringUtils.isNotBlank(language)) {\n+      description_map.put(\"xml:lang\", language);\n     }\n \n-    /**\n-     * 18 GeoLocation (R)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeGeoLocationsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // geoLocation -> geoLocationPlace\n-        String geoLocationPlace = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.productionPlace);\n-        boolean geoLocations_check = false;\n-\n-        // write geoLocations\n-        geoLocations_check = writeOpenTag(xmlw, \"geoLocations\", geoLocations_check);\n-        writeGeolocationPlace(xmlw, geoLocationPlace, language);\n-                \n-        // get DatasetFieldConstant.geographicBoundingBox\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            MetadataBlockDTO value = entry.getValue();\n-            for (FieldDTO fieldDTO : value.getFields()) {\n-                if (DatasetFieldConstant.geographicBoundingBox.equals(fieldDTO.getTypeName())) {\n-                    geoLocations_check = writeOpenTag(xmlw, \"geoLocations\", geoLocations_check);\n-                    if (fieldDTO.getMultiple()) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            writeGeoLocationsElement(xmlw, fieldDTOs, language);\n-                        }\n-                    } else {\n-                        writeGeoLocationsElement(xmlw, fieldDTO.getSingleCompound(), language);\n-                    }\n-                }\n+    description_map.put(\"descriptionType\", descriptionType);\n+    writeFullElement(xmlw, null, \"description\", description_map, description, language);\n+  }\n+\n+  /**\n+   * 18 GeoLocation (R)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeGeoLocationsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO,\n+                                              String language) throws XMLStreamException {\n+    // geoLocation -> geoLocationPlace\n+    String geoLocationPlace = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.productionPlace);\n+    boolean geoLocations_check = false;\n+\n+    // write geoLocations\n+    geoLocations_check = writeOpenTag(xmlw, \"geoLocations\", geoLocations_check);\n+    writeGeolocationPlace(xmlw, geoLocationPlace, language);\n+\n+    // get DatasetFieldConstant.geographicBoundingBox\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      MetadataBlockDTO value = entry.getValue();\n+      for (FieldDTO fieldDTO : value.getFields()) {\n+        if (DatasetFieldConstant.geographicBoundingBox.equals(fieldDTO.getTypeName())) {\n+          geoLocations_check = writeOpenTag(xmlw, \"geoLocations\", geoLocations_check);\n+          if (fieldDTO.getMultiple()) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              writeGeoLocationsElement(xmlw, fieldDTOs, language);\n             }\n+          } else {\n+            writeGeoLocationsElement(xmlw, fieldDTO.getSingleCompound(), language);\n+          }\n         }\n-\n-        writeEndTag(xmlw, geoLocations_check);\n+      }\n     }\n \n-    /**\n-     * 18 GeoLocation (R)\n-     *\n-     * Write geoLocationPlace inside geoLocation element\n-     * \n-     * @param xmlw The Steam writer\n-     * @param geoLocationPlace Geo location place\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeGeolocationPlace(XMLStreamWriter xmlw, String geoLocationPlace, String language) throws XMLStreamException {\n-        boolean geoLocation_check = false;\n-        \n-        if (StringUtils.isNotBlank(geoLocationPlace)) {\n-            geoLocation_check = writeOpenTag(xmlw, \"geoLocation\", geoLocation_check);\n-            writeFullElement(xmlw, null, \"geoLocationPlace\", null, geoLocationPlace, language);\n+    writeEndTag(xmlw, geoLocations_check);\n+  }\n+\n+  /**\n+   * 18 GeoLocation (R)\n+   * <p>\n+   * Write geoLocationPlace inside geoLocation element\n+   *\n+   * @param xmlw             The Steam writer\n+   * @param geoLocationPlace Geo location place\n+   * @param language         current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeGeolocationPlace(XMLStreamWriter xmlw, String geoLocationPlace, String language)\n+    throws XMLStreamException {\n+    boolean geoLocation_check = false;\n+\n+    if (StringUtils.isNotBlank(geoLocationPlace)) {\n+      geoLocation_check = writeOpenTag(xmlw, \"geoLocation\", geoLocation_check);\n+      writeFullElement(xmlw, null, \"geoLocationPlace\", null, geoLocationPlace, language);\n+    }\n+    writeEndTag(xmlw, geoLocation_check);\n+  }\n+\n+  /**\n+   * 18 GeoLocation (R)\n+   *\n+   * @param xmlw      The Steam writer\n+   * @param fieldDTOs\n+   * @param language  current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeGeoLocationsElement(XMLStreamWriter xmlw, Set<FieldDTO> fieldDTOs, String language)\n+    throws XMLStreamException {\n+    //boolean geoLocations_check = false;\n+    boolean geoLocation_check = false;\n+    boolean geoLocationbox_check = false;\n+\n+    geoLocation_check = writeOpenTag(xmlw, \"geoLocation\", geoLocation_check);\n+    geoLocationbox_check = writeOpenTag(xmlw, \"geoLocationBox\", geoLocationbox_check);\n+\n+    for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+      FieldDTO next = iterator.next();\n+      String typeName = next.getTypeName();\n+\n+      Pattern pattern = Pattern.compile(\"([a-z]+)(Longitude|Latitude)\");\n+      Matcher matcher = pattern.matcher(next.getTypeName());\n+      boolean skip = false;\n+      if (matcher.find()) {\n+        switch (matcher.group(1)) {\n+          case \"south\":\n+          case \"north\":\n+            typeName = matcher.group(1) + \"BoundLatitude\";\n+            break;\n+\n+          case \"west\":\n+          case \"east\":\n+            typeName = matcher.group(1) + \"BoundLongitude\";\n+            break;\n+\n+          default:\n+            skip = true;\n+            break;\n         }\n-        writeEndTag(xmlw, geoLocation_check);\n+        if (!skip) {\n+          writeFullElement(xmlw, null, typeName, null, next.getSinglePrimitive(), language);\n+        }\n+      }\n     }\n-    \n-    /**\n-     * 18 GeoLocation (R)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param fieldDTOs\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeGeoLocationsElement(XMLStreamWriter xmlw, Set<FieldDTO> fieldDTOs, String language) throws XMLStreamException {\n-        //boolean geoLocations_check = false;\n-        boolean geoLocation_check = false;\n-        boolean geoLocationbox_check = false;\n-\n-        geoLocation_check = writeOpenTag(xmlw, \"geoLocation\", geoLocation_check);\n-        geoLocationbox_check = writeOpenTag(xmlw, \"geoLocationBox\", geoLocationbox_check);\n-\n-        for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-            FieldDTO next = iterator.next();\n-            String typeName = next.getTypeName();\n-\n-            Pattern pattern = Pattern.compile(\"([a-z]+)(Longitude|Latitude)\");\n-            Matcher matcher = pattern.matcher(next.getTypeName());\n-            boolean skip = false;\n-            if (matcher.find()) {\n-                switch (matcher.group(1)) {\n-                    case \"south\":\n-                    case \"north\":\n-                        typeName = matcher.group(1) + \"BoundLatitude\";\n-                        break;\n-\n-                    case \"west\":\n-                    case \"east\":\n-                        typeName = matcher.group(1) + \"BoundLongitude\";\n-                        break;\n-\n-                    default:\n-                        skip = true;\n-                        break;\n+    writeEndTag(xmlw, geoLocationbox_check);\n+    writeEndTag(xmlw, geoLocation_check);\n+  }\n+\n+  /**\n+   * 19 FundingReference (with name, identifier, and award related sub-\n+   * properties) (O)\n+   *\n+   * @param xmlw              The Steam writer\n+   * @param datasetVersionDTO\n+   * @param language          current language\n+   * @throws XMLStreamException\n+   */\n+  public static void writeFundingReferencesElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO,\n+                                                   String language) throws XMLStreamException {\n+    // fundingReferences -> fundingReference -> funderName, awardNumber\n+    boolean fundingReference_check = false;\n+\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      String key = entry.getKey();\n+      MetadataBlockDTO value = entry.getValue();\n+      if (\"citation\".equals(key)) {\n+        for (FieldDTO fieldDTO : value.getFields()) {\n+          if (DatasetFieldConstant.grantNumber.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String awardNumber = null;\n+              String funderName = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.grantNumberValue.equals(next.getTypeName())) {\n+                  awardNumber = next.getSinglePrimitive();\n                 }\n-                if (!skip) {\n-                    writeFullElement(xmlw, null, typeName, null, next.getSinglePrimitive(), language);\n+                if (DatasetFieldConstant.grantNumberAgency.equals(next.getTypeName())) {\n+                  funderName = next.getSinglePrimitive();\n                 }\n-            }\n-        }\n-        writeEndTag(xmlw, geoLocationbox_check);\n-        writeEndTag(xmlw, geoLocation_check);\n-    }\n+              }\n \n-    /**\n-     *\n-     * 19 FundingReference (with name, identifier, and award related sub-\n-     * properties) (O)\n-     *\n-     * @param xmlw The Steam writer\n-     * @param datasetVersionDTO\n-     * @param language current language\n-     * @throws XMLStreamException\n-     */\n-    public static void writeFundingReferencesElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n-        // fundingReferences -> fundingReference -> funderName, awardNumber\n-        boolean fundingReference_check = false;\n-\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            String key = entry.getKey();\n-            MetadataBlockDTO value = entry.getValue();\n-            if (\"citation\".equals(key)) {\n-                for (FieldDTO fieldDTO : value.getFields()) {\n-                    if (DatasetFieldConstant.grantNumber.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String awardNumber = null;\n-                            String funderName = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.grantNumberValue.equals(next.getTypeName())) {\n-                                    awardNumber = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.grantNumberAgency.equals(next.getTypeName())) {\n-                                    funderName = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            if (StringUtils.isNotBlank(funderName)) {\n-                                fundingReference_check = writeOpenTag(xmlw, \"fundingReferences\", fundingReference_check);\n-                                xmlw.writeStartElement(\"fundingReference\"); // <fundingReference>\n-                                writeFullElement(xmlw, null, \"funderName\", null, funderName, language);\n-\n-                                if (StringUtils.isNotBlank(awardNumber)) {\n-                                    writeFullElement(xmlw, null, \"awardNumber\", null, awardNumber, language);\n-                                }\n-\n-                                xmlw.writeEndElement(); // </fundingReference>\n-                            }\n-                        }\n-                    } else if (DatasetFieldConstant.contributor.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String contributorName = null;\n-                            String contributorType = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.contributorName.equals(next.getTypeName())) {\n-                                    contributorName = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.contributorType.equals(next.getTypeName())) {\n-                                    contributorType = next.getSinglePrimitive();\n-                                }\n-                            }\n-\n-                            // Fix Funder contributorType\n-                            if (StringUtils.isNotBlank(contributorName) && StringUtils.equalsIgnoreCase(FunderType, contributorType)) {\n-                                fundingReference_check = writeOpenTag(xmlw, \"fundingReferences\", fundingReference_check);\n-                                xmlw.writeStartElement(\"fundingReference\"); // <fundingReference>\n-                                writeFullElement(xmlw, null, \"funderName\", null, contributorName, language);\n-\n-                                xmlw.writeEndElement(); // </fundingReference>\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        writeEndTag(xmlw, fundingReference_check);\n-    }\n+              if (StringUtils.isNotBlank(funderName)) {\n+                fundingReference_check = writeOpenTag(xmlw, \"fundingReferences\", fundingReference_check);\n+                xmlw.writeStartElement(\"fundingReference\"); // <fundingReference>\n+                writeFullElement(xmlw, null, \"funderName\", null, funderName, language);\n \n-    private static String dto2Primitive(DatasetVersionDTO datasetVersionDTO, String datasetFieldTypeName) {\n-        // give the single value of the given metadata\n-        for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n-            MetadataBlockDTO value = entry.getValue();\n-            for (FieldDTO fieldDTO : value.getFields()) {\n-                if (datasetFieldTypeName.equals(fieldDTO.getTypeName())) {\n-                    return fieldDTO.getSinglePrimitive();\n+                if (StringUtils.isNotBlank(awardNumber)) {\n+                  writeFullElement(xmlw, null, \"awardNumber\", null, awardNumber, language);\n                 }\n-            }\n-        }\n-        return null;\n-    }\n \n-    /**\n-     * Write a full tag.\n-     *\n-     * @param xmlw\n-     * @param tag_parent Parent\n-     * @param tag_son Son\n-     * @param map Map of properties\n-     * @param value Value\n-     * @throws XMLStreamException\n-     */\n-    public static void writeFullElement(XMLStreamWriter xmlw, String tag_parent, String tag_son, Map<String, String> map, String value, String language) throws XMLStreamException {\n-        // write a full generic metadata\n-        if (StringUtils.isNotBlank(value)) {\n-            boolean tag_parent_check = false;\n-            if (StringUtils.isNotBlank(tag_parent)) {\n-                xmlw.writeStartElement(tag_parent); // <value of tag_parent>\n-                tag_parent_check = true;\n-            }\n-            boolean tag_son_check = false;\n-            if (StringUtils.isNotBlank(tag_son)) {\n-                xmlw.writeStartElement(tag_son); // <value of tag_son>\n-                tag_son_check = true;\n+                xmlw.writeEndElement(); // </fundingReference>\n+              }\n             }\n-\n-            if (map != null) {\n-                if (StringUtils.isNotBlank(language)) {\n-                    if (StringUtils.containsIgnoreCase(tag_son, \"subject\") || StringUtils.containsIgnoreCase(tag_parent, \"subject\")) {\n-                        map.put(\"xml:lang\", language);\n-                    }\n+          } else if (DatasetFieldConstant.contributor.equals(fieldDTO.getTypeName())) {\n+            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+              String contributorName = null;\n+              String contributorType = null;\n+\n+              for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext(); ) {\n+                FieldDTO next = iterator.next();\n+                if (DatasetFieldConstant.contributorName.equals(next.getTypeName())) {\n+                  contributorName = next.getSinglePrimitive();\n                 }\n-                writeAttribute(xmlw, map);\n-            }\n+                if (DatasetFieldConstant.contributorType.equals(next.getTypeName())) {\n+                  contributorType = next.getSinglePrimitive();\n+                }\n+              }\n \n-            xmlw.writeCharacters(value);\n+              // Fix Funder contributorType\n+              if (StringUtils.isNotBlank(contributorName) &&\n+                StringUtils.equalsIgnoreCase(FunderType, contributorType)) {\n+                fundingReference_check = writeOpenTag(xmlw, \"fundingReferences\", fundingReference_check);\n+                xmlw.writeStartElement(\"fundingReference\"); // <fundingReference>\n+                writeFullElement(xmlw, null, \"funderName\", null, contributorName, language);\n \n-            writeEndTag(xmlw, tag_son_check); // </value of tag_son>\n-            writeEndTag(xmlw, tag_parent_check); //  </value of tag_parent>\n+                xmlw.writeEndElement(); // </fundingReference>\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    writeEndTag(xmlw, fundingReference_check);\n+  }\n+\n+  private static String dto2Primitive(DatasetVersionDTO datasetVersionDTO, String datasetFieldTypeName) {\n+    // give the single value of the given metadata\n+    for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n+      MetadataBlockDTO value = entry.getValue();\n+      for (FieldDTO fieldDTO : value.getFields()) {\n+        if (datasetFieldTypeName.equals(fieldDTO.getTypeName())) {\n+          return fieldDTO.getSinglePrimitive();\n         }\n+      }\n     }\n+    return null;\n+  }\n+\n+  /**\n+   * Write a full tag.\n+   *\n+   * @param xmlw\n+   * @param tag_parent Parent\n+   * @param tag_son    Son\n+   * @param map        Map of properties\n+   * @param value      Value\n+   * @throws XMLStreamException\n+   */\n+  public static void writeFullElement(XMLStreamWriter xmlw, String tag_parent, String tag_son, Map<String, String> map,\n+                                      String value, String language) throws XMLStreamException {\n+    // write a full generic metadata\n+    if (StringUtils.isNotBlank(value)) {\n+      boolean tag_parent_check = false;\n+      if (StringUtils.isNotBlank(tag_parent)) {\n+        xmlw.writeStartElement(tag_parent); // <value of tag_parent>\n+        tag_parent_check = true;\n+      }\n+      boolean tag_son_check = false;\n+      if (StringUtils.isNotBlank(tag_son)) {\n+        xmlw.writeStartElement(tag_son); // <value of tag_son>\n+        tag_son_check = true;\n+      }\n+\n+      if (map != null) {\n+        if (StringUtils.isNotBlank(language)) {\n+          if (StringUtils.containsIgnoreCase(tag_son, \"subject\") ||\n+            StringUtils.containsIgnoreCase(tag_parent, \"subject\")) {\n+            map.put(\"xml:lang\", language);\n+          }\n+        }\n+        writeAttribute(xmlw, map);\n+      }\n \n-    private static void writeAttribute(XMLStreamWriter xmlw, Map<String, String> map) throws XMLStreamException {\n-        // write attribute(s) of the current tag\n-        for (Map.Entry<String, String> entry : map.entrySet()) {\n-            String map_key = entry.getKey();\n-            String map_value = entry.getValue();\n+      xmlw.writeCharacters(value);\n \n-            if (StringUtils.isNotBlank(map_key) && StringUtils.isNotBlank(map_value)) {\n-                xmlw.writeAttribute(map_key, map_value);\n-            }\n-        }\n+      writeEndTag(xmlw, tag_son_check); // </value of tag_son>\n+      writeEndTag(xmlw, tag_parent_check); //  </value of tag_parent>\n     }\n+  }\n \n-    private static boolean writeOpenTag(XMLStreamWriter xmlw, String tag, boolean element_check) throws XMLStreamException {\n-        // check if the current tag isn't opened\n-        if (!element_check) {\n-            xmlw.writeStartElement(tag); // <value of tag>\n-        }\n-        return true;\n+  private static void writeAttribute(XMLStreamWriter xmlw, Map<String, String> map) throws XMLStreamException {\n+    // write attribute(s) of the current tag\n+    for (Map.Entry<String, String> entry : map.entrySet()) {\n+      String map_key = entry.getKey();\n+      String map_value = entry.getValue();\n+\n+      if (StringUtils.isNotBlank(map_key) && StringUtils.isNotBlank(map_value)) {\n+        xmlw.writeAttribute(map_key, map_value);\n+      }\n     }\n+  }\n \n-    private static void writeEndTag(XMLStreamWriter xmlw, boolean element_check) throws XMLStreamException {\n-        // close the current tag\n-        if (element_check) {\n-            xmlw.writeEndElement(); // </value of current tag>\n-        }\n+  private static boolean writeOpenTag(XMLStreamWriter xmlw, String tag, boolean element_check)\n+    throws XMLStreamException {\n+    // check if the current tag isn't opened\n+    if (!element_check) {\n+      xmlw.writeStartElement(tag); // <value of tag>\n     }\n+    return true;\n+  }\n \n-    /**\n-     * Check if the string is a valid email.\n-     *\n-     * @param email\n-     * @return true/false\n-     */\n-    private static boolean isValidEmailAddress(String email) {\n-        boolean result = true;\n-        try {\n-            InternetAddress emailAddr = new InternetAddress(email);\n-            emailAddr.validate();\n-        } catch (AddressException ex) {\n-            result = false;\n-        }\n-        return result;\n+  private static void writeEndTag(XMLStreamWriter xmlw, boolean element_check) throws XMLStreamException {\n+    // close the current tag\n+    if (element_check) {\n+      xmlw.writeEndElement(); // </value of current tag>\n+    }\n+  }\n+\n+  /**\n+   * Check if the string is a valid email.\n+   *\n+   * @param email\n+   * @return true/false\n+   */\n+  private static boolean isValidEmailAddress(String email) {\n+    boolean result = true;\n+    try {\n+      InternetAddress emailAddr = new InternetAddress(email);\n+      emailAddr.validate();\n+    } catch (AddressException ex) {\n+      result = false;\n     }\n+    return result;\n+  }\n }\n",
            "diff_size": 2149
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/92/OpenAireExportUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/92/OpenAireExportUtil.java\nindex fe0c15969ca..afa95a27fdd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/92/OpenAireExportUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/92/OpenAireExportUtil.java\n@@ -7,16 +7,12 @@ import java.util.Iterator;\n import java.util.Map;\n import java.util.Set;\n import java.util.logging.Logger;\n-\n import javax.json.JsonObject;\n import javax.xml.stream.XMLOutputFactory;\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamWriter;\n-\n import org.apache.commons.lang3.StringUtils;\n-\n import com.google.gson.Gson;\n-\n import edu.harvard.iq.dataverse.DatasetFieldConstant;\n import edu.harvard.iq.dataverse.GlobalId;\n import edu.harvard.iq.dataverse.api.dto.DatasetDTO;\n@@ -29,13 +25,17 @@ import java.util.regex.Pattern;\n import javax.mail.internet.AddressException;\n import javax.mail.internet.InternetAddress;\n \n+\n public class OpenAireExportUtil {\n \n     private static final Logger logger = Logger.getLogger(OpenAireExportUtil.class.getCanonicalName());\n \n     public static String XSI_NAMESPACE = \"http://www.w3.org/2001/XMLSchema-instance\";\n+\n     public static String SCHEMA_VERSION = \"4.1\";\n+\n     public static String RESOURCE_NAMESPACE = \"http://datacite.org/schema/kernel-4\";\n+\n     public static String RESOURCE_SCHEMA_LOCATION = \"http://schema.datacite.org/meta/kernel-4.1/metadata.xsd\";\n \n     public static String FunderType = \"Funder\";\n@@ -44,23 +44,17 @@ public class OpenAireExportUtil {\n         logger.fine(JsonUtil.prettyPrint(datasetDtoAsJson.toString()));\n         Gson gson = new Gson();\n         DatasetDTO datasetDto = gson.fromJson(datasetDtoAsJson.toString(), DatasetDTO.class);\n-\n         dto2openaire(datasetDto, outputStream);\n     }\n \n     private static void dto2openaire(DatasetDTO datasetDto, OutputStream outputStream) throws XMLStreamException {\n         XMLStreamWriter xmlw = XMLOutputFactory.newInstance().createXMLStreamWriter(outputStream);\n-\n         xmlw.writeStartElement(\"resource\"); // <resource>\n-\n         xmlw.writeAttribute(\"xmlns:xsi\", XSI_NAMESPACE);\n         xmlw.writeAttribute(\"xmlns\", RESOURCE_NAMESPACE);\n         xmlw.writeAttribute(\"xsi:schemaLocation\", RESOURCE_NAMESPACE + \" \" + RESOURCE_SCHEMA_LOCATION);\n-\n         createOpenAire(xmlw, datasetDto);\n-\n         xmlw.writeEndElement(); // </resource>\n-\n         xmlw.flush();\n     }\n \n@@ -97,6 +91,7 @@ public class OpenAireExportUtil {\n         }\n \n         // 5, PublicationYear (M)\n+\n         String publicationDate = datasetDto.getPublicationDate();\n         writePublicationYearElement(xmlw, version, publicationDate, language);\n \n@@ -153,6 +148,7 @@ public class OpenAireExportUtil {\n      * @return\n      * @throws XMLStreamException\n      */\n+\n     public static String getLanguage(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO) throws XMLStreamException {\n         String language = null;\n \n@@ -173,7 +169,6 @@ public class OpenAireExportUtil {\n                 }\n             }\n         }\n-\n         return language;\n     }\n \n@@ -184,11 +179,11 @@ public class OpenAireExportUtil {\n      * @param identifier The identifier url like https://doi.org/10.123/123\n      * @throws XMLStreamException\n      */\n+\n     public static void writeIdentifierElement(XMLStreamWriter xmlw, String identifier, String language) throws XMLStreamException {\n         // identifier with identifierType attribute        \n         if (StringUtils.isNotBlank(identifier)) {\n             Map<String, String> identifier_map = new HashMap<String, String>();\n-\n             if (StringUtils.containsIgnoreCase(identifier, GlobalId.DOI_RESOLVER_URL)) {\n                 identifier_map.put(\"identifierType\", \"DOI\");\n                 identifier = StringUtils.substring(identifier, identifier.indexOf(\"10.\"));\n@@ -212,11 +207,11 @@ public class OpenAireExportUtil {\n      * @param language current language value\n      * @throws XMLStreamException\n      */\n+\n     public static void writeCreatorsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // creators -> creator -> creatorName with nameType attribute, givenName, familyName, nameIdentifier\n         // write all creators\n         boolean creator_check = false;\n-\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n             MetadataBlockDTO value = entry.getValue();\n@@ -228,18 +223,20 @@ public class OpenAireExportUtil {\n                             String affiliation = null;\n                             String nameIdentifier = null;\n                             String nameIdentifierScheme = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.authorName.equals(next.getTypeName())) {\n                                     creatorName = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.authorIdValue.equals(next.getTypeName())) {\n                                     nameIdentifier = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.authorIdType.equals(next.getTypeName())) {\n                                     nameIdentifierScheme = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.authorAffiliation.equals(next.getTypeName())) {\n                                     affiliation = next.getSinglePrimitive();\n                                 }\n@@ -248,14 +245,12 @@ public class OpenAireExportUtil {\n                             if (StringUtils.isNotBlank(creatorName)) {\n                                 creator_check = writeOpenTag(xmlw, \"creators\", creator_check);\n                                 xmlw.writeStartElement(\"creator\"); // <creator>\n-\n                                 boolean nameType_check = false;\n                                 Map<String, String> creator_map = new HashMap<String, String>();\n                                 if ((StringUtils.containsIgnoreCase(nameIdentifierScheme, \"orcid\"))) {\n                                     creator_map.put(\"nameType\", \"Personal\");\n                                     nameType_check = true;\n                                 }\n-\n                                 creatorName = Cleanup.normalize(creatorName);\n                                 // Datacite algorithm, https://github.com/IQSS/dataverse/issues/2243#issuecomment-358615313\n                                 if (creatorName.contains(\",\")) {\n@@ -272,14 +267,12 @@ public class OpenAireExportUtil {\n                                         nameType_check = false;\n                                     }\n                                     writeFullElement(xmlw, null, \"creatorName\", creator_map, creatorName, language);\n-\n                                     if ((nameType_check) && (!creatorName.replaceFirst(\",\", \"\").contains(\",\"))) {\n                                         // creatorName=<FamilyName>, <FirstName>\n                                         String[] fullName = creatorName.split(\", \");\n                                         if (fullName.length == 2) {\n                                             givenName = fullName[1];\n                                             String familyName = fullName[0];\n-\n                                             writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n                                             writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n                                         } else {\n@@ -290,18 +283,15 @@ public class OpenAireExportUtil {\n                                 } else {\n                                     String givenName = FirstNames.getInstance().getFirstName(creatorName);\n                                     boolean isOrganization = Organizations.getInstance().isOrganization(creatorName);\n-                                    \n                                     if (givenName != null && !isOrganization) {\n                                         // givenName ok, creatorName=<FirstName> <FamilyName>\n                                         creator_map.put(\"nameType\", \"Personal\");\n                                         nameType_check = true;\n                                         writeFullElement(xmlw, null, \"creatorName\", creator_map, creatorName, language);\n-\n                                         String familyName = \"\";\n                                         if (givenName.length() + 1 < creatorName.length()) {\n                                             familyName = creatorName.substring(givenName.length() + 1);\n                                         }\n-\n                                         writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n                                         writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n                                     } else {\n@@ -315,13 +305,11 @@ public class OpenAireExportUtil {\n \n                                 if (StringUtils.isNotBlank(nameIdentifier)) {\n                                     creator_map.clear();\n-\n                                     if (StringUtils.contains(nameIdentifier, \"http\")) {\n                                         String site = nameIdentifier.substring(0, nameIdentifier.indexOf(\"/\") + 2);\n                                         nameIdentifier = nameIdentifier.replace(nameIdentifier.substring(0, nameIdentifier.indexOf(\"/\") + 2), \"\");\n                                         site = site + nameIdentifier.substring(0, nameIdentifier.indexOf(\"/\") + 1);\n                                         nameIdentifier = nameIdentifier.substring(nameIdentifier.indexOf(\"/\") + 1);\n-\n                                         creator_map.put(\"SchemeURI\", site);\n                                     }\n \n@@ -354,19 +342,16 @@ public class OpenAireExportUtil {\n      * @param language current language value\n      * @throws XMLStreamException\n      */\n+\n     public static void writeTitlesElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // titles -> title with titleType attribute\n         boolean title_check = false;\n-\n         String title = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.title);\n         title_check = writeTitleElement(xmlw, null, title, title_check, language);\n-\n         String subtitle = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.subTitle);\n         title_check = writeTitleElement(xmlw, \"Subtitle\", subtitle, title_check, language);\n-\n         String alternativeTitle = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.alternativeTitle);\n         title_check = writeTitleElement(xmlw, \"AlternativeTitle\", alternativeTitle, title_check, language);\n-\n         writeEndTag(xmlw, title_check);\n     }\n \n@@ -381,12 +366,12 @@ public class OpenAireExportUtil {\n      * @return\n      * @throws XMLStreamException\n      */\n+\n     private static boolean writeTitleElement(XMLStreamWriter xmlw, String titleType, String title, boolean title_check, String language) throws XMLStreamException {\n         // write a title\n         if (StringUtils.isNotBlank(title)) {\n             title_check = writeOpenTag(xmlw, \"titles\", title_check);\n             xmlw.writeStartElement(\"title\"); // <title>\n-\n             if (StringUtils.isNotBlank(language)) {\n                 xmlw.writeAttribute(\"xml:lang\", language);\n             }\n@@ -394,7 +379,6 @@ public class OpenAireExportUtil {\n             if (StringUtils.isNotBlank(titleType)) {\n                 xmlw.writeAttribute(\"titleType\", titleType);\n             }\n-\n             xmlw.writeCharacters(title);\n             xmlw.writeEndElement(); // </title>\n         }\n@@ -409,28 +393,30 @@ public class OpenAireExportUtil {\n      * @param language current language value\n      * @throws XMLStreamException\n      */\n-    public static void writePublicationYearElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String publicationDate, String language) throws XMLStreamException {\n+\n+    public static void writePublicationYearElement(XMLStreamWriter xmlw,\n+                                                   DatasetVersionDTO datasetVersionDTO,\n+                                                   String publicationDate, String language) throws XMLStreamException {\n \n         // publicationYear\n         String distributionDate = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.distributionDate);\n         //String publicationDate = datasetDto.getPublicationDate();\n         String depositDate = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.dateOfDeposit);\n-\n         int distributionYear = -1;\n         int publicationYear = -1;\n         int yearOfDeposit = -1;\n         int pubYear = 0;\n-\n         if (distributionDate != null) {\n             distributionYear = Integer.parseInt(distributionDate.substring(0, 4));\n         }\n+\n         if (publicationDate != null) {\n             publicationYear = Integer.parseInt(publicationDate.substring(0, 4));\n         }\n+\n         if (depositDate != null) {\n             yearOfDeposit = Integer.parseInt(depositDate.substring(0, 4));\n         }\n-\n         pubYear = Integer.max(Integer.max(distributionYear, publicationYear), yearOfDeposit);\n         if (pubYear > -1) {\n             writeFullElement(xmlw, null, \"publicationYear\", null, String.valueOf(pubYear), language);\n@@ -445,10 +431,10 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeSubjectsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // subjects -> subject with subjectScheme and schemeURI attributes\n         boolean subject_check = false;\n-\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n             MetadataBlockDTO value = entry.getValue();\n@@ -468,7 +454,6 @@ public class OpenAireExportUtil {\n                             String subject = null;\n                             String subjectScheme = null;\n                             String schemeURI = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.keywordValue.equals(next.getTypeName())) {\n@@ -496,7 +481,6 @@ public class OpenAireExportUtil {\n                             String subject = null;\n                             String subjectScheme = null;\n                             String schemeURI = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.topicClassValue.equals(next.getTypeName())) {\n@@ -534,10 +518,10 @@ public class OpenAireExportUtil {\n      * @param language\n      * @throws XMLStreamException\n      */\n+\n     private static void writeSubjectElement(XMLStreamWriter xmlw, String subjectScheme, String schemeURI, String value, String language) throws XMLStreamException {\n         // write a subject\n         Map<String, String> subject_map = new HashMap<String, String>();\n-\n         if (StringUtils.isNotBlank(language)) {\n             subject_map.put(\"xml:lang\", language);\n         }\n@@ -545,6 +529,7 @@ public class OpenAireExportUtil {\n         if (StringUtils.isNotBlank(subjectScheme)) {\n             subject_map.put(\"subjectScheme\", subjectScheme);\n         }\n+\n         if (StringUtils.isNotBlank(schemeURI)) {\n             subject_map.put(\"schemeURI\", schemeURI);\n         }\n@@ -568,27 +553,26 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeContributorsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // contributors -> contributor with ContributorType attribute -> contributorName, affiliation\n         boolean contributor_check = false;\n-\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n             MetadataBlockDTO value = entry.getValue();\n             if (\"citation\".equals(key)) {\n                 for (FieldDTO fieldDTO : value.getFields()) {\n                     // skip non-scompound value\n-\n                     if (DatasetFieldConstant.producer.equals(fieldDTO.getTypeName())) {\n                         for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n                             String producerName = null;\n                             String producerAffiliation = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.producerName.equals(next.getTypeName())) {\n                                     producerName = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.producerAffiliation.equals(next.getTypeName())) {\n                                     producerAffiliation = next.getSinglePrimitive();\n                                 }\n@@ -603,12 +587,12 @@ public class OpenAireExportUtil {\n                         for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n                             String distributorName = null;\n                             String distributorAffiliation = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.distributorName.equals(next.getTypeName())) {\n                                     distributorName = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.distributorAffiliation.equals(next.getTypeName())) {\n                                     distributorAffiliation = next.getSinglePrimitive();\n                                 }\n@@ -620,61 +604,60 @@ public class OpenAireExportUtil {\n                             }\n                         }\n                     } else if (DatasetFieldConstant.datasetContact.equals(fieldDTO.getTypeName())) {\n-                        if (\"primitive\".equals(fieldDTO.getTypeClass())) {\n-                            String contactAffiliation = null;\n-                            String contactName = null;\n-\n-                            for (Iterator<String> iterator = fieldDTO.getMultiplePrimitive().iterator(); iterator.hasNext();) {\n-                                contactName = iterator.next();\n-\n-                                if (StringUtils.isNotBlank(contactName)) {\n-                                    contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n-                                    writeContributorElement(xmlw, \"ContactPerson\", contactName, contactAffiliation, language);\n-                                }\n-                            }\n-                        } else {\n-                            for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                                String contactName = null;\n-                                String contactAffiliation = null;\n-\n-                                for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                    FieldDTO next = iterator.next();\n-                                    if (DatasetFieldConstant.datasetContactName.equals(next.getTypeName())) {\n-                                        contactName = next.getSinglePrimitive();\n-                                    }\n-                                    if (DatasetFieldConstant.datasetContactAffiliation.equals(next.getTypeName())) {\n-                                        contactAffiliation = next.getSinglePrimitive();\n-                                    }\n-                                }\n-\n-                                if (StringUtils.isNotBlank(contactName)) {\n-                                    contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n-                                    writeContributorElement(xmlw, \"ContactPerson\", contactName, contactAffiliation, language);\n-                                }\n-                            }\n-                        }\n-                    } else if (DatasetFieldConstant.contributor.equals(fieldDTO.getTypeName())) {\n-                        for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n-                            String contributorName = null;\n-                            String contributorType = null;\n-\n-                            for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n-                                FieldDTO next = iterator.next();\n-                                if (DatasetFieldConstant.contributorName.equals(next.getTypeName())) {\n-                                    contributorName = next.getSinglePrimitive();\n-                                }\n-                                if (DatasetFieldConstant.contributorType.equals(next.getTypeName())) {\n-                                    contributorType = next.getSinglePrimitive();\n-                                }\n-                            }\n+                               if (\"primitive\".equals(fieldDTO.getTypeClass())) {\n+                                   String contactAffiliation = null;\n+                                   String contactName = null;\n+                                   for (Iterator<String> iterator = fieldDTO.getMultiplePrimitive().iterator(); iterator.hasNext();) {\n+                                       contactName = iterator.next();\n+                                       if (StringUtils.isNotBlank(contactName)) {\n+                                           contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n+                                           writeContributorElement(xmlw, \"ContactPerson\", contactName, contactAffiliation, language);\n+                                       }\n+                                   }\n+                               } else {\n+                                   for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+                                       String contactName = null;\n+                                       String contactAffiliation = null;\n+                                       for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n+                                           FieldDTO next = iterator.next();\n+                                           if (DatasetFieldConstant.datasetContactName.equals(next.getTypeName())) {\n+                                               contactName = next.getSinglePrimitive();\n+                                           }\n+\n+                                           if (DatasetFieldConstant.datasetContactAffiliation.equals(next.getTypeName())) {\n+                                               contactAffiliation = next.getSinglePrimitive();\n+                                           }\n+                                       }\n+\n+                                       if (StringUtils.isNotBlank(contactName)) {\n+                                           contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n+                                           writeContributorElement(xmlw, \"ContactPerson\", contactName, contactAffiliation, language);\n+                                       }\n+                                   }\n+                               }\n+                           } else if (DatasetFieldConstant.contributor.equals(fieldDTO.getTypeName())) {\n+                               for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n+                                   String contributorName = null;\n+                                   String contributorType = null;\n+                                   for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n+                                       FieldDTO next = iterator.next();\n+                                       if (DatasetFieldConstant.contributorName.equals(next.getTypeName())) {\n+                                           contributorName = next.getSinglePrimitive();\n+                                       }\n+\n+                                       if (DatasetFieldConstant.contributorType.equals(next.getTypeName())) {\n+                                           contributorType = next.getSinglePrimitive();\n+                                       }\n+                                   }\n \n                             // Fix Funder contributorType\n-                            if (StringUtils.isNotBlank(contributorName) && !StringUtils.equalsIgnoreCase(FunderType, contributorType)) {\n-                                contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n-                                writeContributorElement(xmlw, contributorType, contributorName, null, language);\n-                            }\n-                        }\n-                    }\n+\n+                                   if (StringUtils.isNotBlank(contributorName) && !StringUtils.equalsIgnoreCase(FunderType, contributorType)) {\n+                                       contributor_check = writeOpenTag(xmlw, \"contributors\", contributor_check);\n+                                       writeContributorElement(xmlw, contributorType, contributorName, null, language);\n+                                   }\n+                               }\n+                           }\n                 }\n             }\n         }\n@@ -694,17 +677,16 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeContributorElement(XMLStreamWriter xmlw, String contributorType, String contributorName, String contributorAffiliation, String language) throws XMLStreamException {\n         // write a contributor\n         xmlw.writeStartElement(\"contributor\"); // <contributor>\n-\n         if (StringUtils.isNotBlank(contributorType)) {\n             xmlw.writeAttribute(\"contributorType\", contributorType.replaceAll(\" \", \"\"));\n         }\n \n         boolean nameType_check = false;\n         Map<String, String> contributor_map = new HashMap<String, String>();\n-\n         contributorName = Cleanup.normalize(contributorName);\n         // Datacite algorithm, https://github.com/IQSS/dataverse/issues/2243#issuecomment-358615313\n         if (contributorName.contains(\",\")) {\n@@ -720,29 +702,24 @@ public class OpenAireExportUtil {\n                 contributor_map.put(\"nameType\", \"Organizational\");\n             }\n             writeFullElement(xmlw, null, \"contributorName\", contributor_map, contributorName, language);\n-\n             if ((nameType_check) && (!contributorName.replaceFirst(\",\", \"\").contains(\",\"))) {\n                 // contributorName=<FamilyName>, <FirstName>\n                 String[] fullName = contributorName.split(\", \");\n                 givenName = fullName[1];\n                 String familyName = fullName[0];\n-\n                 writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n                 writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n             }\n         } else {\n             String givenName = FirstNames.getInstance().getFirstName(contributorName);\n             boolean isOrganization = Organizations.getInstance().isOrganization(contributorName);\n-\n             if (givenName != null && !isOrganization) {\n                 contributor_map.put(\"nameType\", \"Personal\");\n                 writeFullElement(xmlw, null, \"contributorName\", contributor_map, contributorName, language);\n-\n                 String familyName = \"\";\n                 if (givenName.length() + 1 < contributorName.length()) {\n                     familyName = contributorName.substring(givenName.length() + 1);\n                 }\n-\n                 writeFullElement(xmlw, null, \"givenName\", null, givenName, language);\n                 writeFullElement(xmlw, null, \"familyName\", null, familyName, language);\n             } else {\n@@ -768,12 +745,12 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeDatesElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         boolean date_check = false;\n         String dateOfDistribution = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.distributionDate);\n         if (StringUtils.isNotBlank(dateOfDistribution)) {\n             date_check = writeOpenTag(xmlw, \"dates\", date_check);\n-\n             Map<String, String> date_map = new HashMap<String, String>();\n             date_map.put(\"dateType\", \"Issued\");\n             writeFullElement(xmlw, null, \"date\", date_map, dateOfDistribution, language);\n@@ -783,7 +760,6 @@ public class OpenAireExportUtil {\n         String dateOfProduction = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.productionDate);\n         if (StringUtils.isNotBlank(dateOfProduction)) {\n             date_check = writeOpenTag(xmlw, \"dates\", date_check);\n-\n             Map<String, String> date_map = new HashMap<String, String>();\n             date_map.put(\"dateType\", \"Created\");\n             writeFullElement(xmlw, null, \"date\", date_map, dateOfProduction, language);\n@@ -792,7 +768,6 @@ public class OpenAireExportUtil {\n         String dateOfDeposit = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.dateOfDeposit);\n         if (StringUtils.isNotBlank(dateOfDeposit)) {\n             date_check = writeOpenTag(xmlw, \"dates\", date_check);\n-\n             Map<String, String> date_map = new HashMap<String, String>();\n             date_map.put(\"dateType\", \"Submitted\");\n             writeFullElement(xmlw, null, \"date\", date_map, dateOfDeposit, language);\n@@ -801,7 +776,6 @@ public class OpenAireExportUtil {\n         String dateOfVersion = datasetVersionDTO.getReleaseTime();\n         if (StringUtils.isNotBlank(dateOfVersion)) {\n             date_check = writeOpenTag(xmlw, \"dates\", date_check);\n-\n             Map<String, String> date_map = new HashMap<String, String>();\n             date_map.put(\"dateType\", \"Updated\");\n             writeFullElement(xmlw, null, \"date\", date_map, dateOfVersion.substring(0, 10), language);\n@@ -816,12 +790,12 @@ public class OpenAireExportUtil {\n                         for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n                             String dateOfCollectionStart = null;\n                             String dateOfCollectionEnd = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.dateOfCollectionStart.equals(next.getTypeName())) {\n                                     dateOfCollectionStart = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.dateOfCollectionEnd.equals(next.getTypeName())) {\n                                     dateOfCollectionEnd = next.getSinglePrimitive();\n                                 }\n@@ -829,7 +803,6 @@ public class OpenAireExportUtil {\n \n                             if (StringUtils.isNotBlank(dateOfCollectionStart) && StringUtils.isNotBlank(dateOfCollectionEnd)) {\n                                 date_check = writeOpenTag(xmlw, \"dates\", date_check);\n-\n                                 Map<String, String> date_map = new HashMap<String, String>();\n                                 date_map.put(\"dateType\", \"Collected\");\n                                 writeFullElement(xmlw, null, \"date\", date_map, dateOfCollectionStart + \"/\" + dateOfCollectionEnd, language);\n@@ -850,6 +823,7 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeResourceTypeElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // resourceType with resourceTypeGeneral attribute\n         boolean resourceTypeFound = false;\n@@ -872,6 +846,7 @@ public class OpenAireExportUtil {\n                 }\n             }\n         }\n+\n         if (!resourceTypeFound) {\n             xmlw.writeStartElement(\"resourceType\"); // <resourceType>\n             xmlw.writeAttribute(\"resourceTypeGeneral\", \"Dataset\");\n@@ -887,10 +862,10 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeAlternateIdentifierElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // alternateIdentifiers -> alternateIdentifier with alternateIdentifierType attribute\n         boolean alternateIdentifier_check = false;\n-\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n             MetadataBlockDTO value = entry.getValue();\n@@ -900,12 +875,12 @@ public class OpenAireExportUtil {\n                         for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n                             String alternateIdentifier = null;\n                             String alternateIdentifierType = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.otherIdValue.equals(next.getTypeName())) {\n                                     alternateIdentifier = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.otherIdAgency.equals(next.getTypeName())) {\n                                     alternateIdentifierType = next.getSinglePrimitive();\n                                 }\n@@ -913,7 +888,6 @@ public class OpenAireExportUtil {\n \n                             if (StringUtils.isNotBlank(alternateIdentifier)) {\n                                 alternateIdentifier_check = writeOpenTag(xmlw, \"alternateIdentifiers\", alternateIdentifier_check);\n-\n                                 if (StringUtils.isNotBlank(alternateIdentifierType)) {\n                                     Map<String, String> alternateIdentifier_map = new HashMap<String, String>();\n                                     alternateIdentifier_map.put(\"alternateIdentifierType\", alternateIdentifierType);\n@@ -938,6 +912,7 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeRelatedIdentifierElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // relatedIdentifiers -> relatedIdentifier with relatedIdentifierType and relationType attributes\n         boolean relatedIdentifier_check = false;\n@@ -975,15 +950,16 @@ public class OpenAireExportUtil {\n                             String relatedIdentifierType = null;\n                             String relatedIdentifier = null; // is used when relatedIdentifierType variable is not URL\n                             String relatedURL = null; // is used when relatedIdentifierType variable is URL\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.publicationIDType.equals(next.getTypeName())) {\n                                     relatedIdentifierType = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.publicationIDNumber.equals(next.getTypeName())) {\n                                     relatedIdentifier = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.publicationURL.equals(next.getTypeName())) {\n                                     relatedURL = next.getSinglePrimitive();\n                                 }\n@@ -991,16 +967,13 @@ public class OpenAireExportUtil {\n \n                             if (StringUtils.isNotBlank(relatedIdentifierType)) {\n                                 relatedIdentifier_check = writeOpenTag(xmlw, \"relatedIdentifiers\", relatedIdentifier_check);\n-\n                                 Map<String, String> relatedIdentifier_map = new HashMap<String, String>();\n                                 // fix case\n                                 if (relatedIdentifierTypeMap.containsKey(relatedIdentifierType)) {\n                                     relatedIdentifierType = (String) relatedIdentifierTypeMap.get(relatedIdentifierType);\n                                 }\n-\n                                 relatedIdentifier_map.put(\"relatedIdentifierType\", relatedIdentifierType);\n                                 relatedIdentifier_map.put(\"relationType\", \"IsCitedBy\");\n-\n                                 if (StringUtils.containsIgnoreCase(relatedIdentifierType, \"url\")) {\n                                     writeFullElement(xmlw, null, \"relatedIdentifier\", relatedIdentifier_map, relatedURL, language);\n                                 } else {\n@@ -1009,7 +982,6 @@ public class OpenAireExportUtil {\n                                         relatedIdentifier = relatedIdentifier.replace(relatedIdentifier.substring(0, relatedIdentifier.indexOf(\"/\") + 2), \"\");\n                                         site = site + relatedIdentifier.substring(0, relatedIdentifier.indexOf(\"/\") + 1);\n                                         relatedIdentifier = relatedIdentifier.substring(relatedIdentifier.indexOf(\"/\") + 1);\n-\n                                         relatedIdentifier_map.put(\"SchemeURI\", site);\n                                     }\n                                     writeFullElement(xmlw, null, \"relatedIdentifier\", relatedIdentifier_map, relatedIdentifier, language);\n@@ -1031,10 +1003,10 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeSizeElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // sizes -> size\n         boolean size_check = false;\n-\n         if (datasetVersionDTO.getFiles() != null) {\n             for (int i = 0; i < datasetVersionDTO.getFiles().size(); i++) {\n                 Long size = datasetVersionDTO.getFiles().get(i).getDataFile().getFileSize();\n@@ -1055,10 +1027,10 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeFormatElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // formats -> format\n         boolean format_check = false;\n-\n         if (datasetVersionDTO.getFiles() != null) {\n             for (int i = 0; i < datasetVersionDTO.getFiles().size(); i++) {\n                 String format = datasetVersionDTO.getFiles().get(i).getDataFile().getContentType();\n@@ -1079,10 +1051,10 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeVersionElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         Long majorVersionNumber = datasetVersionDTO.getVersionNumber();\n         Long minorVersionNumber = datasetVersionDTO.getMinorVersionNumber();\n-\n         if (majorVersionNumber != null && StringUtils.isNotBlank(majorVersionNumber.toString())) {\n             if (minorVersionNumber != null && StringUtils.isNotBlank(minorVersionNumber.toString())) {\n                 writeFullElement(xmlw, null, \"version\", null, majorVersionNumber.toString() + \".\" + minorVersionNumber.toString(), language);\n@@ -1100,6 +1072,7 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeAccessRightsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // rightsList -> rights with rightsURI attribute\n         xmlw.writeStartElement(\"rightsList\"); // <rightsList>\n@@ -1108,10 +1081,10 @@ public class OpenAireExportUtil {\n         writeRightsHeader(xmlw, language);\n         boolean restrict = false;\n         boolean closed = false;\n-\n         if (datasetVersionDTO.isFileAccessRequest()) {\n             restrict = true;\n         }\n+\n         if (datasetVersionDTO.getFiles() != null) {\n             for (int i = 0; i < datasetVersionDTO.getFiles().size(); i++) {\n                 if (datasetVersionDTO.getFiles().get(i).isRestricted()) {\n@@ -1166,10 +1139,10 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     private static void writeRightsHeader(XMLStreamWriter xmlw, String language) throws XMLStreamException {\n         // write the rights header\n         xmlw.writeStartElement(\"rights\"); // <rights>\n-\n         if (StringUtils.isNotBlank(language)) {\n             xmlw.writeAttribute(\"xml:lang\", language);\n         }\n@@ -1183,10 +1156,10 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeDescriptionsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // descriptions -> description with descriptionType attribute\n         boolean description_check = false;\n-\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n             MetadataBlockDTO value = entry.getValue();\n@@ -1195,7 +1168,6 @@ public class OpenAireExportUtil {\n                     if (DatasetFieldConstant.description.equals(fieldDTO.getTypeName())) {\n                         for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n                             String descriptionOfAbstract = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.descriptionText.equals(next.getTypeName())) {\n@@ -1222,12 +1194,12 @@ public class OpenAireExportUtil {\n                         for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n                             String softwareName = null;\n                             String softwareVersion = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.softwareName.equals(next.getTypeName())) {\n                                     softwareName = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.softwareVersion.equals(next.getTypeName())) {\n                                     softwareVersion = next.getSinglePrimitive();\n                                 }\n@@ -1269,7 +1241,6 @@ public class OpenAireExportUtil {\n                     if (DatasetFieldConstant.series.equals(fieldDTO.getTypeName())) {\n                         // String seriesName = null;\n                         String seriesInformation = null;\n-\n                         Set<FieldDTO> fieldDTOs = fieldDTO.getSingleCompound();\n                         for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                             FieldDTO next = iterator.next();\n@@ -1282,10 +1253,11 @@ public class OpenAireExportUtil {\n                         }\n \n                         /*if (StringUtils.isNotBlank(seriesName)){\n-                        \tcontributor_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n-                        \t\n-                        \twriteDescriptionElement(xmlw, \"SeriesInformation\", seriesName);\n+                            contributor_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n+                            \n+                            writeDescriptionElement(xmlw, \"SeriesInformation\", seriesName);\n                         }*/\n+\n                         if (StringUtils.isNotBlank(seriesInformation)) {\n                             description_check = writeOpenTag(xmlw, \"descriptions\", description_check);\n                             writeDescriptionElement(xmlw, \"SeriesInformation\", seriesInformation, language);\n@@ -1312,14 +1284,13 @@ public class OpenAireExportUtil {\n      * @param language\n      * @throws XMLStreamException\n      */\n+\n     private static void writeDescriptionElement(XMLStreamWriter xmlw, String descriptionType, String description, String language) throws XMLStreamException {\n         // write a description\n         Map<String, String> description_map = new HashMap<String, String>();\n-\n         if (StringUtils.isNotBlank(language)) {\n             description_map.put(\"xml:lang\", language);\n         }\n-\n         description_map.put(\"descriptionType\", descriptionType);\n         writeFullElement(xmlw, null, \"description\", description_map, description, language);\n     }\n@@ -1332,6 +1303,7 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeGeoLocationsElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // geoLocation -> geoLocationPlace\n         String geoLocationPlace = dto2Primitive(datasetVersionDTO, DatasetFieldConstant.productionPlace);\n@@ -1342,6 +1314,7 @@ public class OpenAireExportUtil {\n         writeGeolocationPlace(xmlw, geoLocationPlace, language);\n                 \n         // get DatasetFieldConstant.geographicBoundingBox\n+\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             MetadataBlockDTO value = entry.getValue();\n             for (FieldDTO fieldDTO : value.getFields()) {\n@@ -1357,7 +1330,6 @@ public class OpenAireExportUtil {\n                 }\n             }\n         }\n-\n         writeEndTag(xmlw, geoLocations_check);\n     }\n \n@@ -1371,9 +1343,9 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeGeolocationPlace(XMLStreamWriter xmlw, String geoLocationPlace, String language) throws XMLStreamException {\n         boolean geoLocation_check = false;\n-        \n         if (StringUtils.isNotBlank(geoLocationPlace)) {\n             geoLocation_check = writeOpenTag(xmlw, \"geoLocation\", geoLocation_check);\n             writeFullElement(xmlw, null, \"geoLocationPlace\", null, geoLocationPlace, language);\n@@ -1389,18 +1361,17 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeGeoLocationsElement(XMLStreamWriter xmlw, Set<FieldDTO> fieldDTOs, String language) throws XMLStreamException {\n         //boolean geoLocations_check = false;\n         boolean geoLocation_check = false;\n         boolean geoLocationbox_check = false;\n-\n         geoLocation_check = writeOpenTag(xmlw, \"geoLocation\", geoLocation_check);\n         geoLocationbox_check = writeOpenTag(xmlw, \"geoLocationBox\", geoLocationbox_check);\n \n         for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n             FieldDTO next = iterator.next();\n             String typeName = next.getTypeName();\n-\n             Pattern pattern = Pattern.compile(\"([a-z]+)(Longitude|Latitude)\");\n             Matcher matcher = pattern.matcher(next.getTypeName());\n             boolean skip = false;\n@@ -1410,16 +1381,15 @@ public class OpenAireExportUtil {\n                     case \"north\":\n                         typeName = matcher.group(1) + \"BoundLatitude\";\n                         break;\n-\n                     case \"west\":\n                     case \"east\":\n                         typeName = matcher.group(1) + \"BoundLongitude\";\n                         break;\n-\n                     default:\n                         skip = true;\n                         break;\n                 }\n+\n                 if (!skip) {\n                     writeFullElement(xmlw, null, typeName, null, next.getSinglePrimitive(), language);\n                 }\n@@ -1439,10 +1409,10 @@ public class OpenAireExportUtil {\n      * @param language current language\n      * @throws XMLStreamException\n      */\n+\n     public static void writeFundingReferencesElement(XMLStreamWriter xmlw, DatasetVersionDTO datasetVersionDTO, String language) throws XMLStreamException {\n         // fundingReferences -> fundingReference -> funderName, awardNumber\n         boolean fundingReference_check = false;\n-\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             String key = entry.getKey();\n             MetadataBlockDTO value = entry.getValue();\n@@ -1452,12 +1422,12 @@ public class OpenAireExportUtil {\n                         for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n                             String awardNumber = null;\n                             String funderName = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.grantNumberValue.equals(next.getTypeName())) {\n                                     awardNumber = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.grantNumberAgency.equals(next.getTypeName())) {\n                                     funderName = next.getSinglePrimitive();\n                                 }\n@@ -1467,11 +1437,9 @@ public class OpenAireExportUtil {\n                                 fundingReference_check = writeOpenTag(xmlw, \"fundingReferences\", fundingReference_check);\n                                 xmlw.writeStartElement(\"fundingReference\"); // <fundingReference>\n                                 writeFullElement(xmlw, null, \"funderName\", null, funderName, language);\n-\n                                 if (StringUtils.isNotBlank(awardNumber)) {\n                                     writeFullElement(xmlw, null, \"awardNumber\", null, awardNumber, language);\n                                 }\n-\n                                 xmlw.writeEndElement(); // </fundingReference>\n                             }\n                         }\n@@ -1479,23 +1447,23 @@ public class OpenAireExportUtil {\n                         for (HashSet<FieldDTO> fieldDTOs : fieldDTO.getMultipleCompound()) {\n                             String contributorName = null;\n                             String contributorType = null;\n-\n                             for (Iterator<FieldDTO> iterator = fieldDTOs.iterator(); iterator.hasNext();) {\n                                 FieldDTO next = iterator.next();\n                                 if (DatasetFieldConstant.contributorName.equals(next.getTypeName())) {\n                                     contributorName = next.getSinglePrimitive();\n                                 }\n+\n                                 if (DatasetFieldConstant.contributorType.equals(next.getTypeName())) {\n                                     contributorType = next.getSinglePrimitive();\n                                 }\n                             }\n \n                             // Fix Funder contributorType\n+\n                             if (StringUtils.isNotBlank(contributorName) && StringUtils.equalsIgnoreCase(FunderType, contributorType)) {\n                                 fundingReference_check = writeOpenTag(xmlw, \"fundingReferences\", fundingReference_check);\n                                 xmlw.writeStartElement(\"fundingReference\"); // <fundingReference>\n                                 writeFullElement(xmlw, null, \"funderName\", null, contributorName, language);\n-\n                                 xmlw.writeEndElement(); // </fundingReference>\n                             }\n                         }\n@@ -1529,7 +1497,12 @@ public class OpenAireExportUtil {\n      * @param value Value\n      * @throws XMLStreamException\n      */\n-    public static void writeFullElement(XMLStreamWriter xmlw, String tag_parent, String tag_son, Map<String, String> map, String value, String language) throws XMLStreamException {\n+\n+    public static void writeFullElement(XMLStreamWriter xmlw,\n+                                        String tag_parent,\n+                                        String tag_son,\n+                                        Map<String, String> map,\n+                                        String value, String language) throws XMLStreamException {\n         // write a full generic metadata\n         if (StringUtils.isNotBlank(value)) {\n             boolean tag_parent_check = false;\n@@ -1537,6 +1510,7 @@ public class OpenAireExportUtil {\n                 xmlw.writeStartElement(tag_parent); // <value of tag_parent>\n                 tag_parent_check = true;\n             }\n+\n             boolean tag_son_check = false;\n             if (StringUtils.isNotBlank(tag_son)) {\n                 xmlw.writeStartElement(tag_son); // <value of tag_son>\n@@ -1551,9 +1525,7 @@ public class OpenAireExportUtil {\n                 }\n                 writeAttribute(xmlw, map);\n             }\n-\n             xmlw.writeCharacters(value);\n-\n             writeEndTag(xmlw, tag_son_check); // </value of tag_son>\n             writeEndTag(xmlw, tag_parent_check); //  </value of tag_parent>\n         }\n@@ -1564,7 +1536,6 @@ public class OpenAireExportUtil {\n         for (Map.Entry<String, String> entry : map.entrySet()) {\n             String map_key = entry.getKey();\n             String map_value = entry.getValue();\n-\n             if (StringUtils.isNotBlank(map_key) && StringUtils.isNotBlank(map_value)) {\n                 xmlw.writeAttribute(map_key, map_value);\n             }\n@@ -1592,6 +1563,7 @@ public class OpenAireExportUtil {\n      * @param email\n      * @return true/false\n      */\n+\n     private static boolean isValidEmailAddress(String email) {\n         boolean result = true;\n         try {\n@@ -1602,4 +1574,5 @@ public class OpenAireExportUtil {\n         }\n         return result;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 208
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1285",
                    "column": "25",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/92/OpenAireExportUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/92/OpenAireExportUtil.java\nindex fe0c15969ca..0b2fbff01a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/92/OpenAireExportUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/92/OpenAireExportUtil.java\n@@ -290,7 +290,7 @@ public class OpenAireExportUtil {\n                                 } else {\n                                     String givenName = FirstNames.getInstance().getFirstName(creatorName);\n                                     boolean isOrganization = Organizations.getInstance().isOrganization(creatorName);\n-                                    \n+\n                                     if (givenName != null && !isOrganization) {\n                                         // givenName ok, creatorName=<FirstName> <FamilyName>\n                                         creator_map.put(\"nameType\", \"Personal\");\n@@ -1340,7 +1340,7 @@ public class OpenAireExportUtil {\n         // write geoLocations\n         geoLocations_check = writeOpenTag(xmlw, \"geoLocations\", geoLocations_check);\n         writeGeolocationPlace(xmlw, geoLocationPlace, language);\n-                \n+\n         // get DatasetFieldConstant.geographicBoundingBox\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             MetadataBlockDTO value = entry.getValue();\n@@ -1373,14 +1373,14 @@ public class OpenAireExportUtil {\n      */\n     public static void writeGeolocationPlace(XMLStreamWriter xmlw, String geoLocationPlace, String language) throws XMLStreamException {\n         boolean geoLocation_check = false;\n-        \n+\n         if (StringUtils.isNotBlank(geoLocationPlace)) {\n             geoLocation_check = writeOpenTag(xmlw, \"geoLocation\", geoLocation_check);\n             writeFullElement(xmlw, null, \"geoLocationPlace\", null, geoLocationPlace, language);\n         }\n         writeEndTag(xmlw, geoLocation_check);\n     }\n-    \n+\n     /**\n      * 18 GeoLocation (R)\n      *\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1285",
                    "column": "25",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/92/OpenAireExportUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/92/OpenAireExportUtil.java\nindex fe0c15969ca..0b2fbff01a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/92/OpenAireExportUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/92/OpenAireExportUtil.java\n@@ -290,7 +290,7 @@ public class OpenAireExportUtil {\n                                 } else {\n                                     String givenName = FirstNames.getInstance().getFirstName(creatorName);\n                                     boolean isOrganization = Organizations.getInstance().isOrganization(creatorName);\n-                                    \n+\n                                     if (givenName != null && !isOrganization) {\n                                         // givenName ok, creatorName=<FirstName> <FamilyName>\n                                         creator_map.put(\"nameType\", \"Personal\");\n@@ -1340,7 +1340,7 @@ public class OpenAireExportUtil {\n         // write geoLocations\n         geoLocations_check = writeOpenTag(xmlw, \"geoLocations\", geoLocations_check);\n         writeGeolocationPlace(xmlw, geoLocationPlace, language);\n-                \n+\n         // get DatasetFieldConstant.geographicBoundingBox\n         for (Map.Entry<String, MetadataBlockDTO> entry : datasetVersionDTO.getMetadataBlocks().entrySet()) {\n             MetadataBlockDTO value = entry.getValue();\n@@ -1373,14 +1373,14 @@ public class OpenAireExportUtil {\n      */\n     public static void writeGeolocationPlace(XMLStreamWriter xmlw, String geoLocationPlace, String language) throws XMLStreamException {\n         boolean geoLocation_check = false;\n-        \n+\n         if (StringUtils.isNotBlank(geoLocationPlace)) {\n             geoLocation_check = writeOpenTag(xmlw, \"geoLocation\", geoLocation_check);\n             writeFullElement(xmlw, null, \"geoLocationPlace\", null, geoLocationPlace, language);\n         }\n         writeEndTag(xmlw, geoLocation_check);\n     }\n-    \n+\n     /**\n      * 18 GeoLocation (R)\n      *\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}