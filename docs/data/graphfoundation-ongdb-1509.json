{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1509",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1509/RelationshipCountsProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1509/RelationshipCountsProcessor.java\nindex 4e7abacc746..8d6fbae1084 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1509/RelationshipCountsProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1509/RelationshipCountsProcessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport;\n \n import org.neo4j.kernel.api.StatementConstants;\n@@ -31,148 +32,148 @@ import org.neo4j.unsafe.impl.batchimport.cache.NumberArrayFactory;\n  */\n public class RelationshipCountsProcessor implements RecordProcessor<RelationshipRecord>\n {\n-    private final NodeLabelsCache nodeLabelCache;\n-    private final LongArray labelsCounts;\n-    private final LongArray wildcardCounts;\n-\n-    // and grows on demand\n-    private int[] startScratch = new int[20];\n-    private int[] endScratch = new int[20];\n-    private final CountsAccessor.Updater countsUpdater;\n-    private final long anyLabel;\n-    private final long anyRelationshipType;\n-    private final NodeLabelsCache.Client client;\n-    private final long itemsPerLabel;\n-    private final long itemsPerType;\n-\n-    private static final int START = 0;\n-    private static final int END = 1;\n-    private static final int SIDES = 2;\n-\n-    public RelationshipCountsProcessor( NodeLabelsCache nodeLabelCache,\n-            int highLabelId, int highRelationshipTypeId, CountsAccessor.Updater countsUpdater,\n-            NumberArrayFactory cacheFactory )\n+  private final NodeLabelsCache nodeLabelCache;\n+  private final LongArray labelsCounts;\n+  private final LongArray wildcardCounts;\n+\n+  // and grows on demand\n+  private int[] startScratch = new int[20];\n+  private int[] endScratch = new int[20];\n+  private final CountsAccessor.Updater countsUpdater;\n+  private final long anyLabel;\n+  private final long anyRelationshipType;\n+  private final NodeLabelsCache.Client client;\n+  private final long itemsPerLabel;\n+  private final long itemsPerType;\n+\n+  private static final int START = 0;\n+  private static final int END = 1;\n+  private static final int SIDES = 2;\n+\n+  public RelationshipCountsProcessor(NodeLabelsCache nodeLabelCache,\n+                                     int highLabelId, int highRelationshipTypeId, CountsAccessor.Updater countsUpdater,\n+                                     NumberArrayFactory cacheFactory)\n+  {\n+    this.nodeLabelCache = nodeLabelCache;\n+    this.client = nodeLabelCache.newClient();\n+    this.countsUpdater = countsUpdater;\n+\n+    // Make room for high id + 1 since we need that extra slot for the ANY counts\n+    this.anyLabel = highLabelId;\n+    this.anyRelationshipType = highRelationshipTypeId;\n+    this.itemsPerType = anyLabel + 1;\n+    this.itemsPerLabel = anyRelationshipType + 1;\n+    this.labelsCounts = cacheFactory.newLongArray(sideSize() * SIDES, 0);\n+    this.wildcardCounts = cacheFactory.newLongArray(anyRelationshipType + 1, 0);\n+  }\n+\n+  static long calculateMemoryUsage(int highLabelId, int highRelationshipTypeId)\n+  {\n+    int labels = highLabelId + 1;\n+    int types = highRelationshipTypeId + 1;\n+    long labelsCountsUsage = labels * types * SIDES * Long.BYTES;\n+    long wildcardCountsUsage = types * Long.BYTES;\n+    return labelsCountsUsage + wildcardCountsUsage;\n+  }\n+\n+  @Override\n+  public boolean process(RelationshipRecord record)\n+  {\n+    // Below is logic duplication of CountsState#addRelationship\n+    int type = record.getType();\n+    increment(wildcardCounts, anyRelationshipType);\n+    increment(wildcardCounts, type);\n+    startScratch = nodeLabelCache.get(client, record.getFirstNode(), startScratch);\n+    for (int startNodeLabelId : startScratch)\n     {\n-        this.nodeLabelCache = nodeLabelCache;\n-        this.client = nodeLabelCache.newClient();\n-        this.countsUpdater = countsUpdater;\n-\n-        // Make room for high id + 1 since we need that extra slot for the ANY counts\n-        this.anyLabel = highLabelId;\n-        this.anyRelationshipType = highRelationshipTypeId;\n-        this.itemsPerType = anyLabel + 1;\n-        this.itemsPerLabel = anyRelationshipType + 1;\n-        this.labelsCounts = cacheFactory.newLongArray( sideSize() * SIDES, 0 );\n-        this.wildcardCounts = cacheFactory.newLongArray( anyRelationshipType + 1, 0 );\n-    }\n+      if (startNodeLabelId == -1)\n+      {   // We reached the end of it\n+        break;\n+      }\n \n-    static long calculateMemoryUsage( int highLabelId, int highRelationshipTypeId )\n-    {\n-        int labels = highLabelId + 1;\n-        int types = highRelationshipTypeId + 1;\n-        long labelsCountsUsage = labels * types * SIDES * Long.BYTES;\n-        long wildcardCountsUsage = types * Long.BYTES;\n-        return labelsCountsUsage + wildcardCountsUsage;\n+      increment(labelsCounts, startNodeLabelId, anyRelationshipType, START);\n+      increment(labelsCounts, startNodeLabelId, type, START);\n     }\n-\n-    @Override\n-    public boolean process( RelationshipRecord record )\n+    endScratch = nodeLabelCache.get(client, record.getSecondNode(), endScratch);\n+    for (int endNodeLabelId : endScratch)\n     {\n-        // Below is logic duplication of CountsState#addRelationship\n-        int type = record.getType();\n-        increment( wildcardCounts, anyRelationshipType );\n-        increment( wildcardCounts, type );\n-        startScratch = nodeLabelCache.get( client, record.getFirstNode(), startScratch );\n-        for ( int startNodeLabelId : startScratch )\n-        {\n-            if ( startNodeLabelId == -1 )\n-            {   // We reached the end of it\n-                break;\n-            }\n-\n-            increment( labelsCounts, startNodeLabelId, anyRelationshipType, START );\n-            increment( labelsCounts, startNodeLabelId, type, START );\n-        }\n-        endScratch = nodeLabelCache.get( client, record.getSecondNode(), endScratch );\n-        for ( int endNodeLabelId : endScratch )\n-        {\n-            if ( endNodeLabelId == -1 )\n-            {   // We reached the end of it\n-                break;\n-            }\n-\n-            increment( labelsCounts, endNodeLabelId, anyRelationshipType, END );\n-            increment( labelsCounts, endNodeLabelId, type, END );\n-        }\n-        return false;\n-    }\n+      if (endNodeLabelId == -1)\n+      {   // We reached the end of it\n+        break;\n+      }\n \n-    @Override\n-    public void done()\n-    {\n-        for ( int wildcardType = 0; wildcardType <= anyRelationshipType; wildcardType++ )\n-        {\n-            int type = wildcardType == anyRelationshipType ? StatementConstants.ANY_RELATIONSHIP_TYPE : wildcardType;\n-            long count = wildcardCounts.get( wildcardType );\n-            countsUpdater.incrementRelationshipCount(\n-                    StatementConstants.ANY_LABEL, type, StatementConstants.ANY_LABEL, count );\n-        }\n-\n-        for ( int labelId = 0; labelId < anyLabel; labelId++ )\n-        {\n-            for ( int typeId = 0; typeId <= anyRelationshipType; typeId++ )\n-            {\n-\n-                long startCount = labelsCounts.get( arrayIndex( labelId, typeId, START ) );\n-                long endCount = labelsCounts.get( arrayIndex( labelId, typeId, END ) );\n-                int type = typeId == anyRelationshipType ? StatementConstants.ANY_RELATIONSHIP_TYPE : typeId;\n-\n-                countsUpdater.incrementRelationshipCount( labelId, type, StatementConstants.ANY_LABEL, startCount );\n-                countsUpdater.incrementRelationshipCount( StatementConstants.ANY_LABEL, type, labelId, endCount );\n-            }\n-        }\n+      increment(labelsCounts, endNodeLabelId, anyRelationshipType, END);\n+      increment(labelsCounts, endNodeLabelId, type, END);\n     }\n+    return false;\n+  }\n \n-    @Override\n-    public void close()\n+  @Override\n+  public void done()\n+  {\n+    for (int wildcardType = 0; wildcardType <= anyRelationshipType; wildcardType++)\n     {\n-        labelsCounts.close();\n-        wildcardCounts.close();\n+      int type = wildcardType == anyRelationshipType ? StatementConstants.ANY_RELATIONSHIP_TYPE : wildcardType;\n+      long count = wildcardCounts.get(wildcardType);\n+      countsUpdater.incrementRelationshipCount(\n+          StatementConstants.ANY_LABEL, type, StatementConstants.ANY_LABEL, count);\n     }\n \n-    public void addCountsFrom( RelationshipCountsProcessor from )\n+    for (int labelId = 0; labelId < anyLabel; labelId++)\n     {\n-        mergeCounts( labelsCounts, from.labelsCounts );\n-        mergeCounts( wildcardCounts, from.wildcardCounts );\n-    }\n+      for (int typeId = 0; typeId <= anyRelationshipType; typeId++)\n+      {\n \n-    private void mergeCounts( LongArray destination, LongArray part )\n-    {\n-        long length = destination.length();\n-        for ( long i = 0; i < length; i++ )\n-        {\n-            destination.set( i, destination.get( i ) + part.get( i ) );\n-        }\n-    }\n+        long startCount = labelsCounts.get(arrayIndex(labelId, typeId, START));\n+        long endCount = labelsCounts.get(arrayIndex(labelId, typeId, END));\n+        int type = typeId == anyRelationshipType ? StatementConstants.ANY_RELATIONSHIP_TYPE : typeId;\n \n-    private long arrayIndex( long labelId, long relationshipTypeId, long side )\n-    {\n-        return (side * sideSize()) + (labelId * itemsPerLabel + relationshipTypeId);\n-    }\n-\n-    private long sideSize()\n-    {\n-        return itemsPerType * itemsPerLabel;\n+        countsUpdater.incrementRelationshipCount(labelId, type, StatementConstants.ANY_LABEL, startCount);\n+        countsUpdater.incrementRelationshipCount(StatementConstants.ANY_LABEL, type, labelId, endCount);\n+      }\n     }\n-\n-    private void increment( LongArray counts, long labelId, long relationshipTypeId, long side )\n-    {\n-        long index = arrayIndex( labelId, relationshipTypeId, side );\n-        increment( counts, index );\n-    }\n-\n-    private void increment( LongArray counts, long index )\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    labelsCounts.close();\n+    wildcardCounts.close();\n+  }\n+\n+  public void addCountsFrom(RelationshipCountsProcessor from)\n+  {\n+    mergeCounts(labelsCounts, from.labelsCounts);\n+    mergeCounts(wildcardCounts, from.wildcardCounts);\n+  }\n+\n+  private void mergeCounts(LongArray destination, LongArray part)\n+  {\n+    long length = destination.length();\n+    for (long i = 0; i < length; i++)\n     {\n-        counts.set( index, counts.get( index ) + 1 );\n+      destination.set(i, destination.get(i) + part.get(i));\n     }\n+  }\n+\n+  private long arrayIndex(long labelId, long relationshipTypeId, long side)\n+  {\n+    return (side * sideSize()) + (labelId * itemsPerLabel + relationshipTypeId);\n+  }\n+\n+  private long sideSize()\n+  {\n+    return itemsPerType * itemsPerLabel;\n+  }\n+\n+  private void increment(LongArray counts, long labelId, long relationshipTypeId, long side)\n+  {\n+    long index = arrayIndex(labelId, relationshipTypeId, side);\n+    increment(counts, index);\n+  }\n+\n+  private void increment(LongArray counts, long index)\n+  {\n+    counts.set(index, counts.get(index) + 1);\n+  }\n }\n",
            "diff_size": 200
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1509/RelationshipCountsProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1509/RelationshipCountsProcessor.java\nindex 4e7abacc746..affb5314f0c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1509/RelationshipCountsProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1509/RelationshipCountsProcessor.java\n@@ -49,8 +49,7 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n     private static final int END = 1;\n     private static final int SIDES = 2;\n \n-    public RelationshipCountsProcessor( NodeLabelsCache nodeLabelCache,\n-            int highLabelId, int highRelationshipTypeId, CountsAccessor.Updater countsUpdater,\n+    public RelationshipCountsProcessor( NodeLabelsCache nodeLabelCache, int highLabelId, int highRelationshipTypeId, CountsAccessor.Updater countsUpdater,\n             NumberArrayFactory cacheFactory )\n     {\n         this.nodeLabelCache = nodeLabelCache;\n@@ -86,18 +85,21 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n         for ( int startNodeLabelId : startScratch )\n         {\n             if ( startNodeLabelId == -1 )\n-            {   // We reached the end of it\n+            {\n+    // We reached the end of it\n                 break;\n             }\n \n             increment( labelsCounts, startNodeLabelId, anyRelationshipType, START );\n             increment( labelsCounts, startNodeLabelId, type, START );\n         }\n-        endScratch = nodeLabelCache.get( client, record.getSecondNode(), endScratch );\n+\n+endScratch = nodeLabelCache.get( client, record.getSecondNode(), endScratch );\n         for ( int endNodeLabelId : endScratch )\n         {\n             if ( endNodeLabelId == -1 )\n-            {   // We reached the end of it\n+            {\n+    // We reached the end of it\n                 break;\n             }\n \n@@ -114,16 +116,14 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n         {\n             int type = wildcardType == anyRelationshipType ? StatementConstants.ANY_RELATIONSHIP_TYPE : wildcardType;\n             long count = wildcardCounts.get( wildcardType );\n-            countsUpdater.incrementRelationshipCount(\n-                    StatementConstants.ANY_LABEL, type, StatementConstants.ANY_LABEL, count );\n+            countsUpdater.incrementRelationshipCount( StatementConstants.ANY_LABEL, type, StatementConstants.ANY_LABEL, count );\n         }\n \n         for ( int labelId = 0; labelId < anyLabel; labelId++ )\n         {\n             for ( int typeId = 0; typeId <= anyRelationshipType; typeId++ )\n             {\n-\n-                long startCount = labelsCounts.get( arrayIndex( labelId, typeId, START ) );\n+    long startCount = labelsCounts.get( arrayIndex( labelId, typeId, START ) );\n                 long endCount = labelsCounts.get( arrayIndex( labelId, typeId, END ) );\n                 int type = typeId == anyRelationshipType ? StatementConstants.ANY_RELATIONSHIP_TYPE : typeId;\n \n@@ -157,7 +157,7 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n \n     private long arrayIndex( long labelId, long relationshipTypeId, long side )\n     {\n-        return (side * sideSize()) + (labelId * itemsPerLabel + relationshipTypeId);\n+        return ( side * sideSize()) + ( labelId * itemsPerLabel + relationshipTypeId);\n     }\n \n     private long sideSize()\n@@ -175,4 +175,4 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n     {\n         counts.set( index, counts.get( index ) + 1 );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "column": "66",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "40",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "47",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "54",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "72",
                    "column": "41",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "96",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "22",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "157",
                    "column": "47",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "28",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1509/RelationshipCountsProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1509/RelationshipCountsProcessor.java\nindex 4e7abacc746..576e6bb2ba6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1509/RelationshipCountsProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1509/RelationshipCountsProcessor.java\n@@ -29,6 +29,7 @@ import org.neo4j.unsafe.impl.batchimport.cache.NumberArrayFactory;\n /**\n  * Calculates counts as labelId --[type]--> labelId for relationships with the labels coming from its start/end nodes.\n  */\n+\n public class RelationshipCountsProcessor implements RecordProcessor<RelationshipRecord>\n {\n     private final NodeLabelsCache nodeLabelCache;\n@@ -44,14 +45,11 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n     private final NodeLabelsCache.Client client;\n     private final long itemsPerLabel;\n     private final long itemsPerType;\n-\n     private static final int START = 0;\n     private static final int END = 1;\n     private static final int SIDES = 2;\n \n-    public RelationshipCountsProcessor( NodeLabelsCache nodeLabelCache,\n-            int highLabelId, int highRelationshipTypeId, CountsAccessor.Updater countsUpdater,\n-            NumberArrayFactory cacheFactory )\n+    public RelationshipCountsProcessor( NodeLabelsCache nodeLabelCache, int highLabelId, int highRelationshipTypeId, CountsAccessor.Updater countsUpdater, NumberArrayFactory cacheFactory )\n     {\n         this.nodeLabelCache = nodeLabelCache;\n         this.client = nodeLabelCache.newClient();\n@@ -62,7 +60,7 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n         this.anyRelationshipType = highRelationshipTypeId;\n         this.itemsPerType = anyLabel + 1;\n         this.itemsPerLabel = anyRelationshipType + 1;\n-        this.labelsCounts = cacheFactory.newLongArray( sideSize() * SIDES, 0 );\n+        this.labelsCounts = cacheFactory.newLongArray( sideSize()* SIDES, 0 );\n         this.wildcardCounts = cacheFactory.newLongArray( anyRelationshipType + 1, 0 );\n     }\n \n@@ -70,8 +68,8 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n     {\n         int labels = highLabelId + 1;\n         int types = highRelationshipTypeId + 1;\n-        long labelsCountsUsage = labels * types * SIDES * Long.BYTES;\n-        long wildcardCountsUsage = types * Long.BYTES;\n+        long labelsCountsUsage = labels* types* SIDES* Long.BYTES;\n+        long wildcardCountsUsage = types* Long.BYTES;\n         return labelsCountsUsage + wildcardCountsUsage;\n     }\n \n@@ -83,9 +81,9 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n         increment( wildcardCounts, anyRelationshipType );\n         increment( wildcardCounts, type );\n         startScratch = nodeLabelCache.get( client, record.getFirstNode(), startScratch );\n-        for ( int startNodeLabelId : startScratch )\n+        for( int startNodeLabelId : startScratch)\n         {\n-            if ( startNodeLabelId == -1 )\n+            if ( startNodeLabelId == - 1 )\n             {   // We reached the end of it\n                 break;\n             }\n@@ -93,10 +91,11 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n             increment( labelsCounts, startNodeLabelId, anyRelationshipType, START );\n             increment( labelsCounts, startNodeLabelId, type, START );\n         }\n+\n         endScratch = nodeLabelCache.get( client, record.getSecondNode(), endScratch );\n-        for ( int endNodeLabelId : endScratch )\n+        for( int endNodeLabelId : endScratch)\n         {\n-            if ( endNodeLabelId == -1 )\n+            if ( endNodeLabelId == - 1 )\n             {   // We reached the end of it\n                 break;\n             }\n@@ -104,6 +103,7 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n             increment( labelsCounts, endNodeLabelId, anyRelationshipType, END );\n             increment( labelsCounts, endNodeLabelId, type, END );\n         }\n+\n         return false;\n     }\n \n@@ -114,19 +114,16 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n         {\n             int type = wildcardType == anyRelationshipType ? StatementConstants.ANY_RELATIONSHIP_TYPE : wildcardType;\n             long count = wildcardCounts.get( wildcardType );\n-            countsUpdater.incrementRelationshipCount(\n-                    StatementConstants.ANY_LABEL, type, StatementConstants.ANY_LABEL, count );\n+            countsUpdater.incrementRelationshipCount( StatementConstants.ANY_LABEL, type, StatementConstants.ANY_LABEL, count );\n         }\n \n         for ( int labelId = 0; labelId < anyLabel; labelId++ )\n         {\n             for ( int typeId = 0; typeId <= anyRelationshipType; typeId++ )\n             {\n-\n                 long startCount = labelsCounts.get( arrayIndex( labelId, typeId, START ) );\n                 long endCount = labelsCounts.get( arrayIndex( labelId, typeId, END ) );\n                 int type = typeId == anyRelationshipType ? StatementConstants.ANY_RELATIONSHIP_TYPE : typeId;\n-\n                 countsUpdater.incrementRelationshipCount( labelId, type, StatementConstants.ANY_LABEL, startCount );\n                 countsUpdater.incrementRelationshipCount( StatementConstants.ANY_LABEL, type, labelId, endCount );\n             }\n@@ -157,12 +154,12 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n \n     private long arrayIndex( long labelId, long relationshipTypeId, long side )\n     {\n-        return (side * sideSize()) + (labelId * itemsPerLabel + relationshipTypeId);\n+        return ( side* sideSize()) + ( labelId* itemsPerLabel + relationshipTypeId);\n     }\n \n     private long sideSize()\n     {\n-        return itemsPerType * itemsPerLabel;\n+        return itemsPerType* itemsPerLabel;\n     }\n \n     private void increment( LongArray counts, long labelId, long relationshipTypeId, long side )\n@@ -175,4 +172,4 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n     {\n         counts.set( index, counts.get( index ) + 1 );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}