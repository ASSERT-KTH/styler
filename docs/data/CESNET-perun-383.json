{
    "project_name": "CESNET-perun",
    "error_id": "383",
    "information": {
        "errors": [
            {
                "line": "427",
                "severity": "error",
                "message": "Space before tab.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t * @param filterExpiredMembers if true the method does not take expired members into account\n\t * @return attributes in special structure. The facility is in the root. Facility first children is abstract node which contains no attributes and it's children are all resources.\n\t * \t\t\t\tFacility second child is abstract node with no attribute and it's children are all users.\n\t *\n\t * @throws InternalErrorException\n\t */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "427",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/383/ServicesManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/383/ServicesManagerBl.java\nindex 604b70e3c01..41a1ca45c0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/383/ServicesManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/383/ServicesManagerBl.java\n@@ -37,843 +37,807 @@ import java.util.List;\n /**\n  * @author Michal Prochazka <michalp@ics.muni.cz>\n  * @author Slavek Licehammer <glory@ics.muni.cz>\n- *\n+ * <p>\n  * Note: ServicesManager is not to be used directly by any client.\n  * ServicesManager's functionality is going to be encapsulated in the Controller's\n  * GeneralServiceManager.\n- *\n  */\n public interface ServicesManagerBl {\n \n-\t/**\n-\t * Bans Service on facility.\n-\t * It wouldn't be possible to execute the given Service on the whole facility nor on any of its destinations.\n-\t *\n-\t * @param perunSession\n-\t * @param service The Service to be banned on the facility\n-\t * @param facility The facility on which we want to ban the Service\n-\t * @throws InternalErrorException\n-\t * @throws ServiceAlreadyBannedException\n-\t */\n-\tvoid blockServiceOnFacility(PerunSession perunSession, Service service, Facility facility) throws ServiceAlreadyBannedException;\n-\n-\t/**\n-\t * Bans Service on destination.\n-\t * It wouldn't be possible to execute the given Service on this destination, however,\n-\t * it still can be executed on all the other destinations in the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service The Service to be banned on this particular destination\n-\t * @param destinationId The destination on which we want to ban the Service\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid blockServiceOnDestination(PerunSession perunSession, Service service, int destinationId) throws PrivilegeException, DestinationNotExistsException, ServiceAlreadyBannedException;\n-\n-\t/**\n-\t * Block all services currently assigned on this facility.\n-\t * From this moment on, there are no Services being allowed on this facility.\n-\t * If you assign a new service to the facility, it will be allowed!\n-\t *\n-\t * @param perunSession\n-\t * @param facility Facility we want to block all services on.\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid blockAllServicesOnFacility(PerunSession perunSession, Facility facility) throws FacilityNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Block all services currently assigned on this destination.\n-\t * From this moment on, there are no Services being allowed on this destination.\n-\t * If you assign a new service to the destination, it will be allowed!\n-\t *\n-\t * @param perunSession\n-\t * @param destinationId The id of a destination we want to block all services on.\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid blockAllServicesOnDestination(PerunSession perunSession, int destinationId) throws PrivilegeException, DestinationNotExistsException;\n-\n-\t/**\n-\t * List all the Services that are banned on this facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return a list of Services that are denied on the facility\n-\t *\n-\t */\n-\tList<Service> getServicesBlockedOnFacility(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * List all the Services that are banned on this destination.\n-\t *\n-\t * @param perunSession\n-\t * @param destinationId\n-\t * @return a list of Services that are denied on the destination\n-\t *\n-\t */\n-\tList<Service> getServicesBlockedOnDestination(PerunSession perunSession, int destinationId);\n-\n-\t/**\n-\t * Is this Service denied on the facility?\n-\t *\n-\t * @param service The Service, the denial of which we want to examine\n-\t * @param facility The facility on which we want to look up the denial of the Service\n-\t * @return true - in case the Service is denied on the facility false - in\n-\t *         case the Service in NOT denied on the facility\n-\t */\n-\tboolean isServiceBlockedOnFacility(Service service, Facility facility);\n-\n-\t/**\n-\t * Is this Service denied on the destination?\n-\t *\n-\t * @param service The Service, the denial of which we want to examine\n-\t * @param destinationId The destination on which we want to look up the denial of the Service\n-\t * @return true - in case the Service is denied on the destination false - in case\n-\t *         the Service in NOT denied on the destination\n-\t */\n-\tboolean isServiceBlockedOnDestination(Service service, int destinationId);\n-\n-\t/**\n-\t * Erase all the possible denials on this facility.\n-\t * From this moment on, there are no Services being denied on this facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility Facility we want to clear of all the denials.\n-\t *\n-\t */\n-\tvoid unblockAllServicesOnFacility(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Erase all the possible denials on destinations defined by the destinationName.\n-\t * From this moment on, there are no Services being denied on these destinations.\n-\t *\n-\t * @param sess\n-\t * @param destinationName The name of destinations we want to clear of all the denials.\n-\t */\n-\tvoid unblockAllServicesOnDestination(PerunSession sess, String destinationName);\n-\n-\t/**\n-\t * Erase all the possible denials on this destination.\n-\t * From this moment on, there are no Services being denied on this destination.\n-\t *\n-\t * @param perunSession\n-\t * @param destinationId The id of a destination we want to clear of all the denials.\n-\t *\n-\t */\n-\tvoid unblockAllServicesOnDestination(PerunSession perunSession, int destinationId);\n-\n-\t/**\n-\t * Free the denial of the Service on this facility.\n-\t * If the Service was banned on this facility, it will be freed.\n-\t * In case the Service was not banned on this facility, nothing will happen.\n-\t *\n-\t * @param perunSession\n-\t * @param service The Service, the denial of which we want to free on this facility.\n-\t * @param facility The facility on which we want to free the denial of the Service.\n-\t *\n-\t */\n-\tvoid unblockServiceOnFacility(PerunSession perunSession, Service service, Facility facility);\n-\n-\t/**\n-\t * Free the denial of the Service on this destination.\n-\t * If the Service was banned on this destination, it will be freed.\n-\t * In case the Service was not banned on this destination, nothing will happen.\n-\t *\n-\t * @param perunSession\n-\t * @param service The Service, the denial of which we want to free on this destination.\n-\t * @param destinationId The id of a destination on which we want to free the denial of the Service.\n-\t *\n-\t */\n-\tvoid unblockServiceOnDestination(PerunSession perunSession, Service service, int destinationId);\n-\n-\t/**\n-\t * Forces service propagation on defined facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @return true if it is possible, false if not\n-\t *\n-\t */\n-\tboolean forceServicePropagation(PerunSession perunSession, Facility facility, Service service);\n-\n-\t/**\n-\t * Forces service propagation on all facilities where the service is defined on.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return true if it is possible, false if not\n-\t *\n-\t */\n-\tboolean forceServicePropagation(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Plans service propagation on defined facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @param service\n-\t * @return true if it is possible, false if not\n-\t *\n-\t */\n-\tboolean planServicePropagation(PerunSession perunSession, Facility facility, Service service);\n-\n-\t/**\n-\t * Forces service propagation on all facilities where the service is defined on.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return true if it is possible, false if not\n-\t *\n-\t */\n-\tboolean planServicePropagation(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n-\t * 1 - allowed / 0 - service is denied).\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return list of assigned services with allowed property\n-\t *\n-\t * @throws PrivilegeException\n-\t * @throws FacilityNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tList<ServiceForGUI> getFacilityAssignedServicesForGUI(PerunSession perunSession, Facility facility) throws PrivilegeException, FacilityNotExistsException;\n-\n-\t/**\n-\t * Creates new service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return new service\n-\t */\n-\tService createService(PerunSession perunSession, Service service) throws ServiceExistsException;\n-\n-\t/** Deletes the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param forceFlag if set to true, removes the service with all dependendant objects from db instead of raising exception\n-\t * @throws RelationExistsException\n-\t * @throws InternalErrorException\n-\t * @throws ServiceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid deleteService(PerunSession perunSession, Service service, boolean forceFlag) throws RelationExistsException, ServiceAlreadyRemovedException;\n-\n-\t/** Updates the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t */\n-\tvoid updateService(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Get service by id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return service with specified id\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tService getServiceById(PerunSession perunSession, int id) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * Get service by name.\n-\t *\n-\t * @param perunSession\n-\t * @param name name of the service\n-\t * @return service with specified name\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotExistsException\n-\t */\n-\tService getServiceByName(PerunSession perunSession, String name) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * get all services in perun\n-\t *\n-\t * @param perunSession\n-\t * @return all services in perun\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Service> getServices(PerunSession perunSession);\n-\n-\t/**\n-\t * Get all services with given attribute.\n-\t *\n-\t * @param sess perun session\n-\t * @param attributeDefinition\n-\t * @return all services with given attribute\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition);\n-\n-\t/**\n-\t * Get all resources where the service is defined.\n-\t *\n-\t * @param sess\n-\t * @param service\n-\t * @return list of resources where the service is defined\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Service service);\n-\n-\t/**\n-\t * Generates the list of attributes per each member associated with the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param service attributes required by this service you will get\n-\t * @param facility you will get attributes for this facility, resources associated with it and members assigned to the resources\n-\t * @param filterExpiredMembers if true the method does not take expired members into account\n-\t * @return attributes in special structure. Facility is in the root, facility children are resources. And resource children are members.\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tServiceAttributes getHierarchicalData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n-\n-\t/**\n-\t * Generates hashed hierarchical data structure for given service and resource.\n-\t *\n-\t * attributes: {...hashes...}\n-\t * hierarchy: {\n-\t *   \"1\": {    ** facility id **\n-\t *     members: {    ** all members on the facility **\n-\t *        \"4\" : 5,    ** member id : user id **\n-\t *        \"6\" : 7,    ** member id : user id **\n-\t *       ...\n-\t *     }\n-\t *     children: [\n-\t *       \"2\": {    ** resource id **\n-\t *         children: [],\n-\t *         voId: 99,\n-\t *         members: {    ** all members on the resource with id 2 **\n-\t *           \"4\" : 5    ** member id : user id **\n-\t *         }\n-\t *       },\n-\t *       \"3\": {\n-\t *         ...\n-\t *       }\n-\t *     ]\n-\t *   }\n-\t * }\n-\t *\n-\t * @param perunSession perun session\n-\t * @param service service\n-\t * @param facility facility\n-\t * @param filterExpiredMembers if the generator should filter expired members\n-\t * @return generated hashed data structure\n-\t */\n-\tHashedGenData getHashedHierarchicalData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n-\n-\t/**\n-\t * Generates hashed data with group structure for given service and resource.\n-\t *\n-\t * Generates data in format:\n-\t *\n-\t * attributes: {...hashes...}\n-\t * hierarchy: {\n-\t *   \"1\": {    ** facility id **\n-\t *     members: {    ** all members on the facility **\n-\t *        \"4\" : 5,    ** member id : user id **\n-\t *        \"6\" : 7,    ** member id : user id **\n-\t *       ...\n-\t *     }\n-\t *     children: [\n-\t *       \"2\": {    ** resource id **\n-\t *         voId: 99,\n-\t *         children: [\n-\t *           \"89\": {    ** group id **\n-\t *              \"children\": {},\n-\t *              \"members\": {\n-\t *                  \"91328\": 57986,\n-\t *                  \"91330\": 60838\n-\t *              }\n-\t *           }\n-\t *         ],\n-\t *         \"members\": {    ** all members on the resource with id 2 **\n-\t *             \"91328\": 57986,\n-\t *             \"91330\": 60838\n-\t *         }\n-\t *       },\n-\t *       \"3\": {\n-\t *         ...\n-\t *       }\n-\t *     ]\n-\t *   }\n-\t * }\n-\t *\n-\t * @param perunSession perun session\n-\t * @param service service\n-\t * @param facility facility\n-\t * @param filterExpiredMembers if the generator should filter expired members\n-\t * @return generated hashed data structure\n-\t */\n-\tHashedGenData getHashedDataWithGroups(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n-\n-\t/**\n-\t * Generates the list of attributes per each resource associated with the facility and filtered by service. Next it generates list of attributes\n-\t * associated with the facility and service.\n-\t *\n-\t * @param perunSession\n-\t * @param service you will get attributes required by this service\n-\t * @param facility you will get attributes for this facility, resources associated with it and users assigned to the resources\n-\t * @param filterExpiredMembers if true the method does not take expired members into account\n-\t * @return attributes in special structure. The facility is in the root. Facility first children is abstract node which contains no attributes and it's children are all resources.\n-\t * \t\t\t\tFacility second child is abstract node with no attribute and it's children are all users.\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tServiceAttributes getFlatData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n-\n-\t/**\n-\t * Generates the list of attributes per each member associated with the resources and groups.\n-\t *\n-\t * Generate also vo-required attributes for service. Add them to the same structure like resource-required attributes.\n-\t *\n-\t * @param perunSession\n-\t * @param service attributes required by this service you will get\n-\t * @param facility you will get attributes for this facility, resources associated with it and members assigned to the resources\n-\t * @param filterExpiredMembers if true the method does not take expired members into account\n-\t * @return attributes in special structure. Facility is in the root, facility children are resources.\n-\t *         Resource first child is abstract structure which children are groups.\n-\t *         Resource  second child is abstract structure which children are members.\n-\t *         Group first child is empty structure (services expect members to be second child, here used to be subgroups).\n-\t *         Group second child is abstract structure which children are members.\n-\t */\n-\tServiceAttributes getDataWithGroups(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n-\t/**\n-\t * Generates the list of attributes per each member associated with the resources and groups.\n-\t *\n-\t * @param perunSession\n-\t * @param service attributes required by this service you will get\n-\t * @param facility you will get attributes for this facility, resources associated with it and members assigned to the resources\n-\t * @param filterExpiredMembers if true the method does not take expired members into account\n-\t * @return attributes in special structure. Facility is in the root, facility children are resources.\n-\t *         Resource first child is abstract structure which children are groups.\n-\t *         Resource  second chi is abstract structure which children are members.\n-\t *         Group first child is abstract structure which children are groups.\n-\t *         Group second chi is abstract structure which children are members.\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t */\n-\tServiceAttributes getDataWithVos(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers) throws VoNotExistsException;\n-\n-\t/**\n-\t * List packages\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return list of packages in the DB\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<ServicesPackage> getServicesPackages(PerunSession perunSession);\n-\n-\t/**\n-\t * Get package by Id\n-\t *\n-\t * @param servicesPackageId id of the package we want to retrieve\n-\t * @param perunSession\n-\t *\n-\t * @return package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tServicesPackage getServicesPackageById(PerunSession perunSession, int servicesPackageId) throws ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Get package by name\n-\t *\n-\t * @param name name of the services package\n-\t * @param perunSession\n-\t *\n-\t * @return package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tServicesPackage getServicesPackageByName(PerunSession perunSession, String name) throws ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Insert a new package\n-\t *\n-\t * @param servicesPackage package to be inserted\n-\t * @param perunSession\n-\t *\n-\t * @return ServicesPackage object completely filled (including Id)\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageExistsException\n-\t */\n-\tServicesPackage createServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage) throws ServicesPackageExistsException;\n-\n-\t/**\n-\t * Update package\n-\t *\n-\t * @param servicesPackage with which is the old one supposed to be updated :-)\n-\t * @param perunSession\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid updateServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/**\n-\t * Remove the package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package to be removed.\n-\t * @throws RelationExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid deleteServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage) throws RelationExistsException;\n-\n-\t/**\n-\t * Add the service to the package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package to which the service supposed to be added\n-\t * @param service service to be added to the services package\n-\t *\n-\t * @throws ServiceAlreadyAssignedException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid addServiceToServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyAssignedException;\n-\t/**\n-\t * Remove Service from Services Package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package from which the service supposed to be removed\n-\t * @param service service that will be removed from the services package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from servicePackage in DB\n-\t */\n-\tvoid removeServiceFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyRemovedFromServicePackageException;\n-\n-\t/**\n-\t * List services stored in the packages\n-\t *\n-\t * @param servicesPackage the package from which we want to list the services\n-\t *\n-\t * @return list consisting services\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Service> getServicesFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+    /**\n+     * Bans Service on facility.\n+     * It wouldn't be possible to execute the given Service on the whole facility nor on any of its destinations.\n+     *\n+     * @param perunSession\n+     * @param service      The Service to be banned on the facility\n+     * @param facility     The facility on which we want to ban the Service\n+     * @throws InternalErrorException\n+     * @throws ServiceAlreadyBannedException\n+     */\n+    void blockServiceOnFacility(PerunSession perunSession, Service service, Facility facility) throws ServiceAlreadyBannedException;\n+\n+    /**\n+     * Bans Service on destination.\n+     * It wouldn't be possible to execute the given Service on this destination, however,\n+     * it still can be executed on all the other destinations in the facility.\n+     *\n+     * @param perunSession\n+     * @param service       The Service to be banned on this particular destination\n+     * @param destinationId The destination on which we want to ban the Service\n+     * @throws InternalErrorException\n+     */\n+    void blockServiceOnDestination(PerunSession perunSession, Service service, int destinationId) throws PrivilegeException, DestinationNotExistsException, ServiceAlreadyBannedException;\n+\n+    /**\n+     * Block all services currently assigned on this facility.\n+     * From this moment on, there are no Services being allowed on this facility.\n+     * If you assign a new service to the facility, it will be allowed!\n+     *\n+     * @param perunSession\n+     * @param facility     Facility we want to block all services on.\n+     * @throws InternalErrorException\n+     */\n+    void blockAllServicesOnFacility(PerunSession perunSession, Facility facility) throws FacilityNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Block all services currently assigned on this destination.\n+     * From this moment on, there are no Services being allowed on this destination.\n+     * If you assign a new service to the destination, it will be allowed!\n+     *\n+     * @param perunSession\n+     * @param destinationId The id of a destination we want to block all services on.\n+     * @throws InternalErrorException\n+     */\n+    void blockAllServicesOnDestination(PerunSession perunSession, int destinationId) throws PrivilegeException, DestinationNotExistsException;\n+\n+    /**\n+     * List all the Services that are banned on this facility.\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @return a list of Services that are denied on the facility\n+     */\n+    List<Service> getServicesBlockedOnFacility(PerunSession perunSession, Facility facility);\n+\n+    /**\n+     * List all the Services that are banned on this destination.\n+     *\n+     * @param perunSession\n+     * @param destinationId\n+     * @return a list of Services that are denied on the destination\n+     */\n+    List<Service> getServicesBlockedOnDestination(PerunSession perunSession, int destinationId);\n+\n+    /**\n+     * Is this Service denied on the facility?\n+     *\n+     * @param service  The Service, the denial of which we want to examine\n+     * @param facility The facility on which we want to look up the denial of the Service\n+     * @return true - in case the Service is denied on the facility false - in\n+     * case the Service in NOT denied on the facility\n+     */\n+    boolean isServiceBlockedOnFacility(Service service, Facility facility);\n+\n+    /**\n+     * Is this Service denied on the destination?\n+     *\n+     * @param service       The Service, the denial of which we want to examine\n+     * @param destinationId The destination on which we want to look up the denial of the Service\n+     * @return true - in case the Service is denied on the destination false - in case\n+     * the Service in NOT denied on the destination\n+     */\n+    boolean isServiceBlockedOnDestination(Service service, int destinationId);\n+\n+    /**\n+     * Erase all the possible denials on this facility.\n+     * From this moment on, there are no Services being denied on this facility.\n+     *\n+     * @param perunSession\n+     * @param facility     Facility we want to clear of all the denials.\n+     */\n+    void unblockAllServicesOnFacility(PerunSession perunSession, Facility facility);\n+\n+    /**\n+     * Erase all the possible denials on destinations defined by the destinationName.\n+     * From this moment on, there are no Services being denied on these destinations.\n+     *\n+     * @param sess\n+     * @param destinationName The name of destinations we want to clear of all the denials.\n+     */\n+    void unblockAllServicesOnDestination(PerunSession sess, String destinationName);\n+\n+    /**\n+     * Erase all the possible denials on this destination.\n+     * From this moment on, there are no Services being denied on this destination.\n+     *\n+     * @param perunSession\n+     * @param destinationId The id of a destination we want to clear of all the denials.\n+     */\n+    void unblockAllServicesOnDestination(PerunSession perunSession, int destinationId);\n+\n+    /**\n+     * Free the denial of the Service on this facility.\n+     * If the Service was banned on this facility, it will be freed.\n+     * In case the Service was not banned on this facility, nothing will happen.\n+     *\n+     * @param perunSession\n+     * @param service      The Service, the denial of which we want to free on this facility.\n+     * @param facility     The facility on which we want to free the denial of the Service.\n+     */\n+    void unblockServiceOnFacility(PerunSession perunSession, Service service, Facility facility);\n+\n+    /**\n+     * Free the denial of the Service on this destination.\n+     * If the Service was banned on this destination, it will be freed.\n+     * In case the Service was not banned on this destination, nothing will happen.\n+     *\n+     * @param perunSession\n+     * @param service       The Service, the denial of which we want to free on this destination.\n+     * @param destinationId The id of a destination on which we want to free the denial of the Service.\n+     */\n+    void unblockServiceOnDestination(PerunSession perunSession, Service service, int destinationId);\n+\n+    /**\n+     * Forces service propagation on defined facility.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param facility\n+     * @return true if it is possible, false if not\n+     */\n+    boolean forceServicePropagation(PerunSession perunSession, Facility facility, Service service);\n+\n+    /**\n+     * Forces service propagation on all facilities where the service is defined on.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @return true if it is possible, false if not\n+     */\n+    boolean forceServicePropagation(PerunSession perunSession, Service service);\n+\n+    /**\n+     * Plans service propagation on defined facility.\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @param service\n+     * @return true if it is possible, false if not\n+     */\n+    boolean planServicePropagation(PerunSession perunSession, Facility facility, Service service);\n+\n+    /**\n+     * Forces service propagation on all facilities where the service is defined on.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @return true if it is possible, false if not\n+     */\n+    boolean planServicePropagation(PerunSession perunSession, Service service);\n+\n+    /**\n+     * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n+     * 1 - allowed / 0 - service is denied).\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @return list of assigned services with allowed property\n+     * @throws PrivilegeException\n+     * @throws FacilityNotExistsException\n+     * @throws InternalErrorException\n+     */\n+    List<ServiceForGUI> getFacilityAssignedServicesForGUI(PerunSession perunSession, Facility facility) throws PrivilegeException, FacilityNotExistsException;\n+\n+    /**\n+     * Creates new service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @return new service\n+     */\n+    Service createService(PerunSession perunSession, Service service) throws ServiceExistsException;\n+\n+    /**\n+     * Deletes the service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param forceFlag    if set to true, removes the service with all dependendant objects from db instead of raising exception\n+     * @throws RelationExistsException\n+     * @throws InternalErrorException\n+     * @throws ServiceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+     */\n+    void deleteService(PerunSession perunSession, Service service, boolean forceFlag) throws RelationExistsException, ServiceAlreadyRemovedException;\n+\n+    /**\n+     * Updates the service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     */\n+    void updateService(PerunSession perunSession, Service service);\n+\n+    /**\n+     * Get service by id.\n+     *\n+     * @param perunSession\n+     * @param id\n+     * @return service with specified id\n+     * @throws InternalErrorException\n+     */\n+    Service getServiceById(PerunSession perunSession, int id) throws ServiceNotExistsException;\n+\n+    /**\n+     * Get service by name.\n+     *\n+     * @param perunSession\n+     * @param name         name of the service\n+     * @return service with specified name\n+     * @throws InternalErrorException\n+     * @throws ServiceNotExistsException\n+     */\n+    Service getServiceByName(PerunSession perunSession, String name) throws ServiceNotExistsException;\n+\n+    /**\n+     * get all services in perun\n+     *\n+     * @param perunSession\n+     * @return all services in perun\n+     * @throws InternalErrorException\n+     */\n+    List<Service> getServices(PerunSession perunSession);\n+\n+    /**\n+     * Get all services with given attribute.\n+     *\n+     * @param sess                perun session\n+     * @param attributeDefinition\n+     * @return all services with given attribute\n+     * @throws InternalErrorException\n+     */\n+    List<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition);\n+\n+    /**\n+     * Get all resources where the service is defined.\n+     *\n+     * @param sess\n+     * @param service\n+     * @return list of resources where the service is defined\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAssignedResources(PerunSession sess, Service service);\n+\n+    /**\n+     * Generates the list of attributes per each member associated with the resource.\n+     *\n+     * @param perunSession\n+     * @param service              attributes required by this service you will get\n+     * @param facility             you will get attributes for this facility, resources associated with it and members assigned to the resources\n+     * @param filterExpiredMembers if true the method does not take expired members into account\n+     * @return attributes in special structure. Facility is in the root, facility children are resources. And resource children are members.\n+     * @throws InternalErrorException\n+     */\n+    ServiceAttributes getHierarchicalData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n+\n+    /**\n+     * Generates hashed hierarchical data structure for given service and resource.\n+     * <p>\n+     * attributes: {...hashes...}\n+     * hierarchy: {\n+     * \"1\": {    ** facility id **\n+     * members: {    ** all members on the facility **\n+     * \"4\" : 5,    ** member id : user id **\n+     * \"6\" : 7,    ** member id : user id **\n+     * ...\n+     * }\n+     * children: [\n+     * \"2\": {    ** resource id **\n+     * children: [],\n+     * voId: 99,\n+     * members: {    ** all members on the resource with id 2 **\n+     * \"4\" : 5    ** member id : user id **\n+     * }\n+     * },\n+     * \"3\": {\n+     * ...\n+     * }\n+     * ]\n+     * }\n+     * }\n+     *\n+     * @param perunSession         perun session\n+     * @param service              service\n+     * @param facility             facility\n+     * @param filterExpiredMembers if the generator should filter expired members\n+     * @return generated hashed data structure\n+     */\n+    HashedGenData getHashedHierarchicalData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n+\n+    /**\n+     * Generates hashed data with group structure for given service and resource.\n+     * <p>\n+     * Generates data in format:\n+     * <p>\n+     * attributes: {...hashes...}\n+     * hierarchy: {\n+     * \"1\": {    ** facility id **\n+     * members: {    ** all members on the facility **\n+     * \"4\" : 5,    ** member id : user id **\n+     * \"6\" : 7,    ** member id : user id **\n+     * ...\n+     * }\n+     * children: [\n+     * \"2\": {    ** resource id **\n+     * voId: 99,\n+     * children: [\n+     * \"89\": {    ** group id **\n+     * \"children\": {},\n+     * \"members\": {\n+     * \"91328\": 57986,\n+     * \"91330\": 60838\n+     * }\n+     * }\n+     * ],\n+     * \"members\": {    ** all members on the resource with id 2 **\n+     * \"91328\": 57986,\n+     * \"91330\": 60838\n+     * }\n+     * },\n+     * \"3\": {\n+     * ...\n+     * }\n+     * ]\n+     * }\n+     * }\n+     *\n+     * @param perunSession         perun session\n+     * @param service              service\n+     * @param facility             facility\n+     * @param filterExpiredMembers if the generator should filter expired members\n+     * @return generated hashed data structure\n+     */\n+    HashedGenData getHashedDataWithGroups(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n+\n+    /**\n+     * Generates the list of attributes per each resource associated with the facility and filtered by service. Next it generates list of attributes\n+     * associated with the facility and service.\n+     *\n+     * @param perunSession\n+     * @param service              you will get attributes required by this service\n+     * @param facility             you will get attributes for this facility, resources associated with it and users assigned to the resources\n+     * @param filterExpiredMembers if true the method does not take expired members into account\n+     * @return attributes in special structure. The facility is in the root. Facility first children is abstract node which contains no attributes and it's children are all resources.\n+     * Facility second child is abstract node with no attribute and it's children are all users.\n+     * @throws InternalErrorException\n+     */\n+    ServiceAttributes getFlatData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n+\n+    /**\n+     * Generates the list of attributes per each member associated with the resources and groups.\n+     * <p>\n+     * Generate also vo-required attributes for service. Add them to the same structure like resource-required attributes.\n+     *\n+     * @param perunSession\n+     * @param service              attributes required by this service you will get\n+     * @param facility             you will get attributes for this facility, resources associated with it and members assigned to the resources\n+     * @param filterExpiredMembers if true the method does not take expired members into account\n+     * @return attributes in special structure. Facility is in the root, facility children are resources.\n+     * Resource first child is abstract structure which children are groups.\n+     * Resource  second child is abstract structure which children are members.\n+     * Group first child is empty structure (services expect members to be second child, here used to be subgroups).\n+     * Group second child is abstract structure which children are members.\n+     */\n+    ServiceAttributes getDataWithGroups(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n+\n+    /**\n+     * Generates the list of attributes per each member associated with the resources and groups.\n+     *\n+     * @param perunSession\n+     * @param service              attributes required by this service you will get\n+     * @param facility             you will get attributes for this facility, resources associated with it and members assigned to the resources\n+     * @param filterExpiredMembers if true the method does not take expired members into account\n+     * @return attributes in special structure. Facility is in the root, facility children are resources.\n+     * Resource first child is abstract structure which children are groups.\n+     * Resource  second chi is abstract structure which children are members.\n+     * Group first child is abstract structure which children are groups.\n+     * Group second chi is abstract structure which children are members.\n+     * @throws InternalErrorException\n+     * @throws VoNotExistsException\n+     */\n+    ServiceAttributes getDataWithVos(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers) throws VoNotExistsException;\n+\n+    /**\n+     * List packages\n+     *\n+     * @param perunSession\n+     * @return list of packages in the DB\n+     * @throws InternalErrorException\n+     */\n+    List<ServicesPackage> getServicesPackages(PerunSession perunSession);\n+\n+    /**\n+     * Get package by Id\n+     *\n+     * @param servicesPackageId id of the package we want to retrieve\n+     * @param perunSession\n+     * @return package\n+     * @throws InternalErrorException\n+     * @throws ServicesPackageNotExistsException\n+     */\n+    ServicesPackage getServicesPackageById(PerunSession perunSession, int servicesPackageId) throws ServicesPackageNotExistsException;\n+\n+    /**\n+     * Get package by name\n+     *\n+     * @param name         name of the services package\n+     * @param perunSession\n+     * @return package\n+     * @throws InternalErrorException\n+     * @throws ServicesPackageNotExistsException\n+     */\n+    ServicesPackage getServicesPackageByName(PerunSession perunSession, String name) throws ServicesPackageNotExistsException;\n+\n+    /**\n+     * Insert a new package\n+     *\n+     * @param servicesPackage package to be inserted\n+     * @param perunSession\n+     * @return ServicesPackage object completely filled (including Id)\n+     * @throws InternalErrorException\n+     * @throws ServicesPackageExistsException\n+     */\n+    ServicesPackage createServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage) throws ServicesPackageExistsException;\n+\n+    /**\n+     * Update package\n+     *\n+     * @param servicesPackage with which is the old one supposed to be updated :-)\n+     * @param perunSession\n+     * @throws InternalErrorException\n+     */\n+    void updateServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+    /**\n+     * Remove the package\n+     *\n+     * @param perunSession\n+     * @param servicesPackage services package to be removed.\n+     * @throws RelationExistsException\n+     * @throws InternalErrorException\n+     */\n+    void deleteServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage) throws RelationExistsException;\n+\n+    /**\n+     * Add the service to the package\n+     *\n+     * @param perunSession\n+     * @param servicesPackage services package to which the service supposed to be added\n+     * @param service         service to be added to the services package\n+     * @throws ServiceAlreadyAssignedException\n+     * @throws InternalErrorException\n+     */\n+    void addServiceToServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyAssignedException;\n+\n+    /**\n+     * Remove Service from Services Package\n+     *\n+     * @param perunSession\n+     * @param servicesPackage services package from which the service supposed to be removed\n+     * @param service         service that will be removed from the services package\n+     * @throws InternalErrorException\n+     * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from servicePackage in DB\n+     */\n+    void removeServiceFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyRemovedFromServicePackageException;\n+\n+    /**\n+     * List services stored in the packages\n+     *\n+     * @param servicesPackage the package from which we want to list the services\n+     * @return list consisting services\n+     * @throws InternalErrorException\n+     */\n+    List<Service> getServicesFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n \n \t/*\n \t\t getRequiredAttributes(PerunSession perunSession, Service service);\n \t\t */\n \n-\t/**\n-\t * Mark the attribute as required for the service. Required attributes are requisite for Service to run.\n-\t * If you add attribute which has a default attribute then this default attribute will be automatically add too.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param attribute\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws AttributeAlreadyAssignedException\n-\t */\n-\tvoid addRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeAlreadyAssignedException;\n-\n-\t/**\n-\t *  Batch version of addRequiredAttribute\n-\t *  @see cz.metacentrum.perun.core.api.ServicesManager#addRequiredAttribute(PerunSession,Service,AttributeDefinition)\n-\t */\n-\tvoid addRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove required attribute from service.\n-\t * TODO If you try to remove attribute which is default for other Required attribute ...\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param attribute\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotAssignedException\n-\t */\n-\tvoid removeRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeNotAssignedException;\n-\n-\t/**\n-\t *  Batch version of removeRequiredAttribute\n-\t *  @see cz.metacentrum.perun.core.api.ServicesManager#removeRequiredAttribute(PerunSession,Service,AttributeDefinition)\n-\t */\n-\tvoid removeRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeNotAssignedException;\n-\n-\t/**\n-\t * Detate all required attributes from service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllRequiredAttributes(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Adds an destination for the facility and service. Destination.id doesn't need to be filled. If destination doesn't exist it will be created.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @param destination (Id of this destination doesn't need to be filled.)\n-\t * @return destination with it's id set.\n-\t * @throws PrivilegeException\n-\t * @throws InvalidDestinationException if destination has invalid value in given destination type.\n-\t * @throws DestinationAlreadyAssignedException\n-\t */\n-\tDestination addDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyAssignedException, InvalidDestinationException;\n-\n-\t/**\n-\t * Adds an destination for the facility and all services. Destination id doesn't need to be filled. If destination doesn't exist it will be created.\n-\t *\n-\t * @param perunSession\n-\t * @param services\n-\t * @param facility\n-\t * @param destination (id of this destination doesn't need to be filled.)\n-\t * @return destination with it's id set\n-\t * @throws InvalidDestinationException if destination has invalid value in given destination type.\n-\t */\n-\tDestination addDestination(PerunSession perunSession, List<Service> services, Facility facility, Destination destination) throws InvalidDestinationException;\n-\n-\t/**\n-\t * Adds destination for all services defined on the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @param destination\n-\t * @return list of added destinations\n-\t * @throws InvalidDestinationException if destination has invalid value in given destination type.\n-\t * @throws DestinationAlreadyAssignedException\n-\t */\n-\tList<Destination> addDestinationsForAllServicesOnFacility(PerunSession perunSession, Facility facility, Destination destination) throws DestinationAlreadyAssignedException, InvalidDestinationException;\n-\n-\t/**\n-\t * Defines service destination for all hosts using theirs hostnames.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @return list of added destinations\n-\t * @throws InternalErrorException\n-\t * @throws DestinationAlreadyAssignedException\n-\t */\n-\tList<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, Service service, Facility facility) throws DestinationAlreadyAssignedException;\n-\n-\t/**\n-\t * Defines services destination for all hosts using their hostnames.\n-\t * Do it for all services in List.\n-\t *\n-\t * If some destination for service and facility already exist, do not create it but still return back in the list.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return list of added destinations (even if they already was added before)\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, List<Service> services, Facility facility);\n-\n-\t/**\n-\t * Defines services destination for all hosts using their hostnames.\n-\t * Use all assigned services to resources for the facility.\n-\t *\n-\t * If some destination for service and facility already exist, do not create it but still return back in the list.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return list of added destinations (even if they already was added before)\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, Facility facility);\n-\n-\n-\t/**\n-\t * Removes an destination from the facility and service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @param destination string contains destination address (mail, url, hostname, ...)\n-\t * @throws InternalErrorException\n-\t * @throws DestinationAlreadyRemovedException\n-\t */\n-\tvoid removeDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyRemovedException;\n-\n-\t/**\n-\t * Get destination by id\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return Destination with the id\n-\t * @throws InternalErrorException\n-\t * @throws DestinationNotExistsException\n-\t */\n-\tDestination getDestinationById(PerunSession perunSession, int id) throws DestinationNotExistsException;\n-\n-\t/**\n-\t * Get list of all destinations defined for the service and facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @return list list of destinations defined for the service and facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession, Service service, Facility facility);\n-\n-\t/**\n-\t * Get list of all destinations.\n-\t *\n-\t * @param perunSession\n-\t * @return list of all destinations for session\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession);\n-\n-\t/**\n-\t * Get lists of all destinations for specific Facility\n-\t *\n-\t * @param perunSession\n-\t * @param facility the facility\n-\t * @return lists of all destinations for specific Facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return list of rich destinations defined for the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return list of rich destinations defined for the service\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the service and the facility\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @param service\n-\t * @return list of rich destinations defined for the service and the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service);\n-\n-\t/**\n-\t * Removes all defined destinations for the service and facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllDestinations(PerunSession perunSession, Service service, Facility facility);\n-\n-\t/**\n-\t * Removes all defined destinations for the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Check if the service exits.\n-\t *\n-\t * @param sess\n-\t * @param service\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotExistsException\n-\t */\n-\tvoid checkServiceExists(PerunSession sess, Service service) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * Check if the service package exists.\n-\t *\n-\t * @param sess\n-\t * @param servicesPackage\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tvoid checkServicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Returns Destinations ID based on destination name and type.\n-\t *\n-\t * @param sess\n-\t * @param name Name (value) of destination\n-\t * @param type type of destination\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws DestinationNotExistsException\n-\t */\n-\tint getDestinationIdByName(PerunSession sess, String name, String type) throws DestinationNotExistsException;\n-\n-\t/**\n-\t * List all services associated with the facility (via resource).\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t *\n-\t * @throws InternalErrorException\n-\t *\n-\t * @return list of services assigned  to facility\n-\t */\n-\tList<Service> getAssignedServices(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * List all destinations for all facilities which are joined by resources to the VO.\n-\t *\n-\t * @param sess\n-\t * @param vo vo for which we are searching destinations\n-\t * @return list of destinations\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Get count of all destinations.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return count of all destinations\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tint getDestinationsCount(PerunSession perunSession);\n-\n-\t/**\n-\t * Deletes destination.\n-\t *\n-\t * @param sess\n-\t * @param destination destination to be deleted\n-\t * @throws InternalErrorException\n-\t * @throws DestinationAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t * @throws RelationExistsException if the destination is used by some services and facilities\n-\t */\n-\tvoid deleteDestination(PerunSession sess, Destination destination) throws DestinationAlreadyRemovedException, RelationExistsException;\n+    /**\n+     * Mark the attribute as required for the service. Required attributes are requisite for Service to run.\n+     * If you add attribute which has a default attribute then this default attribute will be automatically add too.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws AttributeAlreadyAssignedException\n+     */\n+    void addRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeAlreadyAssignedException;\n+\n+    /**\n+     * Batch version of addRequiredAttribute\n+     *\n+     * @see cz.metacentrum.perun.core.api.ServicesManager#addRequiredAttribute(PerunSession, Service, AttributeDefinition)\n+     */\n+    void addRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeAlreadyAssignedException;\n+\n+    /**\n+     * Remove required attribute from service.\n+     * TODO If you try to remove attribute which is default for other Required attribute ...\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws AttributeNotAssignedException\n+     */\n+    void removeRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeNotAssignedException;\n+\n+    /**\n+     * Batch version of removeRequiredAttribute\n+     *\n+     * @see cz.metacentrum.perun.core.api.ServicesManager#removeRequiredAttribute(PerunSession, Service, AttributeDefinition)\n+     */\n+    void removeRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeNotAssignedException;\n+\n+    /**\n+     * Detate all required attributes from service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @throws InternalErrorException\n+     */\n+    void removeAllRequiredAttributes(PerunSession perunSession, Service service);\n+\n+    /**\n+     * Adds an destination for the facility and service. Destination.id doesn't need to be filled. If destination doesn't exist it will be created.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param facility\n+     * @param destination  (Id of this destination doesn't need to be filled.)\n+     * @return destination with it's id set.\n+     * @throws PrivilegeException\n+     * @throws InvalidDestinationException         if destination has invalid value in given destination type.\n+     * @throws DestinationAlreadyAssignedException\n+     */\n+    Destination addDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyAssignedException, InvalidDestinationException;\n+\n+    /**\n+     * Adds an destination for the facility and all services. Destination id doesn't need to be filled. If destination doesn't exist it will be created.\n+     *\n+     * @param perunSession\n+     * @param services\n+     * @param facility\n+     * @param destination  (id of this destination doesn't need to be filled.)\n+     * @return destination with it's id set\n+     * @throws InvalidDestinationException if destination has invalid value in given destination type.\n+     */\n+    Destination addDestination(PerunSession perunSession, List<Service> services, Facility facility, Destination destination) throws InvalidDestinationException;\n+\n+    /**\n+     * Adds destination for all services defined on the facility.\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @param destination\n+     * @return list of added destinations\n+     * @throws InvalidDestinationException         if destination has invalid value in given destination type.\n+     * @throws DestinationAlreadyAssignedException\n+     */\n+    List<Destination> addDestinationsForAllServicesOnFacility(PerunSession perunSession, Facility facility, Destination destination) throws DestinationAlreadyAssignedException, InvalidDestinationException;\n+\n+    /**\n+     * Defines service destination for all hosts using theirs hostnames.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param facility\n+     * @return list of added destinations\n+     * @throws InternalErrorException\n+     * @throws DestinationAlreadyAssignedException\n+     */\n+    List<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, Service service, Facility facility) throws DestinationAlreadyAssignedException;\n+\n+    /**\n+     * Defines services destination for all hosts using their hostnames.\n+     * Do it for all services in List.\n+     * <p>\n+     * If some destination for service and facility already exist, do not create it but still return back in the list.\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @return list of added destinations (even if they already was added before)\n+     * @throws InternalErrorException\n+     */\n+    List<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, List<Service> services, Facility facility);\n+\n+    /**\n+     * Defines services destination for all hosts using their hostnames.\n+     * Use all assigned services to resources for the facility.\n+     * <p>\n+     * If some destination for service and facility already exist, do not create it but still return back in the list.\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @return list of added destinations (even if they already was added before)\n+     * @throws InternalErrorException\n+     */\n+    List<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, Facility facility);\n+\n+\n+    /**\n+     * Removes an destination from the facility and service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param facility\n+     * @param destination  string contains destination address (mail, url, hostname, ...)\n+     * @throws InternalErrorException\n+     * @throws DestinationAlreadyRemovedException\n+     */\n+    void removeDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyRemovedException;\n+\n+    /**\n+     * Get destination by id\n+     *\n+     * @param perunSession\n+     * @param id\n+     * @return Destination with the id\n+     * @throws InternalErrorException\n+     * @throws DestinationNotExistsException\n+     */\n+    Destination getDestinationById(PerunSession perunSession, int id) throws DestinationNotExistsException;\n+\n+    /**\n+     * Get list of all destinations defined for the service and facility.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param facility\n+     * @return list list of destinations defined for the service and facility\n+     * @throws InternalErrorException\n+     */\n+    List<Destination> getDestinations(PerunSession perunSession, Service service, Facility facility);\n+\n+    /**\n+     * Get list of all destinations.\n+     *\n+     * @param perunSession\n+     * @return list of all destinations for session\n+     * @throws InternalErrorException\n+     */\n+    List<Destination> getDestinations(PerunSession perunSession);\n+\n+    /**\n+     * Get lists of all destinations for specific Facility\n+     *\n+     * @param perunSession\n+     * @param facility     the facility\n+     * @return lists of all destinations for specific Facility\n+     * @throws InternalErrorException\n+     */\n+    List<Destination> getDestinations(PerunSession perunSession, Facility facility);\n+\n+    /**\n+     * Get list of all rich destinations defined for the facility.\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @return list of rich destinations defined for the facility\n+     * @throws InternalErrorException\n+     */\n+    List<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility);\n+\n+    /**\n+     * Get list of all rich destinations defined for the service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @return list of rich destinations defined for the service\n+     * @throws InternalErrorException\n+     */\n+    List<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service);\n+\n+    /**\n+     * Get list of all rich destinations defined for the service and the facility\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @param service\n+     * @return list of rich destinations defined for the service and the facility\n+     * @throws InternalErrorException\n+     */\n+    List<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service);\n+\n+    /**\n+     * Removes all defined destinations for the service and facility.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param facility\n+     * @throws InternalErrorException\n+     */\n+    void removeAllDestinations(PerunSession perunSession, Service service, Facility facility);\n+\n+    /**\n+     * Removes all defined destinations for the facility.\n+     *\n+     * @param perunSession\n+     * @param facility     the facility\n+     * @throws InternalErrorException\n+     */\n+    void removeAllDestinations(PerunSession perunSession, Facility facility);\n+\n+    /**\n+     * Check if the service exits.\n+     *\n+     * @param sess\n+     * @param service\n+     * @throws InternalErrorException\n+     * @throws ServiceNotExistsException\n+     */\n+    void checkServiceExists(PerunSession sess, Service service) throws ServiceNotExistsException;\n+\n+    /**\n+     * Check if the service package exists.\n+     *\n+     * @param sess\n+     * @param servicesPackage\n+     * @throws InternalErrorException\n+     * @throws ServicesPackageNotExistsException\n+     */\n+    void checkServicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws ServicesPackageNotExistsException;\n+\n+    /**\n+     * Returns Destinations ID based on destination name and type.\n+     *\n+     * @param sess\n+     * @param name Name (value) of destination\n+     * @param type type of destination\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws DestinationNotExistsException\n+     */\n+    int getDestinationIdByName(PerunSession sess, String name, String type) throws DestinationNotExistsException;\n+\n+    /**\n+     * List all services associated with the facility (via resource).\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @return list of services assigned  to facility\n+     * @throws InternalErrorException\n+     */\n+    List<Service> getAssignedServices(PerunSession perunSession, Facility facility);\n+\n+    /**\n+     * List all destinations for all facilities which are joined by resources to the VO.\n+     *\n+     * @param sess\n+     * @param vo   vo for which we are searching destinations\n+     * @return list of destinations\n+     * @throws InternalErrorException\n+     */\n+    List<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo);\n+\n+    /**\n+     * Get count of all destinations.\n+     *\n+     * @param perunSession\n+     * @return count of all destinations\n+     * @throws InternalErrorException\n+     */\n+    int getDestinationsCount(PerunSession perunSession);\n+\n+    /**\n+     * Deletes destination.\n+     *\n+     * @param sess\n+     * @param destination destination to be deleted\n+     * @throws InternalErrorException\n+     * @throws DestinationAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+     * @throws RelationExistsException            if the destination is used by some services and facilities\n+     */\n+    void deleteDestination(PerunSession sess, Destination destination) throws DestinationAlreadyRemovedException, RelationExistsException;\n }\n",
            "diff_size": 828
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/383/ServicesManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/383/ServicesManagerBl.java\nindex 604b70e3c01..251fb691028 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/383/ServicesManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/383/ServicesManagerBl.java\n@@ -31,7 +31,6 @@ import cz.metacentrum.perun.core.api.exceptions.ServiceNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.ServicesPackageExistsException;\n import cz.metacentrum.perun.core.api.exceptions.ServicesPackageNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.VoNotExistsException;\n-\n import java.util.List;\n \n /**\n@@ -43,837 +42,980 @@ import java.util.List;\n  * GeneralServiceManager.\n  *\n  */\n+\n+\n public interface ServicesManagerBl {\n \n-\t/**\n-\t * Bans Service on facility.\n-\t * It wouldn't be possible to execute the given Service on the whole facility nor on any of its destinations.\n-\t *\n-\t * @param perunSession\n-\t * @param service The Service to be banned on the facility\n-\t * @param facility The facility on which we want to ban the Service\n-\t * @throws InternalErrorException\n-\t * @throws ServiceAlreadyBannedException\n-\t */\n-\tvoid blockServiceOnFacility(PerunSession perunSession, Service service, Facility facility) throws ServiceAlreadyBannedException;\n-\n-\t/**\n-\t * Bans Service on destination.\n-\t * It wouldn't be possible to execute the given Service on this destination, however,\n-\t * it still can be executed on all the other destinations in the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service The Service to be banned on this particular destination\n-\t * @param destinationId The destination on which we want to ban the Service\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid blockServiceOnDestination(PerunSession perunSession, Service service, int destinationId) throws PrivilegeException, DestinationNotExistsException, ServiceAlreadyBannedException;\n-\n-\t/**\n-\t * Block all services currently assigned on this facility.\n-\t * From this moment on, there are no Services being allowed on this facility.\n-\t * If you assign a new service to the facility, it will be allowed!\n-\t *\n-\t * @param perunSession\n-\t * @param facility Facility we want to block all services on.\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid blockAllServicesOnFacility(PerunSession perunSession, Facility facility) throws FacilityNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Block all services currently assigned on this destination.\n-\t * From this moment on, there are no Services being allowed on this destination.\n-\t * If you assign a new service to the destination, it will be allowed!\n-\t *\n-\t * @param perunSession\n-\t * @param destinationId The id of a destination we want to block all services on.\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid blockAllServicesOnDestination(PerunSession perunSession, int destinationId) throws PrivilegeException, DestinationNotExistsException;\n-\n-\t/**\n-\t * List all the Services that are banned on this facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return a list of Services that are denied on the facility\n-\t *\n-\t */\n-\tList<Service> getServicesBlockedOnFacility(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * List all the Services that are banned on this destination.\n-\t *\n-\t * @param perunSession\n-\t * @param destinationId\n-\t * @return a list of Services that are denied on the destination\n-\t *\n-\t */\n-\tList<Service> getServicesBlockedOnDestination(PerunSession perunSession, int destinationId);\n-\n-\t/**\n-\t * Is this Service denied on the facility?\n-\t *\n-\t * @param service The Service, the denial of which we want to examine\n-\t * @param facility The facility on which we want to look up the denial of the Service\n-\t * @return true - in case the Service is denied on the facility false - in\n-\t *         case the Service in NOT denied on the facility\n-\t */\n-\tboolean isServiceBlockedOnFacility(Service service, Facility facility);\n-\n-\t/**\n-\t * Is this Service denied on the destination?\n-\t *\n-\t * @param service The Service, the denial of which we want to examine\n-\t * @param destinationId The destination on which we want to look up the denial of the Service\n-\t * @return true - in case the Service is denied on the destination false - in case\n-\t *         the Service in NOT denied on the destination\n-\t */\n-\tboolean isServiceBlockedOnDestination(Service service, int destinationId);\n-\n-\t/**\n-\t * Erase all the possible denials on this facility.\n-\t * From this moment on, there are no Services being denied on this facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility Facility we want to clear of all the denials.\n-\t *\n-\t */\n-\tvoid unblockAllServicesOnFacility(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Erase all the possible denials on destinations defined by the destinationName.\n-\t * From this moment on, there are no Services being denied on these destinations.\n-\t *\n-\t * @param sess\n-\t * @param destinationName The name of destinations we want to clear of all the denials.\n-\t */\n-\tvoid unblockAllServicesOnDestination(PerunSession sess, String destinationName);\n-\n-\t/**\n-\t * Erase all the possible denials on this destination.\n-\t * From this moment on, there are no Services being denied on this destination.\n-\t *\n-\t * @param perunSession\n-\t * @param destinationId The id of a destination we want to clear of all the denials.\n-\t *\n-\t */\n-\tvoid unblockAllServicesOnDestination(PerunSession perunSession, int destinationId);\n-\n-\t/**\n-\t * Free the denial of the Service on this facility.\n-\t * If the Service was banned on this facility, it will be freed.\n-\t * In case the Service was not banned on this facility, nothing will happen.\n-\t *\n-\t * @param perunSession\n-\t * @param service The Service, the denial of which we want to free on this facility.\n-\t * @param facility The facility on which we want to free the denial of the Service.\n-\t *\n-\t */\n-\tvoid unblockServiceOnFacility(PerunSession perunSession, Service service, Facility facility);\n-\n-\t/**\n-\t * Free the denial of the Service on this destination.\n-\t * If the Service was banned on this destination, it will be freed.\n-\t * In case the Service was not banned on this destination, nothing will happen.\n-\t *\n-\t * @param perunSession\n-\t * @param service The Service, the denial of which we want to free on this destination.\n-\t * @param destinationId The id of a destination on which we want to free the denial of the Service.\n-\t *\n-\t */\n-\tvoid unblockServiceOnDestination(PerunSession perunSession, Service service, int destinationId);\n-\n-\t/**\n-\t * Forces service propagation on defined facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @return true if it is possible, false if not\n-\t *\n-\t */\n-\tboolean forceServicePropagation(PerunSession perunSession, Facility facility, Service service);\n-\n-\t/**\n-\t * Forces service propagation on all facilities where the service is defined on.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return true if it is possible, false if not\n-\t *\n-\t */\n-\tboolean forceServicePropagation(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Plans service propagation on defined facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @param service\n-\t * @return true if it is possible, false if not\n-\t *\n-\t */\n-\tboolean planServicePropagation(PerunSession perunSession, Facility facility, Service service);\n-\n-\t/**\n-\t * Forces service propagation on all facilities where the service is defined on.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return true if it is possible, false if not\n-\t *\n-\t */\n-\tboolean planServicePropagation(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n-\t * 1 - allowed / 0 - service is denied).\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return list of assigned services with allowed property\n-\t *\n-\t * @throws PrivilegeException\n-\t * @throws FacilityNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tList<ServiceForGUI> getFacilityAssignedServicesForGUI(PerunSession perunSession, Facility facility) throws PrivilegeException, FacilityNotExistsException;\n-\n-\t/**\n-\t * Creates new service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return new service\n-\t */\n-\tService createService(PerunSession perunSession, Service service) throws ServiceExistsException;\n-\n-\t/** Deletes the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param forceFlag if set to true, removes the service with all dependendant objects from db instead of raising exception\n-\t * @throws RelationExistsException\n-\t * @throws InternalErrorException\n-\t * @throws ServiceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid deleteService(PerunSession perunSession, Service service, boolean forceFlag) throws RelationExistsException, ServiceAlreadyRemovedException;\n-\n-\t/** Updates the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t */\n-\tvoid updateService(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Get service by id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return service with specified id\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tService getServiceById(PerunSession perunSession, int id) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * Get service by name.\n-\t *\n-\t * @param perunSession\n-\t * @param name name of the service\n-\t * @return service with specified name\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotExistsException\n-\t */\n-\tService getServiceByName(PerunSession perunSession, String name) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * get all services in perun\n-\t *\n-\t * @param perunSession\n-\t * @return all services in perun\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Service> getServices(PerunSession perunSession);\n-\n-\t/**\n-\t * Get all services with given attribute.\n-\t *\n-\t * @param sess perun session\n-\t * @param attributeDefinition\n-\t * @return all services with given attribute\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition);\n-\n-\t/**\n-\t * Get all resources where the service is defined.\n-\t *\n-\t * @param sess\n-\t * @param service\n-\t * @return list of resources where the service is defined\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Service service);\n-\n-\t/**\n-\t * Generates the list of attributes per each member associated with the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param service attributes required by this service you will get\n-\t * @param facility you will get attributes for this facility, resources associated with it and members assigned to the resources\n-\t * @param filterExpiredMembers if true the method does not take expired members into account\n-\t * @return attributes in special structure. Facility is in the root, facility children are resources. And resource children are members.\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tServiceAttributes getHierarchicalData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n-\n-\t/**\n-\t * Generates hashed hierarchical data structure for given service and resource.\n-\t *\n-\t * attributes: {...hashes...}\n-\t * hierarchy: {\n-\t *   \"1\": {    ** facility id **\n-\t *     members: {    ** all members on the facility **\n-\t *        \"4\" : 5,    ** member id : user id **\n-\t *        \"6\" : 7,    ** member id : user id **\n-\t *       ...\n-\t *     }\n-\t *     children: [\n-\t *       \"2\": {    ** resource id **\n-\t *         children: [],\n-\t *         voId: 99,\n-\t *         members: {    ** all members on the resource with id 2 **\n-\t *           \"4\" : 5    ** member id : user id **\n-\t *         }\n-\t *       },\n-\t *       \"3\": {\n-\t *         ...\n-\t *       }\n-\t *     ]\n-\t *   }\n-\t * }\n-\t *\n-\t * @param perunSession perun session\n-\t * @param service service\n-\t * @param facility facility\n-\t * @param filterExpiredMembers if the generator should filter expired members\n-\t * @return generated hashed data structure\n-\t */\n-\tHashedGenData getHashedHierarchicalData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n-\n-\t/**\n-\t * Generates hashed data with group structure for given service and resource.\n-\t *\n-\t * Generates data in format:\n-\t *\n-\t * attributes: {...hashes...}\n-\t * hierarchy: {\n-\t *   \"1\": {    ** facility id **\n-\t *     members: {    ** all members on the facility **\n-\t *        \"4\" : 5,    ** member id : user id **\n-\t *        \"6\" : 7,    ** member id : user id **\n-\t *       ...\n-\t *     }\n-\t *     children: [\n-\t *       \"2\": {    ** resource id **\n-\t *         voId: 99,\n-\t *         children: [\n-\t *           \"89\": {    ** group id **\n-\t *              \"children\": {},\n-\t *              \"members\": {\n-\t *                  \"91328\": 57986,\n-\t *                  \"91330\": 60838\n-\t *              }\n-\t *           }\n-\t *         ],\n-\t *         \"members\": {    ** all members on the resource with id 2 **\n-\t *             \"91328\": 57986,\n-\t *             \"91330\": 60838\n-\t *         }\n-\t *       },\n-\t *       \"3\": {\n-\t *         ...\n-\t *       }\n-\t *     ]\n-\t *   }\n-\t * }\n-\t *\n-\t * @param perunSession perun session\n-\t * @param service service\n-\t * @param facility facility\n-\t * @param filterExpiredMembers if the generator should filter expired members\n-\t * @return generated hashed data structure\n-\t */\n-\tHashedGenData getHashedDataWithGroups(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n-\n-\t/**\n-\t * Generates the list of attributes per each resource associated with the facility and filtered by service. Next it generates list of attributes\n-\t * associated with the facility and service.\n-\t *\n-\t * @param perunSession\n-\t * @param service you will get attributes required by this service\n-\t * @param facility you will get attributes for this facility, resources associated with it and users assigned to the resources\n-\t * @param filterExpiredMembers if true the method does not take expired members into account\n-\t * @return attributes in special structure. The facility is in the root. Facility first children is abstract node which contains no attributes and it's children are all resources.\n-\t * \t\t\t\tFacility second child is abstract node with no attribute and it's children are all users.\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tServiceAttributes getFlatData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n-\n-\t/**\n-\t * Generates the list of attributes per each member associated with the resources and groups.\n-\t *\n-\t * Generate also vo-required attributes for service. Add them to the same structure like resource-required attributes.\n-\t *\n-\t * @param perunSession\n-\t * @param service attributes required by this service you will get\n-\t * @param facility you will get attributes for this facility, resources associated with it and members assigned to the resources\n-\t * @param filterExpiredMembers if true the method does not take expired members into account\n-\t * @return attributes in special structure. Facility is in the root, facility children are resources.\n-\t *         Resource first child is abstract structure which children are groups.\n-\t *         Resource  second child is abstract structure which children are members.\n-\t *         Group first child is empty structure (services expect members to be second child, here used to be subgroups).\n-\t *         Group second child is abstract structure which children are members.\n-\t */\n-\tServiceAttributes getDataWithGroups(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n-\t/**\n-\t * Generates the list of attributes per each member associated with the resources and groups.\n-\t *\n-\t * @param perunSession\n-\t * @param service attributes required by this service you will get\n-\t * @param facility you will get attributes for this facility, resources associated with it and members assigned to the resources\n-\t * @param filterExpiredMembers if true the method does not take expired members into account\n-\t * @return attributes in special structure. Facility is in the root, facility children are resources.\n-\t *         Resource first child is abstract structure which children are groups.\n-\t *         Resource  second chi is abstract structure which children are members.\n-\t *         Group first child is abstract structure which children are groups.\n-\t *         Group second chi is abstract structure which children are members.\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t */\n-\tServiceAttributes getDataWithVos(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers) throws VoNotExistsException;\n-\n-\t/**\n-\t * List packages\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return list of packages in the DB\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<ServicesPackage> getServicesPackages(PerunSession perunSession);\n-\n-\t/**\n-\t * Get package by Id\n-\t *\n-\t * @param servicesPackageId id of the package we want to retrieve\n-\t * @param perunSession\n-\t *\n-\t * @return package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tServicesPackage getServicesPackageById(PerunSession perunSession, int servicesPackageId) throws ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Get package by name\n-\t *\n-\t * @param name name of the services package\n-\t * @param perunSession\n-\t *\n-\t * @return package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tServicesPackage getServicesPackageByName(PerunSession perunSession, String name) throws ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Insert a new package\n-\t *\n-\t * @param servicesPackage package to be inserted\n-\t * @param perunSession\n-\t *\n-\t * @return ServicesPackage object completely filled (including Id)\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageExistsException\n-\t */\n-\tServicesPackage createServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage) throws ServicesPackageExistsException;\n-\n-\t/**\n-\t * Update package\n-\t *\n-\t * @param servicesPackage with which is the old one supposed to be updated :-)\n-\t * @param perunSession\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid updateServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/**\n-\t * Remove the package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package to be removed.\n-\t * @throws RelationExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid deleteServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage) throws RelationExistsException;\n-\n-\t/**\n-\t * Add the service to the package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package to which the service supposed to be added\n-\t * @param service service to be added to the services package\n-\t *\n-\t * @throws ServiceAlreadyAssignedException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid addServiceToServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyAssignedException;\n-\t/**\n-\t * Remove Service from Services Package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package from which the service supposed to be removed\n-\t * @param service service that will be removed from the services package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from servicePackage in DB\n-\t */\n-\tvoid removeServiceFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyRemovedFromServicePackageException;\n-\n-\t/**\n-\t * List services stored in the packages\n-\t *\n-\t * @param servicesPackage the package from which we want to list the services\n-\t *\n-\t * @return list consisting services\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Service> getServicesFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/*\n-\t\t getRequiredAttributes(PerunSession perunSession, Service service);\n-\t\t */\n-\n-\t/**\n-\t * Mark the attribute as required for the service. Required attributes are requisite for Service to run.\n-\t * If you add attribute which has a default attribute then this default attribute will be automatically add too.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param attribute\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws AttributeAlreadyAssignedException\n-\t */\n-\tvoid addRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeAlreadyAssignedException;\n-\n-\t/**\n-\t *  Batch version of addRequiredAttribute\n-\t *  @see cz.metacentrum.perun.core.api.ServicesManager#addRequiredAttribute(PerunSession,Service,AttributeDefinition)\n-\t */\n-\tvoid addRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove required attribute from service.\n-\t * TODO If you try to remove attribute which is default for other Required attribute ...\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param attribute\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotAssignedException\n-\t */\n-\tvoid removeRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeNotAssignedException;\n-\n-\t/**\n-\t *  Batch version of removeRequiredAttribute\n-\t *  @see cz.metacentrum.perun.core.api.ServicesManager#removeRequiredAttribute(PerunSession,Service,AttributeDefinition)\n-\t */\n-\tvoid removeRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeNotAssignedException;\n-\n-\t/**\n-\t * Detate all required attributes from service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllRequiredAttributes(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Adds an destination for the facility and service. Destination.id doesn't need to be filled. If destination doesn't exist it will be created.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @param destination (Id of this destination doesn't need to be filled.)\n-\t * @return destination with it's id set.\n-\t * @throws PrivilegeException\n-\t * @throws InvalidDestinationException if destination has invalid value in given destination type.\n-\t * @throws DestinationAlreadyAssignedException\n-\t */\n-\tDestination addDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyAssignedException, InvalidDestinationException;\n-\n-\t/**\n-\t * Adds an destination for the facility and all services. Destination id doesn't need to be filled. If destination doesn't exist it will be created.\n-\t *\n-\t * @param perunSession\n-\t * @param services\n-\t * @param facility\n-\t * @param destination (id of this destination doesn't need to be filled.)\n-\t * @return destination with it's id set\n-\t * @throws InvalidDestinationException if destination has invalid value in given destination type.\n-\t */\n-\tDestination addDestination(PerunSession perunSession, List<Service> services, Facility facility, Destination destination) throws InvalidDestinationException;\n-\n-\t/**\n-\t * Adds destination for all services defined on the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @param destination\n-\t * @return list of added destinations\n-\t * @throws InvalidDestinationException if destination has invalid value in given destination type.\n-\t * @throws DestinationAlreadyAssignedException\n-\t */\n-\tList<Destination> addDestinationsForAllServicesOnFacility(PerunSession perunSession, Facility facility, Destination destination) throws DestinationAlreadyAssignedException, InvalidDestinationException;\n-\n-\t/**\n-\t * Defines service destination for all hosts using theirs hostnames.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @return list of added destinations\n-\t * @throws InternalErrorException\n-\t * @throws DestinationAlreadyAssignedException\n-\t */\n-\tList<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, Service service, Facility facility) throws DestinationAlreadyAssignedException;\n-\n-\t/**\n-\t * Defines services destination for all hosts using their hostnames.\n-\t * Do it for all services in List.\n-\t *\n-\t * If some destination for service and facility already exist, do not create it but still return back in the list.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return list of added destinations (even if they already was added before)\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, List<Service> services, Facility facility);\n-\n-\t/**\n-\t * Defines services destination for all hosts using their hostnames.\n-\t * Use all assigned services to resources for the facility.\n-\t *\n-\t * If some destination for service and facility already exist, do not create it but still return back in the list.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return list of added destinations (even if they already was added before)\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, Facility facility);\n-\n-\n-\t/**\n-\t * Removes an destination from the facility and service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @param destination string contains destination address (mail, url, hostname, ...)\n-\t * @throws InternalErrorException\n-\t * @throws DestinationAlreadyRemovedException\n-\t */\n-\tvoid removeDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyRemovedException;\n-\n-\t/**\n-\t * Get destination by id\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return Destination with the id\n-\t * @throws InternalErrorException\n-\t * @throws DestinationNotExistsException\n-\t */\n-\tDestination getDestinationById(PerunSession perunSession, int id) throws DestinationNotExistsException;\n-\n-\t/**\n-\t * Get list of all destinations defined for the service and facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @return list list of destinations defined for the service and facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession, Service service, Facility facility);\n-\n-\t/**\n-\t * Get list of all destinations.\n-\t *\n-\t * @param perunSession\n-\t * @return list of all destinations for session\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession);\n-\n-\t/**\n-\t * Get lists of all destinations for specific Facility\n-\t *\n-\t * @param perunSession\n-\t * @param facility the facility\n-\t * @return lists of all destinations for specific Facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return list of rich destinations defined for the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return list of rich destinations defined for the service\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the service and the facility\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @param service\n-\t * @return list of rich destinations defined for the service and the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service);\n-\n-\t/**\n-\t * Removes all defined destinations for the service and facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllDestinations(PerunSession perunSession, Service service, Facility facility);\n-\n-\t/**\n-\t * Removes all defined destinations for the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Check if the service exits.\n-\t *\n-\t * @param sess\n-\t * @param service\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotExistsException\n-\t */\n-\tvoid checkServiceExists(PerunSession sess, Service service) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * Check if the service package exists.\n-\t *\n-\t * @param sess\n-\t * @param servicesPackage\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tvoid checkServicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Returns Destinations ID based on destination name and type.\n-\t *\n-\t * @param sess\n-\t * @param name Name (value) of destination\n-\t * @param type type of destination\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws DestinationNotExistsException\n-\t */\n-\tint getDestinationIdByName(PerunSession sess, String name, String type) throws DestinationNotExistsException;\n-\n-\t/**\n-\t * List all services associated with the facility (via resource).\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t *\n-\t * @throws InternalErrorException\n-\t *\n-\t * @return list of services assigned  to facility\n-\t */\n-\tList<Service> getAssignedServices(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * List all destinations for all facilities which are joined by resources to the VO.\n-\t *\n-\t * @param sess\n-\t * @param vo vo for which we are searching destinations\n-\t * @return list of destinations\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Get count of all destinations.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return count of all destinations\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tint getDestinationsCount(PerunSession perunSession);\n-\n-\t/**\n-\t * Deletes destination.\n-\t *\n-\t * @param sess\n-\t * @param destination destination to be deleted\n-\t * @throws InternalErrorException\n-\t * @throws DestinationAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t * @throws RelationExistsException if the destination is used by some services and facilities\n-\t */\n-\tvoid deleteDestination(PerunSession sess, Destination destination) throws DestinationAlreadyRemovedException, RelationExistsException;\n-}\n+ /**\n+  * Bans Service on facility.\n+  * It wouldn't be possible to execute the given Service on the whole facility nor on any of its destinations.\n+  *\n+  * @param perunSession\n+  * @param service The Service to be banned on the facility\n+  * @param facility The facility on which we want to ban the Service\n+  * @throws InternalErrorException\n+  * @throws ServiceAlreadyBannedException\n+  */\n+\n+\n+ void blockServiceOnFacility(PerunSession perunSession, Service service, Facility facility) throws ServiceAlreadyBannedException;\n+\n+ /**\n+  * Bans Service on destination.\n+  * It wouldn't be possible to execute the given Service on this destination, however,\n+  * it still can be executed on all the other destinations in the facility.\n+  *\n+  * @param perunSession\n+  * @param service The Service to be banned on this particular destination\n+  * @param destinationId The destination on which we want to ban the Service\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void blockServiceOnDestination(PerunSession perunSession, Service service, int destinationId) throws PrivilegeException, DestinationNotExistsException, ServiceAlreadyBannedException;\n+\n+ /**\n+  * Block all services currently assigned on this facility.\n+  * From this moment on, there are no Services being allowed on this facility.\n+  * If you assign a new service to the facility, it will be allowed!\n+  *\n+  * @param perunSession\n+  * @param facility Facility we want to block all services on.\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void blockAllServicesOnFacility(PerunSession perunSession, Facility facility) throws FacilityNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Block all services currently assigned on this destination.\n+  * From this moment on, there are no Services being allowed on this destination.\n+  * If you assign a new service to the destination, it will be allowed!\n+  *\n+  * @param perunSession\n+  * @param destinationId The id of a destination we want to block all services on.\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void blockAllServicesOnDestination(PerunSession perunSession, int destinationId) throws PrivilegeException, DestinationNotExistsException;\n+\n+ /**\n+  * List all the Services that are banned on this facility.\n+  *\n+  * @param perunSession\n+  * @param facility\n+  * @return a list of Services that are denied on the facility\n+  *\n+  */\n+\n+\n+ List<Service> getServicesBlockedOnFacility(PerunSession perunSession, Facility facility);\n+\n+ /**\n+  * List all the Services that are banned on this destination.\n+  *\n+  * @param perunSession\n+  * @param destinationId\n+  * @return a list of Services that are denied on the destination\n+  *\n+  */\n+\n+\n+ List<Service> getServicesBlockedOnDestination(PerunSession perunSession, int destinationId);\n+\n+ /**\n+  * Is this Service denied on the facility?\n+  *\n+  * @param service The Service, the denial of which we want to examine\n+  * @param facility The facility on which we want to look up the denial of the Service\n+  * @return true - in case the Service is denied on the facility false - in\n+  *         case the Service in NOT denied on the facility\n+  */\n+\n+\n+ boolean isServiceBlockedOnFacility(Service service, Facility facility);\n+\n+ /**\n+  * Is this Service denied on the destination?\n+  *\n+  * @param service The Service, the denial of which we want to examine\n+  * @param destinationId The destination on which we want to look up the denial of the Service\n+  * @return true - in case the Service is denied on the destination false - in case\n+  *         the Service in NOT denied on the destination\n+  */\n+\n+\n+ boolean isServiceBlockedOnDestination(Service service, int destinationId);\n+\n+ /**\n+  * Erase all the possible denials on this facility.\n+  * From this moment on, there are no Services being denied on this facility.\n+  *\n+  * @param perunSession\n+  * @param facility Facility we want to clear of all the denials.\n+  *\n+  */\n+\n+\n+ void unblockAllServicesOnFacility(PerunSession perunSession, Facility facility);\n+\n+ /**\n+  * Erase all the possible denials on destinations defined by the destinationName.\n+  * From this moment on, there are no Services being denied on these destinations.\n+  *\n+  * @param sess\n+  * @param destinationName The name of destinations we want to clear of all the denials.\n+  */\n+\n+\n+ void unblockAllServicesOnDestination(PerunSession sess, String destinationName);\n+\n+ /**\n+  * Erase all the possible denials on this destination.\n+  * From this moment on, there are no Services being denied on this destination.\n+  *\n+  * @param perunSession\n+  * @param destinationId The id of a destination we want to clear of all the denials.\n+  *\n+  */\n+\n+\n+ void unblockAllServicesOnDestination(PerunSession perunSession, int destinationId);\n+\n+ /**\n+  * Free the denial of the Service on this facility.\n+  * If the Service was banned on this facility, it will be freed.\n+  * In case the Service was not banned on this facility, nothing will happen.\n+  *\n+  * @param perunSession\n+  * @param service The Service, the denial of which we want to free on this facility.\n+  * @param facility The facility on which we want to free the denial of the Service.\n+  *\n+  */\n+\n+\n+ void unblockServiceOnFacility(PerunSession perunSession, Service service, Facility facility);\n+\n+ /**\n+  * Free the denial of the Service on this destination.\n+  * If the Service was banned on this destination, it will be freed.\n+  * In case the Service was not banned on this destination, nothing will happen.\n+  *\n+  * @param perunSession\n+  * @param service The Service, the denial of which we want to free on this destination.\n+  * @param destinationId The id of a destination on which we want to free the denial of the Service.\n+  *\n+  */\n+\n+\n+ void unblockServiceOnDestination(PerunSession perunSession, Service service, int destinationId);\n+\n+ /**\n+  * Forces service propagation on defined facility.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param facility\n+  * @return true if it is possible, false if not\n+  *\n+  */\n+\n+\n+ boolean forceServicePropagation(PerunSession perunSession, Facility facility, Service service);\n+\n+ /**\n+  * Forces service propagation on all facilities where the service is defined on.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @return true if it is possible, false if not\n+  *\n+  */\n+\n+\n+ boolean forceServicePropagation(PerunSession perunSession, Service service);\n+\n+ /**\n+  * Plans service propagation on defined facility.\n+  *\n+  * @param perunSession\n+  * @param facility\n+  * @param service\n+  * @return true if it is possible, false if not\n+  *\n+  */\n+\n+\n+ boolean planServicePropagation(PerunSession perunSession, Facility facility, Service service);\n+\n+ /**\n+  * Forces service propagation on all facilities where the service is defined on.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @return true if it is possible, false if not\n+  *\n+  */\n+\n+\n+ boolean planServicePropagation(PerunSession perunSession, Service service);\n+\n+ /**\n+  * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n+  * 1 - allowed / 0 - service is denied).\n+  *\n+  * @param perunSession\n+  * @param facility\n+  * @return list of assigned services with allowed property\n+  *\n+  * @throws PrivilegeException\n+  * @throws FacilityNotExistsException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<ServiceForGUI> getFacilityAssignedServicesForGUI(PerunSession perunSession, Facility facility) throws PrivilegeException, FacilityNotExistsException;\n+\n+ /**\n+  * Creates new service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @return new service\n+  */\n+\n+\n+ Service createService(PerunSession perunSession, Service service) throws ServiceExistsException;\n+\n+ /** Deletes the service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param forceFlag if set to true, removes the service with all dependendant objects from db instead of raising exception\n+  * @throws RelationExistsException\n+  * @throws InternalErrorException\n+  * @throws ServiceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+  */\n+\n+\n+ void deleteService(PerunSession perunSession, Service service, boolean forceFlag) throws RelationExistsException, ServiceAlreadyRemovedException;\n+\n+ /** Updates the service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  */\n+\n+\n+ void updateService(PerunSession perunSession, Service service);\n+\n+ /**\n+  * Get service by id.\n+  *\n+  * @param perunSession\n+  * @param id\n+  * @return service with specified id\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Service getServiceById(PerunSession perunSession, int id) throws ServiceNotExistsException;\n+\n+ /**\n+  * Get service by name.\n+  *\n+  * @param perunSession\n+  * @param name name of the service\n+  * @return service with specified name\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServiceNotExistsException\n+  */\n+\n+\n+ Service getServiceByName(PerunSession perunSession, String name) throws ServiceNotExistsException;\n+\n+ /**\n+  * get all services in perun\n+  *\n+  * @param perunSession\n+  * @return all services in perun\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Service> getServices(PerunSession perunSession);\n+\n+ /**\n+  * Get all services with given attribute.\n+  *\n+  * @param sess perun session\n+  * @param attributeDefinition\n+  * @return all services with given attribute\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition);\n+\n+ /**\n+  * Get all resources where the service is defined.\n+  *\n+  * @param sess\n+  * @param service\n+  * @return list of resources where the service is defined\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession sess, Service service);\n+\n+ /**\n+  * Generates the list of attributes per each member associated with the resource.\n+  *\n+  * @param perunSession\n+  * @param service attributes required by this service you will get\n+  * @param facility you will get attributes for this facility, resources associated with it and members assigned to the resources\n+  * @param filterExpiredMembers if true the method does not take expired members into account\n+  * @return attributes in special structure. Facility is in the root, facility children are resources. And resource children are members.\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ ServiceAttributes getHierarchicalData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n+\n+ /**\n+  * Generates hashed hierarchical data structure for given service and resource.\n+  *\n+  * attributes: {...hashes...}\n+  * hierarchy: {\n+  *   \"1\": {    ** facility id **\n+  *     members: {    ** all members on the facility **\n+  *        \"4\" : 5,    ** member id : user id **\n+  *        \"6\" : 7,    ** member id : user id **\n+  *       ...\n+  *     }\n+  *     children: [\n+  *       \"2\": {    ** resource id **\n+  *         children: [],\n+  *         voId: 99,\n+  *         members: {    ** all members on the resource with id 2 **\n+  *           \"4\" : 5    ** member id : user id **\n+  *         }\n+  *       },\n+  *       \"3\": {\n+  *         ...\n+  *       }\n+  *     ]\n+  *   }\n+  * }\n+  *\n+  * @param perunSession perun session\n+  * @param service service\n+  * @param facility facility\n+  * @param filterExpiredMembers if the generator should filter expired members\n+  * @return generated hashed data structure\n+  */\n+\n+\n+ HashedGenData getHashedHierarchicalData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n+\n+ /**\n+  * Generates hashed data with group structure for given service and resource.\n+  *\n+  * Generates data in format:\n+  *\n+  * attributes: {...hashes...}\n+  * hierarchy: {\n+  *   \"1\": {    ** facility id **\n+  *     members: {    ** all members on the facility **\n+  *        \"4\" : 5,    ** member id : user id **\n+  *        \"6\" : 7,    ** member id : user id **\n+  *       ...\n+  *     }\n+  *     children: [\n+  *       \"2\": {    ** resource id **\n+  *         voId: 99,\n+  *         children: [\n+  *           \"89\": {    ** group id **\n+  *              \"children\": {},\n+  *              \"members\": {\n+  *                  \"91328\": 57986,\n+  *                  \"91330\": 60838\n+  *              }\n+  *           }\n+  *         ],\n+  *         \"members\": {    ** all members on the resource with id 2 **\n+  *             \"91328\": 57986,\n+  *             \"91330\": 60838\n+  *         }\n+  *       },\n+  *       \"3\": {\n+  *         ...\n+  *       }\n+  *     ]\n+  *   }\n+  * }\n+  *\n+  * @param perunSession perun session\n+  * @param service service\n+  * @param facility facility\n+  * @param filterExpiredMembers if the generator should filter expired members\n+  * @return generated hashed data structure\n+  */\n+\n+\n+ HashedGenData getHashedDataWithGroups(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n+\n+ /**\n+  * Generates the list of attributes per each resource associated with the facility and filtered by service. Next it generates list of attributes\n+  * associated with the facility and service.\n+  *\n+  * @param perunSession\n+  * @param service you will get attributes required by this service\n+  * @param facility you will get attributes for this facility, resources associated with it and users assigned to the resources\n+  * @param filterExpiredMembers if true the method does not take expired members into account\n+  * @return attributes in special structure. The facility is in the root. Facility first children is abstract node which contains no attributes and it's children are all resources.\n+  *     Facility second child is abstract node with no attribute and it's children are all users.\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ ServiceAttributes getFlatData(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n+\n+ /**\n+  * Generates the list of attributes per each member associated with the resources and groups.\n+  *\n+  * Generate also vo-required attributes for service. Add them to the same structure like resource-required attributes.\n+  *\n+  * @param perunSession\n+  * @param service attributes required by this service you will get\n+  * @param facility you will get attributes for this facility, resources associated with it and members assigned to the resources\n+  * @param filterExpiredMembers if true the method does not take expired members into account\n+  * @return attributes in special structure. Facility is in the root, facility children are resources.\n+  *         Resource first child is abstract structure which children are groups.\n+  *         Resource  second child is abstract structure which children are members.\n+  *         Group first child is empty structure (services expect members to be second child, here used to be subgroups).\n+  *         Group second child is abstract structure which children are members.\n+  */\n+\n+\n+ ServiceAttributes getDataWithGroups(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers);\n+ /**\n+  * Generates the list of attributes per each member associated with the resources and groups.\n+  *\n+  * @param perunSession\n+  * @param service attributes required by this service you will get\n+  * @param facility you will get attributes for this facility, resources associated with it and members assigned to the resources\n+  * @param filterExpiredMembers if true the method does not take expired members into account\n+  * @return attributes in special structure. Facility is in the root, facility children are resources.\n+  *         Resource first child is abstract structure which children are groups.\n+  *         Resource  second chi is abstract structure which children are members.\n+  *         Group first child is abstract structure which children are groups.\n+  *         Group second chi is abstract structure which children are members.\n+  *\n+  * @throws InternalErrorException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ ServiceAttributes getDataWithVos(PerunSession perunSession, Service service, Facility facility, boolean filterExpiredMembers) throws VoNotExistsException;\n+\n+ /**\n+  * List packages\n+  *\n+  * @param perunSession\n+  *\n+  * @return list of packages in the DB\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<ServicesPackage> getServicesPackages(PerunSession perunSession);\n+\n+ /**\n+  * Get package by Id\n+  *\n+  * @param servicesPackageId id of the package we want to retrieve\n+  * @param perunSession\n+  *\n+  * @return package\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServicesPackageNotExistsException\n+  */\n+\n+\n+ ServicesPackage getServicesPackageById(PerunSession perunSession, int servicesPackageId) throws ServicesPackageNotExistsException;\n+\n+ /**\n+  * Get package by name\n+  *\n+  * @param name name of the services package\n+  * @param perunSession\n+  *\n+  * @return package\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServicesPackageNotExistsException\n+  */\n+\n+\n+ ServicesPackage getServicesPackageByName(PerunSession perunSession, String name) throws ServicesPackageNotExistsException;\n+\n+ /**\n+  * Insert a new package\n+  *\n+  * @param servicesPackage package to be inserted\n+  * @param perunSession\n+  *\n+  * @return ServicesPackage object completely filled (including Id)\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServicesPackageExistsException\n+  */\n+\n+\n+ ServicesPackage createServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage) throws ServicesPackageExistsException;\n+\n+ /**\n+  * Update package\n+  *\n+  * @param servicesPackage with which is the old one supposed to be updated :-)\n+  * @param perunSession\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void updateServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+ /**\n+  * Remove the package\n+  *\n+  * @param perunSession\n+  * @param servicesPackage services package to be removed.\n+  * @throws RelationExistsException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void deleteServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage) throws RelationExistsException;\n+\n+ /**\n+  * Add the service to the package\n+  *\n+  * @param perunSession\n+  * @param servicesPackage services package to which the service supposed to be added\n+  * @param service service to be added to the services package\n+  *\n+  * @throws ServiceAlreadyAssignedException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void addServiceToServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyAssignedException;\n+ /**\n+  * Remove Service from Services Package\n+  *\n+  * @param perunSession\n+  * @param servicesPackage services package from which the service supposed to be removed\n+  * @param service service that will be removed from the services package\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from servicePackage in DB\n+  */\n+\n+\n+ void removeServiceFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyRemovedFromServicePackageException;\n+\n+ /**\n+  * List services stored in the packages\n+  *\n+  * @param servicesPackage the package from which we want to list the services\n+  *\n+  * @return list consisting services\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Service> getServicesFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+ /*\n+   getRequiredAttributes(PerunSession perunSession, Service service);\n+   */\n+\n+ /**\n+  * Mark the attribute as required for the service. Required attributes are requisite for Service to run.\n+  * If you add attribute which has a default attribute then this default attribute will be automatically add too.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param attribute\n+  *\n+  * @throws InternalErrorException\n+  * @throws AttributeAlreadyAssignedException\n+  */\n+\n+\n+ void addRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeAlreadyAssignedException;\n+\n+ /**\n+  *  Batch version of addRequiredAttribute\n+  *  @see cz.metacentrum.perun.core.api.ServicesManager#addRequiredAttribute(PerunSession,Service,AttributeDefinition)\n+  */\n+\n+\n+ void addRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeAlreadyAssignedException;\n+\n+ /**\n+  * Remove required attribute from service.\n+  * TODO If you try to remove attribute which is default for other Required attribute ...\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param attribute\n+  *\n+  * @throws InternalErrorException\n+  * @throws AttributeNotAssignedException\n+  */\n+\n+\n+ void removeRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeNotAssignedException;\n+\n+ /**\n+  *  Batch version of removeRequiredAttribute\n+  *  @see cz.metacentrum.perun.core.api.ServicesManager#removeRequiredAttribute(PerunSession,Service,AttributeDefinition)\n+  */\n+\n+\n+ void removeRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeNotAssignedException;\n+\n+ /**\n+  * Detate all required attributes from service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllRequiredAttributes(PerunSession perunSession, Service service);\n+\n+ /**\n+  * Adds an destination for the facility and service. Destination.id doesn't need to be filled. If destination doesn't exist it will be created.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param facility\n+  * @param destination (Id of this destination doesn't need to be filled.)\n+  * @return destination with it's id set.\n+  * @throws PrivilegeException\n+  * @throws InvalidDestinationException if destination has invalid value in given destination type.\n+  * @throws DestinationAlreadyAssignedException\n+  */\n+\n+\n+ Destination addDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyAssignedException, InvalidDestinationException;\n+\n+ /**\n+  * Adds an destination for the facility and all services. Destination id doesn't need to be filled. If destination doesn't exist it will be created.\n+  *\n+  * @param perunSession\n+  * @param services\n+  * @param facility\n+  * @param destination (id of this destination doesn't need to be filled.)\n+  * @return destination with it's id set\n+  * @throws InvalidDestinationException if destination has invalid value in given destination type.\n+  */\n+\n+\n+ Destination addDestination(PerunSession perunSession,\n+                            List<Service> services,\n+                            Facility facility, Destination destination) throws InvalidDestinationException;\n+\n+ /**\n+  * Adds destination for all services defined on the facility.\n+  *\n+  * @param perunSession\n+  * @param facility\n+  * @param destination\n+  * @return list of added destinations\n+  * @throws InvalidDestinationException if destination has invalid value in given destination type.\n+  * @throws DestinationAlreadyAssignedException\n+  */\n+\n+\n+ List<Destination> addDestinationsForAllServicesOnFacility(PerunSession perunSession, Facility facility, Destination destination) throws DestinationAlreadyAssignedException, InvalidDestinationException;\n+\n+ /**\n+  * Defines service destination for all hosts using theirs hostnames.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param facility\n+  * @return list of added destinations\n+  * @throws InternalErrorException\n+  * @throws DestinationAlreadyAssignedException\n+  */\n+\n+\n+ List<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, Service service, Facility facility) throws DestinationAlreadyAssignedException;\n+\n+ /**\n+  * Defines services destination for all hosts using their hostnames.\n+  * Do it for all services in List.\n+  *\n+  * If some destination for service and facility already exist, do not create it but still return back in the list.\n+  *\n+  * @param perunSession\n+  * @param facility\n+  * @return list of added destinations (even if they already was added before)\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, List<Service> services, Facility facility);\n+\n+ /**\n+  * Defines services destination for all hosts using their hostnames.\n+  * Use all assigned services to resources for the facility.\n+  *\n+  * If some destination for service and facility already exist, do not create it but still return back in the list.\n+  *\n+  * @param perunSession\n+  * @param facility\n+  * @return list of added destinations (even if they already was added before)\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Destination> addDestinationsDefinedByHostsOnFacility(PerunSession perunSession, Facility facility);\n+\n+\n+ /**\n+  * Removes an destination from the facility and service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param facility\n+  * @param destination string contains destination address (mail, url, hostname, ...)\n+  * @throws InternalErrorException\n+  * @throws DestinationAlreadyRemovedException\n+  */\n+\n+\n+ void removeDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyRemovedException;\n+\n+ /**\n+  * Get destination by id\n+  *\n+  * @param perunSession\n+  * @param id\n+  * @return Destination with the id\n+  * @throws InternalErrorException\n+  * @throws DestinationNotExistsException\n+  */\n+\n+\n+ Destination getDestinationById(PerunSession perunSession, int id) throws DestinationNotExistsException;\n+\n+ /**\n+  * Get list of all destinations defined for the service and facility.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param facility\n+  * @return list list of destinations defined for the service and facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Destination> getDestinations(PerunSession perunSession, Service service, Facility facility);\n+\n+ /**\n+  * Get list of all destinations.\n+  *\n+  * @param perunSession\n+  * @return list of all destinations for session\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Destination> getDestinations(PerunSession perunSession);\n+\n+ /**\n+  * Get lists of all destinations for specific Facility\n+  *\n+  * @param perunSession\n+  * @param facility the facility\n+  * @return lists of all destinations for specific Facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Destination> getDestinations(PerunSession perunSession, Facility facility);\n+\n+ /**\n+  * Get list of all rich destinations defined for the facility.\n+  *\n+  * @param perunSession\n+  * @param facility\n+  * @return list of rich destinations defined for the facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility);\n+\n+ /**\n+  * Get list of all rich destinations defined for the service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @return list of rich destinations defined for the service\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service);\n+\n+ /**\n+  * Get list of all rich destinations defined for the service and the facility\n+  *\n+  * @param perunSession\n+  * @param facility\n+  * @param service\n+  * @return list of rich destinations defined for the service and the facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service);\n+\n+ /**\n+  * Removes all defined destinations for the service and facility.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllDestinations(PerunSession perunSession, Service service, Facility facility);\n+\n+ /**\n+  * Removes all defined destinations for the facility.\n+  *\n+  * @param perunSession\n+  * @param facility the facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllDestinations(PerunSession perunSession, Facility facility);\n+\n+ /**\n+  * Check if the service exits.\n+  *\n+  * @param sess\n+  * @param service\n+  * @throws InternalErrorException\n+  * @throws ServiceNotExistsException\n+  */\n+\n+\n+ void checkServiceExists(PerunSession sess, Service service) throws ServiceNotExistsException;\n+\n+ /**\n+  * Check if the service package exists.\n+  *\n+  * @param sess\n+  * @param servicesPackage\n+  * @throws InternalErrorException\n+  * @throws ServicesPackageNotExistsException\n+  */\n+\n+\n+ void checkServicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws ServicesPackageNotExistsException;\n+\n+ /**\n+  * Returns Destinations ID based on destination name and type.\n+  *\n+  * @param sess\n+  * @param name Name (value) of destination\n+  * @param type type of destination\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws DestinationNotExistsException\n+  */\n+\n+\n+ int getDestinationIdByName(PerunSession sess, String name, String type) throws DestinationNotExistsException;\n+\n+ /**\n+  * List all services associated with the facility (via resource).\n+  *\n+  * @param perunSession\n+  * @param facility\n+  *\n+  * @throws InternalErrorException\n+  *\n+  * @return list of services assigned  to facility\n+  */\n+\n+\n+ List<Service> getAssignedServices(PerunSession perunSession, Facility facility);\n+\n+ /**\n+  * List all destinations for all facilities which are joined by resources to the VO.\n+  *\n+  * @param sess\n+  * @param vo vo for which we are searching destinations\n+  * @return list of destinations\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo);\n+\n+ /**\n+  * Get count of all destinations.\n+  *\n+  * @param perunSession\n+  *\n+  * @return count of all destinations\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ int getDestinationsCount(PerunSession perunSession);\n+\n+ /**\n+  * Deletes destination.\n+  *\n+  * @param sess\n+  * @param destination destination to be deleted\n+  * @throws InternalErrorException\n+  * @throws DestinationAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+  * @throws RelationExistsException if the destination is used by some services and facilities\n+  */\n+\n+\n+ void deleteDestination(PerunSession sess, Destination destination) throws DestinationAlreadyRemovedException, RelationExistsException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 976
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "427",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "427",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}