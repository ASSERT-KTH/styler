{
    "project_name": "graphfoundation-ongdb",
    "error_id": "271",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "203",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/271/ByteCodeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/271/ByteCodeUtils.java\nindex 38a1d060969..10f1661fc82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/271/ByteCodeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/271/ByteCodeUtils.java\n@@ -17,210 +17,210 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.util.List;\n \n public final class ByteCodeUtils\n {\n-    private ByteCodeUtils()\n+  private ByteCodeUtils()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public static String byteCodeName(TypeReference reference)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    if (!reference.packageName().isEmpty())\n+    {\n+      builder.append(reference.packageName().replaceAll(\"\\\\.\", \"/\")).append('/');\n+    }\n+    if (reference.isInnerClass())\n     {\n-        throw new UnsupportedOperationException();\n+      builder.append(reference.declaringClassName()).append('$');\n     }\n+    builder.append(reference.name());\n+    return builder.toString();\n+  }\n \n-    public static String byteCodeName( TypeReference reference )\n+  public static String outerName(TypeReference reference)\n+  {\n+    if (!reference.isInnerClass())\n     {\n-        StringBuilder builder = new StringBuilder();\n-        if ( !reference.packageName().isEmpty() )\n-        {\n-            builder.append( reference.packageName().replaceAll( \"\\\\.\", \"/\" ) ).append( '/' );\n-        }\n-        if ( reference.isInnerClass() )\n-        {\n-            builder.append( reference.declaringClassName() ).append( '$' );\n-        }\n-        builder.append( reference.name() );\n-        return builder.toString();\n+      return null;\n     }\n \n-    public static String outerName( TypeReference reference )\n+    StringBuilder builder = new StringBuilder();\n+    if (!reference.packageName().isEmpty())\n     {\n-        if ( !reference.isInnerClass() )\n-        {\n-            return null;\n-        }\n+      builder.append(reference.packageName().replaceAll(\"\\\\.\", \"/\")).append('/');\n+    }\n+    builder.append(reference.simpleName());\n \n-        StringBuilder builder = new StringBuilder();\n-        if ( !reference.packageName().isEmpty() )\n-        {\n-            builder.append( reference.packageName().replaceAll( \"\\\\.\", \"/\" ) ).append( '/' );\n-        }\n-        builder.append( reference.simpleName() );\n+    return builder.toString();\n+  }\n \n-        return builder.toString();\n-    }\n+  public static String typeName(TypeReference reference)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    internalType(builder, reference, false);\n \n-    public static String typeName( TypeReference reference )\n-    {\n-        StringBuilder builder = new StringBuilder();\n-        internalType( builder, reference, false );\n+    return builder.toString();\n+  }\n \n-        return builder.toString();\n-    }\n+  public static String desc(MethodDeclaration declaration)\n+  {\n+    return internalDesc(declaration.erased(), false);\n+  }\n \n-    public static String desc( MethodDeclaration declaration )\n+  public static String desc(MethodReference reference)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(\"(\");\n+    for (TypeReference parameter : reference.parameters())\n     {\n-        return internalDesc( declaration.erased(), false );\n+      internalType(builder, parameter, false);\n     }\n+    builder.append(\")\");\n+    internalType(builder, reference.returns(), false);\n \n-    public static String desc( MethodReference reference )\n-    {\n-        StringBuilder builder = new StringBuilder(  );\n-        builder.append( \"(\" );\n-        for ( TypeReference parameter : reference.parameters() )\n-        {\n-            internalType( builder, parameter, false );\n-        }\n-        builder.append( \")\" );\n-        internalType( builder, reference.returns(), false );\n+    return builder.toString();\n+  }\n \n-        return builder.toString();\n+  public static String signature(TypeReference reference)\n+  {\n+    if (!reference.isGeneric())\n+    {\n+      return null;\n     }\n \n-    public static String signature( TypeReference reference )\n-    {\n-        if ( !reference.isGeneric() )\n-        {\n-            return null;\n-        }\n+    return internalSignature(reference);\n+  }\n \n-        return internalSignature( reference );\n+  public static String signature(MethodDeclaration declaration)\n+  {\n+    if (!declaration.isGeneric())\n+    {\n+      return null;\n     }\n+    return internalDesc(declaration, true);\n+  }\n+\n+  public static String[] exceptions(MethodDeclaration declaration)\n+  {\n \n-    public static String signature( MethodDeclaration declaration )\n+    List<TypeReference> throwsList = declaration.erased().throwsList();\n+    if (throwsList.isEmpty())\n     {\n-        if ( !declaration.isGeneric() )\n-        {\n-            return null;\n-        }\n-        return internalDesc( declaration, true );\n+      return null;\n     }\n-\n-    public static String[] exceptions( MethodDeclaration declaration )\n+    return throwsList.stream().map(ByteCodeUtils::byteCodeName).toArray(String[]::new);\n+  }\n+\n+  private static String internalDesc(MethodDeclaration declaration, boolean showErasure)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    List<MethodDeclaration.TypeParameter> typeParameters = declaration.typeParameters();\n+    if (showErasure && !typeParameters.isEmpty())\n     {\n-\n-        List<TypeReference> throwsList = declaration.erased().throwsList();\n-        if ( throwsList.isEmpty() )\n-        {\n-            return null;\n-        }\n-        return throwsList.stream().map( ByteCodeUtils::byteCodeName ).toArray( String[]::new );\n+      builder.append(\"<\");\n+      for (MethodDeclaration.TypeParameter typeParameter : typeParameters)\n+      {\n+        builder.append(typeParameter.name()).append(\":\");\n+        internalType(builder, typeParameter.extendsBound(), true);\n+      }\n+      builder.append(\">\");\n     }\n-\n-    private static String internalDesc( MethodDeclaration declaration, boolean showErasure )\n+    builder.append(\"(\");\n+    for (Parameter parameter : declaration.parameters())\n     {\n-        StringBuilder builder = new StringBuilder();\n-        List<MethodDeclaration.TypeParameter> typeParameters = declaration.typeParameters();\n-        if ( showErasure && !typeParameters.isEmpty() )\n-        {\n-            builder.append( \"<\" );\n-            for ( MethodDeclaration.TypeParameter typeParameter : typeParameters )\n-            {\n-                builder.append( typeParameter.name() ).append( \":\" );\n-                internalType( builder, typeParameter.extendsBound(), true );\n-            }\n-            builder.append( \">\" );\n-        }\n-        builder.append( \"(\" );\n-        for ( Parameter parameter : declaration.parameters() )\n-        {\n-            internalType( builder, parameter.type(), showErasure );\n-        }\n-        builder.append( \")\" );\n-        internalType( builder, declaration.returnType(), showErasure );\n-        List<TypeReference> throwsList = declaration.throwsList();\n-        if ( showErasure && throwsList.stream().anyMatch( TypeReference::isTypeParameter ) )\n-        {\n-            builder.append( \"^\" );\n-            throwsList.forEach( t -> internalType( builder, t, false ) );\n-        }\n-        return builder.toString();\n+      internalType(builder, parameter.type(), showErasure);\n     }\n-\n-    private static String internalSignature( TypeReference reference )\n+    builder.append(\")\");\n+    internalType(builder, declaration.returnType(), showErasure);\n+    List<TypeReference> throwsList = declaration.throwsList();\n+    if (showErasure && throwsList.stream().anyMatch(TypeReference::isTypeParameter))\n     {\n-        return internalType( new StringBuilder(), reference, true ).toString();\n+      builder.append(\"^\");\n+      throwsList.forEach(t -> internalType(builder, t, false));\n+    }\n+    return builder.toString();\n+  }\n+\n+  private static String internalSignature(TypeReference reference)\n+  {\n+    return internalType(new StringBuilder(), reference, true).toString();\n+  }\n+\n+  private static StringBuilder internalType(StringBuilder builder, TypeReference reference,\n+                                            boolean showErasure)\n+  {\n+    String name = reference.name();\n+    if (reference.isArray())\n+    {\n+      builder.append(\"[\");\n     }\n \n-    private static StringBuilder internalType( StringBuilder builder, TypeReference reference,\n-            boolean showErasure )\n+    switch (name)\n     {\n-        String name = reference.name();\n-        if ( reference.isArray() )\n+      case \"int\":\n+        builder.append(\"I\");\n+        break;\n+      case \"long\":\n+        builder.append(\"J\");\n+        break;\n+      case \"byte\":\n+        builder.append(\"B\");\n+        break;\n+      case \"short\":\n+        builder.append(\"S\");\n+        break;\n+      case \"char\":\n+        builder.append(\"C\");\n+        break;\n+      case \"float\":\n+        builder.append(\"F\");\n+        break;\n+      case \"double\":\n+        builder.append(\"D\");\n+        break;\n+      case \"boolean\":\n+        builder.append(\"Z\");\n+        break;\n+      case \"void\":\n+        builder.append(\"V\");\n+        break;\n+\n+      default:\n+        if (reference.isTypeParameter())\n+        {\n+          builder.append(\"T\").append(name);\n+        } else\n         {\n-            builder.append( \"[\" );\n+          builder.append(\"L\");\n+          String packageName = reference.packageName().replaceAll(\"\\\\.\", \"\\\\/\");\n+          if (!packageName.isEmpty())\n+          {\n+            builder.append(packageName).append(\"/\");\n+          }\n+          if (reference.isInnerClass())\n+          {\n+            builder.append(reference.declaringClassName()).append('$');\n+          }\n+          builder.append(name.replaceAll(\"\\\\.\", \"\\\\/\"));\n         }\n \n-        switch ( name )\n+        List<TypeReference> parameters = reference.parameters();\n+        if (showErasure && !parameters.isEmpty())\n         {\n-        case \"int\":\n-            builder.append( \"I\" );\n-            break;\n-        case \"long\":\n-            builder.append( \"J\" );\n-            break;\n-        case \"byte\":\n-            builder.append( \"B\" );\n-            break;\n-        case \"short\":\n-            builder.append( \"S\" );\n-            break;\n-        case \"char\":\n-            builder.append( \"C\" );\n-            break;\n-        case \"float\":\n-            builder.append( \"F\" );\n-            break;\n-        case \"double\":\n-            builder.append( \"D\" );\n-            break;\n-        case \"boolean\":\n-            builder.append( \"Z\" );\n-            break;\n-        case \"void\":\n-            builder.append( \"V\" );\n-            break;\n-\n-        default:\n-            if ( reference.isTypeParameter() )\n-            {\n-                builder.append( \"T\" ).append( name );\n-            }\n-            else\n-            {\n-                builder.append( \"L\" );\n-                String packageName = reference.packageName().replaceAll( \"\\\\.\", \"\\\\/\" );\n-                if ( !packageName.isEmpty() )\n-                {\n-                    builder.append( packageName ).append( \"/\" );\n-                }\n-                if ( reference.isInnerClass() )\n-                {\n-                    builder.append( reference.declaringClassName() ).append( '$' );\n-                }\n-                builder.append( name.replaceAll( \"\\\\.\", \"\\\\/\" ) );\n-            }\n-\n-            List<TypeReference> parameters = reference.parameters();\n-            if ( showErasure && !parameters.isEmpty() )\n-            {\n-                builder.append( \"<\" );\n-                parameters.forEach( p -> internalType( builder, p, true ) );\n-                builder.append( \">\" );\n-            }\n-            builder.append( \";\" );\n-\n+          builder.append(\"<\");\n+          parameters.forEach(p -> internalType(builder, p, true));\n+          builder.append(\">\");\n         }\n-        return builder;\n+        builder.append(\";\");\n+\n     }\n+    return builder;\n+  }\n }\n",
            "diff_size": 276
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}