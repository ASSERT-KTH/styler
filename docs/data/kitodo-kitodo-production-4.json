{
    "project_name": "kitodo-kitodo-production",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "75",
                "severity": "warning",
                "message": "Line is longer than 140 characters (found 187).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @param metadataFile the metadatafile to read metadata\n     */\n    public void generateValueForMetadataScript(MetadataScript metadataScript, Collection<Metadata> metadataCollection, Process process, LegacyMetsModsDigitalDocumentHelper metadataFile) {\n        if (metadataScript.getRoot().startsWith(\"@\")) {\n            for (Metadata metadata : metadataCollection) {\n                if (metadata.getKey().equals(metadataScript.getRootName())) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "76",
                    "column": "9",
                    "severity": "warning",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/4/EditDataScript.java\nindex 5a6a2605dd8..343d5c14eee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/4/EditDataScript.java\n@@ -72,7 +72,8 @@ public abstract class EditDataScript {\n      * @param process the process to replace variables\n      * @param metadataFile the metadatafile to read metadata\n      */\n-    public void generateValueForMetadataScript(MetadataScript metadataScript, Collection<Metadata> metadataCollection, Process process, LegacyMetsModsDigitalDocumentHelper metadataFile) {\n+    public void generateValueForMetadataScript(MetadataScript metadataScript, Collection<Metadata> metadataCollection ,Process process\n+        , LegacyMetsModsDigitalDocumentHelper metadataFile) {\n         if (metadataScript.getRoot().startsWith(\"@\")) {\n             for (Metadata metadata : metadataCollection) {\n                 if (metadata.getKey().equals(metadataScript.getRootName())) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/4/EditDataScript.java\nindex 5a6a2605dd8..bafb5ea0e9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/4/EditDataScript.java\n@@ -36,9 +36,10 @@ public abstract class EditDataScript {\n \n     /**\n      * Processes the given script for the given process.\n+     *\n      * @param metadataFile - the file to be changed\n-     * @param process - the process to run the script on\n-     * @param script - the script to run\n+     * @param process      - the process to run the script on\n+     * @param script       - the script to run\n      */\n     public void process(LegacyMetsModsDigitalDocumentHelper metadataFile, Process process, String script) {\n         List<MetadataScript> scripts = parseScript(script);\n@@ -49,8 +50,9 @@ public abstract class EditDataScript {\n \n     /**\n      * Executes the given script on the given file for the given process.\n-     * @param metadataFile the file to edit\n-     * @param process the related process\n+     *\n+     * @param metadataFile   the file to edit\n+     * @param process        the related process\n      * @param metadataScript the script to execute\n      */\n     public abstract void executeScript(LegacyMetsModsDigitalDocumentHelper metadataFile, Process process,\n@@ -67,12 +69,14 @@ public abstract class EditDataScript {\n \n     /**\n      * Generates the script value when a metadata root is given.\n-     * @param metadataScript the script to set the value\n+     *\n+     * @param metadataScript     the script to set the value\n      * @param metadataCollection the metadata collection to extract the value from\n-     * @param process the process to replace variables\n-     * @param metadataFile the metadatafile to read metadata\n+     * @param process            the process to replace variables\n+     * @param metadataFile       the metadatafile to read metadata\n      */\n-    public void generateValueForMetadataScript(MetadataScript metadataScript, Collection<Metadata> metadataCollection, Process process, LegacyMetsModsDigitalDocumentHelper metadataFile) {\n+    public void generateValueForMetadataScript(MetadataScript metadataScript, Collection<Metadata> metadataCollection, Process process,\n+                                               LegacyMetsModsDigitalDocumentHelper metadataFile) {\n         if (metadataScript.getRoot().startsWith(\"@\")) {\n             for (Metadata metadata : metadataCollection) {\n                 if (metadata.getKey().equals(metadataScript.getRootName())) {\n@@ -82,7 +86,7 @@ public abstract class EditDataScript {\n         } else if (metadataScript.getRoot().startsWith(\"$\")) {\n             LegacyPrefsHelper legacyPrefsHelper = ServiceManager.getRulesetService().getPreferences(process.getRuleset());\n             VariableReplacer replacer = new VariableReplacer(metadataFile, legacyPrefsHelper,\n-                    process, null);\n+                process, null);\n \n             String replaced = replacer.replace(metadataScript.getRootName());\n             metadataScript.setValue(replaced);\n@@ -91,12 +95,13 @@ public abstract class EditDataScript {\n \n     /**\n      * Saves the changed workpiece and process.\n+     *\n      * @param workpiece the workpiece to save\n-     * @param process the process to save\n+     * @param process   the process to save\n      */\n     public void saveChanges(Workpiece workpiece, Process process) {\n         try (OutputStream out = ServiceManager.getFileService()\n-                .write(ServiceManager.getFileService().getMetadataFilePath(process))) {\n+            .write(ServiceManager.getFileService().getMetadataFilePath(process))) {\n             ServiceManager.getMetsService().save(workpiece, out);\n             ServiceManager.getProcessService().saveToIndex(process, false);\n         } catch (IOException | CustomResponseException | DataException e) {\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "57",
                    "column": "1",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "57",
                    "column": "1",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/4/EditDataScript.java\nindex 5a6a2605dd8..4160b57f084 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/4/EditDataScript.java\n@@ -53,10 +53,8 @@ public abstract class EditDataScript {\n      * @param process the related process\n      * @param metadataScript the script to execute\n      */\n-    public abstract void executeScript(LegacyMetsModsDigitalDocumentHelper metadataFile, Process process,\n-                                       MetadataScript metadataScript);\n-\n-    private List<MetadataScript> parseScript(String script) {\n+    public abstract void executeScript(LegacyMetsModsDigitalDocumentHelper metadataFile, Process process, MetadataScript metadataScript);\n+private List<MetadataScript> parseScript(String script) {\n         String[] commands = script.split(\";\");\n         List<MetadataScript> metadataScripts = new ArrayList<>();\n         for (String command : commands) {\n@@ -103,4 +101,4 @@ public abstract class EditDataScript {\n             logger.error(e.getMessage());\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "60",
                    "column": "5",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/4/EditDataScript.java\nindex 5a6a2605dd8..56d276f78ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/4/EditDataScript.java\n@@ -16,7 +16,6 @@ import java.io.OutputStream;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.kitodo.api.Metadata;\n@@ -40,6 +39,8 @@ public abstract class EditDataScript {\n      * @param process - the process to run the script on\n      * @param script - the script to run\n      */\n+\n+\n     public void process(LegacyMetsModsDigitalDocumentHelper metadataFile, Process process, String script) {\n         List<MetadataScript> scripts = parseScript(script);\n         for (MetadataScript metadataScript : scripts) {\n@@ -53,9 +54,9 @@ public abstract class EditDataScript {\n      * @param process the related process\n      * @param metadataScript the script to execute\n      */\n-    public abstract void executeScript(LegacyMetsModsDigitalDocumentHelper metadataFile, Process process,\n-                                       MetadataScript metadataScript);\n \n+\n+    public abstract void executeScript(LegacyMetsModsDigitalDocumentHelper metadataFile, Process process, MetadataScript metadataScript);\n     private List<MetadataScript> parseScript(String script) {\n         String[] commands = script.split(\";\");\n         List<MetadataScript> metadataScripts = new ArrayList<>();\n@@ -72,6 +73,8 @@ public abstract class EditDataScript {\n      * @param process the process to replace variables\n      * @param metadataFile the metadatafile to read metadata\n      */\n+\n+\n     public void generateValueForMetadataScript(MetadataScript metadataScript, Collection<Metadata> metadataCollection, Process process, LegacyMetsModsDigitalDocumentHelper metadataFile) {\n         if (metadataScript.getRoot().startsWith(\"@\")) {\n             for (Metadata metadata : metadataCollection) {\n@@ -81,9 +84,7 @@ public abstract class EditDataScript {\n             }\n         } else if (metadataScript.getRoot().startsWith(\"$\")) {\n             LegacyPrefsHelper legacyPrefsHelper = ServiceManager.getRulesetService().getPreferences(process.getRuleset());\n-            VariableReplacer replacer = new VariableReplacer(metadataFile, legacyPrefsHelper,\n-                    process, null);\n-\n+            VariableReplacer replacer = new VariableReplacer(metadataFile, legacyPrefsHelper, process, null);\n             String replaced = replacer.replace(metadataScript.getRootName());\n             metadataScript.setValue(replaced);\n         }\n@@ -94,13 +95,14 @@ public abstract class EditDataScript {\n      * @param workpiece the workpiece to save\n      * @param process the process to save\n      */\n+\n+\n     public void saveChanges(Workpiece workpiece, Process process) {\n-        try (OutputStream out = ServiceManager.getFileService()\n-                .write(ServiceManager.getFileService().getMetadataFilePath(process))) {\n+        try (OutputStream out = ServiceManager.getFileService().write(ServiceManager.getFileService().getMetadataFilePath(process))) {\n             ServiceManager.getMetsService().save(workpiece, out);\n             ServiceManager.getProcessService().saveToIndex(process, false);\n         } catch (IOException | CustomResponseException | DataException e) {\n             logger.error(e.getMessage());\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "76",
                    "column": "9",
                    "severity": "warning",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/4/EditDataScript.java\nindex 5a6a2605dd8..343d5c14eee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/4/EditDataScript.java\n@@ -72,7 +72,8 @@ public abstract class EditDataScript {\n      * @param process the process to replace variables\n      * @param metadataFile the metadatafile to read metadata\n      */\n-    public void generateValueForMetadataScript(MetadataScript metadataScript, Collection<Metadata> metadataCollection, Process process, LegacyMetsModsDigitalDocumentHelper metadataFile) {\n+    public void generateValueForMetadataScript(MetadataScript metadataScript, Collection<Metadata> metadataCollection ,Process process\n+        , LegacyMetsModsDigitalDocumentHelper metadataFile) {\n         if (metadataScript.getRoot().startsWith(\"@\")) {\n             for (Metadata metadata : metadataCollection) {\n                 if (metadata.getKey().equals(metadataScript.getRootName())) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "column": "5",
                    "severity": "warning",
                    "message": "'void' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/4/EditDataScript.java\nindex 5a6a2605dd8..fc1eff481fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/4/EditDataScript.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/4/EditDataScript.java\n@@ -72,8 +72,9 @@ public abstract class EditDataScript {\n      * @param process the process to replace variables\n      * @param metadataFile the metadatafile to read metadata\n      */\n-    public void generateValueForMetadataScript(MetadataScript metadataScript, Collection<Metadata> metadataCollection, Process process, LegacyMetsModsDigitalDocumentHelper metadataFile) {\n-        if (metadataScript.getRoot().startsWith(\"@\")) {\n+    public\n+    void generateValueForMetadataScript(MetadataScript metadataScript, Collection<Metadata> metadataCollection, Process process, LegacyMetsModsDigitalDocumentHelper metadataFile) {\n+         if (metadataScript.getRoot().startsWith(\"@\")) {\n             for (Metadata metadata : metadataCollection) {\n                 if (metadata.getKey().equals(metadataScript.getRootName())) {\n                     metadataScript.setValue(((MetadataEntry) metadata).getValue());\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}