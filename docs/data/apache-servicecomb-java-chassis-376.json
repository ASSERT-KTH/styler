{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "376",
    "information": {
        "errors": [
            {
                "line": "91",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   *         <br>\n   *         special for producer:<br>\n   *           if response is failure, then after encode response, response.result will be exception.errorData, not a exception\n   */\n  CompletableFuture<Response> onFilter(Invocation invocation, FilterNode nextNode);\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/376/Filter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/376/Filter.java\nindex 6ea36313214..9b8babcc796 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/376/Filter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/376/Filter.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.core.filter;\n \n import java.util.Arrays;\n@@ -70,7 +71,6 @@ public interface Filter {\n   }\n \n   /**\n-   *\n    * @return can be used for the specific invocation type\n    */\n   @Nonnull\n@@ -79,16 +79,15 @@ public interface Filter {\n   }\n \n   /**\n-   *\n    * @param invocation invocation\n-   * @param nextNode node filter node\n+   * @param nextNode   node filter node\n    * @return response future<br>\n-   *         even Response can express fail data<br>\n-   *         but Response only express success data in filter chain<br>\n-   *         all fail data can only express by exception<br>\n-   *         <br>\n-   *         special for producer:<br>\n-   *           if response is failure, then after encode response, response.result will be exception.errorData, not a exception\n+   * even Response can express fail data<br>\n+   * but Response only express success data in filter chain<br>\n+   * all fail data can only express by exception<br>\n+   * <br>\n+   * special for producer:<br>\n+   * if response is failure, then after encode response, response.result will be exception.errorData, not a exception\n    */\n   CompletableFuture<Response> onFilter(Invocation invocation, FilterNode nextNode);\n }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/376/Filter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/376/Filter.java\nindex 6ea36313214..666c99972bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/376/Filter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/376/Filter.java\n@@ -91,4 +91,4 @@ public interface Filter {\n    *           if response is failure, then after encode response, response.result will be exception.errorData, not a exception\n    */\n   CompletableFuture<Response> onFilter(Invocation invocation, FilterNode nextNode);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/376/Filter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/376/Filter.java\nindex 6ea36313214..c5c07d3958e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/376/Filter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/376/Filter.java\n@@ -19,9 +19,7 @@ package org.apache.servicecomb.core.filter;\n import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.CompletableFuture;\n-\n import javax.annotation.Nonnull;\n-\n import org.apache.servicecomb.core.Invocation;\n import org.apache.servicecomb.core.provider.consumer.InvokerUtils;\n import org.apache.servicecomb.swagger.invocation.InvocationType;\n@@ -55,6 +53,7 @@ import org.apache.servicecomb.swagger.invocation.Response;\n  *        (<a href=\"https://vertx.io/docs/vertx-core/java/#golden_rule\">reactive golden rule</a>)\n  * </pre>\n  */\n+\n public interface Filter {\n   default boolean isEnabled() {\n     return true;\n@@ -73,6 +72,7 @@ public interface Filter {\n    *\n    * @return can be used for the specific invocation type\n    */\n+\n   @Nonnull\n   default List<InvocationType> getInvocationTypes() {\n     return Arrays.asList(InvocationType.CONSUMER, InvocationType.PRODUCER);\n@@ -90,5 +90,6 @@ public interface Filter {\n    *         special for producer:<br>\n    *           if response is failure, then after encode response, response.result will be exception.errorData, not a exception\n    */\n+\n   CompletableFuture<Response> onFilter(Invocation invocation, FilterNode nextNode);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}