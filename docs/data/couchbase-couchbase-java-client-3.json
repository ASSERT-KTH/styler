{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "121",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @return a {@link JsonArrayDocument}.\n     */\n    public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n        return new JsonArrayDocument(id, expiry, content, cas, mutationToken);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/3/JsonArrayDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/3/JsonArrayDocument.java\nindex 51564a822f2..9e62977fd59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/3/JsonArrayDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/3/JsonArrayDocument.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.java.document;\n \n import com.couchbase.client.core.message.kv.MutationToken;\n@@ -118,7 +119,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param mutationToken the optional mutation token.\n      * @return a {@link JsonArrayDocument}.\n      */\n-    public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n+    public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas,\n+                                           MutationToken mutationToken) {\n         return new JsonArrayDocument(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/3/JsonArrayDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/3/JsonArrayDocument.java\nindex 51564a822f2..f15726caccd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/3/JsonArrayDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/3/JsonArrayDocument.java\n@@ -187,4 +187,4 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n     private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n         readFromSerializedStream(stream);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/3/JsonArrayDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/3/JsonArrayDocument.java\nindex 51564a822f2..e1b34a8eb0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/3/JsonArrayDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/3/JsonArrayDocument.java\n@@ -23,7 +23,6 @@ package com.couchbase.client.java.document;\n \n import com.couchbase.client.core.message.kv.MutationToken;\n import com.couchbase.client.java.document.json.JsonArray;\n-\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -38,9 +37,11 @@ import java.io.Serializable;\n  * @author Michael Nitschinger\n  * @since 2.0.0\n  */\n+\n+\n public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Serializable {\n \n-    private static final long serialVersionUID = -2300114084316366873L;\n+    private static final long serialVersionUID = - 2300114084316366873L;\n \n     /**\n      * Creates a {@link JsonDocument} which the document id.\n@@ -59,6 +60,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param content the content of the document.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonArrayDocument create(String id, JsonArray content) {\n         return new JsonArrayDocument(id, 0, content, 0, null);\n     }\n@@ -71,6 +73,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonArrayDocument create(String id, JsonArray content, long cas) {\n         return new JsonArrayDocument(id, 0, content, cas, null);\n     }\n@@ -83,6 +86,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonArrayDocument}.\n      */\n+\n     public static JsonArrayDocument create(String id, int expiry, JsonArray content) {\n         return new JsonArrayDocument(id, expiry, content, 0, null);\n     }\n@@ -100,6 +104,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonArrayDocument}.\n      */\n+\n     public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas) {\n         return new JsonArrayDocument(id, expiry, content, cas, null);\n     }\n@@ -118,6 +123,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param mutationToken the optional mutation token.\n      * @return a {@link JsonArrayDocument}.\n      */\n+\n     public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n         return new JsonArrayDocument(id, expiry, content, cas, mutationToken);\n     }\n@@ -129,6 +135,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param id the per-bucket unique document id.\n      * @return a copied {@link JsonArrayDocument} with the changed properties.\n      */\n+\n     public static JsonArrayDocument from(JsonArrayDocument doc, String id) {\n         return JsonArrayDocument.create(id, doc.expiry(), doc.content(), doc.cas(), doc.mutationToken());\n     }\n@@ -140,6 +147,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonArrayDocument from(JsonArrayDocument doc, JsonArray content) {\n         return JsonArrayDocument.create(doc.id(), doc.expiry(), content, doc.cas(), doc.mutationToken());\n     }\n@@ -152,6 +160,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonArrayDocument from(JsonArrayDocument doc, String id, JsonArray content) {\n         return JsonArrayDocument.create(id, doc.expiry(), content, doc.cas(), doc.mutationToken());\n     }\n@@ -163,6 +172,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonArrayDocument from(JsonArrayDocument doc, long cas) {\n         return JsonArrayDocument.create(doc.id(), doc.expiry(), doc.content(), cas, doc.mutationToken());\n     }\n@@ -176,6 +186,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param expiry the expiration time of the document.\n      * @param mutationToken the optional mutation token.\n      */\n+\n+\n     private JsonArrayDocument(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n         super(id, expiry, content, cas, mutationToken);\n     }\n@@ -187,4 +199,4 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n     private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n         readFromSerializedStream(stream);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}