{
    "project_name": "kitodo-kitodo-production",
    "error_id": "41",
    "information": {
        "errors": [
            {
                "line": "261",
                "column": "9",
                "severity": "warning",
                "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "            }\n        }\n        if(StringUtils.isNotBlank(title)) {\n            title = title.substring(0, title.length() - 1);\n        }\n        parentProcess.setTitle(title);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/41/HierarchyMigrationTask.java\nindex 38e10a59ebd..5583c0f6d7d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/41/HierarchyMigrationTask.java\n@@ -258,7 +258,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n                 title += ((MetadataEntry) metadatum).getValue() + \"_\";\n             }\n         }\n-        if(StringUtils.isNotBlank(title)) {\n+        if (StringUtils.isNotBlank(title)) {\n             title = title.substring(0, title.length() - 1);\n         }\n         parentProcess.setTitle(title);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/41/HierarchyMigrationTask.java\nindex 38e10a59ebd..e1926f693e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/41/HierarchyMigrationTask.java\n@@ -115,8 +115,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * Clone constructor. Provides the ability to restart the task if it was\n      * previously interrupted.\n      *\n-     * @param source\n-     *            terminated thread\n+     * @param source terminated thread\n      */\n     private HierarchyMigrationTask(HierarchyMigrationTask source) {\n         super(source);\n@@ -145,7 +144,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n         try {\n             if (Objects.isNull(processesList)) {\n                 processesList = projects.parallelStream().flatMap(project -> project.getProcesses().parallelStream())\n-                        .map(Process::getId).collect(Collectors.toList());\n+                    .map(Process::getId).collect(Collectors.toList());\n             }\n             while (progress < processesList.size()) {\n                 Process process = processService.getById(processesList.get(progress));\n@@ -166,8 +165,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n     /**\n      * This function does the actual work and migrates exactly one process.\n      *\n-     * @param process\n-     *            process to migrate\n+     * @param process process to migrate\n      */\n     private void migrate(Process process) throws IOException, ProcessGenerationException, DataException, DAOException, CommandException {\n         logger.info(\"Starting to convert process {} (ID {})...\", process.getTitle(), process.getId());\n@@ -195,8 +193,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * The metadata file and the anchor file are converted to the new internal\n      * format using XSLT.\n      *\n-     * @param process\n-     *            process to migrate\n+     * @param process process to migrate\n      */\n     private static void migrateMetadataFiles(Process process) throws IOException {\n         URI metadataFilePath = fileService.getMetadataFilePath(process, true, true);\n@@ -213,9 +210,9 @@ public class HierarchyMigrationTask extends EmptyTask {\n         URI anchorFilePath = fileService.createAnchorFile(metadataFilePath);\n         Workpiece anchorWorkpiece = metsService.loadWorkpiece(anchorFilePath);\n         Optional<String> parentRecordId = anchorWorkpiece.getRootElement().getMetadata().parallelStream()\n-                .filter(metadata -> metadata.getKey().equals(\"CatalogIDDigital\"))\n-                .filter(MetadataEntry.class::isInstance).map(MetadataEntry.class::cast).map(MetadataEntry::getValue)\n-                .findFirst();\n+            .filter(metadata -> metadata.getKey().equals(\"CatalogIDDigital\"))\n+            .filter(MetadataEntry.class::isInstance).map(MetadataEntry.class::cast).map(MetadataEntry::getValue)\n+            .findFirst();\n         return parentRecordId;\n     }\n \n@@ -225,13 +222,12 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * written. The METS file of the child process is migrated and a link\n      * between the processes is written in the database.\n      *\n-     * @param childProcess\n-     *            process to migrate\n+     * @param childProcess process to migrate\n      * @return a data object with the ID of the created parent process and the\n-     *         current number of the child process\n+     * current number of the child process\n      */\n     private List<Integer> createParentProcess(Process childProcess)\n-            throws ProcessGenerationException, IOException, DataException, CommandException {\n+        throws ProcessGenerationException, IOException, DataException, CommandException {\n \n         processGenerator.generateProcess(childProcess.getTemplate().getId(), childProcess.getProject().getId());\n         Process parentProcess = processGenerator.getGeneratedProcess();\n@@ -258,7 +254,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n                 title += ((MetadataEntry) metadatum).getValue() + \"_\";\n             }\n         }\n-        if(StringUtils.isNotBlank(title)) {\n+        if (StringUtils.isNotBlank(title)) {\n             title = title.substring(0, title.length() - 1);\n         }\n         parentProcess.setTitle(title);\n@@ -269,13 +265,11 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * Links parent process and child process in the database. The processes are\n      * saved.\n      *\n-     * @param parentProcess\n-     *            parent process to link\n-     * @param childProcess\n-     *            child process to link\n+     * @param parentProcess parent process to link\n+     * @param childProcess  child process to link\n      */\n     private static void linkParentProcessWithChildProcess(Process parentProcess, Process childProcess)\n-            throws DataException {\n+        throws DataException {\n \n         parentProcess.getChildren().add(childProcess);\n         childProcess.setParent(parentProcess);\n@@ -286,8 +280,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * Generates the METS file for the parent process from the process anchor\n      * file.\n      *\n-     * @param process\n-     *            process to migrate\n+     * @param process process to migrate\n      */\n     private void createParentMetsFile(Process process) throws IOException {\n         URI metadataFileUri = fileService.getMetadataFilePath(process);\n@@ -304,8 +297,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n     /**\n      * Changes the METS file of the child process.\n      *\n-     * @param metadataFilePath\n-     *            URI of the metadata file\n+     * @param metadataFilePath URI of the metadata file\n      * @return the current number, may be {@code null}\n      */\n     private static Integer convertChildMetsFile(URI metadataFilePath) throws IOException {\n@@ -327,30 +319,27 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * volumes, supplementary volumes are counted on afterwards (thus, in the\n      * order in which the books are usually placed on a shelf).\n      *\n-     * @param includedStructualElement\n-     *            outline element with metadata\n+     * @param includedStructualElement outline element with metadata\n      * @return the CurrentNo, or {@code null}\n      */\n     private static Integer getCurrentNo(IncludedStructuralElement includedStructualElement) {\n         Integer currentNo = includedStructualElement.getMetadata().parallelStream()\n-                .filter(metadata -> metadata.getKey().equals(\"CurrentNo\")).filter(MetadataEntry.class::isInstance)\n-                .map(MetadataEntry.class::cast).map(MetadataEntry::getValue).filter(value -> value.matches(\"\\\\d+\"))\n-                .map(Integer::valueOf).findFirst().orElse(null);\n+            .filter(metadata -> metadata.getKey().equals(\"CurrentNo\")).filter(MetadataEntry.class::isInstance)\n+            .map(MetadataEntry.class::cast).map(MetadataEntry::getValue).filter(value -> value.matches(\"\\\\d+\"))\n+            .map(Integer::valueOf).findFirst().orElse(null);\n         return currentNo;\n     }\n \n     /**\n      * Links a child process in an existing parent process.\n      *\n-     * @param childProcess\n-     *            child process to link\n-     * @param parentData\n-     *            a data object with the ID of the parent process and the\n-     *            current numbers of the child processes already linked with the\n-     *            parent\n+     * @param childProcess child process to link\n+     * @param parentData   a data object with the ID of the parent process and the\n+     *                     current numbers of the child processes already linked with the\n+     *                     parent\n      */\n     private static void linkProcessInParent(Process childProcess, List<Integer> parentData)\n-            throws IOException, DAOException, DataException {\n+        throws IOException, DAOException, DataException {\n \n         URI metadataFilePath = fileService.getMetadataFilePath(childProcess);\n         Integer currentNo = convertChildMetsFile(metadataFilePath);\n@@ -365,13 +354,11 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * Calculates the point at which the child process must be inserted in the\n      * parent hierarchy.\n      *\n-     * @param parentData\n-     *            a data object with the ID of the parent process (here unused)\n-     *            and the current numbers of the child processes already linked\n-     *            with the parent, which may be {@code null}\n-     * @param currentNo\n-     *            the current number of the child process to link, may be\n-     *            {@code null}\n+     * @param parentData a data object with the ID of the parent process (here unused)\n+     *                   and the current numbers of the child processes already linked\n+     *                   with the parent, which may be {@code null}\n+     * @param currentNo  the current number of the child process to link, may be\n+     *                   {@code null}\n      * @return the insertion position\n      */\n     private static int calculateInsertionPosition(List<Integer> parentData, Integer currentNo) {\n@@ -391,8 +378,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n     /**\n      * Renames the anchor file. It is clear that this has been migrated.\n      *\n-     * @param process\n-     *            process to migrate\n+     * @param process process to migrate\n      */\n     private static void renameAnchorFile(Process process) throws IOException {\n         URI anchorFile = fileService.createAnchorFile(fileService.getMetadataFilePath(process));\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/41/HierarchyMigrationTask.java\nindex 38e10a59ebd..877ee9e8af9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/41/HierarchyMigrationTask.java\n@@ -258,7 +258,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n                 title += ((MetadataEntry) metadatum).getValue() + \"_\";\n             }\n         }\n-        if(StringUtils.isNotBlank(title)) {\n+        if (StringUtils.isNotBlank(title)) {\n             title = title.substring(0, title.length() - 1);\n         }\n         parentProcess.setTitle(title);\n@@ -398,4 +398,4 @@ public class HierarchyMigrationTask extends EmptyTask {\n         URI anchorFile = fileService.createAnchorFile(fileService.getMetadataFilePath(process));\n         fileService.renameFile(anchorFile, \"meta_anchor.migrated\");\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "228",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 283).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "245",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "351",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 328).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "367",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/41/HierarchyMigrationTask.java\nindex 38e10a59ebd..4273dec68fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/41/HierarchyMigrationTask.java\n@@ -22,7 +22,6 @@ import java.util.Objects;\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n-\n import org.apache.commons.lang.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n@@ -49,6 +48,7 @@ import org.kitodo.production.services.dataformat.MetsService;\n import org.kitodo.production.services.file.FileService;\n \n public class HierarchyMigrationTask extends EmptyTask {\n+\n     private static final Logger logger = LogManager.getLogger(HierarchyMigrationTask.class);\n \n     /**\n@@ -106,6 +106,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n      */\n     private int progress = 0;\n \n+\n     public HierarchyMigrationTask(Collection<Project> projects) {\n         super(projects.stream().map(Project::getTitle).collect(Collectors.joining(\", \")));\n         this.projects = projects;\n@@ -118,6 +119,8 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * @param source\n      *            terminated thread\n      */\n+\n+\n     private HierarchyMigrationTask(HierarchyMigrationTask source) {\n         super(source);\n         this.processesList = source.processesList;\n@@ -130,6 +133,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * the class name, but here it is different from the class name in lower\n      * case.\n      */\n+\n     @Override\n     public String getDisplayName() {\n         return Helper.getTranslation(getClass().getSimpleName().toLowerCase());\n@@ -140,13 +144,14 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * the process list (if this has not already been done), processes it and\n      * updates the progress display in the screen output.\n      */\n+\n     @Override\n     public void run() {\n         try {\n             if (Objects.isNull(processesList)) {\n-                processesList = projects.parallelStream().flatMap(project -> project.getProcesses().parallelStream())\n-                        .map(Process::getId).collect(Collectors.toList());\n+                processesList = projects.parallelStream().flatMap(project -> project.getProcesses().parallelStream()).map(Process::getId).collect(Collectors.toList());\n             }\n+\n             while (progress < processesList.size()) {\n                 Process process = processService.getById(processesList.get(progress));\n                 if (fileService.processOwnsAnchorXML(process, true) && !fileService.processOwnsYearXML(process, true)) {\n@@ -169,6 +174,8 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * @param process\n      *            process to migrate\n      */\n+\n+\n     private void migrate(Process process) throws IOException, ProcessGenerationException, DataException, DAOException, CommandException {\n         logger.info(\"Starting to convert process {} (ID {})...\", process.getTitle(), process.getId());\n         long begin = System.nanoTime();\n@@ -183,10 +190,12 @@ public class HierarchyMigrationTask extends EmptyTask {\n             renameAnchorFile(process);\n         } else {\n             logger.warn(\"Process {} (ID {}): Parent has no identifier! Cannot create parent process.\",\n-                process.getTitle(), process.getId());\n+                process.getTitle(),\n+                process.getId());\n         }\n         if (logger.isTraceEnabled()) {\n-            logger.trace(\"Converting {} took {} ms.\", process.getTitle(),\n+            logger.trace(\"Converting {} took {} ms.\",\n+                process.getTitle(),\n                 TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin));\n         }\n     }\n@@ -198,6 +207,8 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * @param process\n      *            process to migrate\n      */\n+\n+\n     private static void migrateMetadataFiles(Process process) throws IOException {\n         URI metadataFilePath = fileService.getMetadataFilePath(process, true, true);\n         dataEditorService.readData(metadataFilePath);\n@@ -208,14 +219,13 @@ public class HierarchyMigrationTask extends EmptyTask {\n     /**\n      * Reads the parent record identifier from the anchor file.\n      */\n+\n+\n     private static Optional<String> getParentRecordId(Process process) throws IOException {\n         URI metadataFilePath = fileService.getMetadataFilePath(process);\n         URI anchorFilePath = fileService.createAnchorFile(metadataFilePath);\n         Workpiece anchorWorkpiece = metsService.loadWorkpiece(anchorFilePath);\n-        Optional<String> parentRecordId = anchorWorkpiece.getRootElement().getMetadata().parallelStream()\n-                .filter(metadata -> metadata.getKey().equals(\"CatalogIDDigital\"))\n-                .filter(MetadataEntry.class::isInstance).map(MetadataEntry.class::cast).map(MetadataEntry::getValue)\n-                .findFirst();\n+        Optional<String> parentRecordId = anchorWorkpiece.getRootElement().getMetadata().parallelStream().filter(metadata -> metadata.getKey().equals(\"CatalogIDDigital\")).filter(MetadataEntry.class::isInstance).map(MetadataEntry.class::cast).map(MetadataEntry::getValue).findFirst();\n         return parentRecordId;\n     }\n \n@@ -230,9 +240,9 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * @return a data object with the ID of the created parent process and the\n      *         current number of the child process\n      */\n-    private List<Integer> createParentProcess(Process childProcess)\n-            throws ProcessGenerationException, IOException, DataException, CommandException {\n \n+\n+    private List<Integer> createParentProcess(Process childProcess) throws ProcessGenerationException, IOException, DataException, CommandException {\n         processGenerator.generateProcess(childProcess.getTemplate().getId(), childProcess.getProject().getId());\n         Process parentProcess = processGenerator.getGeneratedProcess();\n         processService.save(parentProcess);\n@@ -247,6 +257,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n         return parentData;\n     }\n \n+\n     private void checkTaskAndId(Process parentProcess) throws IOException {\n         URI parentMetadataFilePath = fileService.getMetadataFilePath(parentProcess, true, true);\n         Workpiece workpiece = ServiceManager.getMetsService().loadWorkpiece(parentMetadataFilePath);\n@@ -258,7 +269,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n                 title += ((MetadataEntry) metadatum).getValue() + \"_\";\n             }\n         }\n-        if(StringUtils.isNotBlank(title)) {\n+        if (StringUtils.isNotBlank(title)) {\n             title = title.substring(0, title.length() - 1);\n         }\n         parentProcess.setTitle(title);\n@@ -274,9 +285,9 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * @param childProcess\n      *            child process to link\n      */\n-    private static void linkParentProcessWithChildProcess(Process parentProcess, Process childProcess)\n-            throws DataException {\n \n+\n+    private static void linkParentProcessWithChildProcess(Process parentProcess, Process childProcess) throws DataException {\n         parentProcess.getChildren().add(childProcess);\n         childProcess.setParent(parentProcess);\n         processService.save(childProcess);\n@@ -289,6 +300,8 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * @param process\n      *            process to migrate\n      */\n+\n+\n     private void createParentMetsFile(Process process) throws IOException {\n         URI metadataFileUri = fileService.getMetadataFilePath(process);\n         URI anchorFileUri = fileService.createAnchorFile(metadataFileUri);\n@@ -296,8 +309,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n         LinkedMetsResource link = workpiece.getRootElement().getChildren().get(0).getLink();\n         link.setLoctype(\"Kitodo.Production\");\n         link.setUri(processService.getProcessURI(process));\n-        URI parentMetadataFileUri = fileService.getMetadataFilePath(processGenerator.getGeneratedProcess(), false,\n-            false);\n+        URI parentMetadataFileUri = fileService.getMetadataFilePath(processGenerator.getGeneratedProcess(), false, false);\n         metsService.saveWorkpiece(workpiece, parentMetadataFileUri);\n     }\n \n@@ -308,6 +320,8 @@ public class HierarchyMigrationTask extends EmptyTask {\n      *            URI of the metadata file\n      * @return the current number, may be {@code null}\n      */\n+\n+\n     private static Integer convertChildMetsFile(URI metadataFilePath) throws IOException {\n         Workpiece workpiece = metsService.loadWorkpiece(metadataFilePath);\n         IncludedStructuralElement childStructureRoot = workpiece.getRootElement().getChildren().get(0);\n@@ -331,11 +345,10 @@ public class HierarchyMigrationTask extends EmptyTask {\n      *            outline element with metadata\n      * @return the CurrentNo, or {@code null}\n      */\n+\n+\n     private static Integer getCurrentNo(IncludedStructuralElement includedStructualElement) {\n-        Integer currentNo = includedStructualElement.getMetadata().parallelStream()\n-                .filter(metadata -> metadata.getKey().equals(\"CurrentNo\")).filter(MetadataEntry.class::isInstance)\n-                .map(MetadataEntry.class::cast).map(MetadataEntry::getValue).filter(value -> value.matches(\"\\\\d+\"))\n-                .map(Integer::valueOf).findFirst().orElse(null);\n+        Integer currentNo = includedStructualElement.getMetadata().parallelStream().filter(metadata -> metadata.getKey().equals(\"CurrentNo\")).filter(MetadataEntry.class::isInstance).map(MetadataEntry.class::cast).map(MetadataEntry::getValue).filter(value -> value.matches(\"\\\\d+\")).map(Integer::valueOf).findFirst().orElse(null);\n         return currentNo;\n     }\n \n@@ -349,9 +362,9 @@ public class HierarchyMigrationTask extends EmptyTask {\n      *            current numbers of the child processes already linked with the\n      *            parent\n      */\n-    private static void linkProcessInParent(Process childProcess, List<Integer> parentData)\n-            throws IOException, DAOException, DataException {\n \n+\n+    private static void linkProcessInParent(Process childProcess, List<Integer> parentData) throws IOException, DAOException, DataException {\n         URI metadataFilePath = fileService.getMetadataFilePath(childProcess);\n         Integer currentNo = convertChildMetsFile(metadataFilePath);\n         Process parentProcess = processService.getById(parentData.get(0));\n@@ -374,6 +387,8 @@ public class HierarchyMigrationTask extends EmptyTask {\n      *            {@code null}\n      * @return the insertion position\n      */\n+\n+\n     private static int calculateInsertionPosition(List<Integer> parentData, Integer currentNo) {\n         int currentNumber = Objects.isNull(currentNo) ? Integer.MIN_VALUE : currentNo;\n         int insertionPosition = 0;\n@@ -394,8 +409,10 @@ public class HierarchyMigrationTask extends EmptyTask {\n      * @param process\n      *            process to migrate\n      */\n+\n+\n     private static void renameAnchorFile(Process process) throws IOException {\n         URI anchorFile = fileService.createAnchorFile(fileService.getMetadataFilePath(process));\n         fileService.renameFile(anchorFile, \"meta_anchor.migrated\");\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/41/HierarchyMigrationTask.java\nindex 38e10a59ebd..5583c0f6d7d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/41/HierarchyMigrationTask.java\n@@ -258,7 +258,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n                 title += ((MetadataEntry) metadatum).getValue() + \"_\";\n             }\n         }\n-        if(StringUtils.isNotBlank(title)) {\n+        if (StringUtils.isNotBlank(title)) {\n             title = title.substring(0, title.length() - 1);\n         }\n         parentProcess.setTitle(title);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/41/HierarchyMigrationTask.java\nindex 38e10a59ebd..5583c0f6d7d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/41/HierarchyMigrationTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/41/HierarchyMigrationTask.java\n@@ -258,7 +258,7 @@ public class HierarchyMigrationTask extends EmptyTask {\n                 title += ((MetadataEntry) metadatum).getValue() + \"_\";\n             }\n         }\n-        if(StringUtils.isNotBlank(title)) {\n+        if (StringUtils.isNotBlank(title)) {\n             title = title.substring(0, title.length() - 1);\n         }\n         parentProcess.setTitle(title);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}