{
    "project_name": "graphfoundation-ongdb",
    "error_id": "877",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "141",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "179",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/877/NodeValueClientFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/877/NodeValueClientFilter.java\nindex 9776ebbd120..ecc01a2b700 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/877/NodeValueClientFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/877/NodeValueClientFilter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import java.util.Arrays;\n@@ -31,10 +32,10 @@ import org.neo4j.values.storable.Value;\n /**\n  * This class filters acceptNode() calls from an index progressor, to assert that exact entries returned from the\n  * progressor really match the exact property values. See also org.neo4j.kernel.impl.api.LookupFilter.\n- *\n+ * <p>\n  * It works by acting as a man-in-the-middle between outer {@link NodeValueClient client} and inner {@link IndexProgressor}.\n  * Interaction goes like:\n- *\n+ * <p>\n  * Initialize:\n  * <pre><code>\n  * client\n@@ -43,7 +44,7 @@ import org.neo4j.values.storable.Value;\n  *                                 filter <- initialize(progressor) -- progressor\n  * client <- initialize(filter) -- filter\n  * </code></pre>\n- *\n+ * <p>\n  * Progress:\n  * <pre><code>\n  * client -- next() ->       filter\n@@ -57,7 +58,7 @@ import org.neo4j.values.storable.Value;\n  *        -- :true ->        filter -- :true ->           progressor\n  * client <----------------------------------------------\n  * </code></pre>\n- *\n+ * <p>\n  * Close:\n  * <pre><code>\n  * client -- close() -> filter\n@@ -67,125 +68,122 @@ import org.neo4j.values.storable.Value;\n  */\n class NodeValueClientFilter implements NodeValueClient, IndexProgressor\n {\n-    private static final Comparator<IndexQuery> ASCENDING_BY_KEY = Comparator.comparingInt( IndexQuery::propertyKeyId );\n-    private final NodeValueClient target;\n-    private final DefaultNodeCursor node;\n-    private final DefaultPropertyCursor property;\n-    private final IndexQuery[] filters;\n-    private final Read read;\n-    private int[] keys;\n-    private IndexProgressor progressor;\n+  private static final Comparator<IndexQuery> ASCENDING_BY_KEY = Comparator.comparingInt(IndexQuery::propertyKeyId);\n+  private final NodeValueClient target;\n+  private final DefaultNodeCursor node;\n+  private final DefaultPropertyCursor property;\n+  private final IndexQuery[] filters;\n+  private final Read read;\n+  private int[] keys;\n+  private IndexProgressor progressor;\n \n-    NodeValueClientFilter(\n-            NodeValueClient target,\n-            DefaultNodeCursor node, DefaultPropertyCursor property, Read read, IndexQuery... filters )\n-    {\n-        this.target = target;\n-        this.node = node;\n-        this.property = property;\n-        this.filters = filters;\n-        this.read = read;\n-        Arrays.sort( filters, ASCENDING_BY_KEY );\n-    }\n+  NodeValueClientFilter(\n+      NodeValueClient target,\n+      DefaultNodeCursor node, DefaultPropertyCursor property, Read read, IndexQuery... filters)\n+  {\n+    this.target = target;\n+    this.node = node;\n+    this.property = property;\n+    this.filters = filters;\n+    this.read = read;\n+    Arrays.sort(filters, ASCENDING_BY_KEY);\n+  }\n \n-    @Override\n-    public void initialize( SchemaIndexDescriptor descriptor, IndexProgressor progressor, IndexQuery[] query )\n-    {\n-        this.progressor = progressor;\n-        this.keys = descriptor.schema().getPropertyIds();\n-        target.initialize( descriptor, this, query );\n-    }\n+  @Override\n+  public void initialize(SchemaIndexDescriptor descriptor, IndexProgressor progressor, IndexQuery[] query)\n+  {\n+    this.progressor = progressor;\n+    this.keys = descriptor.schema().getPropertyIds();\n+    target.initialize(descriptor, this, query);\n+  }\n \n-    @Override\n-    public boolean acceptNode( long reference, Value[] values )\n+  @Override\n+  public boolean acceptNode(long reference, Value[] values)\n+  {\n+    if (keys != null && values != null)\n     {\n-        if ( keys != null && values != null )\n-        {\n-            return filterByIndexValues( reference, values );\n-        }\n-        else\n-        {\n-            node.single( reference, read );\n-            if ( node.next() )\n-            {\n-                node.properties( property );\n-            }\n-            else\n-            {\n-                property.clear();\n-                return false;\n-            }\n-            return filterByCursors( reference, values );\n-        }\n-    }\n-\n-    @Override\n-    public boolean needsValues()\n+      return filterByIndexValues(reference, values);\n+    } else\n     {\n-        return true;\n+      node.single(reference, read);\n+      if (node.next())\n+      {\n+        node.properties(property);\n+      } else\n+      {\n+        property.clear();\n+        return false;\n+      }\n+      return filterByCursors(reference, values);\n     }\n+  }\n \n-    @Override\n-    public boolean next()\n-    {\n-        return progressor.next();\n-    }\n+  @Override\n+  public boolean needsValues()\n+  {\n+    return true;\n+  }\n \n-    @Override\n-    public void close()\n-    {\n-        node.close();\n-        property.close();\n-        progressor.close();\n-    }\n+  @Override\n+  public boolean next()\n+  {\n+    return progressor.next();\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    node.close();\n+    property.close();\n+    progressor.close();\n+  }\n \n-    private boolean filterByIndexValues( long reference, Value[] values )\n+  private boolean filterByIndexValues(long reference, Value[] values)\n+  {\n+    FILTERS:\n+    for (IndexQuery filter : filters)\n     {\n-        FILTERS:\n-        for ( IndexQuery filter : filters )\n+      for (int i = 0; i < keys.length; i++)\n+      {\n+        if (keys[i] == filter.propertyKeyId())\n         {\n-            for ( int i = 0; i < keys.length; i++ )\n-            {\n-                if ( keys[i] == filter.propertyKeyId() )\n-                {\n-                    if ( !filter.acceptsValue( values[i] ) )\n-                    {\n-                        return false;\n-                    }\n-                    continue FILTERS;\n-                }\n-            }\n-            assert false : \"Cannot satisfy filter \" + filter + \" - no corresponding key!\";\n+          if (!filter.acceptsValue(values[i]))\n+          {\n             return false;\n+          }\n+          continue FILTERS;\n         }\n-        return target.acceptNode( reference, values );\n+      }\n+      assert false : \"Cannot satisfy filter \" + filter + \" - no corresponding key!\";\n+      return false;\n     }\n+    return target.acceptNode(reference, values);\n+  }\n \n-    private boolean filterByCursors( long reference, Value[] values )\n+  private boolean filterByCursors(long reference, Value[] values)\n+  {\n+    // note that this way of checking if all filters are matched relies on the node not having duplicate properties\n+    int accepted = 0;\n+    PROPERTIES:\n+    while (property.next())\n     {\n-        // note that this way of checking if all filters are matched relies on the node not having duplicate properties\n-        int accepted = 0;\n-        PROPERTIES:\n-        while ( property.next() )\n+      for (IndexQuery filter : filters)\n+      {\n+        if (filter.propertyKeyId() == property.propertyKey())\n+        {\n+          if (!filter.acceptsValueAt(property))\n+          {\n+            return false;\n+          }\n+          accepted++;\n+        } else if (property.propertyKey() < filter.propertyKeyId())\n         {\n-            for ( IndexQuery filter : filters )\n-            {\n-                if ( filter.propertyKeyId() == property.propertyKey() )\n-                {\n-                    if ( !filter.acceptsValueAt( property ) )\n-                    {\n-                        return false;\n-                    }\n-                    accepted++;\n-                }\n-                else if ( property.propertyKey() < filter.propertyKeyId() )\n-                {\n-                    continue PROPERTIES;\n-                }\n-            }\n+          continue PROPERTIES;\n         }\n-        // if not all filters were matched, i.e. accepted < filters.length we reject\n-        // otherwise we delegate to target\n-        return accepted >= filters.length && target.acceptNode( reference, values );\n+      }\n     }\n+    // if not all filters were matched, i.e. accepted < filters.length we reject\n+    // otherwise we delegate to target\n+    return accepted >= filters.length && target.acceptNode(reference, values);\n+  }\n }\n",
            "diff_size": 150
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/877/NodeValueClientFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/877/NodeValueClientFilter.java\nindex 9776ebbd120..104f9bc4f18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/877/NodeValueClientFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/877/NodeValueClientFilter.java\n@@ -76,8 +76,7 @@ class NodeValueClientFilter implements NodeValueClient, IndexProgressor\n     private int[] keys;\n     private IndexProgressor progressor;\n \n-    NodeValueClientFilter(\n-            NodeValueClient target,\n+    NodeValueClientFilter( NodeValueClient target,\n             DefaultNodeCursor node, DefaultPropertyCursor property, Read read, IndexQuery... filters )\n     {\n         this.target = target;\n@@ -115,7 +114,8 @@ class NodeValueClientFilter implements NodeValueClient, IndexProgressor\n                 property.clear();\n                 return false;\n             }\n-            return filterByCursors( reference, values );\n+\n+return filterByCursors( reference, values );\n         }\n     }\n \n@@ -142,7 +142,7 @@ class NodeValueClientFilter implements NodeValueClient, IndexProgressor\n     private boolean filterByIndexValues( long reference, Value[] values )\n     {\n         FILTERS:\n-        for ( IndexQuery filter : filters )\n+    for ( IndexQuery filter : filters )\n         {\n             for ( int i = 0; i < keys.length; i++ )\n             {\n@@ -158,7 +158,8 @@ class NodeValueClientFilter implements NodeValueClient, IndexProgressor\n             assert false : \"Cannot satisfy filter \" + filter + \" - no corresponding key!\";\n             return false;\n         }\n-        return target.acceptNode( reference, values );\n+\n+return target.acceptNode( reference, values );\n     }\n \n     private boolean filterByCursors( long reference, Value[] values )\n@@ -188,4 +189,4 @@ class NodeValueClientFilter implements NodeValueClient, IndexProgressor\n         // otherwise we delegate to target\n         return accepted >= filters.length && target.acceptNode( reference, values );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}