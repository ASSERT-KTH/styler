{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1616",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "167",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "96",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "200",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "96",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "242",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "258",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "271",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1616/HighAvailabilityMemberStateMachine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1616/HighAvailabilityMemberStateMachine.java\nindex 493a8171dd7..b4895fae10f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1616/HighAvailabilityMemberStateMachine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1616/HighAvailabilityMemberStateMachine.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha.cluster;\n \n import java.net.URI;\n@@ -53,300 +54,294 @@ import static org.neo4j.kernel.AvailabilityGuard.availabilityRequirement;\n  */\n public class HighAvailabilityMemberStateMachine extends LifecycleAdapter implements HighAvailability\n {\n-    public static final AvailabilityRequirement AVAILABILITY_REQUIREMENT =\n-            availabilityRequirement( \"High Availability member state not ready\" );\n-    private final HighAvailabilityMemberContext context;\n-    private final AvailabilityGuard availabilityGuard;\n-    private final ClusterMemberEvents events;\n-    private Log log;\n-\n-    private final Listeners<HighAvailabilityMemberListener> memberListeners = new Listeners<>();\n-    private volatile HighAvailabilityMemberState state;\n-    private StateMachineClusterEventListener eventsListener;\n-    private final ObservedClusterMembers members;\n-    private final Election election;\n-\n-    public HighAvailabilityMemberStateMachine( HighAvailabilityMemberContext context,\n-                                               AvailabilityGuard availabilityGuard,\n-                                               ObservedClusterMembers members,\n-                                               ClusterMemberEvents events,\n-                                               Election election,\n-                                               LogProvider logProvider )\n-    {\n-        this.context = context;\n-        this.availabilityGuard = availabilityGuard;\n-        this.members = members;\n-        this.events = events;\n-        this.election = election;\n-        this.log = logProvider.getLog( getClass() );\n-        state = HighAvailabilityMemberState.PENDING;\n-    }\n-\n-    @Override\n-    public void init()\n+  public static final AvailabilityRequirement AVAILABILITY_REQUIREMENT =\n+      availabilityRequirement(\"High Availability member state not ready\");\n+  private final HighAvailabilityMemberContext context;\n+  private final AvailabilityGuard availabilityGuard;\n+  private final ClusterMemberEvents events;\n+  private Log log;\n+\n+  private final Listeners<HighAvailabilityMemberListener> memberListeners = new Listeners<>();\n+  private volatile HighAvailabilityMemberState state;\n+  private StateMachineClusterEventListener eventsListener;\n+  private final ObservedClusterMembers members;\n+  private final Election election;\n+\n+  public HighAvailabilityMemberStateMachine(HighAvailabilityMemberContext context,\n+                                            AvailabilityGuard availabilityGuard,\n+                                            ObservedClusterMembers members,\n+                                            ClusterMemberEvents events,\n+                                            Election election,\n+                                            LogProvider logProvider)\n+  {\n+    this.context = context;\n+    this.availabilityGuard = availabilityGuard;\n+    this.members = members;\n+    this.events = events;\n+    this.election = election;\n+    this.log = logProvider.getLog(getClass());\n+    state = HighAvailabilityMemberState.PENDING;\n+  }\n+\n+  @Override\n+  public void init()\n+  {\n+    events.addClusterMemberListener(eventsListener = new StateMachineClusterEventListener());\n+    // On initial startup, disallow database access\n+    availabilityGuard.require(AVAILABILITY_REQUIREMENT);\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    events.removeClusterMemberListener(eventsListener);\n+    HighAvailabilityMemberState oldState = state;\n+    state = HighAvailabilityMemberState.PENDING;\n+    final HighAvailabilityMemberChangeEvent event =\n+        new HighAvailabilityMemberChangeEvent(oldState, state, null, null);\n+    memberListeners.notify(listener -> listener.instanceStops(event));\n+\n+    // If we were previously in a state that allowed access, we must now deny access\n+    if (oldState.isAccessAllowed())\n     {\n-        events.addClusterMemberListener( eventsListener = new StateMachineClusterEventListener() );\n-        // On initial startup, disallow database access\n-        availabilityGuard.require( AVAILABILITY_REQUIREMENT );\n+      availabilityGuard.require(AVAILABILITY_REQUIREMENT);\n     }\n \n+    context.setAvailableHaMasterId(null);\n+  }\n+\n+  @Override\n+  public void addHighAvailabilityMemberListener(HighAvailabilityMemberListener toAdd)\n+  {\n+    memberListeners.add(toAdd);\n+  }\n+\n+  @Override\n+  public void removeHighAvailabilityMemberListener(HighAvailabilityMemberListener toRemove)\n+  {\n+    memberListeners.remove(toRemove);\n+  }\n+\n+  public HighAvailabilityMemberState getCurrentState()\n+  {\n+    return state;\n+  }\n+\n+  public boolean isMaster()\n+  {\n+    return getCurrentState() == HighAvailabilityMemberState.MASTER;\n+  }\n+\n+  /**\n+   * This listener will get all events about cluster instances, and depending on the current state it will\n+   * correctly transition to the next internal state and notify listeners of this change.\n+   */\n+  private class StateMachineClusterEventListener implements ClusterMemberListener\n+  {\n     @Override\n-    public void stop()\n+    public synchronized void coordinatorIsElected(InstanceId coordinatorId)\n     {\n-        events.removeClusterMemberListener( eventsListener );\n+      try\n+      {\n         HighAvailabilityMemberState oldState = state;\n-        state = HighAvailabilityMemberState.PENDING;\n+        InstanceId previousElected = context.getElectedMasterId();\n+\n+        context.setAvailableHaMasterId(null);\n+        if (!acceptNewState(state.masterIsElected(context, coordinatorId)))\n+        {\n+          return;\n+        }\n+\n+        context.setElectedMasterId(coordinatorId);\n         final HighAvailabilityMemberChangeEvent event =\n-        new HighAvailabilityMemberChangeEvent( oldState, state, null, null );\n-        memberListeners.notify( listener -> listener.instanceStops( event ) );\n+            new HighAvailabilityMemberChangeEvent(oldState, state, coordinatorId, null);\n+        memberListeners.notify(listener -> listener.masterIsElected(event));\n \n-        // If we were previously in a state that allowed access, we must now deny access\n-        if ( oldState.isAccessAllowed() )\n+        if (oldState.isAccessAllowed() && oldState != state)\n         {\n-            availabilityGuard.require( AVAILABILITY_REQUIREMENT );\n+          availabilityGuard.require(AVAILABILITY_REQUIREMENT);\n         }\n \n-        context.setAvailableHaMasterId( null );\n+        log.debug(\"Got masterIsElected(\" + coordinatorId + \"), moved to \" + state + \" from \" + oldState\n+            + \". Previous elected master is \" + previousElected);\n+      } catch (Throwable t)\n+      {\n+        throw new RuntimeException(t);\n+      }\n     }\n \n     @Override\n-    public void addHighAvailabilityMemberListener( HighAvailabilityMemberListener toAdd )\n+    public synchronized void memberIsAvailable(String role, InstanceId instanceId, URI roleUri, StoreId storeId)\n     {\n-        memberListeners.add( toAdd );\n+      try\n+      {\n+        /**\n+         * Do different things depending on whether the cluster member is in master or slave state\n+         */\n+        if (role.equals(HighAvailabilityModeSwitcher.MASTER))\n+        {\n+          HighAvailabilityMemberState oldState = state;\n+          context.setAvailableHaMasterId(roleUri);\n+          if (!acceptNewState(state.masterIsAvailable(context, instanceId, roleUri)))\n+          {\n+            return;\n+          }\n+          log.debug(\"Got masterIsAvailable(\" + instanceId + \"), moved to \" + state + \" from \" +\n+              oldState);\n+          final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent(oldState,\n+              state, instanceId, roleUri);\n+          memberListeners.notify(listener -> listener.masterIsAvailable(event));\n+\n+          if (oldState == HighAvailabilityMemberState.TO_MASTER && state ==\n+              HighAvailabilityMemberState.MASTER)\n+          {\n+            availabilityGuard.fulfill(AVAILABILITY_REQUIREMENT);\n+          }\n+        } else if (role.equals(HighAvailabilityModeSwitcher.SLAVE))\n+        {\n+          HighAvailabilityMemberState oldState = state;\n+          if (!acceptNewState(state.slaveIsAvailable(context, instanceId, roleUri)))\n+          {\n+            return;\n+          }\n+          log.debug(\"Got slaveIsAvailable(\" + instanceId + \"), \" +\n+              \"moved to \" + state + \" from \" + oldState);\n+          final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent(oldState,\n+              state, instanceId, roleUri);\n+          memberListeners.notify(listener -> listener.slaveIsAvailable(event));\n+\n+          if (oldState == HighAvailabilityMemberState.TO_SLAVE &&\n+              state == HighAvailabilityMemberState.SLAVE)\n+          {\n+            availabilityGuard.fulfill(AVAILABILITY_REQUIREMENT);\n+          }\n+        }\n+      } catch (Throwable throwable)\n+      {\n+        log.warn(\"Exception while receiving member availability notification\", throwable);\n+      }\n     }\n \n     @Override\n-    public void removeHighAvailabilityMemberListener( HighAvailabilityMemberListener toRemove )\n+    public void memberIsUnavailable(String role, InstanceId unavailableId)\n     {\n-        memberListeners.remove( toRemove );\n+      if (context.getMyId().equals(unavailableId) &&\n+          HighAvailabilityModeSwitcher.SLAVE.equals(role) &&\n+          state == HighAvailabilityMemberState.SLAVE)\n+      {\n+        HighAvailabilityMemberState oldState = state;\n+        changeStateToPending();\n+        log.debug(\"Got memberIsUnavailable(\" + unavailableId + \"), moved to \" + state + \" from \" + oldState);\n+      } else\n+      {\n+        log.debug(\"Got memberIsUnavailable(\" + unavailableId + \")\");\n+      }\n     }\n \n-    public HighAvailabilityMemberState getCurrentState()\n+    @Override\n+    public void memberIsFailed(InstanceId instanceId)\n     {\n-        return state;\n+      // If we don't have quorum anymore with the currently alive members, then go to pending\n+      /*\n+       * Unless this is a two instance cluster and we are the MASTER. This is an edge case in which a cluster\n+       * of two instances gets a partition and we want to maintain write capability on one side.\n+       * This, in combination with use of slave_only, is a cheap way to provide quasi-read-replica\n+       * functionality for HA under the 2-instance scenario.\n+       */\n+      if (!isQuorum(getAliveCount(), getTotalCount()) &&\n+          !(getTotalCount() == 2 && state == HighAvailabilityMemberState.MASTER))\n+      {\n+        HighAvailabilityMemberState oldState = state;\n+        changeStateToDetached();\n+        log.debug(\"Got memberIsFailed(\" + instanceId + \") and cluster lost quorum to continue, moved to \"\n+            + state + \" from \" + oldState + \", while maintaining read only capability.\");\n+      } else if (instanceId.equals(context.getElectedMasterId()) && state == HighAvailabilityMemberState.SLAVE)\n+      {\n+        HighAvailabilityMemberState oldState = state;\n+        changeStateToDetached();\n+        log.debug(\"Got memberIsFailed(\" + instanceId + \") which was the master and i am a slave, moved to \"\n+            + state + \" from \" + oldState + \", while maintaining read only capability.\");\n+      } else\n+      {\n+        log.debug(\"Got memberIsFailed(\" + instanceId + \")\");\n+      }\n     }\n \n-    public boolean isMaster()\n+    @Override\n+    public void memberIsAlive(InstanceId instanceId)\n     {\n-        return getCurrentState() == HighAvailabilityMemberState.MASTER;\n+      // If we now have quorum and the previous state was pending, then ask for an election\n+      if (isQuorum(getAliveCount(), getTotalCount()) && state.equals(HighAvailabilityMemberState.PENDING))\n+      {\n+        election.performRoleElections();\n+      }\n     }\n \n-    /**\n-     * This listener will get all events about cluster instances, and depending on the current state it will\n-     * correctly transition to the next internal state and notify listeners of this change.\n-     */\n-    private class StateMachineClusterEventListener implements ClusterMemberListener\n+    private void changeStateToPending()\n     {\n-        @Override\n-        public synchronized void coordinatorIsElected( InstanceId coordinatorId )\n-        {\n-            try\n-            {\n-                HighAvailabilityMemberState oldState = state;\n-                InstanceId previousElected = context.getElectedMasterId();\n-\n-                context.setAvailableHaMasterId( null );\n-                if ( !acceptNewState( state.masterIsElected( context, coordinatorId ) ) )\n-                {\n-                    return;\n-                }\n-\n-                context.setElectedMasterId( coordinatorId );\n-                final HighAvailabilityMemberChangeEvent event =\n-                        new HighAvailabilityMemberChangeEvent( oldState, state, coordinatorId, null );\n-                memberListeners.notify( listener -> listener.masterIsElected( event ) );\n-\n-                if ( oldState.isAccessAllowed() && oldState != state )\n-                {\n-                    availabilityGuard.require( AVAILABILITY_REQUIREMENT );\n-                }\n-\n-                log.debug( \"Got masterIsElected(\" + coordinatorId + \"), moved to \" + state + \" from \" + oldState\n-                        + \". Previous elected master is \" + previousElected );\n-            }\n-            catch ( Throwable t )\n-            {\n-                throw new RuntimeException( t );\n-            }\n-        }\n-\n-        @Override\n-        public synchronized void memberIsAvailable( String role, InstanceId instanceId, URI roleUri, StoreId storeId )\n-        {\n-            try\n-            {\n-                /**\n-                 * Do different things depending on whether the cluster member is in master or slave state\n-                 */\n-                if ( role.equals( HighAvailabilityModeSwitcher.MASTER ) )\n-                {\n-                    HighAvailabilityMemberState oldState = state;\n-                    context.setAvailableHaMasterId( roleUri );\n-                    if ( !acceptNewState( state.masterIsAvailable( context, instanceId, roleUri ) ) )\n-                    {\n-                        return;\n-                    }\n-                    log.debug( \"Got masterIsAvailable(\" + instanceId + \"), moved to \" + state + \" from \" +\n-                            oldState );\n-                    final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent( oldState,\n-                            state, instanceId, roleUri );\n-                    memberListeners.notify( listener -> listener.masterIsAvailable( event ) );\n-\n-                    if ( oldState == HighAvailabilityMemberState.TO_MASTER && state ==\n-                            HighAvailabilityMemberState.MASTER )\n-                    {\n-                        availabilityGuard.fulfill( AVAILABILITY_REQUIREMENT );\n-                    }\n-                }\n-                else if ( role.equals( HighAvailabilityModeSwitcher.SLAVE ) )\n-                {\n-                    HighAvailabilityMemberState oldState = state;\n-                    if ( !acceptNewState( state.slaveIsAvailable( context, instanceId, roleUri ) ) )\n-                    {\n-                        return;\n-                    }\n-                    log.debug( \"Got slaveIsAvailable(\" + instanceId + \"), \" +\n-                            \"moved to \" + state + \" from \" + oldState );\n-                    final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent( oldState,\n-                            state, instanceId, roleUri );\n-                    memberListeners.notify( listener -> listener.slaveIsAvailable( event ) );\n-\n-                    if ( oldState == HighAvailabilityMemberState.TO_SLAVE &&\n-                            state == HighAvailabilityMemberState.SLAVE )\n-                    {\n-                        availabilityGuard.fulfill( AVAILABILITY_REQUIREMENT );\n-                    }\n-                }\n-            }\n-            catch ( Throwable throwable )\n-            {\n-                log.warn( \"Exception while receiving member availability notification\", throwable );\n-            }\n-        }\n-\n-        @Override\n-        public void memberIsUnavailable( String role, InstanceId unavailableId )\n-        {\n-            if ( context.getMyId().equals( unavailableId ) &&\n-                    HighAvailabilityModeSwitcher.SLAVE.equals( role ) &&\n-                    state == HighAvailabilityMemberState.SLAVE )\n-            {\n-                HighAvailabilityMemberState oldState = state;\n-                changeStateToPending();\n-                log.debug( \"Got memberIsUnavailable(\" + unavailableId + \"), moved to \" + state + \" from \" + oldState );\n-            }\n-            else\n-            {\n-                log.debug( \"Got memberIsUnavailable(\" + unavailableId + \")\" );\n-            }\n-        }\n+      if (state.isAccessAllowed())\n+      {\n+        availabilityGuard.require(AVAILABILITY_REQUIREMENT);\n+      }\n \n-        @Override\n-        public void memberIsFailed( InstanceId instanceId )\n-        {\n-            // If we don't have quorum anymore with the currently alive members, then go to pending\n-            /*\n-             * Unless this is a two instance cluster and we are the MASTER. This is an edge case in which a cluster\n-             * of two instances gets a partition and we want to maintain write capability on one side.\n-             * This, in combination with use of slave_only, is a cheap way to provide quasi-read-replica\n-             * functionality for HA under the 2-instance scenario.\n-             */\n-            if ( !isQuorum( getAliveCount(), getTotalCount() ) &&\n-                    !( getTotalCount() == 2 &&  state == HighAvailabilityMemberState.MASTER ) )\n-            {\n-                HighAvailabilityMemberState oldState = state;\n-                changeStateToDetached();\n-                log.debug( \"Got memberIsFailed(\" + instanceId + \") and cluster lost quorum to continue, moved to \"\n-                        + state + \" from \" + oldState + \", while maintaining read only capability.\" );\n-            }\n-            else if ( instanceId.equals( context.getElectedMasterId() ) && state == HighAvailabilityMemberState.SLAVE )\n-            {\n-                HighAvailabilityMemberState oldState = state;\n-                changeStateToDetached();\n-                log.debug( \"Got memberIsFailed(\" + instanceId + \") which was the master and i am a slave, moved to \"\n-                        + state + \" from \" + oldState + \", while maintaining read only capability.\" );\n-            }\n-            else\n-            {\n-                log.debug( \"Got memberIsFailed(\" + instanceId + \")\" );\n-            }\n-        }\n-\n-        @Override\n-        public void memberIsAlive( InstanceId instanceId )\n-        {\n-            // If we now have quorum and the previous state was pending, then ask for an election\n-            if ( isQuorum( getAliveCount(), getTotalCount() ) && state.equals( HighAvailabilityMemberState.PENDING ) )\n-            {\n-                election.performRoleElections();\n-            }\n-        }\n-\n-        private void changeStateToPending()\n-        {\n-            if ( state.isAccessAllowed() )\n-            {\n-                availabilityGuard.require( AVAILABILITY_REQUIREMENT );\n-            }\n-\n-            final HighAvailabilityMemberChangeEvent event =\n-                    new HighAvailabilityMemberChangeEvent( state, HighAvailabilityMemberState.PENDING, null, null );\n+      final HighAvailabilityMemberChangeEvent event =\n+          new HighAvailabilityMemberChangeEvent(state, HighAvailabilityMemberState.PENDING, null, null);\n \n-            state = HighAvailabilityMemberState.PENDING;\n+      state = HighAvailabilityMemberState.PENDING;\n \n-            memberListeners.notify( listener -> listener.instanceStops( event ) );\n+      memberListeners.notify(listener -> listener.instanceStops(event));\n \n-            context.setAvailableHaMasterId( null );\n-            context.setElectedMasterId( null );\n-        }\n+      context.setAvailableHaMasterId(null);\n+      context.setElectedMasterId(null);\n+    }\n \n-        private void changeStateToDetached()\n-        {\n-            state = HighAvailabilityMemberState.PENDING;\n-            final HighAvailabilityMemberChangeEvent event =\n-                    new HighAvailabilityMemberChangeEvent( state, HighAvailabilityMemberState.PENDING, null, null );\n-            memberListeners.notify( listener -> listener.instanceDetached( event ) );\n+    private void changeStateToDetached()\n+    {\n+      state = HighAvailabilityMemberState.PENDING;\n+      final HighAvailabilityMemberChangeEvent event =\n+          new HighAvailabilityMemberChangeEvent(state, HighAvailabilityMemberState.PENDING, null, null);\n+      memberListeners.notify(listener -> listener.instanceDetached(event));\n \n-            context.setAvailableHaMasterId( null );\n-            context.setElectedMasterId( null );\n-        }\n+      context.setAvailableHaMasterId(null);\n+      context.setElectedMasterId(null);\n+    }\n \n-        private long getAliveCount()\n-        {\n-            return Iterables.count( members.getAliveMembers() );\n-        }\n+    private long getAliveCount()\n+    {\n+      return Iterables.count(members.getAliveMembers());\n+    }\n \n-        private long getTotalCount()\n-        {\n-            return Iterables.count( members.getMembers() );\n-        }\n+    private long getTotalCount()\n+    {\n+      return Iterables.count(members.getMembers());\n+    }\n \n-        /**\n-         * Checks if the new state is ILLEGAL. If so, it sets the state to PENDING and issues a request for\n-         * elections. Otherwise it sets the current state to newState.\n-         * @return false iff the newState is illegal. true otherwise.\n-         */\n-        private boolean acceptNewState( HighAvailabilityMemberState newState )\n-        {\n-            if ( newState == HighAvailabilityMemberState.ILLEGAL )\n-            {\n-                log.warn( format( \"Message received resulted in illegal state transition. I was in state %s, \" +\n-                        \"context was %s. The error message is %s. This instance will now transition to PENDING state \" +\n-                        \"and \" +\n-                        \"ask for new elections. While this may fix the error, it may indicate that there is some \" +\n-                        \"connectivity issue or some instability of cluster members.\", state, context, newState\n-                        .errorMessage() ) );\n-                context.setElectedMasterId( null );\n-                context.setAvailableHaMasterId( null );\n-                changeStateToPending();\n-                election.performRoleElections();\n-                return false;\n-            }\n-            else\n-            {\n-                state = newState;\n-            }\n-            return true;\n-        }\n+    /**\n+     * Checks if the new state is ILLEGAL. If so, it sets the state to PENDING and issues a request for\n+     * elections. Otherwise it sets the current state to newState.\n+     *\n+     * @return false iff the newState is illegal. true otherwise.\n+     */\n+    private boolean acceptNewState(HighAvailabilityMemberState newState)\n+    {\n+      if (newState == HighAvailabilityMemberState.ILLEGAL)\n+      {\n+        log.warn(format(\"Message received resulted in illegal state transition. I was in state %s, \" +\n+            \"context was %s. The error message is %s. This instance will now transition to PENDING state \" +\n+            \"and \" +\n+            \"ask for new elections. While this may fix the error, it may indicate that there is some \" +\n+            \"connectivity issue or some instability of cluster members.\", state, context, newState\n+            .errorMessage()));\n+        context.setElectedMasterId(null);\n+        context.setAvailableHaMasterId(null);\n+        changeStateToPending();\n+        election.performRoleElections();\n+        return false;\n+      } else\n+      {\n+        state = newState;\n+      }\n+      return true;\n     }\n+  }\n }\n",
            "diff_size": 408
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "column": "57",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "185",
                    "column": "65",
                    "severity": "error",
                    "message": "'==' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "198",
                    "column": "57",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "216",
                    "column": "60",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "311",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 418).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1616/HighAvailabilityMemberStateMachine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1616/HighAvailabilityMemberStateMachine.java\nindex 493a8171dd7..1a929490499 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1616/HighAvailabilityMemberStateMachine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1616/HighAvailabilityMemberStateMachine.java\n@@ -53,9 +53,8 @@ import static org.neo4j.kernel.AvailabilityGuard.availabilityRequirement;\n  */\n public class HighAvailabilityMemberStateMachine extends LifecycleAdapter implements HighAvailability\n {\n-    public static final AvailabilityRequirement AVAILABILITY_REQUIREMENT =\n-            availabilityRequirement( \"High Availability member state not ready\" );\n-    private final HighAvailabilityMemberContext context;\n+    public static final AvailabilityRequirement AVAILABILITY_REQUIREMENT = availabilityRequirement( \"High Availability member state not ready\" );\n+private final HighAvailabilityMemberContext context;\n     private final AvailabilityGuard availabilityGuard;\n     private final ClusterMemberEvents events;\n     private Log log;\n@@ -66,13 +65,12 @@ public class HighAvailabilityMemberStateMachine extends LifecycleAdapter impleme\n     private final ObservedClusterMembers members;\n     private final Election election;\n \n-    public HighAvailabilityMemberStateMachine( HighAvailabilityMemberContext context,\n-                                               AvailabilityGuard availabilityGuard,\n+    public HighAvailabilityMemberStateMachine( HighAvailabilityMemberContext context, AvailabilityGuard availabilityGuard,\n                                                ObservedClusterMembers members,\n                                                ClusterMemberEvents events,\n                                                Election election,\n                                                LogProvider logProvider )\n-    {\n+{\n         this.context = context;\n         this.availabilityGuard = availabilityGuard;\n         this.members = members;\n@@ -96,8 +94,7 @@ public class HighAvailabilityMemberStateMachine extends LifecycleAdapter impleme\n         events.removeClusterMemberListener( eventsListener );\n         HighAvailabilityMemberState oldState = state;\n         state = HighAvailabilityMemberState.PENDING;\n-        final HighAvailabilityMemberChangeEvent event =\n-        new HighAvailabilityMemberChangeEvent( oldState, state, null, null );\n+        final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent( oldState, state, null, null );\n         memberListeners.notify( listener -> listener.instanceStops( event ) );\n \n         // If we were previously in a state that allowed access, we must now deny access\n@@ -144,26 +141,22 @@ public class HighAvailabilityMemberStateMachine extends LifecycleAdapter impleme\n             {\n                 HighAvailabilityMemberState oldState = state;\n                 InstanceId previousElected = context.getElectedMasterId();\n-\n-                context.setAvailableHaMasterId( null );\n+context.setAvailableHaMasterId( null );\n                 if ( !acceptNewState( state.masterIsElected( context, coordinatorId ) ) )\n                 {\n                     return;\n                 }\n \n                 context.setElectedMasterId( coordinatorId );\n-                final HighAvailabilityMemberChangeEvent event =\n-                        new HighAvailabilityMemberChangeEvent( oldState, state, coordinatorId, null );\n-                memberListeners.notify( listener -> listener.masterIsElected( event ) );\n-\n-                if ( oldState.isAccessAllowed() && oldState != state )\n+                final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent( oldState, state, coordinatorId, null );\n+memberListeners.notify( listener -> listener.masterIsElected( event ) );\n+if ( oldState.isAccessAllowed() && oldState != state )\n                 {\n                     availabilityGuard.require( AVAILABILITY_REQUIREMENT );\n                 }\n \n-                log.debug( \"Got masterIsElected(\" + coordinatorId + \"), moved to \" + state + \" from \" + oldState\n-                        + \". Previous elected master is \" + previousElected );\n-            }\n+                log.debug( \"Got masterIsElected(\" + coordinatorId + \"), moved to \" + state + \" from \" + oldState + \". Previous elected master is \" + previousElected );\n+    }\n             catch ( Throwable t )\n             {\n                 throw new RuntimeException( t );\n@@ -186,14 +179,10 @@ public class HighAvailabilityMemberStateMachine extends LifecycleAdapter impleme\n                     {\n                         return;\n                     }\n-                    log.debug( \"Got masterIsAvailable(\" + instanceId + \"), moved to \" + state + \" from \" +\n-                            oldState );\n-                    final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent( oldState,\n+                    log.debug( \"Got masterIsAvailable(\" + instanceId + \"), moved to \" + state + \" from \" + oldState ); final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent( oldState,\n                             state, instanceId, roleUri );\n-                    memberListeners.notify( listener -> listener.masterIsAvailable( event ) );\n-\n-                    if ( oldState == HighAvailabilityMemberState.TO_MASTER && state ==\n-                            HighAvailabilityMemberState.MASTER )\n+memberListeners.notify( listener -> listener.masterIsAvailable( event ) );\n+if ( oldState == HighAvailabilityMemberState.TO_MASTER && state ==HighAvailabilityMemberState.MASTER )\n                     {\n                         availabilityGuard.fulfill( AVAILABILITY_REQUIREMENT );\n                     }\n@@ -205,13 +194,10 @@ public class HighAvailabilityMemberStateMachine extends LifecycleAdapter impleme\n                     {\n                         return;\n                     }\n-                    log.debug( \"Got slaveIsAvailable(\" + instanceId + \"), \" +\n-                            \"moved to \" + state + \" from \" + oldState );\n-                    final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent( oldState,\n+                    log.debug( \"Got slaveIsAvailable(\" + instanceId + \"), \" + \"moved to \" + state + \" from \" + oldState ); final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent( oldState,\n                             state, instanceId, roleUri );\n-                    memberListeners.notify( listener -> listener.slaveIsAvailable( event ) );\n-\n-                    if ( oldState == HighAvailabilityMemberState.TO_SLAVE &&\n+memberListeners.notify( listener -> listener.slaveIsAvailable( event ) );\n+if ( oldState == HighAvailabilityMemberState.TO_SLAVE &&\n                             state == HighAvailabilityMemberState.SLAVE )\n                     {\n                         availabilityGuard.fulfill( AVAILABILITY_REQUIREMENT );\n@@ -227,8 +213,7 @@ public class HighAvailabilityMemberStateMachine extends LifecycleAdapter impleme\n         @Override\n         public void memberIsUnavailable( String role, InstanceId unavailableId )\n         {\n-            if ( context.getMyId().equals( unavailableId ) &&\n-                    HighAvailabilityModeSwitcher.SLAVE.equals( role ) &&\n+            if ( context.getMyId().equals( unavailableId ) &&HighAvailabilityModeSwitcher.SLAVE.equals( role ) &&\n                     state == HighAvailabilityMemberState.SLAVE )\n             {\n                 HighAvailabilityMemberState oldState = state;\n@@ -252,19 +237,17 @@ public class HighAvailabilityMemberStateMachine extends LifecycleAdapter impleme\n              * functionality for HA under the 2-instance scenario.\n              */\n             if ( !isQuorum( getAliveCount(), getTotalCount() ) &&\n-                    !( getTotalCount() == 2 &&  state == HighAvailabilityMemberState.MASTER ) )\n+                    !( getTotalCount() == 2 && state == HighAvailabilityMemberState.MASTER ) )\n             {\n                 HighAvailabilityMemberState oldState = state;\n                 changeStateToDetached();\n-                log.debug( \"Got memberIsFailed(\" + instanceId + \") and cluster lost quorum to continue, moved to \"\n-                        + state + \" from \" + oldState + \", while maintaining read only capability.\" );\n+                log.debug( \"Got memberIsFailed(\" + instanceId + \") and cluster lost quorum to continue, moved to \" + state + \" from \" + oldState + \", while maintaining read only capability.\" );\n             }\n             else if ( instanceId.equals( context.getElectedMasterId() ) && state == HighAvailabilityMemberState.SLAVE )\n             {\n                 HighAvailabilityMemberState oldState = state;\n                 changeStateToDetached();\n-                log.debug( \"Got memberIsFailed(\" + instanceId + \") which was the master and i am a slave, moved to \"\n-                        + state + \" from \" + oldState + \", while maintaining read only capability.\" );\n+                log.debug( \"Got memberIsFailed(\" + instanceId + \") which was the master and i am a slave, moved to \" + state + \" from \" + oldState + \", while maintaining read only capability.\" );\n             }\n             else\n             {\n@@ -289,25 +272,20 @@ public class HighAvailabilityMemberStateMachine extends LifecycleAdapter impleme\n                 availabilityGuard.require( AVAILABILITY_REQUIREMENT );\n             }\n \n-            final HighAvailabilityMemberChangeEvent event =\n-                    new HighAvailabilityMemberChangeEvent( state, HighAvailabilityMemberState.PENDING, null, null );\n-\n-            state = HighAvailabilityMemberState.PENDING;\n+            final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent( state, HighAvailabilityMemberState.PENDING, null, null );\n+state = HighAvailabilityMemberState.PENDING;\n \n             memberListeners.notify( listener -> listener.instanceStops( event ) );\n-\n-            context.setAvailableHaMasterId( null );\n+context.setAvailableHaMasterId( null );\n             context.setElectedMasterId( null );\n         }\n \n         private void changeStateToDetached()\n         {\n             state = HighAvailabilityMemberState.PENDING;\n-            final HighAvailabilityMemberChangeEvent event =\n-                    new HighAvailabilityMemberChangeEvent( state, HighAvailabilityMemberState.PENDING, null, null );\n-            memberListeners.notify( listener -> listener.instanceDetached( event ) );\n-\n-            context.setAvailableHaMasterId( null );\n+            final HighAvailabilityMemberChangeEvent event = new HighAvailabilityMemberChangeEvent( state, HighAvailabilityMemberState.PENDING, null, null );\n+memberListeners.notify( listener -> listener.instanceDetached( event ) );\n+context.setAvailableHaMasterId( null );\n             context.setElectedMasterId( null );\n         }\n \n@@ -330,13 +308,8 @@ public class HighAvailabilityMemberStateMachine extends LifecycleAdapter impleme\n         {\n             if ( newState == HighAvailabilityMemberState.ILLEGAL )\n             {\n-                log.warn( format( \"Message received resulted in illegal state transition. I was in state %s, \" +\n-                        \"context was %s. The error message is %s. This instance will now transition to PENDING state \" +\n-                        \"and \" +\n-                        \"ask for new elections. While this may fix the error, it may indicate that there is some \" +\n-                        \"connectivity issue or some instability of cluster members.\", state, context, newState\n-                        .errorMessage() ) );\n-                context.setElectedMasterId( null );\n+                log.warn( format( \"Message received resulted in illegal state transition. I was in state %s, \" + \"context was %s. The error message is %s. This instance will now transition to PENDING state \" + \"and \" + \"ask for new elections. While this may fix the error, it may indicate that there is some \" + \"connectivity issue or some instability of cluster members.\", state, context, newState.errorMessage() ) );\n+context.setElectedMasterId( null );\n                 context.setAvailableHaMasterId( null );\n                 changeStateToPending();\n                 election.performRoleElections();\n@@ -349,4 +322,4 @@ public class HighAvailabilityMemberStateMachine extends LifecycleAdapter impleme\n             return true;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}