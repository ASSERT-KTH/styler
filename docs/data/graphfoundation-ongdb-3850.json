{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3850",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3850/IndexEntryUpdate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3850/IndexEntryUpdate.java\nindex f8823cb050f..96342bcb11c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3850/IndexEntryUpdate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3850/IndexEntryUpdate.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.index;\n \n import java.util.Arrays;\n@@ -38,136 +39,136 @@ import static java.lang.String.format;\n  */\n public class IndexEntryUpdate<INDEX_KEY extends SchemaDescriptorSupplier>\n {\n-    private final long entityId;\n-    private final UpdateMode updateMode;\n-    private final Value[] before;\n-    private final Value[] values;\n-    private final INDEX_KEY indexKey;\n-\n-    private IndexEntryUpdate( long entityId, INDEX_KEY indexKey, UpdateMode updateMode, Value... values )\n-    {\n-        this( entityId, indexKey, updateMode, null, values );\n-    }\n-\n-    private IndexEntryUpdate( long entityId, INDEX_KEY indexKey, UpdateMode updateMode, Value[] before,\n-            Value[] values )\n-    {\n-        // we do not support partial index entries\n-        assert indexKey.schema().getPropertyIds().length == values.length :\n-                format( \"IndexEntryUpdate values must be of same length as index compositness. \" +\n-                        \"Index on %s, but got values %s\", indexKey.schema().toString(), Arrays.toString( values ) );\n-        assert before == null || before.length == values.length;\n-\n-        this.entityId = entityId;\n-        this.indexKey = indexKey;\n-        this.before = before;\n-        this.values = values;\n-        this.updateMode = updateMode;\n-    }\n-\n-    public final long getEntityId()\n+  private final long entityId;\n+  private final UpdateMode updateMode;\n+  private final Value[] before;\n+  private final Value[] values;\n+  private final INDEX_KEY indexKey;\n+\n+  private IndexEntryUpdate(long entityId, INDEX_KEY indexKey, UpdateMode updateMode, Value... values)\n+  {\n+    this(entityId, indexKey, updateMode, null, values);\n+  }\n+\n+  private IndexEntryUpdate(long entityId, INDEX_KEY indexKey, UpdateMode updateMode, Value[] before,\n+                           Value[] values)\n+  {\n+    // we do not support partial index entries\n+    assert indexKey.schema().getPropertyIds().length == values.length :\n+        format(\"IndexEntryUpdate values must be of same length as index compositness. \" +\n+            \"Index on %s, but got values %s\", indexKey.schema().toString(), Arrays.toString(values));\n+    assert before == null || before.length == values.length;\n+\n+    this.entityId = entityId;\n+    this.indexKey = indexKey;\n+    this.before = before;\n+    this.values = values;\n+    this.updateMode = updateMode;\n+  }\n+\n+  public final long getEntityId()\n+  {\n+    return entityId;\n+  }\n+\n+  public UpdateMode updateMode()\n+  {\n+    return updateMode;\n+  }\n+\n+  public INDEX_KEY indexKey()\n+  {\n+    return indexKey;\n+  }\n+\n+  public Value[] values()\n+  {\n+    return values;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return entityId;\n+      return true;\n     }\n-\n-    public UpdateMode updateMode()\n+    if (o == null || getClass() != o.getClass())\n     {\n-        return updateMode;\n+      return false;\n     }\n \n-    public INDEX_KEY indexKey()\n-    {\n-        return indexKey;\n-    }\n+    IndexEntryUpdate<?> that = (IndexEntryUpdate<?>) o;\n \n-    public Value[] values()\n+    if (entityId != that.entityId)\n     {\n-        return values;\n+      return false;\n     }\n-\n-    @Override\n-    public boolean equals( Object o )\n+    if (updateMode != that.updateMode)\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        IndexEntryUpdate<?> that = (IndexEntryUpdate<?>) o;\n-\n-        if ( entityId != that.entityId )\n-        {\n-            return false;\n-        }\n-        if ( updateMode != that.updateMode )\n-        {\n-            return false;\n-        }\n-        if ( !Arrays.equals( before, that.before ) )\n-        {\n-            return false;\n-        }\n-        if ( !Arrays.equals( values, that.values ) )\n-        {\n-            return false;\n-        }\n-        return indexKey != null ? indexKey.schema().equals( that.indexKey.schema() ) : that.indexKey == null;\n+      return false;\n     }\n-\n-    @Override\n-    public int hashCode()\n+    if (!Arrays.equals(before, that.before))\n     {\n-        int result = (int) (entityId ^ (entityId >>> 32));\n-        result = 31 * result + (updateMode != null ? updateMode.hashCode() : 0);\n-        result = 31 * result + Arrays.hashCode( before );\n-        result = 31 * result + Arrays.hashCode( values );\n-        result = 31 * result + (indexKey != null ? indexKey.schema().hashCode() : 0);\n-        return result;\n+      return false;\n     }\n-\n-    @Override\n-    public String toString()\n+    if (!Arrays.equals(values, that.values))\n     {\n-        return format( \"IndexEntryUpdate[id=%d, mode=%s, %s, beforeValues=%s, values=%s]\", entityId, updateMode,\n-                indexKey().schema().userDescription( SchemaUtil.idTokenNameLookup ),\n-                Arrays.toString( before ), Arrays.toString( values ) );\n+      return false;\n     }\n-\n-    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> add(\n-            long entityId, INDEX_KEY indexKey, Value... values )\n-    {\n-        return new IndexEntryUpdate<>( entityId, indexKey, UpdateMode.ADDED, values );\n-    }\n-\n-    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> remove(\n-            long entityId, INDEX_KEY indexKey, Value... values )\n-    {\n-        return new IndexEntryUpdate<>( entityId, indexKey, UpdateMode.REMOVED, values );\n-    }\n-\n-    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> change(\n-            long entityId, INDEX_KEY indexKey, Value before, Value after )\n-    {\n-        return new IndexEntryUpdate<>( entityId, indexKey, UpdateMode.CHANGED,\n-                new Value[]{before}, new Value[]{after} );\n-    }\n-\n-    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> change(\n-            long entityId, INDEX_KEY indexKey, Value[] before, Value[] after )\n-    {\n-        return new IndexEntryUpdate<>( entityId, indexKey, UpdateMode.CHANGED, before, after );\n-    }\n-\n-    public Value[] beforeValues()\n+    return indexKey != null ? indexKey.schema().equals(that.indexKey.schema()) : that.indexKey == null;\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = (int) (entityId ^ (entityId >>> 32));\n+    result = 31 * result + (updateMode != null ? updateMode.hashCode() : 0);\n+    result = 31 * result + Arrays.hashCode(before);\n+    result = 31 * result + Arrays.hashCode(values);\n+    result = 31 * result + (indexKey != null ? indexKey.schema().hashCode() : 0);\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"IndexEntryUpdate[id=%d, mode=%s, %s, beforeValues=%s, values=%s]\", entityId, updateMode,\n+        indexKey().schema().userDescription(SchemaUtil.idTokenNameLookup),\n+        Arrays.toString(before), Arrays.toString(values));\n+  }\n+\n+  public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> add(\n+      long entityId, INDEX_KEY indexKey, Value... values)\n+  {\n+    return new IndexEntryUpdate<>(entityId, indexKey, UpdateMode.ADDED, values);\n+  }\n+\n+  public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> remove(\n+      long entityId, INDEX_KEY indexKey, Value... values)\n+  {\n+    return new IndexEntryUpdate<>(entityId, indexKey, UpdateMode.REMOVED, values);\n+  }\n+\n+  public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> change(\n+      long entityId, INDEX_KEY indexKey, Value before, Value after)\n+  {\n+    return new IndexEntryUpdate<>(entityId, indexKey, UpdateMode.CHANGED,\n+        new Value[] {before}, new Value[] {after});\n+  }\n+\n+  public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> change(\n+      long entityId, INDEX_KEY indexKey, Value[] before, Value[] after)\n+  {\n+    return new IndexEntryUpdate<>(entityId, indexKey, UpdateMode.CHANGED, before, after);\n+  }\n+\n+  public Value[] beforeValues()\n+  {\n+    if (before == null)\n     {\n-        if ( before == null )\n-        {\n-            throw new UnsupportedOperationException( \"beforeValues is only valid for `UpdateMode.CHANGED\" );\n-        }\n-        return before;\n+      throw new UnsupportedOperationException(\"beforeValues is only valid for `UpdateMode.CHANGED\");\n     }\n+    return before;\n+  }\n }\n",
            "diff_size": 165
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 251).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3850/IndexEntryUpdate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3850/IndexEntryUpdate.java\nindex f8823cb050f..284fb8354e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3850/IndexEntryUpdate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3850/IndexEntryUpdate.java\n@@ -53,12 +53,9 @@ public class IndexEntryUpdate<INDEX_KEY extends SchemaDescriptorSupplier>\n             Value[] values )\n     {\n         // we do not support partial index entries\n-        assert indexKey.schema().getPropertyIds().length == values.length :\n-                format( \"IndexEntryUpdate values must be of same length as index compositness. \" +\n-                        \"Index on %s, but got values %s\", indexKey.schema().toString(), Arrays.toString( values ) );\n-        assert before == null || before.length == values.length;\n-\n-        this.entityId = entityId;\n+        assert indexKey.schema().getPropertyIds().length == values.length : format( \"IndexEntryUpdate values must be of same length as index compositness. \" + \"Index on %s, but got values %s\", indexKey.schema().toString(), Arrays.toString( values ) );\n+assert before == null || before.length == values.length;\n+this.entityId = entityId;\n         this.indexKey = indexKey;\n         this.before = before;\n         this.values = values;\n@@ -92,7 +89,8 @@ public class IndexEntryUpdate<INDEX_KEY extends SchemaDescriptorSupplier>\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n@@ -103,29 +101,33 @@ public class IndexEntryUpdate<INDEX_KEY extends SchemaDescriptorSupplier>\n         {\n             return false;\n         }\n-        if ( updateMode != that.updateMode )\n+\n+if ( updateMode != that.updateMode )\n         {\n             return false;\n         }\n-        if ( !Arrays.equals( before, that.before ) )\n+\n+if ( !Arrays.equals( before, that.before ) )\n         {\n             return false;\n         }\n-        if ( !Arrays.equals( values, that.values ) )\n+\n+if ( !Arrays.equals( values, that.values ) )\n         {\n             return false;\n         }\n-        return indexKey != null ? indexKey.schema().equals( that.indexKey.schema() ) : that.indexKey == null;\n+\n+return indexKey != null ? indexKey.schema().equals( that.indexKey.schema() ) : that.indexKey == null;\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        int result = (int) (entityId ^ (entityId >>> 32));\n-        result = 31 * result + (updateMode != null ? updateMode.hashCode() : 0);\n+        int result = ( int) ( entityId ^ ( entityId >>> 32 ));\n+        result = 31 * result + (updateMode != null ? updateMode.hashCode() : 0 );\n         result = 31 * result + Arrays.hashCode( before );\n         result = 31 * result + Arrays.hashCode( values );\n-        result = 31 * result + (indexKey != null ? indexKey.schema().hashCode() : 0);\n+        result = 31 * result + (indexKey != null ? indexKey.schema().hashCode() : 0 );\n         return result;\n     }\n \n@@ -133,31 +135,25 @@ public class IndexEntryUpdate<INDEX_KEY extends SchemaDescriptorSupplier>\n     public String toString()\n     {\n         return format( \"IndexEntryUpdate[id=%d, mode=%s, %s, beforeValues=%s, values=%s]\", entityId, updateMode,\n-                indexKey().schema().userDescription( SchemaUtil.idTokenNameLookup ),\n-                Arrays.toString( before ), Arrays.toString( values ) );\n+                indexKey().schema().userDescription( SchemaUtil.idTokenNameLookup ), Arrays.toString( before ), Arrays.toString( values ) );\n     }\n \n-    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> add(\n-            long entityId, INDEX_KEY indexKey, Value... values )\n+    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> add( long entityId, INDEX_KEY indexKey, Value... values )\n     {\n         return new IndexEntryUpdate<>( entityId, indexKey, UpdateMode.ADDED, values );\n     }\n \n-    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> remove(\n-            long entityId, INDEX_KEY indexKey, Value... values )\n+    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> remove( long entityId, INDEX_KEY indexKey, Value... values )\n     {\n         return new IndexEntryUpdate<>( entityId, indexKey, UpdateMode.REMOVED, values );\n     }\n \n-    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> change(\n-            long entityId, INDEX_KEY indexKey, Value before, Value after )\n+    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> change( long entityId, INDEX_KEY indexKey, Value before, Value after )\n     {\n-        return new IndexEntryUpdate<>( entityId, indexKey, UpdateMode.CHANGED,\n-                new Value[]{before}, new Value[]{after} );\n+        return new IndexEntryUpdate<>( entityId, indexKey, UpdateMode.CHANGED, new Value[]{before}, new Value[]{after} );\n     }\n \n-    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> change(\n-            long entityId, INDEX_KEY indexKey, Value[] before, Value[] after )\n+    public static <INDEX_KEY extends SchemaDescriptorSupplier> IndexEntryUpdate<INDEX_KEY> change( long entityId, INDEX_KEY indexKey, Value[] before, Value[] after )\n     {\n         return new IndexEntryUpdate<>( entityId, indexKey, UpdateMode.CHANGED, before, after );\n     }\n@@ -168,6 +164,7 @@ public class IndexEntryUpdate<INDEX_KEY extends SchemaDescriptorSupplier>\n         {\n             throw new UnsupportedOperationException( \"beforeValues is only valid for `UpdateMode.CHANGED\" );\n         }\n-        return before;\n+\n+return before;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}