{
    "project_name": "wso2-attic-commons",
    "error_id": "503",
    "information": {
        "errors": [
            {
                "line": "126",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 191).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor, AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n        uniqueAttributeNames = new String[parameters.length];\n        for (int i = 0, parametersLength = parameters.length; i < parametersLength; i++) {\n            uniqueAttributeNames[i] = ((Variable) parameters[i]).getAttributeName();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/503/UniqueWindowProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/503/UniqueWindowProcessor.java\nindex 76b65fc5358..9e27cf57c25 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/503/UniqueWindowProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/503/UniqueWindowProcessor.java\n@@ -123,8 +123,9 @@ public class UniqueWindowProcessor extends WindowProcessor {\n     }\n \n     @Override\n-    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor, AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n-        uniqueAttributeNames = new String[parameters.length];\n+    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor,\n+            AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n+         uniqueAttributeNames = new String[parameters.length];\n         for (int i = 0, parametersLength = parameters.length; i < parametersLength; i++) {\n             uniqueAttributeNames[i] = ((Variable) parameters[i]).getAttributeName();\n         }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/503/UniqueWindowProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/503/UniqueWindowProcessor.java\nindex 76b65fc5358..c5c08b71cb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/503/UniqueWindowProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/503/UniqueWindowProcessor.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.query.processor.window;\n \n import org.wso2.siddhi.core.config.SiddhiContext;\n@@ -37,121 +38,123 @@ import java.util.LinkedHashMap;\n \n public class UniqueWindowProcessor extends WindowProcessor {\n \n-    private String[] uniqueAttributeNames;\n-    private SiddhiMap<StreamEvent> map;\n-    private int[] attributePositions;\n-\n-\n-    @Override\n-    protected void processEvent(InEvent event) {\n-        acquireLock();\n-        try {\n-            StreamEvent oldEvent = map.put(generateKey(event), new RemoveEvent(event, Long.MAX_VALUE));\n-            if (oldEvent != null) {\n-                nextProcessor.process((AtomicEvent) oldEvent);\n-            }\n-            nextProcessor.process(event);\n-        } finally {\n-            releaseLock();\n+  private String[] uniqueAttributeNames;\n+  private SiddhiMap<StreamEvent> map;\n+  private int[] attributePositions;\n+\n+\n+  @Override\n+  protected void processEvent(InEvent event) {\n+    acquireLock();\n+    try {\n+      StreamEvent oldEvent = map.put(generateKey(event), new RemoveEvent(event, Long.MAX_VALUE));\n+      if (oldEvent != null) {\n+        nextProcessor.process((AtomicEvent) oldEvent);\n+      }\n+      nextProcessor.process(event);\n+    } finally {\n+      releaseLock();\n+    }\n+  }\n+\n+  @Override\n+  protected void processEvent(InListEvent listEvent) {\n+    acquireLock();\n+    try {\n+      LinkedHashMap<String, InEvent> tempMap = new LinkedHashMap<String, InEvent>();\n+      for (int i = 0; i < listEvent.getActiveEvents(); i++) {\n+        InEvent inEvent = (InEvent) listEvent.getEvent(i);\n+        tempMap.put(generateKey(inEvent), inEvent);\n+      }\n+      int tempMapSize = tempMap.size();\n+      if (tempMapSize == 1) {\n+        for (java.util.Map.Entry<String, InEvent> entry : tempMap.entrySet()) {\n+          StreamEvent oldEvent = map.put(entry.getKey(), new RemoveEvent(entry.getValue(), Long.MAX_VALUE));\n+          if (oldEvent != null) {\n+            nextProcessor.process((AtomicEvent) oldEvent);\n+          }\n+          nextProcessor.process(entry.getValue());\n+        }\n+      } else if (tempMapSize > 1) {\n+        RemoveListEvent removeListEvent = new RemoveListEvent(tempMap.size());\n+\n+        for (java.util.Map.Entry<String, InEvent> entry : tempMap.entrySet()) {\n+          StreamEvent oldEvent = map.put(entry.getKey(), new RemoveEvent(entry.getValue(), Long.MAX_VALUE));\n+          if (oldEvent != null) {\n+            removeListEvent.addEvent((Event) oldEvent);\n+          }\n         }\n+        if (removeListEvent.getActiveEvents() == 1) {\n+          nextProcessor.process(removeListEvent.getEvent(0));\n+        } else if (removeListEvent.getActiveEvents() > 1) {\n+          nextProcessor.process(removeListEvent);\n+        }\n+        nextProcessor.process(new InListEvent(tempMap.values().toArray(new InEvent[tempMapSize])));\n+      }\n+    } catch (Throwable t) {\n+      System.out.println(t);\n+    } finally {\n+      releaseLock();\n     }\n \n-    @Override\n-    protected void processEvent(InListEvent listEvent) {\n-        acquireLock();\n-        try {\n-            LinkedHashMap<String, InEvent> tempMap = new LinkedHashMap<String, InEvent>();\n-            for (int i = 0; i < listEvent.getActiveEvents(); i++) {\n-                InEvent inEvent = (InEvent) listEvent.getEvent(i);\n-                tempMap.put(generateKey(inEvent), inEvent);\n-            }\n-            int tempMapSize = tempMap.size();\n-            if (tempMapSize == 1) {\n-                for (java.util.Map.Entry<String, InEvent> entry : tempMap.entrySet()) {\n-                    StreamEvent oldEvent = map.put(entry.getKey(), new RemoveEvent(entry.getValue(), Long.MAX_VALUE));\n-                    if (oldEvent != null) {\n-                        nextProcessor.process((AtomicEvent) oldEvent);\n-                    }\n-                    nextProcessor.process(entry.getValue());\n-                }\n-            } else if (tempMapSize > 1) {\n-                RemoveListEvent removeListEvent = new RemoveListEvent(tempMap.size());\n-\n-                for (java.util.Map.Entry<String, InEvent> entry : tempMap.entrySet()) {\n-                    StreamEvent oldEvent = map.put(entry.getKey(), new RemoveEvent(entry.getValue(), Long.MAX_VALUE));\n-                    if (oldEvent != null) {\n-                        removeListEvent.addEvent((Event) oldEvent);\n-                    }\n-                }\n-                if (removeListEvent.getActiveEvents() == 1) {\n-                    nextProcessor.process(removeListEvent.getEvent(0));\n-                } else if (removeListEvent.getActiveEvents() > 1) {\n-                    nextProcessor.process(removeListEvent);\n-                }\n-                nextProcessor.process(new InListEvent(tempMap.values().toArray(new InEvent[tempMapSize])));\n-            }\n-        } catch (Throwable t) {\n-            System.out.println(t);\n-        } finally {\n-            releaseLock();\n-        }\n+  }\n \n-    }\n+  @Override\n+  public Iterator<StreamEvent> iterator() {\n+    return map.iterator();\n+  }\n \n-    @Override\n-    public Iterator<StreamEvent> iterator() {\n-        return map.iterator();\n+  @Override\n+  public Iterator<StreamEvent> iterator(String predicate) {\n+    if (siddhiContext.isDistributedProcessingEnabled()) {\n+      return ((SiddhiMapGrid<StreamEvent>) map).iterator(predicate);\n+    } else {\n+      return map.iterator();\n     }\n-\n-    @Override\n-    public Iterator<StreamEvent> iterator(String predicate) {\n-        if (siddhiContext.isDistributedProcessingEnabled()) {\n-            return ((SiddhiMapGrid<StreamEvent>) map).iterator(predicate);\n-        } else {\n-            return map.iterator();\n-        }\n+  }\n+\n+  @Override\n+  protected Object[] currentState() {\n+    return map.currentState();\n+  }\n+\n+  @Override\n+  protected void restoreState(Object[] data) {\n+    map.restoreState(data);\n+  }\n+\n+  @Override\n+  protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor,\n+                      AbstractDefinition streamDefinition, String elementId, boolean async,\n+                      SiddhiContext siddhiContext) {\n+    uniqueAttributeNames = new String[parameters.length];\n+    for (int i = 0, parametersLength = parameters.length; i < parametersLength; i++) {\n+      uniqueAttributeNames[i] = ((Variable) parameters[i]).getAttributeName();\n     }\n \n-    @Override\n-    protected Object[] currentState() {\n-        return map.currentState();\n+    if (this.siddhiContext.isDistributedProcessingEnabled()) {\n+      map = new SiddhiMapGrid<StreamEvent>(elementId, this.siddhiContext);\n+    } else {\n+      map = new SiddhiMap<StreamEvent>();\n     }\n-\n-    @Override\n-    protected void restoreState(Object[] data) {\n-        map.restoreState(data);\n+    attributePositions = new int[uniqueAttributeNames.length];\n+    for (int i = 0; i < uniqueAttributeNames.length; i++) {\n+      String attributeName = uniqueAttributeNames[i];\n+      attributePositions[i] = definition.getAttributePosition(attributeName);\n     }\n \n-    @Override\n-    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor, AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n-        uniqueAttributeNames = new String[parameters.length];\n-        for (int i = 0, parametersLength = parameters.length; i < parametersLength; i++) {\n-            uniqueAttributeNames[i] = ((Variable) parameters[i]).getAttributeName();\n-        }\n-\n-        if (this.siddhiContext.isDistributedProcessingEnabled()) {\n-            map = new SiddhiMapGrid<StreamEvent>(elementId, this.siddhiContext);\n-        } else {\n-            map = new SiddhiMap<StreamEvent>();\n-        }\n-        attributePositions = new int[uniqueAttributeNames.length];\n-        for (int i = 0; i < uniqueAttributeNames.length; i++) {\n-            String attributeName = uniqueAttributeNames[i];\n-            attributePositions[i] = definition.getAttributePosition(attributeName);\n-        }\n+  }\n \n+  private String generateKey(InEvent event) {\n+    StringBuilder stringBuilder = new StringBuilder();\n+    for (int position : attributePositions) {\n+      stringBuilder.append(event.getData(position));\n     }\n+    return stringBuilder.toString();\n+  }\n \n-    private String generateKey(InEvent event) {\n-        StringBuilder stringBuilder = new StringBuilder();\n-        for (int position : attributePositions) {\n-            stringBuilder.append(event.getData(position));\n-        }\n-        return stringBuilder.toString();\n-    }\n+  @Override\n+  public void destroy() {\n \n-    @Override\n-    public void destroy(){\n-\n-    }\n+  }\n }\n",
            "diff_size": 183
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/503/UniqueWindowProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/503/UniqueWindowProcessor.java\nindex 76b65fc5358..a5ca0042fdd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/503/UniqueWindowProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/503/UniqueWindowProcessor.java\n@@ -151,7 +151,8 @@ public class UniqueWindowProcessor extends WindowProcessor {\n     }\n \n     @Override\n-    public void destroy(){\n+    public void destroy() {\n+\n \n-    }\n }\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/503/UniqueWindowProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/503/UniqueWindowProcessor.java\nindex 76b65fc5358..9e27cf57c25 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/503/UniqueWindowProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/503/UniqueWindowProcessor.java\n@@ -123,8 +123,9 @@ public class UniqueWindowProcessor extends WindowProcessor {\n     }\n \n     @Override\n-    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor, AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n-        uniqueAttributeNames = new String[parameters.length];\n+    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor,\n+            AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n+         uniqueAttributeNames = new String[parameters.length];\n         for (int i = 0, parametersLength = parameters.length; i < parametersLength; i++) {\n             uniqueAttributeNames[i] = ((Variable) parameters[i]).getAttributeName();\n         }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}