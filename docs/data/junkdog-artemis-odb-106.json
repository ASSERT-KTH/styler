{
    "project_name": "junkdog-artemis-odb",
    "error_id": "106",
    "information": {
        "errors": [
            {
                "line": "29",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 109).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\t/**\n\t * @param processSitesEvenIfNoListener If true, only act on fields with an attached {@link LinkListener}.\n\t */\n\tpublic EntityLinkManager(boolean processSitesEvenIfNoListener) {\n\t\tsuper(all());",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/106/EntityLinkManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/106/EntityLinkManager.java\nindex 230c3f8c49f..737800cfc65 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/106/EntityLinkManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/106/EntityLinkManager.java\n@@ -16,121 +16,122 @@ import static com.artemis.Aspect.all;\n  * the world instance.</p>\n  *\n  * @see com.artemis.annotations.EntityId\n- *\n  */\n public class EntityLinkManager extends BaseEntitySystem {\n \n-\tfinal Bag<LinkSite> linkSites = new Bag<LinkSite>();\n-\tfinal Bag<LinkSite> decoratedLinkSites = new Bag<LinkSite>();\n-\n-\tprivate final boolean requireListener;\n-\n-\t/**\n-\t * @param processSitesEvenIfNoListener If true, only act on fields with an attached {@link LinkListener}.\n-\t */\n-\tpublic EntityLinkManager(boolean processSitesEvenIfNoListener) {\n-\t\tsuper(all());\n-\t\tthis.requireListener = !processSitesEvenIfNoListener;\n-\t}\n-\n-\t/**\n-\t * Processes all fields, even if they don't have a {@link LinkListener}.\n-\t */\n-\tpublic EntityLinkManager() {\n-\t\tthis(true);\n-\t}\n-\n-\t@Override\n-\tprotected void initialize() {\n-\t\tLinkCreateListener listener = new LinkCreateListener(this);\n-\t\tworld.getComponentManager().getTypeFactory().register(listener);\n-\t}\n-\n-\n-\t@Override\n-\tprotected void processSystem() {\n-\t\tif (requireListener) {\n-\t\t\tprocess(decoratedLinkSites);\n-\t\t} else {\n-\t\t\tprocess(linkSites);\n-\t\t}\n-\t}\n-\n-\tprivate void process(Bag<LinkSite> sites) {\n-\t\tfor (LinkSite ls : sites) {\n-\t\t\tls.process();\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * <p>Injects and associates the listener with the component. This method\n-\t * is only recommended if only a single field references entities, or if all entity\n-\t * fields are of the same type.</p>\n-\t *\n-\t * <p>Each <code>ComponentType::Field</code> pair can only have one {@link LinkListener}</p>\n-\t *\n-\t * @param component component type associated with listener\n-\t * @param listener link listener\n-\t */\n-\tpublic void register(Class<? extends Component> component, LinkListener listener) {\n-\t\tregister(component, null, listener);\n-\t}\n-\n-\t/**\n-\t * <p>Injects and associates the listener with a specific field for a given\n-\t * component type.</p>\n-\t *\n-\t * <p>Each <code>ComponentType::Field</code> pair can only have one {@link LinkListener}</p>\n-\t *\n-\t * @param component component type associated with listener\n-\t * @param field target field for listener\n-\t * @param listener link listener\n-\t */\n-\tpublic void register(Class<? extends Component> component, String field, LinkListener listener) {\n-\t\tworld.inject(listener);\n-\t\ttry {\n-\t\t\tField f = (field != null)\n-\t\t\t\t? ClassReflection.getDeclaredField(component, field)\n-\t\t\t\t: null;\n-\n-\t\t\tComponentType ct = world.getComponentManager().getTypeFactory().getTypeFor(component);\n-\t\t\tfor (LinkSite site : linkSites) {\n-\t\t\t\tif (ct.equals(site.type) && (f == null || site.field.equals(f))) {\n-\t\t\t\t\tsite.listener = listener;\n-\t\t\t\t\tif (!decoratedLinkSites.contains(site))\n-\t\t\t\t\t\tdecoratedLinkSites.add(site);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (ReflectionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\n-\tprivate static class LinkCreateListener implements ComponentTypeFactory.ComponentTypeListener {\n-\t\tprivate final EntityLinkManager elm;\n-\t\tprivate final LinkFactory linkFactory;\n-\n-\t\tpublic LinkCreateListener(EntityLinkManager elm) {\n-\t\t\tthis.elm = elm;\n-\t\t\tthis.linkFactory = new LinkFactory(elm.getWorld());\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void initialize(Bag<ComponentType> types) {\n-\t\t\tfor (int i = 0, s = types.size(); s > i; i++) {\n-\t\t\t\tonCreated(types.get(i));\n-\t\t\t}\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void onCreated(ComponentType type) {\n-\t\t\tBag<LinkSite> links = linkFactory.create(type);\n-\t\t\tif (links.isEmpty())\n-\t\t\t\treturn;\n-\n-\t\t\tfor (int i = 0, s = links.size(); s > i; i++) {\n-\t\t\t\telm.linkSites.add(links.get(i));\n-\t\t\t}\n-\t\t}\n-\t}\n+    final Bag<LinkSite> linkSites = new Bag<LinkSite>();\n+    final Bag<LinkSite> decoratedLinkSites = new Bag<LinkSite>();\n+\n+    private final boolean requireListener;\n+\n+    /**\n+     * @param processSitesEvenIfNoListener If true, only act on fields with an attached {@link LinkListener}.\n+     */\n+    public EntityLinkManager(boolean processSitesEvenIfNoListener) {\n+        super(all());\n+        this.requireListener = !processSitesEvenIfNoListener;\n+    }\n+\n+    /**\n+     * Processes all fields, even if they don't have a {@link LinkListener}.\n+     */\n+    public EntityLinkManager() {\n+        this(true);\n+    }\n+\n+    @Override\n+    protected void initialize() {\n+        LinkCreateListener listener = new LinkCreateListener(this);\n+        world.getComponentManager().getTypeFactory().register(listener);\n+    }\n+\n+\n+    @Override\n+    protected void processSystem() {\n+        if (requireListener) {\n+            process(decoratedLinkSites);\n+        } else {\n+            process(linkSites);\n+        }\n+    }\n+\n+    private void process(Bag<LinkSite> sites) {\n+        for (LinkSite ls : sites) {\n+            ls.process();\n+        }\n+    }\n+\n+    /**\n+     * <p>Injects and associates the listener with the component. This method\n+     * is only recommended if only a single field references entities, or if all entity\n+     * fields are of the same type.</p>\n+     *\n+     * <p>Each <code>ComponentType::Field</code> pair can only have one {@link LinkListener}</p>\n+     *\n+     * @param component component type associated with listener\n+     * @param listener  link listener\n+     */\n+    public void register(Class<? extends Component> component, LinkListener listener) {\n+        register(component, null, listener);\n+    }\n+\n+    /**\n+     * <p>Injects and associates the listener with a specific field for a given\n+     * component type.</p>\n+     *\n+     * <p>Each <code>ComponentType::Field</code> pair can only have one {@link LinkListener}</p>\n+     *\n+     * @param component component type associated with listener\n+     * @param field     target field for listener\n+     * @param listener  link listener\n+     */\n+    public void register(Class<? extends Component> component, String field, LinkListener listener) {\n+        world.inject(listener);\n+        try {\n+            Field f = (field != null)\n+                    ? ClassReflection.getDeclaredField(component, field)\n+                    : null;\n+\n+            ComponentType ct = world.getComponentManager().getTypeFactory().getTypeFor(component);\n+            for (LinkSite site : linkSites) {\n+                if (ct.equals(site.type) && (f == null || site.field.equals(f))) {\n+                    site.listener = listener;\n+                    if (!decoratedLinkSites.contains(site)) {\n+                        decoratedLinkSites.add(site);\n+                    }\n+                }\n+            }\n+        } catch (ReflectionException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static class LinkCreateListener implements ComponentTypeFactory.ComponentTypeListener {\n+        private final EntityLinkManager elm;\n+        private final LinkFactory linkFactory;\n+\n+        public LinkCreateListener(EntityLinkManager elm) {\n+            this.elm = elm;\n+            this.linkFactory = new LinkFactory(elm.getWorld());\n+        }\n+\n+        @Override\n+        public void initialize(Bag<ComponentType> types) {\n+            for (int i = 0, s = types.size(); s > i; i++) {\n+                onCreated(types.get(i));\n+            }\n+        }\n+\n+        @Override\n+        public void onCreated(ComponentType type) {\n+            Bag<LinkSite> links = linkFactory.create(type);\n+            if (links.isEmpty()) {\n+                return;\n+            }\n+\n+            for (int i = 0, s = links.size(); s > i; i++) {\n+                elm.linkSites.add(links.get(i));\n+            }\n+        }\n+    }\n }\n",
            "diff_size": 116
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/106/EntityLinkManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/106/EntityLinkManager.java\nindex 230c3f8c49f..1544ecc99a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/106/EntityLinkManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/106/EntityLinkManager.java\n@@ -133,4 +133,4 @@ public class EntityLinkManager extends BaseEntitySystem {\n \t\t\t}\n \t\t}\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/106/EntityLinkManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/106/EntityLinkManager.java\nindex 230c3f8c49f..930d0c3ab3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/106/EntityLinkManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/106/EntityLinkManager.java\n@@ -6,7 +6,6 @@ import com.artemis.utils.reflect.ClassReflection;\n import com.artemis.utils.reflect.Field;\n import com.artemis.utils.reflect.ReflectionException;\n \n-\n import static com.artemis.Aspect.all;\n \n /**\n@@ -18,119 +17,127 @@ import static com.artemis.Aspect.all;\n  * @see com.artemis.annotations.EntityId\n  *\n  */\n-public class EntityLinkManager extends BaseEntitySystem {\n \n-\tfinal Bag<LinkSite> linkSites = new Bag<LinkSite>();\n-\tfinal Bag<LinkSite> decoratedLinkSites = new Bag<LinkSite>();\n-\n-\tprivate final boolean requireListener;\n-\n-\t/**\n-\t * @param processSitesEvenIfNoListener If true, only act on fields with an attached {@link LinkListener}.\n-\t */\n-\tpublic EntityLinkManager(boolean processSitesEvenIfNoListener) {\n-\t\tsuper(all());\n-\t\tthis.requireListener = !processSitesEvenIfNoListener;\n-\t}\n-\n-\t/**\n-\t * Processes all fields, even if they don't have a {@link LinkListener}.\n-\t */\n-\tpublic EntityLinkManager() {\n-\t\tthis(true);\n-\t}\n-\n-\t@Override\n-\tprotected void initialize() {\n-\t\tLinkCreateListener listener = new LinkCreateListener(this);\n-\t\tworld.getComponentManager().getTypeFactory().register(listener);\n-\t}\n-\n-\n-\t@Override\n-\tprotected void processSystem() {\n-\t\tif (requireListener) {\n-\t\t\tprocess(decoratedLinkSites);\n-\t\t} else {\n-\t\t\tprocess(linkSites);\n-\t\t}\n-\t}\n-\n-\tprivate void process(Bag<LinkSite> sites) {\n-\t\tfor (LinkSite ls : sites) {\n-\t\t\tls.process();\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * <p>Injects and associates the listener with the component. This method\n-\t * is only recommended if only a single field references entities, or if all entity\n-\t * fields are of the same type.</p>\n-\t *\n-\t * <p>Each <code>ComponentType::Field</code> pair can only have one {@link LinkListener}</p>\n-\t *\n-\t * @param component component type associated with listener\n-\t * @param listener link listener\n-\t */\n-\tpublic void register(Class<? extends Component> component, LinkListener listener) {\n-\t\tregister(component, null, listener);\n-\t}\n-\n-\t/**\n-\t * <p>Injects and associates the listener with a specific field for a given\n-\t * component type.</p>\n-\t *\n-\t * <p>Each <code>ComponentType::Field</code> pair can only have one {@link LinkListener}</p>\n-\t *\n-\t * @param component component type associated with listener\n-\t * @param field target field for listener\n-\t * @param listener link listener\n-\t */\n-\tpublic void register(Class<? extends Component> component, String field, LinkListener listener) {\n-\t\tworld.inject(listener);\n-\t\ttry {\n-\t\t\tField f = (field != null)\n-\t\t\t\t? ClassReflection.getDeclaredField(component, field)\n-\t\t\t\t: null;\n-\n-\t\t\tComponentType ct = world.getComponentManager().getTypeFactory().getTypeFor(component);\n-\t\t\tfor (LinkSite site : linkSites) {\n-\t\t\t\tif (ct.equals(site.type) && (f == null || site.field.equals(f))) {\n-\t\t\t\t\tsite.listener = listener;\n-\t\t\t\t\tif (!decoratedLinkSites.contains(site))\n-\t\t\t\t\t\tdecoratedLinkSites.add(site);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (ReflectionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\n-\tprivate static class LinkCreateListener implements ComponentTypeFactory.ComponentTypeListener {\n-\t\tprivate final EntityLinkManager elm;\n-\t\tprivate final LinkFactory linkFactory;\n-\n-\t\tpublic LinkCreateListener(EntityLinkManager elm) {\n-\t\t\tthis.elm = elm;\n-\t\t\tthis.linkFactory = new LinkFactory(elm.getWorld());\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void initialize(Bag<ComponentType> types) {\n-\t\t\tfor (int i = 0, s = types.size(); s > i; i++) {\n-\t\t\t\tonCreated(types.get(i));\n-\t\t\t}\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void onCreated(ComponentType type) {\n-\t\t\tBag<LinkSite> links = linkFactory.create(type);\n-\t\t\tif (links.isEmpty())\n-\t\t\t\treturn;\n-\n-\t\t\tfor (int i = 0, s = links.size(); s > i; i++) {\n-\t\t\t\telm.linkSites.add(links.get(i));\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n+\n+\n+public class EntityLinkManager extends BaseEntitySystem {\n+ final Bag<LinkSite> linkSites = new Bag<LinkSite>();\n+ final Bag<LinkSite> decoratedLinkSites = new Bag<LinkSite>();\n+\n+ private final boolean requireListener;\n+\n+ /**\n+  * @param processSitesEvenIfNoListener If true, only act on fields with an attached {@link LinkListener}.\n+  */\n+\n+ public EntityLinkManager(boolean processSitesEvenIfNoListener) {\n+  super(all());\n+  this.requireListener = !processSitesEvenIfNoListener;\n+ }\n+\n+ /**\n+  * Processes all fields, even if they don't have a {@link LinkListener}.\n+  */\n+\n+ public EntityLinkManager() {\n+  this(true);\n+ }\n+\n+ @Override\n+ protected void initialize() {\n+  LinkCreateListener listener = new LinkCreateListener(this);\n+  world.getComponentManager().getTypeFactory().register(listener);\n+ }\n+\n+ @Override\n+ protected void processSystem() {\n+  if (requireListener) {\n+   process(decoratedLinkSites);\n+  } else {\n+   process(linkSites);\n+  }\n+ }\n+\n+ private void process(Bag<LinkSite> sites) {\n+  for (LinkSite ls : sites) {\n+   ls.process();\n+  }\n+ }\n+\n+ /**\n+  * <p>Injects and associates the listener with the component. This method\n+  * is only recommended if only a single field references entities, or if all entity\n+  * fields are of the same type.</p>\n+  *\n+  * <p>Each <code>ComponentType::Field</code> pair can only have one {@link LinkListener}</p>\n+  *\n+  * @param component component type associated with listener\n+  * @param listener link listener\n+  */\n+\n+\n+ public void register(Class<? extends Component> component, LinkListener listener) {\n+  register(component, null, listener);\n+ }\n+\n+ /**\n+  * <p>Injects and associates the listener with a specific field for a given\n+  * component type.</p>\n+  *\n+  * <p>Each <code>ComponentType::Field</code> pair can only have one {@link LinkListener}</p>\n+  *\n+  * @param component component type associated with listener\n+  * @param field target field for listener\n+  * @param listener link listener\n+  */\n+\n+\n+ public void register(Class<? extends Component> component, String field, LinkListener listener) {\n+  world.inject(listener);\n+\n+  try {\n+   Field f = (field != null)\n+    ? ClassReflection.getDeclaredField(component, field)\n+    : null;\n+   ComponentType ct = world.getComponentManager().getTypeFactory()\n+                                                 .getTypeFor(component);\n+   for (LinkSite site : linkSites) {\n+    if (ct.equals(site.type) && (f == null || site.field.equals(f))) {\n+     site.listener = listener;\n+     if (!decoratedLinkSites.contains(site))\n+      decoratedLinkSites.add(site);\n+    }\n+   }\n+  } catch (ReflectionException e) {\n+   throw new RuntimeException(e);\n+  }\n+ }\n+\n+ private static class LinkCreateListener implements ComponentTypeFactory.ComponentTypeListener {\n+  private final EntityLinkManager elm;\n+\n+  private final LinkFactory linkFactory;\n+\n+  public LinkCreateListener(EntityLinkManager elm) {\n+   this.elm = elm;\n+   this.linkFactory = new LinkFactory(elm.getWorld());\n+  }\n+\n+  @Override\n+  public void initialize(Bag<ComponentType> types) {\n+   for (int i = 0, s = types.size(); s > i; i++) {\n+    onCreated(types.get(i));\n+   }\n+  }\n+\n+  @Override\n+  public void onCreated(ComponentType type) {\n+   Bag<LinkSite> links = linkFactory.create(type);\n+   if (links.isEmpty())\n+    return;\n+   for (int i = 0, s = links.size(); s > i; i++) {\n+    elm.linkSites.add(links.get(i));\n+   }\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 125
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}