{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3113",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3113/QueryLogFormatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3113/QueryLogFormatter.java\nindex e499915e860..889186d1d9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3113/QueryLogFormatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3113/QueryLogFormatter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.query;\n \n import java.util.Collection;\n@@ -31,121 +32,117 @@ import org.neo4j.values.virtual.MapValue;\n \n class QueryLogFormatter\n {\n-    private QueryLogFormatter()\n-    {\n-    }\n+  private QueryLogFormatter()\n+  {\n+  }\n \n-    static void formatPageDetails( StringBuilder result, QuerySnapshot query )\n-    {\n-        result.append( query.pageHits() ).append( \" page hits, \" );\n-        result.append( query.pageFaults() ).append( \" page faults - \" );\n-    }\n+  static void formatPageDetails(StringBuilder result, QuerySnapshot query)\n+  {\n+    result.append(query.pageHits()).append(\" page hits, \");\n+    result.append(query.pageFaults()).append(\" page faults - \");\n+  }\n \n-    static void formatAllocatedBytes( StringBuilder result, QuerySnapshot query )\n+  static void formatAllocatedBytes(StringBuilder result, QuerySnapshot query)\n+  {\n+    Long bytes = query.allocatedBytes();\n+    if (bytes != null)\n     {\n-        Long bytes = query.allocatedBytes();\n-        if ( bytes != null )\n-        {\n-            result.append( bytes ).append( \" B - \" );\n-        }\n+      result.append(bytes).append(\" B - \");\n     }\n+  }\n \n-    static void formatDetailedTime( StringBuilder result, QuerySnapshot query )\n+  static void formatDetailedTime(StringBuilder result, QuerySnapshot query)\n+  {\n+    result.append(\"(planning: \").append(query.planningTimeMillis());\n+    Long cpuTime = query.cpuTimeMillis();\n+    if (cpuTime != null)\n     {\n-        result.append( \"(planning: \" ).append( query.planningTimeMillis() );\n-        Long cpuTime = query.cpuTimeMillis();\n-        if ( cpuTime != null )\n-        {\n-            result.append( \", cpu: \" ).append( cpuTime );\n-        }\n-        result.append( \", waiting: \" ).append( query.waitTimeMillis() );\n-        result.append( \") - \" );\n+      result.append(\", cpu: \").append(cpuTime);\n     }\n+    result.append(\", waiting: \").append(query.waitTimeMillis());\n+    result.append(\") - \");\n+  }\n \n-    static void formatMapValue( StringBuilder result, MapValue params )\n-    {\n-        formatMapValue( result, params, Collections.emptySet() );\n-    }\n+  static void formatMapValue(StringBuilder result, MapValue params)\n+  {\n+    formatMapValue(result, params, Collections.emptySet());\n+  }\n \n-    static void formatMapValue( StringBuilder result, MapValue params, Collection<String> obfuscate )\n+  static void formatMapValue(StringBuilder result, MapValue params, Collection<String> obfuscate)\n+  {\n+    result.append('{');\n+    if (params != null)\n     {\n-        result.append( '{' );\n-        if ( params != null )\n-        {\n-            String sep = \"\";\n-            for ( Map.Entry<String,AnyValue> entry : params.entrySet() )\n-            {\n-                result\n-                        .append( sep )\n-                        .append( entry.getKey() )\n-                        .append( \": \" );\n+      String sep = \"\";\n+      for (Map.Entry<String, AnyValue> entry : params.entrySet())\n+      {\n+        result\n+            .append(sep)\n+            .append(entry.getKey())\n+            .append(\": \");\n \n-                if ( obfuscate.contains( entry.getKey() ) )\n-                {\n-                    result.append( \"******\" );\n-                }\n-                else\n-                {\n-                    result.append( formatAnyValue( entry.getValue() ));\n-                }\n-                sep = \", \";\n-            }\n+        if (obfuscate.contains(entry.getKey()))\n+        {\n+          result.append(\"******\");\n+        } else\n+        {\n+          result.append(formatAnyValue(entry.getValue()));\n         }\n-        result.append( \"}\" );\n+        sep = \", \";\n+      }\n     }\n+    result.append(\"}\");\n+  }\n \n-    static String formatAnyValue( AnyValue value )\n-    {\n-        PrettyPrinter printer = new PrettyPrinter( \"'\" );\n-        value.writeTo( printer );\n-        return printer.value();\n-    }\n+  static String formatAnyValue(AnyValue value)\n+  {\n+    PrettyPrinter printer = new PrettyPrinter(\"'\");\n+    value.writeTo(printer);\n+    return printer.value();\n+  }\n \n-    static void formatMap( StringBuilder result, Map<String,Object> params )\n-    {\n-        formatMap( result, params, Collections.emptySet() );\n-    }\n+  static void formatMap(StringBuilder result, Map<String, Object> params)\n+  {\n+    formatMap(result, params, Collections.emptySet());\n+  }\n \n-    static void formatMap( StringBuilder result, Map<String, Object> params, Collection<String> obfuscate )\n+  static void formatMap(StringBuilder result, Map<String, Object> params, Collection<String> obfuscate)\n+  {\n+    result.append('{');\n+    if (params != null)\n     {\n-        result.append( '{' );\n-        if ( params != null )\n-        {\n-            String sep = \"\";\n-            for ( Map.Entry<String,Object> entry : params.entrySet() )\n-            {\n-                result\n-                        .append( sep )\n-                        .append( entry.getKey() )\n-                        .append( \": \" );\n+      String sep = \"\";\n+      for (Map.Entry<String, Object> entry : params.entrySet())\n+      {\n+        result\n+            .append(sep)\n+            .append(entry.getKey())\n+            .append(\": \");\n \n-                if ( obfuscate.contains( entry.getKey() ) )\n-                {\n-                    result.append( \"******\" );\n-                }\n-                else\n-                {\n-                    formatValue( result, entry.getValue() );\n-                }\n-                sep = \", \";\n-            }\n+        if (obfuscate.contains(entry.getKey()))\n+        {\n+          result.append(\"******\");\n+        } else\n+        {\n+          formatValue(result, entry.getValue());\n         }\n-        result.append( \"}\" );\n+        sep = \", \";\n+      }\n     }\n+    result.append(\"}\");\n+  }\n \n-    private static void formatValue( StringBuilder result, Object value )\n+  private static void formatValue(StringBuilder result, Object value)\n+  {\n+    if (value instanceof Map<?, ?>)\n     {\n-        if ( value instanceof Map<?,?> )\n-        {\n-            formatMapValue( result, (MapValue) value );\n-        }\n-        else if ( value instanceof String )\n-        {\n-            result.append( '\\'' ).append( value ).append( '\\'' );\n-        }\n-        else\n-        {\n-            result.append( Strings.prettyPrint( value ) );\n-        }\n+      formatMapValue(result, (MapValue) value);\n+    } else if (value instanceof String)\n+    {\n+      result.append('\\'').append(value).append('\\'');\n+    } else\n+    {\n+      result.append(Strings.prettyPrint(value));\n     }\n+  }\n }\n",
            "diff_size": 121
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3113/QueryLogFormatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3113/QueryLogFormatter.java\nindex e499915e860..edc7871b57f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3113/QueryLogFormatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3113/QueryLogFormatter.java\n@@ -75,12 +75,9 @@ class QueryLogFormatter\n             String sep = \"\";\n             for ( Map.Entry<String,AnyValue> entry : params.entrySet() )\n             {\n-                result\n-                        .append( sep )\n-                        .append( entry.getKey() )\n-                        .append( \": \" );\n-\n-                if ( obfuscate.contains( entry.getKey() ) )\n+                result.append( sep )\n+                        .append( entry.getKey() ).append( \": \" );\n+if ( obfuscate.contains( entry.getKey() ) )\n                 {\n                     result.append( \"******\" );\n                 }\n@@ -88,7 +85,8 @@ class QueryLogFormatter\n                 {\n                     result.append( formatAnyValue( entry.getValue() ));\n                 }\n-                sep = \", \";\n+\n+sep = \", \";\n             }\n         }\n         result.append( \"}\" );\n@@ -106,7 +104,7 @@ class QueryLogFormatter\n         formatMap( result, params, Collections.emptySet() );\n     }\n \n-    static void formatMap( StringBuilder result, Map<String, Object> params, Collection<String> obfuscate )\n+    static void formatMap( StringBuilder result, Map<String,Object> params, Collection<String> obfuscate )\n     {\n         result.append( '{' );\n         if ( params != null )\n@@ -114,12 +112,9 @@ class QueryLogFormatter\n             String sep = \"\";\n             for ( Map.Entry<String,Object> entry : params.entrySet() )\n             {\n-                result\n-                        .append( sep )\n-                        .append( entry.getKey() )\n-                        .append( \": \" );\n-\n-                if ( obfuscate.contains( entry.getKey() ) )\n+                result.append( sep )\n+                        .append( entry.getKey() ).append( \": \" );\n+if ( obfuscate.contains( entry.getKey() ) )\n                 {\n                     result.append( \"******\" );\n                 }\n@@ -127,7 +122,8 @@ class QueryLogFormatter\n                 {\n                     formatValue( result, entry.getValue() );\n                 }\n-                sep = \", \";\n+\n+sep = \", \";\n             }\n         }\n         result.append( \"}\" );\n@@ -135,7 +131,7 @@ class QueryLogFormatter\n \n     private static void formatValue( StringBuilder result, Object value )\n     {\n-        if ( value instanceof Map<?,?> )\n+        if ( value instanceof Map<?, ?> )\n         {\n             formatMapValue( result, (MapValue) value );\n         }\n@@ -148,4 +144,4 @@ class QueryLogFormatter\n             result.append( Strings.prettyPrint( value ) );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}