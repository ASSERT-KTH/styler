{
    "project_name": "apache-usergrid",
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "41",
                "severity": "warning",
                "message": "Use of @author javadoc keyword is prohibited.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * sufficient for subsequent use\n *\n * @author tnine\n */\npublic class SecondaryIndexSliceParser implements SliceParser {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "28",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "32",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "51",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "71",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "36",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "42",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "37",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "41",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "38",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "42",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "41",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "47",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "42",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "48",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "37",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "41",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "38",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "42",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "42",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "52",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "43",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "53",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/3/SecondaryIndexSliceParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/3/SecondaryIndexSliceParser.java\nindex bd1cc9f0c2b..ecd215aaad0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/3/SecondaryIndexSliceParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/3/SecondaryIndexSliceParser.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.query.ir.result;\n \n \n@@ -32,9 +33,9 @@ import me.prettyprint.hector.api.beans.DynamicComposite;\n /**\n  * Parser for reading and writing secondary index composites.  Instances of this class should not be shared among\n  * iterators.\n- *\n+ * <p>\n  * It it designed with the following assumptions in mind.\n- *\n+ * <p>\n  * 1) The slice contains the same data type for every element 2) Evaluating the first parse call for a comparator is\n  * sufficient for subsequent use\n  *\n@@ -48,7 +49,7 @@ public class SecondaryIndexSliceParser implements SliceParser {\n     private final SliceCursorGenerator sliceCursorGenerator;\n \n \n-    public SecondaryIndexSliceParser( final SliceCursorGenerator sliceCursorGenerator ) {\n+    public SecondaryIndexSliceParser(final SliceCursorGenerator sliceCursorGenerator) {\n         this.sliceCursorGenerator = sliceCursorGenerator;\n     }\n \n@@ -57,27 +58,27 @@ public class SecondaryIndexSliceParser implements SliceParser {\n      * @see org.apache.usergrid.persistence.query.ir.result.SliceParser#parse(java.nio.ByteBuffer)\n      */\n     @Override\n-    public ScanColumn parse( ByteBuffer buff, final boolean isReversed ) {\n-        final DynamicComposite composite = DynamicComposite.fromByteBuffer( buff.duplicate() );\n+    public ScanColumn parse(ByteBuffer buff, final boolean isReversed) {\n+        final DynamicComposite composite = DynamicComposite.fromByteBuffer(buff.duplicate());\n \n-        final UUID uuid = ( UUID ) composite.get( 2 );\n-        final Object value = composite.get( 1 );\n+        final UUID uuid = (UUID) composite.get(2);\n+        final Object value = composite.get(1);\n \n-        if ( typeComparator == null ) {\n-            typeComparator = getTypeComparator( value, isReversed );\n+        if (typeComparator == null) {\n+            typeComparator = getTypeComparator(value, isReversed);\n         }\n \n-        return new SecondaryIndexColumn( uuid, value, buff, typeComparator, sliceCursorGenerator );\n+        return new SecondaryIndexColumn(uuid, value, buff, typeComparator, sliceCursorGenerator);\n     }\n \n \n-    private Comparator<SecondaryIndexColumn> getTypeComparator( final Object value, final boolean isReversed ) {\n+    private Comparator<SecondaryIndexColumn> getTypeComparator(final Object value, final boolean isReversed) {\n \n         final Class clazz = value.getClass();\n-        final Comparator<SecondaryIndexColumn> comparator = COMPARATOR_MAP.get( new MapKey( clazz, isReversed ) );\n+        final Comparator<SecondaryIndexColumn> comparator = COMPARATOR_MAP.get(new MapKey(clazz, isReversed));\n \n-        if ( comparator == null ) {\n-            throw new NullPointerException( \"comparator was not found for runtime type '\" + clazz + \"'\" );\n+        if (comparator == null) {\n+            throw new NullPointerException(\"comparator was not found for runtime type '\" + clazz + \"'\");\n         }\n \n         return comparator;\n@@ -90,6 +91,7 @@ public class SecondaryIndexSliceParser implements SliceParser {\n     public static class SecondaryIndexColumn extends AbstractScanColumn {\n \n         private final Object value;\n+\n         private final Comparator<SecondaryIndexColumn> valueComparator;\n \n \n@@ -98,56 +100,58 @@ public class SecondaryIndexSliceParser implements SliceParser {\n          *\n          * @param valueComparator The comparator for the values\n          */\n-        public SecondaryIndexColumn( final UUID uuid, final Object value, final ByteBuffer columnNameBuffer,\n-                                     final Comparator<SecondaryIndexColumn> valueComparator,\n-                                     final SliceCursorGenerator sliceCursorGenerator ) {\n-            super( uuid, columnNameBuffer, sliceCursorGenerator );\n+        public SecondaryIndexColumn(final UUID uuid, final Object value, final ByteBuffer columnNameBuffer,\n+                                    final Comparator<SecondaryIndexColumn> valueComparator,\n+                                    final SliceCursorGenerator sliceCursorGenerator) {\n+            super(uuid, columnNameBuffer, sliceCursorGenerator);\n             this.value = value;\n             this.valueComparator = valueComparator;\n         }\n \n \n-        /** Get the value from the node */\n+        /**\n+         * Get the value from the node\n+         */\n         public Object getValue() {\n             return this.value;\n         }\n \n \n         @Override\n-        public int compareTo( final ScanColumn other ) {\n-            if ( other == null ) {\n+        public int compareTo(final ScanColumn other) {\n+            if (other == null) {\n                 return 1;\n             }\n \n-            return valueComparator.compare( this, ( SecondaryIndexColumn ) other );\n+            return valueComparator.compare(this, (SecondaryIndexColumn) other);\n         }\n     }\n \n \n     private static final Map<MapKey, Comparator<SecondaryIndexColumn>> COMPARATOR_MAP =\n-            new HashMap<MapKey, Comparator<SecondaryIndexColumn>>();\n+        new HashMap<MapKey, Comparator<SecondaryIndexColumn>>();\n \n     static {\n \n         final LongComparator longComparator = new LongComparator();\n-        COMPARATOR_MAP.put( new MapKey( Long.class, false ), new ForwardValueComparator( longComparator ) );\n-        COMPARATOR_MAP.put( new MapKey( Long.class, true ), new ReverseValueComparator( longComparator ) );\n+        COMPARATOR_MAP.put(new MapKey(Long.class, false), new ForwardValueComparator(longComparator));\n+        COMPARATOR_MAP.put(new MapKey(Long.class, true), new ReverseValueComparator(longComparator));\n \n         final StringComparator stringComparator = new StringComparator();\n \n-        COMPARATOR_MAP.put( new MapKey( String.class, false ), new ForwardValueComparator( stringComparator ) );\n-        COMPARATOR_MAP.put( new MapKey( String.class, true ), new ReverseValueComparator( stringComparator ) );\n+        COMPARATOR_MAP.put(new MapKey(String.class, false), new ForwardValueComparator(stringComparator));\n+        COMPARATOR_MAP.put(new MapKey(String.class, true), new ReverseValueComparator(stringComparator));\n \n \n         final UUIDComparator uuidComparator = new UUIDComparator();\n \n-        COMPARATOR_MAP.put( new MapKey( UUID.class, false ), new ForwardValueComparator( uuidComparator ) );\n-        COMPARATOR_MAP.put( new MapKey( UUID.class, true ), new ReverseValueComparator( uuidComparator ) );\n+        COMPARATOR_MAP.put(new MapKey(UUID.class, false), new ForwardValueComparator(uuidComparator));\n+        COMPARATOR_MAP.put(new MapKey(UUID.class, true), new ReverseValueComparator(uuidComparator));\n \n         final BigIntegerComparator bigIntegerComparator = new BigIntegerComparator();\n \n-        COMPARATOR_MAP.put( new MapKey( BigInteger.class, false ), new ForwardValueComparator( bigIntegerComparator ) );\n-        COMPARATOR_MAP.put( new MapKey( BigInteger.class, true ), new ReverseValueComparator( bigIntegerComparator ) );\n+        COMPARATOR_MAP.put(new MapKey(BigInteger.class, false), new ForwardValueComparator(bigIntegerComparator));\n+        COMPARATOR_MAP.put(new MapKey(BigInteger.class, true), new ReverseValueComparator(bigIntegerComparator));\n     }\n \n \n@@ -156,37 +160,38 @@ public class SecondaryIndexSliceParser implements SliceParser {\n      */\n     private static final class MapKey {\n         public final Class<?> clazz;\n+\n         public final boolean reversed;\n \n \n-        private MapKey( final Class<?> clazz, final boolean reversed ) {\n+        private MapKey(final Class<?> clazz, final boolean reversed) {\n             this.clazz = clazz;\n             this.reversed = reversed;\n         }\n \n \n         @Override\n-        public boolean equals( final Object o ) {\n-            if ( this == o ) {\n+        public boolean equals(final Object o) {\n+            if (this == o) {\n                 return true;\n             }\n-            if ( !( o instanceof MapKey ) ) {\n+            if (!(o instanceof MapKey)) {\n                 return false;\n             }\n \n-            final MapKey mapKey = ( MapKey ) o;\n+            final MapKey mapKey = (MapKey) o;\n \n-            if ( reversed != mapKey.reversed ) {\n+            if (reversed != mapKey.reversed) {\n                 return false;\n             }\n-            return clazz.equals( mapKey.clazz );\n+            return clazz.equals(mapKey.clazz);\n         }\n \n \n         @Override\n         public int hashCode() {\n             int result = clazz.hashCode();\n-            result = 31 * result + ( reversed ? 1 : 0 );\n+            result = 31 * result + (reversed ? 1 : 0);\n             return result;\n         }\n     }\n@@ -195,54 +200,54 @@ public class SecondaryIndexSliceParser implements SliceParser {\n     private static final class LongComparator implements Comparator<SecondaryIndexColumn> {\n \n         @Override\n-        public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n+        public int compare(final SecondaryIndexColumn first, final SecondaryIndexColumn second) {\n \n-            final Long firstLong = ( Long ) first.value;\n-            final Long secondLong = ( Long ) second.value;\n+            final Long firstLong = (Long) first.value;\n+            final Long secondLong = (Long) second.value;\n \n \n-            return Long.compare( firstLong, secondLong );\n+            return Long.compare(firstLong, secondLong);\n         }\n     }\n \n \n     private static final class StringComparator implements Comparator<SecondaryIndexColumn> {\n         @Override\n-        public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n+        public int compare(final SecondaryIndexColumn first, final SecondaryIndexColumn second) {\n \n-            if ( first == null && second != null ) {\n+            if (first == null && second != null) {\n                 return -1;\n             }\n \n-            final String firstString = ( String ) first.value;\n-            final String secondString = ( String ) second.value;\n+            final String firstString = (String) first.value;\n+            final String secondString = (String) second.value;\n \n \n-            return firstString.compareTo( secondString );\n+            return firstString.compareTo(secondString);\n         }\n     }\n \n \n     private static final class UUIDComparator implements Comparator<SecondaryIndexColumn> {\n         @Override\n-        public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n-            final UUID firstUUID = ( UUID ) first.value;\n-            final UUID secondUUID = ( UUID ) second.value;\n+        public int compare(final SecondaryIndexColumn first, final SecondaryIndexColumn second) {\n+            final UUID firstUUID = (UUID) first.value;\n+            final UUID secondUUID = (UUID) second.value;\n \n \n-            return UUIDUtils.compare( firstUUID, secondUUID );\n+            return UUIDUtils.compare(firstUUID, secondUUID);\n         }\n     }\n \n \n     private static final class BigIntegerComparator implements Comparator<SecondaryIndexColumn> {\n         @Override\n-        public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n-            final BigInteger firstInt = ( BigInteger ) first.value;\n-            final BigInteger secondInt = ( BigInteger ) second.value;\n+        public int compare(final SecondaryIndexColumn first, final SecondaryIndexColumn second) {\n+            final BigInteger firstInt = (BigInteger) first.value;\n+            final BigInteger secondInt = (BigInteger) second.value;\n \n \n-            return firstInt.compareTo( secondInt );\n+            return firstInt.compareTo(secondInt);\n         }\n     }\n \n@@ -255,18 +260,18 @@ public class SecondaryIndexSliceParser implements SliceParser {\n         private final Comparator<SecondaryIndexColumn> comparator;\n \n \n-        private ForwardValueComparator( final Comparator<SecondaryIndexColumn> comparator ) {\n+        private ForwardValueComparator(final Comparator<SecondaryIndexColumn> comparator) {\n             this.comparator = comparator;\n         }\n \n \n         @Override\n-        public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n+        public int compare(final SecondaryIndexColumn first, final SecondaryIndexColumn second) {\n \n-            int compare = comparator.compare( first, second );\n+            int compare = comparator.compare(first, second);\n \n-            if ( compare == 0 ) {\n-                return com.fasterxml.uuid.UUIDComparator.staticCompare( first.uuid, second.uuid );\n+            if (compare == 0) {\n+                return com.fasterxml.uuid.UUIDComparator.staticCompare(first.uuid, second.uuid);\n             }\n \n             return compare;\n@@ -282,17 +287,17 @@ public class SecondaryIndexSliceParser implements SliceParser {\n         private final Comparator<SecondaryIndexColumn> comparator;\n \n \n-        private ReverseValueComparator( final Comparator<SecondaryIndexColumn> comparator ) {\n+        private ReverseValueComparator(final Comparator<SecondaryIndexColumn> comparator) {\n             this.comparator = comparator;\n         }\n \n \n         @Override\n-        public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n-            int compare = comparator.compare( first, second ) * -1;\n+        public int compare(final SecondaryIndexColumn first, final SecondaryIndexColumn second) {\n+            int compare = comparator.compare(first, second) * -1;\n \n-            if ( compare == 0 ) {\n-                return com.fasterxml.uuid.UUIDComparator.staticCompare( first.uuid, second.uuid );\n+            if (compare == 0) {\n+                return com.fasterxml.uuid.UUIDComparator.staticCompare(first.uuid, second.uuid);\n             }\n \n             return compare;\n",
            "diff_size": 71
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/3/SecondaryIndexSliceParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/3/SecondaryIndexSliceParser.java\nindex bd1cc9f0c2b..48dee471735 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/3/SecondaryIndexSliceParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/3/SecondaryIndexSliceParser.java\n@@ -98,10 +98,8 @@ public class SecondaryIndexSliceParser implements SliceParser {\n          *\n          * @param valueComparator The comparator for the values\n          */\n-        public SecondaryIndexColumn( final UUID uuid, final Object value, final ByteBuffer columnNameBuffer,\n-                                     final Comparator<SecondaryIndexColumn> valueComparator,\n-                                     final SliceCursorGenerator sliceCursorGenerator ) {\n-            super( uuid, columnNameBuffer, sliceCursorGenerator );\n+        public SecondaryIndexColumn( final UUID uuid, final Object value, final ByteBuffer columnNameBuffer, final Comparator<SecondaryIndexColumn> valueComparator, final SliceCursorGenerator sliceCursorGenerator ) {\n+    super( uuid, columnNameBuffer, sliceCursorGenerator );\n             this.value = value;\n             this.valueComparator = valueComparator;\n         }\n@@ -127,7 +125,8 @@ public class SecondaryIndexSliceParser implements SliceParser {\n     private static final Map<MapKey, Comparator<SecondaryIndexColumn>> COMPARATOR_MAP =\n             new HashMap<MapKey, Comparator<SecondaryIndexColumn>>();\n \n-    static {\n+\n+static {\n \n         final LongComparator longComparator = new LongComparator();\n         COMPARATOR_MAP.put( new MapKey( Long.class, false ), new ForwardValueComparator( longComparator ) );\n@@ -137,9 +136,7 @@ public class SecondaryIndexSliceParser implements SliceParser {\n \n         COMPARATOR_MAP.put( new MapKey( String.class, false ), new ForwardValueComparator( stringComparator ) );\n         COMPARATOR_MAP.put( new MapKey( String.class, true ), new ReverseValueComparator( stringComparator ) );\n-\n-\n-        final UUIDComparator uuidComparator = new UUIDComparator();\n+final UUIDComparator uuidComparator = new UUIDComparator();\n \n         COMPARATOR_MAP.put( new MapKey( UUID.class, false ), new ForwardValueComparator( uuidComparator ) );\n         COMPARATOR_MAP.put( new MapKey( UUID.class, true ), new ReverseValueComparator( uuidComparator ) );\n@@ -173,8 +170,7 @@ public class SecondaryIndexSliceParser implements SliceParser {\n             if ( !( o instanceof MapKey ) ) {\n                 return false;\n             }\n-\n-            final MapKey mapKey = ( MapKey ) o;\n+final MapKey mapKey = ( MapKey ) o;\n \n             if ( reversed != mapKey.reversed ) {\n                 return false;\n@@ -213,8 +209,7 @@ public class SecondaryIndexSliceParser implements SliceParser {\n             if ( first == null && second != null ) {\n                 return -1;\n             }\n-\n-            final String firstString = ( String ) first.value;\n+final String firstString = ( String ) first.value;\n             final String secondString = ( String ) second.value;\n \n \n@@ -298,4 +293,4 @@ public class SecondaryIndexSliceParser implements SliceParser {\n             return compare;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/3/SecondaryIndexSliceParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/3/SecondaryIndexSliceParser.java\nindex bd1cc9f0c2b..edf93d1d33d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/3/SecondaryIndexSliceParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/3/SecondaryIndexSliceParser.java\n@@ -23,9 +23,7 @@ import java.util.Comparator;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.UUID;\n-\n import org.apache.usergrid.utils.UUIDUtils;\n-\n import me.prettyprint.hector.api.beans.DynamicComposite;\n \n \n@@ -40,11 +38,13 @@ import me.prettyprint.hector.api.beans.DynamicComposite;\n  *\n  * @author tnine\n  */\n+\n+\n public class SecondaryIndexSliceParser implements SliceParser {\n \n     //the type comparator\n-    private Comparator<SecondaryIndexColumn> typeComparator;\n \n+    private Comparator<SecondaryIndexColumn> typeComparator;\n     private final SliceCursorGenerator sliceCursorGenerator;\n \n \n@@ -56,30 +56,26 @@ public class SecondaryIndexSliceParser implements SliceParser {\n     /* (non-Javadoc)\n      * @see org.apache.usergrid.persistence.query.ir.result.SliceParser#parse(java.nio.ByteBuffer)\n      */\n+\n+\n     @Override\n     public ScanColumn parse( ByteBuffer buff, final boolean isReversed ) {\n         final DynamicComposite composite = DynamicComposite.fromByteBuffer( buff.duplicate() );\n-\n         final UUID uuid = ( UUID ) composite.get( 2 );\n         final Object value = composite.get( 1 );\n-\n         if ( typeComparator == null ) {\n             typeComparator = getTypeComparator( value, isReversed );\n         }\n-\n         return new SecondaryIndexColumn( uuid, value, buff, typeComparator, sliceCursorGenerator );\n     }\n \n \n     private Comparator<SecondaryIndexColumn> getTypeComparator( final Object value, final boolean isReversed ) {\n-\n         final Class clazz = value.getClass();\n         final Comparator<SecondaryIndexColumn> comparator = COMPARATOR_MAP.get( new MapKey( clazz, isReversed ) );\n-\n         if ( comparator == null ) {\n             throw new NullPointerException( \"comparator was not found for runtime type '\" + clazz + \"'\" );\n         }\n-\n         return comparator;\n     }\n \n@@ -87,6 +83,8 @@ public class SecondaryIndexSliceParser implements SliceParser {\n     /**\n      * Column for our secondary index type\n      */\n+\n+\n     public static class SecondaryIndexColumn extends AbstractScanColumn {\n \n         private final Object value;\n@@ -98,9 +96,9 @@ public class SecondaryIndexSliceParser implements SliceParser {\n          *\n          * @param valueComparator The comparator for the values\n          */\n-        public SecondaryIndexColumn( final UUID uuid, final Object value, final ByteBuffer columnNameBuffer,\n-                                     final Comparator<SecondaryIndexColumn> valueComparator,\n-                                     final SliceCursorGenerator sliceCursorGenerator ) {\n+\n+\n+        public SecondaryIndexColumn( final UUID uuid, final Object value, final ByteBuffer columnNameBuffer, final Comparator<SecondaryIndexColumn> valueComparator, final SliceCursorGenerator sliceCursorGenerator ) {\n             super( uuid, columnNameBuffer, sliceCursorGenerator );\n             this.value = value;\n             this.valueComparator = valueComparator;\n@@ -108,6 +106,8 @@ public class SecondaryIndexSliceParser implements SliceParser {\n \n \n         /** Get the value from the node */\n+\n+\n         public Object getValue() {\n             return this.value;\n         }\n@@ -118,34 +118,25 @@ public class SecondaryIndexSliceParser implements SliceParser {\n             if ( other == null ) {\n                 return 1;\n             }\n-\n             return valueComparator.compare( this, ( SecondaryIndexColumn ) other );\n         }\n     }\n \n \n-    private static final Map<MapKey, Comparator<SecondaryIndexColumn>> COMPARATOR_MAP =\n-            new HashMap<MapKey, Comparator<SecondaryIndexColumn>>();\n+    private static final Map<MapKey, Comparator<SecondaryIndexColumn>> COMPARATOR_MAP = new HashMap<MapKey, Comparator<SecondaryIndexColumn>>();\n \n-    static {\n \n+    static {\n         final LongComparator longComparator = new LongComparator();\n         COMPARATOR_MAP.put( new MapKey( Long.class, false ), new ForwardValueComparator( longComparator ) );\n         COMPARATOR_MAP.put( new MapKey( Long.class, true ), new ReverseValueComparator( longComparator ) );\n-\n         final StringComparator stringComparator = new StringComparator();\n-\n         COMPARATOR_MAP.put( new MapKey( String.class, false ), new ForwardValueComparator( stringComparator ) );\n         COMPARATOR_MAP.put( new MapKey( String.class, true ), new ReverseValueComparator( stringComparator ) );\n-\n-\n         final UUIDComparator uuidComparator = new UUIDComparator();\n-\n         COMPARATOR_MAP.put( new MapKey( UUID.class, false ), new ForwardValueComparator( uuidComparator ) );\n         COMPARATOR_MAP.put( new MapKey( UUID.class, true ), new ReverseValueComparator( uuidComparator ) );\n-\n         final BigIntegerComparator bigIntegerComparator = new BigIntegerComparator();\n-\n         COMPARATOR_MAP.put( new MapKey( BigInteger.class, false ), new ForwardValueComparator( bigIntegerComparator ) );\n         COMPARATOR_MAP.put( new MapKey( BigInteger.class, true ), new ReverseValueComparator( bigIntegerComparator ) );\n     }\n@@ -154,7 +145,10 @@ public class SecondaryIndexSliceParser implements SliceParser {\n     /**\n      * The key for the map\n      */\n+\n+\n     private static final class MapKey {\n+\n         public final Class<?> clazz;\n         public final boolean reversed;\n \n@@ -175,7 +169,6 @@ public class SecondaryIndexSliceParser implements SliceParser {\n             }\n \n             final MapKey mapKey = ( MapKey ) o;\n-\n             if ( reversed != mapKey.reversed ) {\n                 return false;\n             }\n@@ -196,52 +189,45 @@ public class SecondaryIndexSliceParser implements SliceParser {\n \n         @Override\n         public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n-\n             final Long firstLong = ( Long ) first.value;\n             final Long secondLong = ( Long ) second.value;\n-\n-\n             return Long.compare( firstLong, secondLong );\n         }\n     }\n \n \n     private static final class StringComparator implements Comparator<SecondaryIndexColumn> {\n+\n         @Override\n         public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n-\n             if ( first == null && second != null ) {\n                 return -1;\n             }\n \n             final String firstString = ( String ) first.value;\n             final String secondString = ( String ) second.value;\n-\n-\n             return firstString.compareTo( secondString );\n         }\n     }\n \n \n     private static final class UUIDComparator implements Comparator<SecondaryIndexColumn> {\n+\n         @Override\n         public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n             final UUID firstUUID = ( UUID ) first.value;\n             final UUID secondUUID = ( UUID ) second.value;\n-\n-\n             return UUIDUtils.compare( firstUUID, secondUUID );\n         }\n     }\n \n \n     private static final class BigIntegerComparator implements Comparator<SecondaryIndexColumn> {\n+\n         @Override\n         public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n             final BigInteger firstInt = ( BigInteger ) first.value;\n             final BigInteger secondInt = ( BigInteger ) second.value;\n-\n-\n             return firstInt.compareTo( secondInt );\n         }\n     }\n@@ -250,6 +236,8 @@ public class SecondaryIndexSliceParser implements SliceParser {\n     /**\n      * Delegates to the type comparator, if equal, sorts by UUID ascending always\n      */\n+\n+\n     private static final class ForwardValueComparator implements Comparator<SecondaryIndexColumn> {\n \n         private final Comparator<SecondaryIndexColumn> comparator;\n@@ -262,13 +250,10 @@ public class SecondaryIndexSliceParser implements SliceParser {\n \n         @Override\n         public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n-\n             int compare = comparator.compare( first, second );\n-\n             if ( compare == 0 ) {\n                 return com.fasterxml.uuid.UUIDComparator.staticCompare( first.uuid, second.uuid );\n             }\n-\n             return compare;\n         }\n     }\n@@ -277,6 +262,8 @@ public class SecondaryIndexSliceParser implements SliceParser {\n     /**\n      * Reversed our delegate comparator, if equal, compares by uuid ascending\n      */\n+\n+\n     private static final class ReverseValueComparator implements Comparator<SecondaryIndexColumn> {\n \n         private final Comparator<SecondaryIndexColumn> comparator;\n@@ -290,12 +277,10 @@ public class SecondaryIndexSliceParser implements SliceParser {\n         @Override\n         public int compare( final SecondaryIndexColumn first, final SecondaryIndexColumn second ) {\n             int compare = comparator.compare( first, second ) * -1;\n-\n             if ( compare == 0 ) {\n                 return com.fasterxml.uuid.UUIDComparator.staticCompare( first.uuid, second.uuid );\n             }\n-\n             return compare;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/3/SecondaryIndexSliceParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/3/SecondaryIndexSliceParser.java\nindex bd1cc9f0c2b..2893a1249cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/3/SecondaryIndexSliceParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/3/SecondaryIndexSliceParser.java\n@@ -28,7 +28,6 @@ import org.apache.usergrid.utils.UUIDUtils;\n \n import me.prettyprint.hector.api.beans.DynamicComposite;\n \n-\n /**\n  * Parser for reading and writing secondary index composites.  Instances of this class should not be shared among\n  * iterators.\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}