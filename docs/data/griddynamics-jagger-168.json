{
    "project_name": "griddynamics-jagger",
    "error_id": "168",
    "information": {
        "errors": [
            {
                "line": "89",
                "severity": "warning",
                "message": "Line is longer than 150 characters (found 165).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n        /** Optional: Warm up time (in milliseconds). Default is -1.\n         * @param warmUpTimeInMilliseconds The warm up time value in milliseconds. Jagger increases load from 0 to @b requestPerSecond by @b warmUpTimeInMilliseconds\n         */\n        public Builder withWarmUpTimeInMilliseconds(long warmUpTimeInMilliseconds) {\n            if (warmUpTimeInMilliseconds < 0) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/168/JLoadProfileRps.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/168/JLoadProfileRps.java\nindex 27e20357a23..e07fc75d4e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/168/JLoadProfileRps.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/168/JLoadProfileRps.java\n@@ -7,11 +7,11 @@ import java.util.Objects;\n /**\n  * This type of load implements an exact number of requests per second performed by Jagger.\n  * Available attributes:\n- *     - requestsPerSecond - A goal number of requests per second\n- *\n+ * - requestsPerSecond - A goal number of requests per second\n+ * <p>\n  * Optional attributes:\n- *     - maxLoadThreads - Maximum number of parallel threads allowed for load generation\n- *     - warmUpTimeInMilliseconds - Load will increase from 0 to @e requestsPerSecond in this time\n+ * - maxLoadThreads - Maximum number of parallel threads allowed for load generation\n+ * - warmUpTimeInMilliseconds - Load will increase from 0 to @e requestsPerSecond in this time\n  *\n  * @ingroup Main_Load_profiles_group\n  */\n@@ -31,11 +31,13 @@ public class JLoadProfileRps implements JLoadProfile {\n         this.tickInterval = builder.tickInterval;\n     }\n \n-    /** Builder of the JLoadProfileRps: request per seconds\n+    /**\n+     * Builder of the JLoadProfileRps: request per seconds\n+     *\n+     * @param requestsPerSecond - The number of requests per second Jagger shall perform\n      * @n\n      * @details Constructor parameters are mandatory for the JLoadProfileRps. All parameters, set by setters are optional\n      * @n\n-     * @param requestsPerSecond   - The number of requests per second Jagger shall perform\n      */\n     public static Builder builder(RequestsPerSecond requestsPerSecond) {\n         return new Builder(requestsPerSecond);\n@@ -52,11 +54,13 @@ public class JLoadProfileRps implements JLoadProfile {\n         // Tick interval doesn't have setter, since it's unclear if this field is needed. Check https://issues.griddynamics.net/browse/JFG-1000\n         private int tickInterval;\n \n-        /** Builder of JLoadProfileRps: request per seconds\n+        /**\n+         * Builder of JLoadProfileRps: request per seconds\n+         *\n+         * @param requestsPerSecond - The number of requests per second Jagger shall perform\n          * @n\n          * @details Constructor parameters are mandatory for the JLoadProfileRps. All parameters, set by setters are optional\n          * @n\n-         * @param requestsPerSecond   - The number of requests per second Jagger shall perform\n          */\n         public Builder(RequestsPerSecond requestsPerSecond) {\n             Objects.requireNonNull(requestsPerSecond);\n@@ -67,14 +71,18 @@ public class JLoadProfileRps implements JLoadProfile {\n             this.tickInterval = DEFAULT_TICK_INTERVAL;\n         }\n \n-        /** Creates an object of JLoadProfileRps type with custom parameters.\n+        /**\n+         * Creates an object of JLoadProfileRps type with custom parameters.\n+         *\n          * @return JLoadProfileRps object.\n          */\n         public JLoadProfileRps build() {\n             return new JLoadProfileRps(this);\n         }\n \n-        /** Optional: Max load threads. Default is 500.\n+        /**\n+         * Optional: Max load threads. Default is 500.\n+         *\n          * @param maxLoadThreads The maximum number of threads, which Jagger engine can create to provide the requested load\n          */\n         public Builder withMaxLoadThreads(long maxLoadThreads) {\n@@ -85,7 +93,9 @@ public class JLoadProfileRps implements JLoadProfile {\n             return this;\n         }\n \n-        /** Optional: Warm up time (in milliseconds). Default is -1.\n+        /**\n+         * Optional: Warm up time (in milliseconds). Default is -1.\n+         *\n          * @param warmUpTimeInMilliseconds The warm up time value in milliseconds. Jagger increases load from 0 to @b requestPerSecond by @b warmUpTimeInMilliseconds\n          */\n         public Builder withWarmUpTimeInMilliseconds(long warmUpTimeInMilliseconds) {\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/168/JLoadProfileRps.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/168/JLoadProfileRps.java\nindex 27e20357a23..eecc40212ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/168/JLoadProfileRps.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/168/JLoadProfileRps.java\n@@ -92,7 +92,7 @@ public class JLoadProfileRps implements JLoadProfile {\n             if (warmUpTimeInMilliseconds < 0) {\n                 throw new IllegalArgumentException(\n                         String.format(\"The warm up time value in milliseconds. must be >= 0. Provided value is %s\", warmUpTimeInMilliseconds));\n-            }\n+    }\n             this.warmUpTimeInMilliseconds = warmUpTimeInMilliseconds;\n             return this;\n         }\n@@ -113,4 +113,4 @@ public class JLoadProfileRps implements JLoadProfile {\n     public int getTickInterval() {\n         return tickInterval;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}