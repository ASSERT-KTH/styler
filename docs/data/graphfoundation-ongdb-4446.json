{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4446",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4446/CoarseBoundedProgressExecutionMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4446/CoarseBoundedProgressExecutionMonitor.java\nindex b80ed913178..32ea255d691 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4446/CoarseBoundedProgressExecutionMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4446/CoarseBoundedProgressExecutionMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import org.neo4j.helpers.collection.Iterables;\n@@ -31,67 +32,67 @@ import static java.util.concurrent.TimeUnit.SECONDS;\n  */\n public abstract class CoarseBoundedProgressExecutionMonitor extends ExecutionMonitor.Adapter\n {\n-    private final long totalNumberOfBatches;\n-    private long prevDoneBatches;\n-    private long totalReportedBatches;\n+  private final long totalNumberOfBatches;\n+  private long prevDoneBatches;\n+  private long totalReportedBatches;\n \n-    public CoarseBoundedProgressExecutionMonitor( long highNodeId, long highRelationshipId,\n-            Configuration configuration )\n-    {\n-        super( 1, SECONDS );\n-        // This calculation below is aware of internals of the parallel importer and may\n-        // be wrong for other importers.\n-        this.totalNumberOfBatches =\n-                (highNodeId / configuration.batchSize()) * 3 + // node records encountered three times\n-                        (highRelationshipId / configuration.batchSize()) * 4; // rel records encountered four times\n-    }\n+  public CoarseBoundedProgressExecutionMonitor(long highNodeId, long highRelationshipId,\n+                                               Configuration configuration)\n+  {\n+    super(1, SECONDS);\n+    // This calculation below is aware of internals of the parallel importer and may\n+    // be wrong for other importers.\n+    this.totalNumberOfBatches =\n+        (highNodeId / configuration.batchSize()) * 3 + // node records encountered three times\n+            (highRelationshipId / configuration.batchSize()) * 4; // rel records encountered four times\n+  }\n \n-    protected long total()\n-    {\n-        return totalNumberOfBatches;\n-    }\n+  protected long total()\n+  {\n+    return totalNumberOfBatches;\n+  }\n \n-    @Override\n-    public void check( StageExecution execution )\n-    {\n-        update( execution );\n-    }\n+  @Override\n+  public void check(StageExecution execution)\n+  {\n+    update(execution);\n+  }\n \n-    @Override\n-    public void start( StageExecution execution )\n-    {\n-        prevDoneBatches = 0;\n-    }\n+  @Override\n+  public void start(StageExecution execution)\n+  {\n+    prevDoneBatches = 0;\n+  }\n \n-    private void update( StageExecution execution )\n-    {\n-        long diff = 0;\n-        long doneBatches = doneBatches( execution );\n-        diff += doneBatches - prevDoneBatches;\n-        prevDoneBatches = doneBatches;\n+  private void update(StageExecution execution)\n+  {\n+    long diff = 0;\n+    long doneBatches = doneBatches(execution);\n+    diff += doneBatches - prevDoneBatches;\n+    prevDoneBatches = doneBatches;\n \n-        if ( diff > 0 )\n-        {\n-            totalReportedBatches += diff;\n-            progress( diff );\n-        }\n+    if (diff > 0)\n+    {\n+      totalReportedBatches += diff;\n+      progress(diff);\n     }\n+  }\n \n-    /**\n-     * @param progress Relative progress.\n-     */\n-    protected abstract void progress( long progress );\n+  /**\n+   * @param progress Relative progress.\n+   */\n+  protected abstract void progress(long progress);\n \n-    private long doneBatches( StageExecution execution )\n-    {\n-        Step<?> step = Iterables.last( execution.steps() );\n-        return step.stats().stat( Keys.done_batches ).asLong();\n-    }\n+  private long doneBatches(StageExecution execution)\n+  {\n+    Step<?> step = Iterables.last(execution.steps());\n+    return step.stats().stat(Keys.done_batches).asLong();\n+  }\n \n-    @Override\n-    public void done( boolean successful, long totalTimeMillis, String additionalInformation )\n-    {\n-        // Just report the last progress\n-        progress( totalNumberOfBatches - totalReportedBatches );\n-    }\n+  @Override\n+  public void done(boolean successful, long totalTimeMillis, String additionalInformation)\n+  {\n+    // Just report the last progress\n+    progress(totalNumberOfBatches - totalReportedBatches);\n+  }\n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}