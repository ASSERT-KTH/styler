{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "84",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @SuppressWarnings(\"unchecked\")\n  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n      Type type) {\n    return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/38/SwaggerGeneratorUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/38/SwaggerGeneratorUtils.java\nindex e7f82f4bfd2..ba51db94d91 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/38/SwaggerGeneratorUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/38/SwaggerGeneratorUtils.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.swagger.generator;\n \n import java.lang.annotation.Annotation;\n@@ -153,7 +154,8 @@ public final class SwaggerGeneratorUtils {\n   }\n \n   public static List<Annotation> collectParameterAnnotations(Annotation[] parameterAnnotations,\n-      Map<String, List<Annotation>> methodAnnotationMap, String parameterName) {\n+                                                             Map<String, List<Annotation>> methodAnnotationMap,\n+                                                             String parameterName) {\n     List<Annotation> methodAnnotations = methodAnnotationMap.remove(parameterName);\n     if (methodAnnotations == null) {\n       methodAnnotations = Collections.emptyList();\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/38/SwaggerGeneratorUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/38/SwaggerGeneratorUtils.java\nindex e7f82f4bfd2..64843236f42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/38/SwaggerGeneratorUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/38/SwaggerGeneratorUtils.java\n@@ -83,7 +83,7 @@ public final class SwaggerGeneratorUtils {\n   @SuppressWarnings(\"unchecked\")\n   public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n       Type type) {\n-    return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n+  return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n   }\n \n   public static ResponseTypeProcessor findResponseTypeProcessor(Type type) {\n@@ -122,7 +122,7 @@ public final class SwaggerGeneratorUtils {\n     }\n \n     String msg = String.format(\"parameter name is not present, method=%s:%s\\n\"\n-            + \"solution:\\n\"\n+    + \"solution:\\n\"\n             + \"  change pom.xml, add compiler argument: -parameters, for example:\\n\"\n             + \"    <plugin>\\n\"\n             + \"      <groupId>org.apache.maven.plugins</groupId>\\n\"\n@@ -188,4 +188,4 @@ public final class SwaggerGeneratorUtils {\n \n     return processor.getHttpParameterType(parameterAnnotation);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 505).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/38/SwaggerGeneratorUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/38/SwaggerGeneratorUtils.java\nindex e7f82f4bfd2..48ef9558ca9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/38/SwaggerGeneratorUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/38/SwaggerGeneratorUtils.java\n@@ -26,19 +26,17 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.servicecomb.foundation.common.utils.SPIServiceUtils;\n import org.apache.servicecomb.swagger.generator.core.model.HttpParameterType;\n import org.apache.servicecomb.swagger.generator.core.processor.response.DefaultResponseTypeProcessor;\n-\n import io.swagger.models.parameters.Parameter;\n \n public final class SwaggerGeneratorUtils {\n   // all static fields load from SPI and stateless\n   private static Set<Type> contextTypes = SPIServiceUtils.getOrLoadSortedService(SwaggerContextRegister.class).stream()\n-      .map(SwaggerContextRegister::getContextType)\n-      .collect(Collectors.toSet());\n+                                                                                                              .map(SwaggerContextRegister::getContextType)\n+                                                                                                              .collect(Collectors.toSet());\n \n   private static Map<Type, ClassAnnotationProcessor<?>> classAnnotationProcessors = new HashMap<>();\n \n@@ -51,17 +49,18 @@ public final class SwaggerGeneratorUtils {\n   private static DefaultResponseTypeProcessor defaultResponseTypeProcessor = new DefaultResponseTypeProcessor();\n \n   static {\n-    for (ClassAnnotationProcessor<?> processor : SPIServiceUtils\n-        .getOrLoadSortedService(ClassAnnotationProcessor.class)) {\n+    for (ClassAnnotationProcessor<?> processor : SPIServiceUtils.getOrLoadSortedService(ClassAnnotationProcessor.class)) {\n       classAnnotationProcessors.put(processor.getProcessType(), processor);\n     }\n-    for (MethodAnnotationProcessor<?> processor : SPIServiceUtils\n-        .getOrLoadSortedService(MethodAnnotationProcessor.class)) {\n+\n+    for (MethodAnnotationProcessor<?> processor : SPIServiceUtils.getOrLoadSortedService(MethodAnnotationProcessor.class)) {\n       methodAnnotationProcessors.put(processor.getProcessType(), processor);\n     }\n+\n     for (ParameterProcessor<?, ?> processor : SPIServiceUtils.getOrLoadSortedService(ParameterProcessor.class)) {\n       parameterProcessors.put(processor.getProcessType(), processor);\n     }\n+\n     for (ResponseTypeProcessor processor : SPIServiceUtils.getOrLoadSortedService(ResponseTypeProcessor.class)) {\n       responseTypeProcessors.put(processor.getProcessType(), processor);\n     }\n@@ -81,8 +80,7 @@ public final class SwaggerGeneratorUtils {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n-      Type type) {\n+  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(Type type) {\n     return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n   }\n \n@@ -95,8 +93,9 @@ public final class SwaggerGeneratorUtils {\n   }\n \n   public static String collectParameterName(java.lang.reflect.Parameter methodParameter) {\n-    return collectParameterName(methodParameter.getDeclaringExecutable(), methodParameter.getAnnotations(),\n-        methodParameter.isNamePresent() ? methodParameter.getName() : null);\n+    return collectParameterName(methodParameter.getDeclaringExecutable(),\n+methodParameter.getAnnotations(),\n+methodParameter.isNamePresent() ? methodParameter.getName() : null);\n   }\n \n   public static String collectParameterName(Executable executable, Annotation[] annotations, String defaultName) {\n@@ -117,21 +116,12 @@ public final class SwaggerGeneratorUtils {\n \n     // 2.use signature name\n     // ensure present parameter name\n+\n     if (StringUtils.isNotEmpty(defaultName)) {\n       return defaultName;\n     }\n \n-    String msg = String.format(\"parameter name is not present, method=%s:%s\\n\"\n-            + \"solution:\\n\"\n-            + \"  change pom.xml, add compiler argument: -parameters, for example:\\n\"\n-            + \"    <plugin>\\n\"\n-            + \"      <groupId>org.apache.maven.plugins</groupId>\\n\"\n-            + \"      <artifactId>maven-compiler-plugin</artifactId>\\n\"\n-            + \"      <configuration>\\n\"\n-            + \"        <compilerArgument>-parameters</compilerArgument>\\n\"\n-            + \"      </configuration>\\n\"\n-            + \"    </plugin>\",\n-        executable.getDeclaringClass().getName(), executable.getName());\n+    String msg = String.format(\"parameter name is not present, method=%s:%s\\n\" + \"solution:\\n\" + \"  change pom.xml, add compiler argument: -parameters, for example:\\n\" + \"    <plugin>\\n\" + \"      <groupId>org.apache.maven.plugins</groupId>\\n\" + \"      <artifactId>maven-compiler-plugin</artifactId>\\n\" + \"      <configuration>\\n\" + \"        <compilerArgument>-parameters</compilerArgument>\\n\" + \"      </configuration>\\n\" + \"    </plugin>\", executable.getDeclaringClass().getName(), executable.getName());\n     throw new IllegalStateException(msg);\n   }\n \n@@ -148,12 +138,10 @@ public final class SwaggerGeneratorUtils {\n         genericType = type;\n       }\n     }\n-\n     return genericType != null ? genericType : defaultType;\n   }\n \n-  public static List<Annotation> collectParameterAnnotations(Annotation[] parameterAnnotations,\n-      Map<String, List<Annotation>> methodAnnotationMap, String parameterName) {\n+  public static List<Annotation> collectParameterAnnotations(Annotation[] parameterAnnotations, Map<String, List<Annotation>> methodAnnotationMap, String parameterName) {\n     List<Annotation> methodAnnotations = methodAnnotationMap.remove(parameterName);\n     if (methodAnnotations == null) {\n       methodAnnotations = Collections.emptyList();\n@@ -162,7 +150,6 @@ public final class SwaggerGeneratorUtils {\n     List<Annotation> annotations = new ArrayList<>();\n     Collections.addAll(annotations, parameterAnnotations);\n     annotations.addAll(methodAnnotations);\n-\n     return annotations;\n   }\n \n@@ -185,7 +172,6 @@ public final class SwaggerGeneratorUtils {\n     if (processor == null) {\n       return null;\n     }\n-\n     return processor.getHttpParameterType(parameterAnnotation);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "column": "18",
                    "severity": "warning",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "84",
                    "column": "37",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "84",
                    "column": "48",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "84",
                    "column": "85",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/38/SwaggerGeneratorUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/38/SwaggerGeneratorUtils.java\nindex e7f82f4bfd2..95ba52d0efd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/38/SwaggerGeneratorUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/38/SwaggerGeneratorUtils.java\n@@ -81,8 +81,8 @@ public final class SwaggerGeneratorUtils {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n-      Type type) {\n+  public static < SWAGGER_PARAMETER,ANNOTATION>ParameterProcessor<SWAGGER_PARAMETER,ANNOTATION> findParameterProcessors(Type\n+      type) {\n     return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n   }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}