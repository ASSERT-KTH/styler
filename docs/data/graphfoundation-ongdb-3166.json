{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3166",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "62",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "70",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3166/Version.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3166/Version.java\nindex 7eac4d7230a..11e1685e277 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3166/Version.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3166/Version.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.internal;\n \n import java.util.regex.Matcher;\n@@ -26,124 +27,122 @@ import org.neo4j.helpers.Service;\n \n public class Version extends Service\n {\n-    public static Version getKernel()\n-    {\n-        return KERNEL_VERSION;\n-    }\n+  public static Version getKernel()\n+  {\n+    return KERNEL_VERSION;\n+  }\n \n-    public static String getKernelVersion()\n-    {\n-        return getKernel().getVersion();\n-    }\n+  public static String getKernelVersion()\n+  {\n+    return getKernel().getVersion();\n+  }\n \n-    public static String getNeo4jVersion()\n-    {\n-        return getKernel().getReleaseVersion();\n-    }\n+  public static String getNeo4jVersion()\n+  {\n+    return getKernel().getReleaseVersion();\n+  }\n \n-    private final String artifactId;\n-    private final String title;\n-    private final String vendor;\n-    private final String version;\n-    private final String releaseVersion;\n+  private final String artifactId;\n+  private final String title;\n+  private final String vendor;\n+  private final String version;\n+  private final String releaseVersion;\n \n-    @Override\n-    public String toString()\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder result = new StringBuilder();\n+    if (title != null)\n     {\n-        StringBuilder result = new StringBuilder();\n-        if ( title != null )\n-        {\n-            result.append( title );\n-            if ( artifactId == null || !artifactId.equals( title ) )\n-            {\n-                result.append( \" (\" ).append( artifactId ).append( ')' );\n-            }\n-        }\n-        else if ( artifactId != null )\n-        {\n-            result.append( artifactId );\n-        }\n-        else\n-        {\n-            result.append( \"Unknown Component\" );\n-        }\n-        result.append( \", \" );\n-        if ( title == null )\n-        {\n-            result.append( \"unpackaged \" );\n-        }\n-        result.append( \"version: \" ).append( getVersion() );\n-        return result.toString();\n-    }\n-\n-    /**\n-     * @return a detailed version string, including source control revision information if that is available, suitable\n-     * for internal use, logging and debugging.\n-     */\n-    public final String getVersion()\n+      result.append(title);\n+      if (artifactId == null || !artifactId.equals(title))\n+      {\n+        result.append(\" (\").append(artifactId).append(')');\n+      }\n+    } else if (artifactId != null)\n     {\n-        return version;\n-    }\n-\n-    /**\n-     * @return a user-friendly version string, like \"1.0.0-M01\" or \"2.0.0\", suitable for end-user display\n-     */\n-    public String getReleaseVersion()\n+      result.append(artifactId);\n+    } else\n     {\n-        return releaseVersion;\n+      result.append(\"Unknown Component\");\n     }\n-\n-    protected Version( String artifactId, String version )\n+    result.append(\", \");\n+    if (title == null)\n     {\n-        super( artifactId );\n-        this.artifactId = artifactId;\n-        this.title = artifactId;\n-        this.vendor = \"Neo Technology\";\n-        this.version = version == null ? \"dev\" : version;\n-        this.releaseVersion = parseReleaseVersion( this.version );\n+      result.append(\"unpackaged \");\n     }\n+    result.append(\"version: \").append(getVersion());\n+    return result.toString();\n+  }\n \n-    /**\n-     * This reads out the user friendly part of the version, for public display.\n-     */\n-    private String parseReleaseVersion( String fullVersion )\n-    {\n-        // Generally, a version we extract from the jar manifest will look like:\n-        //   1.2.3-M01,abcdef-dirty\n-        // Parse out the first part of it:\n-        Pattern pattern = Pattern.compile(\n-                \"(\\\\d+\" +                  // Major version\n-                \"\\\\.\\\\d+\" +                // Minor version\n-                \"(\\\\.\\\\d+)?\" +             // Optional patch version\n-                \"(-?[^,]+)?)\" +          // Optional marker, like M01, GA, SNAPSHOT - anything other than a comma\n-                \".*\"                       // Anything else, such as git revision\n-        );\n-\n-        Matcher matcher = pattern.matcher( fullVersion );\n-        if ( matcher.matches() )\n-        {\n-            return matcher.group( 1 );\n-        }\n-\n-        // If we don't recognize the version pattern, do the safe thing and keep it in full\n-        return version;\n-    }\n+  /**\n+   * @return a detailed version string, including source control revision information if that is available, suitable\n+   * for internal use, logging and debugging.\n+   */\n+  public final String getVersion()\n+  {\n+    return version;\n+  }\n+\n+  /**\n+   * @return a user-friendly version string, like \"1.0.0-M01\" or \"2.0.0\", suitable for end-user display\n+   */\n+  public String getReleaseVersion()\n+  {\n+    return releaseVersion;\n+  }\n \n-    /**\n-     * A very nice to have main-method for quickly checking the version of a neo4j kernel,\n-     * for example given a kernel jar file.\n-     */\n-    public static void main( String[] args )\n+  protected Version(String artifactId, String version)\n+  {\n+    super(artifactId);\n+    this.artifactId = artifactId;\n+    this.title = artifactId;\n+    this.vendor = \"Neo Technology\";\n+    this.version = version == null ? \"dev\" : version;\n+    this.releaseVersion = parseReleaseVersion(this.version);\n+  }\n+\n+  /**\n+   * This reads out the user friendly part of the version, for public display.\n+   */\n+  private String parseReleaseVersion(String fullVersion)\n+  {\n+    // Generally, a version we extract from the jar manifest will look like:\n+    //   1.2.3-M01,abcdef-dirty\n+    // Parse out the first part of it:\n+    Pattern pattern = Pattern.compile(\n+        \"(\\\\d+\" +                  // Major version\n+            \"\\\\.\\\\d+\" +                // Minor version\n+            \"(\\\\.\\\\d+)?\" +             // Optional patch version\n+            \"(-?[^,]+)?)\" +          // Optional marker, like M01, GA, SNAPSHOT - anything other than a comma\n+            \".*\"                       // Anything else, such as git revision\n+    );\n+\n+    Matcher matcher = pattern.matcher(fullVersion);\n+    if (matcher.matches())\n     {\n-        Version kernelVersion = getKernel();\n-        System.out.println( kernelVersion );\n-        System.out.println( \"Title: \" + kernelVersion.title );\n-        System.out.println( \"Vendor: \" + kernelVersion.vendor );\n-        System.out.println( \"ArtifactId: \" + kernelVersion.artifactId );\n-        System.out.println( \"Version: \" + kernelVersion.getVersion() );\n+      return matcher.group(1);\n     }\n \n-    static final String KERNEL_ARTIFACT_ID = \"neo4j-kernel\";\n-    private static final Version KERNEL_VERSION = new Version( KERNEL_ARTIFACT_ID,\n-            Version.class.getPackage().getImplementationVersion() );\n+    // If we don't recognize the version pattern, do the safe thing and keep it in full\n+    return version;\n+  }\n+\n+  /**\n+   * A very nice to have main-method for quickly checking the version of a neo4j kernel,\n+   * for example given a kernel jar file.\n+   */\n+  public static void main(String[] args)\n+  {\n+    Version kernelVersion = getKernel();\n+    System.out.println(kernelVersion);\n+    System.out.println(\"Title: \" + kernelVersion.title);\n+    System.out.println(\"Vendor: \" + kernelVersion.vendor);\n+    System.out.println(\"ArtifactId: \" + kernelVersion.artifactId);\n+    System.out.println(\"Version: \" + kernelVersion.getVersion());\n+  }\n+\n+  static final String KERNEL_ARTIFACT_ID = \"neo4j-kernel\";\n+  private static final Version KERNEL_VERSION = new Version(KERNEL_ARTIFACT_ID,\n+      Version.class.getPackage().getImplementationVersion());\n }\n",
            "diff_size": 153
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}