{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2120",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "79",
                    "column": "93",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2120/KernelStatement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2120/KernelStatement.java\nindex aa543ae3d55..08917f36a50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2120/KernelStatement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2120/KernelStatement.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -72,275 +73,275 @@ import static org.neo4j.util.FeatureToggles.toggle;\n  */\n public class KernelStatement extends CloseableResourceManager implements TxStateHolder, Statement, AssertOpen\n {\n-    private static final boolean TRACK_STATEMENTS = flag( KernelStatement.class, \"trackStatements\", false );\n-    private static final boolean RECORD_STATEMENTS_TRACES = flag( KernelStatement.class, \"recordStatementsTraces\", false );\n-    private static final int STATEMENT_TRACK_HISTORY_MAX_SIZE = 100;\n-    private static final Deque<StackTraceElement[]> EMPTY_STATEMENT_HISTORY = new ArrayDeque<>( 0 );\n-\n-    private final TxStateHolder txStateHolder;\n-    private final StorageStatement storeStatement;\n-    private final KernelTransactionImplementation transaction;\n-    private final OperationsFacade facade;\n-    private StatementLocks statementLocks;\n-    private PageCursorTracer pageCursorTracer = PageCursorTracer.NULL;\n-    private int referenceCount;\n-    private volatile ExecutingQueryList executingQueryList;\n-    private final LockTracer systemLockTracer;\n-    private final Deque<StackTraceElement[]> statementOpenCloseCalls;\n-    private final ClockContext clockContext;\n-    private final VersionContextSupplier versionContextSupplier;\n-\n-    public KernelStatement( KernelTransactionImplementation transaction,\n-            TxStateHolder txStateHolder,\n-            StorageStatement storeStatement,\n-            LockTracer systemLockTracer,\n-            StatementOperationParts statementOperations,\n-            ClockContext clockContext,\n-            VersionContextSupplier versionContextSupplier )\n-    {\n-        this.transaction = transaction;\n-        this.txStateHolder = txStateHolder;\n-        this.storeStatement = storeStatement;\n-        this.facade = new OperationsFacade( this, statementOperations );\n-        this.executingQueryList = ExecutingQueryList.EMPTY;\n-        this.systemLockTracer = systemLockTracer;\n-        this.statementOpenCloseCalls = RECORD_STATEMENTS_TRACES ? new ArrayDeque<>() : EMPTY_STATEMENT_HISTORY;\n-        this.clockContext = clockContext;\n-        this.versionContextSupplier = versionContextSupplier;\n-    }\n-\n-    @Override\n-    public QueryRegistryOperations queryRegistration()\n-    {\n-        return facade;\n-    }\n-\n-    @Override\n-    public TransactionState txState()\n-    {\n-        return txStateHolder.txState();\n-    }\n-\n-    @Override\n-    public ExplicitIndexTransactionState explicitIndexTxState()\n-    {\n-        return txStateHolder.explicitIndexTxState();\n-    }\n-\n-    @Override\n-    public boolean hasTxStateWithChanges()\n-    {\n-        return txStateHolder.hasTxStateWithChanges();\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        // Check referenceCount > 0 since we allow multiple close calls,\n-        // i.e. ignore closing already closed statements\n-        if ( referenceCount > 0 && (--referenceCount == 0) )\n-        {\n-            cleanupResources();\n-        }\n-        recordOpenCloseMethods();\n-    }\n-\n-    @Override\n-    public void assertOpen()\n-    {\n-        if ( referenceCount == 0 )\n-        {\n-            throw new NotInTransactionException( \"The statement has been closed.\" );\n-        }\n-\n-        Optional<Status> terminationReason = transaction.getReasonIfTerminated();\n-        terminationReason.ifPresent( status ->\n-        {\n-            throw new TransactionTerminatedException( status );\n-        } );\n-    }\n-\n-    public void initialize( StatementLocks statementLocks, PageCursorTracer pageCursorCounters )\n-    {\n-        this.statementLocks = statementLocks;\n-        this.pageCursorTracer = pageCursorCounters;\n-        this.clockContext.initializeTransaction();\n-    }\n-\n-    public StatementLocks locks()\n-    {\n-        return statementLocks;\n-    }\n-\n-    public LockTracer lockTracer()\n-    {\n-        LockTracer tracer = executingQueryList.top( ExecutingQuery::lockTracer );\n-        return tracer == null ? systemLockTracer : systemLockTracer.combine( tracer );\n-    }\n-\n-    public PageCursorTracer getPageCursorTracer()\n+  private static final boolean TRACK_STATEMENTS = flag(KernelStatement.class, \"trackStatements\", false);\n+  private static final boolean RECORD_STATEMENTS_TRACES = flag(KernelStatement.class, \"recordStatementsTraces\", false);\n+  private static final int STATEMENT_TRACK_HISTORY_MAX_SIZE = 100;\n+  private static final Deque<StackTraceElement[]> EMPTY_STATEMENT_HISTORY = new ArrayDeque<>(0);\n+\n+  private final TxStateHolder txStateHolder;\n+  private final StorageStatement storeStatement;\n+  private final KernelTransactionImplementation transaction;\n+  private final OperationsFacade facade;\n+  private StatementLocks statementLocks;\n+  private PageCursorTracer pageCursorTracer = PageCursorTracer.NULL;\n+  private int referenceCount;\n+  private volatile ExecutingQueryList executingQueryList;\n+  private final LockTracer systemLockTracer;\n+  private final Deque<StackTraceElement[]> statementOpenCloseCalls;\n+  private final ClockContext clockContext;\n+  private final VersionContextSupplier versionContextSupplier;\n+\n+  public KernelStatement(KernelTransactionImplementation transaction,\n+                         TxStateHolder txStateHolder,\n+                         StorageStatement storeStatement,\n+                         LockTracer systemLockTracer,\n+                         StatementOperationParts statementOperations,\n+                         ClockContext clockContext,\n+                         VersionContextSupplier versionContextSupplier)\n+  {\n+    this.transaction = transaction;\n+    this.txStateHolder = txStateHolder;\n+    this.storeStatement = storeStatement;\n+    this.facade = new OperationsFacade(this, statementOperations);\n+    this.executingQueryList = ExecutingQueryList.EMPTY;\n+    this.systemLockTracer = systemLockTracer;\n+    this.statementOpenCloseCalls = RECORD_STATEMENTS_TRACES ? new ArrayDeque<>() : EMPTY_STATEMENT_HISTORY;\n+    this.clockContext = clockContext;\n+    this.versionContextSupplier = versionContextSupplier;\n+  }\n+\n+  @Override\n+  public QueryRegistryOperations queryRegistration()\n+  {\n+    return facade;\n+  }\n+\n+  @Override\n+  public TransactionState txState()\n+  {\n+    return txStateHolder.txState();\n+  }\n+\n+  @Override\n+  public ExplicitIndexTransactionState explicitIndexTxState()\n+  {\n+    return txStateHolder.explicitIndexTxState();\n+  }\n+\n+  @Override\n+  public boolean hasTxStateWithChanges()\n+  {\n+    return txStateHolder.hasTxStateWithChanges();\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    // Check referenceCount > 0 since we allow multiple close calls,\n+    // i.e. ignore closing already closed statements\n+    if (referenceCount > 0 && (--referenceCount == 0))\n     {\n-        return pageCursorTracer;\n+      cleanupResources();\n     }\n+    recordOpenCloseMethods();\n+  }\n \n-    public final void acquire()\n+  @Override\n+  public void assertOpen()\n+  {\n+    if (referenceCount == 0)\n     {\n-        if ( referenceCount++ == 0 )\n-        {\n-            storeStatement.acquire();\n-            clockContext.initializeStatement();\n-        }\n-        recordOpenCloseMethods();\n+      throw new NotInTransactionException(\"The statement has been closed.\");\n     }\n \n-    final boolean isAcquired()\n+    Optional<Status> terminationReason = transaction.getReasonIfTerminated();\n+    terminationReason.ifPresent(status ->\n     {\n-        return referenceCount > 0;\n-    }\n-\n-    final void forceClose()\n+      throw new TransactionTerminatedException(status);\n+    });\n+  }\n+\n+  public void initialize(StatementLocks statementLocks, PageCursorTracer pageCursorCounters)\n+  {\n+    this.statementLocks = statementLocks;\n+    this.pageCursorTracer = pageCursorCounters;\n+    this.clockContext.initializeTransaction();\n+  }\n+\n+  public StatementLocks locks()\n+  {\n+    return statementLocks;\n+  }\n+\n+  public LockTracer lockTracer()\n+  {\n+    LockTracer tracer = executingQueryList.top(ExecutingQuery::lockTracer);\n+    return tracer == null ? systemLockTracer : systemLockTracer.combine(tracer);\n+  }\n+\n+  public PageCursorTracer getPageCursorTracer()\n+  {\n+    return pageCursorTracer;\n+  }\n+\n+  public final void acquire()\n+  {\n+    if (referenceCount++ == 0)\n     {\n-        if ( referenceCount > 0 )\n-        {\n-            int leakedStatements = referenceCount;\n-            referenceCount = 0;\n-            cleanupResources();\n-            if ( TRACK_STATEMENTS && transaction.isSuccess() )\n-            {\n-                String message = getStatementNotClosedMessage( leakedStatements );\n-                throw new StatementNotClosedException( message, statementOpenCloseCalls );\n-            }\n-        }\n-        pageCursorTracer.reportEvents();\n+      storeStatement.acquire();\n+      clockContext.initializeStatement();\n     }\n+    recordOpenCloseMethods();\n+  }\n \n-    private String getStatementNotClosedMessage( int leakedStatements )\n-    {\n-        String additionalInstruction = RECORD_STATEMENTS_TRACES ? StringUtils.EMPTY :\n-                                       format(\" To see statement open/close stack traces please pass '%s' to your JVM\" +\n-                                                       \" or enable corresponding feature toggle.\",\n-                                       toggle( KernelStatement.class, \"recordStatementsTraces\", Boolean.TRUE ) );\n-        return format( \"Statements were not correctly closed. Number of leaked statements: %d.%s\", leakedStatements,\n-                additionalInstruction );\n-    }\n+  final boolean isAcquired()\n+  {\n+    return referenceCount > 0;\n+  }\n \n-    final String username()\n+  final void forceClose()\n+  {\n+    if (referenceCount > 0)\n     {\n-        return transaction.securityContext().subject().username();\n+      int leakedStatements = referenceCount;\n+      referenceCount = 0;\n+      cleanupResources();\n+      if (TRACK_STATEMENTS && transaction.isSuccess())\n+      {\n+        String message = getStatementNotClosedMessage(leakedStatements);\n+        throw new StatementNotClosedException(message, statementOpenCloseCalls);\n+      }\n     }\n-\n-    final ExecutingQueryList executingQueryList()\n+    pageCursorTracer.reportEvents();\n+  }\n+\n+  private String getStatementNotClosedMessage(int leakedStatements)\n+  {\n+    String additionalInstruction = RECORD_STATEMENTS_TRACES ? StringUtils.EMPTY :\n+        format(\" To see statement open/close stack traces please pass '%s' to your JVM\" +\n+                \" or enable corresponding feature toggle.\",\n+            toggle(KernelStatement.class, \"recordStatementsTraces\", Boolean.TRUE));\n+    return format(\"Statements were not correctly closed. Number of leaked statements: %d.%s\", leakedStatements,\n+        additionalInstruction);\n+  }\n+\n+  final String username()\n+  {\n+    return transaction.securityContext().subject().username();\n+  }\n+\n+  final ExecutingQueryList executingQueryList()\n+  {\n+    return executingQueryList;\n+  }\n+\n+  final void startQueryExecution(ExecutingQuery query)\n+  {\n+    this.executingQueryList = executingQueryList.push(query);\n+  }\n+\n+  final void stopQueryExecution(ExecutingQuery executingQuery)\n+  {\n+    this.executingQueryList = executingQueryList.remove(executingQuery);\n+    transaction.getStatistics().addWaitingTime(executingQuery.reportedWaitingTimeNanos());\n+  }\n+\n+  public StorageStatement getStoreStatement()\n+  {\n+    return storeStatement;\n+  }\n+\n+  private void cleanupResources()\n+  {\n+    // closing is done by KTI\n+    storeStatement.release();\n+    executingQueryList = ExecutingQueryList.EMPTY;\n+    closeAllCloseableResources();\n+  }\n+\n+  public KernelTransactionImplementation getTransaction()\n+  {\n+    return transaction;\n+  }\n+\n+  public VersionContext getVersionContext()\n+  {\n+    return versionContextSupplier.getVersionContext();\n+  }\n+\n+  void assertAllows(Function<AccessMode, Boolean> allows, String mode)\n+  {\n+    transaction.assertAllows(allows, mode);\n+  }\n+\n+  private void recordOpenCloseMethods()\n+  {\n+    if (RECORD_STATEMENTS_TRACES)\n     {\n-        return executingQueryList;\n+      if (statementOpenCloseCalls.size() > STATEMENT_TRACK_HISTORY_MAX_SIZE)\n+      {\n+        statementOpenCloseCalls.pop();\n+      }\n+      StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n+      statementOpenCloseCalls.add(Arrays.copyOfRange(stackTrace, 2, stackTrace.length));\n     }\n+  }\n \n-    final void startQueryExecution( ExecutingQuery query )\n-    {\n-        this.executingQueryList = executingQueryList.push( query );\n-    }\n+  public ClockContext clocks()\n+  {\n+    return clockContext;\n+  }\n \n-    final void stopQueryExecution( ExecutingQuery executingQuery )\n-    {\n-        this.executingQueryList = executingQueryList.remove( executingQuery );\n-        transaction.getStatistics().addWaitingTime( executingQuery.reportedWaitingTimeNanos() );\n-    }\n-\n-    public StorageStatement getStoreStatement()\n-    {\n-        return storeStatement;\n-    }\n-\n-    private void cleanupResources()\n-    {\n-        // closing is done by KTI\n-        storeStatement.release();\n-        executingQueryList = ExecutingQueryList.EMPTY;\n-        closeAllCloseableResources();\n-    }\n+  static class StatementNotClosedException extends IllegalStateException\n+  {\n \n-    public KernelTransactionImplementation getTransaction()\n+    StatementNotClosedException(String s, Deque<StackTraceElement[]> openCloseTraces)\n     {\n-        return transaction;\n+      super(s);\n+      this.addSuppressed(new StatementTraceException(buildMessage(openCloseTraces)));\n     }\n \n-    public VersionContext getVersionContext()\n+    private static String buildMessage(Deque<StackTraceElement[]> openCloseTraces)\n     {\n-        return versionContextSupplier.getVersionContext();\n-    }\n-\n-    void assertAllows( Function<AccessMode,Boolean> allows, String mode )\n-    {\n-      transaction.assertAllows( allows, mode );\n-    }\n-\n-    private void recordOpenCloseMethods()\n-    {\n-        if ( RECORD_STATEMENTS_TRACES )\n+      if (openCloseTraces.isEmpty())\n+      {\n+        return StringUtils.EMPTY;\n+      }\n+      int separatorLength = 80;\n+      String paddingString = \"=\";\n+\n+      ByteArrayOutputStream out = new ByteArrayOutputStream();\n+      PrintStream printStream = new PrintStream(out);\n+      printStream.println();\n+      printStream.println(\"Last \" + STATEMENT_TRACK_HISTORY_MAX_SIZE + \" statements open/close stack traces are:\");\n+      int element = 0;\n+      for (StackTraceElement[] traceElements : openCloseTraces)\n+      {\n+        printStream.println(StringUtils.center(\"*StackTrace \" + element + \"*\", separatorLength, paddingString));\n+        for (StackTraceElement traceElement : traceElements)\n         {\n-            if ( statementOpenCloseCalls.size() > STATEMENT_TRACK_HISTORY_MAX_SIZE )\n-            {\n-                statementOpenCloseCalls.pop();\n-            }\n-            StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n-            statementOpenCloseCalls.add( Arrays.copyOfRange(stackTrace, 2, stackTrace.length) );\n+          printStream.println(\"\\tat \" + traceElement);\n         }\n+        printStream.println(StringUtils.center(\"\", separatorLength, paddingString));\n+        printStream.println();\n+        element++;\n+      }\n+      printStream.println(\"All statement open/close stack traces printed.\");\n+      return out.toString();\n     }\n \n-    public ClockContext clocks()\n-    {\n-        return clockContext;\n-    }\n-\n-    static class StatementNotClosedException extends IllegalStateException\n+    private static class StatementTraceException extends RuntimeException\n     {\n-\n-        StatementNotClosedException( String s, Deque<StackTraceElement[]> openCloseTraces )\n-        {\n-            super( s );\n-            this.addSuppressed( new StatementTraceException( buildMessage( openCloseTraces ) ) );\n-        }\n-\n-        private static String buildMessage( Deque<StackTraceElement[]> openCloseTraces )\n-        {\n-            if ( openCloseTraces.isEmpty() )\n-            {\n-                return StringUtils.EMPTY;\n-            }\n-            int separatorLength = 80;\n-            String paddingString = \"=\";\n-\n-            ByteArrayOutputStream out = new ByteArrayOutputStream();\n-            PrintStream printStream = new PrintStream( out );\n-            printStream.println();\n-            printStream.println( \"Last \" + STATEMENT_TRACK_HISTORY_MAX_SIZE + \" statements open/close stack traces are:\" );\n-            int element = 0;\n-            for ( StackTraceElement[] traceElements : openCloseTraces )\n-            {\n-                printStream.println( StringUtils.center( \"*StackTrace \" + element + \"*\", separatorLength, paddingString ) );\n-                for ( StackTraceElement traceElement : traceElements )\n-                {\n-                    printStream.println( \"\\tat \" + traceElement );\n-                }\n-                printStream.println( StringUtils.center( \"\", separatorLength, paddingString ) );\n-                printStream.println();\n-                element++;\n-            }\n-            printStream.println( \"All statement open/close stack traces printed.\" );\n-            return out.toString();\n-        }\n-\n-        private static class StatementTraceException extends RuntimeException\n-        {\n-            StatementTraceException( String message )\n-            {\n-                super( message );\n-            }\n-\n-            @Override\n-            public synchronized Throwable fillInStackTrace()\n-            {\n-                return this;\n-            }\n-        }\n+      StatementTraceException(String message)\n+      {\n+        super(message);\n+      }\n+\n+      @Override\n+      public synchronized Throwable fillInStackTrace()\n+      {\n+        return this;\n+      }\n     }\n+  }\n }\n",
            "diff_size": 369
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "200",
                    "column": "30",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 287).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2120/KernelStatement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2120/KernelStatement.java\nindex aa543ae3d55..e9ae012ce93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2120/KernelStatement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2120/KernelStatement.java\n@@ -142,7 +142,8 @@ public class KernelStatement extends CloseableResourceManager implements TxState\n         {\n             cleanupResources();\n         }\n-        recordOpenCloseMethods();\n+\n+recordOpenCloseMethods();\n     }\n \n     @Override\n@@ -190,12 +191,13 @@ public class KernelStatement extends CloseableResourceManager implements TxState\n             storeStatement.acquire();\n             clockContext.initializeStatement();\n         }\n-        recordOpenCloseMethods();\n+\n+recordOpenCloseMethods();\n     }\n \n     final boolean isAcquired()\n     {\n-        return referenceCount > 0;\n+        return referenceCount> 0;\n     }\n \n     final void forceClose()\n@@ -216,11 +218,8 @@ public class KernelStatement extends CloseableResourceManager implements TxState\n \n     private String getStatementNotClosedMessage( int leakedStatements )\n     {\n-        String additionalInstruction = RECORD_STATEMENTS_TRACES ? StringUtils.EMPTY :\n-                                       format(\" To see statement open/close stack traces please pass '%s' to your JVM\" +\n-                                                       \" or enable corresponding feature toggle.\",\n-                                       toggle( KernelStatement.class, \"recordStatementsTraces\", Boolean.TRUE ) );\n-        return format( \"Statements were not correctly closed. Number of leaked statements: %d.%s\", leakedStatements,\n+        String additionalInstruction = RECORD_STATEMENTS_TRACES ? StringUtils.EMPTY : format( \" To see statement open/close stack traces please pass '%s' to your JVM\" + \" or enable corresponding feature toggle.\", toggle( KernelStatement.class, \"recordStatementsTraces\", Boolean.TRUE ) );\n+return format( \"Statements were not correctly closed. Number of leaked statements: %d.%s\", leakedStatements,\n                 additionalInstruction );\n     }\n \n@@ -270,7 +269,7 @@ public class KernelStatement extends CloseableResourceManager implements TxState\n \n     void assertAllows( Function<AccessMode,Boolean> allows, String mode )\n     {\n-      transaction.assertAllows( allows, mode );\n+    transaction.assertAllows( allows, mode );\n     }\n \n     private void recordOpenCloseMethods()\n@@ -281,8 +280,9 @@ public class KernelStatement extends CloseableResourceManager implements TxState\n             {\n                 statementOpenCloseCalls.pop();\n             }\n-            StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n-            statementOpenCloseCalls.add( Arrays.copyOfRange(stackTrace, 2, stackTrace.length) );\n+\n+StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n+            statementOpenCloseCalls.add( Arrays.copyOfRange( stackTrace, 2, stackTrace.length) );\n         }\n     }\n \n@@ -293,8 +293,7 @@ public class KernelStatement extends CloseableResourceManager implements TxState\n \n     static class StatementNotClosedException extends IllegalStateException\n     {\n-\n-        StatementNotClosedException( String s, Deque<StackTraceElement[]> openCloseTraces )\n+    StatementNotClosedException( String s, Deque<StackTraceElement[]> openCloseTraces )\n         {\n             super( s );\n             this.addSuppressed( new StatementTraceException( buildMessage( openCloseTraces ) ) );\n@@ -343,4 +342,4 @@ public class KernelStatement extends CloseableResourceManager implements TxState\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}