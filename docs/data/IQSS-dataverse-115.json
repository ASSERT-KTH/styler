{
    "project_name": "IQSS-dataverse",
    "error_id": "115",
    "information": {
        "errors": [
            {
                "line": "206",
                "column": "11",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        \n        /*\n        < \t(%3C)\n> \t(%3E)\n{ \t(%7B)\n} \t(%7D)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "206",
                    "column": "11",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/115/GlobalId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/115/GlobalId.java\nindex 98112170d25..ef1e43874a2 100644\nBinary files a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/115/GlobalId.java and b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/115/GlobalId.java differ\n",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "210",
                    "column": "11",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/115/GlobalId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/115/GlobalId.java\nindex 98112170d25..ce3f8d1a1f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/115/GlobalId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/115/GlobalId.java\n@@ -19,188 +19,192 @@ import java.util.regex.Pattern;\n import javax.ejb.EJB;\n \n /**\n- *\n  * @author skraffmiller\n  */\n public class GlobalId implements java.io.Serializable {\n-    \n-    public static final String DOI_PROTOCOL = \"doi\";\n-    public static final String HDL_PROTOCOL = \"hdl\";\n-    public static final String HDL_RESOLVER_URL = \"https://hdl.handle.net/\";\n-    public static final String DOI_RESOLVER_URL = \"https://doi.org/\";\n-    \n-    public static Optional<GlobalId> parse(String identifierString) {\n-        try {\n-            return Optional.of(new GlobalId(identifierString));\n-        } catch ( IllegalArgumentException _iae) {\n-            return Optional.empty();\n-        }\n-    }\n-    \n-    private static final Logger logger = Logger.getLogger(GlobalId.class.getName());\n-    \n-    @EJB\n-    SettingsServiceBean settingsService;\n-\n-    /**\n-     * \n-     * @param identifier The string to be parsed\n-     * @throws IllegalArgumentException if the passed string cannot be parsed.\n-     */\n-    public GlobalId(String identifier) {\n-        // set the protocol, authority, and identifier via parsePersistentId        \n-        if ( ! parsePersistentId(identifier) ){\n-            throw new IllegalArgumentException(\"Failed to parse identifier: \" + identifier);\n-        }\n-    }\n \n-    public GlobalId(String protocol, String authority, String identifier) {\n-        this.protocol = protocol;\n-        this.authority = authority;\n-        this.identifier = identifier;\n-    }\n-    \n-    public GlobalId(DvObject dvObject) {\n-        this.authority = dvObject.getAuthority();\n-        this.protocol = dvObject.getProtocol();\n-        this.identifier = dvObject.getIdentifier(); \n-    }\n-        \n-    private String protocol;\n-    private String authority;\n-    private String identifier;\n-\n-    /**\n-     * Tests whether {@code this} instance has all the data required for a \n-     * global id.\n-     * @return {@code true} iff all the fields are non-empty; {@code false} otherwise.\n-     */\n-    public boolean isComplete() {\n-        return !(isEmpty(protocol)||isEmpty(authority)||isEmpty(identifier));\n-    }\n-    \n-    public String getProtocol() {\n-        return protocol;\n-    }\n+  public static final String DOI_PROTOCOL = \"doi\";\n+  public static final String HDL_PROTOCOL = \"hdl\";\n+  public static final String HDL_RESOLVER_URL = \"https://hdl.handle.net/\";\n+  public static final String DOI_RESOLVER_URL = \"https://doi.org/\";\n \n-    public void setProtocol(String protocol) {\n-        this.protocol = protocol;\n+  public static Optional<GlobalId> parse(String identifierString) {\n+    try {\n+      return Optional.of(new GlobalId(identifierString));\n+    } catch (IllegalArgumentException _iae) {\n+      return Optional.empty();\n     }\n+  }\n \n-    public String getAuthority() {\n-        return authority;\n-    }\n+  private static final Logger logger = Logger.getLogger(GlobalId.class.getName());\n+\n+  @EJB\n+  SettingsServiceBean settingsService;\n \n-    public void setAuthority(String authority) {\n-        this.authority = authority;\n+  /**\n+   * @param identifier The string to be parsed\n+   * @throws IllegalArgumentException if the passed string cannot be parsed.\n+   */\n+  public GlobalId(String identifier) {\n+    // set the protocol, authority, and identifier via parsePersistentId\n+    if (!parsePersistentId(identifier)) {\n+      throw new IllegalArgumentException(\"Failed to parse identifier: \" + identifier);\n     }\n+  }\n+\n+  public GlobalId(String protocol, String authority, String identifier) {\n+    this.protocol = protocol;\n+    this.authority = authority;\n+    this.identifier = identifier;\n+  }\n \n-    public String getIdentifier() {\n-        return identifier;\n+  public GlobalId(DvObject dvObject) {\n+    this.authority = dvObject.getAuthority();\n+    this.protocol = dvObject.getProtocol();\n+    this.identifier = dvObject.getIdentifier();\n+  }\n+\n+  private String protocol;\n+  private String authority;\n+  private String identifier;\n+\n+  /**\n+   * Tests whether {@code this} instance has all the data required for a\n+   * global id.\n+   *\n+   * @return {@code true} iff all the fields are non-empty; {@code false} otherwise.\n+   */\n+  public boolean isComplete() {\n+    return !(isEmpty(protocol) || isEmpty(authority) || isEmpty(identifier));\n+  }\n+\n+  public String getProtocol() {\n+    return protocol;\n+  }\n+\n+  public void setProtocol(String protocol) {\n+    this.protocol = protocol;\n+  }\n+\n+  public String getAuthority() {\n+    return authority;\n+  }\n+\n+  public void setAuthority(String authority) {\n+    this.authority = authority;\n+  }\n+\n+  public String getIdentifier() {\n+    return identifier;\n+  }\n+\n+  public void setIdentifier(String identifier) {\n+    this.identifier = identifier;\n+  }\n+\n+  public String toString() {\n+    return asString();\n+  }\n+\n+  /**\n+   * Returns {@code this}' string representation. Differs from {@link #toString}\n+   * which can also contain debug data, if needed.\n+   *\n+   * @return The string representation of this global id.\n+   */\n+  public String asString() {\n+    if (protocol == null || authority == null || identifier == null) {\n+      return \"\";\n     }\n+    return protocol + \":\" + authority + \"/\" + identifier;\n+  }\n \n-    public void setIdentifier(String identifier) {\n-        this.identifier = identifier;\n+  public URL toURL() {\n+    URL url = null;\n+    if (identifier == null) {\n+      return null;\n     }\n-    \n-    public String toString() {\n-        return asString();\n+    try {\n+      if (protocol.equals(DOI_PROTOCOL)) {\n+        url = new URL(DOI_RESOLVER_URL + authority + \"/\" + identifier);\n+      } else if (protocol.equals(HDL_PROTOCOL)) {\n+        url = new URL(HDL_RESOLVER_URL + authority + \"/\" + identifier);\n+      }\n+    } catch (MalformedURLException ex) {\n+      logger.log(Level.SEVERE, null, ex);\n     }\n-    \n-    /**\n-     * Returns {@code this}' string representation. Differs from {@link #toString}\n-     * which can also contain debug data, if needed.\n-     * \n-     * @return The string representation of this global id.\n-     */\n-    public String asString() {\n-        if (protocol == null || authority == null || identifier == null) {\n-            return \"\";\n-        }\n-        return protocol + \":\" + authority + \"/\" + identifier;\n+    return url;\n+  }\n+\n+\n+  /**\n+   * Parse a Persistent Id and set the protocol, authority, and identifier\n+   * <p>\n+   * Example 1: doi:10.5072/FK2/BYM3IW\n+   * protocol: doi\n+   * authority: 10.5072\n+   * identifier: FK2/BYM3IW\n+   * <p>\n+   * Example 2: hdl:1902.1/111012\n+   * protocol: hdl\n+   * authority: 1902.1\n+   * identifier: 111012\n+   *\n+   * @param identifierString\n+   * @param separator        the string that separates the authority from the identifier.\n+   * @param destination      the global id that will contain the parsed data.\n+   * @return {@code destination}, after its fields have been updated, or\n+   * {@code null} if parsing failed.\n+   */\n+  private boolean parsePersistentId(String identifierString) {\n+\n+    if (identifierString == null) {\n+      return false;\n     }\n-    \n-    public URL toURL() {\n-        URL url = null;\n-        if (identifier == null){\n-            return null;\n+    int index1 = identifierString.indexOf(':');\n+    if (index1 > 0) { // ':' found with one or more characters before it\n+      int index2 = identifierString.indexOf('/', index1 + 1);\n+      if (index2 > 0 && (index2 + 1) < identifierString.length()) { // '/' found with one or more characters\n+        // between ':'\n+        protocol = identifierString.substring(0, index1); // and '/' and there are characters after '/'\n+        if (!\"doi\".equals(protocol) && !\"hdl\".equals(protocol)) {\n+          return false;\n         }\n-        try {\n-            if (protocol.equals(DOI_PROTOCOL)){\n-               url = new URL(DOI_RESOLVER_URL + authority + \"/\" + identifier); \n-            } else if (protocol.equals(HDL_PROTOCOL)){\n-               url = new URL(HDL_RESOLVER_URL + authority + \"/\" + identifier);  \n-            }           \n-        } catch (MalformedURLException ex) {\n-            logger.log(Level.SEVERE, null, ex);\n-        }       \n-        return url;\n-    }    \n-\n-    \n-    /** \n-     *   Parse a Persistent Id and set the protocol, authority, and identifier\n-     * \n-     *   Example 1: doi:10.5072/FK2/BYM3IW\n-     *       protocol: doi\n-     *       authority: 10.5072\n-     *       identifier: FK2/BYM3IW\n-     * \n-     *   Example 2: hdl:1902.1/111012\n-     *       protocol: hdl\n-     *       authority: 1902.1\n-     *       identifier: 111012\n-     *\n-     * @param identifierString\n-     * @param separator the string that separates the authority from the identifier.\n-     * @param destination the global id that will contain the parsed data.\n-     * @return {@code destination}, after its fields have been updated, or\n-     *         {@code null} if parsing failed.\n-     */\n-    private boolean parsePersistentId(String identifierString) {\n-\n-        if (identifierString == null) {\n-            return false;\n+        //Strip any whitespace, ; and ' from authority (should finding them cause a failure instead?)\n+        authority = formatIdentifierString(identifierString.substring(index1 + 1, index2));\n+        if (testforNullTerminator(authority)) {\n+          return false;\n         }\n-        int index1 = identifierString.indexOf(':');\n-        if (index1 > 0) { // ':' found with one or more characters before it\n-            int index2 = identifierString.indexOf('/', index1 + 1);\n-            if (index2 > 0 && (index2 + 1) < identifierString.length()) { // '/' found with one or more characters\n-                                                                          // between ':'\n-                protocol = identifierString.substring(0, index1); // and '/' and there are characters after '/'\n-                if (!\"doi\".equals(protocol) && !\"hdl\".equals(protocol)) {\n-                    return false;\n-                }\n-                //Strip any whitespace, ; and ' from authority (should finding them cause a failure instead?)\n-                authority = formatIdentifierString(identifierString.substring(index1 + 1, index2));\n-                if(testforNullTerminator(authority)) return false;\n-                if (protocol.equals(DOI_PROTOCOL)) {\n-                    if (!this.checkDOIAuthority(authority)) {\n-                        return false;\n-                    }\n-                }\n-                // Passed all checks\n-                //Strip any whitespace, ; and ' from identifier (should finding them cause a failure instead?)\n-                identifier = formatIdentifierString(identifierString.substring(index2 + 1));\n-                if(testforNullTerminator(identifier)) return false;               \n-            } else {\n-                logger.log(Level.INFO, \"Error parsing identifier: {0}: '':<authority>/<identifier>'' not found in string\", identifierString);\n-                return false;\n-            }\n-        } else {\n-            logger.log(Level.INFO, \"Error parsing identifier: {0}: ''<protocol>:'' not found in string\", identifierString);\n+        if (protocol.equals(DOI_PROTOCOL)) {\n+          if (!this.checkDOIAuthority(authority)) {\n             return false;\n+          }\n         }\n-        return true;\n-    }\n-    \n-    private static String formatIdentifierString(String str){\n-        \n-        if (str == null){\n-            return null;\n+        // Passed all checks\n+        //Strip any whitespace, ; and ' from identifier (should finding them cause a failure instead?)\n+        identifier = formatIdentifierString(identifierString.substring(index2 + 1));\n+        if (testforNullTerminator(identifier)) {\n+          return false;\n         }\n-        // remove whitespace, single quotes, and semicolons\n-        return str.replaceAll(\"\\\\s+|'|;\",\"\");  \n+      } else {\n+        logger.log(Level.INFO, \"Error parsing identifier: {0}: '':<authority>/<identifier>'' not found in string\",\n+          identifierString);\n+        return false;\n+      }\n+    } else {\n+      logger.log(Level.INFO, \"Error parsing identifier: {0}: ''<protocol>:'' not found in string\", identifierString);\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  private static String formatIdentifierString(String str) {\n+\n+    if (str == null) {\n+      return null;\n+    }\n+    // remove whitespace, single quotes, and semicolons\n+    return str.replaceAll(\"\\\\s+|'|;\", \"\");\n         \n         /*\n         < \t(%3C)\n@@ -215,41 +219,41 @@ public class GlobalId implements java.io.Serializable {\n \\ \t(%5C)\n +\n         */\n-        // http://www.doi.org/doi_handbook/2_Numbering.html\n+    // http://www.doi.org/doi_handbook/2_Numbering.html\n+  }\n+\n+  private static boolean testforNullTerminator(String str) {\n+    if (str == null) {\n+      return false;\n     }\n-    \n-    private static boolean testforNullTerminator(String str){\n-        if(str == null) {\n-            return false;\n-        }\n-        return str.indexOf('\\u0000') > 0;\n+    return str.indexOf('\\u0000') > 0;\n+  }\n+\n+  private boolean checkDOIAuthority(String doiAuthority) {\n+\n+    if (doiAuthority == null) {\n+      return false;\n     }\n-    \n-    private boolean checkDOIAuthority(String doiAuthority){\n-        \n-        if (doiAuthority==null){\n-            return false;\n-        }\n-        \n-        if (!(doiAuthority.startsWith(\"10.\"))){\n-            return false;\n-        }\n-        \n-        return true;\n+\n+    if (!(doiAuthority.startsWith(\"10.\"))) {\n+      return false;\n     }\n \n-    /**\n-     * Verifies that the pid only contains allowed characters.\n-     *\n-     * @param pidParam\n-     * @return true if pid only contains allowed characters false if pid\n-     * contains characters not specified in the allowed characters regex.\n-     */\n-    public static boolean verifyImportCharacters(String pidParam) {\n+    return true;\n+  }\n \n-        Pattern p = Pattern.compile(BundleUtil.getStringFromBundle(\"pid.allowedCharacters\"));\n-        Matcher m = p.matcher(pidParam);\n+  /**\n+   * Verifies that the pid only contains allowed characters.\n+   *\n+   * @param pidParam\n+   * @return true if pid only contains allowed characters false if pid\n+   * contains characters not specified in the allowed characters regex.\n+   */\n+  public static boolean verifyImportCharacters(String pidParam) {\n \n-        return m.matches();\n-    }\n+    Pattern p = Pattern.compile(BundleUtil.getStringFromBundle(\"pid.allowedCharacters\"));\n+    Matcher m = p.matcher(pidParam);\n+\n+    return m.matches();\n+  }\n }\n",
            "diff_size": 326
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/115/GlobalId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/115/GlobalId.java\nindex 98112170d25..8b38c6cd937 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/115/GlobalId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/115/GlobalId.java\n@@ -22,23 +22,28 @@ import javax.ejb.EJB;\n  *\n  * @author skraffmiller\n  */\n+\n+\n public class GlobalId implements java.io.Serializable {\n-    \n+\n     public static final String DOI_PROTOCOL = \"doi\";\n+\n     public static final String HDL_PROTOCOL = \"hdl\";\n+\n     public static final String HDL_RESOLVER_URL = \"https://hdl.handle.net/\";\n+\n     public static final String DOI_RESOLVER_URL = \"https://doi.org/\";\n-    \n+\n     public static Optional<GlobalId> parse(String identifierString) {\n         try {\n             return Optional.of(new GlobalId(identifierString));\n-        } catch ( IllegalArgumentException _iae) {\n+        } catch (IllegalArgumentException _iae) {\n             return Optional.empty();\n         }\n     }\n-    \n+\n     private static final Logger logger = Logger.getLogger(GlobalId.class.getName());\n-    \n+\n     @EJB\n     SettingsServiceBean settingsService;\n \n@@ -47,9 +52,10 @@ public class GlobalId implements java.io.Serializable {\n      * @param identifier The string to be parsed\n      * @throws IllegalArgumentException if the passed string cannot be parsed.\n      */\n+\n     public GlobalId(String identifier) {\n         // set the protocol, authority, and identifier via parsePersistentId        \n-        if ( ! parsePersistentId(identifier) ){\n+        if (!parsePersistentId(identifier)) {\n             throw new IllegalArgumentException(\"Failed to parse identifier: \" + identifier);\n         }\n     }\n@@ -59,13 +65,13 @@ public class GlobalId implements java.io.Serializable {\n         this.authority = authority;\n         this.identifier = identifier;\n     }\n-    \n+\n     public GlobalId(DvObject dvObject) {\n         this.authority = dvObject.getAuthority();\n         this.protocol = dvObject.getProtocol();\n-        this.identifier = dvObject.getIdentifier(); \n+        this.identifier = dvObject.getIdentifier();\n     }\n-        \n+\n     private String protocol;\n     private String authority;\n     private String identifier;\n@@ -75,10 +81,11 @@ public class GlobalId implements java.io.Serializable {\n      * global id.\n      * @return {@code true} iff all the fields are non-empty; {@code false} otherwise.\n      */\n+\n     public boolean isComplete() {\n-        return !(isEmpty(protocol)||isEmpty(authority)||isEmpty(identifier));\n+        return !(isEmpty(protocol) || isEmpty(authority) || isEmpty(identifier));\n     }\n-    \n+\n     public String getProtocol() {\n         return protocol;\n     }\n@@ -102,7 +109,7 @@ public class GlobalId implements java.io.Serializable {\n     public void setIdentifier(String identifier) {\n         this.identifier = identifier;\n     }\n-    \n+\n     public String toString() {\n         return asString();\n     }\n@@ -113,27 +120,28 @@ public class GlobalId implements java.io.Serializable {\n      * \n      * @return The string representation of this global id.\n      */\n+\n     public String asString() {\n         if (protocol == null || authority == null || identifier == null) {\n             return \"\";\n         }\n         return protocol + \":\" + authority + \"/\" + identifier;\n     }\n-    \n+\n     public URL toURL() {\n         URL url = null;\n-        if (identifier == null){\n+        if (identifier == null) {\n             return null;\n         }\n         try {\n-            if (protocol.equals(DOI_PROTOCOL)){\n-               url = new URL(DOI_RESOLVER_URL + authority + \"/\" + identifier); \n-            } else if (protocol.equals(HDL_PROTOCOL)){\n-               url = new URL(HDL_RESOLVER_URL + authority + \"/\" + identifier);  \n-            }           \n+            if (protocol.equals(DOI_PROTOCOL)) {\n+                url = new URL(DOI_RESOLVER_URL + authority + \"/\" + identifier);\n+            } else if (protocol.equals(HDL_PROTOCOL)) {\n+                url = new URL(HDL_RESOLVER_URL + authority + \"/\" + identifier);\n+            }\n         } catch (MalformedURLException ex) {\n             logger.log(Level.SEVERE, null, ex);\n-        }       \n+        }\n         return url;\n     }    \n \n@@ -157,11 +165,12 @@ public class GlobalId implements java.io.Serializable {\n      * @return {@code destination}, after its fields have been updated, or\n      *         {@code null} if parsing failed.\n      */\n-    private boolean parsePersistentId(String identifierString) {\n \n+    private boolean parsePersistentId(String identifierString) {\n         if (identifierString == null) {\n             return false;\n         }\n+\n         int index1 = identifierString.indexOf(':');\n         if (index1 > 0) { // ':' found with one or more characters before it\n             int index2 = identifierString.indexOf('/', index1 + 1);\n@@ -173,7 +182,7 @@ public class GlobalId implements java.io.Serializable {\n                 }\n                 //Strip any whitespace, ; and ' from authority (should finding them cause a failure instead?)\n                 authority = formatIdentifierString(identifierString.substring(index1 + 1, index2));\n-                if(testforNullTerminator(authority)) return false;\n+                if (testforNullTerminator(authority)) return false;\n                 if (protocol.equals(DOI_PROTOCOL)) {\n                     if (!this.checkDOIAuthority(authority)) {\n                         return false;\n@@ -182,59 +191,60 @@ public class GlobalId implements java.io.Serializable {\n                 // Passed all checks\n                 //Strip any whitespace, ; and ' from identifier (should finding them cause a failure instead?)\n                 identifier = formatIdentifierString(identifierString.substring(index2 + 1));\n-                if(testforNullTerminator(identifier)) return false;               \n+                if (testforNullTerminator(identifier)) return false;\n             } else {\n-                logger.log(Level.INFO, \"Error parsing identifier: {0}: '':<authority>/<identifier>'' not found in string\", identifierString);\n+                logger.log(Level.INFO,\n+                           \"Error parsing identifier: {0}: '':<authority>/<identifier>'' not found in string\",\n+                           identifierString);\n                 return false;\n             }\n         } else {\n-            logger.log(Level.INFO, \"Error parsing identifier: {0}: ''<protocol>:'' not found in string\", identifierString);\n+            logger.log(Level.INFO,\n+                       \"Error parsing identifier: {0}: ''<protocol>:'' not found in string\",\n+                       identifierString);\n             return false;\n         }\n         return true;\n     }\n-    \n-    private static String formatIdentifierString(String str){\n-        \n-        if (str == null){\n+\n+    private static String formatIdentifierString(String str) {\n+        if (str == null) {\n             return null;\n         }\n         // remove whitespace, single quotes, and semicolons\n-        return str.replaceAll(\"\\\\s+|'|;\",\"\");  \n+        return str.replaceAll(\"\\\\s+|'|;\", \"\");  \n         \n         /*\n-        < \t(%3C)\n-> \t(%3E)\n-{ \t(%7B)\n-} \t(%7D)\n-^ \t(%5E)\n-[ \t(%5B)\n-] \t(%5D)\n-` \t(%60)\n-| \t(%7C)\n-\\ \t(%5C)\n+        <   (%3C)\n+>   (%3E)\n+{   (%7B)\n+}   (%7D)\n+^   (%5E)\n+[   (%5B)\n+]   (%5D)\n+`   (%60)\n+|   (%7C)\n+\\   (%5C)\n +\n         */\n         // http://www.doi.org/doi_handbook/2_Numbering.html\n     }\n-    \n-    private static boolean testforNullTerminator(String str){\n-        if(str == null) {\n+\n+    private static boolean testforNullTerminator(String str) {\n+        if (str == null) {\n             return false;\n         }\n         return str.indexOf('\\u0000') > 0;\n     }\n-    \n-    private boolean checkDOIAuthority(String doiAuthority){\n-        \n-        if (doiAuthority==null){\n+\n+    private boolean checkDOIAuthority(String doiAuthority) {\n+        if (doiAuthority == null) {\n             return false;\n         }\n-        \n-        if (!(doiAuthority.startsWith(\"10.\"))){\n+\n+        if (!(doiAuthority.startsWith(\"10.\"))) {\n             return false;\n         }\n-        \n         return true;\n     }\n \n@@ -245,11 +255,10 @@ public class GlobalId implements java.io.Serializable {\n      * @return true if pid only contains allowed characters false if pid\n      * contains characters not specified in the allowed characters regex.\n      */\n-    public static boolean verifyImportCharacters(String pidParam) {\n \n+    public static boolean verifyImportCharacters(String pidParam) {\n         Pattern p = Pattern.compile(BundleUtil.getStringFromBundle(\"pid.allowedCharacters\"));\n         Matcher m = p.matcher(pidParam);\n-\n         return m.matches();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 68
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "206",
                    "column": "11",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/115/GlobalId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/115/GlobalId.java\nindex 98112170d25..ef1e43874a2 100644\nBinary files a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/115/GlobalId.java and b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/115/GlobalId.java differ\n",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "206",
                    "column": "11",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/115/GlobalId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/115/GlobalId.java\nindex 98112170d25..ef1e43874a2 100644\nBinary files a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/115/GlobalId.java and b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/115/GlobalId.java differ\n",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}