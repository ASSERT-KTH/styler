{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3157",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3157/GeoEstimateEvaluator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3157/GeoEstimateEvaluator.java\nindex c010939f019..fd9f24d1f5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3157/GeoEstimateEvaluator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3157/GeoEstimateEvaluator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import org.neo4j.graphalgo.EstimateEvaluator;\n@@ -24,56 +25,56 @@ import org.neo4j.graphdb.Node;\n \n public class GeoEstimateEvaluator implements EstimateEvaluator<Double>\n {\n-    private static final double EARTH_RADIUS = 6371 * 1000; // Meters\n+  private static final double EARTH_RADIUS = 6371 * 1000; // Meters\n \n-    private Node cachedGoal;\n-    private double[] cachedGoalCoordinates;\n-    private final String latitudePropertyKey;\n-    private final String longitudePropertyKey;\n+  private Node cachedGoal;\n+  private double[] cachedGoalCoordinates;\n+  private final String latitudePropertyKey;\n+  private final String longitudePropertyKey;\n \n-    public GeoEstimateEvaluator( String latitudePropertyKey, String longitudePropertyKey )\n-    {\n-        this.latitudePropertyKey = latitudePropertyKey;\n-        this.longitudePropertyKey = longitudePropertyKey;\n-    }\n+  public GeoEstimateEvaluator(String latitudePropertyKey, String longitudePropertyKey)\n+  {\n+    this.latitudePropertyKey = latitudePropertyKey;\n+    this.longitudePropertyKey = longitudePropertyKey;\n+  }\n \n-    @Override\n-    public Double getCost( Node node, Node goal )\n+  @Override\n+  public Double getCost(Node node, Node goal)\n+  {\n+    double[] nodeCoordinates = getCoordinates(node);\n+    if (cachedGoal == null || !cachedGoal.equals(goal))\n     {\n-        double[] nodeCoordinates = getCoordinates( node );\n-        if ( cachedGoal == null || !cachedGoal.equals( goal ) )\n-        {\n-            cachedGoalCoordinates = getCoordinates( goal );\n-            cachedGoal = goal;\n-        }\n-        return distance( nodeCoordinates[0], nodeCoordinates[1],\n-                cachedGoalCoordinates[0], cachedGoalCoordinates[1] );\n+      cachedGoalCoordinates = getCoordinates(goal);\n+      cachedGoal = goal;\n     }\n+    return distance(nodeCoordinates[0], nodeCoordinates[1],\n+        cachedGoalCoordinates[0], cachedGoalCoordinates[1]);\n+  }\n \n-    private double[] getCoordinates( Node node )\n-    {\n-        return new double[] {\n-                ((Number) node.getProperty( latitudePropertyKey )).doubleValue(),\n-                ((Number) node.getProperty( longitudePropertyKey )).doubleValue()\n-        };\n-    }\n+  private double[] getCoordinates(Node node)\n+  {\n+    return new double[] {\n+        ((Number) node.getProperty(latitudePropertyKey)).doubleValue(),\n+        ((Number) node.getProperty(longitudePropertyKey)).doubleValue()\n+    };\n+  }\n \n-    private double distance( double latitude1, double longitude1,\n-            double latitude2, double longitude2 )\n-    {\n-        latitude1 = Math.toRadians( latitude1 );\n-        longitude1 = Math.toRadians( longitude1 );\n-        latitude2 = Math.toRadians( latitude2 );\n-        longitude2 = Math.toRadians( longitude2 );\n-        double cLa1 = Math.cos( latitude1 );\n-        double xA = EARTH_RADIUS * cLa1 * Math.cos( longitude1 );\n-        double yA = EARTH_RADIUS * cLa1 * Math.sin( longitude1 );\n-        double zA = EARTH_RADIUS * Math.sin( latitude1 );\n-        double cLa2 = Math.cos( latitude2 );\n-        double xB = EARTH_RADIUS * cLa2 * Math.cos( longitude2 );\n-        double yB = EARTH_RADIUS * cLa2 * Math.sin( longitude2 );\n-        double zB = EARTH_RADIUS * Math.sin( latitude2 );\n-        return Math.sqrt( ( xA - xB ) * ( xA - xB ) + ( yA - yB )\n-                          * ( yA - yB ) + ( zA - zB ) * ( zA - zB ) );\n-    }\n+  private double distance(double latitude1, double longitude1,\n+                          double latitude2, double longitude2)\n+  {\n+    latitude1 = Math.toRadians(latitude1);\n+    longitude1 = Math.toRadians(longitude1);\n+    latitude2 = Math.toRadians(latitude2);\n+    longitude2 = Math.toRadians(longitude2);\n+    double cLa1 = Math.cos(latitude1);\n+    double xA = EARTH_RADIUS * cLa1 * Math.cos(longitude1);\n+    double yA = EARTH_RADIUS * cLa1 * Math.sin(longitude1);\n+    double zA = EARTH_RADIUS * Math.sin(latitude1);\n+    double cLa2 = Math.cos(latitude2);\n+    double xB = EARTH_RADIUS * cLa2 * Math.cos(longitude2);\n+    double yB = EARTH_RADIUS * cLa2 * Math.sin(longitude2);\n+    double zB = EARTH_RADIUS * Math.sin(latitude2);\n+    return Math.sqrt((xA - xB) * (xA - xB) + (yA - yB)\n+        * (yA - yB) + (zA - zB) * (zA - zB));\n+  }\n }\n",
            "diff_size": 52
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "76",
                    "column": "66",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3157/GeoEstimateEvaluator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3157/GeoEstimateEvaluator.java\nindex c010939f019..8e03cfe71a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3157/GeoEstimateEvaluator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3157/GeoEstimateEvaluator.java\n@@ -46,16 +46,16 @@ public class GeoEstimateEvaluator implements EstimateEvaluator<Double>\n             cachedGoalCoordinates = getCoordinates( goal );\n             cachedGoal = goal;\n         }\n-        return distance( nodeCoordinates[0], nodeCoordinates[1],\n+\n+return distance( nodeCoordinates[0], nodeCoordinates[1],\n                 cachedGoalCoordinates[0], cachedGoalCoordinates[1] );\n     }\n \n     private double[] getCoordinates( Node node )\n     {\n         return new double[] {\n-                ((Number) node.getProperty( latitudePropertyKey )).doubleValue(),\n-                ((Number) node.getProperty( longitudePropertyKey )).doubleValue()\n-        };\n+    ((Number) node.getProperty( latitudePropertyKey )).doubleValue(),\n+                ((Number) node.getProperty( longitudePropertyKey )).doubleValue()};\n     }\n \n     private double distance( double latitude1, double longitude1,\n@@ -73,7 +73,6 @@ public class GeoEstimateEvaluator implements EstimateEvaluator<Double>\n         double xB = EARTH_RADIUS * cLa2 * Math.cos( longitude2 );\n         double yB = EARTH_RADIUS * cLa2 * Math.sin( longitude2 );\n         double zB = EARTH_RADIUS * Math.sin( latitude2 );\n-        return Math.sqrt( ( xA - xB ) * ( xA - xB ) + ( yA - yB )\n-                          * ( yA - yB ) + ( zA - zB ) * ( zA - zB ) );\n+        return Math.sqrt( ( xA - xB ) * ( xA - xB ) + ( yA - yB )* ( yA - yB ) + ( zA - zB ) * ( zA - zB ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}