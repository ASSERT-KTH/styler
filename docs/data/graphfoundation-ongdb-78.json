{
    "project_name": "graphfoundation-ongdb",
    "error_id": "78",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/78/AuthorizationHeaders.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/78/AuthorizationHeaders.java\nindex 6ebcd80105f..e95b62cc01f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/78/AuthorizationHeaders.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/78/AuthorizationHeaders.java\n@@ -17,41 +17,42 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.dbms;\n \n import com.sun.jersey.core.util.Base64;\n \n public class AuthorizationHeaders\n {\n-    private AuthorizationHeaders()\n+  private AuthorizationHeaders()\n+  {\n+  }\n+\n+  /**\n+   * Extract the encoded username and password from a HTTP Authorization header value.\n+   */\n+  public static String[] decode(String authorizationHeader)\n+  {\n+    String[] parts = authorizationHeader.trim().split(\" \");\n+    String tokenSegment = parts[parts.length - 1];\n+\n+    if (tokenSegment.trim().length() == 0)\n     {\n+      return null;\n     }\n \n-    /**\n-     * Extract the encoded username and password from a HTTP Authorization header value.\n-     */\n-    public static String[] decode( String authorizationHeader )\n+    String decoded = Base64.base64Decode(tokenSegment);\n+    if (decoded.length() < 1)\n     {\n-        String[] parts = authorizationHeader.trim().split( \" \" );\n-        String tokenSegment = parts[parts.length - 1];\n-\n-        if ( tokenSegment.trim().length() == 0 )\n-        {\n-            return null;\n-        }\n-\n-        String decoded = Base64.base64Decode( tokenSegment );\n-        if ( decoded.length() < 1 )\n-        {\n-            return null;\n-        }\n-\n-        String[] userAndPassword = decoded.split( \":\", 2 );\n-        if ( userAndPassword.length != 2 )\n-        {\n-            return null;\n-        }\n-\n-        return userAndPassword;\n+      return null;\n     }\n+\n+    String[] userAndPassword = decoded.split(\":\", 2);\n+    if (userAndPassword.length != 2)\n+    {\n+      return null;\n+    }\n+\n+    return userAndPassword;\n+  }\n }\n",
            "diff_size": 49
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/78/AuthorizationHeaders.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/78/AuthorizationHeaders.java\nindex 6ebcd80105f..34a2ee1bd71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/78/AuthorizationHeaders.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/78/AuthorizationHeaders.java\n@@ -34,8 +34,7 @@ public class AuthorizationHeaders\n     {\n         String[] parts = authorizationHeader.trim().split( \" \" );\n         String tokenSegment = parts[parts.length - 1];\n-\n-        if ( tokenSegment.trim().length() == 0 )\n+if ( tokenSegment.trim().length() == 0 )\n         {\n             return null;\n         }\n@@ -54,4 +53,4 @@ public class AuthorizationHeaders\n \n         return userAndPassword;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/78/AuthorizationHeaders.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/78/AuthorizationHeaders.java\nindex 6ebcd80105f..a29ea9fd88d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/78/AuthorizationHeaders.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/78/AuthorizationHeaders.java\n@@ -30,11 +30,11 @@ public class AuthorizationHeaders\n     /**\n      * Extract the encoded username and password from a HTTP Authorization header value.\n      */\n+\n     public static String[] decode( String authorizationHeader )\n     {\n         String[] parts = authorizationHeader.trim().split( \" \" );\n-        String tokenSegment = parts[parts.length - 1];\n-\n+        String tokenSegment = parts[ parts.length - 1];\n         if ( tokenSegment.trim().length() == 0 )\n         {\n             return null;\n@@ -54,4 +54,4 @@ public class AuthorizationHeaders\n \n         return userAndPassword;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}