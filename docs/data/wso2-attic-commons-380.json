{
    "project_name": "wso2-attic-commons",
    "error_id": "380",
    "information": {
        "errors": [
            {
                "line": "41",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * The following features are implemented:\n * <ul>\n *   <li>{@link org.eclipse.wst.wsdl.binding.soap.internal.impl.SOAPHeaderImpl#getHeaderFaults <em>Header Faults</em>}</li>\n * </ul>\n * </p>\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/380/SOAPHeaderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/380/SOAPHeaderImpl.java\nindex 9815c678e8d..1ae4f895501 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/380/SOAPHeaderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/380/SOAPHeaderImpl.java\n@@ -8,6 +8,7 @@\n  * Contributors:\n  *     IBM Corporation - initial API and implementation\n  *******************************************************************************/\n+\n package org.eclipse.wst.wsdl.binding.soap.internal.impl;\n \n \n@@ -44,8 +45,7 @@ import org.w3c.dom.Element;\n  *\n  * @generated\n  */\n-public class SOAPHeaderImpl extends SOAPHeaderBaseImpl implements SOAPHeader\n-{\n+public class SOAPHeaderImpl extends SOAPHeaderBaseImpl implements SOAPHeader {\n   /**\n    * This class is not intended to be serialized.\n    * serialVersionUID is assigned with 1L to avoid\n@@ -57,41 +57,41 @@ public class SOAPHeaderImpl extends SOAPHeaderBaseImpl implements SOAPHeader\n    * The cached value of the '{@link #getHeaderFaults() <em>Header Faults</em>}' containment reference list.\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n-   * @see #getHeaderFaults()\n+   *\n    * @generated\n    * @ordered\n+   * @see #getHeaderFaults()\n    */\n   protected EList headerFaults;\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  protected SOAPHeaderImpl()\n-  {\n+  protected SOAPHeaderImpl() {\n     super();\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  protected EClass eStaticClass()\n-  {\n+  protected EClass eStaticClass() {\n     return SOAPPackage.Literals.SOAP_HEADER;\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public EList getHeaderFaults()\n-  {\n-    if (headerFaults == null)\n-    {\n+  public EList getHeaderFaults() {\n+    if (headerFaults == null) {\n       headerFaults = new EObjectContainmentEList(SOAPHeaderFault.class, this, SOAPPackage.SOAP_HEADER__HEADER_FAULTS);\n     }\n     return headerFaults;\n@@ -100,20 +100,20 @@ public class SOAPHeaderImpl extends SOAPHeaderBaseImpl implements SOAPHeader\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated NOT\n    */\n-  public List getSOAPHeaderFaults()\n-  {\n+  public List getSOAPHeaderFaults() {\n     return getHeaderFaults();\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated NOT\n    */\n-  public void addSOAPHeaderFault(javax.wsdl.extensions.soap.SOAPHeaderFault soapHeaderFault)\n-  {\n+  public void addSOAPHeaderFault(javax.wsdl.extensions.soap.SOAPHeaderFault soapHeaderFault) {\n     EList headerFaults = getHeaderFaults();\n     headerFaults.add(soapHeaderFault);\n   }\n@@ -121,14 +121,13 @@ public class SOAPHeaderImpl extends SOAPHeaderBaseImpl implements SOAPHeader\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)\n-  {\n-    switch (featureID)\n-    {\n-      case SOAPPackage.SOAP_HEADER__HEADER_FAULTS:\n-      return ((InternalEList)getHeaderFaults()).basicRemove(otherEnd, msgs);\n+  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {\n+    switch (featureID) {\n+    case SOAPPackage.SOAP_HEADER__HEADER_FAULTS:\n+      return ((InternalEList) getHeaderFaults()).basicRemove(otherEnd, msgs);\n     }\n     return super.eInverseRemove(otherEnd, featureID, msgs);\n   }\n@@ -136,13 +135,12 @@ public class SOAPHeaderImpl extends SOAPHeaderBaseImpl implements SOAPHeader\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public Object eGet(int featureID, boolean resolve, boolean coreType)\n-  {\n-    switch (featureID)\n-    {\n-      case SOAPPackage.SOAP_HEADER__HEADER_FAULTS:\n+  public Object eGet(int featureID, boolean resolve, boolean coreType) {\n+    switch (featureID) {\n+    case SOAPPackage.SOAP_HEADER__HEADER_FAULTS:\n       return getHeaderFaults();\n     }\n     return super.eGet(featureID, resolve, coreType);\n@@ -151,15 +149,14 @@ public class SOAPHeaderImpl extends SOAPHeaderBaseImpl implements SOAPHeader\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public void eSet(int featureID, Object newValue)\n-  {\n-    switch (featureID)\n-    {\n-      case SOAPPackage.SOAP_HEADER__HEADER_FAULTS:\n+  public void eSet(int featureID, Object newValue) {\n+    switch (featureID) {\n+    case SOAPPackage.SOAP_HEADER__HEADER_FAULTS:\n       getHeaderFaults().clear();\n-      getHeaderFaults().addAll((Collection)newValue);\n+      getHeaderFaults().addAll((Collection) newValue);\n       return;\n     }\n     super.eSet(featureID, newValue);\n@@ -168,13 +165,12 @@ public class SOAPHeaderImpl extends SOAPHeaderBaseImpl implements SOAPHeader\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public void eUnset(int featureID)\n-  {\n-    switch (featureID)\n-    {\n-      case SOAPPackage.SOAP_HEADER__HEADER_FAULTS:\n+  public void eUnset(int featureID) {\n+    switch (featureID) {\n+    case SOAPPackage.SOAP_HEADER__HEADER_FAULTS:\n       getHeaderFaults().clear();\n       return;\n     }\n@@ -184,22 +180,19 @@ public class SOAPHeaderImpl extends SOAPHeaderBaseImpl implements SOAPHeader\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public boolean eIsSet(int featureID)\n-  {\n-    switch (featureID)\n-    {\n-      case SOAPPackage.SOAP_HEADER__HEADER_FAULTS:\n+  public boolean eIsSet(int featureID) {\n+    switch (featureID) {\n+    case SOAPPackage.SOAP_HEADER__HEADER_FAULTS:\n       return headerFaults != null && !headerFaults.isEmpty();\n     }\n     return super.eIsSet(featureID);\n   }\n \n-  public void handleUnreconciledElement(Element child, Collection remainingModelObjects)\n-  {\n-    if (SOAPConstants.HEADER_FAULT_ELEMENT_TAG.equals(child.getLocalName()))\n-    {\n+  public void handleUnreconciledElement(Element child, Collection remainingModelObjects) {\n+    if (SOAPConstants.HEADER_FAULT_ELEMENT_TAG.equals(child.getLocalName())) {\n       SOAPHeaderFault fault = SOAPFactory.eINSTANCE.createSOAPHeaderFault();\n       fault.setEnclosingDefinition(getEnclosingDefinition());\n       fault.setElement(child);\n@@ -207,27 +200,23 @@ public class SOAPHeaderImpl extends SOAPHeaderBaseImpl implements SOAPHeader\n     }\n   }\n \n-  protected void handleReconciliation(Collection remainingModelObjects)\n-  {\n-    for (Iterator i = remainingModelObjects.iterator(); i.hasNext();)\n-    {\n+  protected void handleReconciliation(Collection remainingModelObjects) {\n+    for (Iterator i = remainingModelObjects.iterator(); i.hasNext(); ) {\n       remove(this, i.next());\n     }\n   }\n \n-  protected void remove(Object component, Object modelObject)\n-  {\n-    SOAPHeader header = (SOAPHeader)component;\n-    if (modelObject instanceof SOAPHeaderFault)\n-    {\n+  protected void remove(Object component, Object modelObject) {\n+    SOAPHeader header = (SOAPHeader) component;\n+    if (modelObject instanceof SOAPHeaderFault) {\n       header.getHeaderFaults().remove(modelObject);\n     }\n   }\n \n-  public QName getElementType()\n-  {\n-    if (elementType == null)\n+  public QName getElementType() {\n+    if (elementType == null) {\n       elementType = new QName(SOAPConstants.SOAP_NAMESPACE_URI, SOAPConstants.HEADER_ELEMENT_TAG);\n+    }\n     return elementType;\n   }\n } //SOAPHeaderImpl\n",
            "diff_size": 71
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}