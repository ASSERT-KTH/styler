{
    "project_name": "intuit-Tank",
    "error_id": "64",
    "information": {
        "errors": [
            {
                "line": "89",
                "column": "50",
                "severity": "warning",
                "message": "'+' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public String toString() {\n        return FilenameUtils.normalize(getPath() +\"/\" + getFileName());\n    }\n    \n    @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/64/FileData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/64/FileData.java\nindex f18929fab65..21ecb7db6f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/64/FileData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/64/FileData.java\n@@ -86,7 +86,7 @@ public class FileData implements Serializable {\n     \n     @Override\n     public String toString() {\n-        return FilenameUtils.normalize(getPath() +\"/\" + getFileName());\n+        return FilenameUtils.normalize(getPath() + \"/\" + getFileName());\n     }\n     \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/64/FileData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/64/FileData.java\nindex f18929fab65..ac6710a66f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/64/FileData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/64/FileData.java\n@@ -12,95 +12,93 @@ import org.apache.commons.lang.builder.HashCodeBuilder;\n \n /**\n  * Represents abstract data about files.\n- * \n- * @author denisa\n  *\n+ * @author denisa\n  */\n public class FileData implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n+  private static final long serialVersionUID = 1L;\n \n-    private String path;\n-    private String fileName;\n-    private Map<String, String> attributes = new HashMap<String, String>();\n-    \n-    public FileData() {\n-        super();\n-    }\n+  private String path;\n+  private String fileName;\n+  private Map<String, String> attributes = new HashMap<String, String>();\n \n-    /**\n-     * @param path\n-     * @param fileName\n-     */\n-    public FileData(String path, String fileName) {\n-        super();\n-        this.path = path;\n-        this.fileName = fileName;\n-    }\n+  public FileData() {\n+    super();\n+  }\n \n-    /**\n-     * @return the path\n-     */\n-    public String getPath() {\n-        return path != null ? path : \"\";\n-    }\n+  /**\n+   * @param path\n+   * @param fileName\n+   */\n+  public FileData(String path, String fileName) {\n+    super();\n+    this.path = path;\n+    this.fileName = fileName;\n+  }\n \n-    /**\n-     * @param path\n-     *            the path to set\n-     */\n-    public void setPath(String path) {\n-        this.path = path;\n-    }\n+  /**\n+   * @return the path\n+   */\n+  public String getPath() {\n+    return path != null ? path : \"\";\n+  }\n \n-    /**\n-     * @return the fileName\n-     */\n-    public String getFileName() {\n-        return fileName;\n-    }\n+  /**\n+   * @param path the path to set\n+   */\n+  public void setPath(String path) {\n+    this.path = path;\n+  }\n \n-    /**\n-     * @param fileName\n-     *            the fileName to set\n-     */\n-    public void setFileName(String fileName) {\n-        this.fileName = fileName;\n-    }\n+  /**\n+   * @return the fileName\n+   */\n+  public String getFileName() {\n+    return fileName;\n+  }\n \n-    /**\n-     * @return the attributes\n-     */\n-    public Map<String, String> getAttributes() {\n-        return attributes;\n-    }\n+  /**\n+   * @param fileName the fileName to set\n+   */\n+  public void setFileName(String fileName) {\n+    this.fileName = fileName;\n+  }\n \n-    /**\n-     * adds an attribute\n-     * @param key the key\n-     * @param value the value\n-     */\n-    public void addAttribute(@Nonnull String key, @Nonnull String value) {\n-        this.attributes.put(key, value);\n-    }\n-    \n-    @Override\n-    public String toString() {\n-        return FilenameUtils.normalize(getPath() +\"/\" + getFileName());\n-    }\n-    \n-    @Override\n-    public boolean equals(Object obj) {\n-        if (!(obj instanceof FileData)) {\n-            return false;\n-        }\n-        FileData o = (FileData) obj;\n-        return new EqualsBuilder().append(getPath(), o.getPath()).append(getFileName(), o.getFileName()).isEquals();\n-    }\n-    \n-    @Override\n-    public int hashCode() {\n-        return new HashCodeBuilder().append(getPath()).append(getFileName()).toHashCode();\n+  /**\n+   * @return the attributes\n+   */\n+  public Map<String, String> getAttributes() {\n+    return attributes;\n+  }\n+\n+  /**\n+   * adds an attribute\n+   *\n+   * @param key   the key\n+   * @param value the value\n+   */\n+  public void addAttribute(@Nonnull String key, @Nonnull String value) {\n+    this.attributes.put(key, value);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return FilenameUtils.normalize(getPath() + \"/\" + getFileName());\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (!(obj instanceof FileData)) {\n+      return false;\n     }\n+    FileData o = (FileData) obj;\n+    return new EqualsBuilder().append(getPath(), o.getPath()).append(getFileName(), o.getFileName()).isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder().append(getPath()).append(getFileName()).toHashCode();\n+  }\n \n }\n",
            "diff_size": 89
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/64/FileData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/64/FileData.java\nindex f18929fab65..e8f60d580b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/64/FileData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/64/FileData.java\n@@ -23,9 +23,9 @@ public class FileData implements Serializable {\n     private String path;\n     private String fileName;\n     private Map<String, String> attributes = new HashMap<String, String>();\n-    \n-    public FileData() {\n-        super();\n+\n+public FileData() {\n+    super();\n     }\n \n     /**\n@@ -85,12 +85,12 @@ public class FileData implements Serializable {\n     }\n     \n     @Override\n-    public String toString() {\n-        return FilenameUtils.normalize(getPath() +\"/\" + getFileName());\n+public String toString() {\n+        return FilenameUtils.normalize(getPath() + \"/\" + getFileName());\n     }\n     \n     @Override\n-    public boolean equals(Object obj) {\n+public boolean equals(Object obj) {\n         if (!(obj instanceof FileData)) {\n             return false;\n         }\n@@ -99,8 +99,8 @@ public class FileData implements Serializable {\n     }\n     \n     @Override\n-    public int hashCode() {\n+public int hashCode() {\n         return new HashCodeBuilder().append(getPath()).append(getFileName()).toHashCode();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/64/FileData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/64/FileData.java\nindex f18929fab65..21ecb7db6f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/64/FileData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/64/FileData.java\n@@ -86,7 +86,7 @@ public class FileData implements Serializable {\n     \n     @Override\n     public String toString() {\n-        return FilenameUtils.normalize(getPath() +\"/\" + getFileName());\n+        return FilenameUtils.normalize(getPath() + \"/\" + getFileName());\n     }\n     \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/64/FileData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/64/FileData.java\nindex f18929fab65..21ecb7db6f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/64/FileData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/64/FileData.java\n@@ -86,7 +86,7 @@ public class FileData implements Serializable {\n     \n     @Override\n     public String toString() {\n-        return FilenameUtils.normalize(getPath() +\"/\" + getFileName());\n+        return FilenameUtils.normalize(getPath() + \"/\" + getFileName());\n     }\n     \n     @Override\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}