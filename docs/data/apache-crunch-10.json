{
    "project_name": "apache-crunch",
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "114",
                "severity": "warning",
                "message": "'method def modifier' has incorrect indentation level 1, expected level should be 2.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "  *          The strategy to use for handling existing outputs\n  */\n void write(PCollection<?> collection, Target target,\n     Target.WriteMode writeMode);\n\n /**",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler/10/Pipeline.java\nindex cd4ce033b88..40f59a5ccdb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler/10/Pipeline.java\n@@ -111,8 +111,8 @@ public interface Pipeline {\n   * @param writeMode\n   *          The strategy to use for handling existing outputs\n   */\n- void write(PCollection<?> collection, Target target,\n-     Target.WriteMode writeMode);\n+  void write(PCollection<?> collection, Target target,\n+                         Target.WriteMode writeMode);\n \n  /**\n    * Create the given PCollection and read the data it contains into the\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/intellij/10/Pipeline.java\nindex cd4ce033b88..b5e0460bedc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/intellij/10/Pipeline.java\n@@ -6,15 +6,16 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.crunch;\n \n import org.apache.crunch.types.PTableType;\n@@ -25,7 +26,7 @@ import java.util.List;\n \n /**\n  * Manages the state of a pipeline execution.\n- * \n+ *\n  */\n public interface Pipeline {\n \n@@ -36,7 +37,7 @@ public interface Pipeline {\n \n   /**\n    * Returns the name of this pipeline.\n-   * \n+   *\n    * @return Name of the pipeline\n    */\n   String getName();\n@@ -49,7 +50,7 @@ public interface Pipeline {\n   /**\n    * Converts the given {@code Source} into a {@code PCollection} that is\n    * available to jobs run using this {@code Pipeline} instance.\n-   * \n+   *\n    * @param source\n    *          The source of data\n    * @return A PCollection that references the given source\n@@ -69,14 +70,14 @@ public interface Pipeline {\n   /**\n    * A version of the read method for {@code TableSource} instances that map to\n    * {@code PTable}s.\n-   * \n+   *\n    * @param tableSource\n    *          The source of the data\n    * @return A PTable that references the given source\n    */\n   <K, V> PTable<K, V> read(TableSource<K, V> tableSource);\n \n- /**\n+  /**\n    * A version of the read method for {@code TableSource} instances that map to\n    * {@code PTable}s.\n    *\n@@ -90,7 +91,7 @@ public interface Pipeline {\n    * Write the given collection to the given target on the next pipeline run. The\n    * system will check to see if the target's location already exists using the\n    * {@code WriteMode.DEFAULT} rule for the given {@code Target}.\n-   * \n+   *\n    * @param collection\n    *          The collection\n    * @param target\n@@ -99,25 +100,25 @@ public interface Pipeline {\n   void write(PCollection<?> collection, Target target);\n \n   /**\n-  * Write the contents of the {@code PCollection} to the given {@code Target},\n-  * using the storage format specified by the target and the given\n-  * {@code WriteMode} for cases where the referenced {@code Target}\n-  * already exists.\n-  *\n-  * @param collection\n-  *          The collection\n-  * @param target\n-  *          The target to write to\n-  * @param writeMode\n-  *          The strategy to use for handling existing outputs\n-  */\n- void write(PCollection<?> collection, Target target,\n-     Target.WriteMode writeMode);\n-\n- /**\n+   * Write the contents of the {@code PCollection} to the given {@code Target},\n+   * using the storage format specified by the target and the given\n+   * {@code WriteMode} for cases where the referenced {@code Target}\n+   * already exists.\n+   *\n+   * @param collection\n+   *          The collection\n+   * @param target\n+   *          The target to write to\n+   * @param writeMode\n+   *          The strategy to use for handling existing outputs\n+   */\n+  void write(PCollection<?> collection, Target target,\n+             Target.WriteMode writeMode);\n+\n+  /**\n    * Create the given PCollection and read the data it contains into the\n    * returned Collection instance for client use.\n-   * \n+   *\n    * @param pcollection\n    *          The PCollection to materialize\n    * @return the data from the PCollection as a read-only Collection\n@@ -219,7 +220,7 @@ public interface Pipeline {\n    * @return\n    */\n   PipelineExecution runAsync();\n-  \n+\n   /**\n    * Run any remaining jobs required to generate outputs and then clean up any\n    * intermediate data files that were created in this run or previous calls to\n@@ -228,9 +229,9 @@ public interface Pipeline {\n   PipelineResult done();\n \n   /**\n-  * Cleans up any artifacts created as a result of {@link #run() running} the pipeline.\n-  * @param force forces the cleanup even if all targets of the pipeline have not been completed.\n-  */\n+   * Cleans up any artifacts created as a result of {@link #run() running} the pipeline.\n+   * @param force forces the cleanup even if all targets of the pipeline have not been completed.\n+   */\n   void cleanup(boolean force);\n \n   /**\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/naturalize/10/Pipeline.java\nindex cd4ce033b88..90edbb2c122 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/naturalize/10/Pipeline.java\n@@ -76,7 +76,7 @@ public interface Pipeline {\n    */\n   <K, V> PTable<K, V> read(TableSource<K, V> tableSource);\n \n- /**\n+/**\n    * A version of the read method for {@code TableSource} instances that map to\n    * {@code PTable}s.\n    *\n@@ -84,7 +84,7 @@ public interface Pipeline {\n    * @param named A name for the returned PTable\n    * @return A PTable that references the given source\n    */\n-  <K, V> PTable<K, V> read(TableSource<K, V> tableSource, String named);\n+<K, V> PTable<K, V> read(TableSource<K, V> tableSource, String named);\n \n   /**\n    * Write the given collection to the given target on the next pipeline run. The\n@@ -111,7 +111,7 @@ public interface Pipeline {\n   * @param writeMode\n   *          The strategy to use for handling existing outputs\n   */\n- void write(PCollection<?> collection, Target target,\n+void write(PCollection<?> collection, Target target,\n      Target.WriteMode writeMode);\n \n  /**\n@@ -122,7 +122,7 @@ public interface Pipeline {\n    *          The PCollection to materialize\n    * @return the data from the PCollection as a read-only Collection\n    */\n-  <T> Iterable<T> materialize(PCollection<T> pcollection);\n+<T> Iterable<T> materialize(PCollection<T> pcollection);\n \n   /**\n    * Caches the given PCollection so that it will be processed at most once\n@@ -247,4 +247,4 @@ public interface Pipeline {\n    * Turn on debug logging for jobs that are run from this pipeline.\n    */\n   void enableDebug();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/codebuff/10/Pipeline.java\nindex cd4ce033b88..257004f2cc3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/codebuff/10/Pipeline.java\n@@ -20,18 +20,21 @@ package org.apache.crunch;\n import org.apache.crunch.types.PTableType;\n import org.apache.crunch.types.PType;\n import org.apache.hadoop.conf.Configuration;\n-\n import java.util.List;\n \n /**\n  * Manages the state of a pipeline execution.\n  * \n  */\n+\n+\n public interface Pipeline {\n \n   /**\n    * Set the {@code Configuration} to use with this pipeline.\n    */\n+\n+\n   void setConfiguration(Configuration conf);\n \n   /**\n@@ -39,11 +42,15 @@ public interface Pipeline {\n    * \n    * @return Name of the pipeline\n    */\n+\n+\n   String getName();\n \n   /**\n    * Returns the {@code Configuration} instance associated with this pipeline.\n    */\n+\n+\n   Configuration getConfiguration();\n \n   /**\n@@ -54,6 +61,8 @@ public interface Pipeline {\n    *          The source of data\n    * @return A PCollection that references the given source\n    */\n+\n+\n   <T> PCollection<T> read(Source<T> source);\n \n   /**\n@@ -64,6 +73,8 @@ public interface Pipeline {\n    * @param named A name for the returned PCollection\n    * @return A PCollection that references the given source\n    */\n+\n+\n   <T> PCollection<T> read(Source<T> source, String named);\n \n   /**\n@@ -74,6 +85,7 @@ public interface Pipeline {\n    *          The source of the data\n    * @return A PTable that references the given source\n    */\n+\n   <K, V> PTable<K, V> read(TableSource<K, V> tableSource);\n \n  /**\n@@ -84,6 +96,7 @@ public interface Pipeline {\n    * @param named A name for the returned PTable\n    * @return A PTable that references the given source\n    */\n+\n   <K, V> PTable<K, V> read(TableSource<K, V> tableSource, String named);\n \n   /**\n@@ -96,6 +109,8 @@ public interface Pipeline {\n    * @param target\n    *          The output target\n    */\n+\n+\n   void write(PCollection<?> collection, Target target);\n \n   /**\n@@ -111,8 +126,9 @@ public interface Pipeline {\n   * @param writeMode\n   *          The strategy to use for handling existing outputs\n   */\n- void write(PCollection<?> collection, Target target,\n-     Target.WriteMode writeMode);\n+\n+\n+  void write(PCollection<?> collection, Target target, Target.WriteMode writeMode);\n \n  /**\n    * Create the given PCollection and read the data it contains into the\n@@ -122,6 +138,8 @@ public interface Pipeline {\n    *          The PCollection to materialize\n    * @return the data from the PCollection as a read-only Collection\n    */\n+\n+\n   <T> Iterable<T> materialize(PCollection<T> pcollection);\n \n   /**\n@@ -131,6 +149,8 @@ public interface Pipeline {\n    * @param pcollection The PCollection to cache\n    * @param options The options for how the cached data is stored\n    */\n+\n+\n   <T> void cache(PCollection<T> pcollection, CachingOptions options);\n \n   /**\n@@ -139,6 +159,8 @@ public interface Pipeline {\n    * @param ptype The PType of the empty PCollection\n    * @return A valid PCollection with no contents\n    */\n+\n+\n   <T> PCollection<T> emptyPCollection(PType<T> ptype);\n \n   /**\n@@ -147,6 +169,7 @@ public interface Pipeline {\n    * @param ptype The PTableType of the empty PTable\n    * @return A valid PTable with no contents\n    */\n+\n   <K, V> PTable<K, V> emptyPTable(PTableType<K, V> ptype);\n \n   /**\n@@ -157,6 +180,8 @@ public interface Pipeline {\n    * @param ptype The PType of the PCollection\n    * @return A PCollection that contains the given values\n    */\n+\n+\n   <T> PCollection<T> create(Iterable<T> contents, PType<T> ptype);\n \n   /**\n@@ -168,6 +193,8 @@ public interface Pipeline {\n    * @param options Additional options, such as the name or desired parallelism of the PCollection\n    * @return A PCollection that contains the given values\n    */\n+\n+\n   <T> PCollection<T> create(Iterable<T> contents, PType<T> ptype, CreateOptions options);\n \n   /**\n@@ -178,6 +205,7 @@ public interface Pipeline {\n    * @param ptype The PTableType of the PTable\n    * @return A PTable that contains the given values\n    */\n+\n   <K, V> PTable<K, V> create(Iterable<Pair<K, V>> contents, PTableType<K, V> ptype);\n \n   /**\n@@ -189,8 +217,10 @@ public interface Pipeline {\n    * @param options Additional options, such as the name or desired parallelism of the PTable\n    * @return A PTable that contains the given values\n    */\n+\n   <K, V> PTable<K, V> create(Iterable<Pair<K, V>> contents, PTableType<K, V> ptype, CreateOptions options);\n \n+\n   <S> PCollection<S> union(List<PCollection<S>> collections);\n \n   <K, V> PTable<K, V> unionTables(List<PTable<K, V>> tables);\n@@ -204,12 +234,16 @@ public interface Pipeline {\n    * @param <Output> The return type of the PipelineCallable\n    * @return The result of executing the PipelineCallable\n    */\n+\n+\n   <Output> Output sequentialDo(PipelineCallable<Output> pipelineCallable);\n \n   /**\n    * Constructs and executes a series of MapReduce jobs in order to write data\n    * to the output targets.\n    */\n+\n+\n   PipelineResult run();\n \n   /**\n@@ -218,6 +252,8 @@ public interface Pipeline {\n    * job execution.\n    * @return\n    */\n+\n+\n   PipelineExecution runAsync();\n   \n   /**\n@@ -225,26 +261,36 @@ public interface Pipeline {\n    * intermediate data files that were created in this run or previous calls to\n    * {@code run}.\n    */\n+\n+\n   PipelineResult done();\n \n   /**\n   * Cleans up any artifacts created as a result of {@link #run() running} the pipeline.\n   * @param force forces the cleanup even if all targets of the pipeline have not been completed.\n   */\n+\n+\n   void cleanup(boolean force);\n \n   /**\n    * A convenience method for reading a text file.\n    */\n+\n+\n   PCollection<String> readTextFile(String pathName);\n \n   /**\n    * A convenience method for writing a text file.\n    */\n+\n+\n   <T> void writeTextFile(PCollection<T> collection, String pathName);\n \n   /**\n    * Turn on debug logging for jobs that are run from this pipeline.\n    */\n+\n+\n   void enableDebug();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_random/10/Pipeline.java\nindex cd4ce033b88..40f59a5ccdb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_random/10/Pipeline.java\n@@ -111,8 +111,8 @@ public interface Pipeline {\n   * @param writeMode\n   *          The strategy to use for handling existing outputs\n   */\n- void write(PCollection<?> collection, Target target,\n-     Target.WriteMode writeMode);\n+  void write(PCollection<?> collection, Target target,\n+                         Target.WriteMode writeMode);\n \n  /**\n    * Create the given PCollection and read the data it contains into the\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "'Target' has incorrect indentation level 5, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_three_grams/10/Pipeline.java\nindex cd4ce033b88..da4ffe3bf1b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/10/Pipeline.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_three_grams/10/Pipeline.java\n@@ -111,7 +111,7 @@ public interface Pipeline {\n   * @param writeMode\n   *          The strategy to use for handling existing outputs\n   */\n- void write(PCollection<?> collection, Target target,\n+  void write(PCollection<?> collection, Target target,\n      Target.WriteMode writeMode);\n \n  /**\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_three_grams"
    ]
}