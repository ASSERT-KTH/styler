{
    "project_name": "wso2-attic-commons",
    "error_id": "245",
    "information": {
        "errors": [
            {
                "line": "171",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 128).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t\t\tStringWriter sw = new StringWriter();\n\t\t\tt.printStackTrace(new PrintWriter(sw));\n\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n                    _activityInfo.o, sw.getBuffer().toString());\n\t\t\t_context.completeExtensionActivity(cid, fault);\n\t\t\thasCompleted = true;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/245/ExtensionContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/245/ExtensionContextImpl.java\nindex 34ae42072e4..6e72e9e1d52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/245/ExtensionContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/245/ExtensionContextImpl.java\n@@ -168,8 +168,8 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t\tif (!hasCompleted) {\n \t\t\tStringWriter sw = new StringWriter();\n \t\t\tt.printStackTrace(new PrintWriter(sw));\n-\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n-                    _activityInfo.o, sw.getBuffer().toString());\n+   FaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n+   _activityInfo.o, sw.getBuffer().toString());\n \t\t\t_context.completeExtensionActivity(cid, fault);\n \t\t\thasCompleted = true;\n \t\t} else {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/245/ExtensionContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/245/ExtensionContextImpl.java\nindex 34ae42072e4..e7fe2c571a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/245/ExtensionContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/245/ExtensionContextImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.runtime;\n \n import org.apache.commons.logging.Log;\n@@ -44,234 +45,234 @@ import java.net.URI;\n  * @author Tammo van Lessen (University of Stuttgart)\n  */\n public class ExtensionContextImpl implements ExtensionContext {\n-\tprivate static final Log __log = LogFactory.getLog(ExtensionContextImpl.class);\n-\n-\tprivate BpelRuntimeContext _context;\n-\tprivate ScopeFrame _scopeFrame;\n-\tprivate ActivityInfo _activityInfo;\n-\n-\tprivate boolean hasCompleted = false;\n+  private static final Log __log = LogFactory.getLog(ExtensionContextImpl.class);\n \n-    private String[] _correlationValues;\n-    private String _correlatorId;\n+  private BpelRuntimeContext _context;\n+  private ScopeFrame _scopeFrame;\n+  private ActivityInfo _activityInfo;\n \n-    private static final long serialVersionUID = -89894857418738011L;\n+  private boolean hasCompleted = false;\n \n-    public ExtensionContextImpl(ActivityInfo activityInfo, ScopeFrame scopeFrame, BpelRuntimeContext context) {\n-\t\t_activityInfo = activityInfo;\n-\t\t_context = context;\n-\t\t_scopeFrame = scopeFrame;\n-\t}\n+  private String[] _correlationValues;\n+  private String _correlatorId;\n \n-    public void setBpelRuntimeContext(BpelRuntimeContext context) {\n-        this._context = context;\n-    }\n+  private static final long serialVersionUID = -89894857418738011L;\n \n-\tpublic Long getProcessId() {\n-\t\treturn _context.getPid();\n-\t}\n-\n-\tpublic Map<String, OScope.Variable> getVisibleVariables() throws FaultException {\n-\t\tMap<String, OScope.Variable> visVars = new HashMap<String, OScope.Variable>();\n-\n-        OActivity current = _scopeFrame.oscope;\n-        while (current != null) {\n-            if (current instanceof OScope) {\n-                for (String varName : ((OScope)current).variables.keySet()) {\n-                \tif (!visVars.containsKey(varName)) {\n-                \t\tvisVars.put(varName, ((OScope)current).variables.get(varName));\n-                \t}\n-                }\n-            }\n-            current = current.getParent();\n-        }\n+  public ExtensionContextImpl(ActivityInfo activityInfo, ScopeFrame scopeFrame, BpelRuntimeContext context) {\n+    _activityInfo = activityInfo;\n+    _context = context;\n+    _scopeFrame = scopeFrame;\n+  }\n \n-\t\treturn visVars;\n-\t}\n-\n-\tpublic String readMessageProperty(OScope.Variable variable, OProcess.OProperty property)\n-\t\t\tthrows FaultException {\n-\t\tVariableInstance vi = _scopeFrame.resolve(variable);\n-\t\treturn _context.readProperty(vi, property);\n-\t}\n-\n-\tpublic Node readVariable(OScope.Variable variable)\n-\t\t\tthrows FaultException {\n-\t\tVariableInstance vi = _scopeFrame.resolve(variable);\n-\t\treturn _context.fetchVariableData(vi, _scopeFrame, true);\n-\t}\n-\n-\tpublic void writeVariable(String variableName, Node value)\n-\t\t\tthrows FaultException {\n-\t\tOScope.Variable var = getVisibleVariable(variableName);\n-\t\tif (var == null) {\n-\t\t\tthrow new RuntimeException(\"Variable '\" + variableName + \"' not visible.\");\n-\t\t}\n-\t\twriteVariable(var, value);\n-\t}\n-\n-\tpublic Node readVariable(String variableName) throws FaultException {\n-\t\tOScope.Variable var = getVisibleVariable(variableName);\n-\t\tif (var == null) {\n-\t\t\tthrow new RuntimeException(\"Variable '\" + variableName + \"' not visible.\");\n-\t\t}\n-\n-\t\treturn readVariable(var);\n-\t}\n-\n-\tpublic void writeVariable(OScope.Variable variable, Node value)\n-\t\t\tthrows FaultException {\n-\t\tVariableInstance vi = _scopeFrame.resolve(variable);\n-\t\t//_context.commitChanges(vi, _scopeFrame, value);\n-\t\t_context.initializeVariable(vi, _scopeFrame, value);\n-        VariableModificationEvent vme = new VariableModificationEvent(variable.name);\n-        vme.setNewValue(value);\n-        sendEvent(vme);\n-\t}\n-\n-\tpublic OScope.Variable getVisibleVariable(String varName) {\n-    \treturn _scopeFrame.oscope.getVisibleVariable(varName);\n-    }\n+  public void setBpelRuntimeContext(BpelRuntimeContext context) {\n+    this._context = context;\n+  }\n \n-\tpublic boolean isVariableVisible(String varName) {\n-\t\treturn _scopeFrame.oscope.getVisibleVariable(varName) != null;\n-\t}\n+  public Long getProcessId() {\n+    return _context.getPid();\n+  }\n \n-\tpublic String getActivityName() {\n-\t\treturn _activityInfo.o.name;\n-\t}\n+  public Map<String, OScope.Variable> getVisibleVariables() throws FaultException {\n+    Map<String, OScope.Variable> visVars = new HashMap<String, OScope.Variable>();\n \n-\tpublic OActivity getOActivity() {\n-\t\treturn _activityInfo.o;\n-\t}\n-\n-\tpublic void sendEvent(ScopeEvent event) {\n-        if (event.getLineNo() == -1 && _activityInfo.o.debugInfo != null) {\n-        \tevent.setLineNo(_activityInfo.o.debugInfo.startLine);\n+    OActivity current = _scopeFrame.oscope;\n+    while (current != null) {\n+      if (current instanceof OScope) {\n+        for (String varName : ((OScope) current).variables.keySet()) {\n+          if (!visVars.containsKey(varName)) {\n+            visVars.put(varName, ((OScope) current).variables.get(varName));\n+          }\n         }\n-        _scopeFrame.fillEventInfo(event);\n-        _context.sendEvent(event);\n-\t}\n-\n-\tpublic void complete(String cid) {\n-\t\tif (!hasCompleted) {\n-\t\t\t_context.completeExtensionActivity(cid, null);\n-\t\t\thasCompleted = true;\n-\t\t} else {\n-\t\t\tif (__log.isWarnEnabled()) {\n-\t\t\t\t__log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void completeWithFault(String cid, Throwable t) {\n-\t\tif (!hasCompleted) {\n-\t\t\tStringWriter sw = new StringWriter();\n-\t\t\tt.printStackTrace(new PrintWriter(sw));\n-\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n-                    _activityInfo.o, sw.getBuffer().toString());\n-\t\t\t_context.completeExtensionActivity(cid, fault);\n-\t\t\thasCompleted = true;\n-\t\t} else {\n-\t\t\tif (__log.isWarnEnabled()) {\n-\t\t\t\t__log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void completeWithFault(String cid, FaultException ex) {\n-\t\tif (!hasCompleted) {\n-\t\t\tFaultData fault = new FaultData(ex.getQName(), _activityInfo.o, ex.getMessage());\n-\t\t\t_context.completeExtensionActivity(cid, fault);\n-\t\t\thasCompleted = true;\n-\t\t} else {\n-\t\t\tif (__log.isWarnEnabled()) {\n-\t\t\t\t__log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-\n-\tpublic BpelRuntimeContext getInternalInstance() {\n-\t\treturn _context;\n-\t}\n-\n-\tpublic URI getDUDir() {\n-\t\treturn _context.getBaseResourceURI();\n-\t}\n-\n-\tpublic void printToConsole(String msg) {\n-\t\tLogFactory.getLog(\"org.apache.ode.extension.Console\").info(msg);\n-\t}\n-\n-    public PartnerLinkInstance getPartnerLinkInstance(String partnerLinkName) throws FaultException {\n-\t\tOPartnerLink plink = getVisiblePartnerLink(partnerLinkName);\n-\t\tif (plink == null) {\n-\t\t\tthrow new RuntimeException(\"PartnerLink '\" + partnerLinkName + \"' not visible.\");\n-\t\t}\n-\n-\t\treturn getPartnerLinkInstance(plink);\n-\t}\n-\n-    public OPartnerLink getVisiblePartnerLink(String partnerLinkName) {\n-    \treturn _scopeFrame.oscope.getVisiblePartnerLink(partnerLinkName);\n+      }\n+      current = current.getParent();\n     }\n \n-\tpublic boolean isPartnerLinkVisible(String partnerLinkName) {\n-\t\treturn _scopeFrame.oscope.getVisiblePartnerLink(partnerLinkName) != null;\n-\t}\n-\n-    public PartnerLinkInstance getPartnerLinkInstance(OPartnerLink partnerLink) throws FaultException {\n-\t\treturn _scopeFrame.resolve(partnerLink);\n-\t}\n-\n-    public OProcess getProcessModel() {\n-        return _context.getProcessModel();\n+    return visVars;\n+  }\n+\n+  public String readMessageProperty(OScope.Variable variable, OProcess.OProperty property)\n+    throws FaultException {\n+    VariableInstance vi = _scopeFrame.resolve(variable);\n+    return _context.readProperty(vi, property);\n+  }\n+\n+  public Node readVariable(OScope.Variable variable)\n+    throws FaultException {\n+    VariableInstance vi = _scopeFrame.resolve(variable);\n+    return _context.fetchVariableData(vi, _scopeFrame, true);\n+  }\n+\n+  public void writeVariable(String variableName, Node value)\n+    throws FaultException {\n+    OScope.Variable var = getVisibleVariable(variableName);\n+    if (var == null) {\n+      throw new RuntimeException(\"Variable '\" + variableName + \"' not visible.\");\n     }\n+    writeVariable(var, value);\n+  }\n \n-    /**\n-     * Set correlation values in order to find a route\n-     *\n-     * @param values values\n-     */\n-    public void setCorrelationValues(String[] values) {\n-        this._correlationValues = values;\n+  public Node readVariable(String variableName) throws FaultException {\n+    OScope.Variable var = getVisibleVariable(variableName);\n+    if (var == null) {\n+      throw new RuntimeException(\"Variable '\" + variableName + \"' not visible.\");\n     }\n \n-    public String[] getCorrelationValues() {\n-        return _correlationValues;\n+    return readVariable(var);\n+  }\n+\n+  public void writeVariable(OScope.Variable variable, Node value)\n+    throws FaultException {\n+    VariableInstance vi = _scopeFrame.resolve(variable);\n+    //_context.commitChanges(vi, _scopeFrame, value);\n+    _context.initializeVariable(vi, _scopeFrame, value);\n+    VariableModificationEvent vme = new VariableModificationEvent(variable.name);\n+    vme.setNewValue(value);\n+    sendEvent(vme);\n+  }\n+\n+  public OScope.Variable getVisibleVariable(String varName) {\n+    return _scopeFrame.oscope.getVisibleVariable(varName);\n+  }\n+\n+  public boolean isVariableVisible(String varName) {\n+    return _scopeFrame.oscope.getVisibleVariable(varName) != null;\n+  }\n+\n+  public String getActivityName() {\n+    return _activityInfo.o.name;\n+  }\n+\n+  public OActivity getOActivity() {\n+    return _activityInfo.o;\n+  }\n+\n+  public void sendEvent(ScopeEvent event) {\n+    if (event.getLineNo() == -1 && _activityInfo.o.debugInfo != null) {\n+      event.setLineNo(_activityInfo.o.debugInfo.startLine);\n     }\n-\n-    public String getCorrelatorId() {\n-        return _correlatorId;\n+    _scopeFrame.fillEventInfo(event);\n+    _context.sendEvent(event);\n+  }\n+\n+  public void complete(String cid) {\n+    if (!hasCompleted) {\n+      _context.completeExtensionActivity(cid, null);\n+      hasCompleted = true;\n+    } else {\n+      if (__log.isWarnEnabled()) {\n+        __log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n+      }\n     }\n-\n-    public void setCorrelatorId(String correlatorId) {\n-        this._correlatorId = correlatorId;\n+  }\n+\n+  public void completeWithFault(String cid, Throwable t) {\n+    if (!hasCompleted) {\n+      StringWriter sw = new StringWriter();\n+      t.printStackTrace(new PrintWriter(sw));\n+      FaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n+        _activityInfo.o, sw.getBuffer().toString());\n+      _context.completeExtensionActivity(cid, fault);\n+      hasCompleted = true;\n+    } else {\n+      if (__log.isWarnEnabled()) {\n+        __log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n+      }\n+    }\n+  }\n+\n+  public void completeWithFault(String cid, FaultException ex) {\n+    if (!hasCompleted) {\n+      FaultData fault = new FaultData(ex.getQName(), _activityInfo.o, ex.getMessage());\n+      _context.completeExtensionActivity(cid, fault);\n+      hasCompleted = true;\n+    } else {\n+      if (__log.isWarnEnabled()) {\n+        __log.warn(\"Activity '\" + _activityInfo.o.name + \"' has already been completed.\");\n+      }\n     }\n \n-    public Node getPartData(Element element, String variable) {\n-        OScope.Variable var = getVisibleVariable(variable);\n-        OMessageVarType varType = null;\n-        if (var.type instanceof OMessageVarType) {\n-            varType = (OMessageVarType) var.type;\n-        }\n+  }\n \n-        OMessageVarType.Part part = null;\n-        if (varType != null && varType.parts.size() > 0) {\n-            part = (OMessageVarType.Part) (varType.parts.values().toArray()[0]);\n-        }\n-        if (part == null) {\n-            return null;\n-        }\n-        return _context.getPartData(element, part);\n+  public BpelRuntimeContext getInternalInstance() {\n+    return _context;\n+  }\n+\n+  public URI getDUDir() {\n+    return _context.getBaseResourceURI();\n+  }\n+\n+  public void printToConsole(String msg) {\n+    LogFactory.getLog(\"org.apache.ode.extension.Console\").info(msg);\n+  }\n+\n+  public PartnerLinkInstance getPartnerLinkInstance(String partnerLinkName) throws FaultException {\n+    OPartnerLink plink = getVisiblePartnerLink(partnerLinkName);\n+    if (plink == null) {\n+      throw new RuntimeException(\"PartnerLink '\" + partnerLinkName + \"' not visible.\");\n     }\n \n-    public TerminationChannel getTerminationChannel() {\n-        return _activityInfo.self;\n+    return getPartnerLinkInstance(plink);\n+  }\n+\n+  public OPartnerLink getVisiblePartnerLink(String partnerLinkName) {\n+    return _scopeFrame.oscope.getVisiblePartnerLink(partnerLinkName);\n+  }\n+\n+  public boolean isPartnerLinkVisible(String partnerLinkName) {\n+    return _scopeFrame.oscope.getVisiblePartnerLink(partnerLinkName) != null;\n+  }\n+\n+  public PartnerLinkInstance getPartnerLinkInstance(OPartnerLink partnerLink) throws FaultException {\n+    return _scopeFrame.resolve(partnerLink);\n+  }\n+\n+  public OProcess getProcessModel() {\n+    return _context.getProcessModel();\n+  }\n+\n+  /**\n+   * Set correlation values in order to find a route\n+   *\n+   * @param values values\n+   */\n+  public void setCorrelationValues(String[] values) {\n+    this._correlationValues = values;\n+  }\n+\n+  public String[] getCorrelationValues() {\n+    return _correlationValues;\n+  }\n+\n+  public String getCorrelatorId() {\n+    return _correlatorId;\n+  }\n+\n+  public void setCorrelatorId(String correlatorId) {\n+    this._correlatorId = correlatorId;\n+  }\n+\n+  public Node getPartData(Element element, String variable) {\n+    OScope.Variable var = getVisibleVariable(variable);\n+    OMessageVarType varType = null;\n+    if (var.type instanceof OMessageVarType) {\n+      varType = (OMessageVarType) var.type;\n     }\n \n-    public ParentScopeChannel getParentScopeChannel() {\n-        return _activityInfo.parent;\n+    OMessageVarType.Part part = null;\n+    if (varType != null && varType.parts.size() > 0) {\n+      part = (OMessageVarType.Part) (varType.parts.values().toArray()[0]);\n+    }\n+    if (part == null) {\n+      return null;\n     }\n+    return _context.getPartData(element, part);\n+  }\n+\n+  public TerminationChannel getTerminationChannel() {\n+    return _activityInfo.self;\n+  }\n+\n+  public ParentScopeChannel getParentScopeChannel() {\n+    return _activityInfo.parent;\n+  }\n }\n",
            "diff_size": 345
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/245/ExtensionContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/245/ExtensionContextImpl.java\nindex 34ae42072e4..9fdf89e34b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/245/ExtensionContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/245/ExtensionContextImpl.java\n@@ -51,14 +51,13 @@ public class ExtensionContextImpl implements ExtensionContext {\n \tprivate ActivityInfo _activityInfo;\n \n \tprivate boolean hasCompleted = false;\n-\n-    private String[] _correlationValues;\n+private String[] _correlationValues;\n     private String _correlatorId;\n \n     private static final long serialVersionUID = -89894857418738011L;\n \n     public ExtensionContextImpl(ActivityInfo activityInfo, ScopeFrame scopeFrame, BpelRuntimeContext context) {\n-\t\t_activityInfo = activityInfo;\n+    _activityInfo = activityInfo;\n \t\t_context = context;\n \t\t_scopeFrame = scopeFrame;\n \t}\n@@ -67,14 +66,13 @@ public class ExtensionContextImpl implements ExtensionContext {\n         this._context = context;\n     }\n \n-\tpublic Long getProcessId() {\n+public Long getProcessId() {\n \t\treturn _context.getPid();\n \t}\n \n \tpublic Map<String, OScope.Variable> getVisibleVariables() throws FaultException {\n \t\tMap<String, OScope.Variable> visVars = new HashMap<String, OScope.Variable>();\n-\n-        OActivity current = _scopeFrame.oscope;\n+OActivity current = _scopeFrame.oscope;\n         while (current != null) {\n             if (current instanceof OScope) {\n                 for (String varName : ((OScope)current).variables.keySet()) {\n@@ -85,8 +83,7 @@ public class ExtensionContextImpl implements ExtensionContext {\n             }\n             current = current.getParent();\n         }\n-\n-\t\treturn visVars;\n+return visVars;\n \t}\n \n \tpublic String readMessageProperty(OScope.Variable variable, OProcess.OProperty property)\n@@ -146,7 +143,7 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t}\n \n \tpublic void sendEvent(ScopeEvent event) {\n-        if (event.getLineNo() == -1 && _activityInfo.o.debugInfo != null) {\n+    if (event.getLineNo() == -1 && _activityInfo.o.debugInfo != null) {\n         \tevent.setLineNo(_activityInfo.o.debugInfo.startLine);\n         }\n         _scopeFrame.fillEventInfo(event);\n@@ -168,9 +165,8 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t\tif (!hasCompleted) {\n \t\t\tStringWriter sw = new StringWriter();\n \t\t\tt.printStackTrace(new PrintWriter(sw));\n-\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n-                    _activityInfo.o, sw.getBuffer().toString());\n-\t\t\t_context.completeExtensionActivity(cid, fault);\n+\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"), _activityInfo.o, sw.getBuffer().toString());\n+_context.completeExtensionActivity(cid, fault);\n \t\t\thasCompleted = true;\n \t\t} else {\n \t\t\tif (__log.isWarnEnabled()) {\n@@ -274,4 +270,4 @@ public class ExtensionContextImpl implements ExtensionContext {\n     public ParentScopeChannel getParentScopeChannel() {\n         return _activityInfo.parent;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/245/ExtensionContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/245/ExtensionContextImpl.java\nindex 34ae42072e4..5b024bb0728 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/245/ExtensionContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/245/ExtensionContextImpl.java\n@@ -169,7 +169,7 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t\t\tStringWriter sw = new StringWriter();\n \t\t\tt.printStackTrace(new PrintWriter(sw));\n \t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n-                    _activityInfo.o, sw.getBuffer().toString());\n+      _activityInfo.o, sw.getBuffer().toString());\n \t\t\t_context.completeExtensionActivity(cid, fault);\n \t\t\thasCompleted = true;\n \t\t} else {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/245/ExtensionContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/245/ExtensionContextImpl.java\nindex 34ae42072e4..6e72e9e1d52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/245/ExtensionContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/245/ExtensionContextImpl.java\n@@ -168,8 +168,8 @@ public class ExtensionContextImpl implements ExtensionContext {\n \t\tif (!hasCompleted) {\n \t\t\tStringWriter sw = new StringWriter();\n \t\t\tt.printStackTrace(new PrintWriter(sw));\n-\t\t\tFaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n-                    _activityInfo.o, sw.getBuffer().toString());\n+   FaultData fault = new FaultData(new QName(Namespaces.WSBPEL2_0_FINAL_EXEC, \"subLanguageExecutionFault\"),\n+   _activityInfo.o, sw.getBuffer().toString());\n \t\t\t_context.completeExtensionActivity(cid, fault);\n \t\t\thasCompleted = true;\n \t\t} else {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}