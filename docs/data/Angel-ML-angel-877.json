{
    "project_name": "Angel-ML-angel",
    "error_id": "877",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/877/NeighborsAttrsElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/877/NeighborsAttrsElement.java\nindex 83b5a784206..1c270fbcddb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/877/NeighborsAttrsElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/877/NeighborsAttrsElement.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.psf.triangle;\n \n import com.tencent.angel.ps.storage.vector.element.IElement;\n@@ -25,101 +26,101 @@ import java.io.IOException;\n \n public class NeighborsAttrsElement implements IElement {\n \n-    private long[] neighborIds;\n-    private byte[] attrs;\n-\n-    public NeighborsAttrsElement() {\n-        this(null, null);\n+  private long[] neighborIds;\n+  private byte[] attrs;\n+\n+  public NeighborsAttrsElement() {\n+    this(null, null);\n+  }\n+\n+  public NeighborsAttrsElement(long[] neighborIds, byte[] attrs) {\n+    assert (neighborIds.length == attrs.length);\n+    this.neighborIds = neighborIds;\n+    this.attrs = attrs;\n+  }\n+\n+  public long[] getNeighborIds() {\n+    return neighborIds;\n+  }\n+\n+  public byte[] getAttrs() {\n+    return attrs;\n+  }\n+\n+  public int getNumNodes() {\n+    return neighborIds.length;\n+  }\n+\n+  @Override\n+  public Object deepClone() {\n+    int len = neighborIds.length;\n+    long[] nodeIds = new long[len];\n+    byte[] newAttrs = new byte[len];\n+    System.arraycopy(neighborIds, 0, nodeIds, 0, len);\n+    System.arraycopy(attrs, 0, newAttrs, 0, len);\n+    return new NeighborsAttrsElement(nodeIds, newAttrs);\n+  }\n+\n+  @Override\n+  public void serialize(ByteBuf output) {\n+    int len = neighborIds.length;\n+    output.writeInt(len);\n+    for (int i = 0; i < len; i++) {\n+      output.writeLong(neighborIds[i]);\n     }\n-\n-    public NeighborsAttrsElement(long[] neighborIds, byte[] attrs) {\n-        assert (neighborIds.length == attrs.length);\n-        this.neighborIds = neighborIds;\n-        this.attrs = attrs;\n+    for (int i = 0; i < len; i++) {\n+      output.writeByte(attrs[i]);\n     }\n \n-    public long[] getNeighborIds() {\n-        return neighborIds;\n-    }\n+  }\n \n-    public byte[] getAttrs() {\n-        return attrs;\n-    }\n+  @Override\n+  public void deserialize(ByteBuf input) {\n+    int len = input.readInt();\n+    neighborIds = new long[len];\n+    attrs = new byte[len];\n \n-    public int getNumNodes() {\n-        return neighborIds.length;\n+    for (int i = 0; i < len; i++) {\n+      neighborIds[i] = input.readLong();\n     }\n-\n-    @Override\n-    public Object deepClone() {\n-        int len = neighborIds.length;\n-        long[] nodeIds = new long[len];\n-        byte[] newAttrs = new byte[len];\n-        System.arraycopy(neighborIds, 0, nodeIds, 0, len);\n-        System.arraycopy(attrs, 0, newAttrs, 0, len);\n-        return new NeighborsAttrsElement(nodeIds, newAttrs);\n+    for (int i = 0; i < len; i++) {\n+      attrs[i] = input.readByte();\n     }\n-\n-    @Override\n-    public void serialize(ByteBuf output) {\n-        int len = neighborIds.length;\n-        output.writeInt(len);\n-        for (int i = 0; i < len; i++) {\n-            output.writeLong(neighborIds[i]);\n-        }\n-        for (int i = 0; i < len; i++) {\n-            output.writeByte(attrs[i]);\n-        }\n-\n+  }\n+\n+  @Override\n+  public int bufferLen() {\n+    return Integer.BYTES + neighborIds.length * Long.BYTES + attrs.length * Byte.BYTES;\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream output) throws IOException {\n+    int len = neighborIds.length;\n+    output.writeInt(len);\n+    for (int i = 0; i < len; i++) {\n+      output.writeLong(neighborIds[i]);\n     }\n-\n-    @Override\n-    public void deserialize(ByteBuf input) {\n-        int len = input.readInt();\n-        neighborIds = new long[len];\n-        attrs = new byte[len];\n-\n-        for (int i = 0; i < len; i++) {\n-            neighborIds[i] = input.readLong();\n-        }\n-        for (int i = 0; i < len; i++) {\n-            attrs[i] = input.readByte();\n-        }\n+    for (int i = 0; i < len; i++) {\n+      output.writeByte(attrs[i]);\n     }\n+  }\n \n-    @Override\n-    public int bufferLen() {\n-        return Integer.BYTES + neighborIds.length * Long.BYTES + attrs.length * Byte.BYTES;\n-    }\n+  @Override\n+  public void deserialize(DataInputStream input) throws IOException {\n+    int len = input.readInt();\n+    neighborIds = new long[len];\n+    attrs = new byte[len];\n \n-    @Override\n-    public void serialize(DataOutputStream output) throws IOException {\n-        int len = neighborIds.length;\n-        output.writeInt(len);\n-        for (int i = 0; i < len; i++) {\n-            output.writeLong(neighborIds[i]);\n-        }\n-        for (int i = 0; i < len; i++) {\n-            output.writeByte(attrs[i]);\n-        }\n+    for (int i = 0; i < len; i++) {\n+      neighborIds[i] = input.readLong();\n     }\n-\n-    @Override\n-    public void deserialize(DataInputStream input) throws IOException {\n-        int len = input.readInt();\n-        neighborIds = new long[len];\n-        attrs = new byte[len];\n-\n-        for (int i = 0; i < len; i++) {\n-            neighborIds[i] = input.readLong();\n-        }\n-        for (int i = 0; i < len; i++) {\n-            attrs[i] = input.readByte();\n-        }\n+    for (int i = 0; i < len; i++) {\n+      attrs[i] = input.readByte();\n     }\n+  }\n \n-    @Override\n-    public int dataLen() {\n-        return bufferLen();\n-    }\n+  @Override\n+  public int dataLen() {\n+    return bufferLen();\n+  }\n }\n",
            "diff_size": 126
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/877/NeighborsAttrsElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/877/NeighborsAttrsElement.java\nindex 83b5a784206..673a959631f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/877/NeighborsAttrsElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/877/NeighborsAttrsElement.java\n@@ -24,35 +24,34 @@ import java.io.DataOutputStream;\n import java.io.IOException;\n \n public class NeighborsAttrsElement implements IElement {\n-\n-    private long[] neighborIds;\n+  private long[] neighborIds;\n     private byte[] attrs;\n \n     public NeighborsAttrsElement() {\n-        this(null, null);\n+  this(null, null);\n     }\n \n     public NeighborsAttrsElement(long[] neighborIds, byte[] attrs) {\n-        assert (neighborIds.length == attrs.length);\n+  assert(neighborIds.length == attrs.length);\n         this.neighborIds = neighborIds;\n         this.attrs = attrs;\n-    }\n+  }\n \n     public long[] getNeighborIds() {\n-        return neighborIds;\n-    }\n+  return neighborIds;\n+  }\n \n     public byte[] getAttrs() {\n-        return attrs;\n-    }\n+  return attrs;\n+  }\n \n     public int getNumNodes() {\n-        return neighborIds.length;\n+  return neighborIds.length;\n     }\n \n     @Override\n     public Object deepClone() {\n-        int len = neighborIds.length;\n+  int len = neighborIds.length;\n         long[] nodeIds = new long[len];\n         byte[] newAttrs = new byte[len];\n         System.arraycopy(neighborIds, 0, nodeIds, 0, len);\n@@ -62,64 +61,63 @@ public class NeighborsAttrsElement implements IElement {\n \n     @Override\n     public void serialize(ByteBuf output) {\n-        int len = neighborIds.length;\n+  int len = neighborIds.length;\n         output.writeInt(len);\n         for (int i = 0; i < len; i++) {\n-            output.writeLong(neighborIds[i]);\n-        }\n+  output.writeLong(neighborIds[i]);\n+  }\n         for (int i = 0; i < len; i++) {\n-            output.writeByte(attrs[i]);\n+  output.writeByte(attrs[i]);\n         }\n-\n-    }\n+  }\n \n     @Override\n     public void deserialize(ByteBuf input) {\n-        int len = input.readInt();\n+  int len = input.readInt();\n         neighborIds = new long[len];\n         attrs = new byte[len];\n \n         for (int i = 0; i < len; i++) {\n-            neighborIds[i] = input.readLong();\n-        }\n+  neighborIds[i] = input.readLong();\n+  }\n         for (int i = 0; i < len; i++) {\n-            attrs[i] = input.readByte();\n+  attrs[i] = input.readByte();\n         }\n-    }\n+  }\n \n     @Override\n     public int bufferLen() {\n-        return Integer.BYTES + neighborIds.length * Long.BYTES + attrs.length * Byte.BYTES;\n+  return Integer.BYTES + neighborIds.length * Long.BYTES + attrs.length * Byte.BYTES;\n     }\n \n     @Override\n     public void serialize(DataOutputStream output) throws IOException {\n-        int len = neighborIds.length;\n+  int len = neighborIds.length;\n         output.writeInt(len);\n         for (int i = 0; i < len; i++) {\n-            output.writeLong(neighborIds[i]);\n-        }\n+  output.writeLong(neighborIds[i]);\n+  }\n         for (int i = 0; i < len; i++) {\n-            output.writeByte(attrs[i]);\n+  output.writeByte(attrs[i]);\n         }\n-    }\n+  }\n \n     @Override\n     public void deserialize(DataInputStream input) throws IOException {\n-        int len = input.readInt();\n+  int len = input.readInt();\n         neighborIds = new long[len];\n         attrs = new byte[len];\n \n         for (int i = 0; i < len; i++) {\n-            neighborIds[i] = input.readLong();\n-        }\n+  neighborIds[i] = input.readLong();\n+  }\n         for (int i = 0; i < len; i++) {\n-            attrs[i] = input.readByte();\n+  attrs[i] = input.readByte();\n         }\n-    }\n+  }\n \n     @Override\n     public int dataLen() {\n-        return bufferLen();\n+  return bufferLen();\n     }\n-}\n+  }\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/877/NeighborsAttrsElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/877/NeighborsAttrsElement.java\nindex 83b5a784206..85b8f67d3fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/877/NeighborsAttrsElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/877/NeighborsAttrsElement.java\n@@ -18,108 +18,109 @@ package com.tencent.angel.graph.psf.triangle;\n \n import com.tencent.angel.ps.storage.vector.element.IElement;\n import io.netty.buffer.ByteBuf;\n-\n import java.io.DataInputStream;\n import java.io.DataOutputStream;\n import java.io.IOException;\n \n public class NeighborsAttrsElement implements IElement {\n \n-    private long[] neighborIds;\n-    private byte[] attrs;\n-\n-    public NeighborsAttrsElement() {\n-        this(null, null);\n-    }\n-\n-    public NeighborsAttrsElement(long[] neighborIds, byte[] attrs) {\n-        assert (neighborIds.length == attrs.length);\n-        this.neighborIds = neighborIds;\n-        this.attrs = attrs;\n-    }\n-\n-    public long[] getNeighborIds() {\n-        return neighborIds;\n+  private long[] neighborIds;\n+  private byte[] attrs;\n+\n+  public NeighborsAttrsElement() {\n+    this(null, null);\n+  }\n+\n+  public NeighborsAttrsElement(long[] neighborIds, byte[] attrs) {\n+    assert (neighborIds.length == attrs.length);\n+    this.neighborIds = neighborIds;\n+    this.attrs = attrs;\n+  }\n+\n+  public long[] getNeighborIds() {\n+    return neighborIds;\n+  }\n+\n+  public byte[] getAttrs() {\n+    return attrs;\n+  }\n+\n+  public int getNumNodes() {\n+    return neighborIds.length;\n+  }\n+\n+  @Override\n+  public Object deepClone() {\n+    int len = neighborIds.length;\n+    long[] nodeIds = new long[len];\n+    byte[] newAttrs = new byte[len];\n+    System.arraycopy(neighborIds, 0, nodeIds, 0, len);\n+    System.arraycopy(attrs, 0, newAttrs, 0, len);\n+    return new NeighborsAttrsElement(nodeIds, newAttrs);\n+  }\n+\n+  @Override\n+  public void serialize(ByteBuf output) {\n+    int len = neighborIds.length;\n+    output.writeInt(len);\n+    for (int i = 0; i < len; i++) {\n+      output.writeLong(neighborIds[i]);\n     }\n \n-    public byte[] getAttrs() {\n-        return attrs;\n+    for (int i = 0; i < len; i++) {\n+      output.writeByte(attrs[i]);\n     }\n-\n-    public int getNumNodes() {\n-        return neighborIds.length;\n+  }\n+\n+  @Override\n+  public void deserialize(ByteBuf input) {\n+    int len = input.readInt();\n+    neighborIds = new long[len];\n+    attrs = new byte[len];\n+    for (int i = 0; i < len; i++) {\n+      neighborIds[i] = input.readLong();\n     }\n \n-    @Override\n-    public Object deepClone() {\n-        int len = neighborIds.length;\n-        long[] nodeIds = new long[len];\n-        byte[] newAttrs = new byte[len];\n-        System.arraycopy(neighborIds, 0, nodeIds, 0, len);\n-        System.arraycopy(attrs, 0, newAttrs, 0, len);\n-        return new NeighborsAttrsElement(nodeIds, newAttrs);\n+    for (int i = 0; i < len; i++) {\n+      attrs[i] = input.readByte();\n     }\n-\n-    @Override\n-    public void serialize(ByteBuf output) {\n-        int len = neighborIds.length;\n-        output.writeInt(len);\n-        for (int i = 0; i < len; i++) {\n-            output.writeLong(neighborIds[i]);\n-        }\n-        for (int i = 0; i < len; i++) {\n-            output.writeByte(attrs[i]);\n-        }\n-\n+  }\n+\n+  @Override\n+  public int bufferLen() {\n+    return Integer.BYTES + neighborIds.length * Long.BYTES + attrs.length * Byte.BYTES;\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream output) throws IOException {\n+    int len = neighborIds.length;\n+    output.writeInt(len);\n+    for (int i = 0; i < len; i++) {\n+      output.writeLong(neighborIds[i]);\n     }\n \n-    @Override\n-    public void deserialize(ByteBuf input) {\n-        int len = input.readInt();\n-        neighborIds = new long[len];\n-        attrs = new byte[len];\n-\n-        for (int i = 0; i < len; i++) {\n-            neighborIds[i] = input.readLong();\n-        }\n-        for (int i = 0; i < len; i++) {\n-            attrs[i] = input.readByte();\n-        }\n+    for (int i = 0; i < len; i++) {\n+      output.writeByte(attrs[i]);\n     }\n-\n-    @Override\n-    public int bufferLen() {\n-        return Integer.BYTES + neighborIds.length * Long.BYTES + attrs.length * Byte.BYTES;\n+  }\n+\n+  @Override\n+  public void deserialize(DataInputStream input) throws IOException {\n+    int len = input.readInt();\n+    neighborIds = new long[len];\n+    attrs = new byte[len];\n+    for (int i = 0; i < len; i++) {\n+      neighborIds[i] = input.readLong();\n     }\n \n-    @Override\n-    public void serialize(DataOutputStream output) throws IOException {\n-        int len = neighborIds.length;\n-        output.writeInt(len);\n-        for (int i = 0; i < len; i++) {\n-            output.writeLong(neighborIds[i]);\n-        }\n-        for (int i = 0; i < len; i++) {\n-            output.writeByte(attrs[i]);\n-        }\n+    for (int i = 0; i < len; i++) {\n+      attrs[i] = input.readByte();\n     }\n+  }\n \n-    @Override\n-    public void deserialize(DataInputStream input) throws IOException {\n-        int len = input.readInt();\n-        neighborIds = new long[len];\n-        attrs = new byte[len];\n-\n-        for (int i = 0; i < len; i++) {\n-            neighborIds[i] = input.readLong();\n-        }\n-        for (int i = 0; i < len; i++) {\n-            attrs[i] = input.readByte();\n-        }\n-    }\n+  @Override\n+  public int dataLen() {\n+    return bufferLen();\n+  }\n \n-    @Override\n-    public int dataLen() {\n-        return bufferLen();\n-    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 124
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}