{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1305",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1305/IndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1305/IndexReader.java\nindex d6417a504cd..9bfb0c07ea0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1305/IndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1305/IndexReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.storageengine.api.schema;\n \n import org.neo4j.collection.primitive.PrimitiveLongResourceCollections;\n@@ -34,140 +35,140 @@ import org.neo4j.values.storable.Value;\n  */\n public interface IndexReader extends Resource\n {\n-    /**\n-     * @param nodeId node id to match.\n-     * @param propertyValues property values to match.\n-     * @return number of index entries for the given {@code nodeId} and {@code propertyValues}.\n-     */\n-    long countIndexedNodes( long nodeId, Value... propertyValues );\n-\n-    IndexSampler createSampler();\n-\n-    /**\n-     * Queries the index for the given {@link IndexQuery} predicates.\n-     *\n-     * @param predicates the predicates to query for.\n-     * @return the matching entity IDs.\n-     */\n-    PrimitiveLongResourceIterator query( IndexQuery... predicates ) throws IndexNotApplicableKernelException;\n-\n-    /**\n-     * Queries the index for the given {@link IndexQuery} predicates.\n-     *\n-     * @param client the client which will control the progression though query results.\n-     * @param query the query so serve.\n-     */\n-    void query(\n-            IndexProgressor.NodeValueClient client,\n-            IndexOrder indexOrder,\n-            IndexQuery... query ) throws IndexNotApplicableKernelException;\n-\n-    /**\n-     * @param predicates query to determine whether or not index has full value precision for.\n-     * @return whether or not this reader will only return 100% matching results from {@link #query(IndexQuery...)}.\n-     * If {@code false} is returned this means that the caller of {@link #query(IndexQuery...)} will have to\n-     * do additional filtering, double-checking of actual property values, externally.\n-     */\n-    boolean hasFullValuePrecision( IndexQuery... predicates );\n-\n-    /**\n-     * Initializes {@code client} to be able to progress through all distinct values in this index. {@link IndexProgressor.NodeValueClient}\n-     * is used because it has a perfect method signature, even if the {@code reference} argument will instead be used\n-     * as number of index entries for the specific indexed value.\n-     *\n-     * {@link IndexProgressor.NodeValueClient#needsValues()} decides whether or not values will be materialized and given to the client.\n-     * The use-case for setting this to {@code false} is to have a more efficient counting of distinct values in an index,\n-     * regardless of the actual values.\n-     *\n-     * @param client {@link IndexProgressor.NodeValueClient} to get initialized with this progression.\n-     * @param propertyAccessor used for distinguishing between lossy indexed values.\n-     */\n-    void distinctValues( IndexProgressor.NodeValueClient client, PropertyAccessor propertyAccessor );\n-\n-    IndexReader EMPTY = new IndexReader()\n+  /**\n+   * @param nodeId         node id to match.\n+   * @param propertyValues property values to match.\n+   * @return number of index entries for the given {@code nodeId} and {@code propertyValues}.\n+   */\n+  long countIndexedNodes(long nodeId, Value... propertyValues);\n+\n+  IndexSampler createSampler();\n+\n+  /**\n+   * Queries the index for the given {@link IndexQuery} predicates.\n+   *\n+   * @param predicates the predicates to query for.\n+   * @return the matching entity IDs.\n+   */\n+  PrimitiveLongResourceIterator query(IndexQuery... predicates) throws IndexNotApplicableKernelException;\n+\n+  /**\n+   * Queries the index for the given {@link IndexQuery} predicates.\n+   *\n+   * @param client the client which will control the progression though query results.\n+   * @param query  the query so serve.\n+   */\n+  void query(\n+      IndexProgressor.NodeValueClient client,\n+      IndexOrder indexOrder,\n+      IndexQuery... query) throws IndexNotApplicableKernelException;\n+\n+  /**\n+   * @param predicates query to determine whether or not index has full value precision for.\n+   * @return whether or not this reader will only return 100% matching results from {@link #query(IndexQuery...)}.\n+   * If {@code false} is returned this means that the caller of {@link #query(IndexQuery...)} will have to\n+   * do additional filtering, double-checking of actual property values, externally.\n+   */\n+  boolean hasFullValuePrecision(IndexQuery... predicates);\n+\n+  /**\n+   * Initializes {@code client} to be able to progress through all distinct values in this index. {@link IndexProgressor.NodeValueClient}\n+   * is used because it has a perfect method signature, even if the {@code reference} argument will instead be used\n+   * as number of index entries for the specific indexed value.\n+   * <p>\n+   * {@link IndexProgressor.NodeValueClient#needsValues()} decides whether or not values will be materialized and given to the client.\n+   * The use-case for setting this to {@code false} is to have a more efficient counting of distinct values in an index,\n+   * regardless of the actual values.\n+   *\n+   * @param client           {@link IndexProgressor.NodeValueClient} to get initialized with this progression.\n+   * @param propertyAccessor used for distinguishing between lossy indexed values.\n+   */\n+  void distinctValues(IndexProgressor.NodeValueClient client, PropertyAccessor propertyAccessor);\n+\n+  IndexReader EMPTY = new IndexReader()\n+  {\n+    // Used for checking index correctness\n+    @Override\n+    public long countIndexedNodes(long nodeId, Value... propertyValues)\n+    {\n+      return 0;\n+    }\n+\n+    @Override\n+    public IndexSampler createSampler()\n+    {\n+      return IndexSampler.EMPTY;\n+    }\n+\n+    @Override\n+    public PrimitiveLongResourceIterator query(IndexQuery[] predicates)\n+    {\n+      return PrimitiveLongResourceCollections.emptyIterator();\n+    }\n+\n+    @Override\n+    public void query(IndexProgressor.NodeValueClient client, IndexOrder indexOrder, IndexQuery... query)\n     {\n-        // Used for checking index correctness\n-        @Override\n-        public long countIndexedNodes( long nodeId, Value... propertyValues )\n-        {\n-            return 0;\n-        }\n-\n-        @Override\n-        public IndexSampler createSampler()\n-        {\n-            return IndexSampler.EMPTY;\n-        }\n-\n-        @Override\n-        public PrimitiveLongResourceIterator query( IndexQuery[] predicates )\n-        {\n-            return PrimitiveLongResourceCollections.emptyIterator();\n-        }\n-\n-        @Override\n-        public void query( IndexProgressor.NodeValueClient client, IndexOrder indexOrder, IndexQuery... query )\n-        {\n-            // do nothing\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-        }\n-\n-        @Override\n-        public boolean hasFullValuePrecision( IndexQuery... predicates )\n-        {\n-            return true;\n-        }\n-\n-        @Override\n-        public void distinctValues( IndexProgressor.NodeValueClient client, PropertyAccessor propertyAccessor )\n-        {\n-            // do nothing\n-        }\n-    };\n-\n-    class Adaptor implements IndexReader\n+      // do nothing\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+    }\n+\n+    @Override\n+    public boolean hasFullValuePrecision(IndexQuery... predicates)\n+    {\n+      return true;\n+    }\n+\n+    @Override\n+    public void distinctValues(IndexProgressor.NodeValueClient client, PropertyAccessor propertyAccessor)\n+    {\n+      // do nothing\n+    }\n+  };\n+\n+  class Adaptor implements IndexReader\n+  {\n+    @Override\n+    public long countIndexedNodes(long nodeId, Value... propertyValues)\n+    {\n+      return 0;\n+    }\n+\n+    @Override\n+    public IndexSampler createSampler()\n+    {\n+      return null;\n+    }\n+\n+    @Override\n+    public PrimitiveLongResourceIterator query(IndexQuery... predicates) throws IndexNotApplicableKernelException\n+    {\n+      return null;\n+    }\n+\n+    @Override\n+    public void query(IndexProgressor.NodeValueClient client, IndexOrder indexOrder, IndexQuery... query) throws IndexNotApplicableKernelException\n+    {\n+    }\n+\n+    @Override\n+    public boolean hasFullValuePrecision(IndexQuery... predicates)\n+    {\n+      return false;\n+    }\n+\n+    @Override\n+    public void distinctValues(IndexProgressor.NodeValueClient client, PropertyAccessor propertyAccessor)\n+    {\n+    }\n+\n+    @Override\n+    public void close()\n     {\n-        @Override\n-        public long countIndexedNodes( long nodeId, Value... propertyValues )\n-        {\n-            return 0;\n-        }\n-\n-        @Override\n-        public IndexSampler createSampler()\n-        {\n-            return null;\n-        }\n-\n-        @Override\n-        public PrimitiveLongResourceIterator query( IndexQuery... predicates ) throws IndexNotApplicableKernelException\n-        {\n-            return null;\n-        }\n-\n-        @Override\n-        public void query( IndexProgressor.NodeValueClient client, IndexOrder indexOrder, IndexQuery... query ) throws IndexNotApplicableKernelException\n-        {\n-        }\n-\n-        @Override\n-        public boolean hasFullValuePrecision( IndexQuery... predicates )\n-        {\n-            return false;\n-        }\n-\n-        @Override\n-        public void distinctValues( IndexProgressor.NodeValueClient client, PropertyAccessor propertyAccessor )\n-        {\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-        }\n     }\n+  }\n }\n",
            "diff_size": 172
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}