{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2218",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "50",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "65",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "72",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2218/AuthToken.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2218/AuthToken.java\nindex 824b29353b0..daba74688ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2218/AuthToken.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2218/AuthToken.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.security;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -31,81 +32,78 @@ import static org.neo4j.helpers.collection.MapUtil.map;\n \n public interface AuthToken\n {\n-    String SCHEME_KEY = \"scheme\";\n-    String PRINCIPAL = \"principal\";\n-    String CREDENTIALS = \"credentials\";\n-    String REALM_KEY = \"realm\";\n-    String PARAMETERS = \"parameters\";\n-    String NEW_CREDENTIALS = \"new_credentials\";\n-    String BASIC_SCHEME = \"basic\";\n-    String NATIVE_REALM = \"native\";\n+  String SCHEME_KEY = \"scheme\";\n+  String PRINCIPAL = \"principal\";\n+  String CREDENTIALS = \"credentials\";\n+  String REALM_KEY = \"realm\";\n+  String PARAMETERS = \"parameters\";\n+  String NEW_CREDENTIALS = \"new_credentials\";\n+  String BASIC_SCHEME = \"basic\";\n+  String NATIVE_REALM = \"native\";\n \n-    static String safeCast( String key, Map<String,Object> authToken ) throws InvalidAuthTokenException\n+  static String safeCast(String key, Map<String, Object> authToken) throws InvalidAuthTokenException\n+  {\n+    Object value = authToken.get(key);\n+    if (value == null)\n     {\n-        Object value = authToken.get( key );\n-        if ( value == null )\n-        {\n-            throw invalidToken( \"missing key `\" + key + \"`\" );\n-        }\n-        else if ( !(value instanceof String) )\n-        {\n-            throw invalidToken( \"the value associated with the key `\" + key + \"` must be a String but was: \"\n-                    + value.getClass().getSimpleName() );\n-        }\n-        return (String) value;\n-    }\n-\n-    static Map<String,Object> safeCastMap( String key, Map<String,Object> authToken )\n-            throws InvalidAuthTokenException\n+      throw invalidToken(\"missing key `\" + key + \"`\");\n+    } else if (!(value instanceof String))\n     {\n-        Object value = authToken.get( key );\n-        if ( value == null )\n-        {\n-            return Collections.emptyMap();\n-        }\n-        else if ( value instanceof Map )\n-        {\n-            return (Map<String,Object>) value;\n-        }\n-        else\n-        {\n-            throw new InvalidAuthTokenException(\n-                    \"The value associated with the key `\" + key + \"` must be a Map but was: \" +\n-                    value.getClass().getSimpleName() );\n-        }\n+      throw invalidToken(\"the value associated with the key `\" + key + \"` must be a String but was: \"\n+          + value.getClass().getSimpleName());\n     }\n+    return (String) value;\n+  }\n \n-    static InvalidAuthTokenException invalidToken( String explanation )\n+  static Map<String, Object> safeCastMap(String key, Map<String, Object> authToken)\n+      throws InvalidAuthTokenException\n+  {\n+    Object value = authToken.get(key);\n+    if (value == null)\n     {\n-        if ( StringUtils.isNotEmpty( explanation ) && !explanation.matches( \"^[,.:;].*\" ) )\n-        {\n-            explanation = \", \" + explanation;\n-        }\n-        return new InvalidAuthTokenException( format( \"Unsupported authentication token%s\", explanation ) );\n-    }\n-\n-    static Map<String,Object> newBasicAuthToken( String username, String password )\n+      return Collections.emptyMap();\n+    } else if (value instanceof Map)\n     {\n-        return map( AuthToken.SCHEME_KEY, BASIC_SCHEME, AuthToken.PRINCIPAL, username, AuthToken.CREDENTIALS,\n-                password );\n-    }\n-\n-    static Map<String,Object> newBasicAuthToken( String username, String password, String realm )\n+      return (Map<String, Object>) value;\n+    } else\n     {\n-        return map( AuthToken.SCHEME_KEY, BASIC_SCHEME, AuthToken.PRINCIPAL, username, AuthToken.CREDENTIALS, password,\n-                AuthToken.REALM_KEY, realm );\n+      throw new InvalidAuthTokenException(\n+          \"The value associated with the key `\" + key + \"` must be a Map but was: \" +\n+              value.getClass().getSimpleName());\n     }\n+  }\n \n-    static Map<String,Object> newCustomAuthToken( String principle, String credentials, String realm, String scheme )\n+  static InvalidAuthTokenException invalidToken(String explanation)\n+  {\n+    if (StringUtils.isNotEmpty(explanation) && !explanation.matches(\"^[,.:;].*\"))\n     {\n-        return map( AuthToken.SCHEME_KEY, scheme, AuthToken.PRINCIPAL, principle, AuthToken.CREDENTIALS, credentials,\n-                AuthToken.REALM_KEY, realm );\n+      explanation = \", \" + explanation;\n     }\n+    return new InvalidAuthTokenException(format(\"Unsupported authentication token%s\", explanation));\n+  }\n \n-    static Map<String,Object> newCustomAuthToken( String principle, String credentials, String realm, String scheme,\n-            Map<String,Object> parameters )\n-    {\n-        return map( AuthToken.SCHEME_KEY, scheme, AuthToken.PRINCIPAL, principle, AuthToken.CREDENTIALS, credentials,\n-                AuthToken.REALM_KEY, realm, AuthToken.PARAMETERS, parameters );\n-    }\n+  static Map<String, Object> newBasicAuthToken(String username, String password)\n+  {\n+    return map(AuthToken.SCHEME_KEY, BASIC_SCHEME, AuthToken.PRINCIPAL, username, AuthToken.CREDENTIALS,\n+        password);\n+  }\n+\n+  static Map<String, Object> newBasicAuthToken(String username, String password, String realm)\n+  {\n+    return map(AuthToken.SCHEME_KEY, BASIC_SCHEME, AuthToken.PRINCIPAL, username, AuthToken.CREDENTIALS, password,\n+        AuthToken.REALM_KEY, realm);\n+  }\n+\n+  static Map<String, Object> newCustomAuthToken(String principle, String credentials, String realm, String scheme)\n+  {\n+    return map(AuthToken.SCHEME_KEY, scheme, AuthToken.PRINCIPAL, principle, AuthToken.CREDENTIALS, credentials,\n+        AuthToken.REALM_KEY, realm);\n+  }\n+\n+  static Map<String, Object> newCustomAuthToken(String principle, String credentials, String realm, String scheme,\n+                                                Map<String, Object> parameters)\n+  {\n+    return map(AuthToken.SCHEME_KEY, scheme, AuthToken.PRINCIPAL, principle, AuthToken.CREDENTIALS, credentials,\n+        AuthToken.REALM_KEY, realm, AuthToken.PARAMETERS, parameters);\n+  }\n }\n",
            "diff_size": 98
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2218/AuthToken.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2218/AuthToken.java\nindex 824b29353b0..ca9c0d8a0f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2218/AuthToken.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2218/AuthToken.java\n@@ -47,17 +47,15 @@ public interface AuthToken\n         {\n             throw invalidToken( \"missing key `\" + key + \"`\" );\n         }\n-        else if ( !(value instanceof String) )\n+        else if ( !( value instanceof String) )\n         {\n-            throw invalidToken( \"the value associated with the key `\" + key + \"` must be a String but was: \"\n-                    + value.getClass().getSimpleName() );\n+            throw invalidToken( \"the value associated with the key `\" + key + \"` must be a String but was: \" + value.getClass().getSimpleName() );\n         }\n         return (String) value;\n     }\n \n-    static Map<String,Object> safeCastMap( String key, Map<String,Object> authToken )\n-            throws InvalidAuthTokenException\n-    {\n+    static Map<String,Object> safeCastMap( String key, Map<String,Object> authToken ) throws InvalidAuthTokenException\n+{\n         Object value = authToken.get( key );\n         if ( value == null )\n         {\n@@ -69,10 +67,8 @@ public interface AuthToken\n         }\n         else\n         {\n-            throw new InvalidAuthTokenException(\n-                    \"The value associated with the key `\" + key + \"` must be a Map but was: \" +\n-                    value.getClass().getSimpleName() );\n-        }\n+            throw new InvalidAuthTokenException( \"The value associated with the key `\" + key + \"` must be a Map but was: \" + value.getClass().getSimpleName() );\n+    }\n     }\n \n     static InvalidAuthTokenException invalidToken( String explanation )\n@@ -102,10 +98,9 @@ public interface AuthToken\n                 AuthToken.REALM_KEY, realm );\n     }\n \n-    static Map<String,Object> newCustomAuthToken( String principle, String credentials, String realm, String scheme,\n-            Map<String,Object> parameters )\n+    static Map<String,Object> newCustomAuthToken( String principle, String credentials, String realm, String scheme, Map<String,Object> parameters )\n     {\n         return map( AuthToken.SCHEME_KEY, scheme, AuthToken.PRINCIPAL, principle, AuthToken.CREDENTIALS, credentials,\n                 AuthToken.REALM_KEY, realm, AuthToken.PARAMETERS, parameters );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "76",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "column": "97",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "76",
                    "column": "51",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2218/AuthToken.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2218/AuthToken.java\nindex 824b29353b0..929ef3a0ced 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2218/AuthToken.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2218/AuthToken.java\n@@ -20,13 +20,11 @@\n package org.neo4j.kernel.api.security;\n \n import org.apache.commons.lang3.StringUtils;\n-\n import java.util.Collections;\n import java.util.Map;\n-\n import org.neo4j.kernel.api.security.exception.InvalidAuthTokenException;\n-\n import static java.lang.String.format;\n+\n import static org.neo4j.helpers.collection.MapUtil.map;\n \n public interface AuthToken\n@@ -39,7 +37,6 @@ public interface AuthToken\n     String NEW_CREDENTIALS = \"new_credentials\";\n     String BASIC_SCHEME = \"basic\";\n     String NATIVE_REALM = \"native\";\n-\n     static String safeCast( String key, Map<String,Object> authToken ) throws InvalidAuthTokenException\n     {\n         Object value = authToken.get( key );\n@@ -47,65 +44,61 @@ public interface AuthToken\n         {\n             throw invalidToken( \"missing key `\" + key + \"`\" );\n         }\n-        else if ( !(value instanceof String) )\n+        else\n+        if ( ! ( value instanceof String) )\n         {\n-            throw invalidToken( \"the value associated with the key `\" + key + \"` must be a String but was: \"\n-                    + value.getClass().getSimpleName() );\n+            throw invalidToken( \"the value associated with the key `\" + key+ \"` must be a String but was: \" + value.getClass().getSimpleName() );\n         }\n+\n         return (String) value;\n     }\n \n-    static Map<String,Object> safeCastMap( String key, Map<String,Object> authToken )\n-            throws InvalidAuthTokenException\n+    static Map<String,Object> safeCastMap( String key, Map<String,Object> authToken ) throws InvalidAuthTokenException\n     {\n         Object value = authToken.get( key );\n         if ( value == null )\n         {\n             return Collections.emptyMap();\n         }\n-        else if ( value instanceof Map )\n+        else\n+        if ( value instanceof Map )\n         {\n             return (Map<String,Object>) value;\n         }\n         else\n-        {\n-            throw new InvalidAuthTokenException(\n-                    \"The value associated with the key `\" + key + \"` must be a Map but was: \" +\n-                    value.getClass().getSimpleName() );\n-        }\n+            {\n+                throw new InvalidAuthTokenException( \"The value associated with the key `\" + key+ \"` must be a Map but was: \" + value.getClass().getSimpleName() );\n+            }\n     }\n \n     static InvalidAuthTokenException invalidToken( String explanation )\n     {\n-        if ( StringUtils.isNotEmpty( explanation ) && !explanation.matches( \"^[,.:;].*\" ) )\n+        if ( StringUtils.isNotEmpty( explanation )&& ! explanation.matches( \"^[,.:;].*\" ) )\n         {\n             explanation = \", \" + explanation;\n         }\n+\n         return new InvalidAuthTokenException( format( \"Unsupported authentication token%s\", explanation ) );\n     }\n \n     static Map<String,Object> newBasicAuthToken( String username, String password )\n     {\n-        return map( AuthToken.SCHEME_KEY, BASIC_SCHEME, AuthToken.PRINCIPAL, username, AuthToken.CREDENTIALS,\n-                password );\n+        return map( AuthToken.SCHEME_KEY, BASIC_SCHEME, AuthToken.PRINCIPAL, username, AuthToken.CREDENTIALS, password );\n     }\n \n     static Map<String,Object> newBasicAuthToken( String username, String password, String realm )\n     {\n-        return map( AuthToken.SCHEME_KEY, BASIC_SCHEME, AuthToken.PRINCIPAL, username, AuthToken.CREDENTIALS, password,\n-                AuthToken.REALM_KEY, realm );\n+        return map( AuthToken.SCHEME_KEY, BASIC_SCHEME, AuthToken.PRINCIPAL, username, AuthToken.CREDENTIALS, password, AuthToken.REALM_KEY, realm );\n     }\n \n     static Map<String,Object> newCustomAuthToken( String principle, String credentials, String realm, String scheme )\n     {\n-        return map( AuthToken.SCHEME_KEY, scheme, AuthToken.PRINCIPAL, principle, AuthToken.CREDENTIALS, credentials,\n-                AuthToken.REALM_KEY, realm );\n+        return map( AuthToken.SCHEME_KEY, scheme, AuthToken.PRINCIPAL, principle, AuthToken.CREDENTIALS, credentials, AuthToken.REALM_KEY, realm );\n     }\n \n-    static Map<String,Object> newCustomAuthToken( String principle, String credentials, String realm, String scheme,\n-            Map<String,Object> parameters )\n+    static Map<String,Object> newCustomAuthToken( String principle, String credentials, String realm, String scheme, Map<String,Object> parameters )\n     {\n-        return map( AuthToken.SCHEME_KEY, scheme, AuthToken.PRINCIPAL, principle, AuthToken.CREDENTIALS, credentials,\n-                AuthToken.REALM_KEY, realm, AuthToken.PARAMETERS, parameters );\n+        return map( AuthToken.SCHEME_KEY, scheme, AuthToken.PRINCIPAL, principle, AuthToken.CREDENTIALS, credentials, AuthToken.REALM_KEY, realm, AuthToken.PARAMETERS, parameters );\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}