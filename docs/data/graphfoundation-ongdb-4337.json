{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4337",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "31",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "31",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4337/NodeKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4337/NodeKey.java\nindex 160fc9aa82f..095dcc273b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4337/NodeKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4337/NodeKey.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.counts.keys;\n \n import org.neo4j.kernel.impl.api.CountsVisitor;\n@@ -25,60 +26,60 @@ import static org.neo4j.kernel.impl.util.IdPrettyPrinter.label;\n \n public final class NodeKey implements CountsKey\n {\n-    private final int labelId;\n+  private final int labelId;\n \n-    NodeKey( int labelId )\n-    {\n-        this.labelId = labelId;\n-    }\n+  NodeKey(int labelId)\n+  {\n+    this.labelId = labelId;\n+  }\n \n-    public int getLabelId()\n-    {\n-        return labelId;\n-    }\n+  public int getLabelId()\n+  {\n+    return labelId;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return String.format( \"NodeKey[(%s)]\", label( labelId ) );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return String.format(\"NodeKey[(%s)]\", label(labelId));\n+  }\n \n-    @Override\n-    public void accept( CountsVisitor visitor, long ignored, long count )\n-    {\n-        visitor.visitNodeCount( labelId, count );\n-    }\n+  @Override\n+  public void accept(CountsVisitor visitor, long ignored, long count)\n+  {\n+    visitor.visitNodeCount(labelId, count);\n+  }\n \n-    @Override\n-    public CountsKeyType recordType()\n-    {\n-        return CountsKeyType.ENTITY_NODE;\n-    }\n+  @Override\n+  public CountsKeyType recordType()\n+  {\n+    return CountsKeyType.ENTITY_NODE;\n+  }\n \n-    @Override\n-    public int hashCode()\n-    {\n-        int result = labelId;\n-        result = 31 * result + recordType().hashCode();\n-        return result;\n-    }\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = labelId;\n+    result = 31 * result + recordType().hashCode();\n+    return result;\n+  }\n \n-    @Override\n-    public boolean equals( Object o )\n-    {\n-        return this == o || (o instanceof org.neo4j.kernel.impl.store.counts.keys.NodeKey) &&\n-                            labelId == ((org.neo4j.kernel.impl.store.counts.keys.NodeKey) o).labelId;\n-    }\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    return this == o || (o instanceof org.neo4j.kernel.impl.store.counts.keys.NodeKey) &&\n+        labelId == ((org.neo4j.kernel.impl.store.counts.keys.NodeKey) o).labelId;\n+  }\n \n-    @Override\n-    public int compareTo( CountsKey other )\n+  @Override\n+  public int compareTo(CountsKey other)\n+  {\n+    if (other instanceof org.neo4j.kernel.impl.store.counts.keys.NodeKey)\n     {\n-        if ( other instanceof org.neo4j.kernel.impl.store.counts.keys.NodeKey )\n-        {\n-            org.neo4j.kernel.impl.store.counts.keys.NodeKey that =\n-                    (org.neo4j.kernel.impl.store.counts.keys.NodeKey) other;\n-            return this.labelId - that.labelId;\n-        }\n-        return recordType().ordinal() - other.recordType().ordinal();\n+      org.neo4j.kernel.impl.store.counts.keys.NodeKey that =\n+          (org.neo4j.kernel.impl.store.counts.keys.NodeKey) other;\n+      return this.labelId - that.labelId;\n     }\n+    return recordType().ordinal() - other.recordType().ordinal();\n+  }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4337/NodeKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4337/NodeKey.java\nindex 160fc9aa82f..a9aa788ac89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4337/NodeKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4337/NodeKey.java\n@@ -66,8 +66,7 @@ public final class NodeKey implements CountsKey\n     @Override\n     public boolean equals( Object o )\n     {\n-        return this == o || (o instanceof org.neo4j.kernel.impl.store.counts.keys.NodeKey) &&\n-                            labelId == ((org.neo4j.kernel.impl.store.counts.keys.NodeKey) o).labelId;\n+        return this == o || ( o instanceof org.neo4j.kernel.impl.store.counts.keys.NodeKey) && labelId == ((org.neo4j.kernel.impl.store.counts.keys.NodeKey) o).labelId;\n     }\n \n     @Override\n@@ -75,10 +74,10 @@ public final class NodeKey implements CountsKey\n     {\n         if ( other instanceof org.neo4j.kernel.impl.store.counts.keys.NodeKey )\n         {\n-            org.neo4j.kernel.impl.store.counts.keys.NodeKey that =\n-                    (org.neo4j.kernel.impl.store.counts.keys.NodeKey) other;\n-            return this.labelId - that.labelId;\n+            org.neo4j.kernel.impl.store.counts.keys.NodeKey that = (org.neo4j.kernel.impl.store.counts.keys.NodeKey) other;\n+return this.labelId - that.labelId;\n         }\n-        return recordType().ordinal() - other.recordType().ordinal();\n+\n+return recordType().ordinal() - other.recordType().ordinal();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}