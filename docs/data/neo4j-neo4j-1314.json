{
    "project_name": "neo4j-neo4j",
    "error_id": "1314",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "234",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1314/ShellStatementParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1314/ShellStatementParser.java\nindex d72e59b3d14..2caf5defbc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1314/ShellStatementParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1314/ShellStatementParser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.parser;\n \n import java.util.ArrayList;\n@@ -31,7 +32,7 @@ import javax.annotation.Nonnull;\n public class ShellStatementParser implements StatementParser\n {\n \n-    private static final Pattern SHELL_CMD_PATTERN = Pattern.compile( \"^\\\\s*:.+\\\\s*$\" );\n+    private static final Pattern SHELL_CMD_PATTERN = Pattern.compile(\"^\\\\s*:.+\\\\s*$\");\n     private static final char SEMICOLON = ';';\n     private static final char BACKSLASH = '\\\\';\n     private static final String LINE_COMMENT_START = \"//\";\n@@ -60,58 +61,58 @@ public class ShellStatementParser implements StatementParser\n      * @param line to parse (including ending newline)\n      */\n     @Override\n-    public void parseMoreText( @Nonnull String line )\n+    public void parseMoreText(@Nonnull String line)\n     {\n         // See if it could possibly be a shell command, only valid if not in a current statement\n-        if ( statementNotStarted() && SHELL_CMD_PATTERN.matcher( line ).find() )\n+        if (statementNotStarted() && SHELL_CMD_PATTERN.matcher(line).find())\n         {\n-            parsedStatements.add( line );\n+            parsedStatements.add(line);\n             return;\n         }\n \n         // We will guess it is cypher then\n         boolean skipNext = false;\n         char prev, current = (char) 0;\n-        for ( char c : line.toCharArray() )\n+        for (char c : line.toCharArray())\n         {\n             // append current\n-            statement.append( c );\n+            statement.append(c);\n             // last char shuffling\n             prev = current;\n             current = c;\n \n-            if ( skipNext )\n+            if (skipNext)\n             {\n                 // This char is escaped so gets no special treatment\n                 skipNext = false;\n                 continue;\n             }\n \n-            if ( handleComments( prev, current ) )\n+            if (handleComments(prev, current))\n             {\n                 continue;\n             }\n \n-            if ( current == BACKSLASH )\n+            if (current == BACKSLASH)\n             {\n                 // backslash can escape stuff outside of comments (but inside quotes too!)\n                 skipNext = true;\n                 continue;\n             }\n \n-            if ( handleQuotes( prev, current ) )\n+            if (handleQuotes(prev, current))\n             {\n                 continue;\n             }\n \n             // Not escaped, not in a quote, not in a comment\n-            if ( handleSemicolon( current ) )\n+            if (handleSemicolon(current))\n             {\n                 continue;\n             }\n \n             // If it's the start of a quote or comment\n-            awaitedRightDelimiter = getRightDelimiter( prev, current );\n+            awaitedRightDelimiter = getRightDelimiter(prev, current);\n         }\n     }\n \n@@ -119,12 +120,12 @@ public class ShellStatementParser implements StatementParser\n      * @param current character\n      * @return true if parsing should go immediately to the next character, false otherwise\n      */\n-    private boolean handleSemicolon( char current )\n+    private boolean handleSemicolon(char current)\n     {\n-        if ( current == SEMICOLON )\n+        if (current == SEMICOLON)\n         {\n             // end current statement\n-            parsedStatements.add( statement.toString() );\n+            parsedStatements.add(statement.toString());\n             // start a new statement\n             statement = new StringBuilder();\n             return true;\n@@ -137,11 +138,11 @@ public class ShellStatementParser implements StatementParser\n      * @param current character\n      * @return true if parsing should go immediately to the next character, false otherwise\n      */\n-    private boolean handleQuotes( char prev, char current )\n+    private boolean handleQuotes(char prev, char current)\n     {\n-        if ( inQuote() )\n+        if (inQuote())\n         {\n-            if ( isRightDelimiter( prev, current ) )\n+            if (isRightDelimiter(prev, current))\n             {\n                 // Then end it\n                 awaitedRightDelimiter = Optional.empty();\n@@ -158,21 +159,21 @@ public class ShellStatementParser implements StatementParser\n      * @param current character\n      * @return true if parsing should go immediately to the next character, false otherwise\n      */\n-    private boolean handleComments( char prev, char current )\n+    private boolean handleComments(char prev, char current)\n     {\n-        if ( inComment() )\n+        if (inComment())\n         {\n-            if ( commentStart == NO_COMMENT )\n+            if (commentStart == NO_COMMENT)\n             {\n                 //find the position of //.. or /*...\n                 //i.e. currentPos - 1 - 2\n                 commentStart = statement.length() - 3;\n             }\n-            if ( isRightDelimiter( prev, current ) )\n+            if (isRightDelimiter(prev, current))\n             {\n                 // Then end it\n                 awaitedRightDelimiter = Optional.empty();\n-                statement.delete( commentStart, statement.length() );\n+                statement.delete(commentStart, statement.length());\n                 commentStart = NO_COMMENT;\n                 return true;\n             }\n@@ -195,21 +196,20 @@ public class ShellStatementParser implements StatementParser\n      * @param last  character\n      * @return true if the last two chars ends the current comment, false otherwise\n      */\n-    private boolean isRightDelimiter( char first, char last )\n+    private boolean isRightDelimiter(char first, char last)\n     {\n-        if ( !awaitedRightDelimiter.isPresent() )\n+        if (!awaitedRightDelimiter.isPresent())\n         {\n             return false;\n         }\n         final String expectedEnd = awaitedRightDelimiter.get();\n \n-        if ( expectedEnd.length() == 1 )\n+        if (expectedEnd.length() == 1)\n         {\n-            return expectedEnd.equals( String.valueOf( last ) );\n-        }\n-        else\n+            return expectedEnd.equals(String.valueOf(last));\n+        } else\n         {\n-            return expectedEnd.equals( String.valueOf( first ) + last );\n+            return expectedEnd.equals(String.valueOf(first) + last);\n         }\n     }\n \n@@ -219,8 +219,8 @@ public class ShellStatementParser implements StatementParser\n     private boolean inComment()\n     {\n         return awaitedRightDelimiter.isPresent() &&\n-               (awaitedRightDelimiter.get().equals( LINE_COMMENT_END ) ||\n-                awaitedRightDelimiter.get().equals( BLOCK_COMMENT_END ));\n+          (awaitedRightDelimiter.get().equals(LINE_COMMENT_END) ||\n+            awaitedRightDelimiter.get().equals(BLOCK_COMMENT_END));\n     }\n \n     /**\n@@ -231,28 +231,28 @@ public class ShellStatementParser implements StatementParser\n      * @return the matching right delimiter or something empty if not the start of a quote/comment\n      */\n     @Nonnull\n-    private Optional<String> getRightDelimiter( char first, char last )\n+    private Optional<String> getRightDelimiter(char first, char last)\n     {\n         // double characters\n-        final String lastTwoChars = String.valueOf( first ) + last;\n-        switch ( lastTwoChars )\n+        final String lastTwoChars = String.valueOf(first) + last;\n+        switch (lastTwoChars)\n         {\n-        case LINE_COMMENT_START:\n-            return Optional.of( LINE_COMMENT_END );\n-        case BLOCK_COMMENT_START:\n-            return Optional.of( BLOCK_COMMENT_END );\n-        default:\n-            // Do nothing\n+            case LINE_COMMENT_START:\n+                return Optional.of(LINE_COMMENT_END);\n+            case BLOCK_COMMENT_START:\n+                return Optional.of(BLOCK_COMMENT_END);\n+            default:\n+                // Do nothing\n         }\n         // single characters\n-        switch ( last )\n+        switch (last)\n         {\n-        case BACKTICK:\n-        case DOUBLE_QUOTE:\n-        case SINGLE_QUOTE:\n-            return Optional.of( String.valueOf( last ) );\n-        default:\n-            return Optional.empty();\n+            case BACKTICK:\n+            case DOUBLE_QUOTE:\n+            case SINGLE_QUOTE:\n+                return Optional.of(String.valueOf(last));\n+            default:\n+                return Optional.empty();\n         }\n     }\n \n",
            "diff_size": 49
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}