{
    "project_name": "self-xdsd-self-core",
    "error_id": "50",
    "information": {
        "errors": [
            {
                "line": "117",
                "column": "11",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    public Commit commit() {\n        final Commit commit;\n        if(\"push\".equalsIgnoreCase(this.type)) {\n            final JsonObject latest = this.event.getJsonArray(\n                \"commits\"\n            ).getJsonObject(0);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler/50/GithubWebhookEvent.java\nindex 62bd88a88be..0818915d0d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler/50/GithubWebhookEvent.java\n@@ -114,7 +114,7 @@ final class GithubWebhookEvent implements Event {\n     @Override\n     public Commit commit() {\n         final Commit commit;\n-        if(\"push\".equalsIgnoreCase(this.type)) {\n+        if (\"push\".equalsIgnoreCase(this.type)) {\n             final JsonObject latest = this.event.getJsonArray(\n                 \"commits\"\n             ).getJsonObject(0);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "@param tag description should start with capital letter",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/intellij/50/GithubWebhookEvent.java\nindex 62bd88a88be..d09809abf22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/intellij/50/GithubWebhookEvent.java\n@@ -20,6 +20,7 @@\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.selfxdsd.core.projects;\n \n import com.selfxdsd.api.*;\n@@ -31,6 +32,7 @@ import java.io.StringReader;\n /**\n  * Webhook event coming from Github. This is the event which triggers\n  * everything (conversations, steps etc).\n+ *\n  * @author Mihai Andronache (amihaiemil@gmail.com)\n  * @version $Id$\n  * @since 0.0.61\n@@ -54,8 +56,9 @@ final class GithubWebhookEvent implements Event {\n \n     /**\n      * Ctor.\n+     *\n      * @param project Project where the event happened.\n-     * @param type Type.\n+     * @param type    Type.\n      * @param payload Payload.\n      */\n     GithubWebhookEvent(\n@@ -65,7 +68,7 @@ final class GithubWebhookEvent implements Event {\n     ) {\n         this.project = project;\n         this.type = type;\n-        this.event  = Json.createReader(\n+        this.event = Json.createReader(\n             new StringReader(payload)\n         ).readObject();\n     }\n@@ -114,7 +117,7 @@ final class GithubWebhookEvent implements Event {\n     @Override\n     public Commit commit() {\n         final Commit commit;\n-        if(\"push\".equalsIgnoreCase(this.type)) {\n+        if (\"push\".equalsIgnoreCase(this.type)) {\n             final JsonObject latest = this.event.getJsonArray(\n                 \"commits\"\n             ).getJsonObject(0);\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/naturalize/50/GithubWebhookEvent.java\nindex 62bd88a88be..2f60c2c4791 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/naturalize/50/GithubWebhookEvent.java\n@@ -65,7 +65,7 @@ final class GithubWebhookEvent implements Event {\n     ) {\n         this.project = project;\n         this.type = type;\n-        this.event  = Json.createReader(\n+        this.event = Json.createReader(\n             new StringReader(payload)\n         ).readObject();\n     }\n@@ -75,7 +75,7 @@ final class GithubWebhookEvent implements Event {\n         final String resolved;\n         if (\"issues\".equalsIgnoreCase(type)\n             || \"pull_request\".equalsIgnoreCase(type)) {\n-            final String act = event.getString(\"action\");\n+    final String act = event.getString(\"action\");\n             if (\"opened\".equalsIgnoreCase(act)) {\n                 resolved = Type.NEW_ISSUE;\n             } else if (\"reopened\".equalsIgnoreCase(act)) {\n@@ -100,8 +100,7 @@ final class GithubWebhookEvent implements Event {\n         final String repoFullName = project.repoFullName();\n         return this.project.projectManager().provider().repo(\n             repoFullName.split(\"/\")[0],\n-            repoFullName.split(\"/\")[1]\n-        ).issues().received(jsn);\n+            repoFullName.split(\"/\")[1]).issues().received(jsn);\n     }\n \n     @Override\n@@ -114,15 +113,14 @@ final class GithubWebhookEvent implements Event {\n     @Override\n     public Commit commit() {\n         final Commit commit;\n-        if(\"push\".equalsIgnoreCase(this.type)) {\n+        if (\"push\".equalsIgnoreCase(this.type)) {\n             final JsonObject latest = this.event.getJsonArray(\n                 \"commits\"\n             ).getJsonObject(0);\n             final String repoFullName = this.project.repoFullName();\n             commit = this.project.projectManager().provider().repo(\n                 repoFullName.split(\"/\")[0],\n-                repoFullName.split(\"/\")[1]\n-            ).commits().getCommit(latest.getString(\"id\"));\n+                repoFullName.split(\"/\")[1]).commits().getCommit(latest.getString(\"id\"));\n         } else {\n             commit = null;\n         }\n@@ -134,4 +132,4 @@ final class GithubWebhookEvent implements Event {\n         return project;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 90).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/codebuff/50/GithubWebhookEvent.java\nindex 62bd88a88be..f69989c501e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/codebuff/50/GithubWebhookEvent.java\n@@ -23,7 +23,6 @@\n package com.selfxdsd.core.projects;\n \n import com.selfxdsd.api.*;\n-\n import javax.json.Json;\n import javax.json.JsonObject;\n import java.io.StringReader;\n@@ -35,21 +34,29 @@ import java.io.StringReader;\n  * @version $Id$\n  * @since 0.0.61\n  */\n+\n+\n final class GithubWebhookEvent implements Event {\n \n     /**\n      * Project where the event happened.\n      */\n+\n+\n     private final Project project;\n \n     /**\n      * Event type.\n      */\n+\n+\n     private final String type;\n \n     /**\n      * Event payload.\n      */\n+\n+\n     private final JsonObject event;\n \n     /**\n@@ -58,31 +65,27 @@ final class GithubWebhookEvent implements Event {\n      * @param type Type.\n      * @param payload Payload.\n      */\n-    GithubWebhookEvent(\n-        final Project project,\n-        final String type,\n-        final String payload\n-    ) {\n+\n+\n+    GithubWebhookEvent(final Project project, final String type,\n+                       final String payload) {\n         this.project = project;\n         this.type = type;\n-        this.event  = Json.createReader(\n-            new StringReader(payload)\n-        ).readObject();\n+        this.event = Json.createReader(new StringReader(payload)).readObject();\n     }\n \n     @Override\n     public String type() {\n         final String resolved;\n-        if (\"issues\".equalsIgnoreCase(type)\n-            || \"pull_request\".equalsIgnoreCase(type)) {\n+        if (\"issues\".equalsIgnoreCase(type) || \"pull_request\".equalsIgnoreCase(type)) {\n             final String act = event.getString(\"action\");\n             if (\"opened\".equalsIgnoreCase(act)) {\n                 resolved = Type.NEW_ISSUE;\n             } else if (\"reopened\".equalsIgnoreCase(act)) {\n-                resolved = Type.REOPENED_ISSUE;\n-            } else {\n-                resolved = type;\n-            }\n+                       resolved = Type.REOPENED_ISSUE;\n+                   } else {\n+                       resolved = type;\n+                   }\n         } else {\n             resolved = type;\n         }\n@@ -99,29 +102,25 @@ final class GithubWebhookEvent implements Event {\n         }\n         final String repoFullName = project.repoFullName();\n         return this.project.projectManager().provider().repo(\n-            repoFullName.split(\"/\")[0],\n-            repoFullName.split(\"/\")[1]\n+            repoFullName.split(\"/\")[ 0 ],\n+            repoFullName.split(\"/\")[ 1 ]\n         ).issues().received(jsn);\n     }\n \n     @Override\n     public Comment comment() {\n-        return this.issue().comments().received(\n-            this.event.getJsonObject(\"comment\")\n-        );\n+        return this.issue().comments().received(this.event.getJsonObject(\"comment\"));\n     }\n \n     @Override\n     public Commit commit() {\n         final Commit commit;\n-        if(\"push\".equalsIgnoreCase(this.type)) {\n-            final JsonObject latest = this.event.getJsonArray(\n-                \"commits\"\n-            ).getJsonObject(0);\n+        if (\"push\".equalsIgnoreCase(this.type)) {\n+            final JsonObject latest = this.event.getJsonArray(\"commits\").getJsonObject(0);\n             final String repoFullName = this.project.repoFullName();\n             commit = this.project.projectManager().provider().repo(\n-                repoFullName.split(\"/\")[0],\n-                repoFullName.split(\"/\")[1]\n+                repoFullName.split(\"/\")[ 0 ],\n+                repoFullName.split(\"/\")[ 1 ]\n             ).commits().getCommit(latest.getString(\"id\"));\n         } else {\n             commit = null;\n@@ -133,5 +132,4 @@ final class GithubWebhookEvent implements Event {\n     public Project project() {\n         return project;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_random/50/GithubWebhookEvent.java\nindex 62bd88a88be..0818915d0d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_random/50/GithubWebhookEvent.java\n@@ -114,7 +114,7 @@ final class GithubWebhookEvent implements Event {\n     @Override\n     public Commit commit() {\n         final Commit commit;\n-        if(\"push\".equalsIgnoreCase(this.type)) {\n+        if (\"push\".equalsIgnoreCase(this.type)) {\n             final JsonObject latest = this.event.getJsonArray(\n                 \"commits\"\n             ).getJsonObject(0);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_three_grams/50/GithubWebhookEvent.java\nindex 62bd88a88be..0818915d0d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/50/GithubWebhookEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_three_grams/50/GithubWebhookEvent.java\n@@ -114,7 +114,7 @@ final class GithubWebhookEvent implements Event {\n     @Override\n     public Commit commit() {\n         final Commit commit;\n-        if(\"push\".equalsIgnoreCase(this.type)) {\n+        if (\"push\".equalsIgnoreCase(this.type)) {\n             final JsonObject latest = this.event.getJsonArray(\n                 \"commits\"\n             ).getJsonObject(0);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}