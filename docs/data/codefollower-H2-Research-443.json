{
    "project_name": "codefollower-H2-Research",
    "error_id": "443",
    "information": {
        "errors": [
            {
                "line": "66",
                "column": "28",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        setCurrentRowNumber(1);\n        Value v = expression.getValue(session);\n        if (isResultSet) { //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\"\n            return v.getResult();\n        }\n        LocalResult result = session.getDatabase().getResultFactory().create(session, expressions, 1, 1);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/443/Call.java\nindex 4844aa56aea..33376fccabd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/443/Call.java\n@@ -63,8 +63,9 @@ public class Call extends Prepared {\n     public ResultInterface query(int maxrows) {\n         setCurrentRowNumber(1);\n         Value v = expression.getValue(session);\n-        if (isResultSet) { //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\"\n-            return v.getResult();\n+        if (isResultSet) {\n+            //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\"\n+        return v.getResult();\n         }\n         LocalResult result = session.getDatabase().getResultFactory().create(session, expressions, 1, 1);\n         result.addRow(v);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "67",
                    "column": "24",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/443/Call.java\nindex 4844aa56aea..8bdf7e180da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/443/Call.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.dml;\n \n import org.h2.command.CommandInterface;\n@@ -20,96 +21,96 @@ import org.h2.value.Value;\n  */\n public class Call extends Prepared {\n \n-    private boolean isResultSet;\n-    private Expression expression;\n-    private Expression[] expressions;\n-\n-    public Call(Session session) {\n-        super(session);\n+  private boolean isResultSet;\n+  private Expression expression;\n+  private Expression[] expressions;\n+\n+  public Call(Session session) {\n+    super(session);\n+  }\n+\n+  @Override\n+  public ResultInterface queryMeta() {\n+    LocalResult result;\n+    if (isResultSet) {\n+      Expression[] expr = expression.getExpressionColumns(session);\n+      int count = expr.length;\n+      result = session.getDatabase().getResultFactory().create(session, expr, count, count);\n+    } else {\n+      result = session.getDatabase().getResultFactory().create(session, expressions, 1, 1);\n     }\n-\n-    @Override\n-    public ResultInterface queryMeta() {\n-        LocalResult result;\n-        if (isResultSet) {\n-            Expression[] expr = expression.getExpressionColumns(session);\n-            int count = expr.length;\n-            result = session.getDatabase().getResultFactory().create(session, expr, count, count);\n-        } else {\n-            result = session.getDatabase().getResultFactory().create(session, expressions, 1, 1);\n-        }\n-        result.done();\n-        return result;\n+    result.done();\n+    return result;\n+  }\n+\n+  @Override\n+  public int update() {\n+    Value v = expression.getValue(session);\n+    int type = v.getValueType();\n+    switch (type) {\n+      case Value.RESULT_SET:\n+        // this will throw an exception\n+        // methods returning a result set may not be called like this.\n+        return super.update();\n+      case Value.UNKNOWN:\n+      case Value.NULL:\n+        return 0;\n+      default:\n+        return v.getInt();\n     }\n-\n-    @Override\n-    public int update() {\n-        Value v = expression.getValue(session);\n-        int type = v.getValueType();\n-        switch (type) {\n-        case Value.RESULT_SET:\n-            // this will throw an exception\n-            // methods returning a result set may not be called like this.\n-            return super.update();\n-        case Value.UNKNOWN:\n-        case Value.NULL:\n-            return 0;\n-        default:\n-            return v.getInt();\n-        }\n+  }\n+\n+  @Override\n+  public ResultInterface query(int maxrows) {\n+    setCurrentRowNumber(1);\n+    Value v = expression.getValue(session);\n+    if (isResultSet) { //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\"\n+      return v.getResult();\n     }\n-\n-    @Override\n-    public ResultInterface query(int maxrows) {\n-        setCurrentRowNumber(1);\n-        Value v = expression.getValue(session);\n-        if (isResultSet) { //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\"\n-            return v.getResult();\n-        }\n-        LocalResult result = session.getDatabase().getResultFactory().create(session, expressions, 1, 1);\n-        result.addRow(v);\n-        result.done();\n-        return result;\n+    LocalResult result = session.getDatabase().getResultFactory().create(session, expressions, 1, 1);\n+    result.addRow(v);\n+    result.done();\n+    return result;\n+  }\n+\n+  @Override\n+  public void prepare() {\n+    expression = expression.optimize(session);\n+    expressions = new Expression[] {expression};\n+    isResultSet = expression.getType().getValueType() == Value.RESULT_SET;\n+    if (isResultSet) {\n+      prepareAlways = true;\n     }\n+  }\n \n-    @Override\n-    public void prepare() {\n-        expression = expression.optimize(session);\n-        expressions = new Expression[] { expression };\n-        isResultSet = expression.getType().getValueType() == Value.RESULT_SET;\n-        if (isResultSet) {\n-            prepareAlways = true;\n-        }\n-    }\n+  public void setExpression(Expression expression) {\n+    this.expression = expression;\n+  }\n \n-    public void setExpression(Expression expression) {\n-        this.expression = expression;\n-    }\n+  @Override\n+  public boolean isQuery() {\n+    return true;\n+  }\n \n-    @Override\n-    public boolean isQuery() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean isTransactional() {\n-        return true;\n-    }\n+  @Override\n+  public boolean isTransactional() {\n+    return true;\n+  }\n \n-    @Override\n-    public boolean isReadOnly() {\n-        return expression.isEverything(ExpressionVisitor.READONLY_VISITOR);\n+  @Override\n+  public boolean isReadOnly() {\n+    return expression.isEverything(ExpressionVisitor.READONLY_VISITOR);\n \n-    }\n+  }\n \n-    @Override\n-    public int getType() {\n-        return CommandInterface.CALL;\n-    }\n+  @Override\n+  public int getType() {\n+    return CommandInterface.CALL;\n+  }\n \n-    @Override\n-    public boolean isCacheable() {\n-        return !isResultSet;\n-    }\n+  @Override\n+  public boolean isCacheable() {\n+    return !isResultSet;\n+  }\n \n }\n",
            "diff_size": 100
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/443/Call.java\nindex 4844aa56aea..ea06269eede 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/443/Call.java\n@@ -63,7 +63,8 @@ public class Call extends Prepared {\n     public ResultInterface query(int maxrows) {\n         setCurrentRowNumber(1);\n         Value v = expression.getValue(session);\n-        if (isResultSet) { //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\"\n+        if (isResultSet) {\n+    //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\"\n             return v.getResult();\n         }\n         LocalResult result = session.getDatabase().getResultFactory().create(session, expressions, 1, 1);\n@@ -112,4 +113,4 @@ public class Call extends Prepared {\n         return !isResultSet;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "68",
                    "column": "28",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/443/Call.java\nindex 4844aa56aea..0f1676a5c1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/443/Call.java\n@@ -18,6 +18,8 @@ import org.h2.value.Value;\n  * This class represents the statement\n  * CALL.\n  */\n+\n+\n public class Call extends Prepared {\n \n     private boolean isResultSet;\n@@ -82,6 +84,7 @@ public class Call extends Prepared {\n         }\n     }\n \n+\n     public void setExpression(Expression expression) {\n         this.expression = expression;\n     }\n@@ -99,7 +102,6 @@ public class Call extends Prepared {\n     @Override\n     public boolean isReadOnly() {\n         return expression.isEverything(ExpressionVisitor.READONLY_VISITOR);\n-\n     }\n \n     @Override\n@@ -112,4 +114,4 @@ public class Call extends Prepared {\n         return !isResultSet;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/443/Call.java\nindex 4844aa56aea..33376fccabd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/443/Call.java\n@@ -63,8 +63,9 @@ public class Call extends Prepared {\n     public ResultInterface query(int maxrows) {\n         setCurrentRowNumber(1);\n         Value v = expression.getValue(session);\n-        if (isResultSet) { //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\"\n-            return v.getResult();\n+        if (isResultSet) {\n+            //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\"\n+        return v.getResult();\n         }\n         LocalResult result = session.getDatabase().getResultFactory().create(session, expressions, 1, 1);\n         result.addRow(v);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/443/Call.java\nindex 4844aa56aea..f942e2b737a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/443/Call.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/443/Call.java\n@@ -63,8 +63,9 @@ public class Call extends Prepared {\n     public ResultInterface query(int maxrows) {\n         setCurrentRowNumber(1);\n         Value v = expression.getValue(session);\n-        if (isResultSet) { //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\"\n-            return v.getResult();\n+        if (isResultSet) {\n+        //\u4f8b\u5982 \"CALL TABLE(ID INT=(1, 2), NAME VARCHAR=('Hello', 'World'))\" return v.getResult();\n+     return v.getResult();\n         }\n         LocalResult result = session.getDatabase().getResultFactory().create(session, expressions, 1, 1);\n         result.addRow(v);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}