{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3728",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3728/CountsStoreTransactionApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3728/CountsStoreTransactionApplier.java\nindex 92dbba086f7..67bd66dee0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3728/CountsStoreTransactionApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3728/CountsStoreTransactionApplier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import org.neo4j.kernel.impl.store.counts.CountsTracker;\n@@ -26,66 +27,66 @@ import org.neo4j.storageengine.api.TransactionApplicationMode;\n \n public class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n {\n-    private final TransactionApplicationMode mode;\n-    private final CountsTracker.Updater countsUpdater;\n-    private boolean haveUpdates;\n+  private final TransactionApplicationMode mode;\n+  private final CountsTracker.Updater countsUpdater;\n+  private boolean haveUpdates;\n \n-    public CountsStoreTransactionApplier( TransactionApplicationMode mode, CountsAccessor.Updater countsUpdater )\n-    {\n-        this.mode = mode;\n-        this.countsUpdater = countsUpdater;\n-    }\n+  public CountsStoreTransactionApplier(TransactionApplicationMode mode, CountsAccessor.Updater countsUpdater)\n+  {\n+    this.mode = mode;\n+    this.countsUpdater = countsUpdater;\n+  }\n \n-    @Override\n-    public void close()\n-    {\n-        assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n-        closeCountsUpdaterIfOpen();\n-    }\n+  @Override\n+  public void close()\n+  {\n+    assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n+    closeCountsUpdaterIfOpen();\n+  }\n \n-    private void closeCountsUpdaterIfOpen()\n-    {\n-        if ( countsUpdater != null )\n-        {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n-            countsUpdater.close();\n-        }\n+  private void closeCountsUpdaterIfOpen()\n+  {\n+    if (countsUpdater != null)\n+    {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n+      countsUpdater.close();\n     }\n+  }\n \n-    @Override\n-    public boolean visitNodeCountsCommand( Command.NodeCountsCommand command )\n-    {\n-        assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n-        haveUpdates = true;\n-        if ( countsUpdater != null )\n-        {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n-            countsUpdater.incrementNodeCount( command.labelId(), command.delta() );\n-        }\n-        return false;\n+  @Override\n+  public boolean visitNodeCountsCommand(Command.NodeCountsCommand command)\n+  {\n+    assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n+    haveUpdates = true;\n+    if (countsUpdater != null)\n+    {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n+      countsUpdater.incrementNodeCount(command.labelId(), command.delta());\n     }\n+    return false;\n+  }\n \n-    @Override\n-    public boolean visitRelationshipCountsCommand( Command.RelationshipCountsCommand command )\n-    {\n-        assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n-        haveUpdates = true;\n-        if ( countsUpdater != null )\n-        {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n-            countsUpdater.incrementRelationshipCount(\n-                    command.startLabelId(), command.typeId(), command.endLabelId(), command.delta() );\n-        }\n-        return false;\n+  @Override\n+  public boolean visitRelationshipCountsCommand(Command.RelationshipCountsCommand command)\n+  {\n+    assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n+    haveUpdates = true;\n+    if (countsUpdater != null)\n+    {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n+      countsUpdater.incrementRelationshipCount(\n+          command.startLabelId(), command.typeId(), command.endLabelId(), command.delta());\n     }\n+    return false;\n+  }\n \n-    @Override\n-    public boolean visitSchemaRuleCommand( SchemaRuleCommand command )\n-    {\n-        // This shows that this transaction is a schema transaction, so it cannot have commands\n-        // updating any counts anyway. Therefore the counts updater is closed right away.\n-        // This also breaks an otherwise deadlocking scenario between check pointer, this applier\n-        // and an index population thread wanting to apply index sampling to the counts store.\n-        assert !haveUpdates : \"Assumed that a schema transaction wouldn't also contain data commands affecting \" +\n-                \"counts store, but was proven wrong with this transaction\";\n-        closeCountsUpdaterIfOpen();\n-        return false;\n-    }\n+  @Override\n+  public boolean visitSchemaRuleCommand(SchemaRuleCommand command)\n+  {\n+    // This shows that this transaction is a schema transaction, so it cannot have commands\n+    // updating any counts anyway. Therefore the counts updater is closed right away.\n+    // This also breaks an otherwise deadlocking scenario between check pointer, this applier\n+    // and an index population thread wanting to apply index sampling to the counts store.\n+    assert !haveUpdates : \"Assumed that a schema transaction wouldn't also contain data commands affecting \" +\n+        \"counts store, but was proven wrong with this transaction\";\n+    closeCountsUpdaterIfOpen();\n+    return false;\n+  }\n }\n",
            "diff_size": 59
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "column": "202",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3728/CountsStoreTransactionApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3728/CountsStoreTransactionApplier.java\nindex 92dbba086f7..f0649660e96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3728/CountsStoreTransactionApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3728/CountsStoreTransactionApplier.java\n@@ -46,7 +46,8 @@ public class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n     private void closeCountsUpdaterIfOpen()\n     {\n         if ( countsUpdater != null )\n-        {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n+        {\n+    // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n             countsUpdater.close();\n         }\n     }\n@@ -57,7 +58,8 @@ public class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n         assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n         haveUpdates = true;\n         if ( countsUpdater != null )\n-        {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n+        {\n+    // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n             countsUpdater.incrementNodeCount( command.labelId(), command.delta() );\n         }\n         return false;\n@@ -69,9 +71,9 @@ public class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n         assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n         haveUpdates = true;\n         if ( countsUpdater != null )\n-        {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n-            countsUpdater.incrementRelationshipCount(\n-                    command.startLabelId(), command.typeId(), command.endLabelId(), command.delta() );\n+        {\n+    // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n+            countsUpdater.incrementRelationshipCount( command.startLabelId(), command.typeId(), command.endLabelId(), command.delta() );\n         }\n         return false;\n     }\n@@ -83,9 +85,7 @@ public class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n         // updating any counts anyway. Therefore the counts updater is closed right away.\n         // This also breaks an otherwise deadlocking scenario between check pointer, this applier\n         // and an index population thread wanting to apply index sampling to the counts store.\n-        assert !haveUpdates : \"Assumed that a schema transaction wouldn't also contain data commands affecting \" +\n-                \"counts store, but was proven wrong with this transaction\";\n-        closeCountsUpdaterIfOpen();\n+        assert !haveUpdates : \"Assumed that a schema transaction wouldn't also contain data commands affecting \" + \"counts store, but was proven wrong with this transaction\"; closeCountsUpdaterIfOpen();\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "37",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "42",
                    "column": "83",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "column": "37",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "column": "83",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "70",
                    "column": "37",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "70",
                    "column": "83",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "column": "29",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3728/CountsStoreTransactionApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3728/CountsStoreTransactionApplier.java\nindex 92dbba086f7..38234c8c664 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3728/CountsStoreTransactionApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3728/CountsStoreTransactionApplier.java\n@@ -39,7 +39,7 @@ public class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n     @Override\n     public void close()\n     {\n-        assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n+        assert countsUpdater != null|| mode == TransactionApplicationMode.RECOVERY: \"You must call begin first\";\n         closeCountsUpdaterIfOpen();\n     }\n \n@@ -54,25 +54,26 @@ public class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n     @Override\n     public boolean visitNodeCountsCommand( Command.NodeCountsCommand command )\n     {\n-        assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n+        assert countsUpdater != null|| mode == TransactionApplicationMode.RECOVERY: \"You must call begin first\";\n         haveUpdates = true;\n         if ( countsUpdater != null )\n         {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n             countsUpdater.incrementNodeCount( command.labelId(), command.delta() );\n         }\n+\n         return false;\n     }\n \n     @Override\n     public boolean visitRelationshipCountsCommand( Command.RelationshipCountsCommand command )\n     {\n-        assert countsUpdater != null || mode == TransactionApplicationMode.RECOVERY : \"You must call begin first\";\n+        assert countsUpdater != null|| mode == TransactionApplicationMode.RECOVERY: \"You must call begin first\";\n         haveUpdates = true;\n         if ( countsUpdater != null )\n         {   // CountsUpdater is null if we're in recovery and the counts store already has had this transaction applied.\n-            countsUpdater.incrementRelationshipCount(\n-                    command.startLabelId(), command.typeId(), command.endLabelId(), command.delta() );\n+            countsUpdater.incrementRelationshipCount( command.startLabelId(), command.typeId(), command.endLabelId(), command.delta() );\n         }\n+\n         return false;\n     }\n \n@@ -83,9 +84,8 @@ public class CountsStoreTransactionApplier extends TransactionApplier.Adapter\n         // updating any counts anyway. Therefore the counts updater is closed right away.\n         // This also breaks an otherwise deadlocking scenario between check pointer, this applier\n         // and an index population thread wanting to apply index sampling to the counts store.\n-        assert !haveUpdates : \"Assumed that a schema transaction wouldn't also contain data commands affecting \" +\n-                \"counts store, but was proven wrong with this transaction\";\n+        assert ! haveUpdates: \"Assumed that a schema transaction wouldn't also contain data commands affecting \" + \"counts store, but was proven wrong with this transaction\";\n         closeCountsUpdaterIfOpen();\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}