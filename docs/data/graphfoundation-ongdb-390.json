{
    "project_name": "graphfoundation-ongdb",
    "error_id": "390",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "144",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/390/ProtocolInstallerRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/390/ProtocolInstallerRepository.java\nindex 1c6d86d51b7..9172cd9719d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/390/ProtocolInstallerRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/390/ProtocolInstallerRepository.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.protocol;\n \n import java.util.ArrayList;\n@@ -33,74 +34,74 @@ import static java.util.Collections.unmodifiableMap;\n \n public class ProtocolInstallerRepository<O extends ProtocolInstaller.Orientation>\n {\n-    private final Map<ApplicationProtocol,ProtocolInstaller.Factory<O,?>> installers;\n-    private final Map<ModifierProtocol,ModifierProtocolInstaller<O>> modifiers;\n-\n-    public ProtocolInstallerRepository( Collection<ProtocolInstaller.Factory<O, ?>> installers, Collection<ModifierProtocolInstaller<O>> modifiers )\n+  private final Map<ApplicationProtocol, ProtocolInstaller.Factory<O, ?>> installers;\n+  private final Map<ModifierProtocol, ModifierProtocolInstaller<O>> modifiers;\n+\n+  public ProtocolInstallerRepository(Collection<ProtocolInstaller.Factory<O, ?>> installers, Collection<ModifierProtocolInstaller<O>> modifiers)\n+  {\n+    Map<ApplicationProtocol, ProtocolInstaller.Factory<O, ?>> tempInstallers = new HashMap<>();\n+    installers.forEach(installer -> addTo(tempInstallers, installer, installer.applicationProtocol()));\n+    this.installers = unmodifiableMap(tempInstallers);\n+\n+    Map<ModifierProtocol, ModifierProtocolInstaller<O>> tempModifierInstallers = new HashMap<>();\n+    modifiers.forEach(installer -> installer.protocols().forEach(protocol -> addTo(tempModifierInstallers, installer, protocol)));\n+    this.modifiers = unmodifiableMap(tempModifierInstallers);\n+  }\n+\n+  private <T, P extends Protocol> void addTo(Map<P, T> tempServerMap, T installer, P protocol)\n+  {\n+    T old = tempServerMap.put(protocol, installer);\n+    if (old != null)\n     {\n-        Map<ApplicationProtocol,ProtocolInstaller.Factory<O,?>> tempInstallers = new HashMap<>();\n-        installers.forEach( installer -> addTo( tempInstallers, installer, installer.applicationProtocol() ) );\n-        this.installers = unmodifiableMap( tempInstallers );\n-\n-        Map<ModifierProtocol,ModifierProtocolInstaller<O>> tempModifierInstallers = new HashMap<>();\n-        modifiers.forEach( installer -> installer.protocols().forEach( protocol -> addTo( tempModifierInstallers, installer, protocol ) ) );\n-        this.modifiers = unmodifiableMap( tempModifierInstallers );\n+      throw new IllegalArgumentException(\n+          String.format(\"Duplicate protocol installers for protocol %s: %s and %s\", protocol, installer, old)\n+      );\n     }\n+  }\n \n-    private <T, P extends Protocol> void addTo( Map<P,T> tempServerMap, T installer, P protocol )\n-    {\n-        T old = tempServerMap.put( protocol, installer );\n-        if ( old != null )\n-        {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Duplicate protocol installers for protocol %s: %s and %s\", protocol, installer, old )\n-            );\n-        }\n-    }\n+  public ProtocolInstaller<O> installerFor(ProtocolStack protocolStack)\n+  {\n+    ApplicationProtocol applicationProtocol = protocolStack.applicationProtocol();\n+    ProtocolInstaller.Factory<O, ?> protocolInstaller = installers.get(applicationProtocol);\n \n-    public ProtocolInstaller<O> installerFor( ProtocolStack protocolStack )\n-    {\n-        ApplicationProtocol applicationProtocol = protocolStack.applicationProtocol();\n-        ProtocolInstaller.Factory<O,?> protocolInstaller = installers.get( applicationProtocol );\n-\n-        ensureKnownProtocol( applicationProtocol, protocolInstaller );\n+    ensureKnownProtocol(applicationProtocol, protocolInstaller);\n \n-        return protocolInstaller.create( getModifierProtocolInstallers( protocolStack ) );\n-    }\n+    return protocolInstaller.create(getModifierProtocolInstallers(protocolStack));\n+  }\n \n-    private List<ModifierProtocolInstaller<O>> getModifierProtocolInstallers( ProtocolStack protocolStack )\n+  private List<ModifierProtocolInstaller<O>> getModifierProtocolInstallers(ProtocolStack protocolStack)\n+  {\n+    List<ModifierProtocolInstaller<O>> modifierProtocolInstallers = new ArrayList<>();\n+    for (ModifierProtocol modifierProtocol : protocolStack.modifierProtocols())\n     {\n-        List<ModifierProtocolInstaller<O>> modifierProtocolInstallers = new ArrayList<>();\n-        for ( ModifierProtocol modifierProtocol : protocolStack.modifierProtocols() )\n-        {\n-            ensureNotDuplicate( modifierProtocolInstallers, modifierProtocol );\n+      ensureNotDuplicate(modifierProtocolInstallers, modifierProtocol);\n \n-            ModifierProtocolInstaller<O> protocolInstaller = modifiers.get( modifierProtocol );\n+      ModifierProtocolInstaller<O> protocolInstaller = modifiers.get(modifierProtocol);\n \n-            ensureKnownProtocol( modifierProtocol, protocolInstaller );\n+      ensureKnownProtocol(modifierProtocol, protocolInstaller);\n \n-            modifierProtocolInstallers.add( protocolInstaller );\n-        }\n-        return modifierProtocolInstallers;\n+      modifierProtocolInstallers.add(protocolInstaller);\n     }\n-\n-    private void ensureNotDuplicate( List<ModifierProtocolInstaller<O>> modifierProtocolInstallers, ModifierProtocol modifierProtocol )\n+    return modifierProtocolInstallers;\n+  }\n+\n+  private void ensureNotDuplicate(List<ModifierProtocolInstaller<O>> modifierProtocolInstallers, ModifierProtocol modifierProtocol)\n+  {\n+    boolean duplicateIdentifier = modifierProtocolInstallers\n+        .stream()\n+        .flatMap(modifier -> modifier.protocols().stream())\n+        .anyMatch(protocol -> protocol.category().equals(modifierProtocol.category()));\n+    if (duplicateIdentifier)\n     {\n-        boolean duplicateIdentifier = modifierProtocolInstallers\n-                .stream()\n-                .flatMap( modifier -> modifier.protocols().stream() )\n-                .anyMatch( protocol -> protocol.category().equals( modifierProtocol.category() ) );\n-        if ( duplicateIdentifier )\n-        {\n-            throw new IllegalArgumentException( \"Attempted to install multiple versions of \" + modifierProtocol.category() );\n-        }\n+      throw new IllegalArgumentException(\"Attempted to install multiple versions of \" + modifierProtocol.category());\n     }\n+  }\n \n-    private void ensureKnownProtocol( Protocol protocol, Object protocolInstaller )\n+  private void ensureKnownProtocol(Protocol protocol, Object protocolInstaller)\n+  {\n+    if (protocolInstaller == null)\n     {\n-        if ( protocolInstaller == null )\n-        {\n-            throw new IllegalStateException( String.format( \"Installer for requested protocol %s does not exist\", protocol ) );\n-        }\n+      throw new IllegalStateException(String.format(\"Installer for requested protocol %s does not exist\", protocol));\n     }\n+  }\n }\n",
            "diff_size": 85
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/390/ProtocolInstallerRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/390/ProtocolInstallerRepository.java\nindex 1c6d86d51b7..86a0e48d61b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/390/ProtocolInstallerRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/390/ProtocolInstallerRepository.java\n@@ -52,9 +52,7 @@ public class ProtocolInstallerRepository<O extends ProtocolInstaller.Orientation\n         T old = tempServerMap.put( protocol, installer );\n         if ( old != null )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Duplicate protocol installers for protocol %s: %s and %s\", protocol, installer, old )\n-            );\n+            throw new IllegalArgumentException( String.format( \"Duplicate protocol installers for protocol %s: %s and %s\", protocol, installer, old ) );\n         }\n     }\n \n@@ -64,8 +62,7 @@ public class ProtocolInstallerRepository<O extends ProtocolInstaller.Orientation\n         ProtocolInstaller.Factory<O,?> protocolInstaller = installers.get( applicationProtocol );\n \n         ensureKnownProtocol( applicationProtocol, protocolInstaller );\n-\n-        return protocolInstaller.create( getModifierProtocolInstallers( protocolStack ) );\n+return protocolInstaller.create( getModifierProtocolInstallers( protocolStack ) );\n     }\n \n     private List<ModifierProtocolInstaller<O>> getModifierProtocolInstallers( ProtocolStack protocolStack )\n@@ -78,19 +75,16 @@ public class ProtocolInstallerRepository<O extends ProtocolInstaller.Orientation\n             ModifierProtocolInstaller<O> protocolInstaller = modifiers.get( modifierProtocol );\n \n             ensureKnownProtocol( modifierProtocol, protocolInstaller );\n-\n-            modifierProtocolInstallers.add( protocolInstaller );\n+modifierProtocolInstallers.add( protocolInstaller );\n         }\n-        return modifierProtocolInstallers;\n+\n+return modifierProtocolInstallers;\n     }\n \n     private void ensureNotDuplicate( List<ModifierProtocolInstaller<O>> modifierProtocolInstallers, ModifierProtocol modifierProtocol )\n     {\n-        boolean duplicateIdentifier = modifierProtocolInstallers\n-                .stream()\n-                .flatMap( modifier -> modifier.protocols().stream() )\n-                .anyMatch( protocol -> protocol.category().equals( modifierProtocol.category() ) );\n-        if ( duplicateIdentifier )\n+        boolean duplicateIdentifier = modifierProtocolInstallers.stream().flatMap( modifier -> modifier.protocols().stream() ).anyMatch( protocol -> protocol.category().equals( modifierProtocol.category() ) );\n+if ( duplicateIdentifier )\n         {\n             throw new IllegalArgumentException( \"Attempted to install multiple versions of \" + modifierProtocol.category() );\n         }\n@@ -103,4 +97,4 @@ public class ProtocolInstallerRepository<O extends ProtocolInstaller.Orientation\n             throw new IllegalStateException( String.format( \"Installer for requested protocol %s does not exist\", protocol ) );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}