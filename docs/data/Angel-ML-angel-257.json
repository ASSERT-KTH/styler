{
    "project_name": "Angel-ML-angel",
    "error_id": "257",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/257/SplitFinder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/257/SplitFinder.java\nindex d1f2d1a7f0a..df2af20bc7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/257/SplitFinder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/257/SplitFinder.java\n@@ -45,10 +45,10 @@ public class SplitFinder {\n   }\n \n   public GBTSplit findBestSplitFP(int featLo,\n-      Histogram[] histograms,\n-      FeatureInfo featureInfo,\n-      GradPair sumGradPair,\n-      float nodeGain) throws Exception {\n+                                  Histogram[] histograms,\n+                                  FeatureInfo featureInfo,\n+                                  GradPair sumGradPair,\n+                                  float nodeGain) throws Exception {\n \n     GBTSplit bestSplit = new GBTSplit();\n     for (int i = 0; i < histograms.length; i++) {\n@@ -68,8 +68,8 @@ public class SplitFinder {\n \n \n   public GBTSplit findBestSplit(int[] sampledFeats, Option<Histogram>[] histograms,\n-      FeatureInfo featureInfo,\n-      GradPair sumGradPair, float nodeGain) throws Exception {\n+                                FeatureInfo featureInfo,\n+                                GradPair sumGradPair, float nodeGain) throws Exception {\n     GBTSplit bestSplit;\n     if (param.numThread > 1) {\n       bestSplit = new GBTSplit();\n@@ -91,8 +91,9 @@ public class SplitFinder {\n   }\n \n   public GBTSplit findBestSplitOfOneFeature(int fid, boolean isCategorical, float[] splits,\n-      int defaultBin,\n-      Histogram histogram, GradPair sumGradPair, float nodeGain) {\n+                                            int defaultBin,\n+                                            Histogram histogram, GradPair sumGradPair,\n+                                            float nodeGain) {\n     if (isCategorical) {\n       return findBestSplitSet(fid, splits, defaultBin, histogram, sumGradPair, nodeGain);\n     } else {\n@@ -102,7 +103,7 @@ public class SplitFinder {\n \n   // TODO: use more schema on default bin\n   private GBTSplit findBestSplitPoint(int fid, float[] splits, int defaultBin, Histogram histogram,\n-      GradPair sumGradPair, float nodeGain) {\n+                                      GradPair sumGradPair, float nodeGain) {\n     SplitPoint splitPoint = new SplitPoint();\n     GradPair leftStat = param.numClass == 2 ? new BinaryGradPair()\n         : new MultiGradPair(param.numClass, param.fullHessian);\n@@ -127,7 +128,7 @@ public class SplitFinder {\n   }\n \n   private GBTSplit findBestSplitSet(int fid, float[] splits, int defaultBin, Histogram histogram,\n-      GradPair sumGradPair, float nodeGain) {\n+                                    GradPair sumGradPair, float nodeGain) {\n     // 1. set default bin to left child\n     GradPair leftStat = histogram.get(defaultBin).copy();\n     GradPair rightStat = null;\n@@ -197,7 +198,7 @@ public class SplitFinder {\n     private final float nodeGain;\n \n     FinderThread(int threadId, int[] sampledFeats, Option<Histogram>[] histograms,\n-        FeatureInfo featureInfo, GradPair sumGradPair, float nodeGain) {\n+                 FeatureInfo featureInfo, GradPair sumGradPair, float nodeGain) {\n       this.threadId = threadId;\n       this.sampledFeats = sampledFeats;\n       this.histograms = histograms;\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/257/SplitFinder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/257/SplitFinder.java\nindex d1f2d1a7f0a..7ddbb332963 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/257/SplitFinder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/257/SplitFinder.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.spark.ml.tree.gbdt.histogram;\n \n import com.tencent.angel.spark.ml.tree.gbdt.metadata.FeatureInfo;\n@@ -44,11 +43,9 @@ public class SplitFinder {\n     this.param = param;\n   }\n \n-  public GBTSplit findBestSplitFP(int featLo,\n-      Histogram[] histograms,\n+  public GBTSplit findBestSplitFP(int featLo, Histogram[] histograms,\n       FeatureInfo featureInfo,\n-      GradPair sumGradPair,\n-      float nodeGain) throws Exception {\n+      GradPair sumGradPair, float nodeGain) throws Exception {\n \n     GBTSplit bestSplit = new GBTSplit();\n     for (int i = 0; i < histograms.length; i++) {\n@@ -78,7 +75,7 @@ public class SplitFinder {\n       for (int threadId = 0; threadId < param.numThread; threadId++) {\n         futures[threadId] = threadPool.submit(new FinderThread(threadId,\n             sampledFeats, histograms, featureInfo, sumGradPair, nodeGain));\n-      }\n+  }\n       threadPool.shutdown();\n       for (Future<GBTSplit> future : futures) {\n         bestSplit.update(future.get());\n@@ -86,14 +83,13 @@ public class SplitFinder {\n     } else {\n       bestSplit = new FinderThread(0, sampledFeats, histograms,\n           featureInfo, sumGradPair, nodeGain).call();\n-    }\n+  }\n     return bestSplit;\n   }\n \n-  public GBTSplit findBestSplitOfOneFeature(int fid, boolean isCategorical, float[] splits,\n-      int defaultBin,\n+  public GBTSplit findBestSplitOfOneFeature(int fid, boolean isCategorical, float[] splits, int defaultBin,\n       Histogram histogram, GradPair sumGradPair, float nodeGain) {\n-    if (isCategorical) {\n+  if (isCategorical) {\n       return findBestSplitSet(fid, splits, defaultBin, histogram, sumGradPair, nodeGain);\n     } else {\n       return findBestSplitPoint(fid, splits, defaultBin, histogram, sumGradPair, nodeGain);\n@@ -104,17 +100,15 @@ public class SplitFinder {\n   private GBTSplit findBestSplitPoint(int fid, float[] splits, int defaultBin, Histogram histogram,\n       GradPair sumGradPair, float nodeGain) {\n     SplitPoint splitPoint = new SplitPoint();\n-    GradPair leftStat = param.numClass == 2 ? new BinaryGradPair()\n-        : new MultiGradPair(param.numClass, param.fullHessian);\n+    GradPair leftStat = param.numClass == 2 ? new BinaryGradPair() : new MultiGradPair(param.numClass, param.fullHessian);\n     GradPair rightStat = sumGradPair.copy();\n     GradPair bestLeftStat = null, bestRightStat = null;\n     for (int i = 0; i < histogram.getNumBin() - 1; i++) {\n       histogram.plusTo(leftStat, i);\n       histogram.subtractTo(rightStat, i);\n       if (leftStat.satisfyWeight(param) && rightStat.satisfyWeight(param)) {\n-        float lossChg = leftStat.calcGain(param) + rightStat.calcGain(param)\n-            - nodeGain - param.regLambda;\n-        if (splitPoint.needReplace(lossChg)) {\n+        float lossChg = leftStat.calcGain(param) + rightStat.calcGain(param) - nodeGain - param.regLambda;\n+if (splitPoint.needReplace(lossChg)) {\n           splitPoint.setFid(fid);\n           splitPoint.setFvalue(splits[i + 1]);\n           splitPoint.setGain(lossChg);\n@@ -157,9 +151,8 @@ public class SplitFinder {\n     if (edges.size() > 1 || curFlow != 0) { // whether all bins go to the same direction\n       rightStat = sumGradPair.subtract(leftStat);\n       if (leftStat.satisfyWeight(param) && rightStat.satisfyWeight(param)) {\n-        float splitGain = leftStat.calcGain(param) + rightStat.calcGain(param)\n-            - nodeGain - param.regLambda;\n-        if (splitGain > 0.0f) {\n+        float splitGain = leftStat.calcGain(param) + rightStat.calcGain(param) - nodeGain - param.regLambda;\n+if (splitGain > 0.0f) {\n           SplitSet splitSet = new SplitSet(fid, splitGain, Maths.floatListToArray(edges),\n               firstFlow, 0);\n           return new GBTSplit(splitSet, leftStat, rightStat);\n@@ -188,8 +181,7 @@ public class SplitFinder {\n   }\n \n   private class FinderThread implements Callable<GBTSplit> {\n-\n-    private final int threadId;\n+  private final int threadId;\n     private final int[] sampledFeats;\n     private final Option<Histogram>[] histograms;\n     private final FeatureInfo featureInfo;\n@@ -230,4 +222,4 @@ public class SplitFinder {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "216",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/257/SplitFinder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/257/SplitFinder.java\nindex d1f2d1a7f0a..c8c03dee036 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/257/SplitFinder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/257/SplitFinder.java\n@@ -37,19 +37,13 @@ import scala.Option;\n public class SplitFinder {\n \n   private static final Logger LOG = LoggerFactory.getLogger(SplitFinder.class);\n-\n   private final GBDTParam param;\n \n   public SplitFinder(GBDTParam param) {\n     this.param = param;\n   }\n \n-  public GBTSplit findBestSplitFP(int featLo,\n-      Histogram[] histograms,\n-      FeatureInfo featureInfo,\n-      GradPair sumGradPair,\n-      float nodeGain) throws Exception {\n-\n+  public GBTSplit findBestSplitFP(int featLo, Histogram[] histograms, FeatureInfo featureInfo, GradPair sumGradPair, float nodeGain) throws Exception {\n     GBTSplit bestSplit = new GBTSplit();\n     for (int i = 0; i < histograms.length; i++) {\n       if (histograms[i] != null) {\n@@ -58,41 +52,40 @@ public class SplitFinder {\n         boolean isCategorical = featureInfo.isCategorical(fid);\n         float[] splits = featureInfo.getSplits(fid);\n         int defaultBin = featureInfo.getDefaultBin(fid);\n-        GBTSplit curSplit = findBestSplitOfOneFeature(fid, isCategorical,\n-            splits, defaultBin, histogram, sumGradPair, nodeGain);\n+        GBTSplit curSplit = findBestSplitOfOneFeature(fid, isCategorical, splits, defaultBin, histogram, sumGradPair, nodeGain);\n         bestSplit.update(curSplit);\n       }\n     }\n     return bestSplit;\n   }\n \n-\n-  public GBTSplit findBestSplit(int[] sampledFeats, Option<Histogram>[] histograms,\n-      FeatureInfo featureInfo,\n-      GradPair sumGradPair, float nodeGain) throws Exception {\n+  public GBTSplit findBestSplit(int[] sampledFeats,\n+                                Option<Histogram>[] histograms,\n+                                FeatureInfo featureInfo,\n+                                GradPair sumGradPair, float nodeGain) throws Exception {\n     GBTSplit bestSplit;\n     if (param.numThread > 1) {\n       bestSplit = new GBTSplit();\n       ExecutorService threadPool = Executors.newFixedThreadPool(param.numThread);\n       Future[] futures = new Future[param.numThread];\n       for (int threadId = 0; threadId < param.numThread; threadId++) {\n-        futures[threadId] = threadPool.submit(new FinderThread(threadId,\n-            sampledFeats, histograms, featureInfo, sumGradPair, nodeGain));\n+        futures[threadId] = threadPool.submit(new FinderThread(threadId, sampledFeats, histograms, featureInfo, sumGradPair, nodeGain));\n       }\n       threadPool.shutdown();\n       for (Future<GBTSplit> future : futures) {\n         bestSplit.update(future.get());\n       }\n     } else {\n-      bestSplit = new FinderThread(0, sampledFeats, histograms,\n-          featureInfo, sumGradPair, nodeGain).call();\n+      bestSplit = new FinderThread(0, sampledFeats, histograms, featureInfo, sumGradPair, nodeGain).call();\n     }\n     return bestSplit;\n   }\n \n-  public GBTSplit findBestSplitOfOneFeature(int fid, boolean isCategorical, float[] splits,\n-      int defaultBin,\n-      Histogram histogram, GradPair sumGradPair, float nodeGain) {\n+  public GBTSplit findBestSplitOfOneFeature(int fid,\n+                                            boolean isCategorical,\n+                                            float[] splits, int defaultBin,\n+                                            Histogram histogram,\n+                                            GradPair sumGradPair, float nodeGain) {\n     if (isCategorical) {\n       return findBestSplitSet(fid, splits, defaultBin, histogram, sumGradPair, nodeGain);\n     } else {\n@@ -101,19 +94,17 @@ public class SplitFinder {\n   }\n \n   // TODO: use more schema on default bin\n-  private GBTSplit findBestSplitPoint(int fid, float[] splits, int defaultBin, Histogram histogram,\n-      GradPair sumGradPair, float nodeGain) {\n+\n+  private GBTSplit findBestSplitPoint(int fid, float[] splits, int defaultBin, Histogram histogram, GradPair sumGradPair, float nodeGain) {\n     SplitPoint splitPoint = new SplitPoint();\n-    GradPair leftStat = param.numClass == 2 ? new BinaryGradPair()\n-        : new MultiGradPair(param.numClass, param.fullHessian);\n+    GradPair leftStat = param.numClass == 2 ? new BinaryGradPair() : new MultiGradPair(param.numClass, param.fullHessian);\n     GradPair rightStat = sumGradPair.copy();\n     GradPair bestLeftStat = null, bestRightStat = null;\n     for (int i = 0; i < histogram.getNumBin() - 1; i++) {\n       histogram.plusTo(leftStat, i);\n       histogram.subtractTo(rightStat, i);\n       if (leftStat.satisfyWeight(param) && rightStat.satisfyWeight(param)) {\n-        float lossChg = leftStat.calcGain(param) + rightStat.calcGain(param)\n-            - nodeGain - param.regLambda;\n+        float lossChg = leftStat.calcGain(param) + rightStat.calcGain(param) - nodeGain - param.regLambda;\n         if (splitPoint.needReplace(lossChg)) {\n           splitPoint.setFid(fid);\n           splitPoint.setFvalue(splits[i + 1]);\n@@ -126,8 +117,7 @@ public class SplitFinder {\n     return new GBTSplit(splitPoint, bestLeftStat, bestRightStat);\n   }\n \n-  private GBTSplit findBestSplitSet(int fid, float[] splits, int defaultBin, Histogram histogram,\n-      GradPair sumGradPair, float nodeGain) {\n+  private GBTSplit findBestSplitSet(int fid, float[] splits, int defaultBin, Histogram histogram, GradPair sumGradPair, float nodeGain) {\n     // 1. set default bin to left child\n     GradPair leftStat = histogram.get(defaultBin).copy();\n     GradPair rightStat = null;\n@@ -139,29 +129,30 @@ public class SplitFinder {\n       if (i == defaultBin) {\n         continue; // skip default bin\n       }\n+\n       GradPair binGradPair = histogram.get(i);\n       int flowTo = binFlowTo(sumGradPair, leftStat, binGradPair);\n       if (flowTo == 0) {\n         leftStat.plusBy(binGradPair);\n       }\n+\n       if (firstFlow == -1) {\n         firstFlow = flowTo;\n         curFlow = flowTo;\n       } else if (flowTo != curFlow) {\n-        edges.add(splits[curSplitId]);\n-        curFlow = flowTo;\n-      }\n+               edges.add(splits[curSplitId]);\n+               curFlow = flowTo;\n+             }\n       curSplitId++;\n     }\n     // 3. create split set\n+\n     if (edges.size() > 1 || curFlow != 0) { // whether all bins go to the same direction\n       rightStat = sumGradPair.subtract(leftStat);\n       if (leftStat.satisfyWeight(param) && rightStat.satisfyWeight(param)) {\n-        float splitGain = leftStat.calcGain(param) + rightStat.calcGain(param)\n-            - nodeGain - param.regLambda;\n+        float splitGain = leftStat.calcGain(param) + rightStat.calcGain(param) - nodeGain - param.regLambda;\n         if (splitGain > 0.0f) {\n-          SplitSet splitSet = new SplitSet(fid, splitGain, Maths.floatListToArray(edges),\n-              firstFlow, 0);\n+          SplitSet splitSet = new SplitSet(fid, splitGain, Maths.floatListToArray(edges), firstFlow, 0);\n           return new GBTSplit(splitSet, leftStat, rightStat);\n         }\n       }\n@@ -169,7 +160,8 @@ public class SplitFinder {\n     return new GBTSplit();\n   }\n \n-  private int binFlowTo(GradPair sumGradPair, GradPair leftStat, GradPair binGradPair) {\n+  private int binFlowTo(\n+    GradPair sumGradPair, GradPair leftStat, GradPair binGradPair) {\n     if (param.numClass == 2) {\n       double sumGrad = ((BinaryGradPair) sumGradPair).getGrad();\n       double leftGrad = ((BinaryGradPair) leftStat).getGrad();\n@@ -196,8 +188,10 @@ public class SplitFinder {\n     private final GradPair sumGradPair;\n     private final float nodeGain;\n \n-    FinderThread(int threadId, int[] sampledFeats, Option<Histogram>[] histograms,\n-        FeatureInfo featureInfo, GradPair sumGradPair, float nodeGain) {\n+    FinderThread(int threadId, int[] sampledFeats,\n+Option<Histogram>[] histograms,\n+FeatureInfo featureInfo,\n+GradPair sumGradPair, float nodeGain) {\n       this.threadId = threadId;\n       this.sampledFeats = sampledFeats;\n       this.histograms = histograms;\n@@ -211,7 +205,6 @@ public class SplitFinder {\n       int avg = sampledFeats.length / param.numThread;\n       int from = threadId * avg;\n       int to = threadId + 1 == param.numThread ? histograms.length : from + avg;\n-\n       GBTSplit myBestSplit = new GBTSplit();\n       for (int i = from; i < to; i++) {\n         if (histograms[i].isDefined()) {\n@@ -220,14 +213,11 @@ public class SplitFinder {\n           boolean isCategorical = featureInfo.isCategorical(fid);\n           float[] splits = featureInfo.getSplits(fid);\n           int defaultBin = featureInfo.getDefaultBin(fid);\n-          GBTSplit curSplit = findBestSplitOfOneFeature(fid, isCategorical,\n-              splits, defaultBin, histogram, sumGradPair, nodeGain);\n+          GBTSplit curSplit = findBestSplitOfOneFeature(fid, isCategorical, splits, defaultBin, histogram, sumGradPair, nodeGain);\n           myBestSplit.update(curSplit);\n         }\n       }\n-\n       return myBestSplit;\n     }\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}