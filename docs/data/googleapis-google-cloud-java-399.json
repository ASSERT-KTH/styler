{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "399",
    "information": {
        "errors": [
            {
                "line": "144",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * CIDR format. Subnetwork creation is only supported for networks in \"custom subnet mode\" (i.e.\n   * {@link #getConfiguration()} returns a {@link SubnetNetworkConfiguration}) with automatic\n   * creation of subnetworks disabled (i.e. {@link SubnetNetworkConfiguration#autoCreateSubnetworks()}\n   * returns {@code false}).\n   *\n   * @return an operation object if creation request was successfully sent",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/399/Network.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/399/Network.java\nindex 26bbb1fc521..5b3087ba949 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/399/Network.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/399/Network.java\n@@ -130,7 +130,7 @@ public class Network extends NetworkInfo {\n    * Deletes this network.\n    *\n    * @return an operation object if delete request was successfully sent, {@code null} if the\n-   *     network was not found\n+   * network was not found\n    * @throws ComputeException upon failure\n    */\n   public Operation delete(OperationOption... options) {\n@@ -149,7 +149,7 @@ public class Network extends NetworkInfo {\n    * @see <a href=\"https://wikipedia.org/wiki/Classless_Inter-Domain_Routing\">CIDR</a>\n    */\n   public Operation createSubnetwork(SubnetworkId subnetworkId, String ipRange,\n-      OperationOption... options) {\n+                                    OperationOption... options) {\n     return compute.create(SubnetworkInfo.of(subnetworkId, getNetworkId(), ipRange), options);\n   }\n \n@@ -188,7 +188,7 @@ public class Network extends NetworkInfo {\n   }\n \n   static Network fromPb(Compute compute,\n-      com.google.api.services.compute.model.Network networkPb) {\n+                        com.google.api.services.compute.model.Network networkPb) {\n     return new Network(compute, new NetworkInfo.BuilderImpl(networkPb));\n   }\n }\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/399/Network.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/399/Network.java\nindex 26bbb1fc521..fe33a408a7b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/399/Network.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/399/Network.java\n@@ -191,4 +191,4 @@ public class Network extends NetworkInfo {\n       com.google.api.services.compute.model.Network networkPb) {\n     return new Network(compute, new NetworkInfo.BuilderImpl(networkPb));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/399/Network.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/399/Network.java\nindex 26bbb1fc521..3e02cdc5a12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/399/Network.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/399/Network.java\n@@ -20,7 +20,6 @@ import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.cloud.compute.Compute.NetworkOption;\n import com.google.cloud.compute.Compute.OperationOption;\n-\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.util.Objects;\n@@ -35,16 +34,18 @@ import java.util.Objects;\n  *\n  * @see <a href=\"https://cloud.google.com/compute/docs/networking\">Using Networks and Firewalls</a>\n  */\n+\n+\n public class Network extends NetworkInfo {\n \n   private static final long serialVersionUID = 8608280908101278096L;\n-\n   private final ComputeOptions options;\n   private transient Compute compute;\n \n   /**\n    * A builder for {@code Network} objects.\n    */\n+\n   public static class Builder extends NetworkInfo.Builder {\n \n     private final Compute compute;\n@@ -110,6 +111,7 @@ public class Network extends NetworkInfo {\n    * @return {@code true} if this network exists, {@code false} otherwise\n    * @throws ComputeException upon failure\n    */\n+\n   public boolean exists() {\n     return reload(NetworkOption.fields()) != null;\n   }\n@@ -122,6 +124,7 @@ public class Network extends NetworkInfo {\n    * @return a {@code Network} object with latest information or {@code null} if not found\n    * @throws ComputeException upon failure\n    */\n+\n   public Network reload(NetworkOption... options) {\n     return compute.getNetwork(getNetworkId().getNetwork(), options);\n   }\n@@ -133,6 +136,7 @@ public class Network extends NetworkInfo {\n    *     network was not found\n    * @throws ComputeException upon failure\n    */\n+\n   public Operation delete(OperationOption... options) {\n     return compute.deleteNetwork(getNetworkId().getNetwork(), options);\n   }\n@@ -148,14 +152,15 @@ public class Network extends NetworkInfo {\n    * @throws ComputeException upon failure\n    * @see <a href=\"https://wikipedia.org/wiki/Classless_Inter-Domain_Routing\">CIDR</a>\n    */\n-  public Operation createSubnetwork(SubnetworkId subnetworkId, String ipRange,\n-      OperationOption... options) {\n+\n+  public Operation createSubnetwork(SubnetworkId subnetworkId, String ipRange, OperationOption... options) {\n     return compute.create(SubnetworkInfo.of(subnetworkId, getNetworkId(), ipRange), options);\n   }\n \n   /**\n    * Returns the network's {@code Compute} object used to issue requests.\n    */\n+\n   public Compute getCompute() {\n     return compute;\n   }\n@@ -174,7 +179,8 @@ public class Network extends NetworkInfo {\n       return false;\n     }\n     Network other = (Network) obj;\n-    return Objects.equals(toPb(), other.toPb()) && Objects.equals(options, other.options);\n+    return Objects.equals(toPb(), other.toPb())\n+      && Objects.equals(options, other.options);\n   }\n \n   @Override\n@@ -187,8 +193,7 @@ public class Network extends NetworkInfo {\n     this.compute = options.getService();\n   }\n \n-  static Network fromPb(Compute compute,\n-      com.google.api.services.compute.model.Network networkPb) {\n+  static Network fromPb(Compute compute, com.google.api.services.compute.model.Network networkPb) {\n     return new Network(compute, new NetworkInfo.BuilderImpl(networkPb));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}