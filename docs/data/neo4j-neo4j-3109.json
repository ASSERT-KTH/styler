{
    "project_name": "neo4j-neo4j",
    "error_id": "3109",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "26",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "26",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3109/RandomAdversary.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3109/RandomAdversary.java\nindex a38e24c14e1..5d5d6480394 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3109/RandomAdversary.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3109/RandomAdversary.java\n@@ -17,12 +17,13 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.adversaries;\n \n /**\n  * An adversary that injects failures randomly, based on a configured probability.\n  */\n-@SuppressWarnings( \"unchecked\" )\n+@SuppressWarnings(\"unchecked\")\n public class RandomAdversary extends AbstractAdversary\n {\n     private static final double STANDARD_PROBABILITY_FACTOR = 1.0;\n@@ -31,17 +32,17 @@ public class RandomAdversary extends AbstractAdversary\n     private final double errorRate;\n     private volatile double probabilityFactor;\n \n-    public RandomAdversary( double mischiefRate, double failureRate, double errorRate )\n+    public RandomAdversary(double mischiefRate, double failureRate, double errorRate)\n     {\n         assert 0 <= mischiefRate && mischiefRate < 1.0 :\n-                \"Expected mischief rate in [0.0; 1.0[ but was \" + mischiefRate;\n+          \"Expected mischief rate in [0.0; 1.0[ but was \" + mischiefRate;\n         assert 0 <= failureRate && failureRate < 1.0 :\n-                \"Expected failure rate in [0.0; 1.0[ but was \" + failureRate;\n+          \"Expected failure rate in [0.0; 1.0[ but was \" + failureRate;\n         assert 0 <= errorRate && errorRate < 1.0 :\n-                \"Expected error rate in [0.0; 1.0[ but was \" + errorRate;\n+          \"Expected error rate in [0.0; 1.0[ but was \" + errorRate;\n         assert mischiefRate + errorRate + failureRate < 1.0 :\n-                \"Expected mischief rate + error rate + failure rate in [0.0; 1.0[ but was \" +\n-                        (mischiefRate + errorRate + failureRate);\n+          \"Expected mischief rate + error rate + failure rate in [0.0; 1.0[ but was \" +\n+            (mischiefRate + errorRate + failureRate);\n \n         this.mischiefRate = mischiefRate;\n         this.failureRate = failureRate;\n@@ -50,48 +51,48 @@ public class RandomAdversary extends AbstractAdversary\n     }\n \n     @Override\n-    public void injectFailure( Class<? extends Throwable>... failureTypes )\n+    public void injectFailure(Class<? extends Throwable>... failureTypes)\n     {\n-        maybeDoBadStuff( failureTypes, false );\n+        maybeDoBadStuff(failureTypes, false);\n     }\n \n     @Override\n-    public boolean injectFailureOrMischief( Class<? extends Throwable>... failureTypes )\n+    public boolean injectFailureOrMischief(Class<? extends Throwable>... failureTypes)\n     {\n-        return maybeDoBadStuff( failureTypes, true );\n+        return maybeDoBadStuff(failureTypes, true);\n     }\n \n-    private boolean maybeDoBadStuff( Class<? extends Throwable>[] failureTypes, boolean includingMischeif )\n+    private boolean maybeDoBadStuff(Class<? extends Throwable>[] failureTypes, boolean includingMischeif)\n     {\n         double luckyDraw = rng.nextDouble();\n         double factor = probabilityFactor;\n         boolean resetUponFailure = false;\n-        if ( factor < 0 )\n+        if (factor < 0)\n         {\n             resetUponFailure = true;\n             factor = -factor;\n         }\n \n-        if ( luckyDraw <= errorRate * factor )\n+        if (luckyDraw <= errorRate * factor)\n         {\n-            if ( resetUponFailure )\n+            if (resetUponFailure)\n             {\n                 probabilityFactor = STANDARD_PROBABILITY_FACTOR;\n             }\n-            throwOneOf( OutOfMemoryError.class, NullPointerException.class );\n+            throwOneOf(OutOfMemoryError.class, NullPointerException.class);\n         }\n-        if ( failureTypes.length > 0 && luckyDraw <= (failureRate + errorRate) * factor )\n+        if (failureTypes.length > 0 && luckyDraw <= (failureRate + errorRate) * factor)\n         {\n-            if ( resetUponFailure )\n+            if (resetUponFailure)\n             {\n                 probabilityFactor = STANDARD_PROBABILITY_FACTOR;\n             }\n-            throwOneOf( failureTypes );\n+            throwOneOf(failureTypes);\n         }\n         return includingMischeif && luckyDraw <= (mischiefRate + failureRate + errorRate) * factor;\n     }\n \n-    public void setProbabilityFactor( double factor )\n+    public void setProbabilityFactor(double factor)\n     {\n         probabilityFactor = factor;\n     }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}