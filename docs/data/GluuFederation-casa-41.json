{
    "project_name": "GluuFederation-casa",
    "error_id": "41",
    "information": {
        "errors": [
            {
                "line": "213",
                "column": "61",
                "severity": "error",
                "message": "'...' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "    }\n\n    private String getExtensionLabel(String clsName, Object ...args) {\n        String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n        return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler/41/PluginViewModel.java\nindex 9c3bf17dc52..37301fc7c2b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler/41/PluginViewModel.java\n@@ -210,7 +210,7 @@ public class PluginViewModel extends MainViewModel {\n \n     }\n \n-    private String getExtensionLabel(String clsName, Object ...args) {\n+    private String getExtensionLabel(String clsName, Object... args) {\n         String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/intellij/41/PluginViewModel.java\nindex 9c3bf17dc52..d3abece3e18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/intellij/41/PluginViewModel.java\n@@ -94,7 +94,7 @@ public class PluginViewModel extends MainViewModel {\n                     String deps = m.getMainAttributes().getValue(\"Plugin-Dependencies\");\n \n                     if (pluginList.stream().anyMatch(pl -> pl.getDescriptor().getPluginId().equals(id))) {\n-                        UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_already_existing\", new String[] { id }));\n+                        UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_already_existing\", new String[] {id}));\n                     } else if (Stream.of(id, version).allMatch(Utils::isNotEmpty)) {\n                         try {\n                             if (Utils.isNotEmpty(deps)) {\n@@ -131,20 +131,20 @@ public class PluginViewModel extends MainViewModel {\n         } else {\n             logger.info(\"Attempting to remove plugin {}\", pluginId);\n             provider = Utils.isEmpty(provider) ? Labels.getLabel(\"adm.plugins_nodata\") : provider;\n-            String msg = Labels.getLabel(\"adm.plugins_confirm_del\", new String[]{ pluginId, provider });\n+            String msg = Labels.getLabel(\"adm.plugins_confirm_del\", new String[] {pluginId, provider});\n \n             Messagebox.show(msg, null, Messagebox.YES | Messagebox.NO, Messagebox.QUESTION,\n-                    event -> {\n-                        if (Messagebox.ON_YES.equals(event.getName())) {\n-                            if (fspchecker.removePluginFile(pluginId)) {\n-                                Messagebox.show(Labels.getLabel(\"adm.plugins_undeploy_pending\"));\n-                            } else {\n-                                Messagebox.show(Labels.getLabel(\"adm.plugins_removal_failed\"));\n-                            }\n-                            pluginToShow = null;\n-                            BindUtils.postNotifyChange(PluginViewModel.this, \"pluginToShow\");\n+                event -> {\n+                    if (Messagebox.ON_YES.equals(event.getName())) {\n+                        if (fspchecker.removePluginFile(pluginId)) {\n+                            Messagebox.show(Labels.getLabel(\"adm.plugins_undeploy_pending\"));\n+                        } else {\n+                            Messagebox.show(Labels.getLabel(\"adm.plugins_removal_failed\"));\n                         }\n+                        pluginToShow = null;\n+                        BindUtils.postNotifyChange(PluginViewModel.this, \"pluginToShow\");\n                     }\n+                }\n             );\n         }\n \n@@ -191,8 +191,8 @@ public class PluginViewModel extends MainViewModel {\n \n             if (!AUTHN_METHOD.isAssignableFrom(cls)) {\n                 extList.add(getExtensionLabel(\n-                        Stream.of(cls.getInterfaces()).findFirst().map(Class::getName).orElse(\"\"),\n-                        cls.getSimpleName()));\n+                    Stream.of(cls.getInterfaces()).findFirst().map(Class::getName).orElse(\"\"),\n+                    cls.getSimpleName()));\n             }\n         }\n \n@@ -201,7 +201,7 @@ public class PluginViewModel extends MainViewModel {\n             String acr = method.getAcr();\n \n             if (Optional.ofNullable(getSettings().getAcrPluginMap().get(acr)).map(pluginId::equals).orElse(false)) {\n-                text += Labels.getLabel(\"adm.plugins_acr_handler\", new String[]{ acr });\n+                text += Labels.getLabel(\"adm.plugins_acr_handler\", new String[] {acr});\n             }\n             extList.add(getExtensionLabel(AUTHN_METHOD.getName(), text));\n         }\n@@ -210,7 +210,7 @@ public class PluginViewModel extends MainViewModel {\n \n     }\n \n-    private String getExtensionLabel(String clsName, Object ...args) {\n+    private String getExtensionLabel(String clsName, Object... args) {\n         String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "212",
                    "column": "61",
                    "severity": "error",
                    "message": "'...' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/naturalize/41/PluginViewModel.java\nindex 9c3bf17dc52..786ceb2f7ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/naturalize/41/PluginViewModel.java\n@@ -191,8 +191,7 @@ public class PluginViewModel extends MainViewModel {\n \n             if (!AUTHN_METHOD.isAssignableFrom(cls)) {\n                 extList.add(getExtensionLabel(\n-                        Stream.of(cls.getInterfaces()).findFirst().map(Class::getName).orElse(\"\"),\n-                        cls.getSimpleName()));\n+                        Stream.of(cls.getInterfaces()).findFirst().map(Class::getName).orElse(\"\"), cls.getSimpleName()));\n             }\n         }\n \n@@ -215,4 +214,4 @@ public class PluginViewModel extends MainViewModel {\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/codebuff/41/PluginViewModel.java\nindex 9c3bf17dc52..1f586ecaf31 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/codebuff/41/PluginViewModel.java\n@@ -20,7 +20,6 @@ import org.zkoss.util.media.Media;\n import org.zkoss.util.resource.Labels;\n import org.zkoss.zk.ui.select.annotation.WireVariable;\n import org.zkoss.zul.Messagebox;\n-\n import java.io.ByteArrayInputStream;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n@@ -35,10 +34,11 @@ import java.util.stream.Stream;\n /**\n  * @author jgomer\n  */\n+\n+\n public class PluginViewModel extends MainViewModel {\n \n     private static final Class<AuthnMethod> AUTHN_METHOD = AuthnMethod.class;\n-\n     private Logger logger = LoggerFactory.getLogger(getClass());\n \n     @WireVariable(\"extensionsManager\")\n@@ -46,11 +46,8 @@ public class PluginViewModel extends MainViewModel {\n \n     @WireVariable(\"fSPluginChecker\")\n     private FSPluginChecker fspchecker;\n-\n     private List<PluginData> pluginList;\n-\n     private PluginData pluginToShow;\n-\n     private boolean engineAvailable;\n \n     public List<PluginData> getPluginList() {\n@@ -84,36 +81,33 @@ public class PluginViewModel extends MainViewModel {\n             pluginToShow = null;\n             byte[] blob = media.getByteData();\n             logger.debug(\"Size of blob received: {} bytes\", blob.length);\n-\n             try (JarInputStream jis = new JarInputStream(new ByteArrayInputStream(blob), false)) {\n-\n                 Manifest m = jis.getManifest();\n                 if (m != null) {\n                     String id = m.getMainAttributes().getValue(\"Plugin-Id\");\n                     String version = m.getMainAttributes().getValue(\"Plugin-Version\");\n                     String deps = m.getMainAttributes().getValue(\"Plugin-Dependencies\");\n-\n                     if (pluginList.stream().anyMatch(pl -> pl.getDescriptor().getPluginId().equals(id))) {\n                         UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_already_existing\", new String[] { id }));\n                     } else if (Stream.of(id, version).allMatch(Utils::isNotEmpty)) {\n-                        try {\n-                            if (Utils.isNotEmpty(deps)) {\n-                                logger.warn(\"This plugin reports dependencies. This feature is not available in Gluu Casa\");\n-                                logger.warn(\"Your plugin may not work properly\");\n-                            }\n+\n+                               try {\n+                                   if (Utils.isNotEmpty(deps)) {\n+                                       logger.warn(\"This plugin reports dependencies. This feature is not available in Gluu Casa\");\n+                                       logger.warn(\"Your plugin may not work properly\");\n+                                   }\n                             //Copy the jar to plugins dir\n-                            Files.write(Paths.get(extManager.getPluginsRoot().toString(), media.getName()), blob, StandardOpenOption.CREATE_NEW);\n-                            logger.info(\"Plugin jar file copied to app plugins directory\");\n-                            Messagebox.show(Labels.getLabel(\"adm.plugins_deploy_pending\"));\n-                        } catch (Exception e) {\n-                            logger.error(e.getMessage(), e);\n-                            UIUtils.showMessageUI(false);\n-                        }\n+                                   Files.write(Paths.get(extManager.getPluginsRoot().toString(), media.getName()), blob, StandardOpenOption.CREATE_NEW);\n+                                   logger.info(\"Plugin jar file copied to app plugins directory\");\n+                                   Messagebox.show(Labels.getLabel(\"adm.plugins_deploy_pending\"));\n+                               } catch (Exception e) {\n+                                   logger.error(e.getMessage(), e);\n+                                   UIUtils.showMessageUI(false);\n+                               }\n                     } else {\n-                        UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_invalid_plugin\"));\n-                        logger.error(\"Plugin's manifest file missing ID and/or Version\");\n+                               UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_invalid_plugin\"));\n+                               logger.error(\"Plugin's manifest file missing ID and/or Version\");\n                     }\n-\n                 } else {\n                     UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_invalid_plugin\"));\n                     logger.error(\"Jar file with no manifest file\");\n@@ -122,30 +116,29 @@ public class PluginViewModel extends MainViewModel {\n         } catch (Exception e) {\n             logger.error(e.getMessage(), e);\n         }\n-    }\n \n-    public void deletePlugin(@BindingParam(\"id\") String pluginId, @BindingParam(\"provider\") String provider) {\n+    }\n \n+    public void deletePlugin(@BindingParam(\"id\") String pluginId,\n+                             @BindingParam(\"provider\") String provider) {\n         if (getSettings().getAcrPluginMap().values().contains(pluginId)) {\n             Messagebox.show(Labels.getLabel(\"adm.plugin_plugin_bound_method\"), null, Messagebox.OK, Messagebox.EXCLAMATION);\n         } else {\n             logger.info(\"Attempting to remove plugin {}\", pluginId);\n             provider = Utils.isEmpty(provider) ? Labels.getLabel(\"adm.plugins_nodata\") : provider;\n-            String msg = Labels.getLabel(\"adm.plugins_confirm_del\", new String[]{ pluginId, provider });\n-\n+            String msg = Labels.getLabel(\"adm.plugins_confirm_del\", new String[] { pluginId, provider });\n             Messagebox.show(msg, null, Messagebox.YES | Messagebox.NO, Messagebox.QUESTION,\n-                    event -> {\n-                        if (Messagebox.ON_YES.equals(event.getName())) {\n-                            if (fspchecker.removePluginFile(pluginId)) {\n-                                Messagebox.show(Labels.getLabel(\"adm.plugins_undeploy_pending\"));\n-                            } else {\n-                                Messagebox.show(Labels.getLabel(\"adm.plugins_removal_failed\"));\n-                            }\n-                            pluginToShow = null;\n-                            BindUtils.postNotifyChange(PluginViewModel.this, \"pluginToShow\");\n+                event -> {\n+                    if (Messagebox.ON_YES.equals(event.getName())) {\n+                        if (fspchecker.removePluginFile(pluginId)) {\n+                            Messagebox.show(Labels.getLabel(\"adm.plugins_undeploy_pending\"));\n+                        } else {\n+                            Messagebox.show(Labels.getLabel(\"adm.plugins_removal_failed\"));\n                         }\n+                        pluginToShow = null;\n+                        BindUtils.postNotifyChange(PluginViewModel.this, \"pluginToShow\");\n                     }\n-            );\n+                });\n         }\n \n     }\n@@ -156,15 +149,12 @@ public class PluginViewModel extends MainViewModel {\n     }\n \n     private PluginData buildPluginData(PluginWrapper pw) {\n-\n         PluginDescriptor pluginDescriptor = pw.getDescriptor();\n         logger.debug(\"Building a PluginData instance for plugin {}\", pw.getPluginId());\n         PluginData pl = new PluginData();\n-\n         PluginState plState = pw.getPluginState();\n         //In practice resolved (that is, just loaded not started) could be seen as stopped\n         plState = plState.equals(PluginState.RESOLVED) ? PluginState.STOPPED : plState;\n-\n         pl.setState(Labels.getLabel(\"adm.plugins_state.\" + plState.toString()));\n         pl.setPath(pw.getPluginPath().toString());\n         pl.setDescriptor(pluginDescriptor);\n@@ -173,13 +163,10 @@ public class PluginViewModel extends MainViewModel {\n             //pf4j doesn't give any info if not in started state\n             pl.setExtensions(buildExtensionList(pw));\n         }\n-\n         return pl;\n-\n     }\n \n     private List<String> buildExtensionList(PluginWrapper wrapper) {\n-\n         List<String> extList = new ArrayList<>();\n         PluginManager manager = wrapper.getPluginManager();\n         String pluginId = wrapper.getPluginId();\n@@ -188,31 +175,24 @@ public class PluginViewModel extends MainViewModel {\n         //plugin manager's getExtension methods outputs data only when the plugin is already started! (not simply loaded)\n         for (Object obj : manager.getExtensions(pluginId)) {\n             Class cls = obj.getClass();\n-\n             if (!AUTHN_METHOD.isAssignableFrom(cls)) {\n-                extList.add(getExtensionLabel(\n-                        Stream.of(cls.getInterfaces()).findFirst().map(Class::getName).orElse(\"\"),\n-                        cls.getSimpleName()));\n+                extList.add(getExtensionLabel(Stream.of(cls.getInterfaces()).findFirst().map(Class::getName).orElse(\"\"), cls.getSimpleName()));\n             }\n         }\n-\n         for (AuthnMethod method : manager.getExtensions(AUTHN_METHOD, pluginId)) {\n             String text = Labels.getLabel(method.getUINameKey());\n             String acr = method.getAcr();\n-\n             if (Optional.ofNullable(getSettings().getAcrPluginMap().get(acr)).map(pluginId::equals).orElse(false)) {\n-                text += Labels.getLabel(\"adm.plugins_acr_handler\", new String[]{ acr });\n+                text += Labels.getLabel(\"adm.plugins_acr_handler\", new String[] { acr });\n             }\n             extList.add(getExtensionLabel(AUTHN_METHOD.getName(), text));\n         }\n-\n         return extList;\n-\n     }\n \n-    private String getExtensionLabel(String clsName, Object ...args) {\n+    private String getExtensionLabel(String clsName, Object... args) {\n         String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 61
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_random/41/PluginViewModel.java\nindex 9c3bf17dc52..37301fc7c2b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_random/41/PluginViewModel.java\n@@ -210,7 +210,7 @@ public class PluginViewModel extends MainViewModel {\n \n     }\n \n-    private String getExtensionLabel(String clsName, Object ...args) {\n+    private String getExtensionLabel(String clsName, Object... args) {\n         String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_three_grams/41/PluginViewModel.java\nindex 9c3bf17dc52..0f1817fa8c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/41/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_three_grams/41/PluginViewModel.java\n@@ -210,7 +210,7 @@ public class PluginViewModel extends MainViewModel {\n \n     }\n \n-    private String getExtensionLabel(String clsName, Object ...args) {\n+    private String getExtensionLabel(String clsName, Object...args) {\n         String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}