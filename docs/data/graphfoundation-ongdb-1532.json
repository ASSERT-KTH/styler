{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1532",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1532/ConversationManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1532/ConversationManager.java\nindex 6e70b6567ba..d0bd0db2f55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1532/ConversationManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1532/ConversationManager.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha.com.master;\n \n import java.util.Collections;\n@@ -40,129 +41,132 @@ import static org.neo4j.scheduler.JobScheduler.Groups.slaveLocksTimeout;\n /**\n  * Manages {@link Conversation} on master-side in HA.\n  * It's expected to have one instance of {@link ConversationManager} on master.\n- *\n+ * <p>\n  * Used for keeping and monitoring clients {@link Conversation} on master side.\n  */\n public class ConversationManager extends LifecycleAdapter\n {\n-    private static final int DEFAULT_TX_TIMEOUT_ADDITION = 5 * 1000;\n-    private static final int UNFINISHED_CONVERSATION_CLEANUP_DELAY = 1_000;\n-\n-    private final int activityCheckIntervalMillis;\n-    private final int lockTimeoutAddition;\n-    private final Config config;\n-    private final ConversationSPI spi;\n-    private final Factory<Conversation> conversationFactory =  new Factory<Conversation>()\n-    {\n-        @Override\n-        public Conversation newInstance()\n-        {\n-            return new Conversation( spi.acquireClient() );\n-        }\n-    };\n-\n-    TimedRepository<RequestContext,Conversation> conversations;\n-    private JobScheduler.JobHandle staleReaperJob;\n-\n-    /**\n-     * Build conversation manager with default values for activity check interval and timeout addition.\n-     * @param spi - conversation manager spi\n-     * @param config - ha settings\n-     */\n-    public ConversationManager( ConversationSPI spi, Config config )\n-    {\n-        this( spi, config, UNFINISHED_CONVERSATION_CLEANUP_DELAY, DEFAULT_TX_TIMEOUT_ADDITION );\n-    }\n-\n-    /**\n-     * Build conversation manager\n-     * @param spi - conversation manager spi\n-     * @param config - ha settings\n-     * @param activityCheckIntervalMillis - interval between conversations activity checking\n-     * @param lockTimeoutAddition - addition to read timeout used to build conversation timeout\n-     */\n-    public ConversationManager( ConversationSPI spi, Config config, int activityCheckIntervalMillis, int\n-            lockTimeoutAddition )\n-    {\n-        this.spi = spi;\n-        this.config = config;\n-        this.activityCheckIntervalMillis = activityCheckIntervalMillis;\n-        this.lockTimeoutAddition = lockTimeoutAddition;\n-    }\n-\n+  private static final int DEFAULT_TX_TIMEOUT_ADDITION = 5 * 1000;\n+  private static final int UNFINISHED_CONVERSATION_CLEANUP_DELAY = 1_000;\n+\n+  private final int activityCheckIntervalMillis;\n+  private final int lockTimeoutAddition;\n+  private final Config config;\n+  private final ConversationSPI spi;\n+  private final Factory<Conversation> conversationFactory = new Factory<Conversation>()\n+  {\n     @Override\n-    public void start()\n+    public Conversation newInstance()\n     {\n-        conversations = createConversationStore();\n-        staleReaperJob = spi.scheduleRecurringJob( slaveLocksTimeout, activityCheckIntervalMillis,\n-                conversations );\n+      return new Conversation(spi.acquireClient());\n     }\n-\n-    @Override\n-    public void stop()\n-    {\n-        staleReaperJob.cancel( false );\n-        conversations = null;\n-    }\n-\n-    public Conversation acquire( RequestContext context ) throws NoSuchEntryException, ConcurrentAccessException\n-    {\n-        return conversations.acquire( context );\n-    }\n-\n-    public void release( RequestContext context )\n-    {\n-        conversations.release( context );\n-    }\n-\n-    public void begin( RequestContext context ) throws ConcurrentAccessException\n-    {\n-        conversations.begin( context );\n-    }\n-\n-    public void end( RequestContext context )\n-    {\n-        conversations.end( context );\n-    }\n-\n-    public Set<RequestContext> getActiveContexts()\n-    {\n-        return conversations != null ? conversations.keys() : Collections.emptySet() ;\n-    }\n-\n-    /**\n-     * Stop conversation for specified context.\n-     * Conversation will still hold all already acquired locks, but will release all waiters and it will be\n-     * impossible to get new locks out of it.\n-     * @param context - context for which conversation should be stopped\n-     */\n-    public void stop( RequestContext context )\n-    {\n-        Conversation conversation = conversations.end( context );\n-        if ( conversation != null && conversation.isActive() )\n-        {\n-            conversation.stop();\n-        }\n-    }\n-\n-    public Conversation acquire()\n-    {\n-        return getConversationFactory().newInstance();\n-    }\n-\n-    protected TimedRepository<RequestContext,Conversation> createConversationStore()\n-    {\n-        return new TimedRepository<>( getConversationFactory(), getConversationReaper(),\n-                config.get( lock_read_timeout ).toMillis() + lockTimeoutAddition, Clocks.systemClock() );\n-    }\n-\n-    protected Consumer<Conversation> getConversationReaper()\n-    {\n-        return Conversation::close;\n-    }\n-\n-    protected Factory<Conversation> getConversationFactory()\n+  };\n+\n+  TimedRepository<RequestContext, Conversation> conversations;\n+  private JobScheduler.JobHandle staleReaperJob;\n+\n+  /**\n+   * Build conversation manager with default values for activity check interval and timeout addition.\n+   *\n+   * @param spi    - conversation manager spi\n+   * @param config - ha settings\n+   */\n+  public ConversationManager(ConversationSPI spi, Config config)\n+  {\n+    this(spi, config, UNFINISHED_CONVERSATION_CLEANUP_DELAY, DEFAULT_TX_TIMEOUT_ADDITION);\n+  }\n+\n+  /**\n+   * Build conversation manager\n+   *\n+   * @param spi                         - conversation manager spi\n+   * @param config                      - ha settings\n+   * @param activityCheckIntervalMillis - interval between conversations activity checking\n+   * @param lockTimeoutAddition         - addition to read timeout used to build conversation timeout\n+   */\n+  public ConversationManager(ConversationSPI spi, Config config, int activityCheckIntervalMillis, int\n+      lockTimeoutAddition)\n+  {\n+    this.spi = spi;\n+    this.config = config;\n+    this.activityCheckIntervalMillis = activityCheckIntervalMillis;\n+    this.lockTimeoutAddition = lockTimeoutAddition;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    conversations = createConversationStore();\n+    staleReaperJob = spi.scheduleRecurringJob(slaveLocksTimeout, activityCheckIntervalMillis,\n+        conversations);\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    staleReaperJob.cancel(false);\n+    conversations = null;\n+  }\n+\n+  public Conversation acquire(RequestContext context) throws NoSuchEntryException, ConcurrentAccessException\n+  {\n+    return conversations.acquire(context);\n+  }\n+\n+  public void release(RequestContext context)\n+  {\n+    conversations.release(context);\n+  }\n+\n+  public void begin(RequestContext context) throws ConcurrentAccessException\n+  {\n+    conversations.begin(context);\n+  }\n+\n+  public void end(RequestContext context)\n+  {\n+    conversations.end(context);\n+  }\n+\n+  public Set<RequestContext> getActiveContexts()\n+  {\n+    return conversations != null ? conversations.keys() : Collections.emptySet();\n+  }\n+\n+  /**\n+   * Stop conversation for specified context.\n+   * Conversation will still hold all already acquired locks, but will release all waiters and it will be\n+   * impossible to get new locks out of it.\n+   *\n+   * @param context - context for which conversation should be stopped\n+   */\n+  public void stop(RequestContext context)\n+  {\n+    Conversation conversation = conversations.end(context);\n+    if (conversation != null && conversation.isActive())\n     {\n-        return conversationFactory;\n+      conversation.stop();\n     }\n+  }\n+\n+  public Conversation acquire()\n+  {\n+    return getConversationFactory().newInstance();\n+  }\n+\n+  protected TimedRepository<RequestContext, Conversation> createConversationStore()\n+  {\n+    return new TimedRepository<>(getConversationFactory(), getConversationReaper(),\n+        config.get(lock_read_timeout).toMillis() + lockTimeoutAddition, Clocks.systemClock());\n+  }\n+\n+  protected Consumer<Conversation> getConversationReaper()\n+  {\n+    return Conversation::close;\n+  }\n+\n+  protected Factory<Conversation> getConversationFactory()\n+  {\n+    return conversationFactory;\n+  }\n }\n",
            "diff_size": 158
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1532/ConversationManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1532/ConversationManager.java\nindex 6e70b6567ba..84f08a63f88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1532/ConversationManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1532/ConversationManager.java\n@@ -52,7 +52,7 @@ public class ConversationManager extends LifecycleAdapter\n     private final int lockTimeoutAddition;\n     private final Config config;\n     private final ConversationSPI spi;\n-    private final Factory<Conversation> conversationFactory =  new Factory<Conversation>()\n+    private final Factory<Conversation> conversationFactory = new Factory<Conversation>()\n     {\n         @Override\n         public Conversation newInstance()\n@@ -81,8 +81,7 @@ public class ConversationManager extends LifecycleAdapter\n      * @param activityCheckIntervalMillis - interval between conversations activity checking\n      * @param lockTimeoutAddition - addition to read timeout used to build conversation timeout\n      */\n-    public ConversationManager( ConversationSPI spi, Config config, int activityCheckIntervalMillis, int\n-            lockTimeoutAddition )\n+    public ConversationManager( ConversationSPI spi, Config config, int activityCheckIntervalMillis, int lockTimeoutAddition )\n     {\n         this.spi = spi;\n         this.config = config;\n@@ -127,7 +126,7 @@ public class ConversationManager extends LifecycleAdapter\n \n     public Set<RequestContext> getActiveContexts()\n     {\n-        return conversations != null ? conversations.keys() : Collections.emptySet() ;\n+        return conversations != null ? conversations.keys() : Collections.emptySet();\n     }\n \n     /**\n@@ -152,8 +151,7 @@ public class ConversationManager extends LifecycleAdapter\n \n     protected TimedRepository<RequestContext,Conversation> createConversationStore()\n     {\n-        return new TimedRepository<>( getConversationFactory(), getConversationReaper(),\n-                config.get( lock_read_timeout ).toMillis() + lockTimeoutAddition, Clocks.systemClock() );\n+        return new TimedRepository<>( getConversationFactory(), getConversationReaper(), config.get( lock_read_timeout ).toMillis() + lockTimeoutAddition, Clocks.systemClock() );\n     }\n \n     protected Consumer<Conversation> getConversationReaper()\n@@ -165,4 +163,4 @@ public class ConversationManager extends LifecycleAdapter\n     {\n         return conversationFactory;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}