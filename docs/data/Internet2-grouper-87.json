{
    "project_name": "Internet2-grouper",
    "error_id": "87",
    "information": {
        "errors": [
            {
                "line": "58",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "        return literal;\n    }\n    \n    /** {@inheritDoc} */\n    @Override\n    protected boolean isConstant(boolean literal) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler/87/ASTNumberLiteral.java\nindex a8525b2a649..5393da10703 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler/87/ASTNumberLiteral.java\n@@ -55,7 +55,7 @@ public class ASTNumberLiteral extends JexlNode implements JexlNode.Literal<Numbe\n     public Number getLiteral() {\r\n         return literal;\r\n     }\r\n-    \r\n+\r\n     /** {@inheritDoc} */\r\n     @Override\r\n     protected boolean isConstant(boolean literal) {\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/87/ASTNumberLiteral.java\nindex a8525b2a649..4df1cafe6cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/87/ASTNumberLiteral.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -29,143 +29,144 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.parser;\r\n \r\n import java.math.BigDecimal;\r\n import java.math.BigInteger;\r\n \r\n public class ASTNumberLiteral extends JexlNode implements JexlNode.Literal<Number> {\r\n-    /** The type literal value. */\r\n-    Number literal = null;\r\n-    /** The expected class. */\r\n-    Class<?> clazz = null;\r\n+  /** The type literal value. */\r\n+  Number literal = null;\r\n+  /** The expected class. */\r\n+  Class<?> clazz = null;\r\n \r\n-    public ASTNumberLiteral(int id) {\r\n-        super(id);\r\n-    }\r\n+  public ASTNumberLiteral(int id) {\r\n+    super(id);\r\n+  }\r\n \r\n-    public ASTNumberLiteral(Parser p, int id) {\r\n-        super(p, id);\r\n-    }\r\n+  public ASTNumberLiteral(Parser p, int id) {\r\n+    super(p, id);\r\n+  }\r\n \r\n-    /**\r\n-     * Gets the literal value.\r\n-     * @return the number literal\r\n-     */\r\n-    public Number getLiteral() {\r\n-        return literal;\r\n-    }\r\n-    \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    protected boolean isConstant(boolean literal) {\r\n-        return true;\r\n-    }\r\n+  /**\r\n+   * Gets the literal value.\r\n+   * @return the number literal\r\n+   */\r\n+  public Number getLiteral() {\r\n+    return literal;\r\n+  }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object jjtAccept(ParserVisitor visitor, Object data) {\r\n-        return visitor.visit(this, data);\r\n-    }\r\n+  /** {@inheritDoc} */\r\n+  @Override\r\n+  protected boolean isConstant(boolean literal) {\r\n+    return true;\r\n+  }\r\n \r\n-    public Class<?> getLiteralClass() {\r\n-        return clazz;\r\n-    }\r\n+  /** {@inheritDoc} */\r\n+  @Override\r\n+  public Object jjtAccept(ParserVisitor visitor, Object data) {\r\n+    return visitor.visit(this, data);\r\n+  }\r\n \r\n-    public boolean isInteger() {\r\n-        return Integer.class.equals(clazz);\r\n-    }\r\n+  public Class<?> getLiteralClass() {\r\n+    return clazz;\r\n+  }\r\n \r\n-    /**\r\n-     * Sets this node as a natural literal.\r\n-     * Originally from OGNL.\r\n-     * @param s the natural as string\r\n-     */\r\n-    public void setNatural(String s) {\r\n-        Number result;\r\n-        Class<?> rclass;\r\n-        // determine the base\r\n-        final int base;\r\n-        if (s.charAt(0) == '0') {\r\n-            if ((s.length() > 1 && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))) {\r\n-                base = 16;\r\n-                s = s.substring(2); // Trim the 0x off the front\r\n-            } else {\r\n-                base = 8;\r\n-            }\r\n-        } else {\r\n-            base = 10;\r\n-        }\r\n-        final int last = s.length() - 1;\r\n-        switch (s.charAt(last)) {\r\n-            case 'l':\r\n-            case 'L': {\r\n-                rclass = Long.class;\r\n-                result = Long.valueOf(s.substring(0, last), base);\r\n-                break;\r\n-            }\r\n-            case 'h':\r\n-            case 'H': {\r\n-                rclass = BigInteger.class;\r\n-                result = new BigInteger(s.substring(0, last), base);\r\n-                break;\r\n-            }\r\n-            default: {\r\n-                rclass = Integer.class;\r\n-                try {\r\n-                    result = Integer.valueOf(s, base);\r\n-                } catch (NumberFormatException take2) {\r\n-                    try {\r\n-                        result = Long.valueOf(s, base);\r\n-                    } catch (NumberFormatException take3) {\r\n-                        result = new BigInteger(s, base);\r\n-                    }\r\n-                }\r\n-            }\r\n+  public boolean isInteger() {\r\n+    return Integer.class.equals(clazz);\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets this node as a natural literal.\r\n+   * Originally from OGNL.\r\n+   * @param s the natural as string\r\n+   */\r\n+  public void setNatural(String s) {\r\n+    Number result;\r\n+    Class<?> rclass;\r\n+    // determine the base\r\n+    final int base;\r\n+    if (s.charAt(0) == '0') {\r\n+      if ((s.length() > 1 && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))) {\r\n+        base = 16;\r\n+        s = s.substring(2); // Trim the 0x off the front\r\n+      } else {\r\n+        base = 8;\r\n+      }\r\n+    } else {\r\n+      base = 10;\r\n+    }\r\n+    final int last = s.length() - 1;\r\n+    switch (s.charAt(last)) {\r\n+      case 'l':\r\n+      case 'L': {\r\n+        rclass = Long.class;\r\n+        result = Long.valueOf(s.substring(0, last), base);\r\n+        break;\r\n+      }\r\n+      case 'h':\r\n+      case 'H': {\r\n+        rclass = BigInteger.class;\r\n+        result = new BigInteger(s.substring(0, last), base);\r\n+        break;\r\n+      }\r\n+      default: {\r\n+        rclass = Integer.class;\r\n+        try {\r\n+          result = Integer.valueOf(s, base);\r\n+        } catch (NumberFormatException take2) {\r\n+          try {\r\n+            result = Long.valueOf(s, base);\r\n+          } catch (NumberFormatException take3) {\r\n+            result = new BigInteger(s, base);\r\n+          }\r\n         }\r\n-        literal = result;\r\n-        clazz = rclass;\r\n+      }\r\n     }\r\n+    literal = result;\r\n+    clazz = rclass;\r\n+  }\r\n \r\n-    /**\r\n-     * Sets this node as a real literal.\r\n-     * Originally from OGNL.\r\n-     * @param s the real as string\r\n-     */\r\n-    public void setReal(String s) {\r\n-        Number result;\r\n-        Class<?> rclass;\r\n-        final int last = s.length() - 1;\r\n-        switch (s.charAt(last)) {\r\n-            case 'b':\r\n-            case 'B': {\r\n-                result = new BigDecimal(s.substring(0, last));\r\n-                rclass = BigDecimal.class;\r\n-                break;\r\n-            }\r\n-            case 'd':\r\n-            case 'D': {\r\n-                rclass = Double.class;\r\n-                result = Double.valueOf(s);\r\n-                break;\r\n-            }\r\n-            case 'f':\r\n-            case 'F':\r\n-            default: {\r\n-                rclass = Float.class;\r\n-                try {\r\n-                    result = Float.valueOf(s);\r\n-                } catch (NumberFormatException take2) {\r\n-                    try {\r\n-                        result = Double.valueOf(s);\r\n-                    } catch (NumberFormatException take3) {\r\n-                        result = new BigDecimal(s);\r\n-                    }\r\n-                }\r\n-                break;\r\n-            }\r\n+  /**\r\n+   * Sets this node as a real literal.\r\n+   * Originally from OGNL.\r\n+   * @param s the real as string\r\n+   */\r\n+  public void setReal(String s) {\r\n+    Number result;\r\n+    Class<?> rclass;\r\n+    final int last = s.length() - 1;\r\n+    switch (s.charAt(last)) {\r\n+      case 'b':\r\n+      case 'B': {\r\n+        result = new BigDecimal(s.substring(0, last));\r\n+        rclass = BigDecimal.class;\r\n+        break;\r\n+      }\r\n+      case 'd':\r\n+      case 'D': {\r\n+        rclass = Double.class;\r\n+        result = Double.valueOf(s);\r\n+        break;\r\n+      }\r\n+      case 'f':\r\n+      case 'F':\r\n+      default: {\r\n+        rclass = Float.class;\r\n+        try {\r\n+          result = Float.valueOf(s);\r\n+        } catch (NumberFormatException take2) {\r\n+          try {\r\n+            result = Double.valueOf(s);\r\n+          } catch (NumberFormatException take3) {\r\n+            result = new BigDecimal(s);\r\n+          }\r\n         }\r\n-        literal = result;\r\n-        clazz = rclass;\r\n+        break;\r\n+      }\r\n     }\r\n+    literal = result;\r\n+    clazz = rclass;\r\n+  }\r\n }\r\n",
            "diff_size": 136
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/87/ASTNumberLiteral.java\nindex a8525b2a649..28d4a0b37e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/87/ASTNumberLiteral.java\n@@ -54,10 +54,10 @@ public class ASTNumberLiteral extends JexlNode implements JexlNode.Literal<Numbe\n      */\r\n     public Number getLiteral() {\r\n         return literal;\r\n-    }\r\n-    \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n+    }\n+\n+/** {@inheritDoc} */\n+@Override\r\n     protected boolean isConstant(boolean literal) {\r\n         return true;\r\n     }\r\n@@ -98,14 +98,14 @@ public class ASTNumberLiteral extends JexlNode implements JexlNode.Literal<Numbe\n         }\r\n         final int last = s.length() - 1;\r\n         switch (s.charAt(last)) {\r\n-            case 'l':\r\n-            case 'L': {\r\n+            case 'l':\n+    case 'L': {\r\n                 rclass = Long.class;\r\n                 result = Long.valueOf(s.substring(0, last), base);\r\n                 break;\r\n             }\r\n-            case 'h':\r\n-            case 'H': {\r\n+            case 'h':\n+    case 'H': {\r\n                 rclass = BigInteger.class;\r\n                 result = new BigInteger(s.substring(0, last), base);\r\n                 break;\r\n@@ -137,21 +137,21 @@ public class ASTNumberLiteral extends JexlNode implements JexlNode.Literal<Numbe\n         Class<?> rclass;\r\n         final int last = s.length() - 1;\r\n         switch (s.charAt(last)) {\r\n-            case 'b':\r\n-            case 'B': {\r\n+            case 'b':\n+    case 'B': {\r\n                 result = new BigDecimal(s.substring(0, last));\r\n                 rclass = BigDecimal.class;\r\n                 break;\r\n             }\r\n-            case 'd':\r\n-            case 'D': {\r\n+            case 'd':\n+    case 'D': {\r\n                 rclass = Double.class;\r\n                 result = Double.valueOf(s);\r\n                 break;\r\n             }\r\n-            case 'f':\r\n-            case 'F':\r\n-            default: {\r\n+            case 'f':\n+    case 'F':\n+    default: {\r\n                 rclass = Float.class;\r\n                 try {\r\n                     result = Float.valueOf(s);\r\n@@ -168,4 +168,4 @@ public class ASTNumberLiteral extends JexlNode implements JexlNode.Literal<Numbe\n         literal = result;\r\n         clazz = rclass;\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "117",
                    "column": "17",
                    "severity": "warning",
                    "message": "'{' at column 17 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "124",
                    "column": "17",
                    "severity": "warning",
                    "message": "'{' at column 17 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "131",
                    "column": "17",
                    "severity": "warning",
                    "message": "'{' at column 17 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "164",
                    "column": "17",
                    "severity": "warning",
                    "message": "'{' at column 17 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "171",
                    "column": "17",
                    "severity": "warning",
                    "message": "'{' at column 17 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "178",
                    "column": "17",
                    "severity": "warning",
                    "message": "'{' at column 17 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/87/ASTNumberLiteral.java\nindex a8525b2a649..bd855e51bd8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/87/ASTNumberLiteral.java\n@@ -29,143 +29,169 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.parser;\r\n-\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-\r\n+package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.parser;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+\n public class ASTNumberLiteral extends JexlNode implements JexlNode.Literal<Number> {\r\n-    /** The type literal value. */\r\n+    /** The type literal value. */\n     Number literal = null;\r\n-    /** The expected class. */\r\n-    Class<?> clazz = null;\r\n-\r\n-    public ASTNumberLiteral(int id) {\r\n-        super(id);\r\n-    }\r\n-\r\n-    public ASTNumberLiteral(Parser p, int id) {\r\n-        super(p, id);\r\n+    /** The expected class. */\n+    Class<?> clazz = null;\n+\n+    public ASTNumberLiteral(int id) {\n+    super(id);\n+    }\n+\n+    public ASTNumberLiteral(Parser p, int id) {\n+    super(p, id);\n     }\r\n \r\n     /**\r\n      * Gets the literal value.\r\n      * @return the number literal\r\n-     */\r\n-    public Number getLiteral() {\r\n-        return literal;\r\n+     */\n+\n+\n+\n+    public Number getLiteral() {\n+        return literal;\n     }\r\n     \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    protected boolean isConstant(boolean literal) {\r\n-        return true;\r\n+    /** {@inheritDoc} */\n+\n+\n+    @Override\n+    protected boolean isConstant(boolean literal) {\n+        return true;\n     }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object jjtAccept(ParserVisitor visitor, Object data) {\r\n-        return visitor.visit(this, data);\r\n-    }\r\n-\r\n-    public Class<?> getLiteralClass() {\r\n-        return clazz;\r\n-    }\r\n-\r\n-    public boolean isInteger() {\r\n-        return Integer.class.equals(clazz);\r\n+    /** {@inheritDoc} */\n+\n+\n+    @Override\n+    public Object jjtAccept(ParserVisitor visitor, Object data) {\n+        return visitor.visit(this, data);\n+    }\n+\n+\n+    public Class<?> getLiteralClass() {\n+        return clazz;\n+    }\n+\n+\n+    public boolean isInteger() {\n+        return Integer.class.equals(clazz);\n     }\r\n \r\n     /**\r\n      * Sets this node as a natural literal.\r\n      * Originally from OGNL.\r\n      * @param s the natural as string\r\n-     */\r\n-    public void setNatural(String s) {\r\n-        Number result;\r\n+     */\n+\n+\n+    public void setNatural(String s) {\n+        Number result;\n         Class<?> rclass;\r\n-        // determine the base\r\n-        final int base;\r\n-        if (s.charAt(0) == '0') {\r\n-            if ((s.length() > 1 && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))) {\r\n-                base = 16;\r\n-                s = s.substring(2); // Trim the 0x off the front\r\n-            } else {\r\n-                base = 8;\r\n-            }\r\n-        } else {\r\n-            base = 10;\r\n-        }\r\n-        final int last = s.length() - 1;\r\n-        switch (s.charAt(last)) {\r\n-            case 'l':\r\n-            case 'L': {\r\n-                rclass = Long.class;\r\n-                result = Long.valueOf(s.substring(0, last), base);\r\n-                break;\r\n-            }\r\n-            case 'h':\r\n-            case 'H': {\r\n-                rclass = BigInteger.class;\r\n-                result = new BigInteger(s.substring(0, last), base);\r\n-                break;\r\n-            }\r\n-            default: {\r\n-                rclass = Integer.class;\r\n-                try {\r\n-                    result = Integer.valueOf(s, base);\r\n-                } catch (NumberFormatException take2) {\r\n-                    try {\r\n-                        result = Long.valueOf(s, base);\r\n-                    } catch (NumberFormatException take3) {\r\n-                        result = new BigInteger(s, base);\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        literal = result;\r\n-        clazz = rclass;\r\n+        // determine the base\n+        final int base;\n+\n+        if (s.charAt(0) == '0') {\n+            if ((s.length() > 1\n+                 && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))) {\n+                base = 16;\n+                s = s.substring(2); // Trim the 0x off the front\n+            } else {\n+                base = 8;\n+            }\n+        } else {\n+            base = 10;\n+        }\n+        final int last = s.length() - 1;\n+\n+        switch (s.charAt(last)) {\n+            case 'l': case 'L':\n+                {\n+                    rclass = Long.class;\n+                    result = Long.valueOf(s.substring(0, last), base);\n+                    break;\n+                }\n+\n+            case 'h': case 'H':\n+                {\n+                    rclass = BigInteger.class;\n+                    result = new BigInteger(s.substring(0, last), base);\n+                    break;\n+                }\n+\n+            default:\n+                {\n+                    rclass = Integer.class;\n+\n+                    try {\n+                        result = Integer.valueOf(s, base);\n+                    } catch (NumberFormatException take2) {\n+                        try {\n+                            result = Long.valueOf(s, base);\n+                        } catch (NumberFormatException take3) {\n+                            result = new BigInteger(s, base);\n+                        }\n+                    }\n+                }\n+        }\n+\n+        literal = result;\n+        clazz = rclass;\n     }\r\n \r\n     /**\r\n      * Sets this node as a real literal.\r\n      * Originally from OGNL.\r\n      * @param s the real as string\r\n-     */\r\n-    public void setReal(String s) {\r\n-        Number result;\r\n-        Class<?> rclass;\r\n-        final int last = s.length() - 1;\r\n-        switch (s.charAt(last)) {\r\n-            case 'b':\r\n-            case 'B': {\r\n-                result = new BigDecimal(s.substring(0, last));\r\n-                rclass = BigDecimal.class;\r\n-                break;\r\n-            }\r\n-            case 'd':\r\n-            case 'D': {\r\n-                rclass = Double.class;\r\n-                result = Double.valueOf(s);\r\n-                break;\r\n-            }\r\n-            case 'f':\r\n-            case 'F':\r\n-            default: {\r\n-                rclass = Float.class;\r\n-                try {\r\n-                    result = Float.valueOf(s);\r\n-                } catch (NumberFormatException take2) {\r\n-                    try {\r\n-                        result = Double.valueOf(s);\r\n-                    } catch (NumberFormatException take3) {\r\n-                        result = new BigDecimal(s);\r\n-                    }\r\n-                }\r\n-                break;\r\n-            }\r\n-        }\r\n-        literal = result;\r\n-        clazz = rclass;\r\n-    }\r\n-}\r\n+     */\n+\n+\n+    public void setReal(String s) {\n+        Number result;\n+        Class<?> rclass;\n+        final int last = s.length() - 1;\n+\n+        switch (s.charAt(last)) {\n+            case 'b': case 'B':\n+                {\n+                    result = new BigDecimal(s.substring(0, last));\n+                    rclass = BigDecimal.class;\n+                    break;\n+                }\n+\n+            case 'd': case 'D':\n+                {\n+                    rclass = Double.class;\n+                    result = Double.valueOf(s);\n+                    break;\n+                }\n+\n+            case 'f': case 'F': default:\n+                {\n+                    rclass = Float.class;\n+\n+                    try {\n+                        result = Float.valueOf(s);\n+                    } catch (NumberFormatException take2) {\n+                        try {\n+                            result = Double.valueOf(s);\n+                        } catch (NumberFormatException take3) {\n+                            result = new BigDecimal(s);\n+                        }\n+                    }\n+                    break;\n+                }\n+        }\n+\n+        literal = result;\n+        clazz = rclass;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 142
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_random/87/ASTNumberLiteral.java\nindex a8525b2a649..5393da10703 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_random/87/ASTNumberLiteral.java\n@@ -55,7 +55,7 @@ public class ASTNumberLiteral extends JexlNode implements JexlNode.Literal<Numbe\n     public Number getLiteral() {\r\n         return literal;\r\n     }\r\n-    \r\n+\r\n     /** {@inheritDoc} */\r\n     @Override\r\n     protected boolean isConstant(boolean literal) {\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_three_grams/87/ASTNumberLiteral.java\nindex a8525b2a649..5393da10703 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/87/ASTNumberLiteral.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_three_grams/87/ASTNumberLiteral.java\n@@ -55,7 +55,7 @@ public class ASTNumberLiteral extends JexlNode implements JexlNode.Literal<Numbe\n     public Number getLiteral() {\r\n         return literal;\r\n     }\r\n-    \r\n+\r\n     /** {@inheritDoc} */\r\n     @Override\r\n     protected boolean isConstant(boolean literal) {\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}