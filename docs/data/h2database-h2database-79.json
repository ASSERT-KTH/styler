{
    "project_name": "h2database-h2database",
    "error_id": "79",
    "information": {
        "errors": [
            {
                "line": "164",
                "column": "72",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "                        newModified = true;\n                    } else if (dependentTable.getSchema() != this) {\n                        throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n                                obj.getTraceSQL(), dependentTable.getTraceSQL());\n                    } else if (!modified) {\n                        dependentTable.removeColumnExpressionsDependencies(session);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/79/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/79/Schema.java\nindex 3d95518a140..e2e40172e8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/79/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/79/Schema.java\n@@ -161,8 +161,9 @@ public class Schema extends DbObjectBase {\n                         database.removeSchemaObject(session, obj);\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n-                        throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n-                                obj.getTraceSQL(), dependentTable.getTraceSQL());\n+                        throw DbException.get(ErrorCode.CANNOT_DROP_2,\n+                                //\n+                                 obj.getTraceSQL(), dependentTable.getTraceSQL());\n                     } else if (!modified) {\n                         dependentTable.removeColumnExpressionsDependencies(session);\n                         dependentTable.setModified();\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "168",
                    "column": "72",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/79/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/79/Schema.java\nindex 3d95518a140..7d1ebc3edef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/79/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/79/Schema.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.schema;\n \n import java.util.ArrayList;\n@@ -66,15 +67,15 @@ public class Schema extends DbObjectBase {\n     /**\n      * Create a new schema object.\n      *\n-     * @param database the database\n-     * @param id the object id\n+     * @param database   the database\n+     * @param id         the object id\n      * @param schemaName the schema name\n-     * @param owner the owner of the schema\n-     * @param system if this is a system schema (such a schema can not be\n-     *            dropped)\n+     * @param owner      the owner of the schema\n+     * @param system     if this is a system schema (such a schema can not be\n+     *                   dropped)\n      */\n     public Schema(Database database, int id, String schemaName, User owner,\n-            boolean system) {\n+                  boolean system) {\n         super(database, id, schemaName, Trace.SCHEMA);\n         tablesAndViews = database.newConcurrentStringMap();\n         domains = database.newConcurrentStringMap();\n@@ -109,7 +110,8 @@ public class Schema extends DbObjectBase {\n         if (system) {\n             return null;\n         }\n-        StringBuilder builder = new StringBuilder(\"CREATE SCHEMA IF NOT EXISTS \");\n+        StringBuilder builder =\n+                new StringBuilder(\"CREATE SCHEMA IF NOT EXISTS \");\n         getSQL(builder, DEFAULT_SQL_FLAGS).append(\" AUTHORIZATION \");\n         owner.getSQL(builder, DEFAULT_SQL_FLAGS);\n         return builder.toString();\n@@ -126,8 +128,10 @@ public class Schema extends DbObjectBase {\n      * @return {@code true} if this schema is empty, {@code false} otherwise\n      */\n     public boolean isEmpty() {\n-        return tablesAndViews.isEmpty() && domains.isEmpty() && synonyms.isEmpty() && indexes.isEmpty()\n-                && sequences.isEmpty() && triggers.isEmpty() && constraints.isEmpty() && constants.isEmpty()\n+        return tablesAndViews.isEmpty() && domains.isEmpty() &&\n+                synonyms.isEmpty() && indexes.isEmpty()\n+                && sequences.isEmpty() && triggers.isEmpty() &&\n+                constraints.isEmpty() && constants.isEmpty()\n                 && functions.isEmpty() && aggregates.isEmpty();\n     }\n \n@@ -162,9 +166,11 @@ public class Schema extends DbObjectBase {\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n                         throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n-                                obj.getTraceSQL(), dependentTable.getTraceSQL());\n+                                obj.getTraceSQL(),\n+                                dependentTable.getTraceSQL());\n                     } else if (!modified) {\n-                        dependentTable.removeColumnExpressionsDependencies(session);\n+                        dependentTable\n+                                .removeColumnExpressionsDependencies(session);\n                         dependentTable.setModified();\n                         database.updateMeta(session, dependentTable);\n                     }\n@@ -188,7 +194,8 @@ public class Schema extends DbObjectBase {\n         invalidate();\n     }\n \n-    private void removeChildrenFromMap(Session session, ConcurrentHashMap<String, ? extends SchemaObject> map) {\n+    private void removeChildrenFromMap(Session session,\n+                                       ConcurrentHashMap<String, ? extends SchemaObject> map) {\n         if (!map.isEmpty()) {\n             for (SchemaObject obj : map.values()) {\n                 // Database.removeSchemaObject() removes the object from\n@@ -218,6 +225,7 @@ public class Schema extends DbObjectBase {\n \n     /**\n      * Set table engine params of this schema.\n+     *\n      * @param tableEngineParams default table engine params\n      */\n     public void setTableEngineParams(ArrayList<String> tableEngineParams) {\n@@ -228,38 +236,38 @@ public class Schema extends DbObjectBase {\n     private Map<String, SchemaObject> getMap(int type) {\n         Map<String, ? extends SchemaObject> result;\n         switch (type) {\n-        case DbObject.TABLE_OR_VIEW:\n-            result = tablesAndViews;\n-            break;\n-        case DbObject.DOMAIN:\n-            result = domains;\n-            break;\n-        case DbObject.SYNONYM:\n-            result = synonyms;\n-            break;\n-        case DbObject.SEQUENCE:\n-            result = sequences;\n-            break;\n-        case DbObject.INDEX:\n-            result = indexes;\n-            break;\n-        case DbObject.TRIGGER:\n-            result = triggers;\n-            break;\n-        case DbObject.CONSTRAINT:\n-            result = constraints;\n-            break;\n-        case DbObject.CONSTANT:\n-            result = constants;\n-            break;\n-        case DbObject.FUNCTION_ALIAS:\n-            result = functions;\n-            break;\n-        case DbObject.AGGREGATE:\n-            result = aggregates;\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n+            case DbObject.TABLE_OR_VIEW:\n+                result = tablesAndViews;\n+                break;\n+            case DbObject.DOMAIN:\n+                result = domains;\n+                break;\n+            case DbObject.SYNONYM:\n+                result = synonyms;\n+                break;\n+            case DbObject.SEQUENCE:\n+                result = sequences;\n+                break;\n+            case DbObject.INDEX:\n+                result = indexes;\n+                break;\n+            case DbObject.TRIGGER:\n+                result = triggers;\n+                break;\n+            case DbObject.CONSTRAINT:\n+                result = constraints;\n+                break;\n+            case DbObject.CONSTANT:\n+                result = constants;\n+                break;\n+            case DbObject.FUNCTION_ALIAS:\n+                result = functions;\n+                break;\n+            case DbObject.AGGREGATE:\n+                result = aggregates;\n+                break;\n+            default:\n+                throw DbException.throwInternalError(\"type=\" + type);\n         }\n         return (Map<String, SchemaObject>) result;\n     }\n@@ -286,7 +294,7 @@ public class Schema extends DbObjectBase {\n     /**\n      * Rename an object.\n      *\n-     * @param obj the object to rename\n+     * @param obj     the object to rename\n      * @param newName the new name\n      */\n     public void rename(SchemaObject obj, String newName) {\n@@ -297,7 +305,8 @@ public class Schema extends DbObjectBase {\n                 DbException.throwInternalError(\"not found: \" + obj.getName());\n             }\n             if (obj.getName().equals(newName) || map.containsKey(newName)) {\n-                DbException.throwInternalError(\"object already exists: \" + newName);\n+                DbException.throwInternalError(\n+                        \"object already exists: \" + newName);\n             }\n         }\n         obj.checkRename();\n@@ -314,7 +323,7 @@ public class Schema extends DbObjectBase {\n      * returned. Synonyms are not returned or resolved.\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Table findTableOrView(Session session, String name) {\n@@ -332,7 +341,7 @@ public class Schema extends DbObjectBase {\n      * synonym is returned\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Table resolveTableOrView(Session session, String name) {\n@@ -360,10 +369,8 @@ public class Schema extends DbObjectBase {\n     /**\n      * Get objects of the given type.\n      *\n-     * @param type\n-     *                  the object type\n-     * @param name\n-     *                  the name of the object\n+     * @param type the object type\n+     * @param name the name of the object\n      * @return the object, or null\n      */\n     public SchemaObject find(int type, String name) {\n@@ -385,7 +392,7 @@ public class Schema extends DbObjectBase {\n      * no object with this name exists.\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Index findIndex(Session session, String name) {\n@@ -423,7 +430,7 @@ public class Schema extends DbObjectBase {\n      * object with this name exists.\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Constraint findConstraint(Session session, String name) {\n@@ -481,22 +488,26 @@ public class Schema extends DbObjectBase {\n     }\n \n     private String getUniqueName(DbObject obj,\n-            Map<String, ? extends SchemaObject> map, String prefix) {\n-        String hash = StringUtils.toUpperEnglish(Integer.toHexString(obj.getName().hashCode()));\n+                                 Map<String, ? extends SchemaObject> map,\n+                                 String prefix) {\n+        String hash = StringUtils\n+                .toUpperEnglish(Integer.toHexString(obj.getName().hashCode()));\n         String name = null;\n         synchronized (temporaryUniqueNames) {\n             for (int i = 1, len = hash.length(); i < len; i++) {\n                 name = prefix + hash.substring(0, i);\n-                if (!map.containsKey(name) && !temporaryUniqueNames.contains(name)) {\n+                if (!map.containsKey(name) &&\n+                        !temporaryUniqueNames.contains(name)) {\n                     break;\n                 }\n                 name = null;\n             }\n             if (name == null) {\n                 prefix = prefix + hash + \"_\";\n-                for (int i = 0;; i++) {\n+                for (int i = 0; ; i++) {\n                     name = prefix + i;\n-                    if (!map.containsKey(name) && !temporaryUniqueNames.contains(name)) {\n+                    if (!map.containsKey(name) &&\n+                            !temporaryUniqueNames.contains(name)) {\n                         break;\n                     }\n                 }\n@@ -510,7 +521,7 @@ public class Schema extends DbObjectBase {\n      * Create a unique constraint name.\n      *\n      * @param session the session\n-     * @param table the constraint table\n+     * @param table   the constraint table\n      * @return the unique name\n      */\n     public String getUniqueConstraintName(Session session, Table table) {\n@@ -527,10 +538,11 @@ public class Schema extends DbObjectBase {\n      * Create a unique constraint name.\n      *\n      * @param session the session\n-     * @param domain the constraint domain\n+     * @param domain  the constraint domain\n      * @return the unique name\n      */\n-    public String getUniqueDomainConstraintName(Session session, Domain domain) {\n+    public String getUniqueDomainConstraintName(Session session,\n+                                                Domain domain) {\n         return getUniqueName(domain, constraints, \"CONSTRAINT_\");\n     }\n \n@@ -538,11 +550,12 @@ public class Schema extends DbObjectBase {\n      * Create a unique index name.\n      *\n      * @param session the session\n-     * @param table the indexed table\n-     * @param prefix the index name prefix\n+     * @param table   the indexed table\n+     * @param prefix  the index name prefix\n      * @return the unique name\n      */\n-    public String getUniqueIndexName(Session session, Table table, String prefix) {\n+    public String getUniqueIndexName(Session session, Table table,\n+                                     String prefix) {\n         Map<String, Index> tableIndexes;\n         if (table.isTemporary() && !table.isGlobalTemporary()) {\n             tableIndexes = session.getLocalTempTableIndexes();\n@@ -557,7 +570,7 @@ public class Schema extends DbObjectBase {\n      * Local temporary tables are also returned.\n      *\n      * @param session the session\n-     * @param name the table or view name\n+     * @param name    the table or view name\n      * @return the table or view\n      * @throws DbException if no such object exists\n      */\n@@ -568,7 +581,8 @@ public class Schema extends DbObjectBase {\n                 table = session.findLocalTempTable(name);\n             }\n             if (table == null) {\n-                throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, name);\n+                throw DbException\n+                        .get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, name);\n             }\n         }\n         return table;\n@@ -652,11 +666,10 @@ public class Schema extends DbObjectBase {\n     /**\n      * Get all objects.\n      *\n-     * @param addTo\n-     *                  list to add objects to, or {@code null} to allocate a new\n-     *                  list\n+     * @param addTo list to add objects to, or {@code null} to allocate a new\n+     *              list\n      * @return the specified list with added objects, or a new (possibly empty) list\n-     *         with all objects\n+     * with all objects\n      */\n     public ArrayList<SchemaObject> getAll(ArrayList<SchemaObject> addTo) {\n         if (addTo == null) {\n@@ -678,15 +691,14 @@ public class Schema extends DbObjectBase {\n     /**\n      * Get all objects of the given type.\n      *\n-     * @param type\n-     *                  the object type\n-     * @param addTo\n-     *                  list to add objects to, or {@code null} to allocate a new\n-     *                  list\n+     * @param type  the object type\n+     * @param addTo list to add objects to, or {@code null} to allocate a new\n+     *              list\n      * @return the specified list with added objects, or a new (possibly empty) list\n-     *         with objects of the given type\n+     * with objects of the given type\n      */\n-    public ArrayList<SchemaObject> getAll(int type, ArrayList<SchemaObject> addTo) {\n+    public ArrayList<SchemaObject> getAll(int type,\n+                                          ArrayList<SchemaObject> addTo) {\n         Collection<SchemaObject> values = getMap(type).values();\n         if (addTo != null) {\n             addTo.addAll(values);\n@@ -766,7 +778,8 @@ public class Schema extends DbObjectBase {\n                 if (data.tableEngineParams == null) {\n                     data.tableEngineParams = this.tableEngineParams;\n                 }\n-                return database.getTableEngine(data.tableEngine).createTable(data);\n+                return database.getTableEngine(data.tableEngine)\n+                        .createTable(data);\n             }\n             return new PageStoreTable(data);\n         }\n@@ -789,21 +802,23 @@ public class Schema extends DbObjectBase {\n     /**\n      * Add a linked table to the schema.\n      *\n-     * @param id the object id\n-     * @param tableName the table name of the alias\n-     * @param driver the driver class name\n-     * @param url the database URL\n-     * @param user the user name\n-     * @param password the password\n+     * @param id             the object id\n+     * @param tableName      the table name of the alias\n+     * @param driver         the driver class name\n+     * @param url            the database URL\n+     * @param user           the user name\n+     * @param password       the password\n      * @param originalSchema the schema name of the target table\n-     * @param originalTable the table name of the target table\n-     * @param emitUpdates if updates should be emitted instead of delete/insert\n-     * @param force create the object even if the database can not be accessed\n+     * @param originalTable  the table name of the target table\n+     * @param emitUpdates    if updates should be emitted instead of delete/insert\n+     * @param force          create the object even if the database can not be accessed\n      * @return the {@link TableLink} object\n      */\n     public TableLink createTableLink(int id, String tableName, String driver,\n-            String url, String user, String password, String originalSchema,\n-            String originalTable, boolean emitUpdates, boolean force) {\n+                                     String url, String user, String password,\n+                                     String originalSchema,\n+                                     String originalTable, boolean emitUpdates,\n+                                     boolean force) {\n         synchronized (database) {\n             return new TableLink(this, id, tableName,\n                     driver, url, user, password,\n",
            "diff_size": 110
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/79/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/79/Schema.java\nindex 3d95518a140..e2e40172e8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/79/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/79/Schema.java\n@@ -161,8 +161,9 @@ public class Schema extends DbObjectBase {\n                         database.removeSchemaObject(session, obj);\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n-                        throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n-                                obj.getTraceSQL(), dependentTable.getTraceSQL());\n+                        throw DbException.get(ErrorCode.CANNOT_DROP_2,\n+                                //\n+                                 obj.getTraceSQL(), dependentTable.getTraceSQL());\n                     } else if (!modified) {\n                         dependentTable.removeColumnExpressionsDependencies(session);\n                         dependentTable.setModified();\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/79/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/79/Schema.java\nindex 3d95518a140..a6f715ebbc2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/79/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/79/Schema.java\n@@ -161,8 +161,9 @@ public class Schema extends DbObjectBase {\n                         database.removeSchemaObject(session, obj);\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n-                        throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n-                                obj.getTraceSQL(), dependentTable.getTraceSQL());\n+                        throw DbException.get(ErrorCode.CANNOT_DROP_2,\n+                            //\n+                                 obj.getTraceSQL(), dependentTable.getTraceSQL());\n                     } else if (!modified) {\n                         dependentTable.removeColumnExpressionsDependencies(session);\n                         dependentTable.setModified();\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}