{
    "project_name": "apache-ignite-3",
    "error_id": "43",
    "information": {
        "errors": [
            {
                "line": "129",
                "column": "5",
                "severity": "error",
                "message": "'METHOD_DEF' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n    @Override\n    public String toString() {\n        return \"RpcOptions{\" + \"rpcConnectTimeoutMs=\" + rpcConnectTimeoutMs + \", rpcDefaultTimeout=\"\n            + rpcDefaultTimeout + \", rpcInstallSnapshotTimeout=\" + rpcInstallSnapshotTimeout",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/43/RpcOptions.java\nindex 5eed700698a..3861aef7123 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/43/RpcOptions.java\n@@ -125,7 +125,6 @@ public class RpcOptions {\n         this.clientExecutor = clientExecutor;\n     }\n \n-\n     @Override\n     public String toString() {\n         return \"RpcOptions{\" + \"rpcConnectTimeoutMs=\" + rpcConnectTimeoutMs + \", rpcDefaultTimeout=\"\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "130",
                    "column": "3",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/43/RpcOptions.java\nindex 5eed700698a..c7e9220d6c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/43/RpcOptions.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.ignite.raft.jraft.option;\n \n import com.codahale.metrics.MetricRegistry;\n@@ -21,116 +22,116 @@ import java.util.concurrent.ExecutorService;\n import org.apache.ignite.raft.jraft.rpc.RpcClient;\n \n public class RpcOptions {\n-    /**\n-     * Rpc handshake timeout in milliseconds Default: 2000(1s)\n-     */\n-    private int rpcConnectTimeoutMs = 2000; // TODO asch rename to handshake timeout IGNITE-14832.\n-\n-    /**\n-     * RPC request default timeout in milliseconds Default: 5000(5s)\n-     */\n-    private int rpcDefaultTimeout = 5000;\n-\n-    /**\n-     * Install snapshot RPC request default timeout in milliseconds Default: 5 * 60 * 1000(5min)\n-     */\n-    private int rpcInstallSnapshotTimeout = 5 * 60 * 1000;\n-\n-    /**\n-     * RPC process thread pool size Default: 80\n-     */\n-    private int rpcProcessorThreadPoolSize = 80;\n-\n-    /**\n-     * Whether to enable checksum for RPC. Default: false\n-     */\n-    private boolean enableRpcChecksum = false;\n-\n-    /**\n-     * Client instance.\n-     */\n-    private RpcClient rpcClient;\n-\n-    /**\n-     * The client executor is used by RPC client.\n-     */\n-    private ExecutorService clientExecutor;\n-\n-    /**\n-     * Metric registry for RPC services, user should not use this field.\n-     */\n-    private MetricRegistry metricRegistry;\n-\n-    public int getRpcConnectTimeoutMs() {\n-        return this.rpcConnectTimeoutMs;\n-    }\n-\n-    public void setRpcConnectTimeoutMs(int rpcConnectTimeoutMs) {\n-        this.rpcConnectTimeoutMs = rpcConnectTimeoutMs;\n-    }\n-\n-    public int getRpcDefaultTimeout() {\n-        return this.rpcDefaultTimeout;\n-    }\n-\n-    public void setRpcDefaultTimeout(int rpcDefaultTimeout) {\n-        this.rpcDefaultTimeout = rpcDefaultTimeout;\n-    }\n-\n-    public int getRpcInstallSnapshotTimeout() {\n-        return rpcInstallSnapshotTimeout;\n-    }\n-\n-    public void setRpcInstallSnapshotTimeout(int rpcInstallSnapshotTimeout) {\n-        this.rpcInstallSnapshotTimeout = rpcInstallSnapshotTimeout;\n-    }\n-\n-    public int getRpcProcessorThreadPoolSize() {\n-        return this.rpcProcessorThreadPoolSize;\n-    }\n-\n-    public void setRpcProcessorThreadPoolSize(int rpcProcessorThreadPoolSize) {\n-        this.rpcProcessorThreadPoolSize = rpcProcessorThreadPoolSize;\n-    }\n-\n-    public boolean isEnableRpcChecksum() {\n-        return enableRpcChecksum;\n-    }\n-\n-    public void setEnableRpcChecksum(boolean enableRpcChecksum) {\n-        this.enableRpcChecksum = enableRpcChecksum;\n-    }\n-\n-    public MetricRegistry getMetricRegistry() {\n-        return metricRegistry;\n-    }\n-\n-    public void setMetricRegistry(MetricRegistry metricRegistry) {\n-        this.metricRegistry = metricRegistry;\n-    }\n-\n-    public RpcClient getRpcClient() {\n-        return rpcClient;\n-    }\n-\n-    public void setRpcClient(RpcClient rpcClient) {\n-        this.rpcClient = rpcClient;\n-    }\n-\n-    public ExecutorService getClientExecutor() {\n-        return clientExecutor;\n-    }\n-\n-    public void setClientExecutor(ExecutorService clientExecutor) {\n-        this.clientExecutor = clientExecutor;\n-    }\n-\n-\n-    @Override\n-    public String toString() {\n-        return \"RpcOptions{\" + \"rpcConnectTimeoutMs=\" + rpcConnectTimeoutMs + \", rpcDefaultTimeout=\"\n-            + rpcDefaultTimeout + \", rpcInstallSnapshotTimeout=\" + rpcInstallSnapshotTimeout\n-            + \", rpcProcessorThreadPoolSize=\" + rpcProcessorThreadPoolSize + \", enableRpcChecksum=\"\n-            + enableRpcChecksum + \", metricRegistry=\" + metricRegistry + '}';\n-    }\n+  /**\n+   * Rpc handshake timeout in milliseconds Default: 2000(1s)\n+   */\n+  private int rpcConnectTimeoutMs = 2000; // TODO asch rename to handshake timeout IGNITE-14832.\n+\n+  /**\n+   * RPC request default timeout in milliseconds Default: 5000(5s)\n+   */\n+  private int rpcDefaultTimeout = 5000;\n+\n+  /**\n+   * Install snapshot RPC request default timeout in milliseconds Default: 5 * 60 * 1000(5min)\n+   */\n+  private int rpcInstallSnapshotTimeout = 5 * 60 * 1000;\n+\n+  /**\n+   * RPC process thread pool size Default: 80\n+   */\n+  private int rpcProcessorThreadPoolSize = 80;\n+\n+  /**\n+   * Whether to enable checksum for RPC. Default: false\n+   */\n+  private boolean enableRpcChecksum = false;\n+\n+  /**\n+   * Client instance.\n+   */\n+  private RpcClient rpcClient;\n+\n+  /**\n+   * The client executor is used by RPC client.\n+   */\n+  private ExecutorService clientExecutor;\n+\n+  /**\n+   * Metric registry for RPC services, user should not use this field.\n+   */\n+  private MetricRegistry metricRegistry;\n+\n+  public int getRpcConnectTimeoutMs() {\n+    return this.rpcConnectTimeoutMs;\n+  }\n+\n+  public void setRpcConnectTimeoutMs(int rpcConnectTimeoutMs) {\n+    this.rpcConnectTimeoutMs = rpcConnectTimeoutMs;\n+  }\n+\n+  public int getRpcDefaultTimeout() {\n+    return this.rpcDefaultTimeout;\n+  }\n+\n+  public void setRpcDefaultTimeout(int rpcDefaultTimeout) {\n+    this.rpcDefaultTimeout = rpcDefaultTimeout;\n+  }\n+\n+  public int getRpcInstallSnapshotTimeout() {\n+    return rpcInstallSnapshotTimeout;\n+  }\n+\n+  public void setRpcInstallSnapshotTimeout(int rpcInstallSnapshotTimeout) {\n+    this.rpcInstallSnapshotTimeout = rpcInstallSnapshotTimeout;\n+  }\n+\n+  public int getRpcProcessorThreadPoolSize() {\n+    return this.rpcProcessorThreadPoolSize;\n+  }\n+\n+  public void setRpcProcessorThreadPoolSize(int rpcProcessorThreadPoolSize) {\n+    this.rpcProcessorThreadPoolSize = rpcProcessorThreadPoolSize;\n+  }\n+\n+  public boolean isEnableRpcChecksum() {\n+    return enableRpcChecksum;\n+  }\n+\n+  public void setEnableRpcChecksum(boolean enableRpcChecksum) {\n+    this.enableRpcChecksum = enableRpcChecksum;\n+  }\n+\n+  public MetricRegistry getMetricRegistry() {\n+    return metricRegistry;\n+  }\n+\n+  public void setMetricRegistry(MetricRegistry metricRegistry) {\n+    this.metricRegistry = metricRegistry;\n+  }\n+\n+  public RpcClient getRpcClient() {\n+    return rpcClient;\n+  }\n+\n+  public void setRpcClient(RpcClient rpcClient) {\n+    this.rpcClient = rpcClient;\n+  }\n+\n+  public ExecutorService getClientExecutor() {\n+    return clientExecutor;\n+  }\n+\n+  public void setClientExecutor(ExecutorService clientExecutor) {\n+    this.clientExecutor = clientExecutor;\n+  }\n+\n+\n+  @Override\n+  public String toString() {\n+    return \"RpcOptions{\" + \"rpcConnectTimeoutMs=\" + rpcConnectTimeoutMs + \", rpcDefaultTimeout=\"\n+        + rpcDefaultTimeout + \", rpcInstallSnapshotTimeout=\" + rpcInstallSnapshotTimeout\n+        + \", rpcProcessorThreadPoolSize=\" + rpcProcessorThreadPoolSize + \", enableRpcChecksum=\"\n+        + enableRpcChecksum + \", metricRegistry=\" + metricRegistry + '}';\n+  }\n }\n",
            "diff_size": 113
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/43/RpcOptions.java\nindex 5eed700698a..bda7226c60b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/43/RpcOptions.java\n@@ -125,12 +125,8 @@ public class RpcOptions {\n         this.clientExecutor = clientExecutor;\n     }\n \n-\n-    @Override\n+@Override\n     public String toString() {\n-        return \"RpcOptions{\" + \"rpcConnectTimeoutMs=\" + rpcConnectTimeoutMs + \", rpcDefaultTimeout=\"\n-            + rpcDefaultTimeout + \", rpcInstallSnapshotTimeout=\" + rpcInstallSnapshotTimeout\n-            + \", rpcProcessorThreadPoolSize=\" + rpcProcessorThreadPoolSize + \", enableRpcChecksum=\"\n-            + enableRpcChecksum + \", metricRegistry=\" + metricRegistry + '}';\n+        return \"RpcOptions{\" + \"rpcConnectTimeoutMs=\" + rpcConnectTimeoutMs + \", rpcDefaultTimeout=\" + rpcDefaultTimeout + \", rpcInstallSnapshotTimeout=\" + rpcInstallSnapshotTimeout + \", rpcProcessorThreadPoolSize=\" + rpcProcessorThreadPoolSize + \", enableRpcChecksum=\" + enableRpcChecksum + \", metricRegistry=\" + metricRegistry + '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "36",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "43",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "50",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "57",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "64",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "71",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "78",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "81",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "146",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/43/RpcOptions.java\nindex 5eed700698a..3805721a732 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/43/RpcOptions.java\n@@ -20,47 +20,64 @@ import com.codahale.metrics.MetricRegistry;\n import java.util.concurrent.ExecutorService;\n import org.apache.ignite.raft.jraft.rpc.RpcClient;\n \n+\n public class RpcOptions {\n     /**\n      * Rpc handshake timeout in milliseconds Default: 2000(1s)\n      */\n+\n     private int rpcConnectTimeoutMs = 2000; // TODO asch rename to handshake timeout IGNITE-14832.\n \n     /**\n      * RPC request default timeout in milliseconds Default: 5000(5s)\n      */\n+\n+\n     private int rpcDefaultTimeout = 5000;\n \n     /**\n      * Install snapshot RPC request default timeout in milliseconds Default: 5 * 60 * 1000(5min)\n      */\n+\n+\n     private int rpcInstallSnapshotTimeout = 5 * 60 * 1000;\n \n     /**\n      * RPC process thread pool size Default: 80\n      */\n+\n+\n     private int rpcProcessorThreadPoolSize = 80;\n \n     /**\n      * Whether to enable checksum for RPC. Default: false\n      */\n+\n+\n     private boolean enableRpcChecksum = false;\n \n     /**\n      * Client instance.\n      */\n+\n+\n     private RpcClient rpcClient;\n \n     /**\n      * The client executor is used by RPC client.\n      */\n+\n+\n     private ExecutorService clientExecutor;\n \n     /**\n      * Metric registry for RPC services, user should not use this field.\n      */\n+\n+\n     private MetricRegistry metricRegistry;\n \n+\n     public int getRpcConnectTimeoutMs() {\n         return this.rpcConnectTimeoutMs;\n     }\n@@ -126,11 +143,7 @@ public class RpcOptions {\n     }\n \n \n-    @Override\n-    public String toString() {\n-        return \"RpcOptions{\" + \"rpcConnectTimeoutMs=\" + rpcConnectTimeoutMs + \", rpcDefaultTimeout=\"\n-            + rpcDefaultTimeout + \", rpcInstallSnapshotTimeout=\" + rpcInstallSnapshotTimeout\n-            + \", rpcProcessorThreadPoolSize=\" + rpcProcessorThreadPoolSize + \", enableRpcChecksum=\"\n-            + enableRpcChecksum + \", metricRegistry=\" + metricRegistry + '}';\n+    @Override public String toString() {\n+        return \"RpcOptions{\" + \"rpcConnectTimeoutMs=\" + rpcConnectTimeoutMs + \", rpcDefaultTimeout=\" + rpcDefaultTimeout + \", rpcInstallSnapshotTimeout=\" + rpcInstallSnapshotTimeout + \", rpcProcessorThreadPoolSize=\" + rpcProcessorThreadPoolSize + \", enableRpcChecksum=\" + enableRpcChecksum + \", metricRegistry=\" + metricRegistry + '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/43/RpcOptions.java\nindex 5eed700698a..3861aef7123 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/43/RpcOptions.java\n@@ -125,7 +125,6 @@ public class RpcOptions {\n         this.clientExecutor = clientExecutor;\n     }\n \n-\n     @Override\n     public String toString() {\n         return \"RpcOptions{\" + \"rpcConnectTimeoutMs=\" + rpcConnectTimeoutMs + \", rpcDefaultTimeout=\"\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/43/RpcOptions.java\nindex 5eed700698a..3861aef7123 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/43/RpcOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/43/RpcOptions.java\n@@ -125,7 +125,6 @@ public class RpcOptions {\n         this.clientExecutor = clientExecutor;\n     }\n \n-\n     @Override\n     public String toString() {\n         return \"RpcOptions{\" + \"rpcConnectTimeoutMs=\" + rpcConnectTimeoutMs + \", rpcDefaultTimeout=\"\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}