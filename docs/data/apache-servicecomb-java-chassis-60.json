{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "60",
    "information": {
        "errors": [
            {
                "line": "223",
                "column": "30",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    }\n\n    if (responseType != null &&\n        !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n      invocation.setSuccessResponseType(TypeFactory.defaultInstance().constructType(responseType));\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/60/CseClientHttpRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/60/CseClientHttpRequest.java\nindex 75e95ea58bd..ccf50e01657 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/60/CseClientHttpRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/60/CseClientHttpRequest.java\n@@ -220,8 +220,8 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n       invocation.addLocalContext(context.getLocalContext());\n     }\n \n-    if (responseType != null &&\n-        !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n+    if (responseType != null\n+        && !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n       invocation.setSuccessResponseType(TypeFactory.defaultInstance().constructType(responseType));\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "223",
                    "column": "30",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "223",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/60/CseClientHttpRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/60/CseClientHttpRequest.java\nindex 75e95ea58bd..1044f33ff14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/60/CseClientHttpRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/60/CseClientHttpRequest.java\n@@ -220,8 +220,7 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n       invocation.addLocalContext(context.getLocalContext());\n     }\n \n-    if (responseType != null &&\n-        !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n+    if (responseType != null && !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n       invocation.setSuccessResponseType(TypeFactory.defaultInstance().constructType(responseType));\n     }\n \n@@ -251,4 +250,4 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n     // no types info, so will not convert any parameters\n     return RestCodec.restToArgs(mockRequest, requestMeta.getSwaggerRestOperation());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "223",
                    "column": "30",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/60/CseClientHttpRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/60/CseClientHttpRequest.java\nindex 75e95ea58bd..ccf50e01657 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/60/CseClientHttpRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/60/CseClientHttpRequest.java\n@@ -220,8 +220,8 @@ public class CseClientHttpRequest implements ClientHttpRequest {\n       invocation.addLocalContext(context.getLocalContext());\n     }\n \n-    if (responseType != null &&\n-        !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n+    if (responseType != null\n+        && !(responseType instanceof Class && Part.class.isAssignableFrom((Class<?>) responseType))) {\n       invocation.setSuccessResponseType(TypeFactory.defaultInstance().constructType(responseType));\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}