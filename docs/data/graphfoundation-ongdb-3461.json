{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3461",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "73",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "211",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "224",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "278",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "294",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "304",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "328",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "343",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "349",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "369",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "382",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "438",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "491",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "506",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "629",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "631",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "631",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "638",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "645",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "648",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "648",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "654",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "672",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "683",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "683",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3461/DateTimeValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3461/DateTimeValue.java\nindex 4e398ecdafb..93d776e0812 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3461/DateTimeValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3461/DateTimeValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.time.Clock;\n@@ -66,652 +67,634 @@ import static org.neo4j.values.storable.TimeValue.OFFSET;\n import static org.neo4j.values.storable.TimeValue.TIME_PATTERN;\n import static org.neo4j.values.storable.TimeValue.parseOffset;\n \n-public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeValue>\n+public final class DateTimeValue extends TemporalValue<ZonedDateTime, DateTimeValue>\n {\n-    public static final DateTimeValue MIN_VALUE =\n-            new DateTimeValue( ZonedDateTime.of( LocalDateTime.MIN, ZoneOffset.MIN ) );\n-    public static final DateTimeValue MAX_VALUE =\n-            new DateTimeValue( ZonedDateTime.of( LocalDateTime.MAX, ZoneOffset.MAX ) );\n-\n-    public static DateTimeValue datetime( DateValue date, LocalTimeValue time, ZoneId zone )\n-    {\n-        return new DateTimeValue( ZonedDateTime.of( date.temporal(), time.temporal(), zone ) );\n-    }\n-\n-    public static DateTimeValue datetime( DateValue date, TimeValue time )\n-    {\n-        OffsetTime t = time.temporal();\n-        return new DateTimeValue( ZonedDateTime.of( date.temporal(), t.toLocalTime(), t.getOffset() ) );\n-    }\n-\n-    public static DateTimeValue datetime(\n-            int year, int month, int day, int hour, int minute, int second, int nanoOfSecond, String zone )\n-    {\n-        return datetime( year, month, day, hour, minute, second, nanoOfSecond, parseZoneName( zone ) );\n-    }\n-\n-    public static DateTimeValue datetime(\n-            int year, int month, int day, int hour, int minute, int second, int nanoOfSecond, ZoneId zone )\n-    {\n-        return new DateTimeValue( assertValidArgument(\n-                () -> ZonedDateTime.of( year, month, day, hour, minute, second, nanoOfSecond, zone ) ) );\n-    }\n-\n-    public static DateTimeValue datetime( long epochSecond, long nano, ZoneOffset zoneOffset )\n-    {\n-        return new DateTimeValue(\n-                assertValidArgument( () -> ofInstant( ofEpochSecond( epochSecond, nano ), zoneOffset ) ) );\n-    }\n-\n-    public static DateTimeValue datetime( ZonedDateTime datetime )\n-    {\n-        return new DateTimeValue( requireNonNull( datetime, \"ZonedDateTime\" ) );\n-    }\n-\n-    public static DateTimeValue datetime( OffsetDateTime datetime )\n-    {\n-        return new DateTimeValue( requireNonNull( datetime, \"OffsetDateTime\" ).toZonedDateTime() );\n-    }\n-\n-    public static DateTimeValue datetime( long epochSecondUTC, long nano, ZoneId zone )\n-    {\n-        return new DateTimeValue(\n-                assertValidArgument( () -> ofInstant( ofEpochSecond( epochSecondUTC, nano ), zone ) ) );\n-    }\n-\n-    public static DateTimeValue ofEpoch( IntegralValue epochSecondUTC, IntegralValue nano )\n-    {\n-        long ns = safeCastIntegral( \"nanosecond\", nano, 0 );\n-        if ( ns < 0 || ns >= 1000_000_000 )\n+  public static final DateTimeValue MIN_VALUE =\n+      new DateTimeValue(ZonedDateTime.of(LocalDateTime.MIN, ZoneOffset.MIN));\n+  public static final DateTimeValue MAX_VALUE =\n+      new DateTimeValue(ZonedDateTime.of(LocalDateTime.MAX, ZoneOffset.MAX));\n+\n+  public static DateTimeValue datetime(DateValue date, LocalTimeValue time, ZoneId zone)\n+  {\n+    return new DateTimeValue(ZonedDateTime.of(date.temporal(), time.temporal(), zone));\n+  }\n+\n+  public static DateTimeValue datetime(DateValue date, TimeValue time)\n+  {\n+    OffsetTime t = time.temporal();\n+    return new DateTimeValue(ZonedDateTime.of(date.temporal(), t.toLocalTime(), t.getOffset()));\n+  }\n+\n+  public static DateTimeValue datetime(\n+      int year, int month, int day, int hour, int minute, int second, int nanoOfSecond, String zone)\n+  {\n+    return datetime(year, month, day, hour, minute, second, nanoOfSecond, parseZoneName(zone));\n+  }\n+\n+  public static DateTimeValue datetime(\n+      int year, int month, int day, int hour, int minute, int second, int nanoOfSecond, ZoneId zone)\n+  {\n+    return new DateTimeValue(assertValidArgument(\n+        () -> ZonedDateTime.of(year, month, day, hour, minute, second, nanoOfSecond, zone)));\n+  }\n+\n+  public static DateTimeValue datetime(long epochSecond, long nano, ZoneOffset zoneOffset)\n+  {\n+    return new DateTimeValue(\n+        assertValidArgument(() -> ofInstant(ofEpochSecond(epochSecond, nano), zoneOffset)));\n+  }\n+\n+  public static DateTimeValue datetime(ZonedDateTime datetime)\n+  {\n+    return new DateTimeValue(requireNonNull(datetime, \"ZonedDateTime\"));\n+  }\n+\n+  public static DateTimeValue datetime(OffsetDateTime datetime)\n+  {\n+    return new DateTimeValue(requireNonNull(datetime, \"OffsetDateTime\").toZonedDateTime());\n+  }\n+\n+  public static DateTimeValue datetime(long epochSecondUTC, long nano, ZoneId zone)\n+  {\n+    return new DateTimeValue(\n+        assertValidArgument(() -> ofInstant(ofEpochSecond(epochSecondUTC, nano), zone)));\n+  }\n+\n+  public static DateTimeValue ofEpoch(IntegralValue epochSecondUTC, IntegralValue nano)\n+  {\n+    long ns = safeCastIntegral(\"nanosecond\", nano, 0);\n+    if (ns < 0 || ns >= 1000_000_000)\n+    {\n+      throw new InvalidValuesArgumentException(\"Invalid nanosecond: \" + ns);\n+    }\n+    return new DateTimeValue(\n+        assertValidArgument(() -> ofInstant(ofEpochSecond(epochSecondUTC.longValue(), ns), UTC)));\n+  }\n+\n+  public static DateTimeValue ofEpochMillis(IntegralValue millisUTC)\n+  {\n+    return new DateTimeValue(\n+        assertValidArgument(() -> ofInstant(ofEpochMilli(millisUTC.longValue()), UTC)));\n+  }\n+\n+  public static DateTimeValue parse(CharSequence text, Supplier<ZoneId> defaultZone,\n+                                    CSVHeaderInformation fieldsFromHeader)\n+  {\n+    if (fieldsFromHeader != null)\n+    {\n+      if (!(fieldsFromHeader instanceof TimeCSVHeaderInformation))\n+      {\n+        throw new IllegalStateException(\"Wrong header information type: \" + fieldsFromHeader);\n+      }\n+      // Override defaultZone\n+      defaultZone = ((TimeCSVHeaderInformation) fieldsFromHeader).zoneSupplier(defaultZone);\n+    }\n+    return parse(DateTimeValue.class, PATTERN, DateTimeValue::parse, text, defaultZone);\n+  }\n+\n+  public static DateTimeValue parse(CharSequence text, Supplier<ZoneId> defaultZone)\n+  {\n+    return parse(DateTimeValue.class, PATTERN, DateTimeValue::parse, text, defaultZone);\n+  }\n+\n+  public static DateTimeValue parse(TextValue text, Supplier<ZoneId> defaultZone)\n+  {\n+    return parse(DateTimeValue.class, PATTERN, DateTimeValue::parse, text, defaultZone);\n+  }\n+\n+  public static DateTimeValue now(Clock clock)\n+  {\n+    return new DateTimeValue(ZonedDateTime.now(clock));\n+  }\n+\n+  public static DateTimeValue now(Clock clock, String timezone)\n+  {\n+    return now(clock.withZone(parseZoneName(timezone)));\n+  }\n+\n+  public static DateTimeValue now(Clock clock, Supplier<ZoneId> defaultZone)\n+  {\n+    return now(clock.withZone(defaultZone.get()));\n+  }\n+\n+  public static DateTimeValue build(MapValue map, Supplier<ZoneId> defaultZone)\n+  {\n+    return StructureBuilder.build(builder(defaultZone), map);\n+  }\n+\n+  public static DateTimeValue select(AnyValue from, Supplier<ZoneId> defaultZone)\n+  {\n+    return builder(defaultZone).selectDateTime(from);\n+  }\n+\n+  public static DateTimeValue truncate(\n+      TemporalUnit unit,\n+      TemporalValue input,\n+      MapValue fields,\n+      Supplier<ZoneId> defaultZone)\n+  {\n+    Pair<LocalDate, LocalTime> pair = getTruncatedDateAndTime(unit, input, \"date time\");\n+\n+    LocalDate truncatedDate = pair.first();\n+    LocalTime truncatedTime = pair.other();\n+\n+    ZoneId zoneId = input.supportsTimeZone() ? input.getZoneId(defaultZone) : defaultZone.get();\n+    ZonedDateTime truncatedZDT = ZonedDateTime.of(truncatedDate, truncatedTime, zoneId);\n+\n+    if (fields.size() == 0)\n+    {\n+      return datetime(truncatedZDT);\n+    } else\n+    {\n+      // Timezone needs some special handling, since the builder will shift keeping the instant instead of the\n+      // local time\n+      Map<String, AnyValue> updatedFields = new HashMap<>(fields.size() + 1);\n+      for (Map.Entry<String, AnyValue> entry : fields.entrySet())\n+      {\n+        if (\"timezone\".equals(entry.getKey()))\n         {\n-            throw new InvalidValuesArgumentException( \"Invalid nanosecond: \" + ns );\n-        }\n-        return new DateTimeValue(\n-                assertValidArgument( () -> ofInstant( ofEpochSecond( epochSecondUTC.longValue(), ns ), UTC ) ) );\n-    }\n-\n-    public static DateTimeValue ofEpochMillis( IntegralValue millisUTC )\n-    {\n-        return new DateTimeValue(\n-                assertValidArgument( () -> ofInstant( ofEpochMilli( millisUTC.longValue() ), UTC ) ) );\n-    }\n-\n-    public static DateTimeValue parse( CharSequence text, Supplier<ZoneId> defaultZone,\n-            CSVHeaderInformation fieldsFromHeader )\n-    {\n-        if ( fieldsFromHeader != null )\n+          truncatedZDT = truncatedZDT.withZoneSameLocal(timezoneOf(entry.getValue()));\n+        } else\n         {\n-            if ( !(fieldsFromHeader instanceof TimeCSVHeaderInformation) )\n-            {\n-                throw new IllegalStateException( \"Wrong header information type: \" + fieldsFromHeader );\n-            }\n-            // Override defaultZone\n-            defaultZone = ((TimeCSVHeaderInformation) fieldsFromHeader).zoneSupplier( defaultZone );\n+          updatedFields.put(entry.getKey(), entry.getValue());\n         }\n-        return parse( DateTimeValue.class, PATTERN, DateTimeValue::parse, text, defaultZone );\n-    }\n-\n-    public static DateTimeValue parse( CharSequence text, Supplier<ZoneId> defaultZone )\n-    {\n-        return parse( DateTimeValue.class, PATTERN, DateTimeValue::parse, text, defaultZone );\n-    }\n-\n-    public static DateTimeValue parse( TextValue text, Supplier<ZoneId> defaultZone )\n-    {\n-        return parse( DateTimeValue.class, PATTERN, DateTimeValue::parse, text, defaultZone );\n-    }\n-\n-    public static DateTimeValue now( Clock clock )\n-    {\n-        return new DateTimeValue( ZonedDateTime.now( clock ) );\n-    }\n-\n-    public static DateTimeValue now( Clock clock, String timezone )\n-    {\n-        return now( clock.withZone( parseZoneName( timezone ) ) );\n-    }\n+      }\n \n-    public static DateTimeValue now( Clock clock, Supplier<ZoneId> defaultZone )\n-    {\n-        return now( clock.withZone( defaultZone.get() ) );\n-    }\n-\n-    public static DateTimeValue build( MapValue map, Supplier<ZoneId> defaultZone )\n-    {\n-        return StructureBuilder.build( builder( defaultZone ), map );\n-    }\n-\n-    public static DateTimeValue select( AnyValue from, Supplier<ZoneId> defaultZone )\n-    {\n-        return builder( defaultZone ).selectDateTime( from );\n+      truncatedZDT = updateFieldMapWithConflictingSubseconds(updatedFields, unit, truncatedZDT);\n+      if (updatedFields.size() == 0)\n+      {\n+        return datetime(truncatedZDT);\n+      }\n+      updatedFields.put(\"datetime\", datetime(truncatedZDT));\n+      return build(VirtualValues.map(updatedFields), defaultZone);\n     }\n+  }\n \n-    public static DateTimeValue truncate(\n-            TemporalUnit unit,\n-            TemporalValue input,\n-            MapValue fields,\n-            Supplier<ZoneId> defaultZone )\n+  static DateTimeBuilder<DateTimeValue> builder(Supplier<ZoneId> defaultZone)\n+  {\n+    return new DateTimeBuilder<DateTimeValue>(defaultZone)\n     {\n-        Pair<LocalDate,LocalTime> pair = getTruncatedDateAndTime( unit, input, \"date time\" );\n-\n-        LocalDate truncatedDate = pair.first();\n-        LocalTime truncatedTime = pair.other();\n-\n-        ZoneId zoneId = input.supportsTimeZone() ? input.getZoneId( defaultZone ) : defaultZone.get();\n-        ZonedDateTime truncatedZDT = ZonedDateTime.of( truncatedDate, truncatedTime, zoneId );\n+      @Override\n+      protected boolean supportsTimeZone()\n+      {\n+        return true;\n+      }\n \n-        if ( fields.size() == 0 )\n+      @Override\n+      protected boolean supportsEpoch()\n+      {\n+        return true;\n+      }\n+\n+      private final ZonedDateTime defaulZonedDateTime =\n+          ZonedDateTime.of(TemporalFields.year.defaultValue, TemporalFields.month.defaultValue,\n+              TemporalFields.day.defaultValue, TemporalFields.hour.defaultValue,\n+              TemporalFields.minute.defaultValue, TemporalFields.second.defaultValue,\n+              TemporalFields.nanosecond.defaultValue, timezone());\n+\n+      @Override\n+      public DateTimeValue buildInternal()\n+      {\n+        boolean selectingDate = fields.containsKey(TemporalFields.date);\n+        boolean selectingTime = fields.containsKey(TemporalFields.time);\n+        boolean selectingDateTime = fields.containsKey(TemporalFields.datetime);\n+        boolean selectingEpoch = fields.containsKey(TemporalFields.epochSeconds) ||\n+            fields.containsKey(TemporalFields.epochMillis);\n+        boolean selectingTimeZone;\n+        ZonedDateTime result;\n+        if (selectingDateTime)\n         {\n-            return datetime( truncatedZDT );\n-        }\n-        else\n+          AnyValue dtField = fields.get(TemporalFields.datetime);\n+          if (!(dtField instanceof TemporalValue))\n+          {\n+            throw new InvalidValuesArgumentException(\n+                String.format(\"Cannot construct date time from: %s\", dtField));\n+          }\n+          TemporalValue dt = (TemporalValue) dtField;\n+          LocalTime timePart = dt.getTimePart(defaultZone).toLocalTime();\n+          ZoneId zoneId = dt.getZoneId(defaultZone);\n+          result = ZonedDateTime.of(dt.getDatePart(), timePart, zoneId);\n+          selectingTimeZone = dt.supportsTimeZone();\n+        } else if (selectingEpoch)\n         {\n-            // Timezone needs some special handling, since the builder will shift keeping the instant instead of the\n-            // local time\n-            Map<String,AnyValue> updatedFields = new HashMap<>( fields.size() + 1 );\n-            for ( Map.Entry<String,AnyValue> entry : fields.entrySet() )\n+          if (fields.containsKey(TemporalFields.epochSeconds))\n+          {\n+            AnyValue epochField = fields.get(TemporalFields.epochSeconds);\n+            if (!(epochField instanceof IntegralValue))\n             {\n-                if ( \"timezone\".equals( entry.getKey() ) )\n-                {\n-                    truncatedZDT = truncatedZDT.withZoneSameLocal( timezoneOf( entry.getValue() ) );\n-                }\n-                else\n-                {\n-                    updatedFields.put( entry.getKey(), entry.getValue() );\n-                }\n+              throw new InvalidValuesArgumentException(\n+                  String.format(\"Cannot construct date time from: %s\", epochField));\n             }\n-\n-            truncatedZDT = updateFieldMapWithConflictingSubseconds( updatedFields, unit, truncatedZDT );\n-            if ( updatedFields.size() == 0 )\n+            IntegralValue epochSeconds = (IntegralValue) epochField;\n+            result = assertValidArgument(() -> ZonedDateTime\n+                .ofInstant(Instant.ofEpochMilli(epochSeconds.longValue() * 1000), timezone()));\n+          } else\n+          {\n+            AnyValue epochField = fields.get(TemporalFields.epochMillis);\n+            if (!(epochField instanceof IntegralValue))\n             {\n-                return datetime( truncatedZDT );\n+              throw new InvalidValuesArgumentException(\n+                  String.format(\"Cannot construct date time from: %s\", epochField));\n             }\n-            updatedFields.put( \"datetime\", datetime( truncatedZDT ) );\n-            return build( VirtualValues.map( updatedFields ), defaultZone );\n-        }\n-    }\n-\n-    static DateTimeBuilder<DateTimeValue> builder( Supplier<ZoneId> defaultZone )\n-    {\n-        return new DateTimeBuilder<DateTimeValue>( defaultZone )\n+            IntegralValue epochMillis = (IntegralValue) epochField;\n+            result = assertValidArgument(() -> ZonedDateTime\n+                .ofInstant(Instant.ofEpochMilli(epochMillis.longValue()), timezone()));\n+          }\n+          selectingTimeZone = false;\n+        } else if (selectingTime || selectingDate)\n         {\n-            @Override\n-            protected boolean supportsTimeZone()\n+\n+          LocalTime time;\n+          ZoneId zoneId;\n+          if (selectingTime)\n+          {\n+            AnyValue timeField = fields.get(TemporalFields.time);\n+            if (!(timeField instanceof TemporalValue))\n             {\n-                return true;\n+              throw new InvalidValuesArgumentException(\n+                  String.format(\"Cannot construct time from: %s\", timeField));\n             }\n-\n-            @Override\n-            protected boolean supportsEpoch()\n+            TemporalValue t = (TemporalValue) timeField;\n+            time = t.getTimePart(defaultZone).toLocalTime();\n+            zoneId = t.getZoneId(defaultZone);\n+            selectingTimeZone = t.supportsTimeZone();\n+          } else\n+          {\n+            time = LocalTimeValue.DEFAULT_LOCAL_TIME;\n+            zoneId = timezone();\n+            selectingTimeZone = false;\n+          }\n+          LocalDate date;\n+          if (selectingDate)\n+          {\n+            AnyValue dateField = fields.get(TemporalFields.date);\n+            if (!(dateField instanceof TemporalValue))\n             {\n-                return true;\n+              throw new InvalidValuesArgumentException(\n+                  String.format(\"Cannot construct date from: %s\", dateField));\n             }\n+            TemporalValue t = (TemporalValue) dateField;\n+            date = t.getDatePart();\n+          } else\n+          {\n+            date = DateValue.DEFAULT_CALENDER_DATE;\n+          }\n+          result = ZonedDateTime.of(date, time, zoneId);\n+        } else\n+        {\n+          result = defaulZonedDateTime;\n+          selectingTimeZone = false;\n+        }\n \n-            private final ZonedDateTime defaulZonedDateTime =\n-                    ZonedDateTime.of( TemporalFields.year.defaultValue, TemporalFields.month.defaultValue,\n-                            TemporalFields.day.defaultValue, TemporalFields.hour.defaultValue,\n-                            TemporalFields.minute.defaultValue, TemporalFields.second.defaultValue,\n-                            TemporalFields.nanosecond.defaultValue, timezone() );\n+        if (fields.containsKey(TemporalFields.week) && !selectingDate && !selectingDateTime &&\n+            !selectingEpoch)\n+        {\n+          // Be sure to be in the start of the week based year (which can be later than 1st Jan)\n+          result = result\n+              .with(IsoFields.WEEK_BASED_YEAR,\n+                  safeCastIntegral(TemporalFields.year.name(), fields.get(TemporalFields.year),\n+                      TemporalFields.year.defaultValue))\n+              .with(IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1)\n+              .with(ChronoField.DAY_OF_WEEK, 1);\n+        }\n \n-            @Override\n-            public DateTimeValue buildInternal()\n+        result = assignAllFields(result);\n+        if (timezone != null)\n+        {\n+          if (((selectingTime || selectingDateTime) && selectingTimeZone) || selectingEpoch)\n+          {\n+            try\n             {\n-                boolean selectingDate = fields.containsKey( TemporalFields.date );\n-                boolean selectingTime = fields.containsKey( TemporalFields.time );\n-                boolean selectingDateTime = fields.containsKey( TemporalFields.datetime );\n-                boolean selectingEpoch = fields.containsKey( TemporalFields.epochSeconds ) ||\n-                                         fields.containsKey( TemporalFields.epochMillis );\n-                boolean selectingTimeZone;\n-                ZonedDateTime result;\n-                if ( selectingDateTime )\n-                {\n-                    AnyValue dtField = fields.get( TemporalFields.datetime );\n-                    if ( !(dtField instanceof TemporalValue) )\n-                    {\n-                        throw new InvalidValuesArgumentException(\n-                                String.format( \"Cannot construct date time from: %s\", dtField ) );\n-                    }\n-                    TemporalValue dt = (TemporalValue) dtField;\n-                    LocalTime timePart = dt.getTimePart( defaultZone ).toLocalTime();\n-                    ZoneId zoneId = dt.getZoneId( defaultZone );\n-                    result = ZonedDateTime.of( dt.getDatePart(), timePart, zoneId );\n-                    selectingTimeZone = dt.supportsTimeZone();\n-                }\n-                else if ( selectingEpoch )\n-                {\n-                    if ( fields.containsKey( TemporalFields.epochSeconds ) )\n-                    {\n-                        AnyValue epochField = fields.get( TemporalFields.epochSeconds );\n-                        if ( !(epochField instanceof IntegralValue) )\n-                        {\n-                            throw new InvalidValuesArgumentException(\n-                                    String.format( \"Cannot construct date time from: %s\", epochField ) );\n-                        }\n-                        IntegralValue epochSeconds = (IntegralValue) epochField;\n-                        result = assertValidArgument( () -> ZonedDateTime\n-                                .ofInstant( Instant.ofEpochMilli( epochSeconds.longValue() * 1000 ), timezone() ) );\n-                    }\n-                    else\n-                    {\n-                        AnyValue epochField = fields.get( TemporalFields.epochMillis );\n-                        if ( !(epochField instanceof IntegralValue) )\n-                        {\n-                            throw new InvalidValuesArgumentException(\n-                                    String.format( \"Cannot construct date time from: %s\", epochField ) );\n-                        }\n-                        IntegralValue epochMillis = (IntegralValue) epochField;\n-                        result = assertValidArgument( () -> ZonedDateTime\n-                                .ofInstant( Instant.ofEpochMilli( epochMillis.longValue() ), timezone() ) );\n-                    }\n-                    selectingTimeZone = false;\n-                }\n-                else if ( selectingTime || selectingDate )\n-                {\n-\n-                    LocalTime time;\n-                    ZoneId zoneId;\n-                    if ( selectingTime )\n-                    {\n-                        AnyValue timeField = fields.get( TemporalFields.time );\n-                        if ( !(timeField instanceof TemporalValue) )\n-                        {\n-                            throw new InvalidValuesArgumentException(\n-                                    String.format( \"Cannot construct time from: %s\", timeField ) );\n-                        }\n-                        TemporalValue t = (TemporalValue) timeField;\n-                        time = t.getTimePart( defaultZone ).toLocalTime();\n-                        zoneId = t.getZoneId( defaultZone );\n-                        selectingTimeZone = t.supportsTimeZone();\n-                    }\n-                    else\n-                    {\n-                        time = LocalTimeValue.DEFAULT_LOCAL_TIME;\n-                        zoneId = timezone();\n-                        selectingTimeZone = false;\n-                    }\n-                    LocalDate date;\n-                    if ( selectingDate )\n-                    {\n-                        AnyValue dateField = fields.get( TemporalFields.date );\n-                        if ( !(dateField instanceof TemporalValue) )\n-                        {\n-                            throw new InvalidValuesArgumentException(\n-                                    String.format( \"Cannot construct date from: %s\", dateField ) );\n-                        }\n-                        TemporalValue t = (TemporalValue) dateField;\n-                        date = t.getDatePart();\n-                    }\n-                    else\n-                    {\n-                        date = DateValue.DEFAULT_CALENDER_DATE;\n-                    }\n-                    result = ZonedDateTime.of( date, time, zoneId );\n-                }\n-                else\n-                {\n-                    result = defaulZonedDateTime;\n-                    selectingTimeZone = false;\n-                }\n-\n-                if ( fields.containsKey( TemporalFields.week ) && !selectingDate && !selectingDateTime &&\n-                     !selectingEpoch )\n-                {\n-                    // Be sure to be in the start of the week based year (which can be later than 1st Jan)\n-                    result = result\n-                            .with( IsoFields.WEEK_BASED_YEAR,\n-                                    safeCastIntegral( TemporalFields.year.name(), fields.get( TemporalFields.year ),\n-                                            TemporalFields.year.defaultValue ) )\n-                            .with( IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1 )\n-                            .with( ChronoField.DAY_OF_WEEK, 1 );\n-                }\n-\n-                result = assignAllFields( result );\n-                if ( timezone != null )\n-                {\n-                    if ( ((selectingTime || selectingDateTime) && selectingTimeZone) || selectingEpoch )\n-                    {\n-                        try\n-                        {\n-                            result = result.withZoneSameInstant( timezone() );\n-                        }\n-                        catch ( DateTimeParseException e )\n-                        {\n-                            throw new InvalidValuesArgumentException( e.getMessage(), e );\n-                        }\n-                    }\n-                    else\n-                    {\n-                        result = result.withZoneSameLocal( timezone() );\n-                    }\n-                }\n-                return datetime( result );\n-            }\n-\n-            @Override\n-            protected DateTimeValue selectDateTime( AnyValue datetime )\n+              result = result.withZoneSameInstant(timezone());\n+            } catch (DateTimeParseException e)\n             {\n-                if ( datetime instanceof DateTimeValue )\n-                {\n-                    DateTimeValue value = (DateTimeValue) datetime;\n-                    ZoneId zone = optionalTimezone();\n-                    return zone == null ? value : new DateTimeValue(\n-                            ZonedDateTime.of( value.temporal().toLocalDateTime(), zone ) );\n-                }\n-                if ( datetime instanceof LocalDateTimeValue )\n-                {\n-                    return new DateTimeValue( ZonedDateTime.of(\n-                            ((LocalDateTimeValue) datetime).temporal(), timezone() ) );\n-                }\n-                throw new UnsupportedTemporalUnitException( \"Cannot select datetime from: \" + datetime );\n+              throw new InvalidValuesArgumentException(e.getMessage(), e);\n             }\n-        };\n-    }\n-\n-    private final ZonedDateTime value;\n-    private final long epochSeconds;\n+          } else\n+          {\n+            result = result.withZoneSameLocal(timezone());\n+          }\n+        }\n+        return datetime(result);\n+      }\n \n-    private DateTimeValue( ZonedDateTime value )\n-    {\n-        ZoneId zone = value.getZone();\n-        if ( zone instanceof ZoneOffset )\n+      @Override\n+      protected DateTimeValue selectDateTime(AnyValue datetime)\n+      {\n+        if (datetime instanceof DateTimeValue)\n         {\n-            this.value = value;\n+          DateTimeValue value = (DateTimeValue) datetime;\n+          ZoneId zone = optionalTimezone();\n+          return zone == null ? value : new DateTimeValue(\n+              ZonedDateTime.of(value.temporal().toLocalDateTime(), zone));\n         }\n-        else\n+        if (datetime instanceof LocalDateTimeValue)\n         {\n-            // Do a 2-way lookup of the zone to make sure we only use the new name of renamed zones\n-            ZoneId mappedZone = ZoneId.of( TimeZones.map( TimeZones.map( zone.getId() ) ) );\n-            this.value = value.withZoneSameInstant( mappedZone );\n+          return new DateTimeValue(ZonedDateTime.of(\n+              ((LocalDateTimeValue) datetime).temporal(), timezone()));\n         }\n-        this.epochSeconds = this.value.toEpochSecond();\n-    }\n-\n-    @Override\n-    ZonedDateTime temporal()\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    LocalDate getDatePart()\n-    {\n-        return value.toLocalDate();\n-    }\n-\n-    @Override\n-    LocalTime getLocalTimePart()\n-    {\n-        return value.toLocalTime();\n-    }\n-\n-    @Override\n-    OffsetTime getTimePart( Supplier<ZoneId> defaultZone )\n-    {\n-        ZoneOffset offset = value.getOffset();\n-        LocalTime localTime = value.toLocalTime();\n-        return OffsetTime.of( localTime, offset );\n-    }\n-\n-    @Override\n-    ZoneId getZoneId( Supplier<ZoneId> defaultZone )\n-    {\n-        return value.getZone();\n-    }\n-\n-    @Override\n-    ZoneId getZoneId()\n-    {\n-        return value.getZone();\n-    }\n-\n-    @Override\n-    ZoneOffset getZoneOffset()\n-    {\n-        return value.getOffset();\n-    }\n-\n-    @Override\n-    public boolean supportsTimeZone()\n-    {\n-        return true;\n-    }\n-\n-    @Override\n-    boolean hasTime()\n-    {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean equals( Value other )\n-    {\n-        if ( other instanceof DateTimeValue )\n+        throw new UnsupportedTemporalUnitException(\"Cannot select datetime from: \" + datetime);\n+      }\n+    };\n+  }\n+\n+  private final ZonedDateTime value;\n+  private final long epochSeconds;\n+\n+  private DateTimeValue(ZonedDateTime value)\n+  {\n+    ZoneId zone = value.getZone();\n+    if (zone instanceof ZoneOffset)\n+    {\n+      this.value = value;\n+    } else\n+    {\n+      // Do a 2-way lookup of the zone to make sure we only use the new name of renamed zones\n+      ZoneId mappedZone = ZoneId.of(TimeZones.map(TimeZones.map(zone.getId())));\n+      this.value = value.withZoneSameInstant(mappedZone);\n+    }\n+    this.epochSeconds = this.value.toEpochSecond();\n+  }\n+\n+  @Override\n+  ZonedDateTime temporal()\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  LocalDate getDatePart()\n+  {\n+    return value.toLocalDate();\n+  }\n+\n+  @Override\n+  LocalTime getLocalTimePart()\n+  {\n+    return value.toLocalTime();\n+  }\n+\n+  @Override\n+  OffsetTime getTimePart(Supplier<ZoneId> defaultZone)\n+  {\n+    ZoneOffset offset = value.getOffset();\n+    LocalTime localTime = value.toLocalTime();\n+    return OffsetTime.of(localTime, offset);\n+  }\n+\n+  @Override\n+  ZoneId getZoneId(Supplier<ZoneId> defaultZone)\n+  {\n+    return value.getZone();\n+  }\n+\n+  @Override\n+  ZoneId getZoneId()\n+  {\n+    return value.getZone();\n+  }\n+\n+  @Override\n+  ZoneOffset getZoneOffset()\n+  {\n+    return value.getOffset();\n+  }\n+\n+  @Override\n+  public boolean supportsTimeZone()\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  boolean hasTime()\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean equals(Value other)\n+  {\n+    if (other instanceof DateTimeValue)\n+    {\n+      ZonedDateTime that = ((DateTimeValue) other).value;\n+      boolean res = value.toLocalDateTime().equals(that.toLocalDateTime());\n+      if (res)\n+      {\n+        ZoneId thisZone = value.getZone();\n+        ZoneId thatZone = that.getZone();\n+        boolean thisIsOffset = thisZone instanceof ZoneOffset;\n+        boolean thatIsOffset = thatZone instanceof ZoneOffset;\n+        if (thisIsOffset && thatIsOffset)\n         {\n-            ZonedDateTime that = ((DateTimeValue) other).value;\n-            boolean res = value.toLocalDateTime().equals( that.toLocalDateTime() );\n-            if ( res )\n-            {\n-                ZoneId thisZone = value.getZone();\n-                ZoneId thatZone = that.getZone();\n-                boolean thisIsOffset = thisZone instanceof ZoneOffset;\n-                boolean thatIsOffset = thatZone instanceof ZoneOffset;\n-                if ( thisIsOffset && thatIsOffset )\n-                {\n-                    res = thisZone.equals( thatZone );\n-                }\n-                else if ( !thisIsOffset && !thatIsOffset )\n-                {\n-                    res = TimeZones.map( thisZone.getId() ) == TimeZones.map( thatZone.getId() );\n-                }\n-                else\n-                {\n-                    res = false;\n-                }\n-            }\n-            return res;\n-\n+          res = thisZone.equals(thatZone);\n+        } else if (!thisIsOffset && !thatIsOffset)\n+        {\n+          res = TimeZones.map(thisZone.getId()) == TimeZones.map(thatZone.getId());\n+        } else\n+        {\n+          res = false;\n         }\n-        return false;\n-    }\n-\n-    @Override\n-    public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n-    {\n-        writer.writeDateTime( value );\n-    }\n-\n-    @Override\n-    int unsafeCompareTo( Value other )\n-    {\n-        DateTimeValue that = (DateTimeValue) other;\n-        int cmp = Long.compare( epochSeconds, that.epochSeconds );\n-        if ( cmp == 0 )\n+      }\n+      return res;\n+\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n+  {\n+    writer.writeDateTime(value);\n+  }\n+\n+  @Override\n+  int unsafeCompareTo(Value other)\n+  {\n+    DateTimeValue that = (DateTimeValue) other;\n+    int cmp = Long.compare(epochSeconds, that.epochSeconds);\n+    if (cmp == 0)\n+    {\n+      cmp = value.toLocalTime().getNano() - that.value.toLocalTime().getNano();\n+      if (cmp == 0)\n+      {\n+        ZoneOffset thisOffset = value.getOffset();\n+        ZoneOffset thatOffset = that.value.getOffset();\n+\n+        cmp = Integer.compare(thisOffset.getTotalSeconds(), thatOffset.getTotalSeconds());\n+        if (cmp == 0)\n         {\n-            cmp = value.toLocalTime().getNano() - that.value.toLocalTime().getNano();\n-            if ( cmp == 0 )\n+          ZoneId thisZone = value.getZone();\n+          ZoneId thatZone = that.value.getZone();\n+          boolean thisIsOffset = thisZone instanceof ZoneOffset;\n+          boolean thatIsOffset = thatZone instanceof ZoneOffset;\n+          // non-named timezone (just offset) before named-time zones, alphabetically\n+          cmp = Boolean.compare(thatIsOffset, thisIsOffset);\n+          if (cmp == 0)\n+          {\n+            if (!thisIsOffset) // => also means !thatIsOffset\n             {\n-                ZoneOffset thisOffset = value.getOffset();\n-                ZoneOffset thatOffset = that.value.getOffset();\n-\n-                cmp = Integer.compare( thisOffset.getTotalSeconds(), thatOffset.getTotalSeconds() );\n-                if ( cmp == 0 )\n-                {\n-                    ZoneId thisZone = value.getZone();\n-                    ZoneId thatZone = that.value.getZone();\n-                    boolean thisIsOffset = thisZone instanceof ZoneOffset;\n-                    boolean thatIsOffset = thatZone instanceof ZoneOffset;\n-                    // non-named timezone (just offset) before named-time zones, alphabetically\n-                    cmp = Boolean.compare( thatIsOffset, thisIsOffset );\n-                    if ( cmp == 0 )\n-                    {\n-                        if ( !thisIsOffset ) // => also means !thatIsOffset\n-                        {\n-                            cmp = compareNamedZonesWithMapping( thisZone, thatZone );\n-                        }\n-                    }\n-                    if ( cmp == 0 )\n-                    {\n-                        cmp = value.getChronology().compareTo( that.value.getChronology() );\n-                    }\n-                }\n+              cmp = compareNamedZonesWithMapping(thisZone, thatZone);\n             }\n+          }\n+          if (cmp == 0)\n+          {\n+            cmp = value.getChronology().compareTo(that.value.getChronology());\n+          }\n         }\n-        return cmp;\n-    }\n-\n-    private int compareNamedZonesWithMapping( ZoneId thisZone, ZoneId thatZone )\n+      }\n+    }\n+    return cmp;\n+  }\n+\n+  private int compareNamedZonesWithMapping(ZoneId thisZone, ZoneId thatZone)\n+  {\n+    String thisZoneNormalized = TimeZones.map(TimeZones.map(thisZone.getId()));\n+    String thatZoneNormalized = TimeZones.map(TimeZones.map(thatZone.getId()));\n+    return thisZoneNormalized.compareTo(thatZoneNormalized);\n+  }\n+\n+  @Override\n+  public String prettyPrint()\n+  {\n+    return assertPrintable(() -> value.format(DateTimeFormatter.ISO_DATE_TIME));\n+  }\n+\n+  @Override\n+  public ValueGroup valueGroup()\n+  {\n+    return ValueGroup.ZONED_DATE_TIME;\n+  }\n+\n+  @Override\n+  protected int computeHash()\n+  {\n+    return value.toInstant().hashCode();\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"DateTime\";\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapDateTime(this);\n+  }\n+\n+  @Override\n+  public DateTimeValue add(DurationValue duration)\n+  {\n+    return replacement(assertValidArithmetic(() -> value.plus(duration)));\n+  }\n+\n+  @Override\n+  public DateTimeValue sub(DurationValue duration)\n+  {\n+    return replacement(assertValidArithmetic(() -> value.minus(duration)));\n+  }\n+\n+  @Override\n+  DateTimeValue replacement(ZonedDateTime datetime)\n+  {\n+    return value == datetime ? this : new DateTimeValue(datetime);\n+  }\n+\n+  private static final String ZONE_NAME = \"(?<zoneName>[a-zA-Z0-9~._ /+-]+)\";\n+  private static final Pattern PATTERN = Pattern.compile(\n+      DATE_PATTERN + \"(?<time>T\" + TIME_PATTERN + \"(?:\\\\[\" + ZONE_NAME + \"\\\\])?\" + \")?\",\n+      Pattern.CASE_INSENSITIVE);\n+  private static final DateTimeFormatter ZONE_NAME_PARSER = new DateTimeFormatterBuilder()\n+      .parseCaseInsensitive()\n+      .appendZoneRegionId()\n+      .toFormatter();\n+\n+  private static DateTimeValue parse(Matcher matcher, Supplier<ZoneId> defaultZone)\n+  {\n+    LocalDateTime local = LocalDateTime.of(parseDate(matcher), optTime(matcher));\n+    String zoneName = matcher.group(\"zoneName\");\n+    ZoneOffset offset = parseOffset(matcher);\n+    ZoneId zone;\n+    if (zoneName != null)\n+    {\n+      zone = parseZoneName(zoneName);\n+      if (offset != null)\n+      {\n+        ZoneOffset expected;\n+        try\n+        {\n+          expected = zone.getRules().getOffset(local);\n+        } catch (ZoneRulesException e)\n+        {\n+          throw new TemporalParseException(e.getMessage(), e);\n+        }\n+        if (!expected.equals(offset))\n+        {\n+          throw new InvalidValuesArgumentException(\"Timezone and offset do not match: \" + matcher.group());\n+        }\n+      }\n+    } else if (offset != null)\n     {\n-        String thisZoneNormalized = TimeZones.map( TimeZones.map( thisZone.getId() ) );\n-        String thatZoneNormalized = TimeZones.map( TimeZones.map( thatZone.getId() ) );\n-        return thisZoneNormalized.compareTo( thatZoneNormalized );\n-    }\n-\n-    @Override\n-    public String prettyPrint()\n+      zone = offset;\n+    } else\n     {\n-        return assertPrintable( () -> value.format( DateTimeFormatter.ISO_DATE_TIME ) );\n+      zone = defaultZone.get();\n     }\n+    return new DateTimeValue(ZonedDateTime.of(local, zone));\n+  }\n \n-    @Override\n-    public ValueGroup valueGroup()\n+  static ZoneId parseZoneName(String zoneName)\n+  {\n+    ZoneId parsedName;\n+    try\n     {\n-        return ValueGroup.ZONED_DATE_TIME;\n-    }\n-\n-    @Override\n-    protected int computeHash()\n+      parsedName = ZONE_NAME_PARSER.parse(zoneName.replace(' ', '_')).query(TemporalQueries.zoneId());\n+    } catch (DateTimeParseException e)\n     {\n-        return value.toInstant().hashCode();\n+      throw new TemporalParseException(\"Invalid value for TimeZone: \" + e.getMessage(), e.getParsedString(),\n+          e.getErrorIndex(), e);\n     }\n+    return parsedName;\n+  }\n \n-    @Override\n-    public String getTypeName()\n+  public static ZoneId parseZoneOffsetOrZoneName(String zoneName)\n+  {\n+    Matcher matcher = OFFSET.matcher(zoneName);\n+    if (matcher.matches())\n     {\n-        return \"DateTime\";\n+      return parseOffset(matcher);\n     }\n-\n-    @Override\n-    public <T> T map( ValueMapper<T> mapper )\n+    try\n     {\n-        return mapper.mapDateTime( this );\n-    }\n-\n-    @Override\n-    public DateTimeValue add( DurationValue duration )\n+      return ZONE_NAME_PARSER.parse(zoneName.replace(' ', '_')).query(TemporalQueries.zoneId());\n+    } catch (DateTimeParseException e)\n     {\n-        return replacement( assertValidArithmetic( () -> value.plus( duration ) ) );\n+      throw new TemporalParseException(\"Invalid value for TimeZone: \" + e.getMessage(), e.getParsedString(),\n+          e.getErrorIndex(), e);\n     }\n+  }\n \n-    @Override\n-    public DateTimeValue sub( DurationValue duration )\n+  abstract static class DateTimeBuilder<Result> extends Builder<Result>\n+  {\n+    DateTimeBuilder(Supplier<ZoneId> defaultZone)\n     {\n-        return replacement( assertValidArithmetic( () -> value.minus( duration ) ) );\n+      super(defaultZone);\n     }\n \n     @Override\n-    DateTimeValue replacement( ZonedDateTime datetime )\n-    {\n-        return value == datetime ? this : new DateTimeValue( datetime );\n-    }\n-\n-    private static final String ZONE_NAME = \"(?<zoneName>[a-zA-Z0-9~._ /+-]+)\";\n-    private static final Pattern PATTERN = Pattern.compile(\n-            DATE_PATTERN + \"(?<time>T\" + TIME_PATTERN + \"(?:\\\\[\" + ZONE_NAME + \"\\\\])?\" + \")?\",\n-            Pattern.CASE_INSENSITIVE );\n-    private static final DateTimeFormatter ZONE_NAME_PARSER = new DateTimeFormatterBuilder()\n-            .parseCaseInsensitive()\n-            .appendZoneRegionId()\n-            .toFormatter();\n-\n-    private static DateTimeValue parse( Matcher matcher, Supplier<ZoneId> defaultZone )\n-    {\n-        LocalDateTime local = LocalDateTime.of( parseDate( matcher ), optTime( matcher ) );\n-        String zoneName = matcher.group( \"zoneName\" );\n-        ZoneOffset offset = parseOffset( matcher );\n-        ZoneId zone;\n-        if ( zoneName != null )\n-        {\n-            zone = parseZoneName( zoneName );\n-            if ( offset != null )\n-            {\n-                ZoneOffset expected;\n-                try\n-                {\n-                    expected = zone.getRules().getOffset( local );\n-                }\n-                catch ( ZoneRulesException e )\n-                {\n-                    throw new TemporalParseException( e.getMessage(), e );\n-                }\n-                if ( !expected.equals( offset ) )\n-                {\n-                    throw new InvalidValuesArgumentException( \"Timezone and offset do not match: \" + matcher.group() );\n-                }\n-            }\n-        }\n-        else if ( offset != null )\n-        {\n-            zone = offset;\n-        }\n-        else\n-        {\n-            zone = defaultZone.get();\n-        }\n-        return new DateTimeValue( ZonedDateTime.of( local, zone ) );\n-    }\n-\n-    static ZoneId parseZoneName( String zoneName )\n+    protected final boolean supportsDate()\n     {\n-        ZoneId parsedName;\n-        try\n-        {\n-            parsedName = ZONE_NAME_PARSER.parse( zoneName.replace( ' ', '_' ) ).query( TemporalQueries.zoneId() );\n-        }\n-        catch ( DateTimeParseException e )\n-        {\n-            throw new TemporalParseException( \"Invalid value for TimeZone: \" + e.getMessage(), e.getParsedString(),\n-                    e.getErrorIndex(), e );\n-        }\n-        return parsedName;\n+      return true;\n     }\n \n-    public static ZoneId parseZoneOffsetOrZoneName( String zoneName )\n+    @Override\n+    protected final boolean supportsTime()\n     {\n-        Matcher matcher = OFFSET.matcher( zoneName );\n-        if ( matcher.matches() )\n-        {\n-            return parseOffset( matcher );\n-        }\n-        try\n-        {\n-            return ZONE_NAME_PARSER.parse( zoneName.replace( ' ', '_' ) ).query( TemporalQueries.zoneId() );\n-        }\n-        catch ( DateTimeParseException e )\n-        {\n-            throw new TemporalParseException( \"Invalid value for TimeZone: \" + e.getMessage(), e.getParsedString(),\n-                    e.getErrorIndex(), e );\n-        }\n+      return true;\n     }\n \n-    abstract static class DateTimeBuilder<Result> extends Builder<Result>\n-    {\n-        DateTimeBuilder( Supplier<ZoneId> defaultZone )\n-        {\n-            super( defaultZone );\n-        }\n-\n-        @Override\n-        protected final boolean supportsDate()\n-        {\n-            return true;\n-        }\n-\n-        @Override\n-        protected final boolean supportsTime()\n-        {\n-            return true;\n-        }\n-\n-        protected abstract Result selectDateTime( AnyValue date );\n-    }\n+    protected abstract Result selectDateTime(AnyValue date);\n+  }\n }\n",
            "diff_size": 918
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "249",
                    "column": "92",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "342",
                    "column": "104",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "346",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 234).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3461/DateTimeValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3461/DateTimeValue.java\nindex 4e398ecdafb..19d037a5ca2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3461/DateTimeValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3461/DateTimeValue.java\n@@ -68,12 +68,11 @@ import static org.neo4j.values.storable.TimeValue.parseOffset;\n \n public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeValue>\n {\n-    public static final DateTimeValue MIN_VALUE =\n-            new DateTimeValue( ZonedDateTime.of( LocalDateTime.MIN, ZoneOffset.MIN ) );\n-    public static final DateTimeValue MAX_VALUE =\n-            new DateTimeValue( ZonedDateTime.of( LocalDateTime.MAX, ZoneOffset.MAX ) );\n+    public static final DateTimeValue MIN_VALUE = new DateTimeValue( ZonedDateTime.of( LocalDateTime.MIN, ZoneOffset.MIN ) );\n \n-    public static DateTimeValue datetime( DateValue date, LocalTimeValue time, ZoneId zone )\n+public static final DateTimeValue MAX_VALUE = new DateTimeValue( ZonedDateTime.of( LocalDateTime.MAX, ZoneOffset.MAX ) );\n+\n+public static DateTimeValue datetime( DateValue date, LocalTimeValue time, ZoneId zone )\n     {\n         return new DateTimeValue( ZonedDateTime.of( date.temporal(), time.temporal(), zone ) );\n     }\n@@ -84,23 +83,19 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n         return new DateTimeValue( ZonedDateTime.of( date.temporal(), t.toLocalTime(), t.getOffset() ) );\n     }\n \n-    public static DateTimeValue datetime(\n-            int year, int month, int day, int hour, int minute, int second, int nanoOfSecond, String zone )\n+    public static DateTimeValue datetime( int year, int month, int day, int hour, int minute, int second, int nanoOfSecond, String zone )\n     {\n         return datetime( year, month, day, hour, minute, second, nanoOfSecond, parseZoneName( zone ) );\n     }\n \n-    public static DateTimeValue datetime(\n-            int year, int month, int day, int hour, int minute, int second, int nanoOfSecond, ZoneId zone )\n+    public static DateTimeValue datetime( int year, int month, int day, int hour, int minute, int second, int nanoOfSecond, ZoneId zone )\n     {\n-        return new DateTimeValue( assertValidArgument(\n-                () -> ZonedDateTime.of( year, month, day, hour, minute, second, nanoOfSecond, zone ) ) );\n+        return new DateTimeValue( assertValidArgument(() -> ZonedDateTime.of( year, month, day, hour, minute, second, nanoOfSecond, zone ) ) );\n     }\n \n     public static DateTimeValue datetime( long epochSecond, long nano, ZoneOffset zoneOffset )\n     {\n-        return new DateTimeValue(\n-                assertValidArgument( () -> ofInstant( ofEpochSecond( epochSecond, nano ), zoneOffset ) ) );\n+        return new DateTimeValue( assertValidArgument( () -> ofInstant( ofEpochSecond( epochSecond, nano ), zoneOffset ) ) );\n     }\n \n     public static DateTimeValue datetime( ZonedDateTime datetime )\n@@ -115,8 +110,7 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n \n     public static DateTimeValue datetime( long epochSecondUTC, long nano, ZoneId zone )\n     {\n-        return new DateTimeValue(\n-                assertValidArgument( () -> ofInstant( ofEpochSecond( epochSecondUTC, nano ), zone ) ) );\n+        return new DateTimeValue( assertValidArgument( () -> ofInstant( ofEpochSecond( epochSecondUTC, nano ), zone ) ) );\n     }\n \n     public static DateTimeValue ofEpoch( IntegralValue epochSecondUTC, IntegralValue nano )\n@@ -126,14 +120,12 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n         {\n             throw new InvalidValuesArgumentException( \"Invalid nanosecond: \" + ns );\n         }\n-        return new DateTimeValue(\n-                assertValidArgument( () -> ofInstant( ofEpochSecond( epochSecondUTC.longValue(), ns ), UTC ) ) );\n+        return new DateTimeValue( assertValidArgument( () -> ofInstant( ofEpochSecond( epochSecondUTC.longValue(), ns ), UTC ) ) );\n     }\n \n     public static DateTimeValue ofEpochMillis( IntegralValue millisUTC )\n     {\n-        return new DateTimeValue(\n-                assertValidArgument( () -> ofInstant( ofEpochMilli( millisUTC.longValue() ), UTC ) ) );\n+        return new DateTimeValue( assertValidArgument( () -> ofInstant( ofEpochMilli( millisUTC.longValue() ), UTC ) ) );\n     }\n \n     public static DateTimeValue parse( CharSequence text, Supplier<ZoneId> defaultZone,\n@@ -141,14 +133,15 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n     {\n         if ( fieldsFromHeader != null )\n         {\n-            if ( !(fieldsFromHeader instanceof TimeCSVHeaderInformation) )\n+            if ( !( fieldsFromHeader instanceof TimeCSVHeaderInformation) )\n             {\n                 throw new IllegalStateException( \"Wrong header information type: \" + fieldsFromHeader );\n             }\n             // Override defaultZone\n             defaultZone = ((TimeCSVHeaderInformation) fieldsFromHeader).zoneSupplier( defaultZone );\n         }\n-        return parse( DateTimeValue.class, PATTERN, DateTimeValue::parse, text, defaultZone );\n+\n+return parse( DateTimeValue.class, PATTERN, DateTimeValue::parse, text, defaultZone );\n     }\n \n     public static DateTimeValue parse( CharSequence text, Supplier<ZoneId> defaultZone )\n@@ -186,21 +179,16 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n         return builder( defaultZone ).selectDateTime( from );\n     }\n \n-    public static DateTimeValue truncate(\n-            TemporalUnit unit,\n+    public static DateTimeValue truncate( TemporalUnit unit,\n             TemporalValue input,\n-            MapValue fields,\n-            Supplier<ZoneId> defaultZone )\n+            MapValue fields, Supplier<ZoneId> defaultZone )\n     {\n         Pair<LocalDate,LocalTime> pair = getTruncatedDateAndTime( unit, input, \"date time\" );\n-\n-        LocalDate truncatedDate = pair.first();\n+LocalDate truncatedDate = pair.first();\n         LocalTime truncatedTime = pair.other();\n-\n-        ZoneId zoneId = input.supportsTimeZone() ? input.getZoneId( defaultZone ) : defaultZone.get();\n+ZoneId zoneId = input.supportsTimeZone() ? input.getZoneId( defaultZone ) : defaultZone.get();\n         ZonedDateTime truncatedZDT = ZonedDateTime.of( truncatedDate, truncatedTime, zoneId );\n-\n-        if ( fields.size() == 0 )\n+if ( fields.size() == 0 )\n         {\n             return datetime( truncatedZDT );\n         }\n@@ -247,31 +235,29 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n                 return true;\n             }\n \n-            private final ZonedDateTime defaulZonedDateTime =\n-                    ZonedDateTime.of( TemporalFields.year.defaultValue, TemporalFields.month.defaultValue,\n+            private final ZonedDateTime defaulZonedDateTime = ZonedDateTime.of( TemporalFields.year.defaultValue, TemporalFields.month.defaultValue,\n                             TemporalFields.day.defaultValue, TemporalFields.hour.defaultValue,\n                             TemporalFields.minute.defaultValue, TemporalFields.second.defaultValue,\n                             TemporalFields.nanosecond.defaultValue, timezone() );\n \n-            @Override\n+@Override\n             public DateTimeValue buildInternal()\n             {\n                 boolean selectingDate = fields.containsKey( TemporalFields.date );\n                 boolean selectingTime = fields.containsKey( TemporalFields.time );\n                 boolean selectingDateTime = fields.containsKey( TemporalFields.datetime );\n-                boolean selectingEpoch = fields.containsKey( TemporalFields.epochSeconds ) ||\n-                                         fields.containsKey( TemporalFields.epochMillis );\n-                boolean selectingTimeZone;\n+                boolean selectingEpoch = fields.containsKey( TemporalFields.epochSeconds ) ||fields.containsKey( TemporalFields.epochMillis );\n+    boolean selectingTimeZone;\n                 ZonedDateTime result;\n                 if ( selectingDateTime )\n                 {\n                     AnyValue dtField = fields.get( TemporalFields.datetime );\n-                    if ( !(dtField instanceof TemporalValue) )\n+                    if ( !( dtField instanceof TemporalValue) )\n                     {\n-                        throw new InvalidValuesArgumentException(\n-                                String.format( \"Cannot construct date time from: %s\", dtField ) );\n+                        throw new InvalidValuesArgumentException( String.format( \"Cannot construct date time from: %s\", dtField ) );\n                     }\n-                    TemporalValue dt = (TemporalValue) dtField;\n+\n+TemporalValue dt = (TemporalValue) dtField;\n                     LocalTime timePart = dt.getTimePart( defaultZone ).toLocalTime();\n                     ZoneId zoneId = dt.getZoneId( defaultZone );\n                     result = ZonedDateTime.of( dt.getDatePart(), timePart, zoneId );\n@@ -282,43 +268,41 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n                     if ( fields.containsKey( TemporalFields.epochSeconds ) )\n                     {\n                         AnyValue epochField = fields.get( TemporalFields.epochSeconds );\n-                        if ( !(epochField instanceof IntegralValue) )\n+                        if ( !( epochField instanceof IntegralValue) )\n                         {\n-                            throw new InvalidValuesArgumentException(\n-                                    String.format( \"Cannot construct date time from: %s\", epochField ) );\n+                            throw new InvalidValuesArgumentException( String.format( \"Cannot construct date time from: %s\", epochField ) );\n                         }\n-                        IntegralValue epochSeconds = (IntegralValue) epochField;\n-                        result = assertValidArgument( () -> ZonedDateTime\n-                                .ofInstant( Instant.ofEpochMilli( epochSeconds.longValue() * 1000 ), timezone() ) );\n+\n+IntegralValue epochSeconds = (IntegralValue) epochField;\n+                        result = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.ofEpochMilli( epochSeconds.longValue() * 1000 ), timezone() ) );\n                     }\n                     else\n                     {\n                         AnyValue epochField = fields.get( TemporalFields.epochMillis );\n-                        if ( !(epochField instanceof IntegralValue) )\n+                        if ( !( epochField instanceof IntegralValue) )\n                         {\n-                            throw new InvalidValuesArgumentException(\n-                                    String.format( \"Cannot construct date time from: %s\", epochField ) );\n+                            throw new InvalidValuesArgumentException( String.format( \"Cannot construct date time from: %s\", epochField ) );\n                         }\n-                        IntegralValue epochMillis = (IntegralValue) epochField;\n-                        result = assertValidArgument( () -> ZonedDateTime\n-                                .ofInstant( Instant.ofEpochMilli( epochMillis.longValue() ), timezone() ) );\n+\n+IntegralValue epochMillis = (IntegralValue) epochField;\n+                        result = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.ofEpochMilli( epochMillis.longValue() ), timezone() ) );\n                     }\n-                    selectingTimeZone = false;\n+\n+selectingTimeZone = false;\n                 }\n                 else if ( selectingTime || selectingDate )\n                 {\n-\n-                    LocalTime time;\n+    LocalTime time;\n                     ZoneId zoneId;\n                     if ( selectingTime )\n                     {\n                         AnyValue timeField = fields.get( TemporalFields.time );\n-                        if ( !(timeField instanceof TemporalValue) )\n+                        if ( !( timeField instanceof TemporalValue) )\n                         {\n-                            throw new InvalidValuesArgumentException(\n-                                    String.format( \"Cannot construct time from: %s\", timeField ) );\n+                            throw new InvalidValuesArgumentException( String.format( \"Cannot construct time from: %s\", timeField ) );\n                         }\n-                        TemporalValue t = (TemporalValue) timeField;\n+\n+TemporalValue t = (TemporalValue) timeField;\n                         time = t.getTimePart( defaultZone ).toLocalTime();\n                         zoneId = t.getZoneId( defaultZone );\n                         selectingTimeZone = t.supportsTimeZone();\n@@ -329,23 +313,25 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n                         zoneId = timezone();\n                         selectingTimeZone = false;\n                     }\n-                    LocalDate date;\n+\n+LocalDate date;\n                     if ( selectingDate )\n                     {\n                         AnyValue dateField = fields.get( TemporalFields.date );\n-                        if ( !(dateField instanceof TemporalValue) )\n+                        if ( !( dateField instanceof TemporalValue) )\n                         {\n-                            throw new InvalidValuesArgumentException(\n-                                    String.format( \"Cannot construct date from: %s\", dateField ) );\n+                            throw new InvalidValuesArgumentException( String.format( \"Cannot construct date from: %s\", dateField ) );\n                         }\n-                        TemporalValue t = (TemporalValue) dateField;\n+\n+TemporalValue t = (TemporalValue) dateField;\n                         date = t.getDatePart();\n                     }\n                     else\n                     {\n                         date = DateValue.DEFAULT_CALENDER_DATE;\n                     }\n-                    result = ZonedDateTime.of( date, time, zoneId );\n+\n+result = ZonedDateTime.of( date, time, zoneId );\n                 }\n                 else\n                 {\n@@ -353,16 +339,11 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n                     selectingTimeZone = false;\n                 }\n \n-                if ( fields.containsKey( TemporalFields.week ) && !selectingDate && !selectingDateTime &&\n-                     !selectingEpoch )\n-                {\n+                if ( fields.containsKey( TemporalFields.week ) && !selectingDate && !selectingDateTime &&!selectingEpoch )\n+{\n                     // Be sure to be in the start of the week based year (which can be later than 1st Jan)\n-                    result = result\n-                            .with( IsoFields.WEEK_BASED_YEAR,\n-                                    safeCastIntegral( TemporalFields.year.name(), fields.get( TemporalFields.year ),\n-                                            TemporalFields.year.defaultValue ) )\n-                            .with( IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1 )\n-                            .with( ChronoField.DAY_OF_WEEK, 1 );\n+                    result = result.with( IsoFields.WEEK_BASED_YEAR,\n+                                    safeCastIntegral( TemporalFields.year.name(), fields.get( TemporalFields.year ), TemporalFields.year.defaultValue ) ).with( IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1 ).with( ChronoField.DAY_OF_WEEK, 1 );\n                 }\n \n                 result = assignAllFields( result );\n@@ -394,13 +375,12 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n                 {\n                     DateTimeValue value = (DateTimeValue) datetime;\n                     ZoneId zone = optionalTimezone();\n-                    return zone == null ? value : new DateTimeValue(\n-                            ZonedDateTime.of( value.temporal().toLocalDateTime(), zone ) );\n+                    return zone == null ? value : new DateTimeValue( ZonedDateTime.of( value.temporal().toLocalDateTime(), zone ) );\n                 }\n-                if ( datetime instanceof LocalDateTimeValue )\n+\n+if ( datetime instanceof LocalDateTimeValue )\n                 {\n-                    return new DateTimeValue( ZonedDateTime.of(\n-                            ((LocalDateTimeValue) datetime).temporal(), timezone() ) );\n+                    return new DateTimeValue( ZonedDateTime.of(((LocalDateTimeValue) datetime).temporal(), timezone() ) );\n                 }\n                 throw new UnsupportedTemporalUnitException( \"Cannot select datetime from: \" + datetime );\n             }\n@@ -509,8 +489,7 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n                 }\n             }\n             return res;\n-\n-        }\n+    }\n         return false;\n     }\n \n@@ -615,15 +594,12 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n     }\n \n     private static final String ZONE_NAME = \"(?<zoneName>[a-zA-Z0-9~._ /+-]+)\";\n-    private static final Pattern PATTERN = Pattern.compile(\n-            DATE_PATTERN + \"(?<time>T\" + TIME_PATTERN + \"(?:\\\\[\" + ZONE_NAME + \"\\\\])?\" + \")?\",\n+    private static final Pattern PATTERN = Pattern.compile( DATE_PATTERN + \"(?<time>T\" + TIME_PATTERN + \"(?:\\\\[\" + ZONE_NAME + \"\\\\])?\" + \")?\",\n             Pattern.CASE_INSENSITIVE );\n-    private static final DateTimeFormatter ZONE_NAME_PARSER = new DateTimeFormatterBuilder()\n-            .parseCaseInsensitive()\n-            .appendZoneRegionId()\n-            .toFormatter();\n \n-    private static DateTimeValue parse( Matcher matcher, Supplier<ZoneId> defaultZone )\n+private static final DateTimeFormatter ZONE_NAME_PARSER = new DateTimeFormatterBuilder().parseCaseInsensitive().appendZoneRegionId().toFormatter();\n+\n+private static DateTimeValue parse( Matcher matcher, Supplier<ZoneId> defaultZone )\n     {\n         LocalDateTime local = LocalDateTime.of( parseDate( matcher ), optTime( matcher ) );\n         String zoneName = matcher.group( \"zoneName\" );\n@@ -643,7 +619,8 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n                 {\n                     throw new TemporalParseException( e.getMessage(), e );\n                 }\n-                if ( !expected.equals( offset ) )\n+\n+if ( !expected.equals( offset ) )\n                 {\n                     throw new InvalidValuesArgumentException( \"Timezone and offset do not match: \" + matcher.group() );\n                 }\n@@ -669,10 +646,10 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n         }\n         catch ( DateTimeParseException e )\n         {\n-            throw new TemporalParseException( \"Invalid value for TimeZone: \" + e.getMessage(), e.getParsedString(),\n-                    e.getErrorIndex(), e );\n+            throw new TemporalParseException( \"Invalid value for TimeZone: \" + e.getMessage(), e.getParsedString(), e.getErrorIndex(), e );\n         }\n-        return parsedName;\n+\n+return parsedName;\n     }\n \n     public static ZoneId parseZoneOffsetOrZoneName( String zoneName )\n@@ -682,15 +659,15 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n         {\n             return parseOffset( matcher );\n         }\n-        try\n+\n+try\n         {\n             return ZONE_NAME_PARSER.parse( zoneName.replace( ' ', '_' ) ).query( TemporalQueries.zoneId() );\n         }\n         catch ( DateTimeParseException e )\n         {\n-            throw new TemporalParseException( \"Invalid value for TimeZone: \" + e.getMessage(), e.getParsedString(),\n-                    e.getErrorIndex(), e );\n-        }\n+            throw new TemporalParseException( \"Invalid value for TimeZone: \" + e.getMessage(), e.getParsedString(), e.getErrorIndex(), e );\n+    }\n     }\n \n     abstract static class DateTimeBuilder<Result> extends Builder<Result>\n@@ -714,4 +691,4 @@ public final class DateTimeValue extends TemporalValue<ZonedDateTime,DateTimeVal\n \n         protected abstract Result selectDateTime( AnyValue date );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 113
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}