{
    "project_name": "Angel-ML-angel",
    "error_id": "814",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/814/MergeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/814/MergeUtils.java\nindex 3657278ac48..c2da5e3f0f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/814/MergeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/814/MergeUtils.java\n@@ -108,12 +108,12 @@ public class MergeUtils {\n    * Combine row splits of a single matrix row.\n    *\n    * @param rowSplits row splits\n-   * @param matrixId matrix id\n-   * @param rowIndex row index\n+   * @param matrixId  matrix id\n+   * @param rowIndex  row index\n    * @return TVector merged row\n    */\n   public static Vector combineServerRowSplits(List<ServerRow> rowSplits, int matrixId,\n-      int rowIndex) {\n+                                              int rowIndex) {\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n     RowType rowType = matrixMeta.getRowType();\n \n@@ -155,15 +155,15 @@ public class MergeUtils {\n   /**\n    * Combine the rows splits.\n    *\n-   * @param matrixId Matrix id\n-   * @param rowIds row id\n+   * @param matrixId   Matrix id\n+   * @param rowIds     row id\n    * @param resultSize keys number\n-   * @param keyParts keys partitions\n+   * @param keyParts   keys partitions\n    * @param valueParts values partitions\n    * @return merged vectors\n    */\n   public static Vector[] combineIndexRowsSplits(int matrixId, int[] rowIds, int resultSize,\n-      KeyPart[] keyParts, ValuePart[][] valueParts) {\n+                                                KeyPart[] keyParts, ValuePart[][] valueParts) {\n     Vector[] vectors = new Vector[rowIds.length];\n     for (int i = 0; i < rowIds.length; i++) {\n       vectors[i] = combineIndexRowSplits(matrixId, rowIds[i], resultSize, keyParts, valueParts[i]);\n@@ -174,15 +174,15 @@ public class MergeUtils {\n   /**\n    * Combine the row splits.\n    *\n-   * @param matrixId Matrix id\n-   * @param rowId row id\n+   * @param matrixId   Matrix id\n+   * @param rowId      row id\n    * @param resultSize keys number\n-   * @param keyParts keys partitions\n+   * @param keyParts   keys partitions\n    * @param valueParts values partitions\n    * @return merged vector\n    */\n   public static Vector combineIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts) {\n+                                             KeyPart[] keyParts, ValuePart[] valueParts) {\n \n     // Get matrix meta\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n@@ -234,8 +234,8 @@ public class MergeUtils {\n   // Combine Int key Double value vector\n   ////////////////////////////////////////////////////////////////////////////////\n   public static Vector combineIntDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+                                                      KeyPart[] keyParts, ValuePart[] valueParts,\n+                                                      MatrixMeta matrixMeta) {\n     IntDoubleVector vector = VFactory.sparseDoubleVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (DoubleValuesPart) valueParts[i]);\n@@ -246,7 +246,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(IntDoubleVector vector, KeyPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+                             DoubleValuesPart valuesPart) {\n     if (keysPart instanceof RangeViewIntKeysPart) {\n       mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\n     } else {\n@@ -255,7 +255,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(IntDoubleVector vector, RangeViewIntKeysPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+                             DoubleValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -266,7 +266,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(IntDoubleVector vector, HashIntKeysPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+                             DoubleValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     double[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -278,8 +278,8 @@ public class MergeUtils {\n   // Combine Int key Float value vector\n   ////////////////////////////////////////////////////////////////////////////////\n   public static Vector combineIntFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+                                                     KeyPart[] keyParts, ValuePart[] valueParts,\n+                                                     MatrixMeta matrixMeta) {\n     IntFloatVector vector = VFactory.sparseFloatVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (FloatValuesPart) valueParts[i]);\n@@ -298,7 +298,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(IntFloatVector vector, RangeViewIntKeysPart keysPart,\n-      FloatValuesPart valuesPart) {\n+                             FloatValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -309,7 +309,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(IntFloatVector vector, HashIntKeysPart keysPart,\n-      FloatValuesPart valuesPart) {\n+                             FloatValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     float[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -321,8 +321,8 @@ public class MergeUtils {\n   // Combine Int key Long value vector\n   ////////////////////////////////////////////////////////////////////////////////\n   public static Vector combineIntLongIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+                                                    KeyPart[] keyParts, ValuePart[] valueParts,\n+                                                    MatrixMeta matrixMeta) {\n     IntLongVector vector = VFactory.sparseLongVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (LongValuesPart) valueParts[i]);\n@@ -341,7 +341,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(IntLongVector vector, RangeViewIntKeysPart keysPart,\n-      LongValuesPart valuesPart) {\n+                             LongValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -352,7 +352,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(IntLongVector vector, HashIntKeysPart keysPart,\n-      LongValuesPart valuesPart) {\n+                             LongValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     long[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -364,8 +364,8 @@ public class MergeUtils {\n   // Combine Int key Int value vector\n   ////////////////////////////////////////////////////////////////////////////////\n   public static Vector combineIntIntIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+                                                   KeyPart[] keyParts, ValuePart[] valueParts,\n+                                                   MatrixMeta matrixMeta) {\n     IntIntVector vector = VFactory.sparseIntVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (IntValuesPart) valueParts[i]);\n@@ -384,7 +384,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(IntIntVector vector, RangeViewIntKeysPart keysPart,\n-      IntValuesPart valuesPart) {\n+                             IntValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -395,7 +395,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(IntIntVector vector, HashIntKeysPart keysPart,\n-      IntValuesPart valuesPart) {\n+                             IntValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     int[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -407,8 +407,8 @@ public class MergeUtils {\n   // Combine Long key Double value vector\n   ////////////////////////////////////////////////////////////////////////////////\n   public static Vector combineLongDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+                                                       KeyPart[] keyParts, ValuePart[] valueParts,\n+                                                       MatrixMeta matrixMeta) {\n     LongDoubleVector vector = VFactory\n         .sparseLongKeyDoubleVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n@@ -420,7 +420,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(LongDoubleVector vector, KeyPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+                             DoubleValuesPart valuesPart) {\n     if (keysPart instanceof RangeViewLongKeysPart) {\n       mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\n     } else {\n@@ -429,7 +429,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(LongDoubleVector vector, RangeViewLongKeysPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+                             DoubleValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -440,7 +440,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(LongDoubleVector vector, HashLongKeysPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+                             DoubleValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     double[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -452,8 +452,8 @@ public class MergeUtils {\n   // Combine Long key Float value vector\n   ////////////////////////////////////////////////////////////////////////////////\n   public static Vector combineLongFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+                                                      KeyPart[] keyParts, ValuePart[] valueParts,\n+                                                      MatrixMeta matrixMeta) {\n     LongFloatVector vector = VFactory.sparseLongKeyFloatVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (FloatValuesPart) valueParts[i]);\n@@ -472,7 +472,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(LongFloatVector vector, RangeViewLongKeysPart keysPart,\n-      FloatValuesPart valuesPart) {\n+                             FloatValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -483,7 +483,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(LongFloatVector vector, HashLongKeysPart keysPart,\n-      FloatValuesPart valuesPart) {\n+                             FloatValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     float[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -495,8 +495,8 @@ public class MergeUtils {\n   // Combine Long key Int value vector\n   ////////////////////////////////////////////////////////////////////////////////\n   public static Vector combineLongIntIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+                                                    KeyPart[] keyParts, ValuePart[] valueParts,\n+                                                    MatrixMeta matrixMeta) {\n     LongIntVector vector = VFactory.sparseLongKeyIntVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (IntValuesPart) valueParts[i]);\n@@ -515,7 +515,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(LongIntVector vector, RangeViewLongKeysPart keysPart,\n-      IntValuesPart valuesPart) {\n+                             IntValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -526,7 +526,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(LongIntVector vector, HashLongKeysPart keysPart,\n-      IntValuesPart valuesPart) {\n+                             IntValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     int[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -538,8 +538,8 @@ public class MergeUtils {\n   // Combine Long key Long value vector\n   ////////////////////////////////////////////////////////////////////////////////\n   public static Vector combineLongLongIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+                                                     KeyPart[] keyParts, ValuePart[] valueParts,\n+                                                     MatrixMeta matrixMeta) {\n     LongLongVector vector = VFactory.sparseLongKeyLongVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (LongValuesPart) valueParts[i]);\n@@ -558,7 +558,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(LongLongVector vector, RangeViewLongKeysPart keysPart,\n-      LongValuesPart valuesPart) {\n+                             LongValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -569,7 +569,7 @@ public class MergeUtils {\n   }\n \n   public static void mergeTo(LongLongVector vector, HashLongKeysPart keysPart,\n-      LongValuesPart valuesPart) {\n+                             LongValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     long[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -578,7 +578,7 @@ public class MergeUtils {\n   }\n \n   private static Vector combineServerIntDoubleRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+                                                        MatrixMeta matrixMeta, int rowIndex) {\n     int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -587,7 +587,7 @@ public class MergeUtils {\n     }\n \n     IntDoubleVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseDoubleVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -611,7 +611,7 @@ public class MergeUtils {\n   }\n \n   private static Vector combineServerIntFloatRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+                                                       MatrixMeta matrixMeta, int rowIndex) {\n     int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -620,7 +620,7 @@ public class MergeUtils {\n     }\n \n     IntFloatVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseFloatVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -645,7 +645,7 @@ public class MergeUtils {\n   }\n \n   private static Vector combineServerIntIntRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+                                                     MatrixMeta matrixMeta, int rowIndex) {\n     int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -654,7 +654,7 @@ public class MergeUtils {\n     }\n \n     IntIntVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseIntVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -679,7 +679,7 @@ public class MergeUtils {\n   }\n \n   private static Vector combineServerIntLongRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+                                                      MatrixMeta matrixMeta, int rowIndex) {\n     int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -688,7 +688,7 @@ public class MergeUtils {\n     }\n \n     IntLongVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseLongVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -713,7 +713,7 @@ public class MergeUtils {\n   }\n \n   private static Vector combineServerLongDoubleRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+                                                         MatrixMeta matrixMeta, int rowIndex) {\n     long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -738,7 +738,7 @@ public class MergeUtils {\n   }\n \n   private static Vector combineServerLongFloatRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+                                                        MatrixMeta matrixMeta, int rowIndex) {\n     long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -762,7 +762,7 @@ public class MergeUtils {\n   }\n \n   private static Vector combineServerLongIntRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+                                                      MatrixMeta matrixMeta, int rowIndex) {\n     long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -787,7 +787,7 @@ public class MergeUtils {\n \n \n   private static Vector combineServerLongLongRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+                                                       MatrixMeta matrixMeta, int rowIndex) {\n     long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 170.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "252",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "294",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "336",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "378",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "380",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "421",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "463",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "505",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/814/MergeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/814/MergeUtils.java\nindex 3657278ac48..f7d238c09aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/814/MergeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/814/MergeUtils.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.psagent.matrix.transport.adapter;\n \n import com.tencent.angel.PartitionKey;\n@@ -68,8 +67,7 @@ public class MergeUtils {\n   private static final float storageConvFactor = 0.25f;\n \n   static class StartColComparator implements Comparator<ServerRow> {\n-\n-    @Override\n+  @Override\n     public int compare(ServerRow r1, ServerRow r2) {\n       return compareStartCol(r1, r2);\n     }\n@@ -85,10 +83,8 @@ public class MergeUtils {\n     }\n   }\n \n-\n-  static class PartitionKeyComparator implements Comparator<PartitionKey> {\n-\n-    @Override\n+static class PartitionKeyComparator implements Comparator<PartitionKey> {\n+  @Override\n     public int compare(PartitionKey p1, PartitionKey p2) {\n       return comparePartitionKey(p1, p2);\n     }\n@@ -112,43 +108,32 @@ public class MergeUtils {\n    * @param rowIndex row index\n    * @return TVector merged row\n    */\n-  public static Vector combineServerRowSplits(List<ServerRow> rowSplits, int matrixId,\n-      int rowIndex) {\n+  public static Vector combineServerRowSplits(List<ServerRow> rowSplits, int matrixId, int rowIndex) {\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n     RowType rowType = matrixMeta.getRowType();\n-\n-    switch (rowType) {\n+switch (rowType) {\n       case T_DOUBLE_DENSE:\n       case T_DOUBLE_SPARSE:\n         return combineServerIntDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n-      case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n       case T_FLOAT_SPARSE:\n         return combineServerIntFloatRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n-      case T_INT_DENSE:\n+  case T_INT_DENSE:\n       case T_INT_SPARSE:\n         return combineServerIntIntRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n-      case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n       case T_LONG_SPARSE:\n         return combineServerIntLongRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n-      case T_DOUBLE_SPARSE_LONGKEY:\n+  case T_DOUBLE_SPARSE_LONGKEY:\n         return combineServerLongDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n-      case T_FLOAT_SPARSE_LONGKEY:\n+  case T_FLOAT_SPARSE_LONGKEY:\n         return combineServerLongFloatRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n-      case T_INT_SPARSE_LONGKEY:\n+  case T_INT_SPARSE_LONGKEY:\n         return combineServerLongIntRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n-      case T_LONG_SPARSE_LONGKEY:\n+  case T_LONG_SPARSE_LONGKEY:\n         return combineServerLongLongRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n-      default:\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: merge \" + rowType + \" vector splits\");\n+  default:\n+        throw new UnsupportedOperationException(\"Unsupport operation: merge \" + rowType + \" vector splits\");\n     }\n   }\n \n@@ -162,9 +147,8 @@ public class MergeUtils {\n    * @param valueParts values partitions\n    * @return merged vectors\n    */\n-  public static Vector[] combineIndexRowsSplits(int matrixId, int[] rowIds, int resultSize,\n-      KeyPart[] keyParts, ValuePart[][] valueParts) {\n-    Vector[] vectors = new Vector[rowIds.length];\n+  public static Vector[] combineIndexRowsSplits(int matrixId, int[] rowIds, int resultSize, KeyPart[] keyParts, ValuePart[][] valueParts) {\n+  Vector[] vectors = new Vector[rowIds.length];\n     for (int i = 0; i < rowIds.length; i++) {\n       vectors[i] = combineIndexRowSplits(matrixId, rowIds[i], resultSize, keyParts, valueParts[i]);\n     }\n@@ -181,51 +165,40 @@ public class MergeUtils {\n    * @param valueParts values partitions\n    * @return merged vector\n    */\n-  public static Vector combineIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts) {\n-\n-    // Get matrix meta\n+  public static Vector combineIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts) {\n+  // Get matrix meta\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n     RowType rowType = matrixMeta.getRowType();\n-\n-    switch (rowType) {\n+switch (rowType) {\n       case T_DOUBLE_DENSE:\n       case T_DOUBLE_SPARSE:\n         return combineIntDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n             matrixMeta);\n-\n-      case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n       case T_FLOAT_SPARSE:\n         return combineIntFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n             matrixMeta);\n-\n-      case T_INT_DENSE:\n+  case T_INT_DENSE:\n       case T_INT_SPARSE:\n         return combineIntIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n             matrixMeta);\n-\n-      case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n       case T_LONG_SPARSE:\n         return combineIntLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n             matrixMeta);\n-\n-      case T_DOUBLE_SPARSE_LONGKEY:\n+  case T_DOUBLE_SPARSE_LONGKEY:\n         return combineLongDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n             matrixMeta);\n-\n-      case T_FLOAT_SPARSE_LONGKEY:\n+  case T_FLOAT_SPARSE_LONGKEY:\n         return combineLongFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n             matrixMeta);\n-\n-      case T_INT_SPARSE_LONGKEY:\n+  case T_INT_SPARSE_LONGKEY:\n         return combineLongIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n             matrixMeta);\n-\n-      case T_LONG_SPARSE_LONGKEY:\n+  case T_LONG_SPARSE_LONGKEY:\n         return combineLongLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n             matrixMeta);\n-\n-      default:\n+  default:\n         throw new UnsupportedOperationException(\"unsupport row type \" + rowType);\n     }\n   }\n@@ -233,8 +206,7 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Int key Double value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineIntDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n+  public static Vector combineIntDoubleIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\n       MatrixMeta matrixMeta) {\n     IntDoubleVector vector = VFactory.sparseDoubleVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n@@ -247,7 +219,7 @@ public class MergeUtils {\n \n   public static void mergeTo(IntDoubleVector vector, KeyPart keysPart,\n       DoubleValuesPart valuesPart) {\n-    if (keysPart instanceof RangeViewIntKeysPart) {\n+  if (keysPart instanceof RangeViewIntKeysPart) {\n       mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\n     } else {\n       mergeTo(vector, (HashIntKeysPart) keysPart, valuesPart);\n@@ -256,7 +228,7 @@ public class MergeUtils {\n \n   public static void mergeTo(IntDoubleVector vector, RangeViewIntKeysPart keysPart,\n       DoubleValuesPart valuesPart) {\n-    int[] keys = keysPart.getKeys();\n+  int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n     double[] values = valuesPart.getValues();\n@@ -267,7 +239,7 @@ public class MergeUtils {\n \n   public static void mergeTo(IntDoubleVector vector, HashIntKeysPart keysPart,\n       DoubleValuesPart valuesPart) {\n-    int[] keys = keysPart.getKeys();\n+  int[] keys = keysPart.getKeys();\n     double[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n       vector.set(keys[i], values[i]);\n@@ -277,8 +249,7 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Int key Float value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineIntFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n+  public static Vector combineIntFloatIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\n       MatrixMeta matrixMeta) {\n     IntFloatVector vector = VFactory.sparseFloatVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n@@ -299,7 +270,7 @@ public class MergeUtils {\n \n   public static void mergeTo(IntFloatVector vector, RangeViewIntKeysPart keysPart,\n       FloatValuesPart valuesPart) {\n-    int[] keys = keysPart.getKeys();\n+  int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n     float[] values = valuesPart.getValues();\n@@ -310,7 +281,7 @@ public class MergeUtils {\n \n   public static void mergeTo(IntFloatVector vector, HashIntKeysPart keysPart,\n       FloatValuesPart valuesPart) {\n-    int[] keys = keysPart.getKeys();\n+  int[] keys = keysPart.getKeys();\n     float[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n       vector.set(keys[i], values[i]);\n@@ -320,8 +291,7 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Int key Long value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineIntLongIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n+  public static Vector combineIntLongIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\n       MatrixMeta matrixMeta) {\n     IntLongVector vector = VFactory.sparseLongVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n@@ -342,7 +312,7 @@ public class MergeUtils {\n \n   public static void mergeTo(IntLongVector vector, RangeViewIntKeysPart keysPart,\n       LongValuesPart valuesPart) {\n-    int[] keys = keysPart.getKeys();\n+  int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n     long[] values = valuesPart.getValues();\n@@ -353,7 +323,7 @@ public class MergeUtils {\n \n   public static void mergeTo(IntLongVector vector, HashIntKeysPart keysPart,\n       LongValuesPart valuesPart) {\n-    int[] keys = keysPart.getKeys();\n+  int[] keys = keysPart.getKeys();\n     long[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n       vector.set(keys[i], values[i]);\n@@ -363,8 +333,7 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Int key Int value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineIntIntIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n+  public static Vector combineIntIntIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\n       MatrixMeta matrixMeta) {\n     IntIntVector vector = VFactory.sparseIntVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n@@ -385,7 +354,7 @@ public class MergeUtils {\n \n   public static void mergeTo(IntIntVector vector, RangeViewIntKeysPart keysPart,\n       IntValuesPart valuesPart) {\n-    int[] keys = keysPart.getKeys();\n+  int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n     int[] values = valuesPart.getValues();\n@@ -396,7 +365,7 @@ public class MergeUtils {\n \n   public static void mergeTo(IntIntVector vector, HashIntKeysPart keysPart,\n       IntValuesPart valuesPart) {\n-    int[] keys = keysPart.getKeys();\n+  int[] keys = keysPart.getKeys();\n     int[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n       vector.set(keys[i], values[i]);\n@@ -406,11 +375,9 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Long key Double value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineLongDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n+  public static Vector combineLongDoubleIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\n       MatrixMeta matrixMeta) {\n-    LongDoubleVector vector = VFactory\n-        .sparseLongKeyDoubleVector(matrixMeta.getColNum(), resultSize);\n+    LongDoubleVector vector = VFactory.sparseLongKeyDoubleVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (DoubleValuesPart) valueParts[i]);\n     }\n@@ -421,7 +388,7 @@ public class MergeUtils {\n \n   public static void mergeTo(LongDoubleVector vector, KeyPart keysPart,\n       DoubleValuesPart valuesPart) {\n-    if (keysPart instanceof RangeViewLongKeysPart) {\n+  if (keysPart instanceof RangeViewLongKeysPart) {\n       mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\n     } else {\n       mergeTo(vector, (HashLongKeysPart) keysPart, valuesPart);\n@@ -430,7 +397,7 @@ public class MergeUtils {\n \n   public static void mergeTo(LongDoubleVector vector, RangeViewLongKeysPart keysPart,\n       DoubleValuesPart valuesPart) {\n-    long[] keys = keysPart.getKeys();\n+  long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n     double[] values = valuesPart.getValues();\n@@ -441,7 +408,7 @@ public class MergeUtils {\n \n   public static void mergeTo(LongDoubleVector vector, HashLongKeysPart keysPart,\n       DoubleValuesPart valuesPart) {\n-    long[] keys = keysPart.getKeys();\n+  long[] keys = keysPart.getKeys();\n     double[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n       vector.set(keys[i], values[i]);\n@@ -451,8 +418,7 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Long key Float value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineLongFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n+  public static Vector combineLongFloatIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\n       MatrixMeta matrixMeta) {\n     LongFloatVector vector = VFactory.sparseLongKeyFloatVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n@@ -473,7 +439,7 @@ public class MergeUtils {\n \n   public static void mergeTo(LongFloatVector vector, RangeViewLongKeysPart keysPart,\n       FloatValuesPart valuesPart) {\n-    long[] keys = keysPart.getKeys();\n+  long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n     float[] values = valuesPart.getValues();\n@@ -484,7 +450,7 @@ public class MergeUtils {\n \n   public static void mergeTo(LongFloatVector vector, HashLongKeysPart keysPart,\n       FloatValuesPart valuesPart) {\n-    long[] keys = keysPart.getKeys();\n+  long[] keys = keysPart.getKeys();\n     float[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n       vector.set(keys[i], values[i]);\n@@ -494,8 +460,7 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Long key Int value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineLongIntIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n+  public static Vector combineLongIntIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\n       MatrixMeta matrixMeta) {\n     LongIntVector vector = VFactory.sparseLongKeyIntVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n@@ -516,7 +481,7 @@ public class MergeUtils {\n \n   public static void mergeTo(LongIntVector vector, RangeViewLongKeysPart keysPart,\n       IntValuesPart valuesPart) {\n-    long[] keys = keysPart.getKeys();\n+  long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n     int[] values = valuesPart.getValues();\n@@ -527,7 +492,7 @@ public class MergeUtils {\n \n   public static void mergeTo(LongIntVector vector, HashLongKeysPart keysPart,\n       IntValuesPart valuesPart) {\n-    long[] keys = keysPart.getKeys();\n+  long[] keys = keysPart.getKeys();\n     int[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n       vector.set(keys[i], values[i]);\n@@ -537,8 +502,7 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Long key Long value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineLongLongIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n+  public static Vector combineLongLongIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\n       MatrixMeta matrixMeta) {\n     LongLongVector vector = VFactory.sparseLongKeyLongVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n@@ -559,7 +523,7 @@ public class MergeUtils {\n \n   public static void mergeTo(LongLongVector vector, RangeViewLongKeysPart keysPart,\n       LongValuesPart valuesPart) {\n-    long[] keys = keysPart.getKeys();\n+  long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n     long[] values = valuesPart.getValues();\n@@ -570,7 +534,7 @@ public class MergeUtils {\n \n   public static void mergeTo(LongLongVector vector, HashLongKeysPart keysPart,\n       LongValuesPart valuesPart) {\n-    long[] keys = keysPart.getKeys();\n+  long[] keys = keysPart.getKeys();\n     long[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n       vector.set(keys[i], values[i]);\n@@ -579,7 +543,7 @@ public class MergeUtils {\n \n   private static Vector combineServerIntDoubleRowSplits(List<ServerRow> rowSplits,\n       MatrixMeta matrixMeta, int rowIndex) {\n-    int colNum = (int) matrixMeta.getColNum();\n+  int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n     for (int i = 0; i < size; i++) {\n@@ -587,7 +551,7 @@ public class MergeUtils {\n     }\n \n     IntDoubleVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseDoubleVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -612,7 +576,7 @@ public class MergeUtils {\n \n   private static Vector combineServerIntFloatRowSplits(List<ServerRow> rowSplits,\n       MatrixMeta matrixMeta, int rowIndex) {\n-    int colNum = (int) matrixMeta.getColNum();\n+  int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n     for (int i = 0; i < size; i++) {\n@@ -620,7 +584,7 @@ public class MergeUtils {\n     }\n \n     IntFloatVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseFloatVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -646,7 +610,7 @@ public class MergeUtils {\n \n   private static Vector combineServerIntIntRowSplits(List<ServerRow> rowSplits,\n       MatrixMeta matrixMeta, int rowIndex) {\n-    int colNum = (int) matrixMeta.getColNum();\n+  int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n     for (int i = 0; i < size; i++) {\n@@ -654,7 +618,7 @@ public class MergeUtils {\n     }\n \n     IntIntVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseIntVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -680,7 +644,7 @@ public class MergeUtils {\n \n   private static Vector combineServerIntLongRowSplits(List<ServerRow> rowSplits,\n       MatrixMeta matrixMeta, int rowIndex) {\n-    int colNum = (int) matrixMeta.getColNum();\n+  int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n     for (int i = 0; i < size; i++) {\n@@ -688,7 +652,7 @@ public class MergeUtils {\n     }\n \n     IntLongVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseLongVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -714,7 +678,7 @@ public class MergeUtils {\n \n   private static Vector combineServerLongDoubleRowSplits(List<ServerRow> rowSplits,\n       MatrixMeta matrixMeta, int rowIndex) {\n-    long colNum = matrixMeta.getColNum();\n+  long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n     for (int i = 0; i < size; i++) {\n@@ -739,7 +703,7 @@ public class MergeUtils {\n \n   private static Vector combineServerLongFloatRowSplits(List<ServerRow> rowSplits,\n       MatrixMeta matrixMeta, int rowIndex) {\n-    long colNum = matrixMeta.getColNum();\n+  long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n     for (int i = 0; i < size; i++) {\n@@ -763,7 +727,7 @@ public class MergeUtils {\n \n   private static Vector combineServerLongIntRowSplits(List<ServerRow> rowSplits,\n       MatrixMeta matrixMeta, int rowIndex) {\n-    long colNum = matrixMeta.getColNum();\n+  long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n     for (int i = 0; i < size; i++) {\n@@ -788,7 +752,7 @@ public class MergeUtils {\n \n   private static Vector combineServerLongLongRowSplits(List<ServerRow> rowSplits,\n       MatrixMeta matrixMeta, int rowIndex) {\n-    long colNum = matrixMeta.getColNum();\n+  long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n     for (int i = 0; i < size; i++) {\n@@ -810,5 +774,4 @@ public class MergeUtils {\n     }\n     return row;\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 104
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "256",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "299",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "342",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "385",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "386",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "428",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "471",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "514",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/814/MergeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/814/MergeUtils.java\nindex 3657278ac48..16fb8413fe8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/814/MergeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/814/MergeUtils.java\n@@ -60,6 +60,7 @@ import org.apache.commons.logging.LogFactory;\n /**\n  * Row splits combine tool.\n  */\n+\n public class MergeUtils {\n \n   private static final Log LOG = LogFactory.getLog(RowSplitCombineUtils.class);\n@@ -69,6 +70,7 @@ public class MergeUtils {\n \n   static class StartColComparator implements Comparator<ServerRow> {\n \n+\n     @Override\n     public int compare(ServerRow r1, ServerRow r2) {\n       return compareStartCol(r1, r2);\n@@ -78,16 +80,16 @@ public class MergeUtils {\n       if (r1.getStartCol() > r2.getStartCol()) {\n         return 1;\n       } else if (r1.getStartCol() < r2.getStartCol()) {\n-        return -1;\n+               return -1;\n       } else {\n         return 0;\n       }\n     }\n   }\n \n-\n   static class PartitionKeyComparator implements Comparator<PartitionKey> {\n \n+\n     @Override\n     public int compare(PartitionKey p1, PartitionKey p2) {\n       return comparePartitionKey(p1, p2);\n@@ -97,7 +99,7 @@ public class MergeUtils {\n       if (p1.getStartCol() > p2.getStartCol()) {\n         return 1;\n       } else if (p1.getStartCol() < p2.getStartCol()) {\n-        return -1;\n+               return -1;\n       } else {\n         return 0;\n       }\n@@ -112,43 +114,34 @@ public class MergeUtils {\n    * @param rowIndex row index\n    * @return TVector merged row\n    */\n-  public static Vector combineServerRowSplits(List<ServerRow> rowSplits, int matrixId,\n-      int rowIndex) {\n+\n+  public static Vector combineServerRowSplits(\n+    List<ServerRow> rowSplits, int matrixId, int rowIndex) {\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n     RowType rowType = matrixMeta.getRowType();\n-\n     switch (rowType) {\n       case T_DOUBLE_DENSE:\n       case T_DOUBLE_SPARSE:\n         return combineServerIntDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n       case T_FLOAT_DENSE:\n       case T_FLOAT_SPARSE:\n         return combineServerIntFloatRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n       case T_INT_DENSE:\n       case T_INT_SPARSE:\n         return combineServerIntIntRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n       case T_LONG_DENSE:\n       case T_LONG_SPARSE:\n         return combineServerIntLongRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n       case T_DOUBLE_SPARSE_LONGKEY:\n         return combineServerLongDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n       case T_FLOAT_SPARSE_LONGKEY:\n         return combineServerLongFloatRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n       case T_INT_SPARSE_LONGKEY:\n         return combineServerLongIntRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n       case T_LONG_SPARSE_LONGKEY:\n         return combineServerLongLongRowSplits(rowSplits, matrixMeta, rowIndex);\n-\n       default:\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: merge \" + rowType + \" vector splits\");\n+        throw new UnsupportedOperationException(\"Unsupport operation: merge \" + rowType + \" vector splits\");\n     }\n   }\n \n@@ -162,8 +155,8 @@ public class MergeUtils {\n    * @param valueParts values partitions\n    * @return merged vectors\n    */\n-  public static Vector[] combineIndexRowsSplits(int matrixId, int[] rowIds, int resultSize,\n-      KeyPart[] keyParts, ValuePart[][] valueParts) {\n+\n+  public static Vector[] combineIndexRowsSplits(int matrixId, int[] rowIds, int resultSize, KeyPart[] keyParts, ValuePart[][] valueParts) {\n     Vector[] vectors = new Vector[rowIds.length];\n     for (int i = 0; i < rowIds.length; i++) {\n       vectors[i] = combineIndexRowSplits(matrixId, rowIds[i], resultSize, keyParts, valueParts[i]);\n@@ -181,50 +174,33 @@ public class MergeUtils {\n    * @param valueParts values partitions\n    * @return merged vector\n    */\n-  public static Vector combineIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts) {\n+\n+  public static Vector combineIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts) {\n \n     // Get matrix meta\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n     RowType rowType = matrixMeta.getRowType();\n-\n     switch (rowType) {\n       case T_DOUBLE_DENSE:\n       case T_DOUBLE_SPARSE:\n-        return combineIntDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n-            matrixMeta);\n-\n+        return combineIntDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n       case T_FLOAT_DENSE:\n       case T_FLOAT_SPARSE:\n-        return combineIntFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n-            matrixMeta);\n-\n+        return combineIntFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n       case T_INT_DENSE:\n       case T_INT_SPARSE:\n-        return combineIntIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n-            matrixMeta);\n-\n+        return combineIntIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n       case T_LONG_DENSE:\n       case T_LONG_SPARSE:\n-        return combineIntLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n-            matrixMeta);\n-\n+        return combineIntLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n       case T_DOUBLE_SPARSE_LONGKEY:\n-        return combineLongDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n-            matrixMeta);\n-\n+        return combineLongDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n       case T_FLOAT_SPARSE_LONGKEY:\n-        return combineLongFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n-            matrixMeta);\n-\n+        return combineLongFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n       case T_INT_SPARSE_LONGKEY:\n-        return combineLongIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n-            matrixMeta);\n-\n+        return combineLongIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n       case T_LONG_SPARSE_LONGKEY:\n-        return combineLongLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\n-            matrixMeta);\n-\n+        return combineLongLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n       default:\n         throw new UnsupportedOperationException(\"unsupport row type \" + rowType);\n     }\n@@ -233,9 +209,8 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Int key Double value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineIntDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+\n+  public static Vector combineIntDoubleIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n     IntDoubleVector vector = VFactory.sparseDoubleVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (DoubleValuesPart) valueParts[i]);\n@@ -245,8 +220,8 @@ public class MergeUtils {\n     return vector;\n   }\n \n-  public static void mergeTo(IntDoubleVector vector, KeyPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntDoubleVector vector, KeyPart keysPart, DoubleValuesPart valuesPart) {\n     if (keysPart instanceof RangeViewIntKeysPart) {\n       mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\n     } else {\n@@ -254,8 +229,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(IntDoubleVector vector, RangeViewIntKeysPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntDoubleVector vector, RangeViewIntKeysPart keysPart, DoubleValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -265,8 +240,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(IntDoubleVector vector, HashIntKeysPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntDoubleVector vector, HashIntKeysPart keysPart, DoubleValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     double[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -277,9 +252,8 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Int key Float value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineIntFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+\n+  public static Vector combineIntFloatIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n     IntFloatVector vector = VFactory.sparseFloatVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (FloatValuesPart) valueParts[i]);\n@@ -289,7 +263,8 @@ public class MergeUtils {\n     return vector;\n   }\n \n-  public static void mergeTo(IntFloatVector vector, KeyPart keysPart, FloatValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntFloatVector vector, KeyPart keysPart, FloatValuesPart valuesPart) {\n     if (keysPart instanceof RangeViewIntKeysPart) {\n       mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\n     } else {\n@@ -297,8 +272,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(IntFloatVector vector, RangeViewIntKeysPart keysPart,\n-      FloatValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntFloatVector vector, RangeViewIntKeysPart keysPart, FloatValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -308,8 +283,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(IntFloatVector vector, HashIntKeysPart keysPart,\n-      FloatValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntFloatVector vector, HashIntKeysPart keysPart, FloatValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     float[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -320,9 +295,8 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Int key Long value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineIntLongIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+\n+  public static Vector combineIntLongIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n     IntLongVector vector = VFactory.sparseLongVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (LongValuesPart) valueParts[i]);\n@@ -332,7 +306,8 @@ public class MergeUtils {\n     return vector;\n   }\n \n-  public static void mergeTo(IntLongVector vector, KeyPart keysPart, LongValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntLongVector vector, KeyPart keysPart, LongValuesPart valuesPart) {\n     if (keysPart instanceof RangeViewIntKeysPart) {\n       mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\n     } else {\n@@ -340,8 +315,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(IntLongVector vector, RangeViewIntKeysPart keysPart,\n-      LongValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntLongVector vector, RangeViewIntKeysPart keysPart, LongValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -351,8 +326,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(IntLongVector vector, HashIntKeysPart keysPart,\n-      LongValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntLongVector vector, HashIntKeysPart keysPart, LongValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     long[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -363,9 +338,8 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Int key Int value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineIntIntIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+\n+  public static Vector combineIntIntIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n     IntIntVector vector = VFactory.sparseIntVector((int) matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (IntValuesPart) valueParts[i]);\n@@ -375,7 +349,8 @@ public class MergeUtils {\n     return vector;\n   }\n \n-  public static void mergeTo(IntIntVector vector, KeyPart keysPart, IntValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntIntVector vector, KeyPart keysPart, IntValuesPart valuesPart) {\n     if (keysPart instanceof RangeViewIntKeysPart) {\n       mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\n     } else {\n@@ -383,8 +358,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(IntIntVector vector, RangeViewIntKeysPart keysPart,\n-      IntValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntIntVector vector, RangeViewIntKeysPart keysPart, IntValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -394,8 +369,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(IntIntVector vector, HashIntKeysPart keysPart,\n-      IntValuesPart valuesPart) {\n+  public static void mergeTo(\n+    IntIntVector vector, HashIntKeysPart keysPart, IntValuesPart valuesPart) {\n     int[] keys = keysPart.getKeys();\n     int[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -406,11 +381,9 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Long key Double value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineLongDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n-    LongDoubleVector vector = VFactory\n-        .sparseLongKeyDoubleVector(matrixMeta.getColNum(), resultSize);\n+\n+  public static Vector combineLongDoubleIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n+    LongDoubleVector vector = VFactory.sparseLongKeyDoubleVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (DoubleValuesPart) valueParts[i]);\n     }\n@@ -419,8 +392,8 @@ public class MergeUtils {\n     return vector;\n   }\n \n-  public static void mergeTo(LongDoubleVector vector, KeyPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongDoubleVector vector, KeyPart keysPart, DoubleValuesPart valuesPart) {\n     if (keysPart instanceof RangeViewLongKeysPart) {\n       mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\n     } else {\n@@ -428,8 +401,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(LongDoubleVector vector, RangeViewLongKeysPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongDoubleVector vector, RangeViewLongKeysPart keysPart, DoubleValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -439,8 +412,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(LongDoubleVector vector, HashLongKeysPart keysPart,\n-      DoubleValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongDoubleVector vector, HashLongKeysPart keysPart, DoubleValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     double[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -451,9 +424,8 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Long key Float value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineLongFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+\n+  public static Vector combineLongFloatIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n     LongFloatVector vector = VFactory.sparseLongKeyFloatVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (FloatValuesPart) valueParts[i]);\n@@ -463,7 +435,8 @@ public class MergeUtils {\n     return vector;\n   }\n \n-  public static void mergeTo(LongFloatVector vector, KeyPart keysPart, FloatValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongFloatVector vector, KeyPart keysPart, FloatValuesPart valuesPart) {\n     if (keysPart instanceof RangeViewLongKeysPart) {\n       mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\n     } else {\n@@ -471,8 +444,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(LongFloatVector vector, RangeViewLongKeysPart keysPart,\n-      FloatValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongFloatVector vector, RangeViewLongKeysPart keysPart, FloatValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -482,8 +455,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(LongFloatVector vector, HashLongKeysPart keysPart,\n-      FloatValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongFloatVector vector, HashLongKeysPart keysPart, FloatValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     float[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -494,9 +467,8 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Long key Int value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineLongIntIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+\n+  public static Vector combineLongIntIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n     LongIntVector vector = VFactory.sparseLongKeyIntVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (IntValuesPart) valueParts[i]);\n@@ -506,7 +478,8 @@ public class MergeUtils {\n     return vector;\n   }\n \n-  public static void mergeTo(LongIntVector vector, KeyPart keysPart, IntValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongIntVector vector, KeyPart keysPart, IntValuesPart valuesPart) {\n     if (keysPart instanceof RangeViewLongKeysPart) {\n       mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\n     } else {\n@@ -514,8 +487,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(LongIntVector vector, RangeViewLongKeysPart keysPart,\n-      IntValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongIntVector vector, RangeViewLongKeysPart keysPart, IntValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -525,8 +498,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(LongIntVector vector, HashLongKeysPart keysPart,\n-      IntValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongIntVector vector, HashLongKeysPart keysPart, IntValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     int[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -537,9 +510,8 @@ public class MergeUtils {\n   ////////////////////////////////////////////////////////////////////////////////\n   // Combine Long key Long value vector\n   ////////////////////////////////////////////////////////////////////////////////\n-  public static Vector combineLongLongIndexRowSplits(int matrixId, int rowId, int resultSize,\n-      KeyPart[] keyParts, ValuePart[] valueParts,\n-      MatrixMeta matrixMeta) {\n+\n+  public static Vector combineLongLongIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n     LongLongVector vector = VFactory.sparseLongKeyLongVector(matrixMeta.getColNum(), resultSize);\n     for (int i = 0; i < keyParts.length; i++) {\n       mergeTo(vector, keyParts[i], (LongValuesPart) valueParts[i]);\n@@ -549,7 +521,8 @@ public class MergeUtils {\n     return vector;\n   }\n \n-  public static void mergeTo(LongLongVector vector, KeyPart keysPart, LongValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongLongVector vector, KeyPart keysPart, LongValuesPart valuesPart) {\n     if (keysPart instanceof RangeViewLongKeysPart) {\n       mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\n     } else {\n@@ -557,8 +530,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(LongLongVector vector, RangeViewLongKeysPart keysPart,\n-      LongValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongLongVector vector, RangeViewLongKeysPart keysPart, LongValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     int startPos = keysPart.getStartPos();\n     int endPos = keysPart.getEndPos();\n@@ -568,8 +541,8 @@ public class MergeUtils {\n     }\n   }\n \n-  public static void mergeTo(LongLongVector vector, HashLongKeysPart keysPart,\n-      LongValuesPart valuesPart) {\n+  public static void mergeTo(\n+    LongLongVector vector, HashLongKeysPart keysPart, LongValuesPart valuesPart) {\n     long[] keys = keysPart.getKeys();\n     long[] values = valuesPart.getValues();\n     for (int i = 0; i < keys.length; i++) {\n@@ -577,8 +550,8 @@ public class MergeUtils {\n     }\n   }\n \n-  private static Vector combineServerIntDoubleRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+  private static Vector combineServerIntDoubleRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n     int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -587,7 +560,7 @@ public class MergeUtils {\n     }\n \n     IntDoubleVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseDoubleVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -596,10 +569,8 @@ public class MergeUtils {\n         row = VFactory.sparseDoubleVector(colNum, elemNum);\n       }\n     }\n-\n     row.setMatrixId(matrixMeta.getId());\n     row.setRowId(rowIndex);\n-\n     Collections.sort(rowSplits, serverRowComp);\n     for (int i = 0; i < size; i++) {\n       if (rowSplits.get(i) == null) {\n@@ -610,8 +581,8 @@ public class MergeUtils {\n     return row;\n   }\n \n-  private static Vector combineServerIntFloatRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+  private static Vector combineServerIntFloatRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n     int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -620,7 +591,7 @@ public class MergeUtils {\n     }\n \n     IntFloatVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseFloatVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -629,12 +600,9 @@ public class MergeUtils {\n         row = VFactory.sparseFloatVector(colNum, elemNum);\n       }\n     }\n-\n     row.setMatrixId(matrixMeta.getId());\n     row.setRowId(rowIndex);\n-\n     Collections.sort(rowSplits, serverRowComp);\n-\n     for (int i = 0; i < size; i++) {\n       if (rowSplits.get(i) == null) {\n         continue;\n@@ -644,8 +612,8 @@ public class MergeUtils {\n     return row;\n   }\n \n-  private static Vector combineServerIntIntRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+  private static Vector combineServerIntIntRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n     int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -654,7 +622,7 @@ public class MergeUtils {\n     }\n \n     IntIntVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseIntVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -663,12 +631,9 @@ public class MergeUtils {\n         row = VFactory.sparseIntVector(colNum, elemNum);\n       }\n     }\n-\n     row.setMatrixId(matrixMeta.getId());\n     row.setRowId(rowIndex);\n-\n     Collections.sort(rowSplits, serverRowComp);\n-\n     for (int i = 0; i < size; i++) {\n       if (rowSplits.get(i) == null) {\n         continue;\n@@ -678,8 +643,8 @@ public class MergeUtils {\n     return row;\n   }\n \n-  private static Vector combineServerIntLongRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+  private static Vector combineServerIntLongRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n     int colNum = (int) matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -688,7 +653,7 @@ public class MergeUtils {\n     }\n \n     IntLongVector row;\n-    if(matrixMeta.isHash()) {\n+    if (matrixMeta.isHash()) {\n       row = VFactory.sparseLongVector(colNum, elemNum);\n     } else {\n       if (elemNum >= (int) (storageConvFactor * colNum)) {\n@@ -697,12 +662,9 @@ public class MergeUtils {\n         row = VFactory.sparseLongVector(colNum, elemNum);\n       }\n     }\n-\n     row.setMatrixId(matrixMeta.getId());\n     row.setRowId(rowIndex);\n-\n     Collections.sort(rowSplits, serverRowComp);\n-\n     for (int i = 0; i < size; i++) {\n       if (rowSplits.get(i) == null) {\n         continue;\n@@ -712,8 +674,8 @@ public class MergeUtils {\n     return row;\n   }\n \n-  private static Vector combineServerLongDoubleRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+  private static Vector combineServerLongDoubleRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n     long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -724,21 +686,18 @@ public class MergeUtils {\n     LongDoubleVector row = VFactory.sparseLongKeyDoubleVector(colNum, elemNum);\n     row.setMatrixId(matrixMeta.getId());\n     row.setRowId(rowIndex);\n-\n     Collections.sort(rowSplits, serverRowComp);\n-\n     for (int i = 0; i < size; i++) {\n       if (rowSplits.get(i) == null) {\n         continue;\n       }\n-\n       ((ServerLongDoubleRow) rowSplits.get(i)).mergeTo(row);\n     }\n     return row;\n   }\n \n-  private static Vector combineServerLongFloatRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+  private static Vector combineServerLongFloatRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n     long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -749,9 +708,7 @@ public class MergeUtils {\n     LongFloatVector row = VFactory.sparseLongKeyFloatVector(colNum, elemNum);\n     row.setMatrixId(matrixMeta.getId());\n     row.setRowId(rowIndex);\n-\n     Collections.sort(rowSplits, serverRowComp);\n-\n     for (int i = 0; i < size; i++) {\n       if (rowSplits.get(i) == null) {\n         continue;\n@@ -761,8 +718,8 @@ public class MergeUtils {\n     return row;\n   }\n \n-  private static Vector combineServerLongIntRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+  private static Vector combineServerLongIntRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n     long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -773,9 +730,7 @@ public class MergeUtils {\n     LongIntVector row = VFactory.sparseLongKeyIntVector(colNum, elemNum);\n     row.setMatrixId(matrixMeta.getId());\n     row.setRowId(rowIndex);\n-\n     Collections.sort(rowSplits, serverRowComp);\n-\n     for (int i = 0; i < size; i++) {\n       if (rowSplits.get(i) == null) {\n         continue;\n@@ -785,9 +740,8 @@ public class MergeUtils {\n     return row;\n   }\n \n-\n-  private static Vector combineServerLongLongRowSplits(List<ServerRow> rowSplits,\n-      MatrixMeta matrixMeta, int rowIndex) {\n+  private static Vector combineServerLongLongRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n     long colNum = matrixMeta.getColNum();\n     int elemNum = 0;\n     int size = rowSplits.size();\n@@ -798,17 +752,14 @@ public class MergeUtils {\n     LongLongVector row = VFactory.sparseLongKeyLongVector(colNum, elemNum);\n     row.setMatrixId(matrixMeta.getId());\n     row.setRowId(rowIndex);\n-\n     Collections.sort(rowSplits, serverRowComp);\n-\n     for (int i = 0; i < size; i++) {\n       if (rowSplits.get(i) == null) {\n         continue;\n       }\n-\n       ((ServerLongLongRow) rowSplits.get(i)).mergeTo(row);\n     }\n     return row;\n   }\n-}\n \n+}\n\\ No newline at end of file\n",
            "diff_size": 167
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}