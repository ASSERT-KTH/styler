{
    "project_name": "apache-ignite-3",
    "error_id": "27",
    "information": {
        "errors": [
            {
                "line": "92",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * Internal disruptor buffers size for Node/FSMCaller/LogManager etc.\n     */\n    private int disruptorBufferSize = 16384;\n\n    /**\n     * The maximum timeout in seconds to wait when publishing events into disruptor, default is 10 seconds. If the",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/27/RaftOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/27/RaftOptions.java\nindex 771a5225a82..fd8a0cd7178 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/27/RaftOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/27/RaftOptions.java\n@@ -89,6 +89,7 @@ public class RaftOptions implements Copiable<RaftOptions> {\n     /**\n      * Internal disruptor buffers size for Node/FSMCaller/LogManager etc.\n      */\n+\n     private int disruptorBufferSize = 16384;\n \n     /**\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/27/RaftOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/27/RaftOptions.java\nindex 771a5225a82..f349659ed01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/27/RaftOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/27/RaftOptions.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.ignite.raft.jraft.option;\n \n import org.apache.ignite.raft.jraft.util.Copiable;\n@@ -22,281 +23,281 @@ import org.apache.ignite.raft.jraft.util.Copiable;\n  * Raft options.\n  */\n public class RaftOptions implements Copiable<RaftOptions> {\n-    /**\n-     * Maximum of block size per RPC\n-     */\n-    private int maxByteCountPerRpc = 128 * 1024;\n-\n-    /**\n-     * File service check hole switch, default disable\n-     */\n-    private boolean fileCheckHole = false;\n-\n-    /**\n-     * The maximum number of entries in AppendEntriesRequest\n-     */\n-    private int maxEntriesSize = 1024;\n-\n-    /**\n-     * The maximum byte size of AppendEntriesRequest\n-     */\n-    private int maxBodySize = 512 * 1024;\n-\n-    /**\n-     * Flush buffer to LogStorage if the buffer size reaches the limit\n-     */\n-    private int maxAppendBufferSize = 256 * 1024;\n-\n-    /**\n-     * Maximum election delay time allowed by user\n-     */\n-    private int maxElectionDelayMs = 1000;\n-\n-    /**\n-     * Raft election:heartbeat timeout factor\n-     */\n-    private int electionHeartbeatFactor = 10;\n-\n-    /**\n-     * Maximum number of tasks that can be applied in a batch\n-     */\n-    private int applyBatch = 32;\n-\n-    /**\n-     * Call fsync when need\n-     */\n-    private boolean sync = true;\n-\n-    /**\n-     * Sync log meta, snapshot meta and raft meta\n-     */\n-    private boolean syncMeta = false;\n-\n-    /**\n-     * Statistics to analyze the performance of db\n-     */\n-    private boolean openStatistics = true;\n-\n-    /**\n-     * Whether to enable replicator pipeline.\n-     */\n-    private boolean replicatorPipeline = true;\n-\n-    /**\n-     * The maximum replicator pipeline in-flight requests/responses, only valid when enable replicator pipeline.\n-     */\n-    private int maxReplicatorInflightMsgs = 256;\n-    /**\n-     * Internal disruptor buffers size for Node/FSMCaller/LogManager etc.\n-     */\n-    private int disruptorBufferSize = 16384;\n-\n-    /**\n-     * The maximum timeout in seconds to wait when publishing events into disruptor, default is 10 seconds. If the\n-     * timeout happens, it may halt the node.\n-     */\n-    private int disruptorPublishEventWaitTimeoutSecs = 10;\n-\n-    /**\n-     * When true, validate log entry checksum when transferring the log entry from disk or network, default is false. If\n-     * true, it would hurt the performance of JRAft but gain the data safety.\n-     *\n-     */\n-    private boolean enableLogEntryChecksum = false; // TODO asch https://issues.apache.org/jira/browse/IGNITE-14833.\n-\n-    /**\n-     * ReadOnlyOption specifies how the read only request is processed. * {@link ReadOnlyOption#ReadOnlySafe} guarantees\n-     * the linearizability of the read only request by communicating with the quorum. It is the default and suggested\n-     * option. * {@link ReadOnlyOption#ReadOnlyLeaseBased} ensures linearizability of the read only request by relying\n-     * on the leader lease. It can be affected by clock drift. If the clock drift is unbounded, leader might keep the\n-     * lease longer than it should (clock can move backward/pause without any bound). ReadIndex is not safe in that\n-     * case.\n-     */\n-    private ReadOnlyOption readOnlyOptions = ReadOnlyOption.ReadOnlySafe;\n-\n-    /**\n-     * Candidate steps down when election reaching timeout, default is true(enabled).\n-     */\n-    private boolean stepDownWhenVoteTimedout = true;\n-\n-    public boolean isStepDownWhenVoteTimedout() {\n-        return this.stepDownWhenVoteTimedout;\n-    }\n-\n-    public void setStepDownWhenVoteTimedout(final boolean stepDownWhenVoteTimeout) {\n-        this.stepDownWhenVoteTimedout = stepDownWhenVoteTimeout;\n-    }\n-\n-    public int getDisruptorPublishEventWaitTimeoutSecs() {\n-        return this.disruptorPublishEventWaitTimeoutSecs;\n-    }\n-\n-    public void setDisruptorPublishEventWaitTimeoutSecs(final int disruptorPublishEventWaitTimeoutSecs) {\n-        this.disruptorPublishEventWaitTimeoutSecs = disruptorPublishEventWaitTimeoutSecs;\n-    }\n-\n-    public boolean isEnableLogEntryChecksum() {\n-        return this.enableLogEntryChecksum;\n-    }\n-\n-    public void setEnableLogEntryChecksum(final boolean enableLogEntryChecksumValidation) {\n-        this.enableLogEntryChecksum = enableLogEntryChecksumValidation;\n-    }\n-\n-    public ReadOnlyOption getReadOnlyOptions() {\n-        return this.readOnlyOptions;\n-    }\n-\n-    public void setReadOnlyOptions(final ReadOnlyOption readOnlyOptions) {\n-        this.readOnlyOptions = readOnlyOptions;\n-    }\n-\n-    public boolean isReplicatorPipeline() {\n-        return this.replicatorPipeline;\n-    }\n-\n-    public void setReplicatorPipeline(final boolean replicatorPipeline) {\n-        this.replicatorPipeline = replicatorPipeline;\n-    }\n-\n-    public int getMaxReplicatorInflightMsgs() {\n-        return this.maxReplicatorInflightMsgs;\n-    }\n-\n-    public void setMaxReplicatorInflightMsgs(final int maxReplicatorPiplelinePendingResponses) {\n-        this.maxReplicatorInflightMsgs = maxReplicatorPiplelinePendingResponses;\n-    }\n-\n-    public int getDisruptorBufferSize() {\n-        return this.disruptorBufferSize;\n-    }\n-\n-    public void setDisruptorBufferSize(final int disruptorBufferSize) {\n-        this.disruptorBufferSize = disruptorBufferSize;\n-    }\n-\n-    public int getMaxByteCountPerRpc() {\n-        return this.maxByteCountPerRpc;\n-    }\n-\n-    public void setMaxByteCountPerRpc(final int maxByteCountPerRpc) {\n-        this.maxByteCountPerRpc = maxByteCountPerRpc;\n-    }\n-\n-    public boolean isFileCheckHole() {\n-        return this.fileCheckHole;\n-    } // TODO asch review properties https://issues.apache.org/jira/browse/IGNITE-14832\n-\n-    public void setFileCheckHole(final boolean fileCheckHole) {\n-        this.fileCheckHole = fileCheckHole;\n-    }\n-\n-    public int getMaxEntriesSize() {\n-        return this.maxEntriesSize;\n-    }\n-\n-    public void setMaxEntriesSize(final int maxEntriesSize) {\n-        this.maxEntriesSize = maxEntriesSize;\n-    }\n-\n-    public int getMaxBodySize() {\n-        return this.maxBodySize;\n-    }\n-\n-    public void setMaxBodySize(final int maxBodySize) {\n-        this.maxBodySize = maxBodySize;\n-    }\n-\n-    public int getMaxAppendBufferSize() {\n-        return this.maxAppendBufferSize;\n-    }\n-\n-    public void setMaxAppendBufferSize(final int maxAppendBufferSize) {\n-        this.maxAppendBufferSize = maxAppendBufferSize;\n-    }\n-\n-    public int getMaxElectionDelayMs() {\n-        return this.maxElectionDelayMs;\n-    }\n-\n-    public void setMaxElectionDelayMs(final int maxElectionDelayMs) {\n-        this.maxElectionDelayMs = maxElectionDelayMs;\n-    }\n-\n-    public int getElectionHeartbeatFactor() {\n-        return this.electionHeartbeatFactor;\n-    }\n-\n-    public void setElectionHeartbeatFactor(final int electionHeartbeatFactor) {\n-        this.electionHeartbeatFactor = electionHeartbeatFactor;\n-    }\n-\n-    public int getApplyBatch() {\n-        return this.applyBatch;\n-    }\n-\n-    public void setApplyBatch(final int applyBatch) {\n-        this.applyBatch = applyBatch;\n-    }\n-\n-    public boolean isSync() {\n-        return this.sync;\n-    }\n-\n-    public void setSync(final boolean sync) {\n-        this.sync = sync;\n-    }\n-\n-    public boolean isSyncMeta() {\n-        return this.sync || this.syncMeta;\n-    }\n-\n-    public void setSyncMeta(final boolean syncMeta) {\n-        this.syncMeta = syncMeta;\n-    }\n-\n-    public boolean isOpenStatistics() {\n-        return this.openStatistics;\n-    }\n-\n-    public void setOpenStatistics(final boolean openStatistics) {\n-        this.openStatistics = openStatistics;\n-    }\n-\n-    @Override\n-    public RaftOptions copy() {\n-        final RaftOptions raftOptions = new RaftOptions();\n-        raftOptions.setMaxByteCountPerRpc(this.maxByteCountPerRpc);\n-        raftOptions.setFileCheckHole(this.fileCheckHole);\n-        raftOptions.setMaxEntriesSize(this.maxEntriesSize);\n-        raftOptions.setMaxBodySize(this.maxBodySize);\n-        raftOptions.setMaxAppendBufferSize(this.maxAppendBufferSize);\n-        raftOptions.setMaxElectionDelayMs(this.maxElectionDelayMs);\n-        raftOptions.setElectionHeartbeatFactor(this.electionHeartbeatFactor);\n-        raftOptions.setApplyBatch(this.applyBatch);\n-        raftOptions.setSync(this.sync);\n-        raftOptions.setSyncMeta(this.syncMeta);\n-        raftOptions.setOpenStatistics(this.openStatistics);\n-        raftOptions.setReplicatorPipeline(this.replicatorPipeline);\n-        raftOptions.setMaxReplicatorInflightMsgs(this.maxReplicatorInflightMsgs);\n-        raftOptions.setDisruptorBufferSize(this.disruptorBufferSize);\n-        raftOptions.setDisruptorPublishEventWaitTimeoutSecs(this.disruptorPublishEventWaitTimeoutSecs);\n-        raftOptions.setEnableLogEntryChecksum(this.enableLogEntryChecksum);\n-        raftOptions.setReadOnlyOptions(this.readOnlyOptions);\n-        return raftOptions;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"RaftOptions{\" + \"maxByteCountPerRpc=\" + this.maxByteCountPerRpc + \", fileCheckHole=\"\n-            + this.fileCheckHole + \", maxEntriesSize=\" + this.maxEntriesSize + \", maxBodySize=\" + this.maxBodySize\n-            + \", maxAppendBufferSize=\" + this.maxAppendBufferSize + \", maxElectionDelayMs=\"\n-            + this.maxElectionDelayMs + \", electionHeartbeatFactor=\" + this.electionHeartbeatFactor\n-            + \", applyBatch=\" + this.applyBatch + \", sync=\" + this.sync + \", syncMeta=\" + this.syncMeta\n-            + \", openStatistics=\" + this.openStatistics + \", replicatorPipeline=\" + this.replicatorPipeline\n-            + \", maxReplicatorInflightMsgs=\" + this.maxReplicatorInflightMsgs + \", disruptorBufferSize=\"\n-            + this.disruptorBufferSize + \", disruptorPublishEventWaitTimeoutSecs=\"\n-            + this.disruptorPublishEventWaitTimeoutSecs + \", enableLogEntryChecksum=\" + this.enableLogEntryChecksum\n-            + \", readOnlyOptions=\" + this.readOnlyOptions + '}';\n-    }\n+  /**\n+   * Maximum of block size per RPC\n+   */\n+  private int maxByteCountPerRpc = 128 * 1024;\n+\n+  /**\n+   * File service check hole switch, default disable\n+   */\n+  private boolean fileCheckHole = false;\n+\n+  /**\n+   * The maximum number of entries in AppendEntriesRequest\n+   */\n+  private int maxEntriesSize = 1024;\n+\n+  /**\n+   * The maximum byte size of AppendEntriesRequest\n+   */\n+  private int maxBodySize = 512 * 1024;\n+\n+  /**\n+   * Flush buffer to LogStorage if the buffer size reaches the limit\n+   */\n+  private int maxAppendBufferSize = 256 * 1024;\n+\n+  /**\n+   * Maximum election delay time allowed by user\n+   */\n+  private int maxElectionDelayMs = 1000;\n+\n+  /**\n+   * Raft election:heartbeat timeout factor\n+   */\n+  private int electionHeartbeatFactor = 10;\n+\n+  /**\n+   * Maximum number of tasks that can be applied in a batch\n+   */\n+  private int applyBatch = 32;\n+\n+  /**\n+   * Call fsync when need\n+   */\n+  private boolean sync = true;\n+\n+  /**\n+   * Sync log meta, snapshot meta and raft meta\n+   */\n+  private boolean syncMeta = false;\n+\n+  /**\n+   * Statistics to analyze the performance of db\n+   */\n+  private boolean openStatistics = true;\n+\n+  /**\n+   * Whether to enable replicator pipeline.\n+   */\n+  private boolean replicatorPipeline = true;\n+\n+  /**\n+   * The maximum replicator pipeline in-flight requests/responses, only valid when enable replicator pipeline.\n+   */\n+  private int maxReplicatorInflightMsgs = 256;\n+\n+  /**\n+   * Internal disruptor buffers size for Node/FSMCaller/LogManager etc.\n+   */\n+  private int disruptorBufferSize = 16384;\n+\n+  /**\n+   * The maximum timeout in seconds to wait when publishing events into disruptor, default is 10 seconds. If the\n+   * timeout happens, it may halt the node.\n+   */\n+  private int disruptorPublishEventWaitTimeoutSecs = 10;\n+\n+  /**\n+   * When true, validate log entry checksum when transferring the log entry from disk or network, default is false. If\n+   * true, it would hurt the performance of JRAft but gain the data safety.\n+   */\n+  private boolean enableLogEntryChecksum = false; // TODO asch https://issues.apache.org/jira/browse/IGNITE-14833.\n+\n+  /**\n+   * ReadOnlyOption specifies how the read only request is processed. * {@link ReadOnlyOption#ReadOnlySafe} guarantees\n+   * the linearizability of the read only request by communicating with the quorum. It is the default and suggested\n+   * option. * {@link ReadOnlyOption#ReadOnlyLeaseBased} ensures linearizability of the read only request by relying\n+   * on the leader lease. It can be affected by clock drift. If the clock drift is unbounded, leader might keep the\n+   * lease longer than it should (clock can move backward/pause without any bound). ReadIndex is not safe in that\n+   * case.\n+   */\n+  private ReadOnlyOption readOnlyOptions = ReadOnlyOption.ReadOnlySafe;\n+\n+  /**\n+   * Candidate steps down when election reaching timeout, default is true(enabled).\n+   */\n+  private boolean stepDownWhenVoteTimedout = true;\n+\n+  public boolean isStepDownWhenVoteTimedout() {\n+    return this.stepDownWhenVoteTimedout;\n+  }\n+\n+  public void setStepDownWhenVoteTimedout(final boolean stepDownWhenVoteTimeout) {\n+    this.stepDownWhenVoteTimedout = stepDownWhenVoteTimeout;\n+  }\n+\n+  public int getDisruptorPublishEventWaitTimeoutSecs() {\n+    return this.disruptorPublishEventWaitTimeoutSecs;\n+  }\n+\n+  public void setDisruptorPublishEventWaitTimeoutSecs(final int disruptorPublishEventWaitTimeoutSecs) {\n+    this.disruptorPublishEventWaitTimeoutSecs = disruptorPublishEventWaitTimeoutSecs;\n+  }\n+\n+  public boolean isEnableLogEntryChecksum() {\n+    return this.enableLogEntryChecksum;\n+  }\n+\n+  public void setEnableLogEntryChecksum(final boolean enableLogEntryChecksumValidation) {\n+    this.enableLogEntryChecksum = enableLogEntryChecksumValidation;\n+  }\n+\n+  public ReadOnlyOption getReadOnlyOptions() {\n+    return this.readOnlyOptions;\n+  }\n+\n+  public void setReadOnlyOptions(final ReadOnlyOption readOnlyOptions) {\n+    this.readOnlyOptions = readOnlyOptions;\n+  }\n+\n+  public boolean isReplicatorPipeline() {\n+    return this.replicatorPipeline;\n+  }\n+\n+  public void setReplicatorPipeline(final boolean replicatorPipeline) {\n+    this.replicatorPipeline = replicatorPipeline;\n+  }\n+\n+  public int getMaxReplicatorInflightMsgs() {\n+    return this.maxReplicatorInflightMsgs;\n+  }\n+\n+  public void setMaxReplicatorInflightMsgs(final int maxReplicatorPiplelinePendingResponses) {\n+    this.maxReplicatorInflightMsgs = maxReplicatorPiplelinePendingResponses;\n+  }\n+\n+  public int getDisruptorBufferSize() {\n+    return this.disruptorBufferSize;\n+  }\n+\n+  public void setDisruptorBufferSize(final int disruptorBufferSize) {\n+    this.disruptorBufferSize = disruptorBufferSize;\n+  }\n+\n+  public int getMaxByteCountPerRpc() {\n+    return this.maxByteCountPerRpc;\n+  }\n+\n+  public void setMaxByteCountPerRpc(final int maxByteCountPerRpc) {\n+    this.maxByteCountPerRpc = maxByteCountPerRpc;\n+  }\n+\n+  public boolean isFileCheckHole() {\n+    return this.fileCheckHole;\n+  } // TODO asch review properties https://issues.apache.org/jira/browse/IGNITE-14832\n+\n+  public void setFileCheckHole(final boolean fileCheckHole) {\n+    this.fileCheckHole = fileCheckHole;\n+  }\n+\n+  public int getMaxEntriesSize() {\n+    return this.maxEntriesSize;\n+  }\n+\n+  public void setMaxEntriesSize(final int maxEntriesSize) {\n+    this.maxEntriesSize = maxEntriesSize;\n+  }\n+\n+  public int getMaxBodySize() {\n+    return this.maxBodySize;\n+  }\n+\n+  public void setMaxBodySize(final int maxBodySize) {\n+    this.maxBodySize = maxBodySize;\n+  }\n+\n+  public int getMaxAppendBufferSize() {\n+    return this.maxAppendBufferSize;\n+  }\n+\n+  public void setMaxAppendBufferSize(final int maxAppendBufferSize) {\n+    this.maxAppendBufferSize = maxAppendBufferSize;\n+  }\n+\n+  public int getMaxElectionDelayMs() {\n+    return this.maxElectionDelayMs;\n+  }\n+\n+  public void setMaxElectionDelayMs(final int maxElectionDelayMs) {\n+    this.maxElectionDelayMs = maxElectionDelayMs;\n+  }\n+\n+  public int getElectionHeartbeatFactor() {\n+    return this.electionHeartbeatFactor;\n+  }\n+\n+  public void setElectionHeartbeatFactor(final int electionHeartbeatFactor) {\n+    this.electionHeartbeatFactor = electionHeartbeatFactor;\n+  }\n+\n+  public int getApplyBatch() {\n+    return this.applyBatch;\n+  }\n+\n+  public void setApplyBatch(final int applyBatch) {\n+    this.applyBatch = applyBatch;\n+  }\n+\n+  public boolean isSync() {\n+    return this.sync;\n+  }\n+\n+  public void setSync(final boolean sync) {\n+    this.sync = sync;\n+  }\n+\n+  public boolean isSyncMeta() {\n+    return this.sync || this.syncMeta;\n+  }\n+\n+  public void setSyncMeta(final boolean syncMeta) {\n+    this.syncMeta = syncMeta;\n+  }\n+\n+  public boolean isOpenStatistics() {\n+    return this.openStatistics;\n+  }\n+\n+  public void setOpenStatistics(final boolean openStatistics) {\n+    this.openStatistics = openStatistics;\n+  }\n+\n+  @Override\n+  public RaftOptions copy() {\n+    final RaftOptions raftOptions = new RaftOptions();\n+    raftOptions.setMaxByteCountPerRpc(this.maxByteCountPerRpc);\n+    raftOptions.setFileCheckHole(this.fileCheckHole);\n+    raftOptions.setMaxEntriesSize(this.maxEntriesSize);\n+    raftOptions.setMaxBodySize(this.maxBodySize);\n+    raftOptions.setMaxAppendBufferSize(this.maxAppendBufferSize);\n+    raftOptions.setMaxElectionDelayMs(this.maxElectionDelayMs);\n+    raftOptions.setElectionHeartbeatFactor(this.electionHeartbeatFactor);\n+    raftOptions.setApplyBatch(this.applyBatch);\n+    raftOptions.setSync(this.sync);\n+    raftOptions.setSyncMeta(this.syncMeta);\n+    raftOptions.setOpenStatistics(this.openStatistics);\n+    raftOptions.setReplicatorPipeline(this.replicatorPipeline);\n+    raftOptions.setMaxReplicatorInflightMsgs(this.maxReplicatorInflightMsgs);\n+    raftOptions.setDisruptorBufferSize(this.disruptorBufferSize);\n+    raftOptions.setDisruptorPublishEventWaitTimeoutSecs(this.disruptorPublishEventWaitTimeoutSecs);\n+    raftOptions.setEnableLogEntryChecksum(this.enableLogEntryChecksum);\n+    raftOptions.setReadOnlyOptions(this.readOnlyOptions);\n+    return raftOptions;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"RaftOptions{\" + \"maxByteCountPerRpc=\" + this.maxByteCountPerRpc + \", fileCheckHole=\"\n+        + this.fileCheckHole + \", maxEntriesSize=\" + this.maxEntriesSize + \", maxBodySize=\" + this.maxBodySize\n+        + \", maxAppendBufferSize=\" + this.maxAppendBufferSize + \", maxElectionDelayMs=\"\n+        + this.maxElectionDelayMs + \", electionHeartbeatFactor=\" + this.electionHeartbeatFactor\n+        + \", applyBatch=\" + this.applyBatch + \", sync=\" + this.sync + \", syncMeta=\" + this.syncMeta\n+        + \", openStatistics=\" + this.openStatistics + \", replicatorPipeline=\" + this.replicatorPipeline\n+        + \", maxReplicatorInflightMsgs=\" + this.maxReplicatorInflightMsgs + \", disruptorBufferSize=\"\n+        + this.disruptorBufferSize + \", disruptorPublishEventWaitTimeoutSecs=\"\n+        + this.disruptorPublishEventWaitTimeoutSecs + \", enableLogEntryChecksum=\" + this.enableLogEntryChecksum\n+        + \", readOnlyOptions=\" + this.readOnlyOptions + '}';\n+  }\n }\n",
            "diff_size": 278
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/27/RaftOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/27/RaftOptions.java\nindex 771a5225a82..9497429e89e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/27/RaftOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/27/RaftOptions.java\n@@ -86,7 +86,8 @@ public class RaftOptions implements Copiable<RaftOptions> {\n      * The maximum replicator pipeline in-flight requests/responses, only valid when enable replicator pipeline.\n      */\n     private int maxReplicatorInflightMsgs = 256;\n-    /**\n+\n+/**\n      * Internal disruptor buffers size for Node/FSMCaller/LogManager etc.\n      */\n     private int disruptorBufferSize = 16384;\n@@ -185,7 +186,9 @@ public class RaftOptions implements Copiable<RaftOptions> {\n \n     public boolean isFileCheckHole() {\n         return this.fileCheckHole;\n-    } // TODO asch review properties https://issues.apache.org/jira/browse/IGNITE-14832\n+    }\n+\n+        // TODO asch review properties https://issues.apache.org/jira/browse/IGNITE-14832\n \n     public void setFileCheckHole(final boolean fileCheckHole) {\n         this.fileCheckHole = fileCheckHole;\n@@ -288,15 +291,6 @@ public class RaftOptions implements Copiable<RaftOptions> {\n \n     @Override\n     public String toString() {\n-        return \"RaftOptions{\" + \"maxByteCountPerRpc=\" + this.maxByteCountPerRpc + \", fileCheckHole=\"\n-            + this.fileCheckHole + \", maxEntriesSize=\" + this.maxEntriesSize + \", maxBodySize=\" + this.maxBodySize\n-            + \", maxAppendBufferSize=\" + this.maxAppendBufferSize + \", maxElectionDelayMs=\"\n-            + this.maxElectionDelayMs + \", electionHeartbeatFactor=\" + this.electionHeartbeatFactor\n-            + \", applyBatch=\" + this.applyBatch + \", sync=\" + this.sync + \", syncMeta=\" + this.syncMeta\n-            + \", openStatistics=\" + this.openStatistics + \", replicatorPipeline=\" + this.replicatorPipeline\n-            + \", maxReplicatorInflightMsgs=\" + this.maxReplicatorInflightMsgs + \", disruptorBufferSize=\"\n-            + this.disruptorBufferSize + \", disruptorPublishEventWaitTimeoutSecs=\"\n-            + this.disruptorPublishEventWaitTimeoutSecs + \", enableLogEntryChecksum=\" + this.enableLogEntryChecksum\n-            + \", readOnlyOptions=\" + this.readOnlyOptions + '}';\n-    }\n-}\n+        return \"RaftOptions{\" + \"maxByteCountPerRpc=\" + this.maxByteCountPerRpc + \", fileCheckHole=\" + this.fileCheckHole + \", maxEntriesSize=\" + this.maxEntriesSize + \", maxBodySize=\" + this.maxBodySize + \", maxAppendBufferSize=\" + this.maxAppendBufferSize + \", maxElectionDelayMs=\" + this.maxElectionDelayMs + \", electionHeartbeatFactor=\" + this.electionHeartbeatFactor + \", applyBatch=\" + this.applyBatch + \", sync=\" + this.sync + \", syncMeta=\" + this.syncMeta + \", openStatistics=\" + this.openStatistics + \", replicatorPipeline=\" + this.replicatorPipeline + \", maxReplicatorInflightMsgs=\" + this.maxReplicatorInflightMsgs + \", disruptorBufferSize=\" + this.disruptorBufferSize + \", disruptorPublishEventWaitTimeoutSecs=\" + this.disruptorPublishEventWaitTimeoutSecs + \", enableLogEntryChecksum=\" + this.enableLogEntryChecksum + \", readOnlyOptions=\" + this.readOnlyOptions + '}';\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "38",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "45",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "52",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "59",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "66",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "73",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "80",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "87",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "94",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "101",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "108",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "115",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "121",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "129",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "138",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "150",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "157",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "160",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "305",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "346",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/27/RaftOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/27/RaftOptions.java\nindex 771a5225a82..314351a824d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/27/RaftOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/27/RaftOptions.java\n@@ -21,80 +21,111 @@ import org.apache.ignite.raft.jraft.util.Copiable;\n /**\n  * Raft options.\n  */\n+\n+\n public class RaftOptions implements Copiable<RaftOptions> {\n     /**\n      * Maximum of block size per RPC\n      */\n+\n     private int maxByteCountPerRpc = 128 * 1024;\n \n     /**\n      * File service check hole switch, default disable\n      */\n+\n+\n     private boolean fileCheckHole = false;\n \n     /**\n      * The maximum number of entries in AppendEntriesRequest\n      */\n+\n+\n     private int maxEntriesSize = 1024;\n \n     /**\n      * The maximum byte size of AppendEntriesRequest\n      */\n+\n+\n     private int maxBodySize = 512 * 1024;\n \n     /**\n      * Flush buffer to LogStorage if the buffer size reaches the limit\n      */\n+\n+\n     private int maxAppendBufferSize = 256 * 1024;\n \n     /**\n      * Maximum election delay time allowed by user\n      */\n+\n+\n     private int maxElectionDelayMs = 1000;\n \n     /**\n      * Raft election:heartbeat timeout factor\n      */\n+\n+\n     private int electionHeartbeatFactor = 10;\n \n     /**\n      * Maximum number of tasks that can be applied in a batch\n      */\n+\n+\n     private int applyBatch = 32;\n \n     /**\n      * Call fsync when need\n      */\n+\n+\n     private boolean sync = true;\n \n     /**\n      * Sync log meta, snapshot meta and raft meta\n      */\n+\n+\n     private boolean syncMeta = false;\n \n     /**\n      * Statistics to analyze the performance of db\n      */\n+\n+\n     private boolean openStatistics = true;\n \n     /**\n      * Whether to enable replicator pipeline.\n      */\n+\n+\n     private boolean replicatorPipeline = true;\n \n     /**\n      * The maximum replicator pipeline in-flight requests/responses, only valid when enable replicator pipeline.\n      */\n+\n+\n     private int maxReplicatorInflightMsgs = 256;\n     /**\n      * Internal disruptor buffers size for Node/FSMCaller/LogManager etc.\n      */\n+\n+\n     private int disruptorBufferSize = 16384;\n \n     /**\n      * The maximum timeout in seconds to wait when publishing events into disruptor, default is 10 seconds. If the\n      * timeout happens, it may halt the node.\n      */\n+\n+\n     private int disruptorPublishEventWaitTimeoutSecs = 10;\n \n     /**\n@@ -102,6 +133,8 @@ public class RaftOptions implements Copiable<RaftOptions> {\n      * true, it would hurt the performance of JRAft but gain the data safety.\n      *\n      */\n+\n+\n     private boolean enableLogEntryChecksum = false; // TODO asch https://issues.apache.org/jira/browse/IGNITE-14833.\n \n     /**\n@@ -112,13 +145,18 @@ public class RaftOptions implements Copiable<RaftOptions> {\n      * lease longer than it should (clock can move backward/pause without any bound). ReadIndex is not safe in that\n      * case.\n      */\n+\n+\n     private ReadOnlyOption readOnlyOptions = ReadOnlyOption.ReadOnlySafe;\n \n     /**\n      * Candidate steps down when election reaching timeout, default is true(enabled).\n      */\n+\n+\n     private boolean stepDownWhenVoteTimedout = true;\n \n+\n     public boolean isStepDownWhenVoteTimedout() {\n         return this.stepDownWhenVoteTimedout;\n     }\n@@ -263,40 +301,49 @@ public class RaftOptions implements Copiable<RaftOptions> {\n         this.openStatistics = openStatistics;\n     }\n \n-    @Override\n-    public RaftOptions copy() {\n+\n+    @Override public RaftOptions copy() {\n         final RaftOptions raftOptions = new RaftOptions();\n+\n         raftOptions.setMaxByteCountPerRpc(this.maxByteCountPerRpc);\n+\n         raftOptions.setFileCheckHole(this.fileCheckHole);\n+\n         raftOptions.setMaxEntriesSize(this.maxEntriesSize);\n+\n         raftOptions.setMaxBodySize(this.maxBodySize);\n+\n         raftOptions.setMaxAppendBufferSize(this.maxAppendBufferSize);\n+\n         raftOptions.setMaxElectionDelayMs(this.maxElectionDelayMs);\n+\n         raftOptions.setElectionHeartbeatFactor(this.electionHeartbeatFactor);\n+\n         raftOptions.setApplyBatch(this.applyBatch);\n+\n         raftOptions.setSync(this.sync);\n+\n         raftOptions.setSyncMeta(this.syncMeta);\n+\n         raftOptions.setOpenStatistics(this.openStatistics);\n+\n         raftOptions.setReplicatorPipeline(this.replicatorPipeline);\n+\n         raftOptions.setMaxReplicatorInflightMsgs(this.maxReplicatorInflightMsgs);\n+\n         raftOptions.setDisruptorBufferSize(this.disruptorBufferSize);\n+\n         raftOptions.setDisruptorPublishEventWaitTimeoutSecs(this.disruptorPublishEventWaitTimeoutSecs);\n+\n         raftOptions.setEnableLogEntryChecksum(this.enableLogEntryChecksum);\n+\n         raftOptions.setReadOnlyOptions(this.readOnlyOptions);\n+\n         return raftOptions;\n     }\n \n-    @Override\n-    public String toString() {\n-        return \"RaftOptions{\" + \"maxByteCountPerRpc=\" + this.maxByteCountPerRpc + \", fileCheckHole=\"\n-            + this.fileCheckHole + \", maxEntriesSize=\" + this.maxEntriesSize + \", maxBodySize=\" + this.maxBodySize\n-            + \", maxAppendBufferSize=\" + this.maxAppendBufferSize + \", maxElectionDelayMs=\"\n-            + this.maxElectionDelayMs + \", electionHeartbeatFactor=\" + this.electionHeartbeatFactor\n-            + \", applyBatch=\" + this.applyBatch + \", sync=\" + this.sync + \", syncMeta=\" + this.syncMeta\n-            + \", openStatistics=\" + this.openStatistics + \", replicatorPipeline=\" + this.replicatorPipeline\n-            + \", maxReplicatorInflightMsgs=\" + this.maxReplicatorInflightMsgs + \", disruptorBufferSize=\"\n-            + this.disruptorBufferSize + \", disruptorPublishEventWaitTimeoutSecs=\"\n-            + this.disruptorPublishEventWaitTimeoutSecs + \", enableLogEntryChecksum=\" + this.enableLogEntryChecksum\n-            + \", readOnlyOptions=\" + this.readOnlyOptions + '}';\n-    }\n-}\n+\n+    @Override public String toString() {\n+        return \"RaftOptions{\" + \"maxByteCountPerRpc=\" + this.maxByteCountPerRpc + \", fileCheckHole=\" + this.fileCheckHole + \", maxEntriesSize=\" + this.maxEntriesSize + \", maxBodySize=\" + this.maxBodySize + \", maxAppendBufferSize=\" + this.maxAppendBufferSize + \", maxElectionDelayMs=\" + this.maxElectionDelayMs + \", electionHeartbeatFactor=\" + this.electionHeartbeatFactor + \", applyBatch=\" + this.applyBatch + \", sync=\" + this.sync + \", syncMeta=\" + this.syncMeta + \", openStatistics=\" + this.openStatistics + \", replicatorPipeline=\" + this.replicatorPipeline + \", maxReplicatorInflightMsgs=\" + this.maxReplicatorInflightMsgs + \", disruptorBufferSize=\" + this.disruptorBufferSize + \", disruptorPublishEventWaitTimeoutSecs=\" + this.disruptorPublishEventWaitTimeoutSecs + \", enableLogEntryChecksum=\" + this.enableLogEntryChecksum + \", readOnlyOptions=\" + this.readOnlyOptions + '}';\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "92",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/27/RaftOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/27/RaftOptions.java\nindex 771a5225a82..fd8a0cd7178 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/27/RaftOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/27/RaftOptions.java\n@@ -89,6 +89,7 @@ public class RaftOptions implements Copiable<RaftOptions> {\n     /**\n      * Internal disruptor buffers size for Node/FSMCaller/LogManager etc.\n      */\n+\n     private int disruptorBufferSize = 16384;\n \n     /**\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff",
        "styler_random"
    ]
}