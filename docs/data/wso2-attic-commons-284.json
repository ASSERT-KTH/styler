{
    "project_name": "wso2-attic-commons",
    "error_id": "284",
    "information": {
        "errors": [
            {
                "line": "88",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n        if (DocumentRegistry.__log.isDebugEnabled()) {\n            DocumentRegistry.__log.debug(\"addDefinition(\" + def.getTargetNamespace() + \" from \" + def.getDocumentBaseURI() + \")\");\n        }\n\n        _definitions.add(def);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/284/DocumentRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/284/DocumentRegistry.java\nindex b749f0989ee..143842bd80e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/284/DocumentRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/284/DocumentRegistry.java\n@@ -85,10 +85,11 @@ public class DocumentRegistry {\n             throw new NullPointerException(\"def=null\");\n \n         if (DocumentRegistry.__log.isDebugEnabled()) {\n-            DocumentRegistry.__log.debug(\"addDefinition(\" + def.getTargetNamespace() + \" from \" + def.getDocumentBaseURI() + \")\");\n-        }\n+            DocumentRegistry.__log.debug(\"addDefinition(\" + def.getTargetNamespace() + \" from \"\n+            + def.getDocumentBaseURI() + \")\");\n+         }\n \n-        _definitions.add(def);\n+         _definitions.add(def);\n     }\n \n }\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/284/DocumentRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/284/DocumentRegistry.java\nindex b749f0989ee..c56bde939c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/284/DocumentRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/284/DocumentRegistry.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.store;\n \n import java.util.ArrayList;\n@@ -31,64 +32,67 @@ import org.apache.ode.bpel.compiler.wsdl.Definition4BPEL;\n  * A parsed collection of WSDL definitions, including BPEL-specific extensions.\n  */\n public class DocumentRegistry {\n-    private static final Log __log = LogFactory.getLog(DocumentRegistry.class);\n+  private static final Log __log = LogFactory.getLog(DocumentRegistry.class);\n \n-    private final ArrayList<Definition4BPEL> _definitions = new ArrayList<Definition4BPEL>();\n+  private final ArrayList<Definition4BPEL> _definitions = new ArrayList<Definition4BPEL>();\n \n-    \n-    /**\n-     * Obtains an WSDL definition based on its target namespace.\n-     *\n-     * @param serviceName\n-     *\n-     * @return WSDL definition or <code>null</code> if unavailable.\n-     */\n-    public Definition4BPEL getDefinition(QName serviceName) {\n-        for (Definition4BPEL definition4BPEL : _definitions) {\n-            if (definition4BPEL.getTargetNamespace().equals(serviceName.getNamespaceURI())) {\n-                if (definition4BPEL.getService(serviceName) != null)\n-                    return definition4BPEL;\n-            }\n-        }\n-        return null;\n-    }\n \n-    /**\n-     * Obtains an WSDL definition based on its target namespace.\n-     *\n-     * @param serviceName\n-     *\n-     * @return WSDL definition or <code>null</code> if unavailable.\n-     */\n-    public Definition4BPEL getDefinitionForPortType(QName serviceName) {\n-        for (Definition4BPEL definition4BPEL : _definitions) {\n-            if (definition4BPEL.getTargetNamespace().equals(serviceName.getNamespaceURI())) {\n-                if (definition4BPEL.getPortType(serviceName) != null)\n-                    return definition4BPEL;\n-            }\n+  /**\n+   * Obtains an WSDL definition based on its target namespace.\n+   *\n+   * @param serviceName\n+   * @return WSDL definition or <code>null</code> if unavailable.\n+   */\n+  public Definition4BPEL getDefinition(QName serviceName) {\n+    for (Definition4BPEL definition4BPEL : _definitions) {\n+      if (definition4BPEL.getTargetNamespace().equals(serviceName.getNamespaceURI())) {\n+        if (definition4BPEL.getService(serviceName) != null) {\n+          return definition4BPEL;\n         }\n-        return null;\n+      }\n     }\n+    return null;\n+  }\n \n-    public Definition4BPEL[] getDefinitions(){\n-        return _definitions.toArray(new Definition4BPEL[_definitions.size()]);\n+  /**\n+   * Obtains an WSDL definition based on its target namespace.\n+   *\n+   * @param serviceName\n+   * @return WSDL definition or <code>null</code> if unavailable.\n+   */\n+  public Definition4BPEL getDefinitionForPortType(QName serviceName) {\n+    for (Definition4BPEL definition4BPEL : _definitions) {\n+      if (definition4BPEL.getTargetNamespace().equals(serviceName.getNamespaceURI())) {\n+        if (definition4BPEL.getPortType(serviceName) != null) {\n+          return definition4BPEL;\n+        }\n+      }\n     }\n+    return null;\n+  }\n \n-    /**\n-     * Adds a WSDL definition for use in resolving MessageType, PortType,\n-     * Operation and BPEL properties and property aliases\n-     * @param def WSDL definition\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public void addDefinition(Definition4BPEL def) throws CompilationException {\n-        if (def == null)\n-            throw new NullPointerException(\"def=null\");\n+  public Definition4BPEL[] getDefinitions() {\n+    return _definitions.toArray(new Definition4BPEL[_definitions.size()]);\n+  }\n \n-        if (DocumentRegistry.__log.isDebugEnabled()) {\n-            DocumentRegistry.__log.debug(\"addDefinition(\" + def.getTargetNamespace() + \" from \" + def.getDocumentBaseURI() + \")\");\n-        }\n+  /**\n+   * Adds a WSDL definition for use in resolving MessageType, PortType,\n+   * Operation and BPEL properties and property aliases\n+   *\n+   * @param def WSDL definition\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public void addDefinition(Definition4BPEL def) throws CompilationException {\n+    if (def == null) {\n+      throw new NullPointerException(\"def=null\");\n+    }\n \n-        _definitions.add(def);\n+    if (DocumentRegistry.__log.isDebugEnabled()) {\n+      DocumentRegistry.__log\n+        .debug(\"addDefinition(\" + def.getTargetNamespace() + \" from \" + def.getDocumentBaseURI() + \")\");\n     }\n \n+    _definitions.add(def);\n+  }\n+\n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/284/DocumentRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/284/DocumentRegistry.java\nindex b749f0989ee..cbe3c52bc94 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/284/DocumentRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/284/DocumentRegistry.java\n@@ -91,4 +91,4 @@ public class DocumentRegistry {\n         _definitions.add(def);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/284/DocumentRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/284/DocumentRegistry.java\nindex b749f0989ee..143842bd80e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/284/DocumentRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/284/DocumentRegistry.java\n@@ -85,10 +85,11 @@ public class DocumentRegistry {\n             throw new NullPointerException(\"def=null\");\n \n         if (DocumentRegistry.__log.isDebugEnabled()) {\n-            DocumentRegistry.__log.debug(\"addDefinition(\" + def.getTargetNamespace() + \" from \" + def.getDocumentBaseURI() + \")\");\n-        }\n+            DocumentRegistry.__log.debug(\"addDefinition(\" + def.getTargetNamespace() + \" from \"\n+            + def.getDocumentBaseURI() + \")\");\n+         }\n \n-        _definitions.add(def);\n+         _definitions.add(def);\n     }\n \n }\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}