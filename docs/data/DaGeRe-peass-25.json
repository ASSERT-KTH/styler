{
    "project_name": "DaGeRe-peass",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "106",
                "column": "35",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\tpublic void readDependencies() {\n\t\ttry {\n\t\t\tif (!init){\n\t\t\t\tif (!readInitialVersion()) {\n\t\t\t\t\treturn;\n\t\t\t\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/25/DependencyReader.java\nindex 29504702114..054f43e46a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/25/DependencyReader.java\n@@ -103,7 +103,7 @@ public class DependencyReader extends DependencyReaderBase {\n \t */\n \tpublic void readDependencies() {\n \t\ttry {\n-\t\t\tif (!init){\n+\t\t\tif (!init) {\n \t\t\t\tif (!readInitialVersion()) {\n \t\t\t\t\treturn;\n \t\t\t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/25/DependencyReader.java\nindex 29504702114..c5debc7a28e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/25/DependencyReader.java\n@@ -1,19 +1,20 @@\n /**\n- *     This file is part of PerAn.\n- *\n- *     PerAn is free software: you can redistribute it and/or modify\n- *     it under the terms of the GNU General Public License as published by\n- *     the Free Software Foundation, either version 3 of the License, or\n- *     (at your option) any later version.\n- *\n- *     PerAn is distributed in the hope that it will be useful,\n- *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *     GNU General Public License for more details.\n- *\n- *     You should have received a copy of the GNU General Public License\n- *     along with PerAn.  If not, see <http://www.gnu.org/licenses/>.\n+ * This file is part of PerAn.\n+ * <p>\n+ * PerAn is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ * <p>\n+ * PerAn is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ * <p>\n+ * You should have received a copy of the GNU General Public License\n+ * along with PerAn.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package de.peran.dependency.reader;\n \n import java.io.File;\n@@ -33,116 +34,115 @@ import de.peran.vcs.VersionIterator;\n \n /**\n  * Reads the dependencies of a project\n- * \n+ *\n  * @author reichelt\n  *\n  */\n public class DependencyReader extends DependencyReaderBase {\n \n-\tprivate static final Logger LOG = LogManager.getLogger(DependencyReader.class);\n-\t\n-\tboolean init = false;\n-\n-\tpublic DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator) {\n-\t\tsuper(new Versiondependencies(), projectFolder, dependencyFile);\n-\n-\t\tthis.iterator = iterator;\n-\n-\t\tdependencyResult.setUrl(url);\n-\t\tdependencyResult.setVersions(new Versions());\n-\n-\t\thandler = new DependencyManager(projectFolder);\n-\n-\t\tsearchFirstRunningCommit(iterator, handler.getExecutor(), projectFolder);\n-\t}\n-\t\n-\tpublic DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final Versiondependencies initialdependencies) {\n-\t\tsuper(new Versiondependencies(), projectFolder, dependencyFile);\n-\n-\t\tthis.iterator = iterator;\n-\n-\t\tdependencyResult.setUrl(url);\n-\t\tdependencyResult.setVersions(initialdependencies.getVersions());\n-\t\tdependencyResult.setInitialversion(initialdependencies.getInitialversion());\n-\n-\t\thandler = new DependencyManager(projectFolder);\n-\t\treadCompletedVersions();\n-\t\tinit = true;\n-\t}\n-\t\n-\t\n-\n-\t/**\n-\t * Searches the first commit where a mvn clean packages runs correct, i.e. returns 1\n-\t * \n-\t * @param projectFolder\n-\t */\n-\tpublic static void searchFirstRunningCommit(final VersionIterator iterator, final TestExecutor executor, final File projectFolder) {\n-\t\tboolean successGettingCommit = iterator.goToFirstCommit();\n-\t\twhile (!successGettingCommit && iterator.hasNextCommit()) {\n-\t\t\tsuccessGettingCommit = iterator.goToNextCommit();\n-\t\t}\n-\t\tif (!successGettingCommit) {\n-\t\t\tthrow new RuntimeException(\"Repository does not contain usable commit - maybe SVN and path has changed?\");\n-\t\t} else {\n-\t\t\tLOG.info(\"Found first commit: \" + iterator.getTag());\n-\t\t}\n-\t\tboolean getTracesSuccess = false;\n-\t\twhile (!getTracesSuccess) {\n-\t\t\tgetTracesSuccess = executor.isVersionRunning();\n-\n-\t\t\tif (!getTracesSuccess) {\n-\t\t\t\tLOG.debug(\"pom.xml does not exist / version is not running {}\", iterator.getTag());\n-\t\t\t\titerator.goToNextCommit();\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Reads the dependencies of the tests\n-\t */\n-\tpublic void readDependencies() {\n-\t\ttry {\n-\t\t\tif (!init){\n-\t\t\t\tif (!readInitialVersion()) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tLOG.debug(\"Analysiere {} Eintr\u00e4ge\", iterator.getSize());\n-\n-\t\t\tint overallSize = 0, prunedSize = 0;\n-\t\t\tprunedSize += dependencyMap.size();\n-\n-\t\t\tfinal ChangeManager changeManager = new ChangeManager(projectFolder);\n-\t\t\tchangeManager.saveOldClasses();\n-\t\t\twhile (iterator.hasNextCommit()) {\n-\t\t\t\titerator.goToNextCommit();\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tfinal int tests = analyseVersion(changeManager);\n-\t\t\t\t\tDependencyReaderUtil.write(dependencyResult, dependencyFile);\n-\t\t\t\t\toverallSize += dependencyMap.size();\n-\t\t\t\t\tprunedSize += tests;\n-\t\t\t\t} catch (final ParseProblemException ppe) {\n-\t\t\t\t\tppe.printStackTrace();\n-\t\t\t\t}\n-\n-\t\t\t\tLOG.info(\"Overall-tests: {} Executed tests with pruning: {}\", overallSize, prunedSize);\n-\n-\t\t\t\thandler.getExecutor().deleteTemporaryFiles();\n-\t\t\t}\n-\n-\t\t\tLOG.debug(\"Finished dependency-reading\");\n-\n-\t\t} catch (IOException | InterruptedException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t}\n-\n-\tpublic Versiondependencies getDependencies() {\n-\t\treturn dependencyResult;\n-\t}\n+  private static final Logger LOG = LogManager.getLogger(DependencyReader.class);\n+\n+  boolean init = false;\n+\n+  public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator) {\n+    super(new Versiondependencies(), projectFolder, dependencyFile);\n+\n+    this.iterator = iterator;\n+\n+    dependencyResult.setUrl(url);\n+    dependencyResult.setVersions(new Versions());\n+\n+    handler = new DependencyManager(projectFolder);\n+\n+    searchFirstRunningCommit(iterator, handler.getExecutor(), projectFolder);\n+  }\n+\n+  public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final Versiondependencies initialdependencies) {\n+    super(new Versiondependencies(), projectFolder, dependencyFile);\n+\n+    this.iterator = iterator;\n+\n+    dependencyResult.setUrl(url);\n+    dependencyResult.setVersions(initialdependencies.getVersions());\n+    dependencyResult.setInitialversion(initialdependencies.getInitialversion());\n+\n+    handler = new DependencyManager(projectFolder);\n+    readCompletedVersions();\n+    init = true;\n+  }\n+\n+\n+  /**\n+   * Searches the first commit where a mvn clean packages runs correct, i.e. returns 1\n+   *\n+   * @param projectFolder\n+   */\n+  public static void searchFirstRunningCommit(final VersionIterator iterator, final TestExecutor executor, final File projectFolder) {\n+    boolean successGettingCommit = iterator.goToFirstCommit();\n+    while (!successGettingCommit && iterator.hasNextCommit()) {\n+      successGettingCommit = iterator.goToNextCommit();\n+    }\n+    if (!successGettingCommit) {\n+      throw new RuntimeException(\"Repository does not contain usable commit - maybe SVN and path has changed?\");\n+    } else {\n+      LOG.info(\"Found first commit: \" + iterator.getTag());\n+    }\n+    boolean getTracesSuccess = false;\n+    while (!getTracesSuccess) {\n+      getTracesSuccess = executor.isVersionRunning();\n+\n+      if (!getTracesSuccess) {\n+        LOG.debug(\"pom.xml does not exist / version is not running {}\", iterator.getTag());\n+        iterator.goToNextCommit();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Reads the dependencies of the tests\n+   */\n+  public void readDependencies() {\n+    try {\n+      if (!init) {\n+        if (!readInitialVersion()) {\n+          return;\n+        }\n+      }\n+\n+      LOG.debug(\"Analysiere {} Eintr\u00e4ge\", iterator.getSize());\n+\n+      int overallSize = 0, prunedSize = 0;\n+      prunedSize += dependencyMap.size();\n+\n+      final ChangeManager changeManager = new ChangeManager(projectFolder);\n+      changeManager.saveOldClasses();\n+      while (iterator.hasNextCommit()) {\n+        iterator.goToNextCommit();\n+\n+        try {\n+          final int tests = analyseVersion(changeManager);\n+          DependencyReaderUtil.write(dependencyResult, dependencyFile);\n+          overallSize += dependencyMap.size();\n+          prunedSize += tests;\n+        } catch (final ParseProblemException ppe) {\n+          ppe.printStackTrace();\n+        }\n+\n+        LOG.info(\"Overall-tests: {} Executed tests with pruning: {}\", overallSize, prunedSize);\n+\n+        handler.getExecutor().deleteTemporaryFiles();\n+      }\n+\n+      LOG.debug(\"Finished dependency-reading\");\n+\n+    } catch (IOException | InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  public Versiondependencies getDependencies() {\n+    return dependencyResult;\n+  }\n \n \n }\n",
            "diff_size": 120
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/25/DependencyReader.java\nindex 29504702114..540bbe2c05a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/25/DependencyReader.java\n@@ -40,10 +40,9 @@ import de.peran.vcs.VersionIterator;\n public class DependencyReader extends DependencyReaderBase {\n \n \tprivate static final Logger LOG = LogManager.getLogger(DependencyReader.class);\n-\t\n-\tboolean init = false;\n+boolean init = false;\n \n-\tpublic DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator) {\n+public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator) {\n \t\tsuper(new Versiondependencies(), projectFolder, dependencyFile);\n \n \t\tthis.iterator = iterator;\n@@ -57,7 +56,7 @@ public class DependencyReader extends DependencyReaderBase {\n \t}\n \t\n \tpublic DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final Versiondependencies initialdependencies) {\n-\t\tsuper(new Versiondependencies(), projectFolder, dependencyFile);\n+\tsuper(new Versiondependencies(), projectFolder, dependencyFile);\n \n \t\tthis.iterator = iterator;\n \n@@ -69,15 +68,13 @@ public class DependencyReader extends DependencyReaderBase {\n \t\treadCompletedVersions();\n \t\tinit = true;\n \t}\n-\t\n-\t\n \n-\t/**\n+/**\n \t * Searches the first commit where a mvn clean packages runs correct, i.e. returns 1\n \t * \n \t * @param projectFolder\n \t */\n-\tpublic static void searchFirstRunningCommit(final VersionIterator iterator, final TestExecutor executor, final File projectFolder) {\n+public static void searchFirstRunningCommit(final VersionIterator iterator, final TestExecutor executor, final File projectFolder) {\n \t\tboolean successGettingCommit = iterator.goToFirstCommit();\n \t\twhile (!successGettingCommit && iterator.hasNextCommit()) {\n \t\t\tsuccessGettingCommit = iterator.goToNextCommit();\n@@ -103,7 +100,7 @@ public class DependencyReader extends DependencyReaderBase {\n \t */\n \tpublic void readDependencies() {\n \t\ttry {\n-\t\t\tif (!init){\n+\t\t\tif (!init) {\n \t\t\t\tif (!readInitialVersion()) {\n \t\t\t\t\treturn;\n \t\t\t\t}\n@@ -143,6 +140,4 @@ public class DependencyReader extends DependencyReaderBase {\n \tpublic Versiondependencies getDependencies() {\n \t\treturn dependencyResult;\n \t}\n-\n-\n-}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/25/DependencyReader.java\nindex 29504702114..17b536e47c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/25/DependencyReader.java\n@@ -18,12 +18,9 @@ package de.peran.dependency.reader;\n \n import java.io.File;\n import java.io.IOException;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-\n import com.github.javaparser.ParseProblemException;\n-\n import de.peran.dependency.ChangeManager;\n import de.peran.dependency.DependencyManager;\n import de.peran.dependency.execution.TestExecutor;\n@@ -37,112 +34,99 @@ import de.peran.vcs.VersionIterator;\n  * @author reichelt\n  *\n  */\n-public class DependencyReader extends DependencyReaderBase {\n-\n-\tprivate static final Logger LOG = LogManager.getLogger(DependencyReader.class);\n-\t\n-\tboolean init = false;\n-\n-\tpublic DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator) {\n-\t\tsuper(new Versiondependencies(), projectFolder, dependencyFile);\n-\n-\t\tthis.iterator = iterator;\n-\n-\t\tdependencyResult.setUrl(url);\n-\t\tdependencyResult.setVersions(new Versions());\n-\n-\t\thandler = new DependencyManager(projectFolder);\n-\n-\t\tsearchFirstRunningCommit(iterator, handler.getExecutor(), projectFolder);\n-\t}\n-\t\n-\tpublic DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final Versiondependencies initialdependencies) {\n-\t\tsuper(new Versiondependencies(), projectFolder, dependencyFile);\n-\n-\t\tthis.iterator = iterator;\n-\n-\t\tdependencyResult.setUrl(url);\n-\t\tdependencyResult.setVersions(initialdependencies.getVersions());\n-\t\tdependencyResult.setInitialversion(initialdependencies.getInitialversion());\n-\n-\t\thandler = new DependencyManager(projectFolder);\n-\t\treadCompletedVersions();\n-\t\tinit = true;\n-\t}\n-\t\n-\t\n \n-\t/**\n-\t * Searches the first commit where a mvn clean packages runs correct, i.e. returns 1\n-\t * \n-\t * @param projectFolder\n-\t */\n-\tpublic static void searchFirstRunningCommit(final VersionIterator iterator, final TestExecutor executor, final File projectFolder) {\n-\t\tboolean successGettingCommit = iterator.goToFirstCommit();\n-\t\twhile (!successGettingCommit && iterator.hasNextCommit()) {\n-\t\t\tsuccessGettingCommit = iterator.goToNextCommit();\n-\t\t}\n-\t\tif (!successGettingCommit) {\n-\t\t\tthrow new RuntimeException(\"Repository does not contain usable commit - maybe SVN and path has changed?\");\n-\t\t} else {\n-\t\t\tLOG.info(\"Found first commit: \" + iterator.getTag());\n-\t\t}\n-\t\tboolean getTracesSuccess = false;\n-\t\twhile (!getTracesSuccess) {\n-\t\t\tgetTracesSuccess = executor.isVersionRunning();\n \n-\t\t\tif (!getTracesSuccess) {\n-\t\t\t\tLOG.debug(\"pom.xml does not exist / version is not running {}\", iterator.getTag());\n-\t\t\t\titerator.goToNextCommit();\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Reads the dependencies of the tests\n-\t */\n-\tpublic void readDependencies() {\n-\t\ttry {\n-\t\t\tif (!init){\n-\t\t\t\tif (!readInitialVersion()) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tLOG.debug(\"Analysiere {} Eintr\u00e4ge\", iterator.getSize());\n-\n-\t\t\tint overallSize = 0, prunedSize = 0;\n-\t\t\tprunedSize += dependencyMap.size();\n-\n-\t\t\tfinal ChangeManager changeManager = new ChangeManager(projectFolder);\n-\t\t\tchangeManager.saveOldClasses();\n-\t\t\twhile (iterator.hasNextCommit()) {\n-\t\t\t\titerator.goToNextCommit();\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tfinal int tests = analyseVersion(changeManager);\n-\t\t\t\t\tDependencyReaderUtil.write(dependencyResult, dependencyFile);\n-\t\t\t\t\toverallSize += dependencyMap.size();\n-\t\t\t\t\tprunedSize += tests;\n-\t\t\t\t} catch (final ParseProblemException ppe) {\n-\t\t\t\t\tppe.printStackTrace();\n-\t\t\t\t}\n-\n-\t\t\t\tLOG.info(\"Overall-tests: {} Executed tests with pruning: {}\", overallSize, prunedSize);\n-\n-\t\t\t\thandler.getExecutor().deleteTemporaryFiles();\n-\t\t\t}\n-\n-\t\t\tLOG.debug(\"Finished dependency-reading\");\n-\n-\t\t} catch (IOException | InterruptedException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t}\n-\n-\tpublic Versiondependencies getDependencies() {\n-\t\treturn dependencyResult;\n-\t}\n-\n-\n-}\n+public class DependencyReader extends DependencyReaderBase {\n+ private static final Logger LOG = LogManager.getLogger(DependencyReader.class);\n+ boolean init = false;\n+\n+ public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator) {\n+  super(new Versiondependencies(), projectFolder, dependencyFile);\n+  this.iterator = iterator;\n+  dependencyResult.setUrl(url);\n+  dependencyResult.setVersions(new Versions());\n+  handler = new DependencyManager(projectFolder);\n+  searchFirstRunningCommit(iterator, handler.getExecutor(), projectFolder);\n+ }\n+\n+ public DependencyReader(final File projectFolder, final File dependencyFile, final String url, final VersionIterator iterator, final Versiondependencies initialdependencies) {\n+  super(new Versiondependencies(), projectFolder, dependencyFile);\n+  this.iterator = iterator;\n+  dependencyResult.setUrl(url);\n+  dependencyResult.setVersions(initialdependencies.getVersions());\n+  dependencyResult.setInitialversion(initialdependencies.getInitialversion());\n+  handler = new DependencyManager(projectFolder);\n+  readCompletedVersions();\n+  init = true;\n+ }\n+ \n+ \n+\n+ /**\n+  * Searches the first commit where a mvn clean packages runs correct, i.e. returns 1\n+  * \n+  * @param projectFolder\n+  */\n+\n+\n+ public static void searchFirstRunningCommit(final VersionIterator iterator, final TestExecutor executor, final File projectFolder) {\n+  boolean successGettingCommit = iterator.goToFirstCommit();\n+  while (!successGettingCommit && iterator.hasNextCommit()) {\n+   successGettingCommit = iterator.goToNextCommit();\n+  }\n+  if (!successGettingCommit) {\n+   throw new RuntimeException(\"Repository does not contain usable commit - maybe SVN and path has changed?\");\n+  } else {\n+   LOG.info(\"Found first commit: \" + iterator.getTag());\n+  }\n+\n+  boolean getTracesSuccess = false;\n+  while (!getTracesSuccess) {\n+   getTracesSuccess = executor.isVersionRunning();\n+   if (!getTracesSuccess) {\n+    LOG.debug(\"pom.xml does not exist / version is not running {}\", iterator.getTag());\n+    iterator.goToNextCommit();\n+   }\n+  }\n+ }\n+\n+ /**\n+  * Reads the dependencies of the tests\n+  */\n+\n+ public void readDependencies() {\n+  try {\n+   if (!init) {\n+    if (!readInitialVersion()) {\n+     return;\n+    }\n+   }\n+   LOG.debug(\"Analysiere {} Eintr\u00e4ge\", iterator.getSize());\n+   int overallSize = 0, prunedSize = 0;\n+   prunedSize += dependencyMap.size();\n+\n+   final ChangeManager changeManager = new ChangeManager(projectFolder);\n+   changeManager.saveOldClasses();\n+   while (iterator.hasNextCommit()) {\n+    iterator.goToNextCommit();\n+    try {\n+     final int tests = analyseVersion(changeManager);\n+     DependencyReaderUtil.write(dependencyResult, dependencyFile);\n+     overallSize += dependencyMap.size();\n+     prunedSize += tests;\n+    } catch (final ParseProblemException ppe) {\n+     ppe.printStackTrace();\n+    }\n+    LOG.info(\"Overall-tests: {} Executed tests with pruning: {}\", overallSize, prunedSize);\n+    handler.getExecutor().deleteTemporaryFiles();\n+   }\n+   LOG.debug(\"Finished dependency-reading\");\n+  } catch (IOException | InterruptedException e) {\n+   e.printStackTrace();\n+  }\n+ }\n+\n+ public Versiondependencies getDependencies() {\n+  return dependencyResult;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 149
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/25/DependencyReader.java\nindex 29504702114..054f43e46a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/25/DependencyReader.java\n@@ -103,7 +103,7 @@ public class DependencyReader extends DependencyReaderBase {\n \t */\n \tpublic void readDependencies() {\n \t\ttry {\n-\t\t\tif (!init){\n+\t\t\tif (!init) {\n \t\t\t\tif (!readInitialVersion()) {\n \t\t\t\t\treturn;\n \t\t\t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/25/DependencyReader.java\nindex 29504702114..054f43e46a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/25/DependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/25/DependencyReader.java\n@@ -103,7 +103,7 @@ public class DependencyReader extends DependencyReaderBase {\n \t */\n \tpublic void readDependencies() {\n \t\ttry {\n-\t\t\tif (!init){\n+\t\t\tif (!init) {\n \t\t\t\tif (!readInitialVersion()) {\n \t\t\t\t\treturn;\n \t\t\t\t}\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}