{
    "project_name": "Angel-ML-angel",
    "error_id": "754",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "272",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "311",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "350",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "390",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "430",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "470",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "511",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/754/VectorStorageUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/754/VectorStorageUtils.java\nindex bdcb75980dc..d5288cb8017 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/754/VectorStorageUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/754/VectorStorageUtils.java\n@@ -230,8 +230,7 @@ public class VectorStorageUtils {\n         buf.writeInt(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+      throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n     }\n   }\n \n@@ -270,8 +269,7 @@ public class VectorStorageUtils {\n         buf.writeLong(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+      throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n     }\n   }\n \n@@ -310,8 +308,7 @@ public class VectorStorageUtils {\n         buf.writeFloat(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+      throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n     }\n   }\n \n@@ -350,8 +347,7 @@ public class VectorStorageUtils {\n         buf.writeDouble(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+      throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n     }\n   }\n \n@@ -391,8 +387,7 @@ public class VectorStorageUtils {\n         buf.writeInt(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+      throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n     }\n   }\n \n@@ -432,8 +427,7 @@ public class VectorStorageUtils {\n         buf.writeLong(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+      throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n     }\n   }\n \n@@ -473,8 +467,7 @@ public class VectorStorageUtils {\n         buf.writeFloat(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+      throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n     }\n   }\n \n@@ -515,8 +508,7 @@ public class VectorStorageUtils {\n         buf.writeDouble(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+      throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n     }\n   }\n \n@@ -882,4 +874,4 @@ public class VectorStorageUtils {\n   public static int size(Vector vector) {\n     return (int) vector.getSize();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "232",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "271",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "310",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "349",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "381",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 13, indentation should be the same level as line 382.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "389",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "421",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 13, indentation should be the same level as line 422.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "429",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "461",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 13, indentation should be the same level as line 462.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "469",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "501",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 13, indentation should be the same level as line 502.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "509",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/754/VectorStorageUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/754/VectorStorageUtils.java\nindex bdcb75980dc..2ea78771d8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/754/VectorStorageUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/754/VectorStorageUtils.java\n@@ -47,6 +47,7 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n /**\n  * Vector storage utils\n  */\n+\n public class VectorStorageUtils {\n \n   protected Vector vector;\n@@ -79,24 +80,24 @@ public class VectorStorageUtils {\n     if (vector instanceof IntVector) {\n       return BasicType.INT;\n     } else if (vector instanceof LongVector) {\n-      return BasicType.LONG;\n+             return BasicType.LONG;\n     } else if (vector instanceof FloatVector) {\n-      return BasicType.FLOAT;\n-    } else {\n-      return BasicType.DOUBLE;\n-    }\n+             return BasicType.FLOAT;\n+           } else {\n+             return BasicType.DOUBLE;\n+           }\n   }\n \n   public static StorageMethod getStorageMethod(Vector vector) {\n     if (vector.isDense()) {\n       return StorageMethod.DENSE;\n     } else if (vector.isSparse()) {\n-      return StorageMethod.SPARSE;\n+             return StorageMethod.SPARSE;\n     } else if (vector.isSorted()) {\n-      return StorageMethod.SORTED;\n-    } else {\n-      return StorageMethod.SPARSE;\n-    }\n+             return StorageMethod.SORTED;\n+           } else {\n+             return StorageMethod.SPARSE;\n+           }\n   }\n \n   public static void serialize(ByteBuf buf, Vector vector) {\n@@ -146,21 +147,19 @@ public class VectorStorageUtils {\n \n     // Vector data\n     deserializeVector(buf, vector);\n-\n     return vector;\n   }\n \n-\n   public static void serializeVector(ByteBuf buf, Vector vector) {\n     if (vector instanceof IntVector) {\n       serializeVector(buf, (IntVector) vector);\n     } else if (vector instanceof LongVector) {\n-      serializeVector(buf, (LongVector) vector);\n+             serializeVector(buf, (LongVector) vector);\n     } else if (vector instanceof FloatVector) {\n-      serializeVector(buf, (FloatVector) vector);\n-    } else {\n-      serializeVector(buf, (DoubleVector) vector);\n-    }\n+             serializeVector(buf, (FloatVector) vector);\n+           } else {\n+             serializeVector(buf, (DoubleVector) vector);\n+           }\n   }\n \n   public static void serializeVector(ByteBuf buf, IntVector vector) {\n@@ -223,16 +222,15 @@ public class VectorStorageUtils {\n         buf.writeInt(values[i]);\n       }\n     } else if (method == StorageMethod.DENSE) {\n-      int[] values = vector.getStorage().getValues();\n-      buf.writeInt(values.length);\n-      buf.writeInt(SerializeArrangement.VALUE.getValue());\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeInt(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n-    }\n+             int[] values = vector.getStorage().getValues();\n+             buf.writeInt(values.length);\n+             buf.writeInt(SerializeArrangement.VALUE.getValue());\n+             for (int i = 0; i < values.length; i++) {\n+               buf.writeInt(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+           }\n   }\n \n   public static void serializeVector(ByteBuf buf, IntLongVector vector) {\n@@ -263,16 +261,15 @@ public class VectorStorageUtils {\n         buf.writeLong(values[i]);\n       }\n     } else if (method == StorageMethod.DENSE) {\n-      long[] values = vector.getStorage().getValues();\n-      buf.writeInt(values.length);\n-      buf.writeInt(SerializeArrangement.VALUE.getValue());\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeLong(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n-    }\n+             long[] values = vector.getStorage().getValues();\n+             buf.writeInt(values.length);\n+             buf.writeInt(SerializeArrangement.VALUE.getValue());\n+             for (int i = 0; i < values.length; i++) {\n+               buf.writeLong(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+           }\n   }\n \n   public static void serializeVector(ByteBuf buf, IntFloatVector vector) {\n@@ -303,16 +300,15 @@ public class VectorStorageUtils {\n         buf.writeFloat(values[i]);\n       }\n     } else if (method == StorageMethod.DENSE) {\n-      float[] values = vector.getStorage().getValues();\n-      buf.writeInt(values.length);\n-      buf.writeInt(SerializeArrangement.VALUE.getValue());\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeFloat(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n-    }\n+             float[] values = vector.getStorage().getValues();\n+             buf.writeInt(values.length);\n+             buf.writeInt(SerializeArrangement.VALUE.getValue());\n+             for (int i = 0; i < values.length; i++) {\n+               buf.writeFloat(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+           }\n   }\n \n   public static void serializeVector(ByteBuf buf, IntDoubleVector vector) {\n@@ -343,16 +339,15 @@ public class VectorStorageUtils {\n         buf.writeDouble(values[i]);\n       }\n     } else if (method == StorageMethod.DENSE) {\n-      double[] values = vector.getStorage().getValues();\n-      buf.writeInt(values.length);\n-      buf.writeInt(SerializeArrangement.VALUE.getValue());\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeDouble(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n-    }\n+             double[] values = vector.getStorage().getValues();\n+             buf.writeInt(values.length);\n+             buf.writeInt(SerializeArrangement.VALUE.getValue());\n+             for (int i = 0; i < values.length; i++) {\n+               buf.writeDouble(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+           }\n   }\n \n   public static void serializeVector(ByteBuf buf, LongIntVector vector) {\n@@ -384,16 +379,15 @@ public class VectorStorageUtils {\n       }\n     } else if (method == StorageMethod.DENSE) {\n       // Impossible now\n-      int[] values = vector.getStorage().getValues();\n-      buf.writeInt(values.length);\n-      buf.writeInt(SerializeArrangement.VALUE.getValue());\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeInt(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n-    }\n+             int[] values = vector.getStorage().getValues();\n+             buf.writeInt(values.length);\n+             buf.writeInt(SerializeArrangement.VALUE.getValue());\n+             for (int i = 0; i < values.length; i++) {\n+               buf.writeInt(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+           }\n   }\n \n   public static void serializeVector(ByteBuf buf, LongLongVector vector) {\n@@ -425,16 +419,15 @@ public class VectorStorageUtils {\n       }\n     } else if (method == StorageMethod.DENSE) {\n       // Impossible now\n-      long[] values = vector.getStorage().getValues();\n-      buf.writeInt(values.length);\n-      buf.writeInt(SerializeArrangement.VALUE.getValue());\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeLong(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n-    }\n+             long[] values = vector.getStorage().getValues();\n+             buf.writeInt(values.length);\n+             buf.writeInt(SerializeArrangement.VALUE.getValue());\n+             for (int i = 0; i < values.length; i++) {\n+               buf.writeLong(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+           }\n   }\n \n   public static void serializeVector(ByteBuf buf, LongFloatVector vector) {\n@@ -466,19 +459,17 @@ public class VectorStorageUtils {\n       }\n     } else if (method == StorageMethod.DENSE) {\n       // Impossible now\n-      float[] values = vector.getStorage().getValues();\n-      buf.writeInt(values.length);\n-      buf.writeInt(SerializeArrangement.VALUE.getValue());\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeFloat(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n-    }\n+             float[] values = vector.getStorage().getValues();\n+             buf.writeInt(values.length);\n+             buf.writeInt(SerializeArrangement.VALUE.getValue());\n+             for (int i = 0; i < values.length; i++) {\n+               buf.writeFloat(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+           }\n   }\n \n-\n   public static void serializeVector(ByteBuf buf, LongDoubleVector vector) {\n     StorageMethod method = getStorageMethod(vector);\n     if (method == StorageMethod.SPARSE) {\n@@ -508,28 +499,27 @@ public class VectorStorageUtils {\n       }\n     } else if (method == StorageMethod.DENSE) {\n       // Impossible now\n-      double[] values = vector.getStorage().getValues();\n-      buf.writeInt(values.length);\n-      buf.writeInt(SerializeArrangement.VALUE.getValue());\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeDouble(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n-    }\n+             double[] values = vector.getStorage().getValues();\n+             buf.writeInt(values.length);\n+             buf.writeInt(SerializeArrangement.VALUE.getValue());\n+             for (int i = 0; i < values.length; i++) {\n+               buf.writeDouble(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"Unknown vector storage type:\" + vector.getStorage().getClass().getName());\n+           }\n   }\n \n   public static void deserializeVector(ByteBuf buf, Vector vector) {\n     if (vector instanceof IntVector) {\n       deserializeVector(buf, (IntVector) vector);\n     } else if (vector instanceof LongVector) {\n-      deserializeVector(buf, (LongVector) vector);\n+             deserializeVector(buf, (LongVector) vector);\n     } else if (vector instanceof FloatVector) {\n-      deserializeVector(buf, (FloatVector) vector);\n-    } else {\n-      deserializeVector(buf, (DoubleVector) vector);\n-    }\n+             deserializeVector(buf, (FloatVector) vector);\n+           } else {\n+             deserializeVector(buf, (DoubleVector) vector);\n+           }\n   }\n \n   public static void deserializeVector(ByteBuf buf, IntVector vector) {\n@@ -568,7 +558,6 @@ public class VectorStorageUtils {\n     int elemNum = buf.readInt();\n     StorageMethod method = getStorageMethod(vector);\n     SerializeArrangement arrangement = SerializeArrangement.valuesOf(buf.readInt());\n-\n     if (arrangement == SerializeArrangement.KEY_VALUE) {\n       if (method == StorageMethod.SORTED) {\n         // If use sorted storage, we should get the array pair first\n@@ -604,7 +593,6 @@ public class VectorStorageUtils {\n     int elemNum = buf.readInt();\n     StorageMethod method = getStorageMethod(vector);\n     SerializeArrangement arrangement = SerializeArrangement.valuesOf(buf.readInt());\n-\n     if (arrangement == SerializeArrangement.KEY_VALUE) {\n       if (method == StorageMethod.SORTED) {\n         // If use sorted storage, we should get the array pair first\n@@ -640,7 +628,6 @@ public class VectorStorageUtils {\n     int elemNum = buf.readInt();\n     StorageMethod method = getStorageMethod(vector);\n     SerializeArrangement arrangement = SerializeArrangement.valuesOf(buf.readInt());\n-\n     if (arrangement == SerializeArrangement.KEY_VALUE) {\n       if (method == StorageMethod.SORTED) {\n         // If use sorted storage, we should get the array pair first\n@@ -676,7 +663,6 @@ public class VectorStorageUtils {\n     int elemNum = buf.readInt();\n     StorageMethod method = getStorageMethod(vector);\n     SerializeArrangement arrangement = SerializeArrangement.valuesOf(buf.readInt());\n-\n     if (arrangement == SerializeArrangement.KEY_VALUE) {\n       if (method == StorageMethod.SORTED) {\n         // If use sorted storage, we should get the array pair first\n@@ -712,7 +698,6 @@ public class VectorStorageUtils {\n     int elemNum = buf.readInt();\n     StorageMethod method = getStorageMethod(vector);\n     SerializeArrangement arrangement = SerializeArrangement.valuesOf(buf.readInt());\n-\n     if (arrangement == SerializeArrangement.KEY_VALUE) {\n       if (method == StorageMethod.SORTED) {\n         // If use sorted storage, we should get the array pair first\n@@ -748,7 +733,6 @@ public class VectorStorageUtils {\n     int elemNum = buf.readInt();\n     StorageMethod method = getStorageMethod(vector);\n     SerializeArrangement arrangement = SerializeArrangement.valuesOf(buf.readInt());\n-\n     if (arrangement == SerializeArrangement.KEY_VALUE) {\n       if (method == StorageMethod.SORTED) {\n         // If use sorted storage, we should get the array pair first\n@@ -784,7 +768,6 @@ public class VectorStorageUtils {\n     int elemNum = buf.readInt();\n     StorageMethod method = getStorageMethod(vector);\n     SerializeArrangement arrangement = SerializeArrangement.valuesOf(buf.readInt());\n-\n     if (arrangement == SerializeArrangement.KEY_VALUE) {\n       if (method == StorageMethod.SORTED) {\n         // If use sorted storage, we should get the array pair first\n@@ -820,7 +803,6 @@ public class VectorStorageUtils {\n     int elemNum = buf.readInt();\n     StorageMethod method = getStorageMethod(vector);\n     SerializeArrangement arrangement = SerializeArrangement.valuesOf(buf.readInt());\n-\n     if (arrangement == SerializeArrangement.KEY_VALUE) {\n       if (method == StorageMethod.SORTED) {\n         // If use sorted storage, we should get the array pair first\n@@ -852,14 +834,12 @@ public class VectorStorageUtils {\n     }\n   }\n \n-\n   public static int bufferLen(Vector vector) {\n     int headLen = 4 * 4 + 2 * 8 + 4 * 2;\n     StorageMethod method = getStorageMethod(vector);\n     BasicType keyType = getKeyType(vector);\n     BasicType valueType = getValueType(vector);\n     int len = (int) vector.getSize();\n-\n     if (method == StorageMethod.DENSE) {\n       return headLen + len * sizeOf(valueType);\n     } else {\n@@ -882,4 +862,5 @@ public class VectorStorageUtils {\n   public static int size(Vector vector) {\n     return (int) vector.getSize();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 116
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}