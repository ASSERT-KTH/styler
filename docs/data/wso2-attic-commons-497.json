{
    "project_name": "wso2-attic-commons",
    "error_id": "497",
    "information": {
        "errors": [
            {
                "line": "51",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 139).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n        PredicateTreeNode value = conditionExecutor.constructPredicate(newEvent, tableDefinition, predicateBuilder);\n        if (value.toString().equals(\"*\")) {\n            return predicateBuilder.buildVariableExpression(\"*\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/497/NotConditionExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/497/NotConditionExecutor.java\nindex 34171b4b05d..ed13a1329c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/497/NotConditionExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/497/NotConditionExecutor.java\n@@ -48,7 +48,8 @@ public class NotConditionExecutor implements ConditionExecutor {\n \n \n     @Override\n-    public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n+    public PredicateTreeNode constructPredicate(AtomicEvent newEvent\n+            , TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n         PredicateTreeNode value = conditionExecutor.constructPredicate(newEvent, tableDefinition, predicateBuilder);\n         if (value.toString().equals(\"*\")) {\n             return predicateBuilder.buildVariableExpression(\"*\");\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/497/NotConditionExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/497/NotConditionExecutor.java\nindex 34171b4b05d..434d68e83be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/497/NotConditionExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/497/NotConditionExecutor.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.executor.conditon;\n \n import org.wso2.siddhi.core.event.AtomicEvent;\n@@ -24,37 +25,38 @@ import org.wso2.siddhi.query.api.definition.TableDefinition;\n \n public class NotConditionExecutor implements ConditionExecutor {\n \n-    public ConditionExecutor conditionExecutor;\n-\n-    public NotConditionExecutor(ConditionExecutor conditionExecutor) {\n-        this.conditionExecutor = conditionExecutor;\n-    }\n-\n-    public boolean execute(AtomicEvent event) {\n-        return !conditionExecutor.execute(event);\n-    }\n-\n-    @Override\n-    public String constructFilterQuery(AtomicEvent newEvent, int level) {\n-        String value = conditionExecutor.constructFilterQuery(newEvent, 1);\n-        if (value.equals(\"*\")) {\n-            return \"*\";\n-        } else {\n-            StringBuilder sb = new StringBuilder();\n-            sb.append(\"(\").append(\" !(\").append(value).append(\")\");\n-            return sb.toString();\n-        }\n+  public ConditionExecutor conditionExecutor;\n+\n+  public NotConditionExecutor(ConditionExecutor conditionExecutor) {\n+    this.conditionExecutor = conditionExecutor;\n+  }\n+\n+  public boolean execute(AtomicEvent event) {\n+    return !conditionExecutor.execute(event);\n+  }\n+\n+  @Override\n+  public String constructFilterQuery(AtomicEvent newEvent, int level) {\n+    String value = conditionExecutor.constructFilterQuery(newEvent, 1);\n+    if (value.equals(\"*\")) {\n+      return \"*\";\n+    } else {\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"(\").append(\" !(\").append(value).append(\")\");\n+      return sb.toString();\n     }\n+  }\n \n \n-    @Override\n-    public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n-        PredicateTreeNode value = conditionExecutor.constructPredicate(newEvent, tableDefinition, predicateBuilder);\n-        if (value.toString().equals(\"*\")) {\n-            return predicateBuilder.buildVariableExpression(\"*\");\n-        } else {\n-            return predicateBuilder.buildNotCondition(value);\n-        }\n+  @Override\n+  public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition,\n+                                              PredicateBuilder predicateBuilder) {\n+    PredicateTreeNode value = conditionExecutor.constructPredicate(newEvent, tableDefinition, predicateBuilder);\n+    if (value.toString().equals(\"*\")) {\n+      return predicateBuilder.buildVariableExpression(\"*\");\n+    } else {\n+      return predicateBuilder.buildNotCondition(value);\n     }\n+  }\n \n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/497/NotConditionExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/497/NotConditionExecutor.java\nindex 34171b4b05d..5f6891b9947 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/497/NotConditionExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/497/NotConditionExecutor.java\n@@ -57,4 +57,4 @@ public class NotConditionExecutor implements ConditionExecutor {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/497/NotConditionExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/497/NotConditionExecutor.java\nindex 34171b4b05d..ed13a1329c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/497/NotConditionExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/497/NotConditionExecutor.java\n@@ -48,7 +48,8 @@ public class NotConditionExecutor implements ConditionExecutor {\n \n \n     @Override\n-    public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n+    public PredicateTreeNode constructPredicate(AtomicEvent newEvent\n+            , TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n         PredicateTreeNode value = conditionExecutor.constructPredicate(newEvent, tableDefinition, predicateBuilder);\n         if (value.toString().equals(\"*\")) {\n             return predicateBuilder.buildVariableExpression(\"*\");\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/497/NotConditionExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/497/NotConditionExecutor.java\nindex 34171b4b05d..34d7d6fc0c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/497/NotConditionExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/497/NotConditionExecutor.java\n@@ -48,8 +48,9 @@ public class NotConditionExecutor implements ConditionExecutor {\n \n \n     @Override\n-    public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n-        PredicateTreeNode value = conditionExecutor.constructPredicate(newEvent, tableDefinition, predicateBuilder);\n+    public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition,\n+            PredicateBuilder predicateBuilder) {\n+         PredicateTreeNode value = conditionExecutor.constructPredicate(newEvent, tableDefinition, predicateBuilder);\n         if (value.toString().equals(\"*\")) {\n             return predicateBuilder.buildVariableExpression(\"*\");\n         } else {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}