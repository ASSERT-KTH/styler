{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1980",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "74",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "74",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1980/LockWaitStrategies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1980/LockWaitStrategies.java\nindex ef86c09c042..390e5c19c4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1980/LockWaitStrategies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1980/LockWaitStrategies.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.concurrent;\n \n import org.neo4j.storageengine.api.lock.AcquireLockTimeoutException;\n@@ -26,57 +27,55 @@ import static org.neo4j.kernel.api.exceptions.Status.Transaction.Interrupted;\n \n public enum LockWaitStrategies implements WaitStrategy<AcquireLockTimeoutException>\n {\n-    SPIN\n-    {\n+  SPIN\n+      {\n         @Override\n-        public void apply( long iteration ) throws AcquireLockTimeoutException\n+        public void apply(long iteration) throws AcquireLockTimeoutException\n         {\n-            // TODO We can experiment with introducing branch mispredictions here, to create\n-            // TODO bubbles in the pipeline that'll allow hyper-threaded threads on the\n-            // TODO same core to make progress. We can do that by generating a random number,\n-            // TODO e.g. with XorShift, and based on that, randomly branch to do a volatile\n-            // TODO write to one of two fields. The volatile fields would be there to give\n-            // TODO side-effect to the operation, preventing dead-code elimination.\n+          // TODO We can experiment with introducing branch mispredictions here, to create\n+          // TODO bubbles in the pipeline that'll allow hyper-threaded threads on the\n+          // TODO same core to make progress. We can do that by generating a random number,\n+          // TODO e.g. with XorShift, and based on that, randomly branch to do a volatile\n+          // TODO write to one of two fields. The volatile fields would be there to give\n+          // TODO side-effect to the operation, preventing dead-code elimination.\n         }\n-    },\n-    YIELD\n-    {\n+      },\n+  YIELD\n+      {\n         @Override\n-        public void apply( long iteration ) throws AcquireLockTimeoutException\n+        public void apply(long iteration) throws AcquireLockTimeoutException\n         {\n-            Thread.yield();\n+          Thread.yield();\n         }\n-    },\n-    INCREMENTAL_BACKOFF\n-    {\n+      },\n+  INCREMENTAL_BACKOFF\n+      {\n         private static final int spinIterations = 1000;\n         private static final long multiplyUntilIteration = spinIterations + 2;\n \n         @Override\n-        public void apply( long iteration ) throws AcquireLockTimeoutException\n+        public void apply(long iteration) throws AcquireLockTimeoutException\n         {\n-            if ( iteration < spinIterations )\n-            {\n-                SPIN.apply( iteration );\n-                return;\n-            }\n+          if (iteration < spinIterations)\n+          {\n+            SPIN.apply(iteration);\n+            return;\n+          }\n \n-            try\n+          try\n+          {\n+            if (iteration < multiplyUntilIteration)\n             {\n-                if ( iteration < multiplyUntilIteration )\n-                {\n-                    Thread.sleep( 0, 1 << (iteration - spinIterations) );\n-                }\n-                else\n-                {\n-                    Thread.sleep( 0, 500 );\n-                }\n-            }\n-            catch ( InterruptedException e )\n+              Thread.sleep(0, 1 << (iteration - spinIterations));\n+            } else\n             {\n-                Thread.interrupted();\n-                throw new AcquireLockTimeoutException( e, \"Interrupted while waiting.\", Interrupted );\n+              Thread.sleep(0, 500);\n             }\n+          } catch (InterruptedException e)\n+          {\n+            Thread.interrupted();\n+            throw new AcquireLockTimeoutException(e, \"Interrupted while waiting.\", Interrupted);\n+          }\n         }\n-    }\n+      }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1980/LockWaitStrategies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1980/LockWaitStrategies.java\nindex ef86c09c042..8b61a4ffca0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1980/LockWaitStrategies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1980/LockWaitStrategies.java\n@@ -38,16 +38,14 @@ public enum LockWaitStrategies implements WaitStrategy<AcquireLockTimeoutExcepti\n             // TODO write to one of two fields. The volatile fields would be there to give\n             // TODO side-effect to the operation, preventing dead-code elimination.\n         }\n-    },\n-    YIELD\n+    }, YIELD\n     {\n         @Override\n         public void apply( long iteration ) throws AcquireLockTimeoutException\n         {\n             Thread.yield();\n         }\n-    },\n-    INCREMENTAL_BACKOFF\n+    }, INCREMENTAL_BACKOFF\n     {\n         private static final int spinIterations = 1000;\n         private static final long multiplyUntilIteration = spinIterations + 2;\n@@ -65,7 +63,7 @@ public enum LockWaitStrategies implements WaitStrategy<AcquireLockTimeoutExcepti\n             {\n                 if ( iteration < multiplyUntilIteration )\n                 {\n-                    Thread.sleep( 0, 1 << (iteration - spinIterations) );\n+                    Thread.sleep( 0, 1 << ( iteration - spinIterations) );\n                 }\n                 else\n                 {\n@@ -79,4 +77,4 @@ public enum LockWaitStrategies implements WaitStrategy<AcquireLockTimeoutExcepti\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}