{
    "project_name": "cloudera-director-sdk",
    "error_id": "119",
    "information": {
        "errors": [
            {
                "line": "0",
                "severity": "error",
                "message": "Required pattern 'Cloudera copyright header' missing in file.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/119/Instance.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/119/Instance.java\nindex ec1231b36af..a119bf0cb0c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/119/Instance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/119/Instance.java\n@@ -26,7 +26,9 @@ public class Instance {\n   private String ipAddress;\n   /* Virtual instance */\n   private VirtualInstance virtualInstance;\n-  public Instance() { }\n+\n+  public Instance() {\n+  }\n \n   private Instance(Capabilities capabilities, String ipAddress, VirtualInstance virtualInstance) {\n     this.capabilities = capabilities;\n@@ -71,14 +73,16 @@ public class Instance {\n \n   public InstanceBuilder toBuilder() {\n     return builder()\n-      .capabilities(capabilities)\n-      .ipAddress(ipAddress)\n-      .virtualInstance(virtualInstance)\n-      ;\n+        .capabilities(capabilities)\n+        .ipAddress(ipAddress)\n+        .virtualInstance(virtualInstance)\n+        ;\n   }\n+\n   public Capabilities getCapabilities() {\n     return capabilities;\n   }\n+\n   public void setCapabilities(Capabilities capabilities) {\n     this.capabilities = capabilities;\n   }\n@@ -86,6 +90,7 @@ public class Instance {\n   public String getIpAddress() {\n     return ipAddress;\n   }\n+\n   public void setIpAddress(String ipAddress) {\n     this.ipAddress = ipAddress;\n   }\n@@ -93,26 +98,37 @@ public class Instance {\n   public VirtualInstance getVirtualInstance() {\n     return virtualInstance;\n   }\n+\n   public void setVirtualInstance(VirtualInstance virtualInstance) {\n     this.virtualInstance = virtualInstance;\n   }\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n \n     Instance other = (Instance) o; // NOPMD\n \n     if (capabilities != null ?\n         !capabilities.equals(other.capabilities) :\n-        other.capabilities != null) return false;\n+        other.capabilities != null) {\n+      return false;\n+    }\n     if (ipAddress != null ?\n         !ipAddress.equals(other.ipAddress) :\n-        other.ipAddress != null) return false;\n+        other.ipAddress != null) {\n+      return false;\n+    }\n     if (virtualInstance != null ?\n         !virtualInstance.equals(other.virtualInstance) :\n-        other.virtualInstance != null) return false;\n+        other.virtualInstance != null) {\n+      return false;\n+    }\n     return true;\n   }\n \n@@ -126,7 +142,7 @@ public class Instance {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class Instance {\" + newLine);\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "95",
                    "column": "30",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "97",
                    "column": "23",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "column": "29",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/119/Instance.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/119/Instance.java\nindex ec1231b36af..26d5aa0c193 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/119/Instance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/119/Instance.java\n@@ -1,24 +1,8 @@\n-// Licensed to Cloudera, Inc. under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  Cloudera, Inc. licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Licensed to Cloudera, Inc.\n // Note: This file is auto generated. Do not edit manually.\n \n package com.cloudera.director.client.v1.model;\n \n-\n public class Instance {\n   /* Optional instance capabilities */\n   private Capabilities capabilities;\n@@ -26,7 +10,8 @@ public class Instance {\n   private String ipAddress;\n   /* Virtual instance */\n   private VirtualInstance virtualInstance;\n-  public Instance() { }\n+\n+public Instance() { }\n \n   private Instance(Capabilities capabilities, String ipAddress, VirtualInstance virtualInstance) {\n     this.capabilities = capabilities;\n@@ -45,7 +30,8 @@ public class Instance {\n   }\n \n   public static class InstanceBuilder {\n-    private Capabilities capabilities = null;\n+\n+  private Capabilities capabilities = null;\n     private String ipAddress = null;\n     private VirtualInstance virtualInstance = null;\n \n@@ -70,13 +56,12 @@ public class Instance {\n   }\n \n   public InstanceBuilder toBuilder() {\n-    return builder()\n-      .capabilities(capabilities)\n+    return builder().capabilities(capabilities)\n       .ipAddress(ipAddress)\n-      .virtualInstance(virtualInstance)\n-      ;\n+      .virtualInstance(virtualInstance);\n   }\n-  public Capabilities getCapabilities() {\n+\n+public Capabilities getCapabilities() {\n     return capabilities;\n   }\n   public void setCapabilities(Capabilities capabilities) {\n@@ -100,19 +85,18 @@ public class Instance {\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-\n-    Instance other = (Instance) o; // NOPMD\n-\n-    if (capabilities != null ?\n-        !capabilities.equals(other.capabilities) :\n-        other.capabilities != null) return false;\n-    if (ipAddress != null ?\n-        !ipAddress.equals(other.ipAddress) :\n-        other.ipAddress != null) return false;\n-    if (virtualInstance != null ?\n-        !virtualInstance.equals(other.virtualInstance) :\n-        other.virtualInstance != null) return false;\n+    if (o == null ||\n+getClass() != o.getClass()) return false;\n+\n+    Instance other = (Instance) o;\n+\n+// NOPMD\n+\n+    if (capabilities != null ?!capabilities.equals(other.capabilities) : other.capabilities != null) return false;\n+\n+if (ipAddress != null ?!ipAddress.equals(other.ipAddress) : other.ipAddress != null) return false;\n+\n+if (virtualInstance != null ?!virtualInstance.equals(other.virtualInstance) : other.virtualInstance != null) return false;\n     return true;\n   }\n \n@@ -126,7 +110,7 @@ public class Instance {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class Instance {\" + newLine);\n@@ -136,5 +120,4 @@ public class Instance {\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "33",
                    "column": "21",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "33",
                    "column": "22",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "column": "18",
                    "severity": "warning",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "118",
                    "column": "31",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "120",
                    "column": "29",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "120",
                    "column": "29",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "120",
                    "column": "70",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "121",
                    "column": "26",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "121",
                    "column": "26",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "121",
                    "column": "61",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "column": "32",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "122",
                    "column": "32",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "122",
                    "column": "79",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "16",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "16",
                    "severity": "warning",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "47",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "72",
                    "severity": "warning",
                    "message": "':' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "72",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "16",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "16",
                    "severity": "warning",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "44",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "66",
                    "severity": "warning",
                    "message": "':' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "66",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "column": "16",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "column": "16",
                    "severity": "warning",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "column": "50",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "column": "78",
                    "severity": "warning",
                    "message": "':' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "column": "78",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/119/Instance.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/119/Instance.java\nindex ec1231b36af..5dd84d93154 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/119/Instance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/119/Instance.java\n@@ -18,35 +18,43 @@\n \n package com.cloudera.director.client.v1.model;\n \n-\n public class Instance {\n   /* Optional instance capabilities */\n+\n   private Capabilities capabilities;\n   /* IP address of instance */\n+\n   private String ipAddress;\n   /* Virtual instance */\n+\n   private VirtualInstance virtualInstance;\n-  public Instance() { }\n+\n+\n+  public Instance() {}\n+\n \n   private Instance(Capabilities capabilities, String ipAddress, VirtualInstance virtualInstance) {\n-    this.capabilities = capabilities;\n-    this.ipAddress = ipAddress;\n-    this.virtualInstance = virtualInstance;\n-  }\n+                                                                                                 this.capabilities = capabilities;\n+                                                                                                 this.ipAddress = ipAddress;\n+                                                                                                 this.virtualInstance = virtualInstance;\n+                      }\n \n   private Instance(InstanceBuilder builder) {\n-    this.capabilities = builder.capabilities;\n-    this.ipAddress = builder.ipAddress;\n-    this.virtualInstance = builder.virtualInstance;\n-  }\n+                                            this.capabilities = builder.capabilities;\n+                                            this.ipAddress = builder.ipAddress;\n+                                            this.virtualInstance = builder.virtualInstance;\n+                      }\n \n   public static InstanceBuilder builder() {\n     return new InstanceBuilder();\n   }\n \n   public static class InstanceBuilder {\n+\n     private Capabilities capabilities = null;\n+\n     private String ipAddress = null;\n+\n     private VirtualInstance virtualInstance = null;\n \n     public InstanceBuilder capabilities(Capabilities capabilities) {\n@@ -73,12 +81,13 @@ public class Instance {\n     return builder()\n       .capabilities(capabilities)\n       .ipAddress(ipAddress)\n-      .virtualInstance(virtualInstance)\n-      ;\n+      .virtualInstance(virtualInstance);\n   }\n+\n   public Capabilities getCapabilities() {\n     return capabilities;\n   }\n+\n   public void setCapabilities(Capabilities capabilities) {\n     this.capabilities = capabilities;\n   }\n@@ -86,6 +95,7 @@ public class Instance {\n   public String getIpAddress() {\n     return ipAddress;\n   }\n+\n   public void setIpAddress(String ipAddress) {\n     this.ipAddress = ipAddress;\n   }\n@@ -93,48 +103,50 @@ public class Instance {\n   public VirtualInstance getVirtualInstance() {\n     return virtualInstance;\n   }\n+\n   public void setVirtualInstance(VirtualInstance virtualInstance) {\n     this.virtualInstance = virtualInstance;\n   }\n \n+\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-\n-    Instance other = (Instance) o; // NOPMD\n-\n-    if (capabilities != null ?\n-        !capabilities.equals(other.capabilities) :\n-        other.capabilities != null) return false;\n-    if (ipAddress != null ?\n-        !ipAddress.equals(other.ipAddress) :\n-        other.ipAddress != null) return false;\n-    if (virtualInstance != null ?\n-        !virtualInstance.equals(other.virtualInstance) :\n-        other.virtualInstance != null) return false;\n+    if (o == null||\n+        getClass() != o.getClass()) return false;\n+\n+    Instance other = (Instance)o; // NOPMD\n+\n+    if (capabilities != null?!capabilities.equals(other.capabilities): other.capabilities != null) return false;\n+    if (ipAddress != null?!ipAddress.equals(other.ipAddress): other.ipAddress != null) return false;\n+    if (virtualInstance != null?!virtualInstance.equals(other.virtualInstance): other.virtualInstance != null) return false;\n     return true;\n   }\n \n+\n   @Override\n   public int hashCode() {\n     int result = 0;\n-    result = 31 * result + (capabilities != null ? capabilities.hashCode() : 0);\n-    result = 31 * result + (ipAddress != null ? ipAddress.hashCode() : 0);\n-    result = 31 * result + (virtualInstance != null ? virtualInstance.hashCode() : 0);\n+    result = 31*result + (capabilities != null? capabilities.hashCode():0);\n+    result = 31*result + (ipAddress != null? ipAddress.hashCode():0);\n+    result = 31*result + (virtualInstance != null? virtualInstance.hashCode():0);\n     return result;\n   }\n \n+\n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n+\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class Instance {\" + newLine);\n-    sb.append(\"  capabilities: \").append(capabilities).append(newLine);\n-    sb.append(\"  ipAddress: \").append(ipAddress).append(newLine);\n-    sb.append(\"  virtualInstance: \").append(virtualInstance).append(newLine);\n+    sb.append(\"  capabilities: \")\n+      .append(capabilities).append(newLine);\n+    sb.append(\"  ipAddress: \")\n+      .append(ipAddress).append(newLine);\n+    sb.append(\"  virtualInstance: \")\n+      .append(virtualInstance).append(newLine);\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 54
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}