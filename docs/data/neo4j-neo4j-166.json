{
    "project_name": "neo4j-neo4j",
    "error_id": "166",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "80",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "110",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/166/BatchingTokenRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/166/BatchingTokenRepository.java\nindex 900cf025ac1..cde4fb329f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/166/BatchingTokenRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/166/BatchingTokenRepository.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport.store;\n \n import java.util.Arrays;\n@@ -50,17 +51,17 @@ import static org.neo4j.kernel.impl.store.PropertyStore.encodeString;\n  */\n public abstract class BatchingTokenRepository<RECORD extends TokenRecord> implements ToIntFunction<Object>\n {\n-    private final Map<String,Integer> tokens = new HashMap<>();\n+    private final Map<String, Integer> tokens = new HashMap<>();\n     private final TokenStore<RECORD> store;\n     private final IntFunction<RECORD> recordInstantiator;\n     private int highId;\n     private int highestCreatedId;\n \n-    BatchingTokenRepository( TokenStore<RECORD> store, IntFunction<RECORD> recordInstantiator )\n+    BatchingTokenRepository(TokenStore<RECORD> store, IntFunction<RECORD> recordInstantiator)\n     {\n         this.store = store;\n         this.recordInstantiator = recordInstantiator;\n-        this.highId = (int)store.getHighId();\n+        this.highId = (int) store.getHighId();\n         this.highestCreatedId = highId - 1;\n     }\n \n@@ -71,23 +72,22 @@ public abstract class BatchingTokenRepository<RECORD extends TokenRecord> implem\n      * @param name token name.\n      * @return the id (created or existing) for the token by this name.\n      */\n-    public int getOrCreateId( String name )\n+    public int getOrCreateId(String name)\n     {\n         try\n         {\n-            TokenWrite.checkValidTokenName( name );\n-        }\n-        catch ( IllegalTokenNameException e )\n+            TokenWrite.checkValidTokenName(name);\n+        } catch (IllegalTokenNameException e)\n         {\n-            throw new IllegalArgumentException( e );\n+            throw new IllegalArgumentException(e);\n         }\n \n-        Integer id = tokens.get( name );\n-        if ( id == null )\n+        Integer id = tokens.get(name);\n+        if (id == null)\n         {\n-            synchronized ( tokens )\n+            synchronized (tokens)\n             {\n-                id = tokens.computeIfAbsent( name, k -> highId++ );\n+                id = tokens.computeIfAbsent(name, k -> highId++);\n             }\n         }\n         return id;\n@@ -101,66 +101,65 @@ public abstract class BatchingTokenRepository<RECORD extends TokenRecord> implem\n      * @param key name or id of this token.\n      * @return the id (created or existing) for the token key.\n      */\n-    public int getOrCreateId( Object key )\n+    public int getOrCreateId(Object key)\n     {\n-        if ( key instanceof String )\n+        if (key instanceof String)\n         {\n             // A name was supplied, get or create a token id for it\n-            return getOrCreateId( (String) key );\n-        }\n-        else if ( key instanceof Integer )\n+            return getOrCreateId((String) key);\n+        } else if (key instanceof Integer)\n         {\n             // A raw token id was supplied, just use it\n             return (Integer) key;\n         }\n-        throw new IllegalArgumentException( \"Expected either a String or Integer for property key, but was '\" +\n-                key + \"'\" + \", \" + key.getClass() );\n+        throw new IllegalArgumentException(\"Expected either a String or Integer for property key, but was '\" +\n+          key + \"'\" + \", \" + key.getClass());\n     }\n \n     @Override\n-    public int applyAsInt( Object key )\n+    public int applyAsInt(Object key)\n     {\n-        return getOrCreateId( key );\n+        return getOrCreateId(key);\n     }\n \n-    public long[] getOrCreateIds( String[] names )\n+    public long[] getOrCreateIds(String[] names)\n     {\n-        return getOrCreateIds( names, names.length );\n+        return getOrCreateIds(names, names.length);\n     }\n \n     /**\n      * Returns or creates multiple tokens for given token names.\n      *\n-     * @param names token names to lookup or create token ids for.\n+     * @param names  token names to lookup or create token ids for.\n      * @param length length of the names array to consider, the array itself may be longer.\n      * @return {@code long[]} containing the label ids.\n      */\n-    public long[] getOrCreateIds( String[] names, int length )\n+    public long[] getOrCreateIds(String[] names, int length)\n     {\n         long[] result = new long[length];\n         int from;\n         int to;\n-        for ( from = 0, to = 0; from < length; from++ )\n+        for (from = 0, to = 0; from < length; from++)\n         {\n-            int id = getOrCreateId( names[from] );\n-            if ( !contains( result, id, to ) )\n+            int id = getOrCreateId(names[from]);\n+            if (!contains(result, id, to))\n             {\n                 result[to++] = id;\n             }\n         }\n-        if ( to < from )\n+        if (to < from)\n         {\n-            result = Arrays.copyOf( result, to );\n+            result = Arrays.copyOf(result, to);\n         }\n-        Arrays.sort( result );\n+        Arrays.sort(result);\n         return result;\n     }\n \n-    private boolean contains( long[] array, long id, int arrayLength )\n+    private boolean contains(long[] array, long id, int arrayLength)\n     {\n-        for ( int i = 0; i < arrayLength; i++ )\n+        for (int i = 0; i < arrayLength; i++)\n         {\n-            if ( array[i] == id )\n+            if (array[i] == id)\n             {\n                 return true;\n             }\n@@ -173,68 +172,68 @@ public abstract class BatchingTokenRepository<RECORD extends TokenRecord> implem\n         return highId;\n     }\n \n-    public void flush( PageCursorTracer cursorTracer )\n+    public void flush(PageCursorTracer cursorTracer)\n     {\n         int highest = highestCreatedId;\n-        for ( Map.Entry<Integer,String> tokenToCreate : sortCreatedTokensById() )\n+        for (Map.Entry<Integer, String> tokenToCreate : sortCreatedTokensById())\n         {\n-            if ( tokenToCreate.getKey() > highestCreatedId )\n+            if (tokenToCreate.getKey() > highestCreatedId)\n             {\n-                createToken( tokenToCreate.getValue(), tokenToCreate.getKey(), cursorTracer );\n-                highest = Math.max( highest, tokenToCreate.getKey() );\n+                createToken(tokenToCreate.getValue(), tokenToCreate.getKey(), cursorTracer);\n+                highest = Math.max(highest, tokenToCreate.getKey());\n             }\n         }\n         // Store them\n-        int highestId = max( toIntExact( store.getHighestPossibleIdInUse( cursorTracer ) ), highest );\n-        store.setHighestPossibleIdInUse( highestId );\n+        int highestId = max(toIntExact(store.getHighestPossibleIdInUse(cursorTracer)), highest);\n+        store.setHighestPossibleIdInUse(highestId);\n         highestCreatedId = highestId;\n     }\n \n-    private void createToken( String name, int tokenId, PageCursorTracer cursorTracer )\n+    private void createToken(String name, int tokenId, PageCursorTracer cursorTracer)\n     {\n-        RECORD record = recordInstantiator.apply( tokenId );\n-        record.setInUse( true );\n+        RECORD record = recordInstantiator.apply(tokenId);\n+        record.setInUse(true);\n         record.setCreated();\n-        Collection<DynamicRecord> nameRecords = store.allocateNameRecords( encodeString( name ), cursorTracer, EmptyMemoryTracker.INSTANCE );\n-        record.setNameId( (int) Iterables.first( nameRecords ).getId() );\n-        record.addNameRecords( nameRecords );\n-        store.updateRecord( record, cursorTracer );\n-        nameRecords.forEach( nameRecord -> store.getNameStore().updateRecord( nameRecord, cursorTracer ) );\n+        Collection<DynamicRecord> nameRecords = store.allocateNameRecords(encodeString(name), cursorTracer, EmptyMemoryTracker.INSTANCE);\n+        record.setNameId((int) Iterables.first(nameRecords).getId());\n+        record.addNameRecords(nameRecords);\n+        store.updateRecord(record, cursorTracer);\n+        nameRecords.forEach(nameRecord -> store.getNameStore().updateRecord(nameRecord, cursorTracer));\n     }\n \n-    private Iterable<Map.Entry<Integer,String>> sortCreatedTokensById()\n+    private Iterable<Map.Entry<Integer, String>> sortCreatedTokensById()\n     {\n-        Map<Integer,String> sorted = new TreeMap<>();\n-        for ( Map.Entry<String,Integer> entry : tokens.entrySet() )\n+        Map<Integer, String> sorted = new TreeMap<>();\n+        for (Map.Entry<String, Integer> entry : tokens.entrySet())\n         {\n-            sorted.put( entry.getValue(), entry.getKey() );\n+            sorted.put(entry.getValue(), entry.getKey());\n         }\n         return sorted.entrySet();\n     }\n \n     public static class BatchingPropertyKeyTokenRepository\n-            extends BatchingTokenRepository<PropertyKeyTokenRecord>\n+      extends BatchingTokenRepository<PropertyKeyTokenRecord>\n     {\n-        BatchingPropertyKeyTokenRepository( TokenStore<PropertyKeyTokenRecord> store )\n+        BatchingPropertyKeyTokenRepository(TokenStore<PropertyKeyTokenRecord> store)\n         {\n-            super( store, PropertyKeyTokenRecord::new );\n+            super(store, PropertyKeyTokenRecord::new);\n         }\n     }\n \n     public static class BatchingLabelTokenRepository extends BatchingTokenRepository<LabelTokenRecord>\n     {\n-        BatchingLabelTokenRepository( TokenStore<LabelTokenRecord> store )\n+        BatchingLabelTokenRepository(TokenStore<LabelTokenRecord> store)\n         {\n-            super( store, LabelTokenRecord::new );\n+            super(store, LabelTokenRecord::new);\n         }\n     }\n \n     public static class BatchingRelationshipTypeTokenRepository\n-            extends BatchingTokenRepository<RelationshipTypeTokenRecord>\n+      extends BatchingTokenRepository<RelationshipTypeTokenRecord>\n     {\n-        BatchingRelationshipTypeTokenRepository( TokenStore<RelationshipTypeTokenRecord> store )\n+        BatchingRelationshipTypeTokenRepository(TokenStore<RelationshipTypeTokenRecord> store)\n         {\n-            super( store, RelationshipTypeTokenRecord::new );\n+            super(store, RelationshipTypeTokenRecord::new);\n         }\n     }\n }\n",
            "diff_size": 62
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}