{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "324",
    "information": {
        "errors": [
            {
                "line": "82",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    assert sslContext != null;\n    //register http/https socket factory\n    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\n        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n        .build();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/324/TLSHttpsTransport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/324/TLSHttpsTransport.java\nindex d544662fd04..de5a9edfb94 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/324/TLSHttpsTransport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/324/TLSHttpsTransport.java\n@@ -64,6 +64,7 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n \n   /**\n    * configure the certificate to httpClient\n+   *\n    * @param tlsConfig\n    */\n   public TLSHttpsTransport(TLSConfig tlsConfig) {\n@@ -79,10 +80,11 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n \n     assert sslContext != null;\n     //register http/https socket factory\n-    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\n-        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n-        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n-        .build();\n+    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry =\n+        RegistryBuilder.<ConnectionSocketFactory>create()\n+            .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n+            .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n+            .build();\n \n     //connection pool management\n     PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/324/TLSHttpsTransport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/324/TLSHttpsTransport.java\nindex d544662fd04..c07f3ad97d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/324/TLSHttpsTransport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/324/TLSHttpsTransport.java\n@@ -67,8 +67,7 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n    * @param tlsConfig\n    */\n   public TLSHttpsTransport(TLSConfig tlsConfig) {\n-\n-    // create keyStore and trustStore\n+  // create keyStore and trustStore\n     KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(), tlsConfig.getKeyStoreType().name(),\n         tlsConfig.getKeyStoreValue());\n     KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(), TLSConfig.KeyStoreInstanceType.JKS.name(),\n@@ -85,23 +84,17 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n         .build();\n \n     //connection pool management\n-    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\n-        connectionSocketFactoryRegistry);\n+    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(connectionSocketFactoryRegistry);\n     connectionManager.setMaxTotal(DEFAULT_MAX_CONNECTIONS);\n     connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);\n \n     //request parameter configuration\n     RequestConfig config = RequestConfig.custom().\n-        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).\n-        setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).\n-        setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).\n-        build();\n+        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).build();\n \n     // construct httpClient\n     HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().\n-        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).\n-        setConnectionManager(connectionManager).\n-        setDefaultRequestConfig(config);\n+        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).setConnectionManager(connectionManager).setDefaultRequestConfig(config);\n \n     this.httpClient = httpClientBuilder.build();\n   }\n@@ -137,4 +130,4 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n     }\n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}