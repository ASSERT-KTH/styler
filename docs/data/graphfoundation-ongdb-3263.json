{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3263",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "128",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "144",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3263/IndexProxyCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3263/IndexProxyCreator.java\nindex d934252ec44..db28f3ef60f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3263/IndexProxyCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3263/IndexProxyCreator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.io.IOException;\n@@ -37,148 +38,147 @@ import static java.lang.String.format;\n  */\n class IndexProxyCreator\n {\n-    private final IndexSamplingConfig samplingConfig;\n-    private final IndexStoreView storeView;\n-    private final IndexProviderMap providerMap;\n-    private final TokenNameLookup tokenNameLookup;\n-    private final LogProvider logProvider;\n-\n-    IndexProxyCreator( IndexSamplingConfig samplingConfig,\n-            IndexStoreView storeView,\n-            IndexProviderMap providerMap,\n-            TokenNameLookup tokenNameLookup,\n-            LogProvider logProvider )\n-    {\n-        this.samplingConfig = samplingConfig;\n-        this.storeView = storeView;\n-        this.providerMap = providerMap;\n-        this.tokenNameLookup = tokenNameLookup;\n-        this.logProvider = logProvider;\n-    }\n-\n-    IndexProxy createPopulatingIndexProxy( final long ruleId,\n-            final SchemaIndexDescriptor descriptor,\n-            final IndexProvider.Descriptor providerDescriptor,\n-            final boolean flipToTentative,\n-            final IndexingService.Monitor monitor,\n-            final IndexPopulationJob populationJob )\n-    {\n-        final FlippableIndexProxy flipper = new FlippableIndexProxy();\n-\n-        final String indexUserDescription = indexUserDescription( descriptor, providerDescriptor );\n-        IndexPopulator populator = populatorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig );\n-        IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n-\n-        FailedIndexProxyFactory failureDelegateFactory = new FailedPopulatingIndexProxyFactory(\n-                indexMeta,\n-                populator,\n-                indexUserDescription,\n-                new IndexCountsRemover( storeView, ruleId ),\n-                logProvider );\n-\n-        MultipleIndexPopulator.IndexPopulation indexPopulation = populationJob\n-                .addPopulator( populator, ruleId, indexMeta, indexUserDescription, flipper, failureDelegateFactory );\n-        PopulatingIndexProxy populatingIndex = new PopulatingIndexProxy( indexMeta, populationJob, indexPopulation );\n-\n-        flipper.flipTo( populatingIndex );\n-\n-        // Prepare for flipping to online mode\n-        flipper.setFlipTarget( () ->\n-        {\n-            monitor.populationCompleteOn( descriptor );\n-            OnlineIndexProxy onlineProxy =\n-                    new OnlineIndexProxy(\n-                            ruleId,\n-                            indexMeta,\n-                            onlineAccessorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig ),\n-                            storeView,\n-                            true );\n-            if ( flipToTentative )\n-            {\n-                return new TentativeConstraintIndexProxy( flipper, onlineProxy );\n-            }\n-            return onlineProxy;\n-        } );\n-\n-        return new ContractCheckingIndexProxy( flipper, false );\n-    }\n-\n-    IndexProxy createRecoveringIndexProxy( long ruleId, SchemaIndexDescriptor descriptor,\n-            IndexProvider.Descriptor providerDescriptor )\n-    {\n-        IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n-        IndexProxy proxy = new RecoveringIndexProxy( indexMeta );\n-        return new ContractCheckingIndexProxy( proxy, true );\n-    }\n-\n-    IndexProxy createOnlineIndexProxy( long ruleId,\n-            SchemaIndexDescriptor descriptor,\n-            IndexProvider.Descriptor providerDescriptor )\n+  private final IndexSamplingConfig samplingConfig;\n+  private final IndexStoreView storeView;\n+  private final IndexProviderMap providerMap;\n+  private final TokenNameLookup tokenNameLookup;\n+  private final LogProvider logProvider;\n+\n+  IndexProxyCreator(IndexSamplingConfig samplingConfig,\n+                    IndexStoreView storeView,\n+                    IndexProviderMap providerMap,\n+                    TokenNameLookup tokenNameLookup,\n+                    LogProvider logProvider)\n+  {\n+    this.samplingConfig = samplingConfig;\n+    this.storeView = storeView;\n+    this.providerMap = providerMap;\n+    this.tokenNameLookup = tokenNameLookup;\n+    this.logProvider = logProvider;\n+  }\n+\n+  IndexProxy createPopulatingIndexProxy(final long ruleId,\n+                                        final SchemaIndexDescriptor descriptor,\n+                                        final IndexProvider.Descriptor providerDescriptor,\n+                                        final boolean flipToTentative,\n+                                        final IndexingService.Monitor monitor,\n+                                        final IndexPopulationJob populationJob)\n+  {\n+    final FlippableIndexProxy flipper = new FlippableIndexProxy();\n+\n+    final String indexUserDescription = indexUserDescription(descriptor, providerDescriptor);\n+    IndexPopulator populator = populatorFromProvider(providerDescriptor, ruleId, descriptor, samplingConfig);\n+    IndexMeta indexMeta = indexMetaFromProvider(ruleId, providerDescriptor, descriptor);\n+\n+    FailedIndexProxyFactory failureDelegateFactory = new FailedPopulatingIndexProxyFactory(\n+        indexMeta,\n+        populator,\n+        indexUserDescription,\n+        new IndexCountsRemover(storeView, ruleId),\n+        logProvider);\n+\n+    MultipleIndexPopulator.IndexPopulation indexPopulation = populationJob\n+        .addPopulator(populator, ruleId, indexMeta, indexUserDescription, flipper, failureDelegateFactory);\n+    PopulatingIndexProxy populatingIndex = new PopulatingIndexProxy(indexMeta, populationJob, indexPopulation);\n+\n+    flipper.flipTo(populatingIndex);\n+\n+    // Prepare for flipping to online mode\n+    flipper.setFlipTarget(() ->\n     {\n-        try\n-        {\n-            IndexAccessor onlineAccessor =\n-                    onlineAccessorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig );\n-            IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n-            IndexProxy proxy;\n-            proxy = new OnlineIndexProxy( ruleId, indexMeta, onlineAccessor, storeView, false );\n-            proxy = new ContractCheckingIndexProxy( proxy, true );\n-            return proxy;\n-        }\n-        catch ( IOException e )\n-        {\n-            logProvider.getLog( getClass() ).error( \"Failed to open index: \" + ruleId +\n-                                                    \" (\" + descriptor.userDescription( tokenNameLookup ) +\n-                                                    \"), requesting re-population.\", e );\n-            return createRecoveringIndexProxy( ruleId, descriptor, providerDescriptor );\n-        }\n-    }\n-\n-    IndexProxy createFailedIndexProxy( long ruleId,\n-            SchemaIndexDescriptor descriptor,\n-            IndexProvider.Descriptor providerDescriptor,\n-            IndexPopulationFailure populationFailure )\n+      monitor.populationCompleteOn(descriptor);\n+      OnlineIndexProxy onlineProxy =\n+          new OnlineIndexProxy(\n+              ruleId,\n+              indexMeta,\n+              onlineAccessorFromProvider(providerDescriptor, ruleId, descriptor, samplingConfig),\n+              storeView,\n+              true);\n+      if (flipToTentative)\n+      {\n+        return new TentativeConstraintIndexProxy(flipper, onlineProxy);\n+      }\n+      return onlineProxy;\n+    });\n+\n+    return new ContractCheckingIndexProxy(flipper, false);\n+  }\n+\n+  IndexProxy createRecoveringIndexProxy(long ruleId, SchemaIndexDescriptor descriptor,\n+                                        IndexProvider.Descriptor providerDescriptor)\n+  {\n+    IndexMeta indexMeta = indexMetaFromProvider(ruleId, providerDescriptor, descriptor);\n+    IndexProxy proxy = new RecoveringIndexProxy(indexMeta);\n+    return new ContractCheckingIndexProxy(proxy, true);\n+  }\n+\n+  IndexProxy createOnlineIndexProxy(long ruleId,\n+                                    SchemaIndexDescriptor descriptor,\n+                                    IndexProvider.Descriptor providerDescriptor)\n+  {\n+    try\n     {\n-        IndexPopulator indexPopulator = populatorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig );\n-        IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n-        String indexUserDescription = indexUserDescription( descriptor, providerDescriptor );\n-        IndexProxy proxy;\n-        proxy = new FailedIndexProxy(\n-                indexMeta,\n-                indexUserDescription,\n-                indexPopulator,\n-                populationFailure,\n-                new IndexCountsRemover( storeView, ruleId ),\n-                logProvider );\n-        proxy = new ContractCheckingIndexProxy( proxy, true );\n-        return proxy;\n-    }\n-\n-    private String indexUserDescription( final SchemaIndexDescriptor descriptor,\n-                                         final IndexProvider.Descriptor providerDescriptor )\n-    {\n-        return format( \"%s [provider: %s]\",\n-                descriptor.schema().userDescription( tokenNameLookup ), providerDescriptor.toString() );\n-    }\n-\n-    private IndexPopulator populatorFromProvider( IndexProvider.Descriptor providerDescriptor, long ruleId,\n-                                                  SchemaIndexDescriptor descriptor, IndexSamplingConfig samplingConfig )\n-    {\n-        IndexProvider indexProvider = providerMap.lookup( providerDescriptor );\n-        return indexProvider.getPopulator( ruleId, descriptor, samplingConfig );\n-    }\n-\n-    private IndexAccessor onlineAccessorFromProvider( IndexProvider.Descriptor providerDescriptor,\n-                                                      long ruleId, SchemaIndexDescriptor descriptor,\n-                                                      IndexSamplingConfig samplingConfig ) throws IOException\n-    {\n-        IndexProvider indexProvider = providerMap.lookup( providerDescriptor );\n-        return indexProvider.getOnlineAccessor( ruleId, descriptor, samplingConfig );\n-    }\n-\n-    private IndexMeta indexMetaFromProvider( long ruleId, IndexProvider.Descriptor providerDescriptor, SchemaIndexDescriptor schemaIndexDescriptor )\n+      IndexAccessor onlineAccessor =\n+          onlineAccessorFromProvider(providerDescriptor, ruleId, descriptor, samplingConfig);\n+      IndexMeta indexMeta = indexMetaFromProvider(ruleId, providerDescriptor, descriptor);\n+      IndexProxy proxy;\n+      proxy = new OnlineIndexProxy(ruleId, indexMeta, onlineAccessor, storeView, false);\n+      proxy = new ContractCheckingIndexProxy(proxy, true);\n+      return proxy;\n+    } catch (IOException e)\n     {\n-        IndexCapability indexCapability = providerMap.lookup( providerDescriptor ).getCapability( schemaIndexDescriptor );\n-        return new IndexMeta( ruleId, schemaIndexDescriptor, providerDescriptor, indexCapability );\n+      logProvider.getLog(getClass()).error(\"Failed to open index: \" + ruleId +\n+          \" (\" + descriptor.userDescription(tokenNameLookup) +\n+          \"), requesting re-population.\", e);\n+      return createRecoveringIndexProxy(ruleId, descriptor, providerDescriptor);\n     }\n+  }\n+\n+  IndexProxy createFailedIndexProxy(long ruleId,\n+                                    SchemaIndexDescriptor descriptor,\n+                                    IndexProvider.Descriptor providerDescriptor,\n+                                    IndexPopulationFailure populationFailure)\n+  {\n+    IndexPopulator indexPopulator = populatorFromProvider(providerDescriptor, ruleId, descriptor, samplingConfig);\n+    IndexMeta indexMeta = indexMetaFromProvider(ruleId, providerDescriptor, descriptor);\n+    String indexUserDescription = indexUserDescription(descriptor, providerDescriptor);\n+    IndexProxy proxy;\n+    proxy = new FailedIndexProxy(\n+        indexMeta,\n+        indexUserDescription,\n+        indexPopulator,\n+        populationFailure,\n+        new IndexCountsRemover(storeView, ruleId),\n+        logProvider);\n+    proxy = new ContractCheckingIndexProxy(proxy, true);\n+    return proxy;\n+  }\n+\n+  private String indexUserDescription(final SchemaIndexDescriptor descriptor,\n+                                      final IndexProvider.Descriptor providerDescriptor)\n+  {\n+    return format(\"%s [provider: %s]\",\n+        descriptor.schema().userDescription(tokenNameLookup), providerDescriptor.toString());\n+  }\n+\n+  private IndexPopulator populatorFromProvider(IndexProvider.Descriptor providerDescriptor, long ruleId,\n+                                               SchemaIndexDescriptor descriptor, IndexSamplingConfig samplingConfig)\n+  {\n+    IndexProvider indexProvider = providerMap.lookup(providerDescriptor);\n+    return indexProvider.getPopulator(ruleId, descriptor, samplingConfig);\n+  }\n+\n+  private IndexAccessor onlineAccessorFromProvider(IndexProvider.Descriptor providerDescriptor,\n+                                                   long ruleId, SchemaIndexDescriptor descriptor,\n+                                                   IndexSamplingConfig samplingConfig) throws IOException\n+  {\n+    IndexProvider indexProvider = providerMap.lookup(providerDescriptor);\n+    return indexProvider.getOnlineAccessor(ruleId, descriptor, samplingConfig);\n+  }\n+\n+  private IndexMeta indexMetaFromProvider(long ruleId, IndexProvider.Descriptor providerDescriptor, SchemaIndexDescriptor schemaIndexDescriptor)\n+  {\n+    IndexCapability indexCapability = providerMap.lookup(providerDescriptor).getCapability(schemaIndexDescriptor);\n+    return new IndexMeta(ruleId, schemaIndexDescriptor, providerDescriptor, indexCapability);\n+  }\n }\n",
            "diff_size": 200
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 263).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3263/IndexProxyCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3263/IndexProxyCreator.java\nindex d934252ec44..a75a9ca4810 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3263/IndexProxyCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3263/IndexProxyCreator.java\n@@ -56,51 +56,33 @@ class IndexProxyCreator\n         this.logProvider = logProvider;\n     }\n \n-    IndexProxy createPopulatingIndexProxy( final long ruleId,\n-            final SchemaIndexDescriptor descriptor,\n-            final IndexProvider.Descriptor providerDescriptor,\n-            final boolean flipToTentative,\n-            final IndexingService.Monitor monitor,\n-            final IndexPopulationJob populationJob )\n+    IndexProxy createPopulatingIndexProxy( final long ruleId, final SchemaIndexDescriptor descriptor, final IndexProvider.Descriptor providerDescriptor, final boolean flipToTentative, final IndexingService.Monitor monitor, final IndexPopulationJob populationJob )\n     {\n         final FlippableIndexProxy flipper = new FlippableIndexProxy();\n \n         final String indexUserDescription = indexUserDescription( descriptor, providerDescriptor );\n         IndexPopulator populator = populatorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig );\n         IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n-\n-        FailedIndexProxyFactory failureDelegateFactory = new FailedPopulatingIndexProxyFactory(\n-                indexMeta,\n-                populator,\n-                indexUserDescription,\n-                new IndexCountsRemover( storeView, ruleId ),\n-                logProvider );\n-\n-        MultipleIndexPopulator.IndexPopulation indexPopulation = populationJob\n-                .addPopulator( populator, ruleId, indexMeta, indexUserDescription, flipper, failureDelegateFactory );\n-        PopulatingIndexProxy populatingIndex = new PopulatingIndexProxy( indexMeta, populationJob, indexPopulation );\n-\n-        flipper.flipTo( populatingIndex );\n+FailedIndexProxyFactory failureDelegateFactory = new FailedPopulatingIndexProxyFactory( indexMeta, populator, indexUserDescription, new IndexCountsRemover( storeView, ruleId ), logProvider );\n+MultipleIndexPopulator.IndexPopulation indexPopulation = populationJob.addPopulator( populator, ruleId, indexMeta, indexUserDescription, flipper, failureDelegateFactory );\n+PopulatingIndexProxy populatingIndex = new PopulatingIndexProxy( indexMeta, populationJob, indexPopulation );\n+flipper.flipTo( populatingIndex );\n \n         // Prepare for flipping to online mode\n         flipper.setFlipTarget( () ->\n         {\n             monitor.populationCompleteOn( descriptor );\n-            OnlineIndexProxy onlineProxy =\n-                    new OnlineIndexProxy(\n-                            ruleId,\n-                            indexMeta,\n-                            onlineAccessorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig ),\n-                            storeView,\n+            OnlineIndexProxy onlineProxy = new OnlineIndexProxy( ruleId, indexMeta,\n+                            onlineAccessorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig ), storeView,\n                             true );\n-            if ( flipToTentative )\n+if ( flipToTentative )\n             {\n                 return new TentativeConstraintIndexProxy( flipper, onlineProxy );\n             }\n-            return onlineProxy;\n-        } );\n \n-        return new ContractCheckingIndexProxy( flipper, false );\n+return onlineProxy;\n+        } );\n+return new ContractCheckingIndexProxy( flipper, false );\n     }\n \n     IndexProxy createRecoveringIndexProxy( long ruleId, SchemaIndexDescriptor descriptor,\n@@ -117,9 +99,8 @@ class IndexProxyCreator\n     {\n         try\n         {\n-            IndexAccessor onlineAccessor =\n-                    onlineAccessorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig );\n-            IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n+            IndexAccessor onlineAccessor = onlineAccessorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig );\n+IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n             IndexProxy proxy;\n             proxy = new OnlineIndexProxy( ruleId, indexMeta, onlineAccessor, storeView, false );\n             proxy = new ContractCheckingIndexProxy( proxy, true );\n@@ -127,10 +108,8 @@ class IndexProxyCreator\n         }\n         catch ( IOException e )\n         {\n-            logProvider.getLog( getClass() ).error( \"Failed to open index: \" + ruleId +\n-                                                    \" (\" + descriptor.userDescription( tokenNameLookup ) +\n-                                                    \"), requesting re-population.\", e );\n-            return createRecoveringIndexProxy( ruleId, descriptor, providerDescriptor );\n+            logProvider.getLog( getClass() ).error( \"Failed to open index: \" + ruleId + \" (\" + descriptor.userDescription( tokenNameLookup ) + \"), requesting re-population.\", e );\n+return createRecoveringIndexProxy( ruleId, descriptor, providerDescriptor );\n         }\n     }\n \n@@ -143,35 +122,26 @@ class IndexProxyCreator\n         IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n         String indexUserDescription = indexUserDescription( descriptor, providerDescriptor );\n         IndexProxy proxy;\n-        proxy = new FailedIndexProxy(\n-                indexMeta,\n-                indexUserDescription,\n-                indexPopulator,\n-                populationFailure,\n-                new IndexCountsRemover( storeView, ruleId ),\n-                logProvider );\n-        proxy = new ContractCheckingIndexProxy( proxy, true );\n+        proxy = new FailedIndexProxy( indexMeta, indexUserDescription, indexPopulator, populationFailure, new IndexCountsRemover( storeView, ruleId ), logProvider );\n+proxy = new ContractCheckingIndexProxy( proxy, true );\n         return proxy;\n     }\n \n-    private String indexUserDescription( final SchemaIndexDescriptor descriptor,\n-                                         final IndexProvider.Descriptor providerDescriptor )\n-    {\n+    private String indexUserDescription( final SchemaIndexDescriptor descriptor, final IndexProvider.Descriptor providerDescriptor )\n+{\n         return format( \"%s [provider: %s]\",\n                 descriptor.schema().userDescription( tokenNameLookup ), providerDescriptor.toString() );\n     }\n \n-    private IndexPopulator populatorFromProvider( IndexProvider.Descriptor providerDescriptor, long ruleId,\n-                                                  SchemaIndexDescriptor descriptor, IndexSamplingConfig samplingConfig )\n-    {\n+    private IndexPopulator populatorFromProvider( IndexProvider.Descriptor providerDescriptor, long ruleId, SchemaIndexDescriptor descriptor, IndexSamplingConfig samplingConfig )\n+{\n         IndexProvider indexProvider = providerMap.lookup( providerDescriptor );\n         return indexProvider.getPopulator( ruleId, descriptor, samplingConfig );\n     }\n \n-    private IndexAccessor onlineAccessorFromProvider( IndexProvider.Descriptor providerDescriptor,\n-                                                      long ruleId, SchemaIndexDescriptor descriptor,\n+    private IndexAccessor onlineAccessorFromProvider( IndexProvider.Descriptor providerDescriptor, long ruleId, SchemaIndexDescriptor descriptor,\n                                                       IndexSamplingConfig samplingConfig ) throws IOException\n-    {\n+{\n         IndexProvider indexProvider = providerMap.lookup( providerDescriptor );\n         return indexProvider.getOnlineAccessor( ruleId, descriptor, samplingConfig );\n     }\n@@ -181,4 +151,4 @@ class IndexProxyCreator\n         IndexCapability indexCapability = providerMap.lookup( providerDescriptor ).getCapability( schemaIndexDescriptor );\n         return new IndexMeta( ruleId, schemaIndexDescriptor, providerDescriptor, indexCapability );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 263).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 211).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "column": "86",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3263/IndexProxyCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3263/IndexProxyCreator.java\nindex d934252ec44..8bfbfab1f1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3263/IndexProxyCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3263/IndexProxyCreator.java\n@@ -20,7 +20,6 @@\n package org.neo4j.kernel.impl.api.index;\n \n import java.io.IOException;\n-\n import org.neo4j.internal.kernel.api.IndexCapability;\n import org.neo4j.internal.kernel.api.TokenNameLookup;\n import org.neo4j.kernel.api.index.IndexAccessor;\n@@ -29,12 +28,12 @@ import org.neo4j.kernel.api.index.IndexProvider;\n import org.neo4j.kernel.api.schema.index.SchemaIndexDescriptor;\n import org.neo4j.kernel.impl.api.index.sampling.IndexSamplingConfig;\n import org.neo4j.logging.LogProvider;\n-\n import static java.lang.String.format;\n \n /**\n  * Helper class of {@link IndexingService}. Used mainly as factory of index proxies.\n  */\n+\n class IndexProxyCreator\n {\n     private final IndexSamplingConfig samplingConfig;\n@@ -43,11 +42,7 @@ class IndexProxyCreator\n     private final TokenNameLookup tokenNameLookup;\n     private final LogProvider logProvider;\n \n-    IndexProxyCreator( IndexSamplingConfig samplingConfig,\n-            IndexStoreView storeView,\n-            IndexProviderMap providerMap,\n-            TokenNameLookup tokenNameLookup,\n-            LogProvider logProvider )\n+    IndexProxyCreator( IndexSamplingConfig samplingConfig, IndexStoreView storeView, IndexProviderMap providerMap, TokenNameLookup tokenNameLookup, LogProvider logProvider )\n     {\n         this.samplingConfig = samplingConfig;\n         this.storeView = storeView;\n@@ -56,69 +51,44 @@ class IndexProxyCreator\n         this.logProvider = logProvider;\n     }\n \n-    IndexProxy createPopulatingIndexProxy( final long ruleId,\n-            final SchemaIndexDescriptor descriptor,\n-            final IndexProvider.Descriptor providerDescriptor,\n-            final boolean flipToTentative,\n-            final IndexingService.Monitor monitor,\n-            final IndexPopulationJob populationJob )\n+    IndexProxy createPopulatingIndexProxy( final long ruleId, final SchemaIndexDescriptor descriptor, final IndexProvider.Descriptor providerDescriptor, final boolean flipToTentative, final IndexingService.Monitor monitor, final IndexPopulationJob populationJob )\n     {\n         final FlippableIndexProxy flipper = new FlippableIndexProxy();\n-\n         final String indexUserDescription = indexUserDescription( descriptor, providerDescriptor );\n         IndexPopulator populator = populatorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig );\n         IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n-\n-        FailedIndexProxyFactory failureDelegateFactory = new FailedPopulatingIndexProxyFactory(\n-                indexMeta,\n-                populator,\n-                indexUserDescription,\n-                new IndexCountsRemover( storeView, ruleId ),\n-                logProvider );\n-\n-        MultipleIndexPopulator.IndexPopulation indexPopulation = populationJob\n-                .addPopulator( populator, ruleId, indexMeta, indexUserDescription, flipper, failureDelegateFactory );\n+        FailedIndexProxyFactory failureDelegateFactory = new FailedPopulatingIndexProxyFactory( indexMeta, populator, indexUserDescription, new IndexCountsRemover( storeView, ruleId ), logProvider );\n+        MultipleIndexPopulator.IndexPopulation indexPopulation = populationJob.addPopulator( populator, ruleId, indexMeta, indexUserDescription, flipper, failureDelegateFactory );\n         PopulatingIndexProxy populatingIndex = new PopulatingIndexProxy( indexMeta, populationJob, indexPopulation );\n-\n         flipper.flipTo( populatingIndex );\n \n         // Prepare for flipping to online mode\n         flipper.setFlipTarget( () ->\n-        {\n-            monitor.populationCompleteOn( descriptor );\n-            OnlineIndexProxy onlineProxy =\n-                    new OnlineIndexProxy(\n-                            ruleId,\n-                            indexMeta,\n-                            onlineAccessorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig ),\n-                            storeView,\n-                            true );\n-            if ( flipToTentative )\n-            {\n-                return new TentativeConstraintIndexProxy( flipper, onlineProxy );\n-            }\n-            return onlineProxy;\n-        } );\n-\n+                               {\n+                                   monitor.populationCompleteOn( descriptor );\n+                                   OnlineIndexProxy onlineProxy = new OnlineIndexProxy( ruleId, indexMeta, onlineAccessorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig ), storeView, true );\n+                                   if ( flipToTentative )\n+                                   {\n+                                       return new TentativeConstraintIndexProxy( flipper, onlineProxy );\n+                                   }\n+\n+                                   return onlineProxy;\n+                               } );\n         return new ContractCheckingIndexProxy( flipper, false );\n     }\n \n-    IndexProxy createRecoveringIndexProxy( long ruleId, SchemaIndexDescriptor descriptor,\n-            IndexProvider.Descriptor providerDescriptor )\n+    IndexProxy createRecoveringIndexProxy( long ruleId, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor )\n     {\n         IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n         IndexProxy proxy = new RecoveringIndexProxy( indexMeta );\n         return new ContractCheckingIndexProxy( proxy, true );\n     }\n \n-    IndexProxy createOnlineIndexProxy( long ruleId,\n-            SchemaIndexDescriptor descriptor,\n-            IndexProvider.Descriptor providerDescriptor )\n+    IndexProxy createOnlineIndexProxy( long ruleId, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor )\n     {\n         try\n         {\n-            IndexAccessor onlineAccessor =\n-                    onlineAccessorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig );\n+            IndexAccessor onlineAccessor = onlineAccessorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig );\n             IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n             IndexProxy proxy;\n             proxy = new OnlineIndexProxy( ruleId, indexMeta, onlineAccessor, storeView, false );\n@@ -127,50 +97,34 @@ class IndexProxyCreator\n         }\n         catch ( IOException e )\n         {\n-            logProvider.getLog( getClass() ).error( \"Failed to open index: \" + ruleId +\n-                                                    \" (\" + descriptor.userDescription( tokenNameLookup ) +\n-                                                    \"), requesting re-population.\", e );\n+            logProvider.getLog( getClass() ).error( \"Failed to open index: \" + ruleId+ \" (\" + descriptor.userDescription( tokenNameLookup ) + \"), requesting re-population.\", e );\n             return createRecoveringIndexProxy( ruleId, descriptor, providerDescriptor );\n         }\n     }\n \n-    IndexProxy createFailedIndexProxy( long ruleId,\n-            SchemaIndexDescriptor descriptor,\n-            IndexProvider.Descriptor providerDescriptor,\n-            IndexPopulationFailure populationFailure )\n+    IndexProxy createFailedIndexProxy( long ruleId, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor, IndexPopulationFailure populationFailure )\n     {\n         IndexPopulator indexPopulator = populatorFromProvider( providerDescriptor, ruleId, descriptor, samplingConfig );\n         IndexMeta indexMeta = indexMetaFromProvider( ruleId, providerDescriptor, descriptor );\n         String indexUserDescription = indexUserDescription( descriptor, providerDescriptor );\n         IndexProxy proxy;\n-        proxy = new FailedIndexProxy(\n-                indexMeta,\n-                indexUserDescription,\n-                indexPopulator,\n-                populationFailure,\n-                new IndexCountsRemover( storeView, ruleId ),\n-                logProvider );\n+        proxy = new FailedIndexProxy( indexMeta, indexUserDescription, indexPopulator, populationFailure, new IndexCountsRemover( storeView, ruleId ), logProvider );\n         proxy = new ContractCheckingIndexProxy( proxy, true );\n         return proxy;\n     }\n \n-    private String indexUserDescription( final SchemaIndexDescriptor descriptor,\n-                                         final IndexProvider.Descriptor providerDescriptor )\n+    private String indexUserDescription( final SchemaIndexDescriptor descriptor, final IndexProvider.Descriptor providerDescriptor )\n     {\n-        return format( \"%s [provider: %s]\",\n-                descriptor.schema().userDescription( tokenNameLookup ), providerDescriptor.toString() );\n+        return format( \"%s [provider: %s]\", descriptor.schema().userDescription( tokenNameLookup ), providerDescriptor.toString() );\n     }\n \n-    private IndexPopulator populatorFromProvider( IndexProvider.Descriptor providerDescriptor, long ruleId,\n-                                                  SchemaIndexDescriptor descriptor, IndexSamplingConfig samplingConfig )\n+    private IndexPopulator populatorFromProvider( IndexProvider.Descriptor providerDescriptor, long ruleId, SchemaIndexDescriptor descriptor, IndexSamplingConfig samplingConfig )\n     {\n         IndexProvider indexProvider = providerMap.lookup( providerDescriptor );\n         return indexProvider.getPopulator( ruleId, descriptor, samplingConfig );\n     }\n \n-    private IndexAccessor onlineAccessorFromProvider( IndexProvider.Descriptor providerDescriptor,\n-                                                      long ruleId, SchemaIndexDescriptor descriptor,\n-                                                      IndexSamplingConfig samplingConfig ) throws IOException\n+    private IndexAccessor onlineAccessorFromProvider( IndexProvider.Descriptor providerDescriptor, long ruleId, SchemaIndexDescriptor descriptor, IndexSamplingConfig samplingConfig ) throws IOException\n     {\n         IndexProvider indexProvider = providerMap.lookup( providerDescriptor );\n         return indexProvider.getOnlineAccessor( ruleId, descriptor, samplingConfig );\n@@ -181,4 +135,4 @@ class IndexProxyCreator\n         IndexCapability indexCapability = providerMap.lookup( providerDescriptor ).getCapability( schemaIndexDescriptor );\n         return new IndexMeta( ruleId, schemaIndexDescriptor, providerDescriptor, indexCapability );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 73
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}