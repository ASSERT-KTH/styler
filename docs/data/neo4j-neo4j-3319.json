{
    "project_name": "neo4j-neo4j",
    "error_id": "3319",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "154",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "57",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3319/EagerQueryExecution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3319/EagerQueryExecution.java\nindex 00f72bdae06..1fff5b8fdb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3319/EagerQueryExecution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3319/EagerQueryExecution.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cypher.internal.javacompat;\n \n import java.util.Arrays;\n@@ -40,21 +41,20 @@ class EagerQueryExecution extends EagerQuerySubscription implements QueryExecuti\n     private final QueryExecution innerExecution;\n     private final List<String> fieldNames;\n     private final QueryStatistics queryStatistics;\n-    private final List<Map<String,Object>> queryResult;\n+    private final List<Map<String, Object>> queryResult;\n \n-    EagerQueryExecution( QuerySubscriber subscriber, QueryExecution innerExecution, QueryStatistics queryStatistics, List<Map<String, Object>> queryResult )\n+    EagerQueryExecution(QuerySubscriber subscriber, QueryExecution innerExecution, QueryStatistics queryStatistics, List<Map<String, Object>> queryResult)\n     {\n-        super( subscriber );\n+        super(subscriber);\n         this.innerExecution = innerExecution;\n-        this.fieldNames = Arrays.asList( innerExecution.fieldNames() );\n+        this.fieldNames = Arrays.asList(innerExecution.fieldNames());\n         this.queryStatistics = queryStatistics;\n         this.queryResult = queryResult;\n \n         try\n         {\n-            subscriber.onResult( fieldNames.size() );\n-        }\n-        catch ( Exception e )\n+            subscriber.onResult(fieldNames.size());\n+        } catch (Exception e)\n         {\n             error = e;\n         }\n@@ -103,13 +103,13 @@ class EagerQueryExecution extends EagerQuerySubscription implements QueryExecuti\n     }\n \n     @Override\n-    protected void streamRecordToSubscriber( int servedRecords ) throws Exception\n+    protected void streamRecordToSubscriber(int servedRecords) throws Exception\n     {\n-        Map<String,Object> currentRow = queryResult.get( servedRecords );\n+        Map<String, Object> currentRow = queryResult.get(servedRecords);\n         int fieldNamesSize = fieldNames.size();\n-        for ( int i = 0; i < fieldNamesSize; i++ )\n+        for (int i = 0; i < fieldNamesSize; i++)\n         {\n-            subscriber.onField( i, Values.of( currentRow.get( fieldNames.get( i ) ) ) );\n+            subscriber.onField(i, Values.of(currentRow.get(fieldNames.get(i))));\n         }\n     }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}