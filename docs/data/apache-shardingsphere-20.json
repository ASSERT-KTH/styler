{
    "project_name": "apache-shardingsphere",
    "error_id": "20",
    "information": {
        "errors": [
            {
                "line": "31",
                "column": "1",
                "severity": "warning",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n/**\n * Memory channel.\n */\npublic final class MemoryChannel implements Channel {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/20/MemoryChannel.java\nindex 4420411dec9..3fd7e776a00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/20/MemoryChannel.java\n@@ -27,7 +27,6 @@ import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.TimeUnit;\n \n-\n /**\n  * Memory channel.\n  */\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/20/MemoryChannel.java\nindex 4420411dec9..644d9c46369 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/20/MemoryChannel.java\n@@ -32,26 +32,26 @@ import java.util.concurrent.TimeUnit;\n  * Memory channel.\n  */\n public final class MemoryChannel implements Channel {\n-    \n+\n     private static final int PUSH_TIMEOUT = ScalingContext.getInstance().getServerConfiguration().getPushTimeout();\n-    \n+\n     private final BlockingQueue<Record> queue = new ArrayBlockingQueue<>(ScalingContext.getInstance().getServerConfiguration().getBlockQueueSize());\n-    \n+\n     private final AckCallback ackCallback;\n-    \n+\n     private List<Record> toBeAcknowledgeRecords = new LinkedList<>();\n-    \n+\n     public MemoryChannel(final AckCallback ackCallback) {\n         this.ackCallback = ackCallback;\n     }\n-    \n+\n     @Override\n     public void pushRecord(final Record dataRecord) throws InterruptedException {\n         if (!queue.offer(dataRecord, PUSH_TIMEOUT, TimeUnit.HOURS)) {\n             throw new RuntimeException();\n         }\n     }\n-    \n+\n     @Override\n     public List<Record> fetchRecords(final int batchSize, final int timeout) {\n         List<Record> records = new ArrayList<>(batchSize);\n@@ -70,7 +70,7 @@ public final class MemoryChannel implements Channel {\n         toBeAcknowledgeRecords.addAll(records);\n         return records;\n     }\n-    \n+\n     @Override\n     public void ack() {\n         if (toBeAcknowledgeRecords.size() > 0) {\n@@ -78,7 +78,7 @@ public final class MemoryChannel implements Channel {\n             toBeAcknowledgeRecords.clear();\n         }\n     }\n-    \n+\n     @Override\n     public void close() {\n         queue.clear();\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/20/MemoryChannel.java\nindex 4420411dec9..d99623c0f4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/20/MemoryChannel.java\n@@ -27,7 +27,6 @@ import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.TimeUnit;\n \n-\n /**\n  * Memory channel.\n  */\n@@ -83,4 +82,4 @@ public final class MemoryChannel implements Channel {\n     public void close() {\n         queue.clear();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/20/MemoryChannel.java\nindex 4420411dec9..1d5238b4587 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/20/MemoryChannel.java\n@@ -19,7 +19,6 @@ package org.apache.shardingsphere.shardingscaling.core.execute.executor.channel;\n \n import org.apache.shardingsphere.shardingscaling.core.config.ScalingContext;\n import org.apache.shardingsphere.shardingscaling.core.execute.executor.record.Record;\n-\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n@@ -31,27 +30,29 @@ import java.util.concurrent.TimeUnit;\n /**\n  * Memory channel.\n  */\n+\n+\n public final class MemoryChannel implements Channel {\n-    \n+\n     private static final int PUSH_TIMEOUT = ScalingContext.getInstance().getServerConfiguration().getPushTimeout();\n-    \n+\n     private final BlockingQueue<Record> queue = new ArrayBlockingQueue<>(ScalingContext.getInstance().getServerConfiguration().getBlockQueueSize());\n-    \n+\n     private final AckCallback ackCallback;\n-    \n+\n     private List<Record> toBeAcknowledgeRecords = new LinkedList<>();\n-    \n+\n     public MemoryChannel(final AckCallback ackCallback) {\n         this.ackCallback = ackCallback;\n     }\n-    \n+\n     @Override\n     public void pushRecord(final Record dataRecord) throws InterruptedException {\n         if (!queue.offer(dataRecord, PUSH_TIMEOUT, TimeUnit.HOURS)) {\n             throw new RuntimeException();\n         }\n     }\n-    \n+\n     @Override\n     public List<Record> fetchRecords(final int batchSize, final int timeout) {\n         List<Record> records = new ArrayList<>(batchSize);\n@@ -70,7 +71,7 @@ public final class MemoryChannel implements Channel {\n         toBeAcknowledgeRecords.addAll(records);\n         return records;\n     }\n-    \n+\n     @Override\n     public void ack() {\n         if (toBeAcknowledgeRecords.size() > 0) {\n@@ -78,9 +79,9 @@ public final class MemoryChannel implements Channel {\n             toBeAcknowledgeRecords.clear();\n         }\n     }\n-    \n+\n     @Override\n     public void close() {\n         queue.clear();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/20/MemoryChannel.java\nindex 4420411dec9..3fd7e776a00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/20/MemoryChannel.java\n@@ -27,7 +27,6 @@ import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.TimeUnit;\n \n-\n /**\n  * Memory channel.\n  */\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/20/MemoryChannel.java\nindex 4420411dec9..3fd7e776a00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/20/MemoryChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/20/MemoryChannel.java\n@@ -27,7 +27,6 @@ import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.TimeUnit;\n \n-\n /**\n  * Memory channel.\n  */\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}