{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2559",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2559/IndexProgressor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2559/IndexProgressor.java\nindex c763c3ed7a1..e6405d26975 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2559/IndexProgressor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2559/IndexProgressor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.storageengine.api.schema;\n \n import org.neo4j.internal.kernel.api.IndexQuery;\n@@ -31,127 +32,133 @@ import org.neo4j.values.storable.Value;\n  * In contrast to a cursor, the progressor does not hold value state, but rather attempts to write the next entry to a\n  * Client. The client can them accept the entry, in which case next() returns, or reject it, in which case the\n  * progression continues until an acceptable entry is found or the progression is done.\n- *\n+ * <p>\n  * A Progressor is expected to feed a single client, which is setup for example in the constructor. The typical\n  * interaction goes something like\n- *\n- *   -- query(client) -> INDEX\n- *                       progressor = new Progressor( client )\n- *                       client.initialize( progressor, ... )\n- *\n- *   -- next() --> client\n- *                 client ---- next() --> progressor\n- *                        <-- accept() --\n- *                                 :false\n- *                        <-- accept() --\n- *                                 :false\n- *                        <-- accept() --\n- *                                  :true\n- *                 client <--------------\n- *   <-----------\n+ * <p>\n+ * -- query(client) -> INDEX\n+ * progressor = new Progressor( client )\n+ * client.initialize( progressor, ... )\n+ * <p>\n+ * -- next() --> client\n+ * client ---- next() --> progressor\n+ * <-- accept() --\n+ * :false\n+ * <-- accept() --\n+ * :false\n+ * <-- accept() --\n+ * :true\n+ * client <--------------\n+ * <-----------\n  */\n public interface IndexProgressor extends AutoCloseable\n {\n+  /**\n+   * Progress through the index until the next accepted entry. Entries are feed to a Client, which\n+   * is setup in an implementation specific way.\n+   *\n+   * @return true if an accepted entry was found, false otherwise\n+   */\n+  boolean next();\n+\n+  /**\n+   * Close the progressor and all attached resources. Idempotent.\n+   */\n+  @Override\n+  void close();\n+\n+  /**\n+   * Client which accepts nodes and some of their property values.\n+   */\n+  interface NodeValueClient\n+  {\n     /**\n-     * Progress through the index until the next accepted entry. Entries are feed to a Client, which\n-     * is setup in an implementation specific way.\n+     * Setup the client for progressing using the supplied progressor. The values feed in accept map to the\n+     * propertyIds provided here. Called by index implementation.\n      *\n-     * @return true if an accepted entry was found, false otherwise\n+     * @param descriptor The descriptor\n+     * @param progressor The progressor\n+     * @param query      The query of this progression\n      */\n-    boolean next();\n+    void initialize(SchemaIndexDescriptor descriptor, IndexProgressor progressor,\n+                    IndexQuery[] query);\n \n     /**\n-     * Close the progressor and all attached resources. Idempotent.\n+     * Accept the node id and values of a candidate index entry. Return true if the entry is\n+     * accepted, false otherwise.\n+     *\n+     * @param reference the node id of the candidate index entry\n+     * @param values    the values of the candidate index entry\n+     * @return true if the entry is accepted, false otherwise\n      */\n-    @Override\n-    void close();\n+    boolean acceptNode(long reference, Value... values);\n+\n+    boolean needsValues();\n+  }\n \n+  /**\n+   * Client which accepts nodes and some of their labels.\n+   */\n+  interface NodeLabelClient\n+  {\n     /**\n-     * Client which accepts nodes and some of their property values.\n+     * Setup the client for progressing using the supplied progressor. Called by index implementation.\n+     *\n+     * @param progressor     the progressor\n+     * @param providesLabels true if the progression can provide label information\n+     * @param label          the label to scan for\n      */\n-    interface NodeValueClient\n-    {\n-        /**\n-         * Setup the client for progressing using the supplied progressor. The values feed in accept map to the\n-         * propertyIds provided here. Called by index implementation.\n-         * @param descriptor The descriptor\n-         * @param progressor The progressor\n-         * @param query The query of this progression\n-         */\n-        void initialize( SchemaIndexDescriptor descriptor, IndexProgressor progressor,\n-                         IndexQuery[] query );\n+    void scan(LabelScanValueIndexProgressor progressor, boolean providesLabels, int label);\n \n-        /**\n-         * Accept the node id and values of a candidate index entry. Return true if the entry is\n-         * accepted, false otherwise.\n-         * @param reference the node id of the candidate index entry\n-         * @param values the values of the candidate index entry\n-         * @return true if the entry is accepted, false otherwise\n-         */\n-        boolean acceptNode( long reference, Value... values );\n+    void unionScan(IndexProgressor progressor, boolean providesLabels, int... labels);\n \n-        boolean needsValues();\n-    }\n+    void intersectionScan(IndexProgressor progressor, boolean providesLabels, int... labels);\n \n     /**\n-     * Client which accepts nodes and some of their labels.\n+     * Accept the node id and (some) labels of a candidate index entry. Return true if the entry\n+     * is accepted, false otherwise.\n+     *\n+     * @param reference the node id of the candidate index entry\n+     * @param labels    some labels of the candidate index entry\n+     * @return true if the entry is accepted, false otherwise\n      */\n-    interface NodeLabelClient\n-    {\n-        /**\n-         * Setup the client for progressing using the supplied progressor. Called by index implementation.\n-         * @param progressor the progressor\n-         * @param providesLabels true if the progression can provide label information\n-         * @param label the label to scan for\n-         */\n-        void scan( LabelScanValueIndexProgressor progressor, boolean providesLabels, int label );\n-\n-        void unionScan( IndexProgressor progressor, boolean providesLabels, int... labels );\n-\n-        void intersectionScan( IndexProgressor progressor, boolean providesLabels, int... labels );\n-\n-        /**\n-         * Accept the node id and (some) labels of a candidate index entry. Return true if the entry\n-         * is accepted, false otherwise.\n-         * @param reference the node id of the candidate index entry\n-         * @param labels some labels of the candidate index entry\n-         * @return true if the entry is accepted, false otherwise\n-         */\n-        boolean acceptNode( long reference, LabelSet labels );\n-    }\n+    boolean acceptNode(long reference, LabelSet labels);\n+  }\n \n+  /**\n+   * Client which accepts graph entities (nodes and relationships) and a fuzzy score.\n+   */\n+  interface ExplicitClient\n+  {\n     /**\n-     * Client which accepts graph entities (nodes and relationships) and a fuzzy score.\n+     * Setup the client for progressing using the supplied progressor. Called by index implementation.\n+     *\n+     * @param progressor   the progressor\n+     * @param expectedSize expected number of entries this progressor will feed the client.\n      */\n-    interface ExplicitClient\n-    {\n-        /**\n-         * Setup the client for progressing using the supplied progressor. Called by index implementation.\n-         * @param progressor the progressor\n-         * @param expectedSize expected number of entries this progressor will feed the client.\n-         */\n-        void initialize( ExplicitIndexProgressor progressor, int expectedSize );\n+    void initialize(ExplicitIndexProgressor progressor, int expectedSize);\n \n-        /**\n-         * Accept the entity id and a score. Return true if the entry is accepted, false otherwise\n-         * @param reference the node id of the candidate index entry\n-         * @param score score of the candidate index entry\n-         * @return true if the entry is accepted, false otherwise\n-         */\n-        boolean acceptEntity( long reference, float score );\n-    }\n+    /**\n+     * Accept the entity id and a score. Return true if the entry is accepted, false otherwise\n+     *\n+     * @param reference the node id of the candidate index entry\n+     * @param score     score of the candidate index entry\n+     * @return true if the entry is accepted, false otherwise\n+     */\n+    boolean acceptEntity(long reference, float score);\n+  }\n \n-    IndexProgressor EMPTY = new IndexProgressor()\n+  IndexProgressor EMPTY = new IndexProgressor()\n+  {\n+    @Override\n+    public boolean next()\n     {\n-        @Override\n-        public boolean next()\n-        {\n-            return false;\n-        }\n+      return false;\n+    }\n \n-        @Override\n-        public void close()\n-        {   // no-op\n-        }\n-    };\n+    @Override\n+    public void close()\n+    {   // no-op\n+    }\n+  };\n }\n",
            "diff_size": 153
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2559/IndexProgressor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2559/IndexProgressor.java\nindex c763c3ed7a1..f21a8e2c305 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2559/IndexProgressor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2559/IndexProgressor.java\n@@ -78,10 +78,9 @@ public interface IndexProgressor extends AutoCloseable\n          * @param progressor The progressor\n          * @param query The query of this progression\n          */\n-        void initialize( SchemaIndexDescriptor descriptor, IndexProgressor progressor,\n-                         IndexQuery[] query );\n+        void initialize( SchemaIndexDescriptor descriptor, IndexProgressor progressor, IndexQuery[] query );\n \n-        /**\n+/**\n          * Accept the node id and values of a candidate index entry. Return true if the entry is\n          * accepted, false otherwise.\n          * @param reference the node id of the candidate index entry\n@@ -151,7 +150,8 @@ public interface IndexProgressor extends AutoCloseable\n \n         @Override\n         public void close()\n-        {   // no-op\n+        {\n+    // no-op\n         }\n     };\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}