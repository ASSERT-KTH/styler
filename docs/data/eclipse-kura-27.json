{
    "project_name": "eclipse-kura",
    "error_id": "27",
    "information": {
        "errors": [
            {
                "line": "216",
                "column": "34",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            Enumeration<?> names = props.propertyNames();\n            while (names.hasMoreElements()) {\n                result += (String)names.nextElement() + \" \";\n            }\n        } catch (ClassCastException e) {\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler/27/Configuration.java\nindex f60d4ddb99f..34fe56799bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler/27/Configuration.java\n@@ -213,7 +213,7 @@ public final class Configuration {\n         try {\n             Enumeration<?> names = props.propertyNames();\n             while (names.hasMoreElements()) {\n-                result += (String)names.nextElement() + \" \";\n+                result += (String) names.nextElement() + \" \";\n             }\n         } catch (ClassCastException e) {\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/27/Configuration.java\nindex f60d4ddb99f..c7594f3275a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/27/Configuration.java\n@@ -32,20 +32,21 @@ import java.util.Enumeration;\n \n public final class Configuration {\n \n-    /** Don't let anyone instantiate this class */\n+    /**\n+     * Don't let anyone instantiate this class\n+     */\n     private Configuration() {\n     }\n \n     /**\n      * Gets the implementation property indicated by the specified key.\n      *\n-     * @param      key   the name of the implementation property.\n-     * @return     the string value of the implementation property,\n-     *             or <code>null</code> if there is no property with that key.\n-     *\n-     * @exception  NullPointerException if <code>key</code> is\n-     *             <code>null</code>.\n-     * @exception  IllegalArgumentException if <code>key</code> is empty.\n+     * @param key the name of the implementation property.\n+     * @return the string value of the implementation property,\n+     * or <code>null</code> if there is no property with that key.\n+     * @throws NullPointerException     if <code>key</code> is\n+     *                                  <code>null</code>.\n+     * @throws IllegalArgumentException if <code>key</code> is empty.\n      */\n     public static String getProperty(String key) {\n         return System.getProperty(key);\n@@ -59,26 +60,25 @@ public final class Configuration {\n      */\n     public static String getSystemProperty(final String key) {\n         return AccessController.doPrivileged(new PrivilegedAction<String>() {\n-                public String run() {\n-                    return System.getProperty(key);\n-                }\n-            });\n+            public String run() {\n+                return System.getProperty(key);\n+            }\n+        });\n     }\n \n     /**\n      * Gets the implementation property indicated by the specified key or\n      * returns the specified default value.\n      *\n-     * @param      key   the name of the implementation property.\n-     * @param      def   the default value for the property if not\n-     *                  specified in the configuration files or command\n-     *                  line over rides.\n-     * @return     the string value of the implementation property,\n-     *             or <code>def</code> if there is no property with that key.\n-     *\n-     * @exception  NullPointerException if <code>key</code> is\n-     *             <code>null</code>.\n-     * @exception  IllegalArgumentException if <code>key</code> is empty.\n+     * @param key the name of the implementation property.\n+     * @param def the default value for the property if not\n+     *            specified in the configuration files or command\n+     *            line over rides.\n+     * @return the string value of the implementation property,\n+     * or <code>def</code> if there is no property with that key.\n+     * @throws NullPointerException     if <code>key</code> is\n+     *                                  <code>null</code>.\n+     * @throws IllegalArgumentException if <code>key</code> is empty.\n      */\n     public static String getPropertyDefault(String key, String def) {\n         return System.getProperty(key, def);\n@@ -88,19 +88,17 @@ public final class Configuration {\n      * Gets the implementation property indicated by the specified key or\n      * returns the specified default value as an positive int.\n      *\n-     * @param      key   the name of the implementation property.\n-     * @param      def   the default value for the property if not\n-     *                  specified in the configuration files or command\n-     *                  line over rides.\n-     *\n-     * @return     the int value of the implementation property,\n-     *             or <code>def</code> if there is no property with that key or\n-     *             the config value is not a positive int (zero is not\n-     *             positive).\n-     *\n-     * @exception  NullPointerException if <code>key</code> is\n-     *             <code>null</code>.\n-     * @exception  IllegalArgumentException if <code>key</code> is empty.\n+     * @param key the name of the implementation property.\n+     * @param def the default value for the property if not\n+     *            specified in the configuration files or command\n+     *            line over rides.\n+     * @return the int value of the implementation property,\n+     * or <code>def</code> if there is no property with that key or\n+     * the config value is not a positive int (zero is not\n+     * positive).\n+     * @throws NullPointerException     if <code>key</code> is\n+     *                                  <code>null</code>.\n+     * @throws IllegalArgumentException if <code>key</code> is empty.\n      */\n     public static int getPositiveIntProperty(String key, int def) {\n         int value = Configuration.getIntProperty(key, def);\n@@ -111,17 +109,16 @@ public final class Configuration {\n      * Gets the implementation property indicated by the specified key or\n      * returns the specified default value as an nonzero int.\n      *\n-     * @param      key   the name of the implementation property.\n-     * @param      def   the default value for the property if not\n-     *                  specified in the configuration files or command\n-     *                  line over rides.\n-     * @return     the int value of the implementation property,\n-     *             or <code>def</code> if there is no property with that key or\n-     *             the config value is not an int.\n-     *\n-     * @exception  NullPointerException if <code>key</code> is\n-     *             <code>null</code>.\n-     * @exception  IllegalArgumentException if <code>key</code> is empty.\n+     * @param key the name of the implementation property.\n+     * @param def the default value for the property if not\n+     *            specified in the configuration files or command\n+     *            line over rides.\n+     * @return the int value of the implementation property,\n+     * or <code>def</code> if there is no property with that key or\n+     * the config value is not an int.\n+     * @throws NullPointerException     if <code>key</code> is\n+     *                                  <code>null</code>.\n+     * @throws IllegalArgumentException if <code>key</code> is empty.\n      */\n     public static int getNonNegativeIntProperty(String key, int def) {\n         int value = Configuration.getIntProperty(key, def);\n@@ -132,18 +129,16 @@ public final class Configuration {\n      * Gets the implementation property indicated by the specified key or\n      * returns the specified default value as an int.\n      *\n-     * @param      key   the name of the implementation property.\n-     * @param      def   the default value for the property if not\n-     *                  specified in the configuration files or command\n-     *                  line over rides.\n-     *\n-     * @return     the int value of the implementation property,\n-     *             or <code>def</code> if there is no property with that key or\n-     *             the config value is not an int.\n-     *\n-     * @exception  NullPointerException if <code>key</code> is\n-     *             <code>null</code>.\n-     * @exception  IllegalArgumentException if <code>key</code> is empty.\n+     * @param key the name of the implementation property.\n+     * @param def the default value for the property if not\n+     *            specified in the configuration files or command\n+     *            line over rides.\n+     * @return the int value of the implementation property,\n+     * or <code>def</code> if there is no property with that key or\n+     * the config value is not an int.\n+     * @throws NullPointerException     if <code>key</code> is\n+     *                                  <code>null</code>.\n+     * @throws IllegalArgumentException if <code>key</code> is empty.\n      */\n     public static int getIntProperty(String key, int def) {\n         String value = System.getProperty(key);\n@@ -160,18 +155,16 @@ public final class Configuration {\n      * Gets the implementation property indicated by the specified key or\n      * returns the specified default value as a boolean.\n      *\n-     * @param      key   the name of the implementation property.\n-     * @param      def   the default value for the property if not\n-     *                  specified in the configuration files or command\n-     *                  line over rides.\n-     *\n-     * @return     the boolean value of the implementation property,\n-     *             or <code>def</code> if there is no property with that key or\n-     *             the config value is not a boolean.\n-     *\n-     * @exception  NullPointerException if <code>key</code> is\n-     *             <code>null</code>.\n-     * @exception  IllegalArgumentException if <code>key</code> is empty.\n+     * @param key the name of the implementation property.\n+     * @param def the default value for the property if not\n+     *            specified in the configuration files or command\n+     *            line over rides.\n+     * @return the boolean value of the implementation property,\n+     * or <code>def</code> if there is no property with that key or\n+     * the config value is not a boolean.\n+     * @throws NullPointerException     if <code>key</code> is\n+     *                                  <code>null</code>.\n+     * @throws IllegalArgumentException if <code>key</code> is empty.\n      */\n     public static boolean getBoolProperty(String key, boolean def) {\n         String value = System.getProperty(key);\n@@ -187,12 +180,11 @@ public final class Configuration {\n     /**\n      * Set the implementation property indicated by the specified key.\n      *\n-     * @param      key   the name of the implementation property.\n-     * @param      val   the value of the implementation property.\n-     *\n-     * @exception  NullPointerException if <code>key</code> is\n-     *             <code>null</code>.\n-     * @exception  IllegalArgumentException if <code>key</code> is empty.\n+     * @param key the name of the implementation property.\n+     * @param val the value of the implementation property.\n+     * @throws NullPointerException     if <code>key</code> is\n+     *                                  <code>null</code>.\n+     * @throws IllegalArgumentException if <code>key</code> is empty.\n      */\n     public static void setProperty(String key, String val) {\n         System.setProperty(key, val);\n@@ -201,19 +193,19 @@ public final class Configuration {\n     /**\n      * Gets all system properties names.\n      *\n-     * @return  the string contains space separated system properties list\n+     * @return the string contains space separated system properties list\n      */\n     public static String getSystemPropertiesNames() {\n         Properties props = AccessController.doPrivileged(new PrivilegedAction<Properties>() {\n-                public Properties run() {\n-                    return System.getProperties();\n-                }\n-            });\n+            public Properties run() {\n+                return System.getProperties();\n+            }\n+        });\n         String result = new String();\n         try {\n             Enumeration<?> names = props.propertyNames();\n             while (names.hasMoreElements()) {\n-                result += (String)names.nextElement() + \" \";\n+                result += (String) names.nextElement() + \" \";\n             }\n         } catch (ClassCastException e) {\n         }\n",
            "diff_size": 84
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "218",
                    "column": "34",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/27/Configuration.java\nindex f60d4ddb99f..6384503a9db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/27/Configuration.java\n@@ -59,7 +59,8 @@ public final class Configuration {\n      */\n     public static String getSystemProperty(final String key) {\n         return AccessController.doPrivileged(new PrivilegedAction<String>() {\n-                public String run() {\n+\n+    public String run() {\n                     return System.getProperty(key);\n                 }\n             });\n@@ -205,11 +206,12 @@ public final class Configuration {\n      */\n     public static String getSystemPropertiesNames() {\n         Properties props = AccessController.doPrivileged(new PrivilegedAction<Properties>() {\n-                public Properties run() {\n+\n+    public Properties run() {\n                     return System.getProperties();\n                 }\n             });\n-        String result = new String();\n+String result = new String();\n         try {\n             Enumeration<?> names = props.propertyNames();\n             while (names.hasMoreElements()) {\n@@ -219,4 +221,4 @@ public final class Configuration {\n         }\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/27/Configuration.java\nindex f60d4ddb99f..a05069e73a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/27/Configuration.java\n@@ -33,6 +33,7 @@ import java.util.Enumeration;\n public final class Configuration {\n \n     /** Don't let anyone instantiate this class */\n+\n     private Configuration() {\n     }\n \n@@ -47,6 +48,7 @@ public final class Configuration {\n      *             <code>null</code>.\n      * @exception  IllegalArgumentException if <code>key</code> is empty.\n      */\n+\n     public static String getProperty(String key) {\n         return System.getProperty(key);\n     }\n@@ -57,12 +59,15 @@ public final class Configuration {\n      * @param key property key\n      * @return property value\n      */\n+\n     public static String getSystemProperty(final String key) {\n         return AccessController.doPrivileged(new PrivilegedAction<String>() {\n-                public String run() {\n-                    return System.getProperty(key);\n-                }\n-            });\n+\n+\n+                   public String run() {\n+                       return System.getProperty(key);\n+                   }\n+               });\n     }\n \n     /**\n@@ -80,6 +85,7 @@ public final class Configuration {\n      *             <code>null</code>.\n      * @exception  IllegalArgumentException if <code>key</code> is empty.\n      */\n+\n     public static String getPropertyDefault(String key, String def) {\n         return System.getProperty(key, def);\n     }\n@@ -102,6 +108,7 @@ public final class Configuration {\n      *             <code>null</code>.\n      * @exception  IllegalArgumentException if <code>key</code> is empty.\n      */\n+\n     public static int getPositiveIntProperty(String key, int def) {\n         int value = Configuration.getIntProperty(key, def);\n         return (value > 0 ? value : def);\n@@ -123,6 +130,7 @@ public final class Configuration {\n      *             <code>null</code>.\n      * @exception  IllegalArgumentException if <code>key</code> is empty.\n      */\n+\n     public static int getNonNegativeIntProperty(String key, int def) {\n         int value = Configuration.getIntProperty(key, def);\n         return (value >= 0 ? value : def);\n@@ -145,12 +153,14 @@ public final class Configuration {\n      *             <code>null</code>.\n      * @exception  IllegalArgumentException if <code>key</code> is empty.\n      */\n+\n     public static int getIntProperty(String key, int def) {\n         String value = System.getProperty(key);\n         if (value != null) {\n             try {\n                 return Integer.valueOf(value).intValue();\n             } catch (NumberFormatException e) {\n+\n             }\n         }\n         return def;\n@@ -173,12 +183,14 @@ public final class Configuration {\n      *             <code>null</code>.\n      * @exception  IllegalArgumentException if <code>key</code> is empty.\n      */\n+\n     public static boolean getBoolProperty(String key, boolean def) {\n         String value = System.getProperty(key);\n         if (value != null) {\n             try {\n                 return Boolean.valueOf(value).booleanValue();\n             } catch (NumberFormatException e) {\n+\n             }\n         }\n         return def;\n@@ -194,6 +206,7 @@ public final class Configuration {\n      *             <code>null</code>.\n      * @exception  IllegalArgumentException if <code>key</code> is empty.\n      */\n+\n     public static void setProperty(String key, String val) {\n         System.setProperty(key, val);\n     }\n@@ -203,20 +216,25 @@ public final class Configuration {\n      *\n      * @return  the string contains space separated system properties list\n      */\n+\n     public static String getSystemPropertiesNames() {\n         Properties props = AccessController.doPrivileged(new PrivilegedAction<Properties>() {\n-                public Properties run() {\n-                    return System.getProperties();\n-                }\n-            });\n+\n+\n+                               public Properties run() {\n+                                   return System.getProperties();\n+                               }\n+                           });\n         String result = new String();\n         try {\n             Enumeration<?> names = props.propertyNames();\n             while (names.hasMoreElements()) {\n-                result += (String)names.nextElement() + \" \";\n+                result += (String) names.nextElement() + \" \";\n             }\n         } catch (ClassCastException e) {\n+\n         }\n         return result;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_random/27/Configuration.java\nindex f60d4ddb99f..34fe56799bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_random/27/Configuration.java\n@@ -213,7 +213,7 @@ public final class Configuration {\n         try {\n             Enumeration<?> names = props.propertyNames();\n             while (names.hasMoreElements()) {\n-                result += (String)names.nextElement() + \" \";\n+                result += (String) names.nextElement() + \" \";\n             }\n         } catch (ClassCastException e) {\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_three_grams/27/Configuration.java\nindex f60d4ddb99f..34fe56799bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/27/Configuration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_three_grams/27/Configuration.java\n@@ -213,7 +213,7 @@ public final class Configuration {\n         try {\n             Enumeration<?> names = props.propertyNames();\n             while (names.hasMoreElements()) {\n-                result += (String)names.nextElement() + \" \";\n+                result += (String) names.nextElement() + \" \";\n             }\n         } catch (ClassCastException e) {\n         }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}