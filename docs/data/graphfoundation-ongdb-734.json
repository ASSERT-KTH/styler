{
    "project_name": "graphfoundation-ongdb",
    "error_id": "734",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "78",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "100",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "205",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "205",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "274",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "296",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/734/ParseUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/734/ParseUtil.java\nindex 824909e67b7..8cacbf564c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/734/ParseUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/734/ParseUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.proc;\n \n import java.lang.reflect.ParameterizedType;\n@@ -28,301 +29,295 @@ import java.util.Map;\n \n /**\n  * Contains simple parsing utils for parsing Cypher lists, maps and values.\n- *\n+ * <p>\n  * The methods here are not very optimized and are deliberately simple. If you find yourself using these method\n  * for parsing big json documents you should probably rethink your choice.\n  */\n public final class ParseUtil\n {\n-    private ParseUtil()\n+  private ParseUtil()\n+  {\n+    throw new UnsupportedOperationException(\"Do not instantiate\");\n+  }\n+\n+  static Map<String, Object> parseMap(String s)\n+  {\n+    int pos = 0;\n+    int braceCounter = 0;\n+    Map<String, Object> map = new HashMap<>();\n+    StringBuilder builder = new StringBuilder();\n+    boolean inList = false;\n+    while (pos < s.length())\n     {\n-        throw new UnsupportedOperationException( \"Do not instantiate\" );\n-    }\n \n-    static Map<String,Object> parseMap( String s )\n+      char character = s.charAt(pos);\n+      switch (character)\n+      {\n+        case ' ':\n+          ++pos;\n+          break;\n+        case '{':\n+          if (braceCounter++ > 0)\n+          {\n+            builder.append(s.charAt(pos));\n+          }\n+          ++pos;\n+          break;\n+        case ',':\n+          if (!inList && braceCounter == 1)\n+          {\n+            addKeyValue(map, builder.toString().trim());\n+            builder = new StringBuilder();\n+          } else\n+          {\n+            builder.append(s.charAt(pos));\n+          }\n+          ++pos;\n+          break;\n+        case '}':\n+          if (--braceCounter == 0)\n+          {\n+            addKeyValue(map, builder.toString().trim());\n+          } else\n+          {\n+            builder.append(s.charAt(pos));\n+          }\n+          ++pos;\n+          break;\n+        case '[':\n+          inList = true;\n+          builder.append(s.charAt(pos++));\n+          break;\n+        case ']':\n+          inList = false;\n+          builder.append(s.charAt(pos++));\n+          break;\n+        default:\n+          builder.append(s.charAt(pos++));\n+          break;\n+      }\n+    }\n+    if (braceCounter != 0)\n     {\n-        int pos = 0;\n-        int braceCounter = 0;\n-        Map<String,Object> map = new HashMap<>();\n-        StringBuilder builder = new StringBuilder();\n-        boolean inList = false;\n-        while ( pos < s.length() )\n-        {\n+      throw new IllegalArgumentException(String.format(\"%s contains unbalanced '{', '}'.\", s));\n+    }\n \n-            char character = s.charAt( pos );\n-            switch ( character )\n-            {\n-            case ' ':\n-                ++pos;\n-                break;\n-            case '{':\n-                if ( braceCounter++ > 0 )\n-                {\n-                    builder.append( s.charAt( pos ) );\n-                }\n-                ++pos;\n-                break;\n-            case ',':\n-                if ( !inList && braceCounter == 1 )\n-                {\n-                    addKeyValue( map, builder.toString().trim() );\n-                    builder = new StringBuilder();\n-                }\n-                else\n-                {\n-                    builder.append( s.charAt( pos ) );\n-                }\n-                ++pos;\n-                break;\n-            case '}':\n-                if ( --braceCounter == 0 )\n-                {\n-                    addKeyValue( map, builder.toString().trim() );\n-                }\n-                else\n-                {\n-                    builder.append( s.charAt( pos ) );\n-                }\n-                ++pos;\n-                break;\n-            case '[':\n-                inList = true;\n-                builder.append( s.charAt( pos++ ) );\n-                break;\n-            case ']':\n-                inList = false;\n-                builder.append( s.charAt( pos++ ) );\n-                break;\n-            default:\n-                builder.append( s.charAt( pos++ ) );\n-                break;\n-            }\n-        }\n-        if ( braceCounter != 0 )\n-        {\n-            throw new IllegalArgumentException( String.format( \"%s contains unbalanced '{', '}'.\", s ) );\n-        }\n+    return map;\n+  }\n \n-        return map;\n+  private static void addKeyValue(Map<String, Object> map, String keyValue)\n+  {\n+    if (keyValue.isEmpty())\n+    {\n+      return;\n     }\n-\n-    private static void addKeyValue( Map<String,Object> map, String keyValue )\n+    int split = keyValue.indexOf(':');\n+    if (split < 0)\n     {\n-        if ( keyValue.isEmpty() )\n-        {\n-            return;\n-        }\n-        int split = keyValue.indexOf( ':' );\n-        if ( split < 0 )\n-        {\n-            throw new IllegalArgumentException( \"Keys and values must be separated with ':'\" );\n-        }\n-        String key = parseKey( keyValue.substring( 0, split ).trim() );\n-        Object value = parseValue( keyValue.substring( split + 1 ).trim(), Object.class );\n-\n-        if ( map.containsKey( key ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Multiple occurrences of key '%s'\", key ) );\n-        }\n-        map.put( key, value );\n+      throw new IllegalArgumentException(\"Keys and values must be separated with ':'\");\n     }\n+    String key = parseKey(keyValue.substring(0, split).trim());\n+    Object value = parseValue(keyValue.substring(split + 1).trim(), Object.class);\n \n-    private static String parseKey( String s )\n+    if (map.containsKey(key))\n     {\n-        int pos = 0;\n-        while ( pos < s.length() )\n-        {\n-            char c = s.charAt( pos );\n-            switch ( c )\n-            {\n-            case '\\'':\n-            case '\\\"':\n-                ++pos;\n-                break;\n-            default:\n-                return s.substring( pos, s.length() - pos );\n-            }\n-        }\n-\n-        throw new IllegalArgumentException( \"\" );\n+      throw new IllegalArgumentException(\n+          String.format(\"Multiple occurrences of key '%s'\", key));\n     }\n+    map.put(key, value);\n+  }\n \n-    /**\n-     * Parses value into object. Make sure you call trim on the string\n-     * before calling this method. The type is used for type checking lists.\n-     */\n-    private static Object parseValue( String s, Type type )\n+  private static String parseKey(String s)\n+  {\n+    int pos = 0;\n+    while (pos < s.length())\n     {\n-        int pos = 0;\n-        while ( pos < s.length() )\n-        {\n-            char c = s.charAt( pos );\n-            int closing;\n-            switch ( c )\n-            {\n-            case ' ':\n-                ++pos;\n-                break;\n-            case '\\'':\n-                closing = s.lastIndexOf( '\\'' );\n-                if ( closing < 0 )\n-                {\n-                    throw new IllegalArgumentException( \"Did not find a matching end quote, '\" );\n-                }\n-                return s.substring( pos + 1, closing );\n-            case '\\\"':\n-                closing = s.lastIndexOf( '\\\"' );\n-                if ( closing < 0 )\n-                {\n-                    throw new IllegalArgumentException( \"Did not find a matching end quote, \\\"\" );\n-                }\n-                return s.substring( pos + 1, closing );\n-            case '{':\n-                return parseMap( s.substring( pos ) );\n-            case '[':\n-                if ( type instanceof ParameterizedType )\n-                {\n-                    return parseList( s.substring( pos ), ((ParameterizedType) type).getActualTypeArguments()[0] );\n-                }\n-                else\n-                {\n-                    return parseList( s.substring( pos ), Object.class );\n-                }\n+      char c = s.charAt(pos);\n+      switch (c)\n+      {\n+        case '\\'':\n+        case '\\\"':\n+          ++pos;\n+          break;\n+        default:\n+          return s.substring(pos, s.length() - pos);\n+      }\n+    }\n \n-            case '0':\n-            case '1':\n-            case '2':\n-            case '3':\n-            case '4':\n-            case '5':\n-            case '6':\n-            case '7':\n-            case '8':\n-            case '9':\n-                String number = s.substring( pos );\n-                try\n-                {\n-                    return Long.valueOf( number );\n-                }\n-                catch ( NumberFormatException e )\n-                {\n-                    return Double.valueOf( number );\n-                }\n+    throw new IllegalArgumentException(\"\");\n+  }\n \n-                //deliberate fallthrough\n-            case 'n':\n-                if ( s.charAt( pos + 1 ) == 'u' && s.charAt( pos + 2 ) == 'l' && s.charAt( pos + 3 ) == 'l' )\n-                {\n-                    return null;\n-                }\n+  /**\n+   * Parses value into object. Make sure you call trim on the string\n+   * before calling this method. The type is used for type checking lists.\n+   */\n+  private static Object parseValue(String s, Type type)\n+  {\n+    int pos = 0;\n+    while (pos < s.length())\n+    {\n+      char c = s.charAt(pos);\n+      int closing;\n+      switch (c)\n+      {\n+        case ' ':\n+          ++pos;\n+          break;\n+        case '\\'':\n+          closing = s.lastIndexOf('\\'');\n+          if (closing < 0)\n+          {\n+            throw new IllegalArgumentException(\"Did not find a matching end quote, '\");\n+          }\n+          return s.substring(pos + 1, closing);\n+        case '\\\"':\n+          closing = s.lastIndexOf('\\\"');\n+          if (closing < 0)\n+          {\n+            throw new IllegalArgumentException(\"Did not find a matching end quote, \\\"\");\n+          }\n+          return s.substring(pos + 1, closing);\n+        case '{':\n+          return parseMap(s.substring(pos));\n+        case '[':\n+          if (type instanceof ParameterizedType)\n+          {\n+            return parseList(s.substring(pos), ((ParameterizedType) type).getActualTypeArguments()[0]);\n+          } else\n+          {\n+            return parseList(s.substring(pos), Object.class);\n+          }\n \n-            case 't':\n-                if ( s.charAt( pos + 1 ) == 'r' && s.charAt( pos + 2 ) == 'u' && s.charAt( pos + 3 ) == 'e' )\n-                {\n-                    return Boolean.TRUE;\n-                }\n-            case 'f':\n-                if ( s.charAt( pos + 1 ) == 'a' && s.charAt( pos + 2 ) == 'l' && s.charAt( pos + 3 ) == 's' &&\n-                     s.charAt( pos + 4 ) == 'e' )\n-                {\n-                    return Boolean.FALSE;\n-                }\n+        case '0':\n+        case '1':\n+        case '2':\n+        case '3':\n+        case '4':\n+        case '5':\n+        case '6':\n+        case '7':\n+        case '8':\n+        case '9':\n+          String number = s.substring(pos);\n+          try\n+          {\n+            return Long.valueOf(number);\n+          } catch (NumberFormatException e)\n+          {\n+            return Double.valueOf(number);\n+          }\n \n-            default:\n-                throw new IllegalArgumentException( String.format( \"%s is not a valid value\", s ) );\n-            }\n-        }\n+          //deliberate fallthrough\n+        case 'n':\n+          if (s.charAt(pos + 1) == 'u' && s.charAt(pos + 2) == 'l' && s.charAt(pos + 3) == 'l')\n+          {\n+            return null;\n+          }\n \n-        throw new IllegalArgumentException( String.format( \"%s is not a valid value\", s ) );\n+        case 't':\n+          if (s.charAt(pos + 1) == 'r' && s.charAt(pos + 2) == 'u' && s.charAt(pos + 3) == 'e')\n+          {\n+            return Boolean.TRUE;\n+          }\n+        case 'f':\n+          if (s.charAt(pos + 1) == 'a' && s.charAt(pos + 2) == 'l' && s.charAt(pos + 3) == 's' &&\n+              s.charAt(pos + 4) == 'e')\n+          {\n+            return Boolean.FALSE;\n+          }\n+\n+        default:\n+          throw new IllegalArgumentException(String.format(\"%s is not a valid value\", s));\n+      }\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    static <T> List<T> parseList( String s, Type type )\n+    throw new IllegalArgumentException(String.format(\"%s is not a valid value\", s));\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  static <T> List<T> parseList(String s, Type type)\n+  {\n+    int pos = 0;\n+    int braceCounter = 0;\n+    List<Object> list = new ArrayList<>();\n+    StringBuilder builder = new StringBuilder();\n+    while (pos < s.length())\n     {\n-        int pos = 0;\n-        int braceCounter = 0;\n-        List<Object> list = new ArrayList<>();\n-        StringBuilder builder = new StringBuilder();\n-        while ( pos < s.length() )\n-        {\n \n-            char character = s.charAt( pos );\n-            switch ( character )\n+      char character = s.charAt(pos);\n+      switch (character)\n+      {\n+        case ' ':\n+          ++pos;\n+          break;\n+        case '[':\n+          if (braceCounter++ > 0)\n+          {\n+            builder.append(s.charAt(pos));\n+          }\n+          ++pos;\n+          break;\n+        case ',':\n+          if (braceCounter == 1)\n+          {\n+            Object o = parseValue(builder.toString().trim(), type);\n+            assertType(o, type);\n+            list.add(o);\n+            builder = new StringBuilder();\n+          } else\n+          {\n+            builder.append(s.charAt(pos));\n+          }\n+          ++pos;\n+          break;\n+        case ']':\n+          if (--braceCounter == 0)\n+          {\n+            String value = builder.toString().trim();\n+            if (!value.isEmpty())\n             {\n-            case ' ':\n-                ++pos;\n-                break;\n-            case '[':\n-                if ( braceCounter++ > 0 )\n-                {\n-                    builder.append( s.charAt( pos ) );\n-                }\n-                ++pos;\n-                break;\n-            case ',':\n-                if ( braceCounter == 1 )\n-                {\n-                    Object o = parseValue( builder.toString().trim(), type );\n-                    assertType(o, type);\n-                    list.add( o );\n-                    builder = new StringBuilder();\n-                }\n-                else\n-                {\n-                    builder.append( s.charAt( pos ) );\n-                }\n-                ++pos;\n-                break;\n-            case ']':\n-                if ( --braceCounter == 0 )\n-                {\n-                    String value = builder.toString().trim();\n-                    if ( !value.isEmpty() )\n-                    {\n \n-                        Object o = parseValue( value, type );\n-                        assertType(o, type);\n+              Object o = parseValue(value, type);\n+              assertType(o, type);\n \n-                        list.add( o );\n-                    }\n-                }\n-                else\n-                {\n-                    builder.append( s.charAt( pos ) );\n-                }\n-                ++pos;\n-                break;\n-            default:\n-                builder.append( s.charAt( pos++ ) );\n-                break;\n+              list.add(o);\n             }\n-        }\n-        if ( braceCounter != 0 )\n-        {\n-            throw new IllegalArgumentException( String.format( \"%s contains unbalanced '[', ']'.\", s ) );\n-        }\n-\n-        return (List<T>) list;\n+          } else\n+          {\n+            builder.append(s.charAt(pos));\n+          }\n+          ++pos;\n+          break;\n+        default:\n+          builder.append(s.charAt(pos++));\n+          break;\n+      }\n+    }\n+    if (braceCounter != 0)\n+    {\n+      throw new IllegalArgumentException(String.format(\"%s contains unbalanced '[', ']'.\", s));\n     }\n \n-    private static void assertType( Object obj, Type type )\n+    return (List<T>) list;\n+  }\n+\n+  private static void assertType(Object obj, Type type)\n+  {\n+    if (obj == null)\n     {\n-        if ( obj == null )\n-        {\n-            return;\n-        }\n-        //Since type erasure has already happened here we cannot verify ParameterizedType\n-        if ( type instanceof Class<?> )\n-        {\n-            Class<?> clazz = (Class<?>) type;\n-            if ( !clazz.isAssignableFrom( obj.getClass() ) )\n-            {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Expects a list of %s but got a list of %s\", clazz.getSimpleName(),\n-                                obj.getClass().getSimpleName() ) );\n-            }\n+      return;\n+    }\n+    //Since type erasure has already happened here we cannot verify ParameterizedType\n+    if (type instanceof Class<?>)\n+    {\n+      Class<?> clazz = (Class<?>) type;\n+      if (!clazz.isAssignableFrom(obj.getClass()))\n+      {\n+        throw new IllegalArgumentException(\n+            String.format(\"Expects a list of %s but got a list of %s\", clazz.getSimpleName(),\n+                obj.getClass().getSimpleName()));\n+      }\n \n-        }\n     }\n+  }\n }\n",
            "diff_size": 437
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "224",
                    "column": "109",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "314",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/734/ParseUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/734/ParseUtil.java\nindex 824909e67b7..ee00a0991e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/734/ParseUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/734/ParseUtil.java\n@@ -48,8 +48,7 @@ public final class ParseUtil\n         boolean inList = false;\n         while ( pos < s.length() )\n         {\n-\n-            char character = s.charAt( pos );\n+char character = s.charAt( pos );\n             switch ( character )\n             {\n             case ' ':\n@@ -117,13 +116,12 @@ public final class ParseUtil\n         {\n             throw new IllegalArgumentException( \"Keys and values must be separated with ':'\" );\n         }\n-        String key = parseKey( keyValue.substring( 0, split ).trim() );\n-        Object value = parseValue( keyValue.substring( split + 1 ).trim(), Object.class );\n \n-        if ( map.containsKey( key ) )\n+String key = parseKey( keyValue.substring( 0, split ).trim() );\n+        Object value = parseValue( keyValue.substring( split + 1 ).trim(), Object.class );\n+if ( map.containsKey( key ) )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Multiple occurrences of key '%s'\", key ) );\n+            throw new IllegalArgumentException( String.format( \"Multiple occurrences of key '%s'\", key ) );\n         }\n         map.put( key, value );\n     }\n@@ -170,14 +168,16 @@ public final class ParseUtil\n                 {\n                     throw new IllegalArgumentException( \"Did not find a matching end quote, '\" );\n                 }\n-                return s.substring( pos + 1, closing );\n+\n+return s.substring( pos + 1, closing );\n             case '\\\"':\n                 closing = s.lastIndexOf( '\\\"' );\n                 if ( closing < 0 )\n                 {\n                     throw new IllegalArgumentException( \"Did not find a matching end quote, \\\"\" );\n                 }\n-                return s.substring( pos + 1, closing );\n+\n+return s.substring( pos + 1, closing );\n             case '{':\n                 return parseMap( s.substring( pos ) );\n             case '[':\n@@ -189,8 +189,7 @@ public final class ParseUtil\n                 {\n                     return parseList( s.substring( pos ), Object.class );\n                 }\n-\n-            case '0':\n+    case '0':\n             case '1':\n             case '2':\n             case '3':\n@@ -216,20 +215,17 @@ public final class ParseUtil\n                 {\n                     return null;\n                 }\n-\n-            case 't':\n+    case 't':\n                 if ( s.charAt( pos + 1 ) == 'r' && s.charAt( pos + 2 ) == 'u' && s.charAt( pos + 3 ) == 'e' )\n                 {\n                     return Boolean.TRUE;\n                 }\n             case 'f':\n-                if ( s.charAt( pos + 1 ) == 'a' && s.charAt( pos + 2 ) == 'l' && s.charAt( pos + 3 ) == 's' &&\n-                     s.charAt( pos + 4 ) == 'e' )\n-                {\n+                if ( s.charAt( pos + 1 ) == 'a' && s.charAt( pos + 2 ) == 'l' && s.charAt( pos + 3 ) == 's' &&s.charAt( pos + 4 ) == 'e' )\n+{\n                     return Boolean.FALSE;\n                 }\n-\n-            default:\n+    default:\n                 throw new IllegalArgumentException( String.format( \"%s is not a valid value\", s ) );\n             }\n         }\n@@ -246,8 +242,7 @@ public final class ParseUtil\n         StringBuilder builder = new StringBuilder();\n         while ( pos < s.length() )\n         {\n-\n-            char character = s.charAt( pos );\n+char character = s.charAt( pos );\n             switch ( character )\n             {\n             case ' ':\n@@ -264,7 +259,7 @@ public final class ParseUtil\n                 if ( braceCounter == 1 )\n                 {\n                     Object o = parseValue( builder.toString().trim(), type );\n-                    assertType(o, type);\n+                    assertType( o, type );\n                     list.add( o );\n                     builder = new StringBuilder();\n                 }\n@@ -280,11 +275,9 @@ public final class ParseUtil\n                     String value = builder.toString().trim();\n                     if ( !value.isEmpty() )\n                     {\n-\n-                        Object o = parseValue( value, type );\n-                        assertType(o, type);\n-\n-                        list.add( o );\n+    Object o = parseValue( value, type );\n+                        assertType( o, type);\n+list.add( o );\n                     }\n                 }\n                 else\n@@ -318,11 +311,8 @@ public final class ParseUtil\n             Class<?> clazz = (Class<?>) type;\n             if ( !clazz.isAssignableFrom( obj.getClass() ) )\n             {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Expects a list of %s but got a list of %s\", clazz.getSimpleName(),\n-                                obj.getClass().getSimpleName() ) );\n-            }\n-\n-        }\n+                throw new IllegalArgumentException( String.format( \"Expects a list of %s but got a list of %s\", clazz.getSimpleName(), obj.getClass().getSimpleName() ) );\n+    }\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}