{
    "project_name": "opencb-opencga",
    "error_id": "47",
    "information": {
        "errors": [
            {
                "line": "192",
                "column": "48",
                "severity": "error",
                "message": "')' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "        params.put(\"tail\", false); // Only use tail for the first batch\n\n        while (c.follow || printedLines < lines ) {\n            params.put(\"offset\", content.getOffset());\n            content = openCGAClient.getJobClient().log(c.job, params).firstResult();\n            printedLines += printContent(content);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/47/JobCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/47/JobCommandExecutor.java\nindex 291afaa3eb4..a0285ef6519 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/47/JobCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/47/JobCommandExecutor.java\n@@ -189,7 +189,7 @@ public class JobCommandExecutor extends OpencgaCommandExecutor {\n         params.put(\"lines\", 100);\n         params.put(\"tail\", false); // Only use tail for the first batch\n \n-        while (c.follow || printedLines < lines ) {\n+        while (c.follow || printedLines < lines) {\n             params.put(\"offset\", content.getOffset());\n             content = openCGAClient.getJobClient().log(c.job, params).firstResult();\n             printedLines += printContent(content);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/47/JobCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/47/JobCommandExecutor.java\nindex 291afaa3eb4..7404119b1ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/47/JobCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/47/JobCommandExecutor.java\n@@ -43,224 +43,224 @@ import java.util.stream.Collectors;\n  */\n public class JobCommandExecutor extends OpencgaCommandExecutor {\n \n-    private JobCommandOptions jobsCommandOptions;\n-\n-    public JobCommandExecutor(JobCommandOptions jobsCommandOptions) {\n-        super(jobsCommandOptions.commonCommandOptions);\n-        this.jobsCommandOptions = jobsCommandOptions;\n-    }\n-\n-\n-    @Override\n-    public void execute() throws Exception {\n-        logger.debug(\"Executing jobs command line\");\n-\n-        String subCommandString = getParsedSubCommand(jobsCommandOptions.jCommander);\n-        RestResponse queryResponse = null;\n-        switch (subCommandString) {\n-            case \"create\":\n-                queryResponse = create();\n-                break;\n-            case \"info\":\n-                queryResponse = info();\n-                break;\n-            case \"search\":\n-                queryResponse = search();\n-                break;\n-            case \"top\":\n-                top();\n-                break;\n-            case \"log\":\n-                log();\n-                break;\n-            case \"delete\":\n-                queryResponse = delete();\n-                break;\n-            case \"acl\":\n-                queryResponse = acl();\n-                break;\n-            case \"acl-update\":\n-                queryResponse = updateAcl();\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n-        }\n-\n-        createOutput(queryResponse);\n-    }\n-\n-    private RestResponse<Job> create() throws ClientException {\n-        logger.debug(\"Creating a new job\");\n-\n-        JobCommandOptions.CreateCommandOptions commandOptions = jobsCommandOptions.createCommandOptions;\n-\n-        JobCreateParams createParams = new JobCreateParams()\n-                .setId(commandOptions.id)\n-                .setDescription(commandOptions.description)\n-                .setCommandLine(commandOptions.commandLine)\n-                .setPriority(commandOptions.priority)\n-                .setCreationDate(commandOptions.creationDate)\n-                .setInternal(new JobCreateParams.JobInternal(commandOptions.executionStatus))\n-                .setOutDir(commandOptions.outDir != null ? new JobCreateParams.TinyFile().setPath(commandOptions.outDir) : null)\n-                .setInput(commandOptions.input != null\n-                        ? commandOptions.input.stream().map(f -> new JobCreateParams.TinyFile().setPath(f)).collect(Collectors.toList())\n-                        : null)\n-                .setOutput(commandOptions.output != null\n-                        ? commandOptions.output.stream().map(f -> new JobCreateParams.TinyFile().setPath(f)).collect(Collectors.toList())\n-                        : null)\n-                .setTags(commandOptions.tags)\n-                .setTool(StringUtils.isNotEmpty(commandOptions.toolId) ? new ToolInfo(commandOptions.toolId, \"\", null, null, null) : null);\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n-\n-        return openCGAClient.getJobClient().create(createParams, params);\n-    }\n-\n-    private RestResponse<Job> info() throws ClientException {\n-        logger.debug(\"Getting job information\");\n-\n-        JobCommandOptions.InfoCommandOptions commandOptions = jobsCommandOptions.infoCommandOptions;\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n-        params.putIfNotEmpty(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n-        params.putIfNotEmpty(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n-\n-        return openCGAClient.getJobClient().info(commandOptions.job, params);\n-    }\n-\n-    private RestResponse<Job> search() throws ClientException {\n-        logger.debug(\"Searching job\");\n-\n-        JobCommandOptions.SearchCommandOptions commandOptions = jobsCommandOptions.searchCommandOptions;\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.ID.key(), commandOptions.id);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.TOOL_NAME.key(), commandOptions.toolName);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.INTERNAL_STATUS_NAME.key(), commandOptions.status);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.USER_ID.key(), commandOptions.ownerId);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.CREATION_DATE.key(), commandOptions.date);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.INPUT.key(), commandOptions.inputFiles);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.OUTPUT.key(), commandOptions.outputFiles);\n-        params.putAll(commandOptions.commonOptions.params);\n-\n-        params.put(QueryOptions.COUNT, commandOptions.numericOptions.count);\n-        params.putIfNotEmpty(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n-        params.putIfNotEmpty(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n-        params.put(QueryOptions.LIMIT, commandOptions.numericOptions.limit);\n-        params.put(QueryOptions.SKIP, commandOptions.numericOptions.skip);\n-\n-        return openCGAClient.getJobClient().search(params);\n+  private JobCommandOptions jobsCommandOptions;\n+\n+  public JobCommandExecutor(JobCommandOptions jobsCommandOptions) {\n+    super(jobsCommandOptions.commonCommandOptions);\n+    this.jobsCommandOptions = jobsCommandOptions;\n+  }\n+\n+\n+  @Override\n+  public void execute() throws Exception {\n+    logger.debug(\"Executing jobs command line\");\n+\n+    String subCommandString = getParsedSubCommand(jobsCommandOptions.jCommander);\n+    RestResponse queryResponse = null;\n+    switch (subCommandString) {\n+      case \"create\":\n+        queryResponse = create();\n+        break;\n+      case \"info\":\n+        queryResponse = info();\n+        break;\n+      case \"search\":\n+        queryResponse = search();\n+        break;\n+      case \"top\":\n+        top();\n+        break;\n+      case \"log\":\n+        log();\n+        break;\n+      case \"delete\":\n+        queryResponse = delete();\n+        break;\n+      case \"acl\":\n+        queryResponse = acl();\n+        break;\n+      case \"acl-update\":\n+        queryResponse = updateAcl();\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n     }\n \n-    private void top() throws Exception {\n-        JobCommandOptions.TopCommandOptions c = jobsCommandOptions.topCommandOptions;\n-        String study = resolveStudy(c.study);\n-        new JobsTop(openCGAClient, study, c.iterations, c.jobsLimit, c.delay).run();\n+    createOutput(queryResponse);\n+  }\n+\n+  private RestResponse<Job> create() throws ClientException {\n+    logger.debug(\"Creating a new job\");\n+\n+    JobCommandOptions.CreateCommandOptions commandOptions = jobsCommandOptions.createCommandOptions;\n+\n+    JobCreateParams createParams = new JobCreateParams()\n+        .setId(commandOptions.id)\n+        .setDescription(commandOptions.description)\n+        .setCommandLine(commandOptions.commandLine)\n+        .setPriority(commandOptions.priority)\n+        .setCreationDate(commandOptions.creationDate)\n+        .setInternal(new JobCreateParams.JobInternal(commandOptions.executionStatus))\n+        .setOutDir(commandOptions.outDir != null ? new JobCreateParams.TinyFile().setPath(commandOptions.outDir) : null)\n+        .setInput(commandOptions.input != null\n+            ? commandOptions.input.stream().map(f -> new JobCreateParams.TinyFile().setPath(f)).collect(Collectors.toList())\n+            : null)\n+        .setOutput(commandOptions.output != null\n+            ? commandOptions.output.stream().map(f -> new JobCreateParams.TinyFile().setPath(f)).collect(Collectors.toList())\n+            : null)\n+        .setTags(commandOptions.tags)\n+        .setTool(StringUtils.isNotEmpty(commandOptions.toolId) ? new ToolInfo(commandOptions.toolId, \"\", null, null, null) : null);\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n+\n+    return openCGAClient.getJobClient().create(createParams, params);\n+  }\n+\n+  private RestResponse<Job> info() throws ClientException {\n+    logger.debug(\"Getting job information\");\n+\n+    JobCommandOptions.InfoCommandOptions commandOptions = jobsCommandOptions.infoCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n+    params.putIfNotEmpty(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n+    params.putIfNotEmpty(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n+\n+    return openCGAClient.getJobClient().info(commandOptions.job, params);\n+  }\n+\n+  private RestResponse<Job> search() throws ClientException {\n+    logger.debug(\"Searching job\");\n+\n+    JobCommandOptions.SearchCommandOptions commandOptions = jobsCommandOptions.searchCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.ID.key(), commandOptions.id);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.TOOL_NAME.key(), commandOptions.toolName);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.INTERNAL_STATUS_NAME.key(), commandOptions.status);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.USER_ID.key(), commandOptions.ownerId);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.CREATION_DATE.key(), commandOptions.date);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.INPUT.key(), commandOptions.inputFiles);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.OUTPUT.key(), commandOptions.outputFiles);\n+    params.putAll(commandOptions.commonOptions.params);\n+\n+    params.put(QueryOptions.COUNT, commandOptions.numericOptions.count);\n+    params.putIfNotEmpty(QueryOptions.INCLUDE, commandOptions.dataModelOptions.include);\n+    params.putIfNotEmpty(QueryOptions.EXCLUDE, commandOptions.dataModelOptions.exclude);\n+    params.put(QueryOptions.LIMIT, commandOptions.numericOptions.limit);\n+    params.put(QueryOptions.SKIP, commandOptions.numericOptions.skip);\n+\n+    return openCGAClient.getJobClient().search(params);\n+  }\n+\n+  private void top() throws Exception {\n+    JobCommandOptions.TopCommandOptions c = jobsCommandOptions.topCommandOptions;\n+    String study = resolveStudy(c.study);\n+    new JobsTop(openCGAClient, study, c.iterations, c.jobsLimit, c.delay).run();\n+  }\n+\n+  private void log() throws Exception {\n+    JobCommandOptions.LogCommandOptions c = jobsCommandOptions.logCommandOptions;\n+    String study = resolveStudy(c.study);\n+    openCGAClient.setThrowExceptionOnError(true);\n+\n+    ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study).append(\"type\", c.type);\n+\n+    int lines;\n+    if (c.lines == null) {\n+      lines = Integer.MAX_VALUE;\n+      params.append(\"tail\", false).append(\"lines\", 100);\n+    } else {\n+      if (c.follow) {\n+        // Force tail = true\n+        c.tail = true;\n+      }\n+      lines = c.lines;\n+      params.append(\"tail\", c.tail).append(\"lines\", lines);\n     }\n \n-    private void log() throws Exception {\n-        JobCommandOptions.LogCommandOptions c = jobsCommandOptions.logCommandOptions;\n-        String study = resolveStudy(c.study);\n-        openCGAClient.setThrowExceptionOnError(true);\n-\n-        ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study).append(\"type\", c.type);\n-\n-        int lines;\n-        if (c.lines == null) {\n-            lines = Integer.MAX_VALUE;\n-            params.append(\"tail\", false).append(\"lines\", 100);\n+    int printedLines = 0;\n+    FileContent content = openCGAClient.getJobClient().log(c.job, params).firstResult();\n+    printedLines += printContent(content);\n+\n+    params.put(\"lines\", 100);\n+    params.put(\"tail\", false); // Only use tail for the first batch\n+\n+    while (c.follow || printedLines < lines) {\n+      params.put(\"offset\", content.getOffset());\n+      content = openCGAClient.getJobClient().log(c.job, params).firstResult();\n+      printedLines += printContent(content);\n+\n+      // Read fewer lines than expected\n+      if (content.getLines() < params.getInt(\"lines\")) {\n+        if (c.follow) {\n+          // Check job status\n+          Job job = openCGAClient.getJobClient().info(c.job, new ObjectMap(ParamConstants.STUDY_PARAM, study)).firstResult();\n+          if (job.getInternal().getStatus().getName().equals(Enums.ExecutionStatus.RUNNING)) {\n+            // If the job is still running, sleep and continue\n+            Thread.sleep(TimeUnit.SECONDS.toMillis(c.delay));\n+          } else {\n+            // If the job is not running, skip sleep and break loop\n+            break;\n+          }\n         } else {\n-            if (c.follow) {\n-                // Force tail = true\n-                c.tail = true;\n-            }\n-            lines = c.lines;\n-            params.append(\"tail\", c.tail).append(\"lines\", lines);\n-        }\n-\n-        int printedLines = 0;\n-        FileContent content = openCGAClient.getJobClient().log(c.job, params).firstResult();\n-        printedLines += printContent(content);\n-\n-        params.put(\"lines\", 100);\n-        params.put(\"tail\", false); // Only use tail for the first batch\n-\n-        while (c.follow || printedLines < lines ) {\n-            params.put(\"offset\", content.getOffset());\n-            content = openCGAClient.getJobClient().log(c.job, params).firstResult();\n-            printedLines += printContent(content);\n-\n-            // Read fewer lines than expected\n-            if (content.getLines() < params.getInt(\"lines\")) {\n-                if (c.follow) {\n-                    // Check job status\n-                    Job job = openCGAClient.getJobClient().info(c.job, new ObjectMap(ParamConstants.STUDY_PARAM, study)).firstResult();\n-                    if (job.getInternal().getStatus().getName().equals(Enums.ExecutionStatus.RUNNING)) {\n-                        // If the job is still running, sleep and continue\n-                        Thread.sleep(TimeUnit.SECONDS.toMillis(c.delay));\n-                    } else {\n-                        // If the job is not running, skip sleep and break loop\n-                        break;\n-                    }\n-                } else {\n-                    // End of file\n-                    if (content.isEof()) {\n-                        break;\n-                    }\n-                }\n-            }\n+          // End of file\n+          if (content.isEof()) {\n+            break;\n+          }\n         }\n+      }\n     }\n-\n-    private int printContent(FileContent content) {\n-        if (!content.getContent().isEmpty()) {\n-            System.out.print(content.getContent());\n-            if (!content.getContent().endsWith(\"\\n\")) {\n-                System.out.println();\n-            }\n-            System.out.flush();\n-        }\n-        return content.getLines();\n+  }\n+\n+  private int printContent(FileContent content) {\n+    if (!content.getContent().isEmpty()) {\n+      System.out.print(content.getContent());\n+      if (!content.getContent().endsWith(\"\\n\")) {\n+        System.out.println();\n+      }\n+      System.out.flush();\n     }\n+    return content.getLines();\n+  }\n \n-    private RestResponse<Job> delete() throws ClientException {\n-        logger.debug(\"Deleting job\");\n+  private RestResponse<Job> delete() throws ClientException {\n+    logger.debug(\"Deleting job\");\n \n-        JobCommandOptions.DeleteCommandOptions commandOptions = jobsCommandOptions.deleteCommandOptions;\n+    JobCommandOptions.DeleteCommandOptions commandOptions = jobsCommandOptions.deleteCommandOptions;\n \n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n-        params.put(\"deleteFiles\", commandOptions.deleteFiles);\n-        return openCGAClient.getJobClient().delete(commandOptions.job, params);\n-    }\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(commandOptions.study));\n+    params.put(\"deleteFiles\", commandOptions.deleteFiles);\n+    return openCGAClient.getJobClient().delete(commandOptions.job, params);\n+  }\n \n-    private RestResponse<ObjectMap> updateAcl() throws ClientException, CatalogException {\n-        AclCommandOptions.AclsUpdateCommandOptions commandOptions = jobsCommandOptions.aclsUpdateCommandOptions;\n+  private RestResponse<ObjectMap> updateAcl() throws ClientException, CatalogException {\n+    AclCommandOptions.AclsUpdateCommandOptions commandOptions = jobsCommandOptions.aclsUpdateCommandOptions;\n \n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), commandOptions.study);\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), commandOptions.study);\n \n-        JobAclUpdateParams updateParams = new JobAclUpdateParams()\n-                .setJob(extractIdsFromListOrFile(commandOptions.id))\n-                .setPermissions(commandOptions.permissions)\n-                .setAction(commandOptions.action);\n+    JobAclUpdateParams updateParams = new JobAclUpdateParams()\n+        .setJob(extractIdsFromListOrFile(commandOptions.id))\n+        .setPermissions(commandOptions.permissions)\n+        .setAction(commandOptions.action);\n \n-        return openCGAClient.getJobClient().updateAcl(commandOptions.memberId, updateParams);\n-    }\n+    return openCGAClient.getJobClient().updateAcl(commandOptions.memberId, updateParams);\n+  }\n \n-    private RestResponse<ObjectMap> acl() throws ClientException {\n-        AclCommandOptions.AclsCommandOptions commandOptions = jobsCommandOptions.aclsCommandOptions;\n+  private RestResponse<ObjectMap> acl() throws ClientException {\n+    AclCommandOptions.AclsCommandOptions commandOptions = jobsCommandOptions.aclsCommandOptions;\n \n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(\"study\", commandOptions.study);\n-        params.putIfNotEmpty(\"member\", commandOptions.memberId);\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(\"study\", commandOptions.study);\n+    params.putIfNotEmpty(\"member\", commandOptions.memberId);\n \n-        params.putAll(commandOptions.commonOptions.params);\n+    params.putAll(commandOptions.commonOptions.params);\n \n-        return openCGAClient.getJobClient().acl(commandOptions.id, params);\n-    }\n+    return openCGAClient.getJobClient().acl(commandOptions.id, params);\n+  }\n }\n",
            "diff_size": 306
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/47/JobCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/47/JobCommandExecutor.java\nindex 291afaa3eb4..a0285ef6519 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/47/JobCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/47/JobCommandExecutor.java\n@@ -189,7 +189,7 @@ public class JobCommandExecutor extends OpencgaCommandExecutor {\n         params.put(\"lines\", 100);\n         params.put(\"tail\", false); // Only use tail for the first batch\n \n-        while (c.follow || printedLines < lines ) {\n+        while (c.follow || printedLines < lines) {\n             params.put(\"offset\", content.getOffset());\n             content = openCGAClient.getJobClient().log(c.job, params).firstResult();\n             printedLines += printContent(content);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/47/JobCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/47/JobCommandExecutor.java\nindex 291afaa3eb4..a0285ef6519 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/47/JobCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/47/JobCommandExecutor.java\n@@ -189,7 +189,7 @@ public class JobCommandExecutor extends OpencgaCommandExecutor {\n         params.put(\"lines\", 100);\n         params.put(\"tail\", false); // Only use tail for the first batch\n \n-        while (c.follow || printedLines < lines ) {\n+        while (c.follow || printedLines < lines) {\n             params.put(\"offset\", content.getOffset());\n             content = openCGAClient.getJobClient().log(c.job, params).firstResult();\n             printedLines += printContent(content);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}