{
    "project_name": "DaGeRe-peass",
    "error_id": "108",
    "information": {
        "errors": [
            {
                "line": "37",
                "column": "34",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\tprivate final Map<ChangedEntity, CalledMethods> dependencyMap = new HashMap<>();\n\t\n\tpublic TestDependencies(){\n\t\t\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/108/TestDependencies.java\nindex 9a35d0f7a41..a2b3c4778ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/108/TestDependencies.java\n@@ -34,8 +34,8 @@ public class TestDependencies {\n \t */\n \tprivate final Map<ChangedEntity, CalledMethods> dependencyMap = new HashMap<>();\n \t\n-\tpublic TestDependencies(){\n-\t\t\n+\tpublic TestDependencies() {\n+\n \t}\n \n \tpublic Map<ChangedEntity, CalledMethods> getDependencyMap() {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/108/TestDependencies.java\nindex 9a35d0f7a41..f15fc4fe80f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/108/TestDependencies.java\n@@ -1,19 +1,20 @@\n /**\n- *     This file is part of PerAn.\n- *\n- *     PerAn is free software: you can redistribute it and/or modify\n- *     it under the terms of the GNU General Public License as published by\n- *     the Free Software Foundation, either version 3 of the License, or\n- *     (at your option) any later version.\n- *\n- *     PerAn is distributed in the hope that it will be useful,\n- *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *     GNU General Public License for more details.\n- *\n- *     You should have received a copy of the GNU General Public License\n- *     along with PerAn.  If not, see <http://www.gnu.org/licenses/>.\n+ * This file is part of PerAn.\n+ * <p>\n+ * PerAn is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ * <p>\n+ * PerAn is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ * <p>\n+ * You should have received a copy of the GNU General Public License\n+ * along with PerAn.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package de.peass.dependency.analysis.data;\n \n import java.util.HashMap;\n@@ -23,68 +24,68 @@ import java.util.Set;\n \n /**\n  * Represents information about the tests and their dependencies, i.e. the classes they call.\n- * \n+ *\n  * @author reichelt\n  *\n  */\n public class TestDependencies {\n-\t\n-\t/**\n-\t * Map from testcase (package.clazz.method) to dependent class to the list of called methods of this class\n-\t */\n-\tprivate final Map<ChangedEntity, CalledMethods> dependencyMap = new HashMap<>();\n-\t\n-\tpublic TestDependencies(){\n-\t\t\n-\t}\n \n-\tpublic Map<ChangedEntity, CalledMethods> getDependencyMap() {\n-\t\treturn dependencyMap;\n-\t}\n+  /**\n+   * Map from testcase (package.clazz.method) to dependent class to the list of called methods of this class\n+   */\n+  private final Map<ChangedEntity, CalledMethods> dependencyMap = new HashMap<>();\n+\n+  public TestDependencies() {\n+\n+  }\n+\n+  public Map<ChangedEntity, CalledMethods> getDependencyMap() {\n+    return dependencyMap;\n+  }\n \n-\t/**\n-\t * Gets the dependencies for a test, i.e. the used classes. If the test is not known yet, an empty Set is returned.\n-\t * \n-\t * @param test\n-\t */\n-\tpublic Map<ChangedEntity, Set<String>> getDependenciesForTest(final ChangedEntity test) {\n-\t\tCalledMethods tests = dependencyMap.get(test);\n-\t\tif (tests == null) {\n-\t\t\ttests = new CalledMethods();\n-\t\t\tdependencyMap.put(test, tests);\n-\t\t\tfinal ChangedEntity onlyClass = new ChangedEntity(test.getClazz(), test.getModule());\n-\t\t\tfinal HashSet<String> calledMethods = new HashSet<>();\n-         tests.getCalledMethods().put(onlyClass, calledMethods);\n-\t\t\tcalledMethods.add(test.getMethod());\n-\t\t}\n-\t\treturn tests.getCalledMethods();\n-\t}\n+  /**\n+   * Gets the dependencies for a test, i.e. the used classes. If the test is not known yet, an empty Set is returned.\n+   *\n+   * @param test\n+   */\n+  public Map<ChangedEntity, Set<String>> getDependenciesForTest(final ChangedEntity test) {\n+    CalledMethods tests = dependencyMap.get(test);\n+    if (tests == null) {\n+      tests = new CalledMethods();\n+      dependencyMap.put(test, tests);\n+      final ChangedEntity onlyClass = new ChangedEntity(test.getClazz(), test.getModule());\n+      final HashSet<String> calledMethods = new HashSet<>();\n+      tests.getCalledMethods().put(onlyClass, calledMethods);\n+      calledMethods.add(test.getMethod());\n+    }\n+    return tests.getCalledMethods();\n+  }\n \n-\tpublic void removeTest(final ChangedEntity entity) {\n-\t\tdependencyMap.remove(entity);\n-\t}\n+  public void removeTest(final ChangedEntity entity) {\n+    dependencyMap.remove(entity);\n+  }\n \n-\tpublic int size() {\n-\t\treturn dependencyMap.size();\n-\t}\n+  public int size() {\n+    return dependencyMap.size();\n+  }\n \n-\tpublic Map<ChangedEntity, Map<ChangedEntity, Set<String>>> getCopiedDependencies() {\n-\t\tfinal Map<ChangedEntity, Map<ChangedEntity, Set<String>>> copy = new HashMap<>();\n-\t\tfor (final Map.Entry<ChangedEntity, CalledMethods> entry : dependencyMap.entrySet()) {\n-\t\t\tfinal Map<ChangedEntity, Set<String>> dependencies = new HashMap<>();\n-\t\t\tfor (final Map.Entry<ChangedEntity, Set<String>> testcase : entry.getValue().getCalledMethods().entrySet()) {\n-\t\t\t\tfinal Set<String> copiedMethods = new HashSet<>();\n-\t\t\t\tcopiedMethods.addAll(testcase.getValue());\n-\t\t\t\tdependencies.put(entry.getKey(), copiedMethods);\n-\t\t\t}\n-\t\t\tcopy.put(entry.getKey(), dependencies);\n-\t\t}\n-\t\treturn copy;\n-\t}\n+  public Map<ChangedEntity, Map<ChangedEntity, Set<String>>> getCopiedDependencies() {\n+    final Map<ChangedEntity, Map<ChangedEntity, Set<String>>> copy = new HashMap<>();\n+    for (final Map.Entry<ChangedEntity, CalledMethods> entry : dependencyMap.entrySet()) {\n+      final Map<ChangedEntity, Set<String>> dependencies = new HashMap<>();\n+      for (final Map.Entry<ChangedEntity, Set<String>> testcase : entry.getValue().getCalledMethods().entrySet()) {\n+        final Set<String> copiedMethods = new HashSet<>();\n+        copiedMethods.addAll(testcase.getValue());\n+        dependencies.put(entry.getKey(), copiedMethods);\n+      }\n+      copy.put(entry.getKey(), dependencies);\n+    }\n+    return copy;\n+  }\n \n-\t@Override\n-\tpublic String toString() {\n-\t\treturn dependencyMap.toString();\n-\t}\n+  @Override\n+  public String toString() {\n+    return dependencyMap.toString();\n+  }\n \n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "column": "26",
                    "severity": "error",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/108/TestDependencies.java\nindex 9a35d0f7a41..3d2ef663b0a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/108/TestDependencies.java\n@@ -28,17 +28,17 @@ import java.util.Set;\n  *\n  */\n public class TestDependencies {\n-\t\n+\n \t/**\n \t * Map from testcase (package.clazz.method) to dependent class to the list of called methods of this class\n \t */\n-\tprivate final Map<ChangedEntity, CalledMethods> dependencyMap = new HashMap<>();\n-\t\n-\tpublic TestDependencies(){\n+private final Map<ChangedEntity, CalledMethods> dependencyMap = new HashMap<>();\n+\n+public TestDependencies(){\n \t\t\n \t}\n \n-\tpublic Map<ChangedEntity, CalledMethods> getDependencyMap() {\n+public Map<ChangedEntity, CalledMethods> getDependencyMap() {\n \t\treturn dependencyMap;\n \t}\n \n@@ -54,8 +54,8 @@ public class TestDependencies {\n \t\t\tdependencyMap.put(test, tests);\n \t\t\tfinal ChangedEntity onlyClass = new ChangedEntity(test.getClazz(), test.getModule());\n \t\t\tfinal HashSet<String> calledMethods = new HashSet<>();\n-         tests.getCalledMethods().put(onlyClass, calledMethods);\n-\t\t\tcalledMethods.add(test.getMethod());\n+tests.getCalledMethods().put(onlyClass, calledMethods);\n+calledMethods.add(test.getMethod());\n \t\t}\n \t\treturn tests.getCalledMethods();\n \t}\n@@ -87,4 +87,4 @@ public class TestDependencies {\n \t\treturn dependencyMap.toString();\n \t}\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/108/TestDependencies.java\nindex 9a35d0f7a41..658e7d981ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/108/TestDependencies.java\n@@ -27,64 +27,68 @@ import java.util.Set;\n  * @author reichelt\n  *\n  */\n+\n+\n public class TestDependencies {\n-\t\n-\t/**\n-\t * Map from testcase (package.clazz.method) to dependent class to the list of called methods of this class\n-\t */\n-\tprivate final Map<ChangedEntity, CalledMethods> dependencyMap = new HashMap<>();\n-\t\n-\tpublic TestDependencies(){\n-\t\t\n-\t}\n+ \n+ /**\n+  * Map from testcase (package.clazz.method) to dependent class to the list of called methods of this class\n+  */\n+ private final Map<ChangedEntity, CalledMethods> dependencyMap = new HashMap<>();\n+\n+ public TestDependencies() {\n+\n+ }\n+\n+\n+ public Map<ChangedEntity, CalledMethods> getDependencyMap() {\n+  return dependencyMap;\n+ }\n \n-\tpublic Map<ChangedEntity, CalledMethods> getDependencyMap() {\n-\t\treturn dependencyMap;\n-\t}\n+ /**\n+  * Gets the dependencies for a test, i.e. the used classes. If the test is not known yet, an empty Set is returned.\n+  * \n+  * @param test\n+  */\n \n-\t/**\n-\t * Gets the dependencies for a test, i.e. the used classes. If the test is not known yet, an empty Set is returned.\n-\t * \n-\t * @param test\n-\t */\n-\tpublic Map<ChangedEntity, Set<String>> getDependenciesForTest(final ChangedEntity test) {\n-\t\tCalledMethods tests = dependencyMap.get(test);\n-\t\tif (tests == null) {\n-\t\t\ttests = new CalledMethods();\n-\t\t\tdependencyMap.put(test, tests);\n-\t\t\tfinal ChangedEntity onlyClass = new ChangedEntity(test.getClazz(), test.getModule());\n-\t\t\tfinal HashSet<String> calledMethods = new HashSet<>();\n-         tests.getCalledMethods().put(onlyClass, calledMethods);\n-\t\t\tcalledMethods.add(test.getMethod());\n-\t\t}\n-\t\treturn tests.getCalledMethods();\n-\t}\n+ public Map<ChangedEntity, Set<String>> getDependenciesForTest(final ChangedEntity test) {\n+  CalledMethods tests = dependencyMap.get(test);\n+  if (tests == null) {\n+   tests = new CalledMethods();\n+   dependencyMap.put(test, tests);\n \n-\tpublic void removeTest(final ChangedEntity entity) {\n-\t\tdependencyMap.remove(entity);\n-\t}\n+   final ChangedEntity onlyClass = new ChangedEntity(test.getClazz(), test.getModule());\n+   final HashSet<String> calledMethods = new HashSet<>();\n+   tests.getCalledMethods().put(onlyClass, calledMethods);\n+   calledMethods.add(test.getMethod());\n+  }\n+  return tests.getCalledMethods();\n+ }\n \n-\tpublic int size() {\n-\t\treturn dependencyMap.size();\n-\t}\n+ public void removeTest(final ChangedEntity entity) {\n+  dependencyMap.remove(entity);\n+ }\n \n-\tpublic Map<ChangedEntity, Map<ChangedEntity, Set<String>>> getCopiedDependencies() {\n-\t\tfinal Map<ChangedEntity, Map<ChangedEntity, Set<String>>> copy = new HashMap<>();\n-\t\tfor (final Map.Entry<ChangedEntity, CalledMethods> entry : dependencyMap.entrySet()) {\n-\t\t\tfinal Map<ChangedEntity, Set<String>> dependencies = new HashMap<>();\n-\t\t\tfor (final Map.Entry<ChangedEntity, Set<String>> testcase : entry.getValue().getCalledMethods().entrySet()) {\n-\t\t\t\tfinal Set<String> copiedMethods = new HashSet<>();\n-\t\t\t\tcopiedMethods.addAll(testcase.getValue());\n-\t\t\t\tdependencies.put(entry.getKey(), copiedMethods);\n-\t\t\t}\n-\t\t\tcopy.put(entry.getKey(), dependencies);\n-\t\t}\n-\t\treturn copy;\n-\t}\n+ public int size() {\n+  return dependencyMap.size();\n+ }\n \n-\t@Override\n-\tpublic String toString() {\n-\t\treturn dependencyMap.toString();\n-\t}\n+ public Map<ChangedEntity, Map<ChangedEntity, Set<String>>> getCopiedDependencies() {\n+  final Map<ChangedEntity, Map<ChangedEntity, Set<String>>> copy = new HashMap<>();\n+  for (final Map.Entry<ChangedEntity, CalledMethods> entry : dependencyMap.entrySet()) {\n+   final Map<ChangedEntity, Set<String>> dependencies = new HashMap<>();\n+   for (final Map.Entry<ChangedEntity, Set<String>> testcase : entry.getValue().getCalledMethods().entrySet()) {\n+    final Set<String> copiedMethods = new HashSet<>();\n+    copiedMethods.addAll(testcase.getValue());\n+    dependencies.put(entry.getKey(), copiedMethods);\n+   }\n+   copy.put(entry.getKey(), dependencies);\n+  }\n+  return copy;\n+ }\n \n-}\n+ @Override\n+ public String toString() {\n+  return dependencyMap.toString();\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 79
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/108/TestDependencies.java\nindex 9a35d0f7a41..a2b3c4778ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/108/TestDependencies.java\n@@ -34,8 +34,8 @@ public class TestDependencies {\n \t */\n \tprivate final Map<ChangedEntity, CalledMethods> dependencyMap = new HashMap<>();\n \t\n-\tpublic TestDependencies(){\n-\t\t\n+\tpublic TestDependencies() {\n+\n \t}\n \n \tpublic Map<ChangedEntity, CalledMethods> getDependencyMap() {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/108/TestDependencies.java\nindex 9a35d0f7a41..a2b3c4778ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/108/TestDependencies.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/108/TestDependencies.java\n@@ -34,8 +34,8 @@ public class TestDependencies {\n \t */\n \tprivate final Map<ChangedEntity, CalledMethods> dependencyMap = new HashMap<>();\n \t\n-\tpublic TestDependencies(){\n-\t\t\n+\tpublic TestDependencies() {\n+\n \t}\n \n \tpublic Map<ChangedEntity, CalledMethods> getDependencyMap() {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}