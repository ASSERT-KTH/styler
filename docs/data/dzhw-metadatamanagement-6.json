{
    "project_name": "dzhw-metadatamanagement",
    "error_id": "6",
    "information": {
        "errors": [
            {
                "line": "51",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 105).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @RestResource(exported = false)\n  List<QuestionSubDocumentProjection> findSubDocumentsByInstrumentIdIn(Collection<String> instrumentIds);\n\n  @RestResource(exported = false)\n  List<QuestionSubDocumentProjection> findSubDocumentsByStudyId(String studyId);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/6/QuestionRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/6/QuestionRepository.java\nindex 201c33b69c9..703ee28f121 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/6/QuestionRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/6/QuestionRepository.java\n@@ -28,27 +28,28 @@ public interface QuestionRepository\n   @RestResource(exported = true)\n   List<Question> findByDataAcquisitionProjectId(\n       @Param(\"dataAcquisitionProjectId\") String dataAcquisitionProjectId);\n-  \n+\n   @RestResource(exported = false)\n   List<IdAndVersionProjection> findIdsByInstrumentIdAndNumber(String instrumentId, String number);\n \n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamAllIdAndVersionsBy();\n-  \n+\n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamIdsByInstrumentId(String instrumentId);\n-  \n+\n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamIdsByIdIn(List<String> ids);\n \n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamIdsByStudyId(String studyId);\n-  \n+\n   @RestResource(exported = false)\n   Stream<IdAndVersionAndInstrumentProjection> streamIdsByConceptIdsContaining(String conceptId);\n \n   @RestResource(exported = false)\n-  List<QuestionSubDocumentProjection> findSubDocumentsByInstrumentIdIn(Collection<String> instrumentIds);\n+  List<QuestionSubDocumentProjection> findSubDocumentsByInstrumentIdIn(\n+      Collection<String> instrumentIds);\n \n   @RestResource(exported = false)\n   List<QuestionSubDocumentProjection> findSubDocumentsByStudyId(String studyId);\n@@ -74,7 +75,7 @@ public interface QuestionRepository\n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamIdsByMasterIdInAndShadowIsTrueAndSuccessorIdIsNull(\n       Collection<String> questionIds);\n-  \n+\n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamIdsByMasterIdIn(\n       Collection<String> questionIds);\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/6/QuestionRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/6/QuestionRepository.java\nindex 201c33b69c9..c2679efb512 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/6/QuestionRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/6/QuestionRepository.java\n@@ -81,4 +81,4 @@ public interface QuestionRepository\n \n   @RestResource(exported = false)\n   List<QuestionSubDocumentProjection> findSubDocumentsByConceptIdsContaining(String id);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "23",
                    "severity": "error",
                    "message": "'extends' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'String' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/6/QuestionRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/6/QuestionRepository.java\nindex 201c33b69c9..ae92a600034 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/6/QuestionRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/6/QuestionRepository.java\n@@ -3,11 +3,9 @@ package eu.dzhw.fdz.metadatamanagement.questionmanagement.repository;\n import java.util.Collection;\n import java.util.List;\n import java.util.stream.Stream;\n-\n import org.springframework.data.repository.query.Param;\n import org.springframework.data.rest.core.annotation.RepositoryRestResource;\n import org.springframework.data.rest.core.annotation.RestResource;\n-\n import eu.dzhw.fdz.metadatamanagement.common.domain.projections.IdAndVersionProjection;\n import eu.dzhw.fdz.metadatamanagement.common.repository.BaseRepository;\n import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.Question;\n@@ -18,32 +16,34 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.projections.Ques\n  * The Repository for {@link Question} domain object. The data will be insert with a REST API and\n  * save in a mongo db.\n  */\n+\n+\n @RepositoryRestResource(path = \"/questions\")\n public interface QuestionRepository\n-    extends BaseRepository<Question, String> {\n+  extends BaseRepository<Question, String> {\n \n   @RestResource(exported = false)\n   Stream<Question> streamByDataAcquisitionProjectId(String dataAcquisitionProjectId);\n \n   @RestResource(exported = true)\n-  List<Question> findByDataAcquisitionProjectId(\n-      @Param(\"dataAcquisitionProjectId\") String dataAcquisitionProjectId);\n-  \n+  List<Question> findByDataAcquisitionProjectId(@Param(\"dataAcquisitionProjectId\") String dataAcquisitionProjectId);\n+\n   @RestResource(exported = false)\n-  List<IdAndVersionProjection> findIdsByInstrumentIdAndNumber(String instrumentId, String number);\n+  List<IdAndVersionProjection> findIdsByInstrumentIdAndNumber(String instrumentId,\n+    String number);\n \n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamAllIdAndVersionsBy();\n-  \n+\n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamIdsByInstrumentId(String instrumentId);\n-  \n+\n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamIdsByIdIn(List<String> ids);\n \n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamIdsByStudyId(String studyId);\n-  \n+\n   @RestResource(exported = false)\n   Stream<IdAndVersionAndInstrumentProjection> streamIdsByConceptIdsContaining(String conceptId);\n \n@@ -57,28 +57,23 @@ public interface QuestionRepository\n   List<QuestionSubDocumentProjection> findSubDocumentsByIdIn(Collection<String> questionIds);\n \n   @RestResource(exported = false)\n-  List<QuestionSubDocumentProjection> findSubDocumentsByInstrumentId(\n-      String instrumentId);\n+  List<QuestionSubDocumentProjection> findSubDocumentsByInstrumentId(String instrumentId);\n \n   @RestResource(exported = false)\n   Stream<IdAndVersionProjection> streamIdsByDataAcquisitionProjectId(String projectId);\n \n   @RestResource(exported = false)\n-  Stream<Question> streamByDataAcquisitionProjectIdAndShadowIsFalse(\n-      String dataAcquisitionProjectId);\n+  Stream<Question> streamByDataAcquisitionProjectIdAndShadowIsFalse(String dataAcquisitionProjectId);\n \n   @RestResource(exported = false)\n-  Stream<Question> streamByDataAcquisitionProjectIdAndSuccessorIdIsNullAndShadowIsTrue(\n-      String oldProjectId);\n+  Stream<Question> streamByDataAcquisitionProjectIdAndSuccessorIdIsNullAndShadowIsTrue(String oldProjectId);\n \n   @RestResource(exported = false)\n-  Stream<IdAndVersionProjection> streamIdsByMasterIdInAndShadowIsTrueAndSuccessorIdIsNull(\n-      Collection<String> questionIds);\n-  \n+  Stream<IdAndVersionProjection> streamIdsByMasterIdInAndShadowIsTrueAndSuccessorIdIsNull(Collection<String> questionIds);\n+\n   @RestResource(exported = false)\n-  Stream<IdAndVersionProjection> streamIdsByMasterIdIn(\n-      Collection<String> questionIds);\n+  Stream<IdAndVersionProjection> streamIdsByMasterIdIn(Collection<String> questionIds);\n \n   @RestResource(exported = false)\n   List<QuestionSubDocumentProjection> findSubDocumentsByConceptIdsContaining(String id);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}