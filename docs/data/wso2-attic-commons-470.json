{
    "project_name": "wso2-attic-commons",
    "error_id": "470",
    "information": {
        "errors": [
            {
                "line": "81",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                .append(\"@\").append(CARBON_CLIENT_ID)\n                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                .toString();\n    }\n ",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/470/QueueReceiverTenant2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/470/QueueReceiverTenant2.java\nindex d83ab7b8439..8fea47d8f73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/470/QueueReceiverTenant2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/470/QueueReceiverTenant2.java\n@@ -2,84 +2,88 @@ package tenant;\n \n \n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n import javax.jms.*;\n import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n import java.util.Properties;\n+\n public class QueueReceiverTenant2 {\n-    public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n-    private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n-    private static final String CF_NAME = \"qpidConnectionfactory\";\n-    String userName = \"admin\";\n-    String password = \"admin\";\n-    private static String CARBON_CLIENT_ID = \"carbon\";\n-    private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n-    private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";//10.200.3.193\n-    private static String CARBON_DEFAULT_PORT = \"5673\";\n-    String queueName = \"a\";\n- \n-    public static void main(String[] args) throws NamingException, JMSException {\n-    \tQueueReceiverTenant2 queueReceiver = new QueueReceiverTenant2();\n-        queueReceiver.receiveMessages();\n-    }\n-    public void receiveMessages() throws NamingException, JMSException {\n-        Properties properties = new Properties();\n-        properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n-        properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n-        properties.put(\"queue.\"+ queueName,queueName);\n-        System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n-        InitialContext ctx = new InitialContext(properties);\n-        // Lookup connection factory\n-        QueueConnectionFactory connFactory = (QueueConnectionFactory) ctx.lookup(CF_NAME);\n-        QueueConnection queueConnection = connFactory.createQueueConnection();\n-        queueConnection.start();\n-        QueueSession queueSession =\n-                //queueConnection.createQueueSession(false,100 ); \n-              queueConnection.createQueueSession(false,QueueSession.AUTO_ACKNOWLEDGE ); \n-        //Receive message\n-        Queue queue =  (Queue) ctx.lookup(queueName);\n-        MessageConsumer queueReceiver = queueSession.createConsumer(queue);\n-\tint count=1;\n+  public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n+  private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n+  private static final String CF_NAME = \"qpidConnectionfactory\";\n+  String userName = \"admin\";\n+  String password = \"admin\";\n+  private static String CARBON_CLIENT_ID = \"carbon\";\n+  private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n+  private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";//10.200.3.193\n+  private static String CARBON_DEFAULT_PORT = \"5673\";\n+  String queueName = \"a\";\n \n-\twhile(true){\n-\t\n-        TextMessage message = (TextMessage) queueReceiver.receive();\n-       \n-        System.out.println(\"Got message ==>\" + message.getText());\n-\t    System.out.println(\"Message Count ==>\" + count);\n-\tcount++;\n+  public static void main(String[] args) throws NamingException, JMSException {\n+    QueueReceiverTenant2 queueReceiver = new QueueReceiverTenant2();\n+    queueReceiver.receiveMessages();\n+  }\n+\n+  public void receiveMessages() throws NamingException, JMSException {\n+    Properties properties = new Properties();\n+    properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n+    properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n+    properties.put(\"queue.\" + queueName, queueName);\n+    System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n+    InitialContext ctx = new InitialContext(properties);\n+    // Lookup connection factory\n+    QueueConnectionFactory connFactory = (QueueConnectionFactory) ctx.lookup(CF_NAME);\n+    QueueConnection queueConnection = connFactory.createQueueConnection();\n+    queueConnection.start();\n+    QueueSession queueSession =\n+      //queueConnection.createQueueSession(false,100 );\n+      queueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n+    //Receive message\n+    Queue queue = (Queue) ctx.lookup(queueName);\n+    MessageConsumer queueReceiver = queueSession.createConsumer(queue);\n+    int count = 1;\n+\n+    while (true) {\n+\n+      TextMessage message = (TextMessage) queueReceiver.receive();\n+\n+      System.out.println(\"Got message ==>\" + message.getText());\n+      System.out.println(\"Message Count ==>\" + count);\n+      count++;\n \n-\t}\n-        //queueReceiver.close();\n-       // queueSession.close();\n-       // queueConnection.stop();\n-        //queueConnection.close();\n-    }\n-    public String getTCPConnectionURL(String username, String password) {\n-        // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'\n-        return new StringBuffer()\n-                .append(\"amqp://\").append(username).append(\":\").append(password)\n-                .append(\"@\").append(CARBON_CLIENT_ID)\n-                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n-                .toString();\n     }\n- \n+    //queueReceiver.close();\n+    // queueSession.close();\n+    // queueConnection.stop();\n+    //queueConnection.close();\n+  }\n+\n+  public String getTCPConnectionURL(String username, String password) {\n+    // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'\n+    return new StringBuffer()\n+      .append(\"amqp://\").append(username).append(\":\").append(password)\n+      .append(\"@\").append(CARBON_CLIENT_ID)\n+      .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n+      .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+      .toString();\n+  }\n+\n }\n",
            "diff_size": 112
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}