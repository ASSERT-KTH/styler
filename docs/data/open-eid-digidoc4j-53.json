{
    "project_name": "open-eid-digidoc4j",
    "error_id": "53",
    "information": {
        "errors": [
            {
                "line": "43",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 133).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  private static final Logger logger = LoggerFactory.getLogger(OcspNonceValidator.class);\n  private static final List<String> ALL_TM_POLICIES = Arrays.asList(\"1.3.6.1.4.1.10015.1000.2.10.10\", \"1.3.6.1.4.1.10015.1000.3.1.1\",\n          \"1.3.6.1.4.1.10015.1000.3.2.1\", \"1.3.6.1.4.1.10015.1000.3.2.3\");\n  private XAdESSignature signature;\n  private BasicOCSPResp ocspResponse;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/53/OcspNonceValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/53/OcspNonceValidator.java\nindex 903214139df..dbf22cd10df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/53/OcspNonceValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/53/OcspNonceValidator.java\n@@ -40,7 +40,8 @@ import java.util.Set;\n public class OcspNonceValidator {\n \n   private static final Logger logger = LoggerFactory.getLogger(OcspNonceValidator.class);\n-  private static final List<String> ALL_TM_POLICIES = Arrays.asList(\"1.3.6.1.4.1.10015.1000.2.10.10\", \"1.3.6.1.4.1.10015.1000.3.1.1\",\n+  private static final List<String> ALL_TM_POLICIES =\n+      Arrays.asList(\"1.3.6.1.4.1.10015.1000.2.10.10\", \"1.3.6.1.4.1.10015.1000.3.1.1\",\n           \"1.3.6.1.4.1.10015.1000.3.2.1\", \"1.3.6.1.4.1.10015.1000.3.2.3\");\n   private XAdESSignature signature;\n   private BasicOCSPResp ocspResponse;\n@@ -77,21 +78,21 @@ public class OcspNonceValidator {\n \n   private BasicOCSPResp getLatestOcspResponse(Set<EncapsulatedRevocationTokenIdentifier> ocspResponses) {\n     return ocspResponses\n-            .stream()\n-            .map(o -> {\n-              try {\n-                return DSSRevocationUtils.loadOCSPFromBinaries(o.getBinaries());\n-              } catch (IOException e) {\n-                throw new IllegalArgumentException(\"Invalid ocsp binary\");\n-              }\n-            })\n-            .max(Comparator.comparing(BasicOCSPResp::getProducedAt))\n-            .orElse(null);\n+        .stream()\n+        .map(o -> {\n+          try {\n+            return DSSRevocationUtils.loadOCSPFromBinaries(o.getBinaries());\n+          } catch (IOException e) {\n+            throw new IllegalArgumentException(\"Invalid ocsp binary\");\n+          }\n+        })\n+        .max(Comparator.comparing(BasicOCSPResp::getProducedAt))\n+        .orElse(null);\n   }\n \n   private boolean isOcspResponseValid(BasicOCSPResp latestOcspResponse) {\n     Extension extension = latestOcspResponse.getExtension(\n-            new ASN1ObjectIdentifier(OCSPObjectIdentifiers.id_pkix_ocsp_nonce.getId()));\n+        new ASN1ObjectIdentifier(OCSPObjectIdentifiers.id_pkix_ocsp_nonce.getId()));\n     if (extension == null) {\n       logger.error(\"No valid OCSP extension found in signature: \" + signature.getId());\n       return false;\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/53/OcspNonceValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/53/OcspNonceValidator.java\nindex 903214139df..3c65b529c07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/53/OcspNonceValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/53/OcspNonceValidator.java\n@@ -40,9 +40,8 @@ import java.util.Set;\n public class OcspNonceValidator {\n \n   private static final Logger logger = LoggerFactory.getLogger(OcspNonceValidator.class);\n-  private static final List<String> ALL_TM_POLICIES = Arrays.asList(\"1.3.6.1.4.1.10015.1000.2.10.10\", \"1.3.6.1.4.1.10015.1000.3.1.1\",\n-          \"1.3.6.1.4.1.10015.1000.3.2.1\", \"1.3.6.1.4.1.10015.1000.3.2.3\");\n-  private XAdESSignature signature;\n+  private static final List<String> ALL_TM_POLICIES = Arrays.asList(\"1.3.6.1.4.1.10015.1000.2.10.10\", \"1.3.6.1.4.1.10015.1000.3.1.1\", \"1.3.6.1.4.1.10015.1000.3.2.1\", \"1.3.6.1.4.1.10015.1000.3.2.3\");\n+private XAdESSignature signature;\n   private BasicOCSPResp ocspResponse;\n \n   /**\n@@ -76,23 +75,18 @@ public class OcspNonceValidator {\n   }\n \n   private BasicOCSPResp getLatestOcspResponse(Set<EncapsulatedRevocationTokenIdentifier> ocspResponses) {\n-    return ocspResponses\n-            .stream()\n-            .map(o -> {\n+    return ocspResponses.stream().map(o -> {\n               try {\n                 return DSSRevocationUtils.loadOCSPFromBinaries(o.getBinaries());\n               } catch (IOException e) {\n                 throw new IllegalArgumentException(\"Invalid ocsp binary\");\n               }\n-            })\n-            .max(Comparator.comparing(BasicOCSPResp::getProducedAt))\n-            .orElse(null);\n+            }).max(Comparator.comparing(BasicOCSPResp::getProducedAt)).orElse(null);\n   }\n \n   private boolean isOcspResponseValid(BasicOCSPResp latestOcspResponse) {\n-    Extension extension = latestOcspResponse.getExtension(\n-            new ASN1ObjectIdentifier(OCSPObjectIdentifiers.id_pkix_ocsp_nonce.getId()));\n-    if (extension == null) {\n+    Extension extension = latestOcspResponse.getExtension(new ASN1ObjectIdentifier(OCSPObjectIdentifiers.id_pkix_ocsp_nonce.getId()));\n+if (extension == null) {\n       logger.error(\"No valid OCSP extension found in signature: \" + signature.getId());\n       return false;\n     }\n@@ -126,4 +120,4 @@ public class OcspNonceValidator {\n     String oidString = ((DLSequence) oid).getObjects().nextElement().toString();\n     return DigestAlgorithm.forOID(oidString);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "column": "40",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/53/OcspNonceValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/53/OcspNonceValidator.java\nindex 903214139df..78d110f1074 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/53/OcspNonceValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/53/OcspNonceValidator.java\n@@ -27,7 +27,6 @@ import org.bouncycastle.cert.ocsp.BasicOCSPResp;\n import org.digidoc4j.utils.Helper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Comparator;\n@@ -37,11 +36,12 @@ import java.util.Set;\n /**\n  * Validator of OCSP response NONCE extension\n  */\n+\n+\n public class OcspNonceValidator {\n \n   private static final Logger logger = LoggerFactory.getLogger(OcspNonceValidator.class);\n-  private static final List<String> ALL_TM_POLICIES = Arrays.asList(\"1.3.6.1.4.1.10015.1000.2.10.10\", \"1.3.6.1.4.1.10015.1000.3.1.1\",\n-          \"1.3.6.1.4.1.10015.1000.3.2.1\", \"1.3.6.1.4.1.10015.1000.3.2.3\");\n+  private static final List<String> ALL_TM_POLICIES = Arrays.asList(\"1.3.6.1.4.1.10015.1000.2.10.10\", \"1.3.6.1.4.1.10015.1000.3.1.1\", \"1.3.6.1.4.1.10015.1000.3.2.1\", \"1.3.6.1.4.1.10015.1000.3.2.3\");\n   private XAdESSignature signature;\n   private BasicOCSPResp ocspResponse;\n \n@@ -50,6 +50,7 @@ public class OcspNonceValidator {\n    *\n    * @param signature Xades signature object\n    */\n+\n   public OcspNonceValidator(XAdESSignature signature) {\n     this.signature = signature;\n     ocspResponse = getLatestOcspResponse(signature.getOCSPSource().getAllRevocationBinaries());\n@@ -60,6 +61,8 @@ public class OcspNonceValidator {\n    *\n    * @return True if OCSP response is valid, false otherwise.\n    */\n+\n+\n   public boolean isValid() {\n     if (signature.getPolicyId() == null) {\n       return true;\n@@ -76,22 +79,17 @@ public class OcspNonceValidator {\n   }\n \n   private BasicOCSPResp getLatestOcspResponse(Set<EncapsulatedRevocationTokenIdentifier> ocspResponses) {\n-    return ocspResponses\n-            .stream()\n-            .map(o -> {\n-              try {\n-                return DSSRevocationUtils.loadOCSPFromBinaries(o.getBinaries());\n-              } catch (IOException e) {\n-                throw new IllegalArgumentException(\"Invalid ocsp binary\");\n-              }\n-            })\n-            .max(Comparator.comparing(BasicOCSPResp::getProducedAt))\n-            .orElse(null);\n+    return ocspResponses.stream().map(o-> {\n+                                        try {\n+                                          return DSSRevocationUtils.loadOCSPFromBinaries(o.getBinaries());\n+                                        } catch (IOException e) {\n+                                          throw new IllegalArgumentException(\"Invalid ocsp binary\");\n+                                        }\n+                                      }).max(Comparator.comparing(BasicOCSPResp::getProducedAt)).orElse(null);\n   }\n \n   private boolean isOcspResponseValid(BasicOCSPResp latestOcspResponse) {\n-    Extension extension = latestOcspResponse.getExtension(\n-            new ASN1ObjectIdentifier(OCSPObjectIdentifiers.id_pkix_ocsp_nonce.getId()));\n+    Extension extension = latestOcspResponse.getExtension(new ASN1ObjectIdentifier(OCSPObjectIdentifiers.id_pkix_ocsp_nonce.getId()));\n     if (extension == null) {\n       logger.error(\"No valid OCSP extension found in signature: \" + signature.getId());\n       return false;\n@@ -126,4 +124,5 @@ public class OcspNonceValidator {\n     String oidString = ((DLSequence) oid).getObjects().nextElement().toString();\n     return DigestAlgorithm.forOID(oidString);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "column": "29",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "43",
                    "column": "29",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/53/OcspNonceValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_three_grams/53/OcspNonceValidator.java\nindex 903214139df..5952ebd446c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/53/OcspNonceValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_three_grams/53/OcspNonceValidator.java\n@@ -40,8 +40,11 @@ import java.util.Set;\n public class OcspNonceValidator {\n \n   private static final Logger logger = LoggerFactory.getLogger(OcspNonceValidator.class);\n-  private static final List<String> ALL_TM_POLICIES = Arrays.asList(\"1.3.6.1.4.1.10015.1000.2.10.10\", \"1.3.6.1.4.1.10015.1000.3.1.1\",\n-          \"1.3.6.1.4.1.10015.1000.3.2.1\", \"1.3.6.1.4.1.10015.1000.3.2.3\");\n+  private static final List < String\n+      > ALL_TM_POLICIES\n+\n+= Arrays.asList(\"1.3.6.1.4.1.10015.1000.2.10.10\", \"1.3.6.1.4.1.10015.1000.3.1.1\",\n+           \"1.3.6.1.4.1.10015.1000.3.2.1\", \"1.3.6.1.4.1.10015.1000.3.2.3\");\n   private XAdESSignature signature;\n   private BasicOCSPResp ocspResponse;\n \n",
            "diff_size": 5
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}