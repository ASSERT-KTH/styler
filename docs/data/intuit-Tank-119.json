{
    "project_name": "intuit-Tank",
    "error_id": "119",
    "information": {
        "errors": [
            {
                "line": "148",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 159).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     */\n    public List<Integer> getSelectedFilterIds() {\n        return this.getSelectionList().stream().filter(SelectableWrapper::isSelected).map(wrapper -> wrapper.getEntity().getId()).collect(Collectors.toList());\n    }\n\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/119/FilterBean.java\nindex ca5dba0e02d..9f5b0378746 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/119/FilterBean.java\n@@ -145,7 +145,9 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n      * @return the list of integers representing the IDs of each selected filter\n      */\n     public List<Integer> getSelectedFilterIds() {\n-        return this.getSelectionList().stream().filter(SelectableWrapper::isSelected).map(wrapper -> wrapper.getEntity().getId()).collect(Collectors.toList());\n+        return this.getSelectionList().stream().filter(SelectableWrapper::isSelected\n+        ).map(wrapper -> wrapper.getEntity().getId(\n+    )).collect(Collectors.toList());\n     }\n \n }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/119/FilterBean.java\nindex ca5dba0e02d..740cf3c9980 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/119/FilterBean.java\n@@ -42,110 +42,110 @@ import com.intuit.tank.wrapper.SelectableWrapper;\n @ViewScoped\n public class FilterBean extends SelectableBean<ScriptFilter> implements Serializable, Multiselectable<ScriptFilter> {\n \n-    private static final long serialVersionUID = 1L;\n-\n-    private SelectableWrapper<ScriptFilter> selectedFilter;\n-\n-    @Inject\n-    private ExceptionHandler exceptionHandler;\n-\n-    @Inject\n-    private Security security;\n-\n-    @Inject\n-    private Messages messages;\n-\n-    /**\n-     * @inheritDoc\n-     */\n-    @Override\n-    public boolean isCurrent() {\n-        return true;\n-    }\n-\n-    /**\n-     * @inheritDoc\n-     */\n-    @Override\n-    public void delete(ScriptFilter entity) {\n-        if (!security.hasRight(AccessRight.DELETE_FILTER) && !security.isOwner(entity)) {\n-            messages.warn(\"You don't have permission to delete this filter.\");\n-        } else {\n-            try {\n-                ScriptFilterGroupDao groupDao = new ScriptFilterGroupDao();\n-                List<ScriptFilterGroup> groups = groupDao.getScriptFilterGroupForFilter(entity.getId());\n-                for (ScriptFilterGroup group : groups) {\n-                    if (group.getFilters().remove(entity)) {\n-                        groupDao.saveOrUpdate(group);\n-                    }\n-                }\n-                new ScriptFilterDao().delete(entity);\n-                refresh();\n-            } catch (Exception e) {\n-                exceptionHandler.handle(e);\n-            }\n-        }\n-    }\n-\n-    public void deleteSelectedFilter() {\n-        if (selectedFilter != null) {\n-            delete(selectedFilter.getEntity());\n+  private static final long serialVersionUID = 1L;\n+\n+  private SelectableWrapper<ScriptFilter> selectedFilter;\n+\n+  @Inject\n+  private ExceptionHandler exceptionHandler;\n+\n+  @Inject\n+  private Security security;\n+\n+  @Inject\n+  private Messages messages;\n+\n+  /**\n+   * @inheritDoc\n+   */\n+  @Override\n+  public boolean isCurrent() {\n+    return true;\n+  }\n+\n+  /**\n+   * @inheritDoc\n+   */\n+  @Override\n+  public void delete(ScriptFilter entity) {\n+    if (!security.hasRight(AccessRight.DELETE_FILTER) && !security.isOwner(entity)) {\n+      messages.warn(\"You don't have permission to delete this filter.\");\n+    } else {\n+      try {\n+        ScriptFilterGroupDao groupDao = new ScriptFilterGroupDao();\n+        List<ScriptFilterGroup> groups = groupDao.getScriptFilterGroupForFilter(entity.getId());\n+        for (ScriptFilterGroup group : groups) {\n+          if (group.getFilters().remove(entity)) {\n+            groupDao.saveOrUpdate(group);\n+          }\n         }\n+        new ScriptFilterDao().delete(entity);\n+        refresh();\n+      } catch (Exception e) {\n+        exceptionHandler.handle(e);\n+      }\n     }\n+  }\n \n-    /**\n-     * @return the selectedFilter\n-     */\n-    public SelectableWrapper<ScriptFilter> getSelectedFilter() {\n-        return selectedFilter;\n+  public void deleteSelectedFilter() {\n+    if (selectedFilter != null) {\n+      delete(selectedFilter.getEntity());\n     }\n-\n-    /**\n-     * @param selectedFilter\n-     *            the selectedFilter to set\n-     */\n-    public void setSelectedFilter(SelectableWrapper<ScriptFilter> selectedFilter) {\n-        this.selectedFilter = selectedFilter;\n-    }\n-\n-    /**\n-     * @inheritDoc\n-     */\n-    @Override\n-    public List<ScriptFilter> getEntityList(ViewFilterType viewFilter) {\n-        List<ScriptFilter> all = new ScriptFilterDao().findFiltered(ViewFilterType.ALL);\n-        Collections.sort(all);\n-        return all;\n-    }\n-\n-    public void processSelection(SelectableWrapper<ScriptFilterGroup> w) {\n-        Map<Integer, SelectableWrapper<ScriptFilter>> map = getListMap(getSelectionList());\n-        boolean selected = w.isSelected();\n-        for (ScriptFilter sf : w.getEntity().getFilters()) {\n-            SelectableWrapper<ScriptFilter> wrapper = map.get(sf.getId());\n-            if (wrapper != null) {\n-                wrapper.setSelected(selected);\n-            }\n-        }\n+  }\n+\n+  /**\n+   * @return the selectedFilter\n+   */\n+  public SelectableWrapper<ScriptFilter> getSelectedFilter() {\n+    return selectedFilter;\n+  }\n+\n+  /**\n+   * @param selectedFilter the selectedFilter to set\n+   */\n+  public void setSelectedFilter(SelectableWrapper<ScriptFilter> selectedFilter) {\n+    this.selectedFilter = selectedFilter;\n+  }\n+\n+  /**\n+   * @inheritDoc\n+   */\n+  @Override\n+  public List<ScriptFilter> getEntityList(ViewFilterType viewFilter) {\n+    List<ScriptFilter> all = new ScriptFilterDao().findFiltered(ViewFilterType.ALL);\n+    Collections.sort(all);\n+    return all;\n+  }\n+\n+  public void processSelection(SelectableWrapper<ScriptFilterGroup> w) {\n+    Map<Integer, SelectableWrapper<ScriptFilter>> map = getListMap(getSelectionList());\n+    boolean selected = w.isSelected();\n+    for (ScriptFilter sf : w.getEntity().getFilters()) {\n+      SelectableWrapper<ScriptFilter> wrapper = map.get(sf.getId());\n+      if (wrapper != null) {\n+        wrapper.setSelected(selected);\n+      }\n     }\n-\n-    /**\n-     * @param list\n-     * @return\n-     */\n-    private Map<Integer, SelectableWrapper<ScriptFilter>> getListMap(List<SelectableWrapper<ScriptFilter>> list) {\n-        Map<Integer, SelectableWrapper<ScriptFilter>> ret = new HashMap<Integer, SelectableWrapper<ScriptFilter>>();\n-        for (SelectableWrapper<ScriptFilter> f : list) {\n-            ret.put(f.getEntity().getId(), f);\n-        }\n-        return ret;\n-    }\n-\n-    /**\n-     * @return the list of integers representing the IDs of each selected filter\n-     */\n-    public List<Integer> getSelectedFilterIds() {\n-        return this.getSelectionList().stream().filter(SelectableWrapper::isSelected).map(wrapper -> wrapper.getEntity().getId()).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * @param list\n+   * @return\n+   */\n+  private Map<Integer, SelectableWrapper<ScriptFilter>> getListMap(List<SelectableWrapper<ScriptFilter>> list) {\n+    Map<Integer, SelectableWrapper<ScriptFilter>> ret = new HashMap<Integer, SelectableWrapper<ScriptFilter>>();\n+    for (SelectableWrapper<ScriptFilter> f : list) {\n+      ret.put(f.getEntity().getId(), f);\n     }\n+    return ret;\n+  }\n+\n+  /**\n+   * @return the list of integers representing the IDs of each selected filter\n+   */\n+  public List<Integer> getSelectedFilterIds() {\n+    return this.getSelectionList().stream().filter(SelectableWrapper::isSelected)\n+      .map(wrapper -> wrapper.getEntity().getId()).collect(Collectors.toList());\n+  }\n \n }\n",
            "diff_size": 121
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/119/FilterBean.java\nindex ca5dba0e02d..84c8e4e93e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/119/FilterBean.java\n@@ -148,4 +148,4 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n         return this.getSelectionList().stream().filter(SelectableWrapper::isSelected).map(wrapper -> wrapper.getEntity().getId()).collect(Collectors.toList());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/119/FilterBean.java\nindex ca5dba0e02d..542354356a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/119/FilterBean.java\n@@ -13,19 +13,18 @@ package com.intuit.tank.filter;\n  * #L%\n  */\n \n+\n+\n import java.io.Serializable;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-\n import javax.faces.view.ViewScoped;\n import javax.inject.Inject;\n import javax.inject.Named;\n-\n import com.intuit.tank.util.Messages;\n-\n import com.intuit.tank.auth.Security;\n import com.intuit.tank.dao.ScriptFilterDao;\n import com.intuit.tank.dao.ScriptFilterGroupDao;\n@@ -40,10 +39,10 @@ import com.intuit.tank.wrapper.SelectableWrapper;\n \n @Named\n @ViewScoped\n-public class FilterBean extends SelectableBean<ScriptFilter> implements Serializable, Multiselectable<ScriptFilter> {\n+public class FilterBean extends SelectableBean<ScriptFilter> implements Serializable,\n+    Multiselectable<ScriptFilter> {\n \n     private static final long serialVersionUID = 1L;\n-\n     private SelectableWrapper<ScriptFilter> selectedFilter;\n \n     @Inject\n@@ -58,6 +57,7 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n     /**\n      * @inheritDoc\n      */\n+\n     @Override\n     public boolean isCurrent() {\n         return true;\n@@ -66,6 +66,7 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n     /**\n      * @inheritDoc\n      */\n+\n     @Override\n     public void delete(ScriptFilter entity) {\n         if (!security.hasRight(AccessRight.DELETE_FILTER) && !security.isOwner(entity)) {\n@@ -87,6 +88,7 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n         }\n     }\n \n+\n     public void deleteSelectedFilter() {\n         if (selectedFilter != null) {\n             delete(selectedFilter.getEntity());\n@@ -96,6 +98,8 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n     /**\n      * @return the selectedFilter\n      */\n+\n+\n     public SelectableWrapper<ScriptFilter> getSelectedFilter() {\n         return selectedFilter;\n     }\n@@ -104,6 +108,8 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n      * @param selectedFilter\n      *            the selectedFilter to set\n      */\n+\n+\n     public void setSelectedFilter(SelectableWrapper<ScriptFilter> selectedFilter) {\n         this.selectedFilter = selectedFilter;\n     }\n@@ -111,6 +117,7 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n     /**\n      * @inheritDoc\n      */\n+\n     @Override\n     public List<ScriptFilter> getEntityList(ViewFilterType viewFilter) {\n         List<ScriptFilter> all = new ScriptFilterDao().findFiltered(ViewFilterType.ALL);\n@@ -118,6 +125,7 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n         return all;\n     }\n \n+\n     public void processSelection(SelectableWrapper<ScriptFilterGroup> w) {\n         Map<Integer, SelectableWrapper<ScriptFilter>> map = getListMap(getSelectionList());\n         boolean selected = w.isSelected();\n@@ -133,6 +141,7 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n      * @param list\n      * @return\n      */\n+\n     private Map<Integer, SelectableWrapper<ScriptFilter>> getListMap(List<SelectableWrapper<ScriptFilter>> list) {\n         Map<Integer, SelectableWrapper<ScriptFilter>> ret = new HashMap<Integer, SelectableWrapper<ScriptFilter>>();\n         for (SelectableWrapper<ScriptFilter> f : list) {\n@@ -144,8 +153,10 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n     /**\n      * @return the list of integers representing the IDs of each selected filter\n      */\n+\n+\n     public List<Integer> getSelectedFilterIds() {\n-        return this.getSelectionList().stream().filter(SelectableWrapper::isSelected).map(wrapper -> wrapper.getEntity().getId()).collect(Collectors.toList());\n+        return this.getSelectionList().stream().filter(SelectableWrapper::isSelected).map(wrapper-> wrapper.getEntity().getId()).collect(Collectors.toList());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/119/FilterBean.java\nindex ca5dba0e02d..7c80029b4ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/119/FilterBean.java\n@@ -145,7 +145,4 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n      * @return the list of integers representing the IDs of each selected filter\n      */\n     public List<Integer> getSelectedFilterIds() {\n-        return this.getSelectionList().stream().filter(SelectableWrapper::isSelected).map(wrapper -> wrapper.getEntity().getId()).collect(Collectors.toList());\n-    }\n-\n-}\n+        return this.getSelectionList().stream().filter(SelectableWrapper::isSelected).map(wrapper->wrapper.getEntity().getId()).collect(Collectors.toList());}}\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/119/FilterBean.java\nindex ca5dba0e02d..9f5b0378746 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/119/FilterBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/119/FilterBean.java\n@@ -145,7 +145,9 @@ public class FilterBean extends SelectableBean<ScriptFilter> implements Serializ\n      * @return the list of integers representing the IDs of each selected filter\n      */\n     public List<Integer> getSelectedFilterIds() {\n-        return this.getSelectionList().stream().filter(SelectableWrapper::isSelected).map(wrapper -> wrapper.getEntity().getId()).collect(Collectors.toList());\n+        return this.getSelectionList().stream().filter(SelectableWrapper::isSelected\n+        ).map(wrapper -> wrapper.getEntity().getId(\n+    )).collect(Collectors.toList());\n     }\n \n }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}