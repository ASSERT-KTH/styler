{
    "project_name": "wso2-attic-commons",
    "error_id": "44",
    "information": {
        "errors": [
            {
                "line": "155",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 139).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n                public Long execute(EntityManager em) {\n                    Query query = em.createNamedQuery((currentTask.isNew()) ? \"task.new.countByNameAndStory\" : \"task.countByNameAndStory\");\n                    query.setParameter(\"name\", newName);\n                    query.setParameter(\"story\", storyManager.getCurrentStory());\n                    if (!currentTask.isNew()) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/44/TaskManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/44/TaskManager.java\nindex 4df5e6314d1..b26719d1a32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/44/TaskManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/44/TaskManager.java\n@@ -152,7 +152,8 @@ public class TaskManager extends AbstractManager implements Serializable {\n             Long count = doInTransaction(new PersistenceAction<Long>() {\n \n                 public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((currentTask.isNew()) ? \"task.new.countByNameAndStory\" : \"task.countByNameAndStory\");\n+                    Query query = em.createNamedQuery((currentTask.isNew()\n+                    ) ? \"task.new.countByNameAndStory\" : \"task.countByNameAndStory\");\n                     query.setParameter(\"name\", newName);\n                     query.setParameter(\"story\", storyManager.getCurrentStory());\n                     if (!currentTask.isNew()) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/44/TaskManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/44/TaskManager.java\nindex 4df5e6314d1..b8528155a57 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/44/TaskManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/44/TaskManager.java\n@@ -65,148 +65,149 @@ import javax.enterprise.context.SessionScoped;\n @SessionScoped\n public class TaskManager extends AbstractManager implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-    private Task currentTask;\n-    \n-    @Inject\n-    private StoryManager storyManager;\n-\n-    @PostConstruct\n-    public void construct() {\n-        getLogger(getClass()).log(Level.INFO, \"new intance of taskManager\");\n-        init();\n-    }\n-\n-    public void init() {\n-        Task task = new Task();\n-        Story currentStory = storyManager.getCurrentStory();\n-        task.setStory(currentStory);\n-        setCurrentTask(task);\n-    }\n-\n-    public String create() {\n-        Task task = new Task();\n-        task.setStory(storyManager.getCurrentStory());\n-        setCurrentTask(task);\n-        return \"create\";\n-    }\n-\n-    public String save() {\n-        if (currentTask != null) {\n-            try {\n-                Task merged = doInTransaction(new PersistenceAction<Task>() {\n-\n-                    public Task execute(EntityManager em) {\n-                        if (currentTask.isNew()) {\n-                            em.persist(currentTask);\n-                        } else if (!em.contains(currentTask)) {\n-                            return em.merge(currentTask);\n-                        }\n-                        return currentTask;\n-                    }\n-                });\n-                if (!currentTask.equals(merged)) {\n-                    setCurrentTask(merged);\n-                }\n-                storyManager.getCurrentStory().addTask(merged);\n-            } catch (Exception e) {\n-                getLogger(getClass()).log(Level.SEVERE, \"Error on try to save Task: \" + currentTask, e);\n-                addMessage(\"Error on try to save Task\", FacesMessage.SEVERITY_ERROR);\n-                return null;\n+  private static final long serialVersionUID = 1L;\n+  private Task currentTask;\n+\n+  @Inject\n+  private StoryManager storyManager;\n+\n+  @PostConstruct\n+  public void construct() {\n+    getLogger(getClass()).log(Level.INFO, \"new intance of taskManager\");\n+    init();\n+  }\n+\n+  public void init() {\n+    Task task = new Task();\n+    Story currentStory = storyManager.getCurrentStory();\n+    task.setStory(currentStory);\n+    setCurrentTask(task);\n+  }\n+\n+  public String create() {\n+    Task task = new Task();\n+    task.setStory(storyManager.getCurrentStory());\n+    setCurrentTask(task);\n+    return \"create\";\n+  }\n+\n+  public String save() {\n+    if (currentTask != null) {\n+      try {\n+        Task merged = doInTransaction(new PersistenceAction<Task>() {\n+\n+          public Task execute(EntityManager em) {\n+            if (currentTask.isNew()) {\n+              em.persist(currentTask);\n+            } else if (!em.contains(currentTask)) {\n+              return em.merge(currentTask);\n             }\n+            return currentTask;\n+          }\n+        });\n+        if (!currentTask.equals(merged)) {\n+          setCurrentTask(merged);\n         }\n-        return \"show\";\n-    }\n-\n-    public String edit(Task task) {\n-        setCurrentTask(task);\n-        return \"edit\";\n-    }\n-\n-    public String remove(final Task task) {\n-        if (task != null) {\n-            try {\n-                doInTransaction(new PersistenceActionWithoutResult() {\n-\n-                    public void execute(EntityManager em) {\n-                        if (em.contains(task)) {\n-                            em.remove(task);\n-                        } else {\n-                            em.remove(em.merge(task));\n-                        }\n-                    }\n-                });\n-                storyManager.getCurrentStory().removeTask(task);\n-            } catch (Exception e) {\n-                getLogger(getClass()).log(Level.SEVERE, \"Error on try to remove Task: \" + currentTask, e);\n-                addMessage(\"Error on try to remove Task\", FacesMessage.SEVERITY_ERROR);\n-                return null;\n-            }\n-        }\n-        return \"show\";\n-    }\n-\n-    public void checkUniqueTaskName(FacesContext context, UIComponent component, Object newValue) {\n-        final String newName = (String) newValue;\n-        try {\n-            Long count = doInTransaction(new PersistenceAction<Long>() {\n-\n-                public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((currentTask.isNew()) ? \"task.new.countByNameAndStory\" : \"task.countByNameAndStory\");\n-                    query.setParameter(\"name\", newName);\n-                    query.setParameter(\"story\", storyManager.getCurrentStory());\n-                    if (!currentTask.isNew()) {\n-                        query.setParameter(\"currentTask\", (!currentTask.isNew()) ? currentTask : null);\n-                    }\n-                    return (Long) query.getSingleResult();\n-                }\n-            });\n-            if (count != null && count > 1) {\n-                throw new ValidatorException(getFacesMessageForKey(\"task.form.label.name.unique\"));\n+        storyManager.getCurrentStory().addTask(merged);\n+      } catch (Exception e) {\n+        getLogger(getClass()).log(Level.SEVERE, \"Error on try to save Task: \" + currentTask, e);\n+        addMessage(\"Error on try to save Task\", FacesMessage.SEVERITY_ERROR);\n+        return null;\n+      }\n+    }\n+    return \"show\";\n+  }\n+\n+  public String edit(Task task) {\n+    setCurrentTask(task);\n+    return \"edit\";\n+  }\n+\n+  public String remove(final Task task) {\n+    if (task != null) {\n+      try {\n+        doInTransaction(new PersistenceActionWithoutResult() {\n+\n+          public void execute(EntityManager em) {\n+            if (em.contains(task)) {\n+              em.remove(task);\n+            } else {\n+              em.remove(em.merge(task));\n             }\n-        } catch (ManagerException ex) {\n-            Logger.getLogger(TaskManager.class.getName()).log(Level.SEVERE, null, ex);\n+          }\n+        });\n+        storyManager.getCurrentStory().removeTask(task);\n+      } catch (Exception e) {\n+        getLogger(getClass()).log(Level.SEVERE, \"Error on try to remove Task: \" + currentTask, e);\n+        addMessage(\"Error on try to remove Task\", FacesMessage.SEVERITY_ERROR);\n+        return null;\n+      }\n+    }\n+    return \"show\";\n+  }\n+\n+  public void checkUniqueTaskName(FacesContext context, UIComponent component, Object newValue) {\n+    final String newName = (String) newValue;\n+    try {\n+      Long count = doInTransaction(new PersistenceAction<Long>() {\n+\n+        public Long execute(EntityManager em) {\n+          Query query =\n+            em.createNamedQuery((currentTask.isNew()) ? \"task.new.countByNameAndStory\" : \"task.countByNameAndStory\");\n+          query.setParameter(\"name\", newName);\n+          query.setParameter(\"story\", storyManager.getCurrentStory());\n+          if (!currentTask.isNew()) {\n+            query.setParameter(\"currentTask\", (!currentTask.isNew()) ? currentTask : null);\n+          }\n+          return (Long) query.getSingleResult();\n         }\n-    }\n-\n-    public String cancelEdit() {\n-        return \"show\";\n-    }\n-\n-    public Task getCurrentTask() {\n-        return currentTask;\n-    }\n-\n-    public void setCurrentTask(Task currentTask) {\n-        this.currentTask = currentTask;\n-    }\n-\n-    public Story getStory() {\n-        return storyManager.getCurrentStory();\n-    }\n-\n-    public void setStory(Story story) {\n-        storyManager.setCurrentStory(story);\n-    }\n-\n-    public StoryManager getStoryManager() {\n-        return storyManager;\n-    }\n-\n-    public void setStoryManager(StoryManager storyManager) {\n-        this.storyManager = storyManager;\n-    }\n-\n-    public String showStories() {\n-        return \"/story/show\";\n-    }\n-\n-\n-    @PreDestroy\n-    public void destroy() {\n-        getLogger(getClass()).log(Level.INFO, \"destroy intance of taskManager\");\n-\tcurrentTask = null;\n-\tstoryManager = null;\n-    }\n+      });\n+      if (count != null && count > 1) {\n+        throw new ValidatorException(getFacesMessageForKey(\"task.form.label.name.unique\"));\n+      }\n+    } catch (ManagerException ex) {\n+      Logger.getLogger(TaskManager.class.getName()).log(Level.SEVERE, null, ex);\n+    }\n+  }\n+\n+  public String cancelEdit() {\n+    return \"show\";\n+  }\n+\n+  public Task getCurrentTask() {\n+    return currentTask;\n+  }\n+\n+  public void setCurrentTask(Task currentTask) {\n+    this.currentTask = currentTask;\n+  }\n+\n+  public Story getStory() {\n+    return storyManager.getCurrentStory();\n+  }\n+\n+  public void setStory(Story story) {\n+    storyManager.setCurrentStory(story);\n+  }\n+\n+  public StoryManager getStoryManager() {\n+    return storyManager;\n+  }\n+\n+  public void setStoryManager(StoryManager storyManager) {\n+    this.storyManager = storyManager;\n+  }\n+\n+  public String showStories() {\n+    return \"/story/show\";\n+  }\n+\n+\n+  @PreDestroy\n+  public void destroy() {\n+    getLogger(getClass()).log(Level.INFO, \"destroy intance of taskManager\");\n+    currentTask = null;\n+    storyManager = null;\n+  }\n \n }\n",
            "diff_size": 175
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/44/TaskManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/44/TaskManager.java\nindex 4df5e6314d1..0c079966394 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/44/TaskManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/44/TaskManager.java\n@@ -205,8 +205,8 @@ public class TaskManager extends AbstractManager implements Serializable {\n     @PreDestroy\n     public void destroy() {\n         getLogger(getClass()).log(Level.INFO, \"destroy intance of taskManager\");\n-\tcurrentTask = null;\n+currentTask = null;\n \tstoryManager = null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/44/TaskManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/44/TaskManager.java\nindex 4df5e6314d1..b26719d1a32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/44/TaskManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/44/TaskManager.java\n@@ -152,7 +152,8 @@ public class TaskManager extends AbstractManager implements Serializable {\n             Long count = doInTransaction(new PersistenceAction<Long>() {\n \n                 public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((currentTask.isNew()) ? \"task.new.countByNameAndStory\" : \"task.countByNameAndStory\");\n+                    Query query = em.createNamedQuery((currentTask.isNew()\n+                    ) ? \"task.new.countByNameAndStory\" : \"task.countByNameAndStory\");\n                     query.setParameter(\"name\", newName);\n                     query.setParameter(\"story\", storyManager.getCurrentStory());\n                     if (!currentTask.isNew()) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/44/TaskManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/44/TaskManager.java\nindex 4df5e6314d1..5c47cdc417b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/44/TaskManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/44/TaskManager.java\n@@ -152,8 +152,9 @@ public class TaskManager extends AbstractManager implements Serializable {\n             Long count = doInTransaction(new PersistenceAction<Long>() {\n \n                 public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((currentTask.isNew()) ? \"task.new.countByNameAndStory\" : \"task.countByNameAndStory\");\n-                    query.setParameter(\"name\", newName);\n+                    Query query = em.createNamedQuery(\n+                            (currentTask.isNew() ) ? \"task.new.countByNameAndStory\" :\"task.countByNameAndStory\")\n+                    ;query.setParameter(\"name\", newName);\n                     query.setParameter(\"story\", storyManager.getCurrentStory());\n                     if (!currentTask.isNew()) {\n                         query.setParameter(\"currentTask\", (!currentTask.isNew()) ? currentTask : null);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}