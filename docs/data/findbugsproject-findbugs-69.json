{
    "project_name": "findbugsproject-findbugs",
    "error_id": "69",
    "information": {
        "errors": [
            {
                "line": "447",
                "column": "13",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "                buf.append(\" was released \" + format.format(date));\n            buf.append(\n            \t\t\" (you have \" + getPlugin().getVersion()\n                    + \")\");\n            buf.append(\"\\n\");\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/69/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/69/UpdateChecker.java\nindex 9bcc23d9336..2c6759dd3f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/69/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/69/UpdateChecker.java\n@@ -444,7 +444,7 @@ public class UpdateChecker {\n             else\r\n                 buf.append(\" was released \" + format.format(date));\r\n             buf.append(\r\n-            \t\t\" (you have \" + getPlugin().getVersion()\r\n+                    \" (you have \"+ getPlugin().getVersion()\r\n                     + \")\");\r\n             buf.append(\"\\n\");\r\n \r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/69/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/69/UpdateChecker.java\nindex 9bcc23d9336..9e88738126d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/69/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/69/UpdateChecker.java\n@@ -69,12 +69,12 @@ public class UpdateChecker {\n             latch = new CountDownLatch(1);\r\n             startUpdateCheckThread(redirectUri, plugins, latch);\r\n         } else {\r\n-            MultiMap<URI,Plugin> pluginsByUrl = new MultiMap<URI, Plugin>(HashSet.class);\r\n+            MultiMap<URI, Plugin> pluginsByUrl = new MultiMap<URI, Plugin>(HashSet.class);\r\n             for (Plugin plugin : plugins) {\r\n                 URI uri = plugin.getUpdateUrl();\r\n                 if (uri == null) {\r\n                     logError(Level.FINE, \"Not checking for updates for \" + plugin.getShortDescription()\r\n-                            + \" - no update-url attribute in plugin XML file\");\r\n+                        + \" - no update-url attribute in plugin XML file\");\r\n                     continue;\r\n                 }\r\n                 pluginsByUrl.add(uri, plugin);\r\n@@ -84,7 +84,7 @@ public class UpdateChecker {\n                 startUpdateCheckThread(uri, pluginsByUrl.get(uri), latch);\r\n             }\r\n         }\r\n-        \r\n+\r\n         waitForCompletion(latch, force);\r\n     }\r\n \r\n@@ -92,11 +92,13 @@ public class UpdateChecker {\n      * @param force\r\n      * @return\r\n      */\r\n-    public @CheckForNull  URI getRedirectURL(final boolean force) {\r\n+    public @CheckForNull\r\n+    URI getRedirectURL(final boolean force) {\r\n         String redirect = dfc.getGlobalOption(KEY_REDIRECT_ALL_UPDATE_CHECKS);\r\n         String sysprop = System.getProperty(\"findbugs.redirectUpdateChecks\");\r\n-        if (sysprop != null)\r\n+        if (sysprop != null) {\r\n             redirect = sysprop;\r\n+        }\r\n         Plugin setter = dfc.getGlobalOptionSetter(KEY_REDIRECT_ALL_UPDATE_CHECKS);\r\n         URI redirectUri = null;\r\n         String pluginName = setter == null ? \"<unknown plugin>\" : setter.getShortDescription();\r\n@@ -104,7 +106,7 @@ public class UpdateChecker {\n             try {\r\n                 redirectUri = new URI(redirect);\r\n                 logError(Level.INFO, \"Redirecting all plugin update checks to \" + redirectUri + \" (\" + pluginName + \")\");\r\n-                \r\n+\r\n             } catch (URISyntaxException e) {\r\n                 String error = \"Invalid update check redirect URI in \" + pluginName + \": \" + redirect;\r\n                 logError(Level.SEVERE, error);\r\n@@ -117,22 +119,25 @@ public class UpdateChecker {\n \r\n     private long dontWarnAgainUntil() {\r\n         Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\r\n-        \r\n+\r\n         String oldSeen = prefs.get(\"last-plugin-update-seen\", \"\");\r\n-        if (oldSeen == null || oldSeen.equals(\"\"))\r\n+        if (oldSeen == null || oldSeen.equals(\"\")) {\r\n             return 0;\r\n+        }\r\n         try {\r\n-        return Long.parseLong(oldSeen) + DONT_REMIND_WINDOW;\r\n+            return Long.parseLong(oldSeen) + DONT_REMIND_WINDOW;\r\n         } catch (Exception e) {\r\n             return 0;\r\n-        }  \r\n+        }\r\n     }\r\n-    static final long DONT_REMIND_WINDOW = 3L*24*60*60*1000;\r\n+\r\n+    static final long DONT_REMIND_WINDOW = 3L * 24 * 60 * 60 * 1000;\r\n+\r\n     public boolean updatesHaveBeenSeenBefore(Collection<UpdateChecker.PluginUpdate> updates) {\r\n         long now = System.currentTimeMillis();\r\n         Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\r\n         String oldHash = prefs.get(\"last-plugin-update-hash\", \"\");\r\n-        \r\n+\r\n         String newHash = Integer.toString(buildPluginUpdateHash(updates));\r\n         if (oldHash.equals(newHash) && dontWarnAgainUntil() > now) {\r\n             LOGGER.fine(\"Skipping update dialog because these updates have been seen before\");\r\n@@ -146,16 +151,16 @@ public class UpdateChecker {\n     private int buildPluginUpdateHash(Collection<UpdateChecker.PluginUpdate> updates) {\r\n         HashSet<String> builder = new HashSet<String>();\r\n         for (UpdateChecker.PluginUpdate update : updates) {\r\n-            builder.add( update.getPlugin().getPluginId() + update.getVersion());\r\n+            builder.add(update.getPlugin().getPluginId() + update.getVersion());\r\n         }\r\n         return builder.hashCode();\r\n     }\r\n-    \r\n+\r\n     private void waitForCompletion(final CountDownLatch latch, final boolean force) {\r\n         Util.runInDameonThread(new Runnable() {\r\n             public void run() {\r\n                 try {\r\n-                    if (! latch.await(15, TimeUnit.SECONDS)) {\r\n+                    if (!latch.await(15, TimeUnit.SECONDS)) {\r\n                         logError(Level.INFO, \"Update check timed out\");\r\n                     }\r\n                     dfc.pluginUpdateCheckComplete(pluginUpdates, force);\r\n@@ -178,7 +183,7 @@ public class UpdateChecker {\n         String disablingPlugin = null;\r\n         if (\"true\".equalsIgnoreCase(disable)) {\r\n             logError(Level.INFO, \"Skipping update checks due to \" + KEY_DISABLE_ALL_UPDATE_CHECKS + \"=true set by \"\r\n-                    + pluginName);\r\n+                + pluginName);\r\n             disablingPlugin = pluginName;\r\n         } else if (disable != null && !\"false\".equalsIgnoreCase(disable)) {\r\n             String error = \"Unknown value '\" + disable + \"' for \" + KEY_DISABLE_ALL_UPDATE_CHECKS + \" in \" + pluginName;\r\n@@ -194,11 +199,11 @@ public class UpdateChecker {\n             return;\r\n         }\r\n         final String entryPoint = getEntryPoint();\r\n-        if ((entryPoint.contains(\"edu.umd.cs.findbugs.FindBugsTestCase\") \r\n-                || entryPoint.contains(\"edu.umd.cs.findbugs.cloud.appEngine.AbstractWebCloudTest\"))\r\n-                && (url.getScheme().equals(\"http\") || url.getScheme().equals(\"https\"))) {\r\n+        if ((entryPoint.contains(\"edu.umd.cs.findbugs.FindBugsTestCase\")\r\n+            || entryPoint.contains(\"edu.umd.cs.findbugs.cloud.appEngine.AbstractWebCloudTest\"))\r\n+            && (url.getScheme().equals(\"http\") || url.getScheme().equals(\"https\"))) {\r\n             LOGGER.fine(\"Skipping update check because we're running in FindBugsTestCase and using \"\r\n-                    + url.getScheme());\r\n+                + url.getScheme());\r\n             return;\r\n         }\r\n         Util.runInDameonThread(new Runnable() {\r\n@@ -214,7 +219,9 @@ public class UpdateChecker {\n         }, \"Check for updates\");\r\n     }\r\n \r\n-    /** protected for testing */\r\n+    /**\r\n+     * protected for testing\r\n+     */\r\n     protected void actuallyCheckforUpdates(URI url, Collection<Plugin> plugins, String entryPoint) throws IOException {\r\n         LOGGER.fine(\"Checking for updates at \" + url + \" for \" + getPluginNames(plugins));\r\n         HttpURLConnection conn = (HttpURLConnection) url.toURL().openConnection();\r\n@@ -227,7 +234,7 @@ public class UpdateChecker {\n         int responseCode = conn.getResponseCode();\r\n         if (responseCode != 200) {\r\n             logError(SystemProperties.ASSERTIONS_ENABLED ? Level.WARNING : Level.FINE,\r\n-                    \"Error checking for updates at \" + url + \": \"\r\n+                \"Error checking for updates at \" + url + \": \"\r\n                     + responseCode + \" - \" + conn.getResponseMessage());\r\n         } else {\r\n             parseUpdateXml(url, plugins, conn.getInputStream());\r\n@@ -235,7 +242,9 @@ public class UpdateChecker {\n         conn.disconnect();\r\n     }\r\n \r\n-    /** protected for testing */\r\n+    /**\r\n+     * protected for testing\r\n+     */\r\n     protected final void writeXml(OutputStream out, Collection<Plugin> plugins, String entryPoint) throws IOException {\r\n         OutputStreamXMLOutput xmlOutput = new OutputStreamXMLOutput(out);\r\n         try {\r\n@@ -246,15 +255,17 @@ public class UpdateChecker {\n             String applicationName = Version.getApplicationName();\r\n             if (applicationName == null || applicationName.equals(\"\")) {\r\n                 int lastDot = entryPoint.lastIndexOf('.');\r\n-                if (lastDot == -1)\r\n+                if (lastDot == -1) {\r\n                     applicationName = entryPoint;\r\n-                else\r\n+                } else {\r\n                     applicationName = entryPoint.substring(lastDot + 1);\r\n+                }\r\n             }\r\n             xmlOutput.addAttribute(\"app-name\", applicationName);\r\n             String applicationVersion = Version.getApplicationVersion();\r\n-            if (applicationVersion == null)\r\n+            if (applicationVersion == null) {\r\n                 applicationVersion = \"\";\r\n+            }\r\n             xmlOutput.addAttribute(\"app-version\", applicationVersion);\r\n             xmlOutput.addAttribute(\"entry-point\", entryPoint);\r\n             xmlOutput.addAttribute(\"os\", SystemProperties.getProperty(\"os.name\", \"\"));\r\n@@ -270,8 +281,9 @@ public class UpdateChecker {\n                 xmlOutput.addAttribute(\"name\", plugin.getShortDescription());\r\n                 xmlOutput.addAttribute(\"version\", plugin.getVersion());\r\n                 Date date = plugin.getReleaseDate();\r\n-                if (date != null)\r\n+                if (date != null) {\r\n                     xmlOutput.addAttribute(\"release-date\", Long.toString(date.getTime()));\r\n+                }\r\n                 xmlOutput.stopTag(true);\r\n             }\r\n \r\n@@ -283,15 +295,16 @@ public class UpdateChecker {\n     }\r\n \r\n     // package-private for testing\r\n-    @SuppressWarnings({ \"unchecked\" })\r\n+    @SuppressWarnings({\"unchecked\"})\r\n     void parseUpdateXml(URI url, Collection<Plugin> plugins, @WillClose\r\n-    InputStream inputStream) {\r\n+        InputStream inputStream) {\r\n         try {\r\n             Document doc = new SAXReader().read(inputStream);\r\n             List<Element> pluginEls = (List<Element>) doc.selectNodes(\"fb-plugin-updates/plugin\");\r\n             Map<String, Plugin> map = new HashMap<String, Plugin>();\r\n-            for (Plugin p : plugins)\r\n+            for (Plugin p : plugins) {\r\n                 map.put(p.getPluginId(), p);\r\n+            }\r\n             for (Element pluginEl : pluginEls) {\r\n                 String id = pluginEl.attributeValue(\"id\");\r\n                 Plugin plugin = map.get(id);\r\n@@ -317,11 +330,13 @@ public class UpdateChecker {\n     private void checkPluginRelease(Plugin plugin, Element maxEl) {\r\n         @CheckForNull Date updateDate = parseReleaseDate(maxEl);\r\n         @CheckForNull Date installedDate = plugin.getReleaseDate();\r\n-        if (updateDate != null && installedDate != null && updateDate.before(installedDate))\r\n+        if (updateDate != null && installedDate != null && updateDate.before(installedDate)) {\r\n             return;\r\n+        }\r\n         String version = maxEl.attributeValue(\"version\");\r\n-        if (version.equals(plugin.getVersion()))\r\n+        if (version.equals(plugin.getVersion())) {\r\n             return;\r\n+        }\r\n \r\n         String url = maxEl.attributeValue(\"url\");\r\n         String message = maxEl.element(\"message\").getTextTrim();\r\n@@ -339,11 +354,13 @@ public class UpdateChecker {\n         LOGGER.log(Level.INFO, msg, e);\r\n     }\r\n \r\n-    private @CheckForNull Date parseReleaseDate(Element releaseEl) {\r\n+    private @CheckForNull\r\n+    Date parseReleaseDate(Element releaseEl) {\r\n         SimpleDateFormat format = new SimpleDateFormat(PLUGIN_RELEASE_DATE);\r\n         String dateStr = releaseEl.attributeValue(\"date\");\r\n-        if (dateStr == null)\r\n+        if (dateStr == null) {\r\n             return null;\r\n+        }\r\n         try {\r\n             return format.parse(dateStr);\r\n         } catch (Exception e) {\r\n@@ -371,8 +388,10 @@ public class UpdateChecker {\n         }\r\n         return lastFbClass;\r\n     }\r\n-    \r\n-    /** Should only be used once */\r\n+\r\n+    /**\r\n+     * Should only be used once\r\n+     */\r\n     private static Random random = new Random();\r\n \r\n     private static synchronized String getUuid() {\r\n@@ -380,7 +399,7 @@ public class UpdateChecker {\n             Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\r\n             long uuid = prefs.getLong(\"uuid\", 0);\r\n             if (uuid == 0) {\r\n-                uuid = random.nextLong(); \r\n+                uuid = random.nextLong();\r\n                 prefs.putLong(\"uuid\", uuid);\r\n             }\r\n             return Long.toString(uuid, 16);\r\n@@ -393,7 +412,7 @@ public class UpdateChecker {\n         String ver = SystemProperties.getProperty(\"java.version\", \"\");\r\n         Matcher m = Pattern.compile(\"^\\\\d+\\\\.\\\\d+\").matcher(ver);\r\n         if (m.find()) {\r\n-           return m.group();\r\n+            return m.group();\r\n         }\r\n         return \"\";\r\n     }\r\n@@ -401,11 +420,14 @@ public class UpdateChecker {\n     public static class PluginUpdate {\r\n         private final Plugin plugin;\r\n         private final String version;\r\n-        private final @CheckForNull Date date;\r\n-        private final @CheckForNull String url;\r\n-        private final @Nonnull String message;\r\n-\r\n-        private PluginUpdate(Plugin plugin, String version, @CheckForNull  Date date, @CheckForNull String url, @Nonnull String message) {\r\n+        private final @CheckForNull\r\n+        Date date;\r\n+        private final @CheckForNull\r\n+        String url;\r\n+        private final @Nonnull\r\n+        String message;\r\n+\r\n+        private PluginUpdate(Plugin plugin, String version, @CheckForNull Date date, @CheckForNull String url, @Nonnull String message) {\r\n             this.plugin = plugin;\r\n             this.version = version;\r\n             this.date = date;\r\n@@ -421,52 +443,59 @@ public class UpdateChecker {\n             return version;\r\n         }\r\n \r\n-        public @CheckForNull Date getDate() {\r\n+        public @CheckForNull\r\n+        Date getDate() {\r\n             return date;\r\n         }\r\n \r\n-        public @CheckForNull String getUrl() {\r\n+        public @CheckForNull\r\n+        String getUrl() {\r\n             return url;\r\n         }\r\n \r\n-        public @Nonnull String getMessage() {\r\n+        public @Nonnull\r\n+        String getMessage() {\r\n             return message;\r\n         }\r\n-        \r\n+\r\n         @Override\r\n         public String toString() {\r\n             SimpleDateFormat format = new SimpleDateFormat(PLUGIN_RELEASE_DATE);\r\n             StringBuilder buf = new StringBuilder();\r\n             String name = getPlugin().isCorePlugin() ? \"FindBugs\" : \"FindBugs plugin \" + getPlugin().getShortDescription();\r\n-            buf.append( name + \" \" + getVersion() );\r\n-            if (date == null)\r\n+            buf.append(name + \" \" + getVersion());\r\n+            if (date == null) {\r\n                 buf.append(\" has been released\");\r\n-            else\r\n+            } else {\r\n                 buf.append(\" was released \" + format.format(date));\r\n+            }\r\n             buf.append(\r\n-            \t\t\" (you have \" + getPlugin().getVersion()\r\n+                \" (you have \" + getPlugin().getVersion()\r\n                     + \")\");\r\n             buf.append(\"\\n\");\r\n \r\n             buf.append(\"   \" + message.replaceAll(\"\\n\", \"\\n   \"));\r\n \r\n-            if (url != null)\r\n+            if (url != null) {\r\n                 buf.append(\"\\nVisit \" + url + \" for details.\");\r\n+            }\r\n             return buf.toString();\r\n         }\r\n     }\r\n-    \r\n+\r\n     public static void main(String args[]) throws Exception {\r\n         FindBugs.setNoAnalysis();\r\n         DetectorFactoryCollection dfc = DetectorFactoryCollection.instance();\r\n         UpdateChecker checker = dfc.getUpdateChecker();\r\n-        if (checker.updateChecksGloballyDisabled())\r\n+        if (checker.updateChecksGloballyDisabled()) {\r\n             System.out.println(\"Update checkes are globally disabled\");\r\n+        }\r\n         URI redirect = checker.getRedirectURL(false);\r\n-        if (redirect != null)\r\n+        if (redirect != null) {\r\n             System.out.println(\"All update checks redirected to \" + redirect);\r\n+        }\r\n         checker.writeXml(System.out, dfc.plugins(), \"UpdateChecker\");\r\n-        \r\n-        \r\n+\r\n+\r\n     }\r\n }\r\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/69/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/69/UpdateChecker.java\nindex 9bcc23d9336..7ff43d6e501 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/69/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/69/UpdateChecker.java\n@@ -83,16 +83,16 @@ public class UpdateChecker {\n             for (URI uri : pluginsByUrl.keySet()) {\r\n                 startUpdateCheckThread(uri, pluginsByUrl.get(uri), latch);\r\n             }\r\n-        }\r\n-        \r\n-        waitForCompletion(latch, force);\r\n+        }\n+waitForCompletion(latch, force);\r\n     }\r\n \r\n     /**\r\n      * @param force\r\n      * @return\r\n      */\r\n-    public @CheckForNull  URI getRedirectURL(final boolean force) {\r\n+    public @CheckForNull\n+URI getRedirectURL(final boolean force) {\r\n         String redirect = dfc.getGlobalOption(KEY_REDIRECT_ALL_UPDATE_CHECKS);\r\n         String sysprop = System.getProperty(\"findbugs.redirectUpdateChecks\");\r\n         if (sysprop != null)\r\n@@ -103,9 +103,8 @@ public class UpdateChecker {\n         if (redirect != null && !redirect.trim().equals(\"\")) {\r\n             try {\r\n                 redirectUri = new URI(redirect);\r\n-                logError(Level.INFO, \"Redirecting all plugin update checks to \" + redirectUri + \" (\" + pluginName + \")\");\r\n-                \r\n-            } catch (URISyntaxException e) {\r\n+                logError(Level.INFO, \"Redirecting all plugin update checks to \" + redirectUri + \" (\" + pluginName + \")\");\n+    } catch (URISyntaxException e) {\r\n                 String error = \"Invalid update check redirect URI in \" + pluginName + \": \" + redirect;\r\n                 logError(Level.SEVERE, error);\r\n                 dfc.pluginUpdateCheckComplete(pluginUpdates, force);\r\n@@ -116,24 +115,22 @@ public class UpdateChecker {\n     }\r\n \r\n     private long dontWarnAgainUntil() {\r\n-        Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\r\n-        \r\n-        String oldSeen = prefs.get(\"last-plugin-update-seen\", \"\");\r\n+        Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\n+String oldSeen = prefs.get(\"last-plugin-update-seen\", \"\");\r\n         if (oldSeen == null || oldSeen.equals(\"\"))\r\n             return 0;\r\n-        try {\r\n-        return Long.parseLong(oldSeen) + DONT_REMIND_WINDOW;\r\n-        } catch (Exception e) {\r\n+        try {\n+    return Long.parseLong(oldSeen) + DONT_REMIND_WINDOW;\n+    } catch (Exception e) {\r\n             return 0;\r\n         }  \r\n     }\r\n-    static final long DONT_REMIND_WINDOW = 3L*24*60*60*1000;\r\n+    static final long DONT_REMIND_WINDOW = 3L*24*60*60* 1000;\r\n     public boolean updatesHaveBeenSeenBefore(Collection<UpdateChecker.PluginUpdate> updates) {\r\n         long now = System.currentTimeMillis();\r\n         Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\r\n-        String oldHash = prefs.get(\"last-plugin-update-hash\", \"\");\r\n-        \r\n-        String newHash = Integer.toString(buildPluginUpdateHash(updates));\r\n+        String oldHash = prefs.get(\"last-plugin-update-hash\", \"\");\n+String newHash = Integer.toString(buildPluginUpdateHash(updates));\r\n         if (oldHash.equals(newHash) && dontWarnAgainUntil() > now) {\r\n             LOGGER.fine(\"Skipping update dialog because these updates have been seen before\");\r\n             return true;\r\n@@ -146,16 +143,16 @@ public class UpdateChecker {\n     private int buildPluginUpdateHash(Collection<UpdateChecker.PluginUpdate> updates) {\r\n         HashSet<String> builder = new HashSet<String>();\r\n         for (UpdateChecker.PluginUpdate update : updates) {\r\n-            builder.add( update.getPlugin().getPluginId() + update.getVersion());\r\n+            builder.add(update.getPlugin().getPluginId() + update.getVersion());\r\n         }\r\n         return builder.hashCode();\r\n-    }\r\n-    \r\n-    private void waitForCompletion(final CountDownLatch latch, final boolean force) {\r\n-        Util.runInDameonThread(new Runnable() {\r\n+    }\n+\n+private void waitForCompletion(final CountDownLatch latch, final boolean force) {\n+    Util.runInDameonThread(new Runnable() {\r\n             public void run() {\r\n                 try {\r\n-                    if (! latch.await(15, TimeUnit.SECONDS)) {\r\n+                    if (!latch.await(15, TimeUnit.SECONDS)) {\r\n                         logError(Level.INFO, \"Update check timed out\");\r\n                     }\r\n                     dfc.pluginUpdateCheckComplete(pluginUpdates, force);\r\n@@ -194,9 +191,8 @@ public class UpdateChecker {\n             return;\r\n         }\r\n         final String entryPoint = getEntryPoint();\r\n-        if ((entryPoint.contains(\"edu.umd.cs.findbugs.FindBugsTestCase\") \r\n-                || entryPoint.contains(\"edu.umd.cs.findbugs.cloud.appEngine.AbstractWebCloudTest\"))\r\n-                && (url.getScheme().equals(\"http\") || url.getScheme().equals(\"https\"))) {\r\n+        if ((entryPoint.contains(\"edu.umd.cs.findbugs.FindBugsTestCase\") || entryPoint.contains(\"edu.umd.cs.findbugs.cloud.appEngine.AbstractWebCloudTest\"))\n+        && (url.getScheme().equals(\"http\") || url.getScheme().equals(\"https\"))) {\r\n             LOGGER.fine(\"Skipping update check because we're running in FindBugsTestCase and using \"\r\n                     + url.getScheme());\r\n             return;\r\n@@ -315,8 +311,10 @@ public class UpdateChecker {\n     }\r\n \r\n     private void checkPluginRelease(Plugin plugin, Element maxEl) {\r\n-        @CheckForNull Date updateDate = parseReleaseDate(maxEl);\r\n-        @CheckForNull Date installedDate = plugin.getReleaseDate();\r\n+        @CheckForNull\n+Date updateDate = parseReleaseDate(maxEl);\r\n+        @CheckForNull\n+Date installedDate = plugin.getReleaseDate();\r\n         if (updateDate != null && installedDate != null && updateDate.before(installedDate))\r\n             return;\r\n         String version = maxEl.attributeValue(\"version\");\r\n@@ -370,19 +368,19 @@ public class UpdateChecker {\n             }\r\n         }\r\n         return lastFbClass;\r\n-    }\r\n-    \r\n-    /** Should only be used once */\r\n-    private static Random random = new Random();\r\n+    }\n+\n+/** Should only be used once */\n+private static Random random = new Random();\r\n \r\n     private static synchronized String getUuid() {\r\n         try {\r\n             Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\r\n             long uuid = prefs.getLong(\"uuid\", 0);\r\n             if (uuid == 0) {\r\n-                uuid = random.nextLong(); \r\n-                prefs.putLong(\"uuid\", uuid);\r\n-            }\r\n+                uuid = random.nextLong();\n+prefs.putLong(\"uuid\", uuid);\n+    }\r\n             return Long.toString(uuid, 16);\r\n         } catch (Throwable e) {\r\n             return Long.toString(42, 16);\r\n@@ -392,8 +390,8 @@ public class UpdateChecker {\n     private String getMajorJavaVersion() {\r\n         String ver = SystemProperties.getProperty(\"java.version\", \"\");\r\n         Matcher m = Pattern.compile(\"^\\\\d+\\\\.\\\\d+\").matcher(ver);\r\n-        if (m.find()) {\r\n-           return m.group();\r\n+        if (m.find()) {\n+    return m.group();\r\n         }\r\n         return \"\";\r\n     }\r\n@@ -405,7 +403,8 @@ public class UpdateChecker {\n         private final @CheckForNull String url;\r\n         private final @Nonnull String message;\r\n \r\n-        private PluginUpdate(Plugin plugin, String version, @CheckForNull  Date date, @CheckForNull String url, @Nonnull String message) {\r\n+        private PluginUpdate(Plugin plugin, String version, @CheckForNull\n+Date date, @CheckForNull String url, @Nonnull String message) {\r\n             this.plugin = plugin;\r\n             this.version = version;\r\n             this.date = date;\r\n@@ -431,21 +430,19 @@ public class UpdateChecker {\n \r\n         public @Nonnull String getMessage() {\r\n             return message;\r\n-        }\r\n-        \r\n-        @Override\r\n-        public String toString() {\r\n+        }\n+\n+@Override\n+public String toString() {\r\n             SimpleDateFormat format = new SimpleDateFormat(PLUGIN_RELEASE_DATE);\r\n             StringBuilder buf = new StringBuilder();\r\n             String name = getPlugin().isCorePlugin() ? \"FindBugs\" : \"FindBugs plugin \" + getPlugin().getShortDescription();\r\n-            buf.append( name + \" \" + getVersion() );\r\n+            buf.append(name + \" \" + getVersion());\r\n             if (date == null)\r\n                 buf.append(\" has been released\");\r\n             else\r\n                 buf.append(\" was released \" + format.format(date));\r\n-            buf.append(\r\n-            \t\t\" (you have \" + getPlugin().getVersion()\r\n-                    + \")\");\r\n+            buf.append(\" (you have \" + getPlugin().getVersion() + \")\");\r\n             buf.append(\"\\n\");\r\n \r\n             buf.append(\"   \" + message.replaceAll(\"\\n\", \"\\n   \"));\r\n@@ -454,10 +451,10 @@ public class UpdateChecker {\n                 buf.append(\"\\nVisit \" + url + \" for details.\");\r\n             return buf.toString();\r\n         }\r\n-    }\r\n-    \r\n-    public static void main(String args[]) throws Exception {\r\n-        FindBugs.setNoAnalysis();\r\n+    }\n+\n+public static void main(String args[]) throws Exception {\n+    FindBugs.setNoAnalysis();\r\n         DetectorFactoryCollection dfc = DetectorFactoryCollection.instance();\r\n         UpdateChecker checker = dfc.getUpdateChecker();\r\n         if (checker.updateChecksGloballyDisabled())\r\n@@ -465,8 +462,6 @@ public class UpdateChecker {\n         URI redirect = checker.getRedirectURL(false);\r\n         if (redirect != null)\r\n             System.out.println(\"All update checks redirected to \" + redirect);\r\n-        checker.writeXml(System.out, dfc.plugins(), \"UpdateChecker\");\r\n-        \r\n-        \r\n-    }\r\n-}\r\n+        checker.writeXml(System.out, dfc.plugins(), \"UpdateChecker\");\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/69/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/69/UpdateChecker.java\nindex 9bcc23d9336..1d65e33822b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/69/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/69/UpdateChecker.java\n@@ -1,472 +1,488 @@\n-package edu.umd.cs.findbugs.updates;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.io.OutputStream;\r\n-import java.net.HttpURLConnection;\r\n-import java.net.URI;\r\n-import java.net.URISyntaxException;\r\n-import java.text.SimpleDateFormat;\r\n-import java.util.Collection;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Locale;\r\n-import java.util.Map;\r\n-import java.util.Random;\r\n-import java.util.concurrent.CopyOnWriteArrayList;\r\n-import java.util.concurrent.CountDownLatch;\r\n-import java.util.concurrent.TimeUnit;\r\n-import java.util.logging.Level;\r\n-import java.util.logging.Logger;\r\n-import java.util.prefs.Preferences;\r\n-import java.util.regex.Matcher;\r\n-import java.util.regex.Pattern;\r\n-\r\n-import javax.annotation.CheckForNull;\r\n-import javax.annotation.Nonnull;\r\n-import javax.annotation.WillClose;\r\n-\r\n-import org.dom4j.Document;\r\n-import org.dom4j.Element;\r\n-import org.dom4j.io.SAXReader;\r\n-\r\n-import edu.umd.cs.findbugs.DetectorFactoryCollection;\r\n-import edu.umd.cs.findbugs.FindBugs;\r\n-import edu.umd.cs.findbugs.Plugin;\r\n-import edu.umd.cs.findbugs.SystemProperties;\r\n-import edu.umd.cs.findbugs.Version;\r\n-import edu.umd.cs.findbugs.util.MultiMap;\r\n-import edu.umd.cs.findbugs.util.Util;\r\n-import edu.umd.cs.findbugs.xml.OutputStreamXMLOutput;\r\n-\r\n-public class UpdateChecker {\r\n-\r\n-    public static final String PLUGIN_RELEASE_DATE = \"MM/dd/yyyy hh:mm aa z\";\r\n-    private static final Logger LOGGER = Logger.getLogger(UpdateChecker.class.getName());\r\n-    private static final String KEY_DISABLE_ALL_UPDATE_CHECKS = \"noUpdateChecks\";\r\n-    private static final String KEY_REDIRECT_ALL_UPDATE_CHECKS = \"redirectUpdateChecks\";\r\n-    private static final boolean ENV_FB_NO_UPDATE_CHECKS = System.getenv(\"FB_NO_UPDATE_CHECKS\") != null;\r\n-\r\n-    private final UpdateCheckCallback dfc;\r\n-    private final List<PluginUpdate> pluginUpdates = new CopyOnWriteArrayList<PluginUpdate>();\r\n-\r\n-    public UpdateChecker(UpdateCheckCallback dfc) {\r\n-        this.dfc = dfc;\r\n-    }\r\n-\r\n-    public void checkForUpdates(Collection<Plugin> plugins, final boolean force) {\r\n-        if (updateChecksGloballyDisabled()) {\r\n-            dfc.pluginUpdateCheckComplete(pluginUpdates, force);\r\n-            return;\r\n-        }\r\n-\r\n-        URI redirectUri = getRedirectURL(force);\r\n-\r\n-        final CountDownLatch latch;\r\n-        if (redirectUri != null) {\r\n-            latch = new CountDownLatch(1);\r\n-            startUpdateCheckThread(redirectUri, plugins, latch);\r\n-        } else {\r\n-            MultiMap<URI,Plugin> pluginsByUrl = new MultiMap<URI, Plugin>(HashSet.class);\r\n-            for (Plugin plugin : plugins) {\r\n-                URI uri = plugin.getUpdateUrl();\r\n-                if (uri == null) {\r\n-                    logError(Level.FINE, \"Not checking for updates for \" + plugin.getShortDescription()\r\n-                            + \" - no update-url attribute in plugin XML file\");\r\n-                    continue;\r\n-                }\r\n-                pluginsByUrl.add(uri, plugin);\r\n-            }\r\n-            latch = new CountDownLatch(pluginsByUrl.keySet().size());\r\n-            for (URI uri : pluginsByUrl.keySet()) {\r\n-                startUpdateCheckThread(uri, pluginsByUrl.get(uri), latch);\r\n-            }\r\n-        }\r\n-        \r\n-        waitForCompletion(latch, force);\r\n+package edu.umd.cs.findbugs.updates;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.prefs.Preferences;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nonnull;\n+import javax.annotation.WillClose;\n+import org.dom4j.Document;\n+import org.dom4j.Element;\n+import org.dom4j.io.SAXReader;\n+import edu.umd.cs.findbugs.DetectorFactoryCollection;\n+import edu.umd.cs.findbugs.FindBugs;\n+import edu.umd.cs.findbugs.Plugin;\n+import edu.umd.cs.findbugs.SystemProperties;\n+import edu.umd.cs.findbugs.Version;\n+import edu.umd.cs.findbugs.util.MultiMap;\n+import edu.umd.cs.findbugs.util.Util;\n+import edu.umd.cs.findbugs.xml.OutputStreamXMLOutput;\n+\n+public class UpdateChecker {\n+    public static final String PLUGIN_RELEASE_DATE = \"MM/dd/yyyy hh:mm aa z\";\n+\n+    private static final Logger LOGGER = Logger.getLogger(UpdateChecker.class.getName());\n+\n+    private static final String KEY_DISABLE_ALL_UPDATE_CHECKS = \"noUpdateChecks\";\n+\n+    private static final String KEY_REDIRECT_ALL_UPDATE_CHECKS = \"redirectUpdateChecks\";\n+\n+    private static final boolean ENV_FB_NO_UPDATE_CHECKS = System.getenv(\"FB_NO_UPDATE_CHECKS\") != null;\n+\n+    private final UpdateCheckCallback dfc;\n+\n+    private final List<PluginUpdate> pluginUpdates = new CopyOnWriteArrayList<PluginUpdate>();\n+\n+\n+    public UpdateChecker(UpdateCheckCallback dfc) {\n+        this.dfc = dfc;\n+    }\n+\n+\n+    public void checkForUpdates(Collection<Plugin> plugins, final boolean force) {\n+        if (updateChecksGloballyDisabled()) {\n+            dfc.pluginUpdateCheckComplete(pluginUpdates, force);\n+            return;\n+        }\n+        URI redirectUri = getRedirectURL(force);\n+        final CountDownLatch latch;\n+        if (redirectUri != null) {\n+            latch = new CountDownLatch(1);\n+            startUpdateCheckThread(redirectUri, plugins, latch);\n+        } else {\n+            MultiMap<URI, Plugin> pluginsByUrl = new MultiMap<URI, Plugin>(HashSet.class);\n+            for (Plugin plugin : plugins) {\n+                URI uri = plugin.getUpdateUrl();\n+                if (uri == null) {\n+                    logError(Level.FINE,\n+                                          \"Not checking for updates for \" + plugin.getShortDescription() + \" - no update-url attribute in plugin XML file\");\n+                    continue;\n+                }\n+                pluginsByUrl.add(uri, plugin);\n+            }\n+            latch = new CountDownLatch(pluginsByUrl.keySet().size());\n+            for (URI uri : pluginsByUrl.keySet()) {\n+                startUpdateCheckThread(uri, pluginsByUrl.get(uri), latch);\n+            }\n+        }\n+        waitForCompletion(latch, force);\n     }\r\n \r\n     /**\r\n      * @param force\r\n      * @return\r\n-     */\r\n-    public @CheckForNull  URI getRedirectURL(final boolean force) {\r\n-        String redirect = dfc.getGlobalOption(KEY_REDIRECT_ALL_UPDATE_CHECKS);\r\n-        String sysprop = System.getProperty(\"findbugs.redirectUpdateChecks\");\r\n-        if (sysprop != null)\r\n-            redirect = sysprop;\r\n-        Plugin setter = dfc.getGlobalOptionSetter(KEY_REDIRECT_ALL_UPDATE_CHECKS);\r\n-        URI redirectUri = null;\r\n-        String pluginName = setter == null ? \"<unknown plugin>\" : setter.getShortDescription();\r\n-        if (redirect != null && !redirect.trim().equals(\"\")) {\r\n-            try {\r\n-                redirectUri = new URI(redirect);\r\n-                logError(Level.INFO, \"Redirecting all plugin update checks to \" + redirectUri + \" (\" + pluginName + \")\");\r\n-                \r\n-            } catch (URISyntaxException e) {\r\n-                String error = \"Invalid update check redirect URI in \" + pluginName + \": \" + redirect;\r\n-                logError(Level.SEVERE, error);\r\n-                dfc.pluginUpdateCheckComplete(pluginUpdates, force);\r\n-                throw new IllegalStateException(error);\r\n-            }\r\n-        }\r\n-        return redirectUri;\r\n+     */\n+\n+    public @CheckForNull\n+    URI getRedirectURL(final boolean force) {\n+        String redirect = dfc.getGlobalOption(KEY_REDIRECT_ALL_UPDATE_CHECKS);\n+        String sysprop = System.getProperty(\"findbugs.redirectUpdateChecks\");\n+        if (sysprop != null)\n+            redirect = sysprop;\n+        Plugin setter = dfc.getGlobalOptionSetter(KEY_REDIRECT_ALL_UPDATE_CHECKS);\n+        URI redirectUri = null;\n+        String pluginName = setter == null ? \"<unknown plugin>\" : setter.getShortDescription();\n+        if (redirect != null && !redirect.trim().equals(\"\")) {\n+            try {\n+                redirectUri = new URI(redirect);\n+                logError(Level.INFO, \"Redirecting all plugin update checks to \" + redirectUri + \" (\" + pluginName + \")\");\n+            } catch (URISyntaxException e) {\n+                String error = \"Invalid update check redirect URI in \" + pluginName + \": \" + redirect;\n+                logError(Level.SEVERE, error);\n+                dfc.pluginUpdateCheckComplete(pluginUpdates, force);\n+                throw new IllegalStateException(error);\n+            }\n+        }\n+        return redirectUri;\n+    }\n+\n+\n+    private long dontWarnAgainUntil() {\n+        Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\n+        String oldSeen = prefs.get(\"last-plugin-update-seen\", \"\");\n+        if (oldSeen == null || oldSeen.equals(\"\"))\n+            return 0;\n+        try {\n+            return Long.parseLong(oldSeen) + DONT_REMIND_WINDOW;\n+        } catch (Exception e) {\n+            return 0;\n+        }\n+    }\n+\n+    static final long DONT_REMIND_WINDOW = 3L * 24 * 60 * 60 * 1000;\n+\n+    public boolean updatesHaveBeenSeenBefore(Collection<UpdateChecker.PluginUpdate> updates) {\n+        long now = System.currentTimeMillis();\n+        Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\n+        String oldHash = prefs.get(\"last-plugin-update-hash\", \"\");\n+        String newHash = Integer.toString(buildPluginUpdateHash(updates));\n+        if (oldHash.equals(newHash) && dontWarnAgainUntil() > now) {\n+            LOGGER.fine(\"Skipping update dialog because these updates have been seen before\");\n+            return true;\n+        }\n+        prefs.put(\"last-plugin-update-hash\", newHash);\n+        prefs.put(\"last-plugin-update-seen\", Long.toString(now));\n+        return false;\n+    }\n+\n+\n+    private int buildPluginUpdateHash(Collection<UpdateChecker.PluginUpdate> updates) {\n+        HashSet<String> builder = new HashSet<String>();\n+        for (UpdateChecker.PluginUpdate update : updates) {\n+            builder.add(update.getPlugin().getPluginId() + update.getVersion());\n+        }\n+        return builder.hashCode();\n+    }\n+\n+\n+    private void waitForCompletion(final CountDownLatch latch, final boolean force) {\n+        Util.runInDameonThread(new Runnable() {\n+            public void run() {\n+                try {\n+                    if (!latch.await(15, TimeUnit.SECONDS)) {\n+                        logError(Level.INFO, \"Update check timed out\");\n+                    }\n+                    dfc.pluginUpdateCheckComplete(pluginUpdates, force);\n+                } catch (Exception ignored) {\n+                    assert true;\n+                }\n+            }\n+        }, \"Plugin update checker\");\n+    }\n+\n+    public boolean updateChecksGloballyDisabled() {\n+        return ENV_FB_NO_UPDATE_CHECKS || getPluginThatDisabledUpdateChecks() != null;\n+    }\n+\n+    public String getPluginThatDisabledUpdateChecks() {\n+        String disable = dfc.getGlobalOption(KEY_DISABLE_ALL_UPDATE_CHECKS);\n+        Plugin setter = dfc.getGlobalOptionSetter(KEY_DISABLE_ALL_UPDATE_CHECKS);\n+        String pluginName = setter == null ? \"<unknown plugin>\" : setter.getShortDescription();\n+        String disablingPlugin = null;\n+        if (\"true\".equalsIgnoreCase(disable)) {\n+            logError(Level.INFO, \"Skipping update checks due to \" + KEY_DISABLE_ALL_UPDATE_CHECKS + \"=true set by \" + pluginName);\n+            disablingPlugin = pluginName;\n+        } else if (disable != null && !\"false\".equalsIgnoreCase(disable)) {\n+            String error = \"Unknown value '\" + disable + \"' for \" + KEY_DISABLE_ALL_UPDATE_CHECKS + \" in \" + pluginName;\n+            logError(Level.SEVERE, error);\n+            throw new IllegalStateException(error);\n+        }\n+        return disablingPlugin;\n+    }\n+\n+\n+    private void startUpdateCheckThread(final URI url, final Collection<Plugin> plugins, final CountDownLatch latch) {\n+        if (url == null) {\n+            logError(Level.INFO, \"Not checking for plugin updates w/ blank URL: \" + getPluginNames(plugins));\n+            return;\n+        }\n+        final String entryPoint = getEntryPoint();\n+        if ((entryPoint.contains(\"edu.umd.cs.findbugs.FindBugsTestCase\") || entryPoint.contains(\"edu.umd.cs.findbugs.cloud.appEngine.AbstractWebCloudTest\")) && (url.getScheme().equals(\"http\") || url.getScheme().equals(\"https\"))) {\n+            LOGGER.fine(\"Skipping update check because we're running in FindBugsTestCase and using \" + url.getScheme());\n+            return;\n+        }\n+        Util.runInDameonThread(new Runnable() {\n+            public void run() {\n+                try {\n+                    actuallyCheckforUpdates(url, plugins, entryPoint);\n+                } catch (Exception e) {\n+                    logError(e, \"Error doing update check at \" + url);\n+                } finally {\n+                    latch.countDown();\n+                }\n+            }\n+        }, \"Check for updates\");\n     }\r\n \r\n-    private long dontWarnAgainUntil() {\r\n-        Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\r\n-        \r\n-        String oldSeen = prefs.get(\"last-plugin-update-seen\", \"\");\r\n-        if (oldSeen == null || oldSeen.equals(\"\"))\r\n-            return 0;\r\n-        try {\r\n-        return Long.parseLong(oldSeen) + DONT_REMIND_WINDOW;\r\n-        } catch (Exception e) {\r\n-            return 0;\r\n-        }  \r\n-    }\r\n-    static final long DONT_REMIND_WINDOW = 3L*24*60*60*1000;\r\n-    public boolean updatesHaveBeenSeenBefore(Collection<UpdateChecker.PluginUpdate> updates) {\r\n-        long now = System.currentTimeMillis();\r\n-        Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\r\n-        String oldHash = prefs.get(\"last-plugin-update-hash\", \"\");\r\n-        \r\n-        String newHash = Integer.toString(buildPluginUpdateHash(updates));\r\n-        if (oldHash.equals(newHash) && dontWarnAgainUntil() > now) {\r\n-            LOGGER.fine(\"Skipping update dialog because these updates have been seen before\");\r\n-            return true;\r\n-        }\r\n-        prefs.put(\"last-plugin-update-hash\", newHash);\r\n-        prefs.put(\"last-plugin-update-seen\", Long.toString(now));\r\n-        return false;\r\n+    /** protected for testing */\n+\n+    protected void actuallyCheckforUpdates(URI url, Collection<Plugin> plugins, String entryPoint) throws IOException {\n+        LOGGER.fine(\"Checking for updates at \" + url + \" for \" + getPluginNames(plugins));\n+        HttpURLConnection conn = (HttpURLConnection) url.toURL().openConnection();\n+        conn.setDoInput(true);\n+        conn.setDoOutput(true);\n+        conn.setRequestMethod(\"POST\");\n+        conn.connect();\n+        OutputStream out = conn.getOutputStream();\n+        writeXml(out, plugins, entryPoint);\n+        int responseCode = conn.getResponseCode();\n+        if (responseCode != 200) {\n+            logError(SystemProperties.ASSERTIONS_ENABLED ? Level.WARNING : Level.FINE,\n+                                                                                                                      \"Error checking for updates at \" + url + \": \" + responseCode + \" - \" + conn.getResponseMessage());\n+        } else {\n+            parseUpdateXml(url, plugins, conn.getInputStream());\n+        }\n+        conn.disconnect();\n     }\r\n \r\n-    private int buildPluginUpdateHash(Collection<UpdateChecker.PluginUpdate> updates) {\r\n-        HashSet<String> builder = new HashSet<String>();\r\n-        for (UpdateChecker.PluginUpdate update : updates) {\r\n-            builder.add( update.getPlugin().getPluginId() + update.getVersion());\r\n-        }\r\n-        return builder.hashCode();\r\n+    /** protected for testing */\n+\n+    protected final void writeXml(OutputStream out, Collection<Plugin> plugins, String entryPoint) throws IOException {\n+        OutputStreamXMLOutput xmlOutput = new OutputStreamXMLOutput(out);\n+        try {\n+            xmlOutput.beginDocument();\n+            xmlOutput.startTag(\"findbugs-invocation\");\n+            xmlOutput.addAttribute(\"version\", Version.RELEASE);\n+            String applicationName = Version.getApplicationName();\n+            if (applicationName == null || applicationName.equals(\"\")) {\n+                int lastDot = entryPoint.lastIndexOf('.');\n+                if (lastDot == -1)\n+                    applicationName = entryPoint;\n+                else\n+                    applicationName = entryPoint.substring(lastDot + 1);\n+            }\n+            xmlOutput.addAttribute(\"app-name\", applicationName);\n+            String applicationVersion = Version.getApplicationVersion();\n+            if (applicationVersion == null)\n+                applicationVersion = \"\";\n+            xmlOutput.addAttribute(\"app-version\", applicationVersion);\n+            xmlOutput.addAttribute(\"entry-point\", entryPoint);\n+            xmlOutput.addAttribute(\"os\", SystemProperties.getProperty(\"os.name\", \"\"));\n+            xmlOutput.addAttribute(\"java-version\", getMajorJavaVersion());\n+            Locale locale = Locale.getDefault();\n+            xmlOutput.addAttribute(\"language\", locale.getLanguage());\n+            xmlOutput.addAttribute(\"country\", locale.getCountry());\n+            xmlOutput.addAttribute(\"uuid\", getUuid());\n+            xmlOutput.stopTag(false);\n+            for (Plugin plugin : plugins) {\n+                xmlOutput.startTag(\"plugin\");\n+                xmlOutput.addAttribute(\"id\", plugin.getPluginId());\n+                xmlOutput.addAttribute(\"name\", plugin.getShortDescription());\n+                xmlOutput.addAttribute(\"version\", plugin.getVersion());\n+                Date date = plugin.getReleaseDate();\n+                if (date != null)\n+                    xmlOutput.addAttribute(\"release-date\", Long.toString(date.getTime()));\n+                xmlOutput.stopTag(true);\n+            }\n+            xmlOutput.closeTag(\"findbugs-invocation\");\n+            xmlOutput.flush();\n+        } finally {\n+            xmlOutput.finish();\n+        }\n     }\r\n-    \r\n-    private void waitForCompletion(final CountDownLatch latch, final boolean force) {\r\n-        Util.runInDameonThread(new Runnable() {\r\n-            public void run() {\r\n-                try {\r\n-                    if (! latch.await(15, TimeUnit.SECONDS)) {\r\n-                        logError(Level.INFO, \"Update check timed out\");\r\n-                    }\r\n-                    dfc.pluginUpdateCheckComplete(pluginUpdates, force);\r\n-                } catch (Exception ignored) {\r\n-                    assert true;\r\n-                }\r\n \r\n-            }\r\n-        }, \"Plugin update checker\");\r\n+    // package-private for testing\n+\n+    @SuppressWarnings({ \"unchecked\" })\n+    void parseUpdateXml(URI url, Collection<Plugin> plugins, @WillClose InputStream inputStream) {\n+        try {\n+            Document doc = new SAXReader().read(inputStream);\n+            List<Element> pluginEls = (List<Element>) doc.selectNodes(\"fb-plugin-updates/plugin\");\n+            Map<String, Plugin> map = new HashMap<String, Plugin>();\n+            for (Plugin p : plugins)\n+                map.put(p.getPluginId(), p);\n+            for (Element pluginEl : pluginEls) {\n+                String id = pluginEl.attributeValue(\"id\");\n+                Plugin plugin = map.get(id);\n+                if (plugin != null) {\n+                    checkPlugin(pluginEl, plugin);\n+                }\n+            }\n+        } catch (Exception e) {\n+            logError(e, \"Could not parse plugin version update for \" + url);\n+        } finally {\n+            Util.closeSilently(inputStream);\n+        }\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\" })\n+    private void checkPlugin(Element pluginEl, Plugin plugin) {\n+        for (Element release : (List<Element>) pluginEl.elements(\"release\")) {\n+            checkPluginRelease(plugin, release);\n+        }\n+    }\n+\n+\n+    private void checkPluginRelease(Plugin plugin, Element maxEl) {\n+        @CheckForNull\n+        Date updateDate = parseReleaseDate(maxEl);\n+        @CheckForNull\n+        Date installedDate = plugin.getReleaseDate();\n+        if (updateDate != null && installedDate != null && updateDate.before(installedDate))\n+            return;\n+        String version = maxEl.attributeValue(\"version\");\n+        if (version.equals(plugin.getVersion()))\n+            return;\n+        String url = maxEl.attributeValue(\"url\");\n+        String message = maxEl.element(\"message\").getTextTrim();\n+        pluginUpdates.add(new PluginUpdate(plugin, version, updateDate, url, message));\n     }\r\n \r\n-    public boolean updateChecksGloballyDisabled() {\r\n-        return ENV_FB_NO_UPDATE_CHECKS || getPluginThatDisabledUpdateChecks() != null;\r\n+    // protected for testing\n+\n+    protected void logError(Level level, String msg) {\n+        LOGGER.log(level, msg);\n     }\r\n \r\n-    public String getPluginThatDisabledUpdateChecks() {\r\n-        String disable = dfc.getGlobalOption(KEY_DISABLE_ALL_UPDATE_CHECKS);\r\n-        Plugin setter = dfc.getGlobalOptionSetter(KEY_DISABLE_ALL_UPDATE_CHECKS);\r\n-        String pluginName = setter == null ? \"<unknown plugin>\" : setter.getShortDescription();\r\n-        String disablingPlugin = null;\r\n-        if (\"true\".equalsIgnoreCase(disable)) {\r\n-            logError(Level.INFO, \"Skipping update checks due to \" + KEY_DISABLE_ALL_UPDATE_CHECKS + \"=true set by \"\r\n-                    + pluginName);\r\n-            disablingPlugin = pluginName;\r\n-        } else if (disable != null && !\"false\".equalsIgnoreCase(disable)) {\r\n-            String error = \"Unknown value '\" + disable + \"' for \" + KEY_DISABLE_ALL_UPDATE_CHECKS + \" in \" + pluginName;\r\n-            logError(Level.SEVERE, error);\r\n-            throw new IllegalStateException(error);\r\n-        }\r\n-        return disablingPlugin;\r\n-    }\r\n-\r\n-    private void startUpdateCheckThread(final URI url, final Collection<Plugin> plugins, final CountDownLatch latch) {\r\n-        if (url == null) {\r\n-            logError(Level.INFO, \"Not checking for plugin updates w/ blank URL: \" + getPluginNames(plugins));\r\n-            return;\r\n-        }\r\n-        final String entryPoint = getEntryPoint();\r\n-        if ((entryPoint.contains(\"edu.umd.cs.findbugs.FindBugsTestCase\") \r\n-                || entryPoint.contains(\"edu.umd.cs.findbugs.cloud.appEngine.AbstractWebCloudTest\"))\r\n-                && (url.getScheme().equals(\"http\") || url.getScheme().equals(\"https\"))) {\r\n-            LOGGER.fine(\"Skipping update check because we're running in FindBugsTestCase and using \"\r\n-                    + url.getScheme());\r\n-            return;\r\n-        }\r\n-        Util.runInDameonThread(new Runnable() {\r\n-            public void run() {\r\n-                try {\r\n-                    actuallyCheckforUpdates(url, plugins, entryPoint);\r\n-                } catch (Exception e) {\r\n-                    logError(e, \"Error doing update check at \" + url);\r\n-                } finally {\r\n-                    latch.countDown();\r\n-                }\r\n-            }\r\n-        }, \"Check for updates\");\r\n-    }\r\n-\r\n-    /** protected for testing */\r\n-    protected void actuallyCheckforUpdates(URI url, Collection<Plugin> plugins, String entryPoint) throws IOException {\r\n-        LOGGER.fine(\"Checking for updates at \" + url + \" for \" + getPluginNames(plugins));\r\n-        HttpURLConnection conn = (HttpURLConnection) url.toURL().openConnection();\r\n-        conn.setDoInput(true);\r\n-        conn.setDoOutput(true);\r\n-        conn.setRequestMethod(\"POST\");\r\n-        conn.connect();\r\n-        OutputStream out = conn.getOutputStream();\r\n-        writeXml(out, plugins, entryPoint);\r\n-        int responseCode = conn.getResponseCode();\r\n-        if (responseCode != 200) {\r\n-            logError(SystemProperties.ASSERTIONS_ENABLED ? Level.WARNING : Level.FINE,\r\n-                    \"Error checking for updates at \" + url + \": \"\r\n-                    + responseCode + \" - \" + conn.getResponseMessage());\r\n-        } else {\r\n-            parseUpdateXml(url, plugins, conn.getInputStream());\r\n-        }\r\n-        conn.disconnect();\r\n-    }\r\n-\r\n-    /** protected for testing */\r\n-    protected final void writeXml(OutputStream out, Collection<Plugin> plugins, String entryPoint) throws IOException {\r\n-        OutputStreamXMLOutput xmlOutput = new OutputStreamXMLOutput(out);\r\n-        try {\r\n-            xmlOutput.beginDocument();\r\n-\r\n-            xmlOutput.startTag(\"findbugs-invocation\");\r\n-            xmlOutput.addAttribute(\"version\", Version.RELEASE);\r\n-            String applicationName = Version.getApplicationName();\r\n-            if (applicationName == null || applicationName.equals(\"\")) {\r\n-                int lastDot = entryPoint.lastIndexOf('.');\r\n-                if (lastDot == -1)\r\n-                    applicationName = entryPoint;\r\n-                else\r\n-                    applicationName = entryPoint.substring(lastDot + 1);\r\n-            }\r\n-            xmlOutput.addAttribute(\"app-name\", applicationName);\r\n-            String applicationVersion = Version.getApplicationVersion();\r\n-            if (applicationVersion == null)\r\n-                applicationVersion = \"\";\r\n-            xmlOutput.addAttribute(\"app-version\", applicationVersion);\r\n-            xmlOutput.addAttribute(\"entry-point\", entryPoint);\r\n-            xmlOutput.addAttribute(\"os\", SystemProperties.getProperty(\"os.name\", \"\"));\r\n-            xmlOutput.addAttribute(\"java-version\", getMajorJavaVersion());\r\n-            Locale locale = Locale.getDefault();\r\n-            xmlOutput.addAttribute(\"language\", locale.getLanguage());\r\n-            xmlOutput.addAttribute(\"country\", locale.getCountry());\r\n-            xmlOutput.addAttribute(\"uuid\", getUuid());\r\n-            xmlOutput.stopTag(false);\r\n-            for (Plugin plugin : plugins) {\r\n-                xmlOutput.startTag(\"plugin\");\r\n-                xmlOutput.addAttribute(\"id\", plugin.getPluginId());\r\n-                xmlOutput.addAttribute(\"name\", plugin.getShortDescription());\r\n-                xmlOutput.addAttribute(\"version\", plugin.getVersion());\r\n-                Date date = plugin.getReleaseDate();\r\n-                if (date != null)\r\n-                    xmlOutput.addAttribute(\"release-date\", Long.toString(date.getTime()));\r\n-                xmlOutput.stopTag(true);\r\n-            }\r\n-\r\n-            xmlOutput.closeTag(\"findbugs-invocation\");\r\n-            xmlOutput.flush();\r\n-        } finally {\r\n-            xmlOutput.finish();\r\n-        }\r\n-    }\r\n-\r\n-    // package-private for testing\r\n-    @SuppressWarnings({ \"unchecked\" })\r\n-    void parseUpdateXml(URI url, Collection<Plugin> plugins, @WillClose\r\n-    InputStream inputStream) {\r\n-        try {\r\n-            Document doc = new SAXReader().read(inputStream);\r\n-            List<Element> pluginEls = (List<Element>) doc.selectNodes(\"fb-plugin-updates/plugin\");\r\n-            Map<String, Plugin> map = new HashMap<String, Plugin>();\r\n-            for (Plugin p : plugins)\r\n-                map.put(p.getPluginId(), p);\r\n-            for (Element pluginEl : pluginEls) {\r\n-                String id = pluginEl.attributeValue(\"id\");\r\n-                Plugin plugin = map.get(id);\r\n-                if (plugin != null) {\r\n-                    checkPlugin(pluginEl, plugin);\r\n-                }\r\n-\r\n-            }\r\n-        } catch (Exception e) {\r\n-            logError(e, \"Could not parse plugin version update for \" + url);\r\n-        } finally {\r\n-            Util.closeSilently(inputStream);\r\n-        }\r\n-    }\r\n-\r\n-    @SuppressWarnings({\"unchecked\"})\r\n-    private void checkPlugin(Element pluginEl, Plugin plugin) {\r\n-        for (Element release : (List<Element>) pluginEl.elements(\"release\")) {\r\n-            checkPluginRelease(plugin, release);\r\n-        }\r\n-    }\r\n-\r\n-    private void checkPluginRelease(Plugin plugin, Element maxEl) {\r\n-        @CheckForNull Date updateDate = parseReleaseDate(maxEl);\r\n-        @CheckForNull Date installedDate = plugin.getReleaseDate();\r\n-        if (updateDate != null && installedDate != null && updateDate.before(installedDate))\r\n-            return;\r\n-        String version = maxEl.attributeValue(\"version\");\r\n-        if (version.equals(plugin.getVersion()))\r\n-            return;\r\n-\r\n-        String url = maxEl.attributeValue(\"url\");\r\n-        String message = maxEl.element(\"message\").getTextTrim();\r\n-\r\n-        pluginUpdates.add(new PluginUpdate(plugin, version, updateDate, url, message));\r\n-    }\r\n-\r\n-    // protected for testing\r\n-    protected void logError(Level level, String msg) {\r\n-        LOGGER.log(level, msg);\r\n-    }\r\n-\r\n-    // protected for testing\r\n-    protected void logError(Exception e, String msg) {\r\n-        LOGGER.log(Level.INFO, msg, e);\r\n-    }\r\n-\r\n-    private @CheckForNull Date parseReleaseDate(Element releaseEl) {\r\n-        SimpleDateFormat format = new SimpleDateFormat(PLUGIN_RELEASE_DATE);\r\n-        String dateStr = releaseEl.attributeValue(\"date\");\r\n-        if (dateStr == null)\r\n-            return null;\r\n-        try {\r\n-            return format.parse(dateStr);\r\n-        } catch (Exception e) {\r\n-            throw new IllegalArgumentException(\"Error parsing \" + dateStr, e);\r\n-        }\r\n-    }\r\n-\r\n-    private String getPluginNames(Collection<Plugin> plugins) {\r\n-        String text = \"\";\r\n-        boolean first = true;\r\n-        for (Plugin plugin : plugins) {\r\n-            text = (first ? \"\" : \", \") + plugin.getShortDescription();\r\n-            first = false;\r\n-        }\r\n-        return text;\r\n-    }\r\n-\r\n-    private String getEntryPoint() {\r\n-        String lastFbClass = \"<UNKNOWN>\";\r\n-        for (StackTraceElement s : Thread.currentThread().getStackTrace()) {\r\n-            String cls = s.getClassName();\r\n-            if (cls.startsWith(\"edu.umd.cs.findbugs.\")) {\r\n-                lastFbClass = cls;\r\n-            }\r\n-        }\r\n-        return lastFbClass;\r\n-    }\r\n-    \r\n-    /** Should only be used once */\r\n-    private static Random random = new Random();\r\n-\r\n-    private static synchronized String getUuid() {\r\n-        try {\r\n-            Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\r\n-            long uuid = prefs.getLong(\"uuid\", 0);\r\n-            if (uuid == 0) {\r\n-                uuid = random.nextLong(); \r\n-                prefs.putLong(\"uuid\", uuid);\r\n-            }\r\n-            return Long.toString(uuid, 16);\r\n-        } catch (Throwable e) {\r\n-            return Long.toString(42, 16);\r\n-        }\r\n-    }\r\n-\r\n-    private String getMajorJavaVersion() {\r\n-        String ver = SystemProperties.getProperty(\"java.version\", \"\");\r\n-        Matcher m = Pattern.compile(\"^\\\\d+\\\\.\\\\d+\").matcher(ver);\r\n-        if (m.find()) {\r\n-           return m.group();\r\n-        }\r\n-        return \"\";\r\n-    }\r\n-\r\n-    public static class PluginUpdate {\r\n-        private final Plugin plugin;\r\n-        private final String version;\r\n-        private final @CheckForNull Date date;\r\n-        private final @CheckForNull String url;\r\n-        private final @Nonnull String message;\r\n-\r\n-        private PluginUpdate(Plugin plugin, String version, @CheckForNull  Date date, @CheckForNull String url, @Nonnull String message) {\r\n-            this.plugin = plugin;\r\n-            this.version = version;\r\n-            this.date = date;\r\n-            this.url = url;\r\n-            this.message = message;\r\n-        }\r\n-\r\n-        public Plugin getPlugin() {\r\n-            return plugin;\r\n-        }\r\n-\r\n-        public String getVersion() {\r\n-            return version;\r\n-        }\r\n-\r\n-        public @CheckForNull Date getDate() {\r\n-            return date;\r\n-        }\r\n-\r\n-        public @CheckForNull String getUrl() {\r\n-            return url;\r\n-        }\r\n-\r\n-        public @Nonnull String getMessage() {\r\n-            return message;\r\n-        }\r\n-        \r\n-        @Override\r\n-        public String toString() {\r\n-            SimpleDateFormat format = new SimpleDateFormat(PLUGIN_RELEASE_DATE);\r\n-            StringBuilder buf = new StringBuilder();\r\n-            String name = getPlugin().isCorePlugin() ? \"FindBugs\" : \"FindBugs plugin \" + getPlugin().getShortDescription();\r\n-            buf.append( name + \" \" + getVersion() );\r\n-            if (date == null)\r\n-                buf.append(\" has been released\");\r\n-            else\r\n-                buf.append(\" was released \" + format.format(date));\r\n-            buf.append(\r\n-            \t\t\" (you have \" + getPlugin().getVersion()\r\n-                    + \")\");\r\n-            buf.append(\"\\n\");\r\n-\r\n-            buf.append(\"   \" + message.replaceAll(\"\\n\", \"\\n   \"));\r\n-\r\n-            if (url != null)\r\n-                buf.append(\"\\nVisit \" + url + \" for details.\");\r\n-            return buf.toString();\r\n-        }\r\n+    // protected for testing\n+\n+    protected void logError(Exception e, String msg) {\n+        LOGGER.log(Level.INFO, msg, e);\n+    }\n+\n+\n+    private @CheckForNull\n+    Date parseReleaseDate(Element releaseEl) {\n+        SimpleDateFormat format = new SimpleDateFormat(PLUGIN_RELEASE_DATE);\n+        String dateStr = releaseEl.attributeValue(\"date\");\n+        if (dateStr == null)\n+            return null;\n+        try {\n+            return format.parse(dateStr);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Error parsing \" + dateStr, e);\n+        }\n+    }\n+\n+\n+    private String getPluginNames(Collection<Plugin> plugins) {\n+        String text = \"\";\n+        boolean first = true;\n+        for (Plugin plugin : plugins) {\n+            text = (first ? \"\" : \", \") + plugin.getShortDescription();\n+            first = false;\n+        }\n+        return text;\n+    }\n+\n+\n+    private String getEntryPoint() {\n+        String lastFbClass = \"<UNKNOWN>\";\n+        for (StackTraceElement s : Thread.currentThread().getStackTrace()) {\n+            String cls = s.getClassName();\n+            if (cls.startsWith(\"edu.umd.cs.findbugs.\")) {\n+                lastFbClass = cls;\n+            }\n+        }\n+        return lastFbClass;\n     }\r\n     \r\n-    public static void main(String args[]) throws Exception {\r\n-        FindBugs.setNoAnalysis();\r\n-        DetectorFactoryCollection dfc = DetectorFactoryCollection.instance();\r\n-        UpdateChecker checker = dfc.getUpdateChecker();\r\n-        if (checker.updateChecksGloballyDisabled())\r\n-            System.out.println(\"Update checkes are globally disabled\");\r\n-        URI redirect = checker.getRedirectURL(false);\r\n-        if (redirect != null)\r\n-            System.out.println(\"All update checks redirected to \" + redirect);\r\n-        checker.writeXml(System.out, dfc.plugins(), \"UpdateChecker\");\r\n-        \r\n-        \r\n-    }\r\n-}\r\n+    /** Should only be used once */\n+\n+\n+    private static Random random = new Random();\n+\n+    private static synchronized String getUuid() {\n+        try {\n+            Preferences prefs = Preferences.userNodeForPackage(UpdateChecker.class);\n+            long uuid = prefs.getLong(\"uuid\", 0);\n+            if (uuid == 0) {\n+                uuid = random.nextLong();\n+                prefs.putLong(\"uuid\", uuid);\n+            }\n+            return Long.toString(uuid, 16);\n+        } catch (Throwable e) {\n+            return Long.toString(42, 16);\n+        }\n+    }\n+\n+\n+    private String getMajorJavaVersion() {\n+        String ver = SystemProperties.getProperty(\"java.version\", \"\");\n+        Matcher m = Pattern.compile(\"^\\\\d+\\\\.\\\\d+\").matcher(ver);\n+        if (m.find()) {\n+            return m.group();\n+        }\n+        return \"\";\n+    }\n+\n+    public static class PluginUpdate {\n+        private final Plugin plugin;\n+\n+        private final String version;\n+\n+        private final @CheckForNull\n+        Date date;\n+\n+        private final @CheckForNull\n+        String url;\n+\n+        private final @Nonnull\n+        String message;\n+\n+        private PluginUpdate(Plugin plugin,\n+            String version,\n+                @CheckForNull Date date,\n+                    @CheckForNull String url, @Nonnull String message) {\n+            this.plugin = plugin;\n+            this.version = version;\n+            this.date = date;\n+            this.url = url;\n+            this.message = message;\n+        }\n+\n+\n+        public Plugin getPlugin() {\n+            return plugin;\n+        }\n+\n+        public String getVersion() {\n+            return version;\n+        }\n+\n+        public @CheckForNull\n+        Date getDate() {\n+            return date;\n+        }\n+\n+        public @CheckForNull\n+        String getUrl() {\n+            return url;\n+        }\n+\n+        public @Nonnull\n+        String getMessage() {\n+            return message;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            SimpleDateFormat format = new SimpleDateFormat(PLUGIN_RELEASE_DATE);\n+            StringBuilder buf = new StringBuilder();\n+            String name = getPlugin().isCorePlugin() ? \"FindBugs\" : \"FindBugs plugin \" + getPlugin().getShortDescription();\n+            buf.append(name + \" \" + getVersion());\n+            if (date == null)\n+                buf.append(\" has been released\");\n+            else\n+                buf.append(\" was released \" + format.format(date));\n+            buf.append(\" (you have \" + getPlugin().getVersion() + \")\");\n+            buf.append(\"\\n\");\n+            buf.append(\"   \" + message.replaceAll(\"\\n\", \"\\n   \"));\n+            if (url != null)\n+                buf.append(\"\\nVisit \" + url + \" for details.\");\n+            return buf.toString();\n+        }\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        FindBugs.setNoAnalysis();\n+        DetectorFactoryCollection dfc = DetectorFactoryCollection.instance();\n+        UpdateChecker checker = dfc.getUpdateChecker();\n+        if (checker.updateChecksGloballyDisabled())\n+            System.out.println(\"Update checkes are globally disabled\");\n+        URI redirect = checker.getRedirectURL(false);\n+        if (redirect != null)\n+            System.out.println(\"All update checks redirected to \" + redirect);\n+        checker.writeXml(System.out, dfc.plugins(), \"UpdateChecker\");\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 732
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/69/UpdateChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/69/UpdateChecker.java\nindex 9bcc23d9336..2c6759dd3f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/69/UpdateChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/69/UpdateChecker.java\n@@ -444,7 +444,7 @@ public class UpdateChecker {\n             else\r\n                 buf.append(\" was released \" + format.format(date));\r\n             buf.append(\r\n-            \t\t\" (you have \" + getPlugin().getVersion()\r\n+                    \" (you have \"+ getPlugin().getVersion()\r\n                     + \")\");\r\n             buf.append(\"\\n\");\r\n \r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "styler_three_grams"
    ]
}