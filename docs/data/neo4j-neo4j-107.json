{
    "project_name": "neo4j-neo4j",
    "error_id": "107",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/107/PhysicalToLogicalTokenChanges2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/107/PhysicalToLogicalTokenChanges2.java\nindex 1cb43a691ad..93ce6dac5cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/107/PhysicalToLogicalTokenChanges2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/107/PhysicalToLogicalTokenChanges2.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.storageengine.api.TokenIndexEntryUpdate;\n@@ -35,7 +36,7 @@ class PhysicalToLogicalTokenChanges2\n      *\n      * @param update {@link TokenIndexEntryUpdate} containing physical before/after state.\n      */\n-    static void convertToAdditionsAndRemovals( TokenIndexEntryUpdate<?> update )\n+    static void convertToAdditionsAndRemovals(TokenIndexEntryUpdate<?> update)\n     {\n         int beforeLength = update.beforeValues().length;\n         int afterLength = update.values().length;\n@@ -44,30 +45,29 @@ class PhysicalToLogicalTokenChanges2\n         int ac = 0;\n         long[] before = update.beforeValues();\n         long[] after = update.values();\n-        for ( int bi = 0, ai = 0; bi < beforeLength || ai < afterLength; )\n+        for (int bi = 0, ai = 0; bi < beforeLength || ai < afterLength; )\n         {\n             long beforeId = bi < beforeLength ? before[bi] : -1;\n             long afterId = ai < afterLength ? after[ai] : -1;\n-            if ( beforeId == afterId )\n+            if (beforeId == afterId)\n             {   // no change\n                 bi++;\n                 ai++;\n                 continue;\n             }\n \n-            if ( smaller( beforeId, afterId ) )\n+            if (smaller(beforeId, afterId))\n             {\n-                while ( smaller( beforeId, afterId ) && bi < beforeLength )\n+                while (smaller(beforeId, afterId) && bi < beforeLength)\n                 {\n                     // looks like there's an id in before which isn't in after ==> REMOVE\n                     update.beforeValues()[bc++] = beforeId;\n                     bi++;\n                     beforeId = bi < beforeLength ? before[bi] : -1;\n                 }\n-            }\n-            else if ( smaller( afterId, beforeId ) )\n+            } else if (smaller(afterId, beforeId))\n             {\n-                while ( smaller( afterId, beforeId ) && ai < afterLength )\n+                while (smaller(afterId, beforeId) && ai < afterLength)\n                 {\n                     // looks like there's an id in after which isn't in before ==> ADD\n                     update.values()[ac++] = afterId;\n@@ -77,18 +77,18 @@ class PhysicalToLogicalTokenChanges2\n             }\n         }\n \n-        terminateWithMinusOneIfNeeded( update.beforeValues(), bc );\n-        terminateWithMinusOneIfNeeded( update.values(), ac );\n+        terminateWithMinusOneIfNeeded(update.beforeValues(), bc);\n+        terminateWithMinusOneIfNeeded(update.values(), ac);\n     }\n \n-    private static boolean smaller( long id, long otherId )\n+    private static boolean smaller(long id, long otherId)\n     {\n         return id != -1 && (otherId == -1 || id < otherId);\n     }\n \n-    private static void terminateWithMinusOneIfNeeded( long[] tokenIds, int actualLength )\n+    private static void terminateWithMinusOneIfNeeded(long[] tokenIds, int actualLength)\n     {\n-        if ( actualLength < tokenIds.length )\n+        if (actualLength < tokenIds.length)\n         {\n             tokenIds[actualLength] = -1;\n         }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}