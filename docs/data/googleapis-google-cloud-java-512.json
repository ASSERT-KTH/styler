{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "512",
    "information": {
        "errors": [
            {
                "line": "103",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    assertEquals(ACK_ID, builtMessage.getAckId());\n    assertEquals(\"newMessageId\", builtMessage.getId());\n    assertArrayEquals(\"newPayload\".getBytes(Charsets.UTF_8), builtMessage.getPayload().toByteArray());\n    assertEquals(\"newPayload\", builtMessage.getPayloadAsString());\n    assertEquals(attributes, builtMessage.getAttributes());\n    assertEquals(PUBLISH_TIME + 1, (long) builtMessage.getPublishTime());",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/512/ReceivedMessageTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/512/ReceivedMessageTest.java\nindex dd2bd636d08..cc45d04cf95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/512/ReceivedMessageTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/512/ReceivedMessageTest.java\n@@ -100,7 +100,8 @@ public class ReceivedMessageTest {\n     assertEquals(SUBSCRIPTION, builtMessage.getSubscription());\n     assertEquals(ACK_ID, builtMessage.getAckId());\n     assertEquals(\"newMessageId\", builtMessage.getId());\n-    assertArrayEquals(\"newPayload\".getBytes(Charsets.UTF_8), builtMessage.getPayload().toByteArray());\n+    assertArrayEquals(\"newPayload\".getBytes(Charsets.UTF_8),\n+        builtMessage.getPayload().toByteArray());\n     assertEquals(\"newPayload\", builtMessage.getPayloadAsString());\n     assertEquals(attributes, builtMessage.getAttributes());\n     assertEquals(PUBLISH_TIME + 1, (long) builtMessage.getPublishTime());\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/512/ReceivedMessageTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/512/ReceivedMessageTest.java\nindex dd2bd636d08..0f95afad727 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/512/ReceivedMessageTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/512/ReceivedMessageTest.java\n@@ -61,8 +61,7 @@ public class ReceivedMessageTest {\n           .setMessage(MESSAGE.toPb())\n           .setAckId(ACK_ID)\n           .build();\n-\n-  private final PubSub serviceMockReturnsOptions = createStrictMock(PubSub.class);\n+private final PubSub serviceMockReturnsOptions = createStrictMock(PubSub.class);\n   private final PubSubOptions mockOptions = createMock(PubSubOptions.class);\n   private PubSub pubsub;\n   private ReceivedMessage expectedMessage;\n@@ -107,8 +106,7 @@ public class ReceivedMessageTest {\n     builtMessage = builtMessage.toBuilder()\n         .setPayload(PAYLOAD)\n         .setId(MESSAGE_ID)\n-        .clearAttributes()\n-        .addAttribute(\"key1\", \"value1\")\n+        .clearAttributes().addAttribute(\"key1\", \"value1\")\n         .addAttribute(\"key2\", \"value2\")\n         .setPublishTime(PUBLISH_TIME)\n         .build();\n@@ -143,8 +141,7 @@ public class ReceivedMessageTest {\n     builtMessage = builtMessage.toBuilder()\n         .payload(PAYLOAD)\n         .setId(MESSAGE_ID)\n-        .clearAttributes()\n-        .addAttribute(\"key1\", \"value1\")\n+        .clearAttributes().addAttribute(\"key1\", \"value1\")\n         .addAttribute(\"key2\", \"value2\")\n         .setPublishTime(PUBLISH_TIME)\n         .build();\n@@ -220,4 +217,4 @@ public class ReceivedMessageTest {\n     assertEquals(expected.getSubscription(), value.getSubscription());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/512/ReceivedMessageTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/512/ReceivedMessageTest.java\nindex dd2bd636d08..3c84dfdf87c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/512/ReceivedMessageTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/512/ReceivedMessageTest.java\n@@ -30,50 +30,36 @@ import com.google.api.client.util.Charsets;\n import com.google.cloud.ByteArray;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.util.concurrent.Futures;\n-\n import org.easymock.EasyMock;\n import org.junit.After;\n import org.junit.Test;\n-\n import java.nio.charset.StandardCharsets;\n import java.util.Map;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n \n+\n public class ReceivedMessageTest {\n \n   private static final String SUBSCRIPTION = \"subscription\";\n   private static final String ACK_ID = \"ackId\";\n   private static final String MESSAGE_ID = \"messageId\";\n   private static final String PAYLOAD_STRING = \"payload\";\n-  private static final ByteArray PAYLOAD =\n-      ByteArray.copyFrom(\"payload\".getBytes(StandardCharsets.UTF_8));\n-  private static final Map<String, String> ATTRIBUTES =\n-      ImmutableMap.of(\"key1\", \"value1\", \"key2\", \"value2\");\n+  private static final ByteArray PAYLOAD = ByteArray.copyFrom(\"payload\".getBytes(StandardCharsets.UTF_8));\n+  private static final Map<String, String> ATTRIBUTES = ImmutableMap.of(\"key1\", \"value1\", \"key2\", \"value2\");\n   private static final Long PUBLISH_TIME = 42L;\n-  private static final Message MESSAGE = Message.newBuilder(PAYLOAD)\n-      .setId(MESSAGE_ID)\n-      .setAttributes(ATTRIBUTES)\n-      .setPublishTime(PUBLISH_TIME)\n-      .build();\n-  private static final com.google.pubsub.v1.ReceivedMessage RECEIVED_MESSAGE_PB =\n-      com.google.pubsub.v1.ReceivedMessage.newBuilder()\n-          .setMessage(MESSAGE.toPb())\n-          .setAckId(ACK_ID)\n-          .build();\n-\n+  private static final Message MESSAGE = Message.newBuilder(PAYLOAD).setId(MESSAGE_ID).setAttributes(ATTRIBUTES).setPublishTime(PUBLISH_TIME).build();\n+  private static final com.google.pubsub.v1.ReceivedMessage RECEIVED_MESSAGE_PB = com.google.pubsub.v1.ReceivedMessage.newBuilder().setMessage(MESSAGE.toPb()).setAckId(ACK_ID).build();\n   private final PubSub serviceMockReturnsOptions = createStrictMock(PubSub.class);\n   private final PubSubOptions mockOptions = createMock(PubSubOptions.class);\n   private PubSub pubsub;\n   private ReceivedMessage expectedMessage;\n   private ReceivedMessage message;\n-\n   private void initializeExpectedMessage(int optionsCalls) {\n     expect(serviceMockReturnsOptions.options()).andReturn(mockOptions).times(optionsCalls);\n     replay(serviceMockReturnsOptions);\n     pubsub = createStrictMock(PubSub.class);\n-    expectedMessage =\n-        ReceivedMessage.fromPb(serviceMockReturnsOptions, SUBSCRIPTION, RECEIVED_MESSAGE_PB);\n+    expectedMessage = ReceivedMessage.fromPb(serviceMockReturnsOptions, SUBSCRIPTION, RECEIVED_MESSAGE_PB);\n   }\n \n   private void initializeMessage() {\n@@ -90,12 +76,7 @@ public class ReceivedMessageTest {\n     initializeExpectedMessage(3);\n     replay(pubsub);\n     Map<String, String> attributes = ImmutableMap.of(\"newKey1\", \"newVal1\");\n-    ReceivedMessage builtMessage = expectedMessage.toBuilder()\n-        .setPayload(\"newPayload\")\n-        .setId(\"newMessageId\")\n-        .setAttributes(attributes)\n-        .setPublishTime(PUBLISH_TIME + 1)\n-        .build();\n+    ReceivedMessage builtMessage = expectedMessage.toBuilder().setPayload(\"newPayload\").setId(\"newMessageId\").setAttributes(attributes).setPublishTime(PUBLISH_TIME + 1).build();\n     assertSame(serviceMockReturnsOptions, builtMessage.getPubsub());\n     assertEquals(SUBSCRIPTION, builtMessage.getSubscription());\n     assertEquals(ACK_ID, builtMessage.getAckId());\n@@ -104,14 +85,7 @@ public class ReceivedMessageTest {\n     assertEquals(\"newPayload\", builtMessage.getPayloadAsString());\n     assertEquals(attributes, builtMessage.getAttributes());\n     assertEquals(PUBLISH_TIME + 1, (long) builtMessage.getPublishTime());\n-    builtMessage = builtMessage.toBuilder()\n-        .setPayload(PAYLOAD)\n-        .setId(MESSAGE_ID)\n-        .clearAttributes()\n-        .addAttribute(\"key1\", \"value1\")\n-        .addAttribute(\"key2\", \"value2\")\n-        .setPublishTime(PUBLISH_TIME)\n-        .build();\n+    builtMessage = builtMessage.toBuilder().setPayload(PAYLOAD).setId(MESSAGE_ID).clearAttributes().addAttribute(\"key1\", \"value1\").addAttribute(\"key2\", \"value2\").setPublishTime(PUBLISH_TIME).build();\n     assertSame(serviceMockReturnsOptions, builtMessage.getPubsub());\n     assertEquals(MESSAGE_ID, builtMessage.getId());\n     assertEquals(PAYLOAD, builtMessage.getPayload());\n@@ -126,12 +100,7 @@ public class ReceivedMessageTest {\n     initializeExpectedMessage(3);\n     replay(pubsub);\n     Map<String, String> attributes = ImmutableMap.of(\"newKey1\", \"newVal1\");\n-    ReceivedMessage builtMessage = expectedMessage.toBuilder()\n-        .payload(\"newPayload\")\n-        .setId(\"newMessageId\")\n-        .attributes(attributes)\n-        .setPublishTime(PUBLISH_TIME + 1)\n-        .build();\n+    ReceivedMessage builtMessage = expectedMessage.toBuilder().payload(\"newPayload\").setId(\"newMessageId\").attributes(attributes).setPublishTime(PUBLISH_TIME + 1).build();\n     assertSame(serviceMockReturnsOptions, builtMessage.pubsub());\n     assertEquals(SUBSCRIPTION, builtMessage.subscription());\n     assertEquals(ACK_ID, builtMessage.ackId());\n@@ -140,14 +109,7 @@ public class ReceivedMessageTest {\n     assertEquals(\"newPayload\", builtMessage.payloadAsString());\n     assertEquals(attributes, builtMessage.attributes());\n     assertEquals(PUBLISH_TIME + 1, (long) builtMessage.publishTime());\n-    builtMessage = builtMessage.toBuilder()\n-        .payload(PAYLOAD)\n-        .setId(MESSAGE_ID)\n-        .clearAttributes()\n-        .addAttribute(\"key1\", \"value1\")\n-        .addAttribute(\"key2\", \"value2\")\n-        .setPublishTime(PUBLISH_TIME)\n-        .build();\n+    builtMessage = builtMessage.toBuilder().payload(PAYLOAD).setId(MESSAGE_ID).clearAttributes().addAttribute(\"key1\", \"value1\").addAttribute(\"key2\", \"value2\").setPublishTime(PUBLISH_TIME).build();\n     assertSame(serviceMockReturnsOptions, builtMessage.pubsub());\n     assertEquals(MESSAGE_ID, builtMessage.id());\n     assertEquals(PAYLOAD, builtMessage.payload());\n@@ -201,8 +163,7 @@ public class ReceivedMessageTest {\n   public void testModifyAckDeadlineAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedMessage(1);\n     expect(pubsub.options()).andReturn(mockOptions);\n-    expect(pubsub.modifyAckDeadlineAsync(SUBSCRIPTION, 10, TimeUnit.SECONDS, ACK_ID))\n-        .andReturn(Futures.<Void>immediateFuture(null));\n+    expect(pubsub.modifyAckDeadlineAsync(SUBSCRIPTION, 10, TimeUnit.SECONDS, ACK_ID)).andReturn(Futures.<Void>immediateFuture(null));\n     EasyMock.expectLastCall();\n     replay(pubsub);\n     initializeMessage();\n@@ -220,4 +181,4 @@ public class ReceivedMessageTest {\n     assertEquals(expected.getSubscription(), value.getSubscription());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "column": "5",
                    "severity": "warning",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/512/ReceivedMessageTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/512/ReceivedMessageTest.java\nindex dd2bd636d08..a31a7cecc03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/512/ReceivedMessageTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/512/ReceivedMessageTest.java\n@@ -100,7 +100,8 @@ public class ReceivedMessageTest {\n     assertEquals(SUBSCRIPTION, builtMessage.getSubscription());\n     assertEquals(ACK_ID, builtMessage.getAckId());\n     assertEquals(\"newMessageId\", builtMessage.getId());\n-    assertArrayEquals(\"newPayload\".getBytes(Charsets.UTF_8), builtMessage.getPayload().toByteArray());\n+assertArrayEquals(\"newPayload\".getBytes(Charsets.UTF_8), builtMessage.getPayload().toByteArray\n+    ());\n     assertEquals(\"newPayload\", builtMessage.getPayloadAsString());\n     assertEquals(attributes, builtMessage.getAttributes());\n     assertEquals(PUBLISH_TIME + 1, (long) builtMessage.getPublishTime());\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}