{
    "project_name": "neo4j-neo4j",
    "error_id": "1915",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1915/TokenScanViewIdIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1915/TokenScanViewIdIterator.java\nindex d8ed3c1fa61..d2d18e55247 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1915/TokenScanViewIdIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1915/TokenScanViewIdIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state.storeview;\n \n import org.neo4j.collection.PrimitiveLongResourceIterator;\n@@ -37,12 +38,12 @@ class TokenScanViewIdIterator<CURSOR extends StorageEntityScanCursor> implements\n     private PrimitiveLongResourceIterator idIterator;\n     private long lastReturnedId = -1;\n \n-    TokenScanViewIdIterator( TokenScanReader tokenScanReader, int[] tokenIds, CURSOR entityCursor, PageCursorTracer cursorTracer )\n+    TokenScanViewIdIterator(TokenScanReader tokenScanReader, int[] tokenIds, CURSOR entityCursor, PageCursorTracer cursorTracer)\n     {\n         this.tokenScanReader = tokenScanReader;\n         this.entityCursor = entityCursor;\n         this.cursorTracer = cursorTracer;\n-        this.idIterator = tokenScanReader.entitiesWithAnyOfTokens( tokenIds, cursorTracer );\n+        this.idIterator = tokenScanReader.entitiesWithAnyOfTokens(tokenIds, cursorTracer);\n         this.tokenIds = tokenIds;\n     }\n \n@@ -62,7 +63,7 @@ class TokenScanViewIdIterator<CURSOR extends StorageEntityScanCursor> implements\n     public long next()\n     {\n         long next = idIterator.next();\n-        entityCursor.single( next );\n+        entityCursor.single(next);\n         entityCursor.next();\n         lastReturnedId = next;\n         return next;\n@@ -72,6 +73,6 @@ class TokenScanViewIdIterator<CURSOR extends StorageEntityScanCursor> implements\n     public void invalidateCache()\n     {\n         this.idIterator.close();\n-        this.idIterator = tokenScanReader.entitiesWithAnyOfTokens( lastReturnedId, tokenIds, cursorTracer );\n+        this.idIterator = tokenScanReader.entitiesWithAnyOfTokens(lastReturnedId, tokenIds, cursorTracer);\n     }\n }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}