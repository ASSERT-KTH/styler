{
    "project_name": "Angel-ML-angel",
    "error_id": "134",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/134/SketchUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/134/SketchUtils.java\nindex d2ab07c6a6f..8f85af96fcb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/134/SketchUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/134/SketchUtils.java\n@@ -74,7 +74,7 @@ public class SketchUtils {\n   }\n \n   protected static void compactBuffer(final float[] srcBuf, int srcOffset,\n-      final float[] dstBuf, int dstOffset, int dstSize) {\n+                                      final float[] dstBuf, int dstOffset, int dstSize) {\n     int offset = rand.nextBoolean() ? 1 : 0;\n     int bound = dstOffset + dstSize;\n     for (int i = srcOffset + offset, j = dstOffset; j < bound; i += 2, j++) {\n@@ -83,8 +83,8 @@ public class SketchUtils {\n   }\n \n   protected static void mergeArrays(final float[] src1, int srcOffset1,\n-      final float[] src2, int srcOffset2,\n-      final float[] dst, int dstOffset, int size) {\n+                                    final float[] src2, int srcOffset2,\n+                                    final float[] dst, int dstOffset, int size) {\n     int bound1 = srcOffset1 + size;\n     int bound2 = srcOffset2 + size;\n     int i1 = srcOffset1, i2 = srcOffset2, i3 = dstOffset;\n@@ -103,9 +103,9 @@ public class SketchUtils {\n   }\n \n   protected static void levelwisePropagation(long bitPattern, int k,\n-      int beginLevel, int endLevel,\n-      final float[] buf, int bufBeginPos,\n-      final float[] levelsArr) {\n+                                             int beginLevel, int endLevel,\n+                                             final float[] buf, int bufBeginPos,\n+                                             final float[] levelsArr) {\n     for (int level = beginLevel; level < endLevel; level++) {\n       if ((bitPattern & (1L << level)) == 0) {\n         throw new QuantileSketchException(\"Encounter empty level: \" + level);\n@@ -117,7 +117,7 @@ public class SketchUtils {\n   }\n \n   protected static void blockyMergeSort(final float[] keys, final long[] values,\n-      int length, int blkSize) {\n+                                        int length, int blkSize) {\n     if (blkSize <= 0 || length <= blkSize) {\n       return;\n     }\n@@ -128,8 +128,9 @@ public class SketchUtils {\n   }\n \n   protected static void recursiveBlockyMergeSort(final float[] kSrc, final long[] vSrc,\n-      final float[] kDst, final long[] vDst,\n-      int blkStart, int blkLen, int blkSize, int arrLimit) {\n+                                                 final float[] kDst, final long[] vDst,\n+                                                 int blkStart, int blkLen, int blkSize,\n+                                                 int arrLimit) {\n     if (blkLen == 1) {\n       return;\n     }\n@@ -153,9 +154,9 @@ public class SketchUtils {\n   }\n \n   protected static void blockyMerge(final float[] kSrc, final long[] vSrc,\n-      int arrStart1, int arrLen1,\n-      int arrStart2, int arrLen2,\n-      final float[] kDst, final long[] vDst, int arrStart3) {\n+                                    int arrStart1, int arrLen1,\n+                                    int arrStart2, int arrLen2,\n+                                    final float[] kDst, final long[] vDst, int arrStart3) {\n     int arrEnd1 = arrStart1 + arrLen1;\n     int arrEnd2 = arrStart2 + arrLen2;\n     int i1 = arrStart1, i2 = arrStart2, i3 = arrStart3;\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/134/SketchUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/134/SketchUtils.java\nindex d2ab07c6a6f..e87041291df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/134/SketchUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/134/SketchUtils.java\n@@ -73,19 +73,16 @@ public class SketchUtils {\n     }\n   }\n \n-  protected static void compactBuffer(final float[] srcBuf, int srcOffset,\n-      final float[] dstBuf, int dstOffset, int dstSize) {\n-    int offset = rand.nextBoolean() ? 1 : 0;\n+  protected static void compactBuffer(final float[] srcBuf, int srcOffset, final float[] dstBuf, int dstOffset, int dstSize) {\n+  int offset = rand.nextBoolean() ? 1 : 0;\n     int bound = dstOffset + dstSize;\n     for (int i = srcOffset + offset, j = dstOffset; j < bound; i += 2, j++) {\n       dstBuf[j] = srcBuf[i];\n     }\n   }\n \n-  protected static void mergeArrays(final float[] src1, int srcOffset1,\n-      final float[] src2, int srcOffset2,\n-      final float[] dst, int dstOffset, int size) {\n-    int bound1 = srcOffset1 + size;\n+  protected static void mergeArrays(final float[] src1, int srcOffset1, final float[] src2, int srcOffset2, final float[] dst, int dstOffset, int size) {\n+  int bound1 = srcOffset1 + size;\n     int bound2 = srcOffset2 + size;\n     int i1 = srcOffset1, i2 = srcOffset2, i3 = dstOffset;\n     while (i1 < bound1 && i2 < bound2) {\n@@ -102,10 +99,7 @@ public class SketchUtils {\n     }\n   }\n \n-  protected static void levelwisePropagation(long bitPattern, int k,\n-      int beginLevel, int endLevel,\n-      final float[] buf, int bufBeginPos,\n-      final float[] levelsArr) {\n+  protected static void levelwisePropagation(long bitPattern, int k, int beginLevel, int endLevel, final float[] buf, int bufBeginPos, final float[] levelsArr) {\n     for (int level = beginLevel; level < endLevel; level++) {\n       if ((bitPattern & (1L << level)) == 0) {\n         throw new QuantileSketchException(\"Encounter empty level: \" + level);\n@@ -116,9 +110,8 @@ public class SketchUtils {\n     }\n   }\n \n-  protected static void blockyMergeSort(final float[] keys, final long[] values,\n-      int length, int blkSize) {\n-    if (blkSize <= 0 || length <= blkSize) {\n+  protected static void blockyMergeSort(final float[] keys, final long[] values, int length, int blkSize) {\n+  if (blkSize <= 0 || length <= blkSize) {\n       return;\n     }\n     int numBlks = (length + (blkSize - 1)) / blkSize;\n@@ -127,10 +120,9 @@ public class SketchUtils {\n     recursiveBlockyMergeSort(tmpKeys, tmpValues, keys, values, 0, numBlks, blkSize, length);\n   }\n \n-  protected static void recursiveBlockyMergeSort(final float[] kSrc, final long[] vSrc,\n-      final float[] kDst, final long[] vDst,\n+  protected static void recursiveBlockyMergeSort(final float[] kSrc, final long[] vSrc, final float[] kDst, final long[] vDst,\n       int blkStart, int blkLen, int blkSize, int arrLimit) {\n-    if (blkLen == 1) {\n+  if (blkLen == 1) {\n       return;\n     }\n     int blkLen1 = blkLen >> 1;\n@@ -152,11 +144,9 @@ public class SketchUtils {\n     blockyMerge(kSrc, vSrc, arrStart1, arrLen1, arrStart2, arrLen2, kDst, vDst, arrStart1);\n   }\n \n-  protected static void blockyMerge(final float[] kSrc, final long[] vSrc,\n-      int arrStart1, int arrLen1,\n-      int arrStart2, int arrLen2,\n-      final float[] kDst, final long[] vDst, int arrStart3) {\n-    int arrEnd1 = arrStart1 + arrLen1;\n+  protected static void blockyMerge(final float[] kSrc, final long[] vSrc, int arrStart1, int arrLen1,\n+      int arrStart2, int arrLen2, final float[] kDst, final long[] vDst, int arrStart3) {\n+  int arrEnd1 = arrStart1 + arrLen1;\n     int arrEnd2 = arrStart2 + arrLen2;\n     int i1 = arrStart1, i2 = arrStart2, i3 = arrStart3;\n     while (i1 < arrEnd1 && i2 < arrEnd2) {\n@@ -181,5 +171,4 @@ public class SketchUtils {\n       System.arraycopy(vSrc, i2, vDst, i3, arrEnd2 - i2);\n     }\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/134/SketchUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/134/SketchUtils.java\nindex d2ab07c6a6f..50d8e16459b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/134/SketchUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/134/SketchUtils.java\n@@ -30,11 +30,10 @@ public class SketchUtils {\n     } else if (k >= 65535) {\n       throw new QuantileSketchException(\"Invalid value of k: k should not be larger than 65536\");\n     } else if (!isPowerOf2(k)) {\n-      throw new QuantileSketchException(\"Invalid value of k: k should be power of 2\");\n-    }\n+             throw new QuantileSketchException(\"Invalid value of k: k should be power of 2\");\n+           }\n   }\n \n-\n   public static boolean isPowerOf2(int k) {\n     for (int i = 1; i < 65536; i <<= 1) {\n       if (k == i) {\n@@ -73,8 +72,7 @@ public class SketchUtils {\n     }\n   }\n \n-  protected static void compactBuffer(final float[] srcBuf, int srcOffset,\n-      final float[] dstBuf, int dstOffset, int dstSize) {\n+  protected static void compactBuffer(final float[] srcBuf, int srcOffset, final float[] dstBuf, int dstOffset, int dstSize) {\n     int offset = rand.nextBoolean() ? 1 : 0;\n     int bound = dstOffset + dstSize;\n     for (int i = srcOffset + offset, j = dstOffset; j < bound; i += 2, j++) {\n@@ -83,8 +81,8 @@ public class SketchUtils {\n   }\n \n   protected static void mergeArrays(final float[] src1, int srcOffset1,\n-      final float[] src2, int srcOffset2,\n-      final float[] dst, int dstOffset, int size) {\n+                                    final float[] src2, int srcOffset2,\n+                                    final float[] dst, int dstOffset, int size) {\n     int bound1 = srcOffset1 + size;\n     int bound2 = srcOffset2 + size;\n     int i1 = srcOffset1, i2 = srcOffset2, i3 = dstOffset;\n@@ -95,6 +93,7 @@ public class SketchUtils {\n         dst[i3++] = src2[i2++];\n       }\n     }\n+\n     if (i1 < bound1) {\n       System.arraycopy(src1, i1, dst, i3, bound1 - i1);\n     } else {\n@@ -102,42 +101,39 @@ public class SketchUtils {\n     }\n   }\n \n-  protected static void levelwisePropagation(long bitPattern, int k,\n-      int beginLevel, int endLevel,\n-      final float[] buf, int bufBeginPos,\n-      final float[] levelsArr) {\n+  protected static void levelwisePropagation(long bitPattern, int k, int beginLevel, int endLevel, final float[] buf, int bufBeginPos, final float[] levelsArr) {\n     for (int level = beginLevel; level < endLevel; level++) {\n       if ((bitPattern & (1L << level)) == 0) {\n         throw new QuantileSketchException(\"Encounter empty level: \" + level);\n       }\n-      SketchUtils.mergeArrays(levelsArr, k * (level + 2),\n-          levelsArr, k * (endLevel + 2), buf, bufBeginPos, k);\n+      SketchUtils.mergeArrays(levelsArr, k * (level + 2), levelsArr, k * (endLevel + 2), buf, bufBeginPos, k);\n       SketchUtils.compactBuffer(buf, bufBeginPos, levelsArr, k * (endLevel + 2), k);\n     }\n   }\n \n-  protected static void blockyMergeSort(final float[] keys, final long[] values,\n-      int length, int blkSize) {\n+  protected static void blockyMergeSort(final float[] keys, final long[] values, int length, int blkSize) {\n     if (blkSize <= 0 || length <= blkSize) {\n       return;\n     }\n+\n     int numBlks = (length + (blkSize - 1)) / blkSize;\n     final float[] tmpKeys = Arrays.copyOf(keys, length);\n     final long[] tmpValues = Arrays.copyOf(values, length);\n     recursiveBlockyMergeSort(tmpKeys, tmpValues, keys, values, 0, numBlks, blkSize, length);\n   }\n \n-  protected static void recursiveBlockyMergeSort(final float[] kSrc, final long[] vSrc,\n-      final float[] kDst, final long[] vDst,\n-      int blkStart, int blkLen, int blkSize, int arrLimit) {\n+  protected static void recursiveBlockyMergeSort(final float[] kSrc,\n+                                                 final long[] vSrc,\n+                                                 final float[] kDst,\n+                                                 final long[] vDst, int blkStart, int blkLen, int blkSize, int arrLimit) {\n     if (blkLen == 1) {\n       return;\n     }\n+\n     int blkLen1 = blkLen >> 1;\n     int blkLen2 = blkLen - blkLen1;\n     int blkStart1 = blkStart;\n     int blkStart2 = blkStart + blkLen1;\n-\n     recursiveBlockyMergeSort(kDst, vDst, kSrc, vSrc, blkStart1, blkLen1, blkSize, arrLimit);\n     recursiveBlockyMergeSort(kDst, vDst, kSrc, vSrc, blkStart2, blkLen2, blkSize, arrLimit);\n \n@@ -148,14 +144,13 @@ public class SketchUtils {\n     if (arrStart2 + arrLen2 > arrLimit) {\n       arrLen2 = arrLimit - arrStart2;\n     }\n-\n     blockyMerge(kSrc, vSrc, arrStart1, arrLen1, arrStart2, arrLen2, kDst, vDst, arrStart1);\n   }\n \n-  protected static void blockyMerge(final float[] kSrc, final long[] vSrc,\n-      int arrStart1, int arrLen1,\n-      int arrStart2, int arrLen2,\n-      final float[] kDst, final long[] vDst, int arrStart3) {\n+  protected static void blockyMerge(final float[] kSrc,\n+                                    final long[] vSrc, int arrStart1, int arrLen1, int arrStart2, int arrLen2,\n+                                    final float[] kDst,\n+                                    final long[] vDst, int arrStart3) {\n     int arrEnd1 = arrStart1 + arrLen1;\n     int arrEnd2 = arrStart2 + arrLen2;\n     int i1 = arrStart1, i2 = arrStart2, i3 = arrStart3;\n@@ -181,5 +176,5 @@ public class SketchUtils {\n       System.arraycopy(vSrc, i2, vDst, i3, arrEnd2 - i2);\n     }\n   }\n-}\n \n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}