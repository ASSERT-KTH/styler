{
    "project_name": "neo4j-neo4j",
    "error_id": "514",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/514/TokenScanReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/514/TokenScanReader.java\nindex c84b545d428..748dc00cf4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/514/TokenScanReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/514/TokenScanReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.collection.PrimitiveLongResourceIterator;\n@@ -33,34 +34,34 @@ public interface TokenScanReader\n     long NO_ID = -1;\n \n     /**\n-     * @param tokenId token id.\n+     * @param tokenId      token id.\n      * @param cursorTracer underlying page cursor tracer\n      * @return entity ids with the given {@code tokenId}.\n      */\n-    PrimitiveLongResourceIterator entitiesWithToken( int tokenId, PageCursorTracer cursorTracer );\n+    PrimitiveLongResourceIterator entitiesWithToken(int tokenId, PageCursorTracer cursorTracer);\n \n     /**\n      * Sets the client up for a token scan on <code>tokenId</code>\n      *\n      * @param tokenId token id\n      */\n-    TokenScan entityTokenScan( int tokenId, PageCursorTracer cursorTracer );\n+    TokenScan entityTokenScan(int tokenId, PageCursorTracer cursorTracer);\n \n     /**\n-     * @param tokenIds token ids.\n+     * @param tokenIds     token ids.\n      * @param cursorTracer underlying page cursor tracer\n      * @return entity ids with any of the given token ids.\n      */\n-    default PrimitiveLongResourceIterator entitiesWithAnyOfTokens( int[] tokenIds, PageCursorTracer cursorTracer )\n+    default PrimitiveLongResourceIterator entitiesWithAnyOfTokens(int[] tokenIds, PageCursorTracer cursorTracer)\n     {\n-        return entitiesWithAnyOfTokens( NO_ID, tokenIds, cursorTracer );\n+        return entitiesWithAnyOfTokens(NO_ID, tokenIds, cursorTracer);\n     }\n \n     /**\n-     * @param fromId entity id to start at, exclusive, i.e. the given {@code fromId} will not be included in the result.\n-     * @param tokenIds token ids.\n+     * @param fromId       entity id to start at, exclusive, i.e. the given {@code fromId} will not be included in the result.\n+     * @param tokenIds     token ids.\n      * @param cursorTracer underlying page cursor tracer\n      * @return entity ids with any of the given token ids.\n      */\n-    PrimitiveLongResourceIterator entitiesWithAnyOfTokens( long fromId, int[] tokenIds, PageCursorTracer cursorTracer );\n+    PrimitiveLongResourceIterator entitiesWithAnyOfTokens(long fromId, int[] tokenIds, PageCursorTracer cursorTracer);\n }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}