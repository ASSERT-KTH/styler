{
    "project_name": "DaGeRe-peass",
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "42",
                "column": "83",
                "severity": "error",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "      if (koPeMeFileTry.exists()) {\n         Kopemedata transformedTry = XMLDataLoader.loadData(koPeMeFileTry);\n         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && \n               transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n            transformed = transformedTry;\n            koPeMeFile = koPeMeFileTry;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/1/JmhBenchmarkConverter.java\nindex 6e65fd91d28..c97c6f97b1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/1/JmhBenchmarkConverter.java\n@@ -39,8 +39,7 @@ public class JmhBenchmarkConverter {\n       \n       if (koPeMeFileTry.exists()) {\n          Kopemedata transformedTry = XMLDataLoader.loadData(koPeMeFileTry);\n-         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && \n-               transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n+         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n             transformed = transformedTry;\n             koPeMeFile = koPeMeFileTry;\n          } else {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "42",
                    "column": "80",
                    "severity": "error",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "79",
                    "column": "89",
                    "severity": "error",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/1/JmhBenchmarkConverter.java\nindex 6e65fd91d28..96fdff1f5b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/1/JmhBenchmarkConverter.java\n@@ -25,107 +25,107 @@ import de.dagere.peass.config.MeasurementConfiguration;\n import de.dagere.peass.dependency.analysis.data.TestCase;\n \n public class JmhBenchmarkConverter {\n-   \n-   private static final int SECONDS_TO_NANOSECONDS = 1000000000;\n-   \n-   private final File koPeMeFile;\n-   private final Kopemedata transformed;\n-   private final Datacollector timeCollector;\n-   private final MeasurementConfiguration measurementConfig;\n-   \n-   public JmhBenchmarkConverter(final TestCase testcase, final File clazzResultFolder, final MeasurementConfiguration measurementConfig) throws JAXBException {\n-      this.measurementConfig = measurementConfig;\n-      File koPeMeFileTry = new File(clazzResultFolder, testcase.getMethod() + \".xml\");\n-      \n-      if (koPeMeFileTry.exists()) {\n-         Kopemedata transformedTry = XMLDataLoader.loadData(koPeMeFileTry);\n-         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && \n-               transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n-            transformed = transformedTry;\n-            koPeMeFile = koPeMeFileTry;\n-         } else {\n-            koPeMeFile = new File(clazzResultFolder, testcase.getShortClazz() + \"_\" + testcase.getMethod() + \".xml\");\n-            transformed = XMLDataLoader.loadData(koPeMeFileTry);\n-         }\n-         timeCollector = transformed.getTestcases().getTestcase().get(0).getDatacollector().get(0);\n+\n+  private static final int SECONDS_TO_NANOSECONDS = 1000000000;\n+\n+  private final File koPeMeFile;\n+  private final Kopemedata transformed;\n+  private final Datacollector timeCollector;\n+  private final MeasurementConfiguration measurementConfig;\n+\n+  public JmhBenchmarkConverter(final TestCase testcase, final File clazzResultFolder, final MeasurementConfiguration measurementConfig) throws JAXBException {\n+    this.measurementConfig = measurementConfig;\n+    File koPeMeFileTry = new File(clazzResultFolder, testcase.getMethod() + \".xml\");\n+\n+    if (koPeMeFileTry.exists()) {\n+      Kopemedata transformedTry = XMLDataLoader.loadData(koPeMeFileTry);\n+      if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) &&\n+          transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n+        transformed = transformedTry;\n+        koPeMeFile = koPeMeFileTry;\n       } else {\n-         koPeMeFile = koPeMeFileTry;\n-         transformed = new Kopemedata();\n-         Testcases testcases = new Testcases();\n-         testcases.setClazz(testcase.getClazz());\n-         transformed.setTestcases(testcases);\n-         TestcaseType testclazz = new TestcaseType();\n-         transformed.getTestcases().getTestcase().add(testclazz);\n-         testclazz.setName(testcase.getMethod());\n-         timeCollector = new Datacollector();\n-         timeCollector.setName(TimeDataCollectorNoGC.class.getName());\n-         testclazz.getDatacollector().add(timeCollector);\n+        koPeMeFile = new File(clazzResultFolder, testcase.getShortClazz() + \"_\" + testcase.getMethod() + \".xml\");\n+        transformed = XMLDataLoader.loadData(koPeMeFileTry);\n       }\n-   }\n-   \n-   public void convertData(final ArrayNode rawData, final JsonNode benchmark, final String scoreUnit) {\n-      JsonNode params = benchmark.get(\"params\");\n-      for (JsonNode vmExecution : rawData) {\n-         Result result = buildResult(vmExecution, scoreUnit);\n-         if (params != null) {\n-            setParamMap(result, params);\n-         }\n-         timeCollector.getResult().add(result);\n-      }\n-   }\n-   \n-   private void setParamMap(final Result result, final JsonNode params) {\n-      result.setParams(new Params());\n-      for (Iterator<String> fieldIterator = params.fieldNames(); fieldIterator.hasNext();) {\n-         final String field = fieldIterator.next();\n-         final String value = params.get(field).asText();\n-         final Param param = new Param();\n-         param.setKey(field);\n-         param.setValue(value);\n-         result.getParams().getParam().add(param);\n+      timeCollector = transformed.getTestcases().getTestcase().get(0).getDatacollector().get(0);\n+    } else {\n+      koPeMeFile = koPeMeFileTry;\n+      transformed = new Kopemedata();\n+      Testcases testcases = new Testcases();\n+      testcases.setClazz(testcase.getClazz());\n+      transformed.setTestcases(testcases);\n+      TestcaseType testclazz = new TestcaseType();\n+      transformed.getTestcases().getTestcase().add(testclazz);\n+      testclazz.setName(testcase.getMethod());\n+      timeCollector = new Datacollector();\n+      timeCollector.setName(TimeDataCollectorNoGC.class.getName());\n+      testclazz.getDatacollector().add(timeCollector);\n+    }\n+  }\n+\n+  public void convertData(final ArrayNode rawData, final JsonNode benchmark, final String scoreUnit) {\n+    JsonNode params = benchmark.get(\"params\");\n+    for (JsonNode vmExecution : rawData) {\n+      Result result = buildResult(vmExecution, scoreUnit);\n+      if (params != null) {\n+        setParamMap(result, params);\n       }\n-   }\n-   \n-   private Result buildResult(final JsonNode vmExecution, final String scoreUnit) {\n-      Result result = new Result();\n-      Fulldata fulldata = buildFulldata(vmExecution, scoreUnit);\n-      result.setFulldata(fulldata);\n-\n-      DescriptiveStatistics statistics = new DescriptiveStatistics();\n-      result.getFulldata().getValue().forEach(value -> statistics.addValue(value.getValue()));\n-      result.setValue(statistics.getMean());\n-      result.setDeviation(statistics.getStandardDeviation());\n-      result.setIterations(result.getFulldata().getValue().size());\n-\n-      // Assume that warmup and repetitions took place as defined, since they are not recorded by jmh\n-      result.setWarmup(measurementConfig.getWarmup());\n-      result.setRepetitions(measurementConfig.getRepetitions());\n-\n-      return result;\n-   }\n-   \n-   private Fulldata buildFulldata(final JsonNode vmExecution, final String scoreUnit) {\n-      Fulldata fulldata = new Fulldata();\n-      for (JsonNode iteration : vmExecution) {\n-         Value value = new Value();\n-         long iterationDuration;\n-         if (!scoreUnit.equals(\"ops/s\")) {\n-            iterationDuration = (long) (iteration.asDouble() * SECONDS_TO_NANOSECONDS);\n-         } else {\n-            iterationDuration = iteration.asLong();\n-         }\n-\n-         value.setValue(iterationDuration);\n-         fulldata.getValue().add(value);\n+      timeCollector.getResult().add(result);\n+    }\n+  }\n+\n+  private void setParamMap(final Result result, final JsonNode params) {\n+    result.setParams(new Params());\n+    for (Iterator<String> fieldIterator = params.fieldNames(); fieldIterator.hasNext(); ) {\n+      final String field = fieldIterator.next();\n+      final String value = params.get(field).asText();\n+      final Param param = new Param();\n+      param.setKey(field);\n+      param.setValue(value);\n+      result.getParams().getParam().add(param);\n+    }\n+  }\n+\n+  private Result buildResult(final JsonNode vmExecution, final String scoreUnit) {\n+    Result result = new Result();\n+    Fulldata fulldata = buildFulldata(vmExecution, scoreUnit);\n+    result.setFulldata(fulldata);\n+\n+    DescriptiveStatistics statistics = new DescriptiveStatistics();\n+    result.getFulldata().getValue().forEach(value -> statistics.addValue(value.getValue()));\n+    result.setValue(statistics.getMean());\n+    result.setDeviation(statistics.getStandardDeviation());\n+    result.setIterations(result.getFulldata().getValue().size());\n+\n+    // Assume that warmup and repetitions took place as defined, since they are not recorded by jmh\n+    result.setWarmup(measurementConfig.getWarmup());\n+    result.setRepetitions(measurementConfig.getRepetitions());\n+\n+    return result;\n+  }\n+\n+  private Fulldata buildFulldata(final JsonNode vmExecution, final String scoreUnit) {\n+    Fulldata fulldata = new Fulldata();\n+    for (JsonNode iteration : vmExecution) {\n+      Value value = new Value();\n+      long iterationDuration;\n+      if (!scoreUnit.equals(\"ops/s\")) {\n+        iterationDuration = (long) (iteration.asDouble() * SECONDS_TO_NANOSECONDS);\n+      } else {\n+        iterationDuration = iteration.asLong();\n       }\n-      return fulldata;\n-   }\n-   \n-   public File getKoPeMeFile() {\n-      return koPeMeFile;\n-   }\n-   \n-   public Kopemedata getTransformed() {\n-      return transformed;\n-   }\n+\n+      value.setValue(iterationDuration);\n+      fulldata.getValue().add(value);\n+    }\n+    return fulldata;\n+  }\n+\n+  public File getKoPeMeFile() {\n+    return koPeMeFile;\n+  }\n+\n+  public Kopemedata getTransformed() {\n+    return transformed;\n+  }\n }\n",
            "diff_size": 113
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/1/JmhBenchmarkConverter.java\nindex 6e65fd91d28..443ccef6791 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/1/JmhBenchmarkConverter.java\n@@ -25,31 +25,29 @@ import de.dagere.peass.config.MeasurementConfiguration;\n import de.dagere.peass.dependency.analysis.data.TestCase;\n \n public class JmhBenchmarkConverter {\n-   \n-   private static final int SECONDS_TO_NANOSECONDS = 1000000000;\n+\n+\tprivate static final int SECONDS_TO_NANOSECONDS = 1000000000;\n    \n    private final File koPeMeFile;\n-   private final Kopemedata transformed;\n+private final Kopemedata transformed;\n    private final Datacollector timeCollector;\n    private final MeasurementConfiguration measurementConfig;\n-   \n-   public JmhBenchmarkConverter(final TestCase testcase, final File clazzResultFolder, final MeasurementConfiguration measurementConfig) throws JAXBException {\n-      this.measurementConfig = measurementConfig;\n+\n+public JmhBenchmarkConverter(final TestCase testcase, final File clazzResultFolder, final MeasurementConfiguration measurementConfig) throws JAXBException {\n+\tthis.measurementConfig = measurementConfig;\n       File koPeMeFileTry = new File(clazzResultFolder, testcase.getMethod() + \".xml\");\n-      \n-      if (koPeMeFileTry.exists()) {\n-         Kopemedata transformedTry = XMLDataLoader.loadData(koPeMeFileTry);\n-         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && \n-               transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n-            transformed = transformedTry;\n+if (koPeMeFileTry.exists()) {\n+\tKopemedata transformedTry = XMLDataLoader.loadData(koPeMeFileTry);\n+         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n+\ttransformed = transformedTry;\n             koPeMeFile = koPeMeFileTry;\n-         } else {\n-            koPeMeFile = new File(clazzResultFolder, testcase.getShortClazz() + \"_\" + testcase.getMethod() + \".xml\");\n+\t} else {\n+\tkoPeMeFile = new File(clazzResultFolder, testcase.getShortClazz() + \"_\" + testcase.getMethod() + \".xml\");\n             transformed = XMLDataLoader.loadData(koPeMeFileTry);\n-         }\n+\t}\n          timeCollector = transformed.getTestcases().getTestcase().get(0).getDatacollector().get(0);\n-      } else {\n-         koPeMeFile = koPeMeFileTry;\n+\t} else {\n+\tkoPeMeFile = koPeMeFileTry;\n          transformed = new Kopemedata();\n          Testcases testcases = new Testcases();\n          testcases.setClazz(testcase.getClazz());\n@@ -60,33 +58,33 @@ public class JmhBenchmarkConverter {\n          timeCollector = new Datacollector();\n          timeCollector.setName(TimeDataCollectorNoGC.class.getName());\n          testclazz.getDatacollector().add(timeCollector);\n-      }\n-   }\n-   \n-   public void convertData(final ArrayNode rawData, final JsonNode benchmark, final String scoreUnit) {\n+\t}\n+\t}\n+\n+public void convertData(final ArrayNode rawData, final JsonNode benchmark, final String scoreUnit) {\n       JsonNode params = benchmark.get(\"params\");\n       for (JsonNode vmExecution : rawData) {\n-         Result result = buildResult(vmExecution, scoreUnit);\n+\tResult result = buildResult(vmExecution, scoreUnit);\n          if (params != null) {\n-            setParamMap(result, params);\n-         }\n+\tsetParamMap(result, params);\n+\t}\n          timeCollector.getResult().add(result);\n-      }\n-   }\n-   \n-   private void setParamMap(final Result result, final JsonNode params) {\n-      result.setParams(new Params());\n+\t}\n+\t}\n+\n+private void setParamMap(final Result result, final JsonNode params) {\n+\tresult.setParams(new Params());\n       for (Iterator<String> fieldIterator = params.fieldNames(); fieldIterator.hasNext();) {\n-         final String field = fieldIterator.next();\n+\tfinal String field = fieldIterator.next();\n          final String value = params.get(field).asText();\n          final Param param = new Param();\n          param.setKey(field);\n          param.setValue(value);\n          result.getParams().getParam().add(param);\n-      }\n-   }\n-   \n-   private Result buildResult(final JsonNode vmExecution, final String scoreUnit) {\n+\t}\n+\t}\n+\n+private Result buildResult(final JsonNode vmExecution, final String scoreUnit) {\n       Result result = new Result();\n       Fulldata fulldata = buildFulldata(vmExecution, scoreUnit);\n       result.setFulldata(fulldata);\n@@ -102,30 +100,30 @@ public class JmhBenchmarkConverter {\n       result.setRepetitions(measurementConfig.getRepetitions());\n \n       return result;\n-   }\n-   \n-   private Fulldata buildFulldata(final JsonNode vmExecution, final String scoreUnit) {\n+\t}\n+\n+private Fulldata buildFulldata(final JsonNode vmExecution, final String scoreUnit) {\n       Fulldata fulldata = new Fulldata();\n       for (JsonNode iteration : vmExecution) {\n-         Value value = new Value();\n+\tValue value = new Value();\n          long iterationDuration;\n          if (!scoreUnit.equals(\"ops/s\")) {\n-            iterationDuration = (long) (iteration.asDouble() * SECONDS_TO_NANOSECONDS);\n-         } else {\n-            iterationDuration = iteration.asLong();\n-         }\n+\titerationDuration = (long) (iteration.asDouble() * SECONDS_TO_NANOSECONDS);\n+\t} else {\n+\titerationDuration = iteration.asLong();\n+\t}\n \n          value.setValue(iterationDuration);\n          fulldata.getValue().add(value);\n-      }\n+\t}\n       return fulldata;\n-   }\n-   \n-   public File getKoPeMeFile() {\n-      return koPeMeFile;\n-   }\n-   \n-   public Kopemedata getTransformed() {\n-      return transformed;\n-   }\n-}\n+\t}\n+\n+public File getKoPeMeFile() {\n+\treturn koPeMeFile;\n+\t}\n+\n+public Kopemedata getTransformed() {\n+\treturn transformed;\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/1/JmhBenchmarkConverter.java\nindex 6e65fd91d28..9632fb9486b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/1/JmhBenchmarkConverter.java\n@@ -2,14 +2,10 @@ package de.dagere.peass.dependency.jmh;\n \n import java.io.File;\n import java.util.Iterator;\n-\n import javax.xml.bind.JAXBException;\n-\n import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n-\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n-\n import de.dagere.kopeme.datacollection.TimeDataCollectorNoGC;\n import de.dagere.kopeme.datastorage.XMLDataLoader;\n import de.dagere.kopeme.generated.Kopemedata;\n@@ -24,108 +20,107 @@ import de.dagere.kopeme.generated.TestcaseType.Datacollector;\n import de.dagere.peass.config.MeasurementConfiguration;\n import de.dagere.peass.dependency.analysis.data.TestCase;\n \n+\n public class JmhBenchmarkConverter {\n-   \n-   private static final int SECONDS_TO_NANOSECONDS = 1000000000;\n-   \n-   private final File koPeMeFile;\n-   private final Kopemedata transformed;\n-   private final Datacollector timeCollector;\n-   private final MeasurementConfiguration measurementConfig;\n-   \n-   public JmhBenchmarkConverter(final TestCase testcase, final File clazzResultFolder, final MeasurementConfiguration measurementConfig) throws JAXBException {\n-      this.measurementConfig = measurementConfig;\n-      File koPeMeFileTry = new File(clazzResultFolder, testcase.getMethod() + \".xml\");\n-      \n-      if (koPeMeFileTry.exists()) {\n-         Kopemedata transformedTry = XMLDataLoader.loadData(koPeMeFileTry);\n-         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && \n-               transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n-            transformed = transformedTry;\n-            koPeMeFile = koPeMeFileTry;\n-         } else {\n-            koPeMeFile = new File(clazzResultFolder, testcase.getShortClazz() + \"_\" + testcase.getMethod() + \".xml\");\n-            transformed = XMLDataLoader.loadData(koPeMeFileTry);\n-         }\n-         timeCollector = transformed.getTestcases().getTestcase().get(0).getDatacollector().get(0);\n-      } else {\n-         koPeMeFile = koPeMeFileTry;\n-         transformed = new Kopemedata();\n-         Testcases testcases = new Testcases();\n-         testcases.setClazz(testcase.getClazz());\n-         transformed.setTestcases(testcases);\n-         TestcaseType testclazz = new TestcaseType();\n-         transformed.getTestcases().getTestcase().add(testclazz);\n-         testclazz.setName(testcase.getMethod());\n-         timeCollector = new Datacollector();\n-         timeCollector.setName(TimeDataCollectorNoGC.class.getName());\n-         testclazz.getDatacollector().add(timeCollector);\n-      }\n-   }\n-   \n-   public void convertData(final ArrayNode rawData, final JsonNode benchmark, final String scoreUnit) {\n-      JsonNode params = benchmark.get(\"params\");\n-      for (JsonNode vmExecution : rawData) {\n-         Result result = buildResult(vmExecution, scoreUnit);\n-         if (params != null) {\n-            setParamMap(result, params);\n-         }\n-         timeCollector.getResult().add(result);\n-      }\n+ private static final int SECONDS_TO_NANOSECONDS = 1000000000;\n+ private final File koPeMeFile;\n+ private final Kopemedata transformed;\n+ private final Datacollector timeCollector;\n+ private final MeasurementConfiguration measurementConfig;\n+\n+ public JmhBenchmarkConverter(final TestCase testcase, final File clazzResultFolder, final MeasurementConfiguration measurementConfig) throws JAXBException {\n+  this.measurementConfig = measurementConfig;\n+\n+  File koPeMeFileTry = new File(clazzResultFolder, testcase.getMethod() + \".xml\");\n+  if (koPeMeFileTry.exists()) {\n+   Kopemedata transformedTry = XMLDataLoader.loadData(koPeMeFileTry);\n+   if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n+    transformed = transformedTry;\n+    koPeMeFile = koPeMeFileTry;\n+   } else {\n+    koPeMeFile = new File(clazzResultFolder, testcase.getShortClazz() + \"_\" + testcase.getMethod() + \".xml\");\n+    transformed = XMLDataLoader.loadData(koPeMeFileTry);\n    }\n-   \n-   private void setParamMap(final Result result, final JsonNode params) {\n-      result.setParams(new Params());\n-      for (Iterator<String> fieldIterator = params.fieldNames(); fieldIterator.hasNext();) {\n-         final String field = fieldIterator.next();\n-         final String value = params.get(field).asText();\n-         final Param param = new Param();\n-         param.setKey(field);\n-         param.setValue(value);\n-         result.getParams().getParam().add(param);\n-      }\n+   timeCollector = transformed.getTestcases().getTestcase().get(0).getDatacollector().get(0);\n+  } else {\n+   koPeMeFile = koPeMeFileTry;\n+   transformed = new Kopemedata();\n+\n+   Testcases testcases = new Testcases();\n+   testcases.setClazz(testcase.getClazz());\n+   transformed.setTestcases(testcases);\n+\n+   TestcaseType testclazz = new TestcaseType();\n+   transformed.getTestcases().getTestcase().add(testclazz);\n+   testclazz.setName(testcase.getMethod());\n+   timeCollector = new Datacollector();\n+   timeCollector.setName(TimeDataCollectorNoGC.class.getName());\n+   testclazz.getDatacollector().add(timeCollector);\n+  }\n+ }\n+\n+\n+ public void convertData(final ArrayNode rawData, final JsonNode benchmark, final String scoreUnit) {\n+  JsonNode params = benchmark.get(\"params\");\n+  for (JsonNode vmExecution : rawData) {\n+   Result result = buildResult(vmExecution, scoreUnit);\n+   if (params != null) {\n+    setParamMap(result, params);\n    }\n-   \n-   private Result buildResult(final JsonNode vmExecution, final String scoreUnit) {\n-      Result result = new Result();\n-      Fulldata fulldata = buildFulldata(vmExecution, scoreUnit);\n-      result.setFulldata(fulldata);\n-\n-      DescriptiveStatistics statistics = new DescriptiveStatistics();\n-      result.getFulldata().getValue().forEach(value -> statistics.addValue(value.getValue()));\n-      result.setValue(statistics.getMean());\n-      result.setDeviation(statistics.getStandardDeviation());\n-      result.setIterations(result.getFulldata().getValue().size());\n+   timeCollector.getResult().add(result);\n+  }\n+ }\n+\n+ private void setParamMap(final Result result, final JsonNode params) {\n+  result.setParams(new Params());\n+  for (Iterator<String> fieldIterator = params.fieldNames(); fieldIterator.hasNext();) {\n+   final String field = fieldIterator.next();\n+   final String value = params.get(field).asText();\n+   final Param param = new Param();\n+   param.setKey(field);\n+   param.setValue(value);\n+   result.getParams().getParam().add(param);\n+  }\n+ }\n+\n+ private Result buildResult(final JsonNode vmExecution, final String scoreUnit) {\n+  Result result = new Result();\n+  Fulldata fulldata = buildFulldata(vmExecution, scoreUnit);\n+  result.setFulldata(fulldata);\n+\n+  DescriptiveStatistics statistics = new DescriptiveStatistics();\n+  result.getFulldata().getValue().forEach(value -> statistics.addValue(value.getValue()));\n+  result.setValue(statistics.getMean());\n+  result.setDeviation(statistics.getStandardDeviation());\n+  result.setIterations(result.getFulldata().getValue().size());\n \n       // Assume that warmup and repetitions took place as defined, since they are not recorded by jmh\n-      result.setWarmup(measurementConfig.getWarmup());\n-      result.setRepetitions(measurementConfig.getRepetitions());\n+  result.setWarmup(measurementConfig.getWarmup());\n+  result.setRepetitions(measurementConfig.getRepetitions());\n+  return result;\n+ }\n \n-      return result;\n+ private Fulldata buildFulldata(final JsonNode vmExecution, final String scoreUnit) {\n+  Fulldata fulldata = new Fulldata();\n+  for (JsonNode iteration : vmExecution) {\n+   Value value = new Value();\n+   long iterationDuration;\n+   if (!scoreUnit.equals(\"ops/s\")) {\n+    iterationDuration = (long) (iteration.asDouble() * SECONDS_TO_NANOSECONDS);\n+   } else {\n+    iterationDuration = iteration.asLong();\n    }\n-   \n-   private Fulldata buildFulldata(final JsonNode vmExecution, final String scoreUnit) {\n-      Fulldata fulldata = new Fulldata();\n-      for (JsonNode iteration : vmExecution) {\n-         Value value = new Value();\n-         long iterationDuration;\n-         if (!scoreUnit.equals(\"ops/s\")) {\n-            iterationDuration = (long) (iteration.asDouble() * SECONDS_TO_NANOSECONDS);\n-         } else {\n-            iterationDuration = iteration.asLong();\n-         }\n-\n-         value.setValue(iterationDuration);\n-         fulldata.getValue().add(value);\n-      }\n-      return fulldata;\n-   }\n-   \n-   public File getKoPeMeFile() {\n-      return koPeMeFile;\n-   }\n-   \n-   public Kopemedata getTransformed() {\n-      return transformed;\n-   }\n-}\n+   value.setValue(iterationDuration);\n+   fulldata.getValue().add(value);\n+  }\n+  return fulldata;\n+ }\n+\n+ public File getKoPeMeFile() {\n+  return koPeMeFile;\n+ }\n+\n+ public Kopemedata getTransformed() {\n+  return transformed;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 142
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/1/JmhBenchmarkConverter.java\nindex 6e65fd91d28..c97c6f97b1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/1/JmhBenchmarkConverter.java\n@@ -39,8 +39,7 @@ public class JmhBenchmarkConverter {\n       \n       if (koPeMeFileTry.exists()) {\n          Kopemedata transformedTry = XMLDataLoader.loadData(koPeMeFileTry);\n-         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && \n-               transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n+         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n             transformed = transformedTry;\n             koPeMeFile = koPeMeFileTry;\n          } else {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/1/JmhBenchmarkConverter.java\nindex 6e65fd91d28..c97c6f97b1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/1/JmhBenchmarkConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/1/JmhBenchmarkConverter.java\n@@ -39,8 +39,7 @@ public class JmhBenchmarkConverter {\n       \n       if (koPeMeFileTry.exists()) {\n          Kopemedata transformedTry = XMLDataLoader.loadData(koPeMeFileTry);\n-         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && \n-               transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n+         if (transformedTry.getTestcases().getClazz().equals(testcase.getClazz()) && transformedTry.getTestcases().getTestcase().get(0).getName().equals(testcase.getMethod())) {\n             transformed = transformedTry;\n             koPeMeFile = koPeMeFileTry;\n          } else {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij"
    ]
}