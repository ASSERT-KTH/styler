{
    "project_name": "wso2-attic-commons",
    "error_id": "118",
    "information": {
        "errors": [
            {
                "line": "71",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 145).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                if (!XML.isElementNamed(e,XML.SAML_NS,\"Condition\") || q == null ||\n                    !XML.SAML_NS.equals(q.getNamespaceURI()) || !\"DoNotCacheConditionType\".equals(q.getLocalPart()))\n                    throw new MalformedException(SAMLException.RESPONDER, \"SAMLDoNotCacheCondition() requires saml:DoNotCacheCondition at root\");\n            }\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/118/SAMLDoNotCacheCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/118/SAMLDoNotCacheCondition.java\nindex 0e239e8207b..07a7b89894d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/118/SAMLDoNotCacheCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/118/SAMLDoNotCacheCondition.java\n@@ -1,6 +1,6 @@\n /*\n  *  Copyright 2001-2005 Internet2\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n@@ -23,93 +23,96 @@ import javax.xml.namespace.QName;\n import org.w3c.dom.*;\n \n /**\n- *  Represents a SAML DoNotCacheCondition\n+ * Represents a SAML DoNotCacheCondition\n  *\n- * @author     Scott Cantor\n- * @created    March 30, 2002\n+ * @author Scott Cantor\n+ * @created March 30, 2002\n  */\n-public class SAMLDoNotCacheCondition extends SAMLCondition implements Cloneable\n-{\n-    /**\n-     *  Default constructor\n-     */\n-    public SAMLDoNotCacheCondition() {\n-    }\n+public class SAMLDoNotCacheCondition extends SAMLCondition implements Cloneable {\n+  /**\n+   * Default constructor\n+   */\n+  public SAMLDoNotCacheCondition() {\n+  }\n \n-    /**\n-     *  Reconstructs a condition from a DOM tree\n-     *\n-     * @param  e                  The root of a DOM tree\n-     * @exception  SAMLException  Thrown if the object cannot be constructed\n-     */\n-    public SAMLDoNotCacheCondition(Element e) throws SAMLException {\n-        fromDOM(e);\n-    }\n+  /**\n+   * Reconstructs a condition from a DOM tree\n+   *\n+   * @param e The root of a DOM tree\n+   * @throws SAMLException Thrown if the object cannot be constructed\n+   */\n+  public SAMLDoNotCacheCondition(Element e) throws SAMLException {\n+    fromDOM(e);\n+  }\n \n-    /**\n-     *  Reconstructs a condition from a stream\n-     *\n-     * @param  in                   A stream containing XML\n-     * @exception  SAMLException  Raised if an exception occurs while constructing\n-     *                              the object.\n-     */\n-    public SAMLDoNotCacheCondition(InputStream in) throws SAMLException {\n-        fromDOM(fromStream(in));\n-    }\n-    \n-    /**\n-     * @see org.opensaml.SAMLObject#fromDOM(org.w3c.dom.Element)\n-     */\n-    public void fromDOM(Element e) throws SAMLException {\n-        super.fromDOM(e);\n-        \n-        if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\")) {\n-            if (!XML.isElementNamed(e,XML.SAML_NS,\"DoNotCacheCondition\")) {\n-                QName q = XML.getQNameAttribute(e, XML.XSI_NS, \"type\");\n-                if (!XML.isElementNamed(e,XML.SAML_NS,\"Condition\") || q == null ||\n-                    !XML.SAML_NS.equals(q.getNamespaceURI()) || !\"DoNotCacheConditionType\".equals(q.getLocalPart()))\n-                    throw new MalformedException(SAMLException.RESPONDER, \"SAMLDoNotCacheCondition() requires saml:DoNotCacheCondition at root\");\n-            }\n+  /**\n+   * Reconstructs a condition from a stream\n+   *\n+   * @param in A stream containing XML\n+   * @throws SAMLException Raised if an exception occurs while constructing\n+   *                       the object.\n+   */\n+  public SAMLDoNotCacheCondition(InputStream in) throws SAMLException {\n+    fromDOM(fromStream(in));\n+  }\n+\n+  /**\n+   * @see org.opensaml.SAMLObject#fromDOM(org.w3c.dom.Element)\n+   */\n+  public void fromDOM(Element e) throws SAMLException {\n+    super.fromDOM(e);\n+\n+    if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\")) {\n+      if (!XML.isElementNamed(e, XML.SAML_NS, \"DoNotCacheCondition\")) {\n+        QName q = XML.getQNameAttribute(e, XML.XSI_NS, \"type\");\n+        if (!XML.isElementNamed(e, XML.SAML_NS, \"Condition\") || q == null ||\n+          !XML.SAML_NS.equals(q.getNamespaceURI()) || !\"DoNotCacheConditionType\".equals(q.getLocalPart())) {\n+          throw new MalformedException(SAMLException.RESPONDER,\n+            \"SAMLDoNotCacheCondition() requires saml:DoNotCacheCondition at root\");\n         }\n+      }\n     }\n+  }\n \n-    /**\n-     *  @see org.opensaml.SAMLObject#buildRoot(org.w3c.dom.Document,boolean)\n-     */\n-    protected Element buildRoot(Document doc, boolean xmlns) {\n-        Element c = doc.createElementNS(XML.SAML_NS, \"DoNotCacheCondition\");\n-        if (xmlns)\n-            c.setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n-        return c;\n+  /**\n+   * @see org.opensaml.SAMLObject#buildRoot(org.w3c.dom.Document, boolean)\n+   */\n+  protected Element buildRoot(Document doc, boolean xmlns) {\n+    Element c = doc.createElementNS(XML.SAML_NS, \"DoNotCacheCondition\");\n+    if (xmlns) {\n+      c.setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n     }\n+    return c;\n+  }\n \n-    /**\n-     *  @see org.opensaml.SAMLObject#toDOM(org.w3c.dom.Document,boolean)\n-     */\n-    public Node toDOM(Document doc, boolean xmlns) throws SAMLException {\n-        super.toDOM(doc, xmlns);\n-        if (dirty)\n-            setDirty(false);\n-        else if (xmlns)\n-        \t((Element)root).setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n-        return root;\n+  /**\n+   * @see org.opensaml.SAMLObject#toDOM(org.w3c.dom.Document, boolean)\n+   */\n+  public Node toDOM(Document doc, boolean xmlns) throws SAMLException {\n+    super.toDOM(doc, xmlns);\n+    if (dirty) {\n+      setDirty(false);\n+    } else if (xmlns) {\n+      ((Element) root).setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n     }\n+    return root;\n+  }\n \n-    /**\n-     * @see org.opensaml.SAMLObject#checkValidity()\n-     */\n-    public void checkValidity() throws SAMLException {\n-    }\n-    \n-    /**\n-     *  Copies a SAML object such that no dependencies exist between the original\n-     *  and the copy\n-     * \n-     * @return      The new object\n-     * @see java.lang.Object#clone()\n-     */\n-    public Object clone() throws CloneNotSupportedException {\n-        return super.clone();\n-    }\n+  /**\n+   * @see org.opensaml.SAMLObject#checkValidity()\n+   */\n+  public void checkValidity() throws SAMLException {\n+  }\n+\n+  /**\n+   * Copies a SAML object such that no dependencies exist between the original\n+   * and the copy\n+   *\n+   * @return The new object\n+   * @see java.lang.Object#clone()\n+   */\n+  public Object clone() throws CloneNotSupportedException {\n+    return super.clone();\n+  }\n }\n \n",
            "diff_size": 84
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/118/SAMLDoNotCacheCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/118/SAMLDoNotCacheCondition.java\nindex 0e239e8207b..425f82a3214 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/118/SAMLDoNotCacheCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/118/SAMLDoNotCacheCondition.java\n@@ -91,7 +91,7 @@ public class SAMLDoNotCacheCondition extends SAMLCondition implements Cloneable\n         if (dirty)\n             setDirty(false);\n         else if (xmlns)\n-        \t((Element)root).setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n+    ((Element)root).setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n         return root;\n     }\n \n@@ -111,5 +111,4 @@ public class SAMLDoNotCacheCondition extends SAMLCondition implements Cloneable\n     public Object clone() throws CloneNotSupportedException {\n         return super.clone();\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}