{
    "project_name": "wso2-attic-commons",
    "error_id": "395",
    "information": {
        "errors": [
            {
                "line": "141",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    Selector newSelector = new Selector(sel.idx, sel.plinkInstance, sel.opName,\n                            sel.oneWay, sel.messageExchangeId, newKeySet, \"one\");\n                    newSelector.correlationKey = new CorrelationKey(\"\"+selCKey.getCorrelationSetName(), selCKey.getValues());\n                    newSelectors[index++] = newSelector;\n                }\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/395/CorrelationKeySetMigration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/395/CorrelationKeySetMigration.java\nindex 2d720bc645a..8e870411f8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/395/CorrelationKeySetMigration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/395/CorrelationKeySetMigration.java\n@@ -138,7 +138,8 @@ public class CorrelationKeySetMigration implements Migration {\n                     newKeySet.add(new CorrelationKey(\"\"+selCKey.getCorrelationSetName(), selCKey.getValues()));\n                     Selector newSelector = new Selector(sel.idx, sel.plinkInstance, sel.opName,\n                             sel.oneWay, sel.messageExchangeId, newKeySet, \"one\");\n-                    newSelector.correlationKey = new CorrelationKey(\"\"+selCKey.getCorrelationSetName(), selCKey.getValues());\n+                    newSelector.correlationKey = new CorrelationKey(\"\"+selCKey\n+                               .getCorrelationSetName(), selCKey.getValues());\n                     newSelectors[index++] = newSelector;\n                 }\n             }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/395/CorrelationKeySetMigration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/395/CorrelationKeySetMigration.java\nindex 2d720bc645a..d966f9ca9b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/395/CorrelationKeySetMigration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/395/CorrelationKeySetMigration.java\n@@ -45,154 +45,162 @@ import java.io.ByteArrayOutputStream;\n  * Migrates the database from using single correlations to multiple correlations support.\n  */\n public class CorrelationKeySetMigration implements Migration {\n-    private static final Log __log = LogFactory.getLog(CorrelationKeySetMigration.class);\n-\n-    public boolean migrate(Set<BpelProcess> registeredProcesses, BpelDAOConnection connection) {\n-        boolean v1First = true;\n-        for (BpelProcess process : registeredProcesses) {\n-            ProcessDAO processDao = connection.getProcess(process.getConf().getProcessId());\n-            Collection<ProcessInstanceDAO> pis = processDao.getActiveInstances();\n-\n-            // Migrate the correlation key stored in the jacob state of the instance\n-            for (ProcessInstanceDAO instance : pis) {\n-                __log.debug(\"Migrating correlation key in jacob for instance \" + instance.getInstanceId());\n-                OProcess oproc = findOProcess(registeredProcesses, instance.getProcess().getProcessId());\n-                if (v1First) {\n-                    if (!updateV1Key(instance, oproc)) {\n-                        v1First = false;\n-                        updateV2Key(instance, oproc);\n-                    }\n-                } else {\n-                    if (!updateV2Key(instance, oproc)) {\n-                        v1First = true;\n-                        updateV1Key(instance, oproc);\n-                    }\n-                }\n-            }\n+  private static final Log __log = LogFactory.getLog(CorrelationKeySetMigration.class);\n+\n+  public boolean migrate(Set<BpelProcess> registeredProcesses, BpelDAOConnection connection) {\n+    boolean v1First = true;\n+    for (BpelProcess process : registeredProcesses) {\n+      ProcessDAO processDao = connection.getProcess(process.getConf().getProcessId());\n+      Collection<ProcessInstanceDAO> pis = processDao.getActiveInstances();\n+\n+      // Migrate the correlation key stored in the jacob state of the instance\n+      for (ProcessInstanceDAO instance : pis) {\n+        __log.debug(\"Migrating correlation key in jacob for instance \" + instance.getInstanceId());\n+        OProcess oproc = findOProcess(registeredProcesses, instance.getProcess().getProcessId());\n+        if (v1First) {\n+          if (!updateV1Key(instance, oproc)) {\n+            v1First = false;\n+            updateV2Key(instance, oproc);\n+          }\n+        } else {\n+          if (!updateV2Key(instance, oproc)) {\n+            v1First = true;\n+            updateV1Key(instance, oproc);\n+          }\n         }\n-\n-        return true;\n+      }\n     }\n \n-    private boolean updateV1Key(ProcessInstanceDAO instance, OProcess oproc) {\n-        ExecutionQueueImpl soup;\n-        try {\n-            soup = readOldState(instance, oproc, getClass().getClassLoader(), true);\n-            if (soup == null) return false;\n-        } catch (Exception e) {\n-            __log.debug(\"  failed to read a v1 state for instance \" + instance.getInstanceId());\n-            ExecutionQueueImpl._classDescriptors.clear();\n-            return false;\n-        }\n-        try {\n-            OutstandingRequestManager orm = (OutstandingRequestManager) soup.getGlobalData();\n-            for (OutstandingRequestManager.Entry entry : orm._byChannel.values()) {\n-                Selector[] newSelectors = new Selector[entry.selectors.length];\n-                int index = 0;\n-                for (Object selector : entry.selectors) {\n-                    OldSelector sel = (OldSelector)selector;\n-                    Object selCKey = sel.correlationKey;\n-                    if (selCKey != null) {\n-                        OldCorrelationKey old = (OldCorrelationKey) selCKey;\n-                        __log.debug(\"   Changing V1 key \" + old.toCanonicalString());\n-\n-                        CorrelationKeySet newKeySet = new CorrelationKeySet();\n-                        newKeySet.add(new CorrelationKey(\"\"+old.getCSetId(), old.getValues()));\n-                        Selector newSelector = new Selector(sel.idx, sel.plinkInstance, sel.opName,\n-                                sel.oneWay, sel.messageExchangeId, newKeySet, \"one\");\n-                        newSelector.correlationKey = new CorrelationKey(\"\"+old.getCSetId(), old.getValues());\n-                        newSelectors[index++] = newSelector;\n-                    }\n-                }\n-                entry.selectors = newSelectors;\n-            }\n-\n-            writeOldState(instance, soup);\n-        } finally {\n-            ExecutionQueueImpl._classDescriptors.clear();\n-        }\n-        return true;\n+    return true;\n+  }\n+\n+  private boolean updateV1Key(ProcessInstanceDAO instance, OProcess oproc) {\n+    ExecutionQueueImpl soup;\n+    try {\n+      soup = readOldState(instance, oproc, getClass().getClassLoader(), true);\n+      if (soup == null) {\n+        return false;\n+      }\n+    } catch (Exception e) {\n+      __log.debug(\"  failed to read a v1 state for instance \" + instance.getInstanceId());\n+      ExecutionQueueImpl._classDescriptors.clear();\n+      return false;\n     }\n-\n-    private boolean updateV2Key(ProcessInstanceDAO instance, OProcess oproc) {\n-        ExecutionQueueImpl soup;\n-        try {\n-            soup = readOldState(instance, oproc, getClass().getClassLoader(), false);\n-            if (soup == null) return false;\n-        } catch (Exception e) {\n-            __log.debug(\"  failed to read a v2 state for instance \" + instance.getInstanceId());\n-            ExecutionQueueImpl._classDescriptors.clear();\n-            return false;\n-        }\n-        OutstandingRequestManager orm = (OutstandingRequestManager) soup.getGlobalData();\n-        for (OutstandingRequestManager.Entry entry : orm._byChannel.values()) {\n-            Selector[] newSelectors = new Selector[entry.selectors.length];\n-            int index = 0;\n-            for (Object selector : entry.selectors) {\n-                OldSelector sel = (OldSelector)selector;\n-                CorrelationKey selCKey = (CorrelationKey) sel.correlationKey;\n-                if (selCKey != null) {\n-                    __log.debug(\"   Changing V2 key \" + selCKey.toCanonicalString());\n-\n-                    CorrelationKeySet newKeySet = new CorrelationKeySet();\n-                    newKeySet.add(new CorrelationKey(\"\"+selCKey.getCorrelationSetName(), selCKey.getValues()));\n-                    Selector newSelector = new Selector(sel.idx, sel.plinkInstance, sel.opName,\n-                            sel.oneWay, sel.messageExchangeId, newKeySet, \"one\");\n-                    newSelector.correlationKey = new CorrelationKey(\"\"+selCKey.getCorrelationSetName(), selCKey.getValues());\n-                    newSelectors[index++] = newSelector;\n-                }\n-            }\n-            entry.selectors = newSelectors;\n+    try {\n+      OutstandingRequestManager orm = (OutstandingRequestManager) soup.getGlobalData();\n+      for (OutstandingRequestManager.Entry entry : orm._byChannel.values()) {\n+        Selector[] newSelectors = new Selector[entry.selectors.length];\n+        int index = 0;\n+        for (Object selector : entry.selectors) {\n+          OldSelector sel = (OldSelector) selector;\n+          Object selCKey = sel.correlationKey;\n+          if (selCKey != null) {\n+            OldCorrelationKey old = (OldCorrelationKey) selCKey;\n+            __log.debug(\"   Changing V1 key \" + old.toCanonicalString());\n+\n+            CorrelationKeySet newKeySet = new CorrelationKeySet();\n+            newKeySet.add(new CorrelationKey(\"\" + old.getCSetId(), old.getValues()));\n+            Selector newSelector = new Selector(sel.idx, sel.plinkInstance, sel.opName,\n+              sel.oneWay, sel.messageExchangeId, newKeySet, \"one\");\n+            newSelector.correlationKey = new CorrelationKey(\"\" + old.getCSetId(), old.getValues());\n+            newSelectors[index++] = newSelector;\n+          }\n         }\n+        entry.selectors = newSelectors;\n+      }\n \n-        writeOldState(instance, soup);\n-        return true;\n+      writeOldState(instance, soup);\n+    } finally {\n+      ExecutionQueueImpl._classDescriptors.clear();\n     }\n-\n-    private ExecutionQueueImpl readOldState(ProcessInstanceDAO instance, OProcess oprocess,\n-                                            ClassLoader cl, boolean changeKey) {\n-        if (instance.getExecutionState() == null) return null;\n-        try {\n-            ExecutionQueueImpl soup = new ExecutionQueueImpl(cl);\n-            ObjectStreamClass osc;\n-            if (changeKey) {\n-                osc = ObjectStreamClass.lookup(Class.forName(\n-                        \"org.apache.ode.bpel.engine.migration.OldCorrelationKey\", true, cl));\n-                ExecutionQueueImpl._classDescriptors.put(\"org.apache.ode.bpel.common.CorrelationKey\", osc);\n-            }\n-            osc = ObjectStreamClass.lookup(Class.forName(\n-                    \"org.apache.ode.bpel.engine.migration.OldSelector\", true, cl));\n-            ExecutionQueueImpl._classDescriptors.put(\"org.apache.ode.bpel.runtime.Selector\", osc);\n-            osc = ObjectStreamClass.lookup(Class.forName(\n-                    \"[Lorg.apache.ode.bpel.engine.migration.OldSelector;\", true, getClass().getClassLoader()));\n-            ExecutionQueueImpl._classDescriptors.put(\"[Lorg.apache.ode.bpel.runtime.Selector;\", osc);\n-\n-            soup.setReplacementMap(new ReplacementMapImpl(oprocess));\n-            ByteArrayInputStream iis = new ByteArrayInputStream(instance.getExecutionState());\n-            soup.read(iis);\n-            return soup;\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n+    return true;\n+  }\n+\n+  private boolean updateV2Key(ProcessInstanceDAO instance, OProcess oproc) {\n+    ExecutionQueueImpl soup;\n+    try {\n+      soup = readOldState(instance, oproc, getClass().getClassLoader(), false);\n+      if (soup == null) {\n+        return false;\n+      }\n+    } catch (Exception e) {\n+      __log.debug(\"  failed to read a v2 state for instance \" + instance.getInstanceId());\n+      ExecutionQueueImpl._classDescriptors.clear();\n+      return false;\n+    }\n+    OutstandingRequestManager orm = (OutstandingRequestManager) soup.getGlobalData();\n+    for (OutstandingRequestManager.Entry entry : orm._byChannel.values()) {\n+      Selector[] newSelectors = new Selector[entry.selectors.length];\n+      int index = 0;\n+      for (Object selector : entry.selectors) {\n+        OldSelector sel = (OldSelector) selector;\n+        CorrelationKey selCKey = (CorrelationKey) sel.correlationKey;\n+        if (selCKey != null) {\n+          __log.debug(\"   Changing V2 key \" + selCKey.toCanonicalString());\n+\n+          CorrelationKeySet newKeySet = new CorrelationKeySet();\n+          newKeySet.add(new CorrelationKey(\"\" + selCKey.getCorrelationSetName(), selCKey.getValues()));\n+          Selector newSelector = new Selector(sel.idx, sel.plinkInstance, sel.opName,\n+            sel.oneWay, sel.messageExchangeId, newKeySet, \"one\");\n+          newSelector.correlationKey = new CorrelationKey(\"\" + selCKey.getCorrelationSetName(), selCKey.getValues());\n+          newSelectors[index++] = newSelector;\n         }\n+      }\n+      entry.selectors = newSelectors;\n     }\n \n-    private void writeOldState(ProcessInstanceDAO instance, ExecutionQueueImpl soup) {\n-        try {\n-            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-            soup.write(bos);\n-            bos.close();\n-            instance.setExecutionState(bos.toByteArray());\n-            ExecutionQueueImpl._classDescriptors.clear();\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n+    writeOldState(instance, soup);\n+    return true;\n+  }\n+\n+  private ExecutionQueueImpl readOldState(ProcessInstanceDAO instance, OProcess oprocess,\n+                                          ClassLoader cl, boolean changeKey) {\n+    if (instance.getExecutionState() == null) {\n+      return null;\n     }\n+    try {\n+      ExecutionQueueImpl soup = new ExecutionQueueImpl(cl);\n+      ObjectStreamClass osc;\n+      if (changeKey) {\n+        osc = ObjectStreamClass.lookup(Class.forName(\n+          \"org.apache.ode.bpel.engine.migration.OldCorrelationKey\", true, cl));\n+        ExecutionQueueImpl._classDescriptors.put(\"org.apache.ode.bpel.common.CorrelationKey\", osc);\n+      }\n+      osc = ObjectStreamClass.lookup(Class.forName(\n+        \"org.apache.ode.bpel.engine.migration.OldSelector\", true, cl));\n+      ExecutionQueueImpl._classDescriptors.put(\"org.apache.ode.bpel.runtime.Selector\", osc);\n+      osc = ObjectStreamClass.lookup(Class.forName(\n+        \"[Lorg.apache.ode.bpel.engine.migration.OldSelector;\", true, getClass().getClassLoader()));\n+      ExecutionQueueImpl._classDescriptors.put(\"[Lorg.apache.ode.bpel.runtime.Selector;\", osc);\n+\n+      soup.setReplacementMap(new ReplacementMapImpl(oprocess));\n+      ByteArrayInputStream iis = new ByteArrayInputStream(instance.getExecutionState());\n+      soup.read(iis);\n+      return soup;\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private void writeOldState(ProcessInstanceDAO instance, ExecutionQueueImpl soup) {\n+    try {\n+      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+      soup.write(bos);\n+      bos.close();\n+      instance.setExecutionState(bos.toByteArray());\n+      ExecutionQueueImpl._classDescriptors.clear();\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n \n-    private OProcess findOProcess(Set<BpelProcess> registeredProcesses, QName name) {\n-        for (BpelProcess process : registeredProcesses) {\n-            if (process.getConf().getProcessId().equals(name)) return process.getOProcess();\n-        }\n-        return null;\n+  private OProcess findOProcess(Set<BpelProcess> registeredProcesses, QName name) {\n+    for (BpelProcess process : registeredProcesses) {\n+      if (process.getConf().getProcessId().equals(name)) {\n+        return process.getOProcess();\n+      }\n     }\n+    return null;\n+  }\n \n }\n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/395/CorrelationKeySetMigration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/395/CorrelationKeySetMigration.java\nindex 2d720bc645a..99747da5035 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/395/CorrelationKeySetMigration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/395/CorrelationKeySetMigration.java\n@@ -149,9 +149,8 @@ public class CorrelationKeySetMigration implements Migration {\n         return true;\n     }\n \n-    private ExecutionQueueImpl readOldState(ProcessInstanceDAO instance, OProcess oprocess,\n-                                            ClassLoader cl, boolean changeKey) {\n-        if (instance.getExecutionState() == null) return null;\n+    private ExecutionQueueImpl readOldState(ProcessInstanceDAO instance, OProcess oprocess, ClassLoader cl, boolean changeKey) {\n+    if (instance.getExecutionState() == null) return null;\n         try {\n             ExecutionQueueImpl soup = new ExecutionQueueImpl(cl);\n             ObjectStreamClass osc;\n@@ -195,4 +194,4 @@ public class CorrelationKeySetMigration implements Migration {\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/395/CorrelationKeySetMigration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/395/CorrelationKeySetMigration.java\nindex 2d720bc645a..8e870411f8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/395/CorrelationKeySetMigration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/395/CorrelationKeySetMigration.java\n@@ -138,7 +138,8 @@ public class CorrelationKeySetMigration implements Migration {\n                     newKeySet.add(new CorrelationKey(\"\"+selCKey.getCorrelationSetName(), selCKey.getValues()));\n                     Selector newSelector = new Selector(sel.idx, sel.plinkInstance, sel.opName,\n                             sel.oneWay, sel.messageExchangeId, newKeySet, \"one\");\n-                    newSelector.correlationKey = new CorrelationKey(\"\"+selCKey.getCorrelationSetName(), selCKey.getValues());\n+                    newSelector.correlationKey = new CorrelationKey(\"\"+selCKey\n+                               .getCorrelationSetName(), selCKey.getValues());\n                     newSelectors[index++] = newSelector;\n                 }\n             }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}