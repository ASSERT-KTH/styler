{
    "project_name": "neo4j-neo4j",
    "error_id": "3042",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3042/DuplicatedExtensionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3042/DuplicatedExtensionValidator.java\nindex 2854a346f7d..2797c7bcbc0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3042/DuplicatedExtensionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3042/DuplicatedExtensionValidator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tooling.procedure.validators;\n \n import java.lang.annotation.Annotation;\n@@ -42,22 +43,22 @@ import static java.util.stream.Collectors.groupingBy;\n  * {@code T}.\n  * This validation is done within an annotation processor. This means that the detection is detected only per\n  * compilation unit, not per Neo4j instance.\n- *\n+ * <p>\n  * Indeed, a Neo4j instance can aggregate several extension JARs and its duplication detection cannot be entirely\n  * replaced by this.\n  *\n  * @param <T> annotation type\n  */\n public class DuplicatedExtensionValidator<T extends Annotation>\n-        implements Function<Collection<Element>,Stream<CompilationMessage>>\n+  implements Function<Collection<Element>, Stream<CompilationMessage>>\n {\n \n     private final Elements elements;\n     private final Class<T> annotationType;\n-    private final Function<T,Optional<String>> customNameExtractor;\n+    private final Function<T, Optional<String>> customNameExtractor;\n \n-    public DuplicatedExtensionValidator( Elements elements, Class<T> annotationType,\n-            Function<T,Optional<String>> customNameExtractor )\n+    public DuplicatedExtensionValidator(Elements elements, Class<T> annotationType,\n+                                        Function<T, Optional<String>> customNameExtractor)\n     {\n         this.elements = elements;\n         this.annotationType = annotationType;\n@@ -65,57 +66,57 @@ public class DuplicatedExtensionValidator<T extends Annotation>\n     }\n \n     @Override\n-    public Stream<CompilationMessage> apply( Collection<Element> visitedProcedures )\n+    public Stream<CompilationMessage> apply(Collection<Element> visitedProcedures)\n     {\n-        return findDuplicates( visitedProcedures );\n+        return findDuplicates(visitedProcedures);\n     }\n \n-    private Stream<CompilationMessage> findDuplicates( Collection<Element> visitedProcedures )\n+    private Stream<CompilationMessage> findDuplicates(Collection<Element> visitedProcedures)\n     {\n-        return indexByName( visitedProcedures ).filter( index -> index.getValue().size() > 1 )\n-                .flatMap( this::asErrors );\n+        return indexByName(visitedProcedures).filter(index -> index.getValue().size() > 1)\n+          .flatMap(this::asErrors);\n     }\n \n-    private Stream<Map.Entry<String,List<Element>>> indexByName( Collection<Element> visitedProcedures )\n+    private Stream<Map.Entry<String, List<Element>>> indexByName(Collection<Element> visitedProcedures)\n     {\n-        return visitedProcedures.stream().collect( groupingBy( this::getName ) ).entrySet().stream();\n+        return visitedProcedures.stream().collect(groupingBy(this::getName)).entrySet().stream();\n     }\n \n-    private String getName( Element procedure )\n+    private String getName(Element procedure)\n     {\n-        T annotation = procedure.getAnnotation( annotationType );\n-        Optional<String> customName = customNameExtractor.apply( annotation );\n-        return customName.orElse( defaultQualifiedName( procedure ) );\n+        T annotation = procedure.getAnnotation(annotationType);\n+        Optional<String> customName = customNameExtractor.apply(annotation);\n+        return customName.orElse(defaultQualifiedName(procedure));\n     }\n \n-    private String defaultQualifiedName( Element procedure )\n+    private String defaultQualifiedName(Element procedure)\n     {\n-        return String.format( \"%s.%s\", elements.getPackageOf( procedure ), procedure.getSimpleName() );\n+        return String.format(\"%s.%s\", elements.getPackageOf(procedure), procedure.getSimpleName());\n     }\n \n-    private Stream<CompilationMessage> asErrors( Map.Entry<String,List<Element>> indexedProcedures )\n+    private Stream<CompilationMessage> asErrors(Map.Entry<String, List<Element>> indexedProcedures)\n     {\n         String duplicatedName = indexedProcedures.getKey();\n         return indexedProcedures.getValue().stream()\n-                .map( procedure -> asError( procedure, duplicatedName, indexedProcedures.getValue().size() ) );\n+          .map(procedure -> asError(procedure, duplicatedName, indexedProcedures.getValue().size()));\n     }\n \n-    private CompilationMessage asError( Element procedure, String duplicatedName, int duplicateCount )\n+    private CompilationMessage asError(Element procedure, String duplicatedName, int duplicateCount)\n     {\n-        return new DuplicatedProcedureError( procedure, getAnnotationMirror( procedure ),\n-                \"Procedure|function name <%s> is already defined %s times. It should be defined only once!\",\n-                duplicatedName, String.valueOf( duplicateCount ) );\n+        return new DuplicatedProcedureError(procedure, getAnnotationMirror(procedure),\n+          \"Procedure|function name <%s> is already defined %s times. It should be defined only once!\",\n+          duplicatedName, String.valueOf(duplicateCount));\n     }\n \n-    private AnnotationMirror getAnnotationMirror( Element procedure )\n+    private AnnotationMirror getAnnotationMirror(Element procedure)\n     {\n-        return procedure.getAnnotationMirrors().stream().filter( this::isProcedureAnnotationType ).findFirst()\n-                .orElse( null );\n+        return procedure.getAnnotationMirrors().stream().filter(this::isProcedureAnnotationType).findFirst()\n+          .orElse(null);\n     }\n \n-    private boolean isProcedureAnnotationType( AnnotationMirror mirror )\n+    private boolean isProcedureAnnotationType(AnnotationMirror mirror)\n     {\n-        return new AnnotationTypeVisitor( Procedure.class ).visit( mirror.getAnnotationType().asElement() );\n+        return new AnnotationTypeVisitor(Procedure.class).visit(mirror.getAnnotationType().asElement());\n     }\n \n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}