{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1507",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "97",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "211",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "247",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "250",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "265",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "268",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "298",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "298",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "326",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "329",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "352",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "150",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "390",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "436",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "463",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "466",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "151",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "519",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "545",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "645",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "659",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "670",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "684",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "710",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "715",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "752",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "752",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "758",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "758",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "758",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1507/SingleFilePageSwapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1507/SingleFilePageSwapper.java\nindex 0cea641cf26..682c2df9f93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1507/SingleFilePageSwapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1507/SingleFilePageSwapper.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache.impl;\n \n import org.apache.commons.lang3.SystemUtils;\n@@ -49,760 +50,735 @@ import static java.lang.String.format;\n /**\n  * A simple PageSwapper implementation that directs all page swapping to a\n  * single file on the file system.\n- *\n+ * <p>\n  * It additionally tracks the file size precisely, to avoid calling into the\n  * file system whenever the size of the given file is queried.\n  */\n public class SingleFilePageSwapper implements PageSwapper\n {\n-    private static final int MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS = 42;\n-\n-    private static int defaultChannelStripePower()\n-    {\n-        int vcores = Runtime.getRuntime().availableProcessors();\n-        // Find the lowest 2's exponent that can accommodate 'vcores'\n-        int stripePower = 32 - Integer.numberOfLeadingZeros( vcores - 1 );\n-        return Math.min( 64, Math.max( 1, stripePower ) );\n-    }\n-\n-    // Exponent of 2 of how many channels we open per file:\n-    private static final int channelStripePower = Integer.getInteger(\n-            \"org.neo4j.io.pagecache.implSingleFilePageSwapper.channelStripePower\",\n-            defaultChannelStripePower() );\n+  private static final int MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS = 42;\n \n-    // Exponent of 2 of how many consecutive pages go to the same stripe\n-    private static final int channelStripeShift = Integer.getInteger(\n-            \"org.neo4j.io.pagecache.implSingleFilePageSwapper.channelStripeShift\", 4 );\n+  private static int defaultChannelStripePower()\n+  {\n+    int vcores = Runtime.getRuntime().availableProcessors();\n+    // Find the lowest 2's exponent that can accommodate 'vcores'\n+    int stripePower = 32 - Integer.numberOfLeadingZeros(vcores - 1);\n+    return Math.min(64, Math.max(1, stripePower));\n+  }\n \n-    private static final int channelStripeCount = 1 << channelStripePower;\n-    private static final int channelStripeMask = channelStripeCount - 1;\n-    private static final int tokenChannelStripe = 0;\n-    private static final long tokenFilePageId = 0;\n-\n-    private static final long fileSizeOffset =\n-            UnsafeUtil.getFieldOffset( SingleFilePageSwapper.class, \"fileSize\" );\n-\n-    private static final ThreadLocal<ByteBuffer> proxyCache = new ThreadLocal<>();\n-    private static final MethodHandle positionLockGetter = getPositionLockGetter();\n-\n-    private static MethodHandle getPositionLockGetter()\n-    {\n-        try\n-        {\n-            MethodHandles.Lookup lookup = MethodHandles.lookup();\n-            Field field = FileChannelImpl.class.getDeclaredField( \"positionLock\" );\n-            field.setAccessible( true );\n-            return lookup.unreflectGetter( field );\n-        }\n-        catch ( Exception e )\n-        {\n-            return null;\n-        }\n-    }\n+  // Exponent of 2 of how many channels we open per file:\n+  private static final int channelStripePower = Integer.getInteger(\n+      \"org.neo4j.io.pagecache.implSingleFilePageSwapper.channelStripePower\",\n+      defaultChannelStripePower());\n \n-    private static ByteBuffer proxy( long buffer, int bufferLength ) throws IOException\n-    {\n-        ByteBuffer buf = proxyCache.get();\n-        if ( buf != null )\n-        {\n-            UnsafeUtil.initDirectByteBuffer( buf, buffer, bufferLength );\n-            return buf;\n-        }\n-        return createAndGetNewBuffer( buffer, bufferLength );\n-    }\n+  // Exponent of 2 of how many consecutive pages go to the same stripe\n+  private static final int channelStripeShift = Integer.getInteger(\n+      \"org.neo4j.io.pagecache.implSingleFilePageSwapper.channelStripeShift\", 4);\n \n-    private static ByteBuffer createAndGetNewBuffer( long buffer, int bufferLength ) throws IOException\n-    {\n-        ByteBuffer buf;\n-        try\n-        {\n-            buf = UnsafeUtil.newDirectByteBuffer( buffer, bufferLength );\n-        }\n-        catch ( Exception e )\n-        {\n-            throw new IOException( e );\n-        }\n-        proxyCache.set( buf );\n-        return buf;\n-    }\n-\n-    private final FileSystemAbstraction fs;\n-    private final File file;\n-    private final int filePageSize;\n-    private volatile PageEvictionCallback onEviction;\n-    private final StoreChannel[] channels;\n-    private FileLock fileLock;\n-    private final boolean hasPositionLock;\n-\n-    // Guarded by synchronized(this). See tryReopen() and close().\n-    private boolean closed;\n-\n-    @SuppressWarnings( \"unused\" ) // Accessed through unsafe\n-    private volatile long fileSize;\n-\n-    public SingleFilePageSwapper(\n-            File file,\n-            FileSystemAbstraction fs,\n-            int filePageSize,\n-            PageEvictionCallback onEviction ) throws IOException\n-    {\n-        this.fs = fs;\n-        this.file = file;\n-        this.channels = new StoreChannel[channelStripeCount];\n-        for ( int i = 0; i < channelStripeCount; i++ )\n-        {\n-            channels[i] = fs.open( file, OpenMode.READ_WRITE );\n-        }\n-        this.filePageSize = filePageSize;\n-        this.onEviction = onEviction;\n-        increaseFileSizeTo( channels[tokenChannelStripe].size() );\n+  private static final int channelStripeCount = 1 << channelStripePower;\n+  private static final int channelStripeMask = channelStripeCount - 1;\n+  private static final int tokenChannelStripe = 0;\n+  private static final long tokenFilePageId = 0;\n \n-        try\n-        {\n-            acquireLock();\n-        }\n-        catch ( IOException e )\n-        {\n-            closeAndCollectExceptions( 0, e );\n-        }\n-        hasPositionLock = channels[0].getClass() == StoreFileChannel.class\n-                && StoreFileChannelUnwrapper.unwrap( channels[0] ).getClass() == sun.nio.ch.FileChannelImpl.class;\n-    }\n+  private static final long fileSizeOffset =\n+      UnsafeUtil.getFieldOffset(SingleFilePageSwapper.class, \"fileSize\");\n \n-    private void increaseFileSizeTo( long newFileSize )\n-    {\n-        long currentFileSize;\n-        do\n-        {\n-            currentFileSize = getCurrentFileSize();\n-        }\n-        while ( currentFileSize < newFileSize && !UnsafeUtil.compareAndSwapLong(\n-                this, fileSizeOffset, currentFileSize, newFileSize ) );\n-    }\n+  private static final ThreadLocal<ByteBuffer> proxyCache = new ThreadLocal<>();\n+  private static final MethodHandle positionLockGetter = getPositionLockGetter();\n \n-    private long getCurrentFileSize()\n+  private static MethodHandle getPositionLockGetter()\n+  {\n+    try\n     {\n-        return UnsafeUtil.getLongVolatile( this, fileSizeOffset );\n-    }\n-\n-    private void setCurrentFileSize( long size )\n+      MethodHandles.Lookup lookup = MethodHandles.lookup();\n+      Field field = FileChannelImpl.class.getDeclaredField(\"positionLock\");\n+      field.setAccessible(true);\n+      return lookup.unreflectGetter(field);\n+    } catch (Exception e)\n+    {\n+      return null;\n+    }\n+  }\n+\n+  private static ByteBuffer proxy(long buffer, int bufferLength) throws IOException\n+  {\n+    ByteBuffer buf = proxyCache.get();\n+    if (buf != null)\n     {\n-        UnsafeUtil.putLongVolatile( this, fileSizeOffset, size );\n-    }\n+      UnsafeUtil.initDirectByteBuffer(buf, buffer, bufferLength);\n+      return buf;\n+    }\n+    return createAndGetNewBuffer(buffer, bufferLength);\n+  }\n \n-    private void acquireLock() throws IOException\n+  private static ByteBuffer createAndGetNewBuffer(long buffer, int bufferLength) throws IOException\n+  {\n+    ByteBuffer buf;\n+    try\n     {\n-        if ( SystemUtils.IS_OS_WINDOWS )\n-        {\n-            // We don't take file locks on the individual store files on Windows, because once you've taking\n-            // a file lock on a channel, you can only do IO on that file through that channel. This would\n-            // mean that we can't stripe our FileChannels on Windows, which is the platform that needs striped\n-            // channels the most because of lack of pwrite and pread support.\n-            // This is generally fine, because the StoreLocker and the lock file will protect the store from\n-            // being opened by multiple instances at the same time anyway.\n-            return;\n-        }\n-\n-        try\n-        {\n-            fileLock = channels[tokenChannelStripe].tryLock();\n-            if ( fileLock == null )\n-            {\n-                throw new FileLockException( file );\n-            }\n-        }\n-        catch ( OverlappingFileLockException e )\n-        {\n-            throw new FileLockException( file, e );\n-        }\n-    }\n-\n-    private StoreChannel channel( long filePageId )\n-    {\n-        int stripe = stripe( filePageId );\n-        return channels[stripe];\n-    }\n-\n-    private static int stripe( long filePageId )\n-    {\n-        return (int) (filePageId >>> channelStripeShift) & channelStripeMask;\n-    }\n-\n-    private int swapIn( StoreChannel channel, long bufferAddress, int bufferSize, long fileOffset, int filePageSize ) throws IOException\n-    {\n-        int readTotal = 0;\n-        try\n-        {\n-            ByteBuffer bufferProxy = proxy( bufferAddress, filePageSize );\n-            int read;\n-            do\n-            {\n-                read = channel.read( bufferProxy, fileOffset + readTotal );\n-            }\n-            while ( read != -1 && (readTotal += read) < filePageSize );\n-\n-            // Zero-fill the rest.\n-            assert readTotal >= 0 && filePageSize <= bufferSize && readTotal <= filePageSize : format(\n-                    \"pointer = %h, readTotal = %s, length = %s, page size = %s\",\n-                    bufferAddress, readTotal, filePageSize, bufferSize );\n-            UnsafeUtil.setMemory( bufferAddress + readTotal, filePageSize - readTotal, MuninnPageCache.ZERO_BYTE );\n-            return readTotal;\n-        }\n-        catch ( IOException e )\n-        {\n-            throw e;\n-        }\n-        catch ( Throwable e )\n-        {\n-            String msg = format(\n-                    \"Read failed after %s of %s bytes from fileOffset %s\",\n-                    readTotal, filePageSize, fileOffset );\n-            throw new IOException( msg, e );\n-        }\n-    }\n-\n-    private int swapOut( long bufferAddress, long fileOffset, StoreChannel channel ) throws IOException\n-    {\n-        try\n-        {\n-            ByteBuffer bufferProxy = proxy( bufferAddress, filePageSize );\n-            channel.writeAll( bufferProxy, fileOffset );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw e;\n-        }\n-        catch ( Throwable e )\n-        {\n-            throw new IOException( e );\n-        }\n-        return filePageSize;\n-    }\n-\n-    private void clear( long bufferAddress, int bufferSize )\n-    {\n-        UnsafeUtil.setMemory( bufferAddress, bufferSize, MuninnPageCache.ZERO_BYTE );\n-    }\n-\n-    @Override\n-    public long read( long filePageId, long bufferAddress, int bufferSize ) throws IOException\n-    {\n-        return readAndRetryIfInterrupted( filePageId, bufferAddress, bufferSize, MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS );\n-    }\n-\n-    private long readAndRetryIfInterrupted( long filePageId, long bufferAddress, int bufferSize, int attemptsLeft ) throws IOException\n-    {\n-        long fileOffset = pageIdToPosition( filePageId );\n-        try\n-        {\n-            if ( fileOffset < getCurrentFileSize() )\n-            {\n-                return swapIn( channel( filePageId ), bufferAddress, bufferSize, fileOffset, filePageSize );\n-            }\n-            else\n-            {\n-                clear( bufferAddress, bufferSize );\n-            }\n-        }\n-        catch ( ClosedChannelException e )\n-        {\n-            tryReopen( filePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n-            {\n-                throw new IOException( \"IO failed due to interruption\", e );\n-            }\n-\n-            boolean interrupted = Thread.interrupted();\n-            long bytesRead = readAndRetryIfInterrupted( filePageId, bufferAddress, bufferSize, attemptsLeft - 1 );\n-            if ( interrupted )\n-            {\n-                Thread.currentThread().interrupt();\n-            }\n-            return bytesRead;\n-        }\n-        return 0;\n-    }\n-\n-    @Override\n-    public long read( long startFilePageId, long[] bufferAddresses, int bufferSize, int arrayOffset, int length ) throws IOException\n-    {\n-        if ( positionLockGetter != null && hasPositionLock )\n-        {\n-            try\n-            {\n-                return readPositionedVectoredToFileChannel( startFilePageId, bufferAddresses, arrayOffset, length );\n-            }\n-            catch ( IOException ioe )\n-            {\n-                throw ioe;\n-            }\n-            catch ( Exception ignore )\n-            {\n-                // There's a lot of reflection going on in that method. We ignore everything that can go wrong, and\n-                // isn't exactly an IOException. Instead, we'll try our fallback code and see what it says.\n-            }\n-        }\n-        return readPositionedVectoredFallback( startFilePageId, bufferAddresses, bufferSize, arrayOffset, length );\n-    }\n-\n-    private long readPositionedVectoredToFileChannel(\n-            long startFilePageId, long[] bufferAddresses, int arrayOffset, int length ) throws Exception\n-    {\n-        long fileOffset = pageIdToPosition( startFilePageId );\n-        FileChannel channel = unwrappedChannel( startFilePageId );\n-        ByteBuffer[] srcs = convertToByteBuffers( bufferAddresses, arrayOffset, length );\n-        long bytesRead = lockPositionReadVectorAndRetryIfInterrupted( startFilePageId, channel, fileOffset, srcs, MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS );\n-        if ( bytesRead == -1 )\n-        {\n-            for ( long address : bufferAddresses )\n-            {\n-                UnsafeUtil.setMemory( address, filePageSize, MuninnPageCache.ZERO_BYTE );\n-            }\n-            return 0;\n-        }\n-        else if ( bytesRead < ((long) filePageSize) * length )\n-        {\n-            int pagesRead = (int) (bytesRead / filePageSize);\n-            int bytesReadIntoLastReadPage = (int) (bytesRead % filePageSize);\n-            int pagesNeedingZeroing = length - pagesRead;\n-            for ( int i = 0; i < pagesNeedingZeroing; i++ )\n-            {\n-                long address = bufferAddresses[arrayOffset + pagesRead + i];\n-                long bytesToZero = filePageSize;\n-                if ( i == 0 )\n-                {\n-                    address += bytesReadIntoLastReadPage;\n-                    bytesToZero -= bytesReadIntoLastReadPage;\n-                }\n-                UnsafeUtil.setMemory( address, bytesToZero, MuninnPageCache.ZERO_BYTE );\n-            }\n-        }\n-        return bytesRead;\n-    }\n-\n-    private long lockPositionReadVectorAndRetryIfInterrupted( long filePageId, FileChannel channel, long fileOffset, ByteBuffer[] srcs, int attemptsLeft )\n-            throws IOException\n+      buf = UnsafeUtil.newDirectByteBuffer(buffer, bufferLength);\n+    } catch (Exception e)\n     {\n-        try\n-        {\n-            long toRead = filePageSize * (long) srcs.length;\n-            long read;\n-            long readTotal = 0;\n-            synchronized ( positionLock( channel ) )\n-            {\n-                channel.position( fileOffset );\n-                do\n-                {\n-                    read = channel.read( srcs );\n-                }\n-                while ( read != -1 && (readTotal += read) < toRead );\n-                return readTotal;\n-            }\n-        }\n-        catch ( ClosedChannelException e )\n-        {\n-            tryReopen( filePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n-            {\n-                throw new IOException( \"IO failed due to interruption\", e );\n-            }\n-\n-            boolean interrupted = Thread.interrupted();\n-            channel = unwrappedChannel( filePageId );\n-            long bytesWritten = lockPositionReadVectorAndRetryIfInterrupted( filePageId, channel, fileOffset, srcs, attemptsLeft - 1 );\n-            if ( interrupted )\n-            {\n-                Thread.currentThread().interrupt();\n-            }\n-            return bytesWritten;\n-        }\n+      throw new IOException(e);\n     }\n+    proxyCache.set(buf);\n+    return buf;\n+  }\n \n-    private int readPositionedVectoredFallback(\n-            long startFilePageId, long[] bufferAddresses, int bufferSize, int arrayOffset, int length ) throws IOException\n+  private final FileSystemAbstraction fs;\n+  private final File file;\n+  private final int filePageSize;\n+  private volatile PageEvictionCallback onEviction;\n+  private final StoreChannel[] channels;\n+  private FileLock fileLock;\n+  private final boolean hasPositionLock;\n+\n+  // Guarded by synchronized(this). See tryReopen() and close().\n+  private boolean closed;\n+\n+  @SuppressWarnings(\"unused\") // Accessed through unsafe\n+  private volatile long fileSize;\n+\n+  public SingleFilePageSwapper(\n+      File file,\n+      FileSystemAbstraction fs,\n+      int filePageSize,\n+      PageEvictionCallback onEviction) throws IOException\n+  {\n+    this.fs = fs;\n+    this.file = file;\n+    this.channels = new StoreChannel[channelStripeCount];\n+    for (int i = 0; i < channelStripeCount; i++)\n+    {\n+      channels[i] = fs.open(file, OpenMode.READ_WRITE);\n+    }\n+    this.filePageSize = filePageSize;\n+    this.onEviction = onEviction;\n+    increaseFileSizeTo(channels[tokenChannelStripe].size());\n+\n+    try\n+    {\n+      acquireLock();\n+    } catch (IOException e)\n+    {\n+      closeAndCollectExceptions(0, e);\n+    }\n+    hasPositionLock = channels[0].getClass() == StoreFileChannel.class\n+        && StoreFileChannelUnwrapper.unwrap(channels[0]).getClass() == sun.nio.ch.FileChannelImpl.class;\n+  }\n+\n+  private void increaseFileSizeTo(long newFileSize)\n+  {\n+    long currentFileSize;\n+    do\n     {\n-        int bytes = 0;\n-        for ( int i = 0; i < length; i++ )\n-        {\n-            long address = bufferAddresses[arrayOffset + i];\n-            bytes += read( startFilePageId + i, address, bufferSize );\n-        }\n-        return bytes;\n+      currentFileSize = getCurrentFileSize();\n     }\n+    while (currentFileSize < newFileSize && !UnsafeUtil.compareAndSwapLong(\n+        this, fileSizeOffset, currentFileSize, newFileSize));\n+  }\n \n-    @Override\n-    public long write( long filePageId, long bufferAddress ) throws IOException\n-    {\n-        return writeAndRetryIfInterrupted( filePageId, bufferAddress, MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS );\n-    }\n+  private long getCurrentFileSize()\n+  {\n+    return UnsafeUtil.getLongVolatile(this, fileSizeOffset);\n+  }\n \n-    private long writeAndRetryIfInterrupted( long filePageId, long bufferAddress, int attemptsLeft ) throws IOException\n-    {\n-        long fileOffset = pageIdToPosition( filePageId );\n-        increaseFileSizeTo( fileOffset + filePageSize );\n-        try\n+  private void setCurrentFileSize(long size)\n+  {\n+    UnsafeUtil.putLongVolatile(this, fileSizeOffset, size);\n+  }\n+\n+  private void acquireLock() throws IOException\n+  {\n+    if (SystemUtils.IS_OS_WINDOWS)\n+    {\n+      // We don't take file locks on the individual store files on Windows, because once you've taking\n+      // a file lock on a channel, you can only do IO on that file through that channel. This would\n+      // mean that we can't stripe our FileChannels on Windows, which is the platform that needs striped\n+      // channels the most because of lack of pwrite and pread support.\n+      // This is generally fine, because the StoreLocker and the lock file will protect the store from\n+      // being opened by multiple instances at the same time anyway.\n+      return;\n+    }\n+\n+    try\n+    {\n+      fileLock = channels[tokenChannelStripe].tryLock();\n+      if (fileLock == null)\n+      {\n+        throw new FileLockException(file);\n+      }\n+    } catch (OverlappingFileLockException e)\n+    {\n+      throw new FileLockException(file, e);\n+    }\n+  }\n+\n+  private StoreChannel channel(long filePageId)\n+  {\n+    int stripe = stripe(filePageId);\n+    return channels[stripe];\n+  }\n+\n+  private static int stripe(long filePageId)\n+  {\n+    return (int) (filePageId >>> channelStripeShift) & channelStripeMask;\n+  }\n+\n+  private int swapIn(StoreChannel channel, long bufferAddress, int bufferSize, long fileOffset, int filePageSize) throws IOException\n+  {\n+    int readTotal = 0;\n+    try\n+    {\n+      ByteBuffer bufferProxy = proxy(bufferAddress, filePageSize);\n+      int read;\n+      do\n+      {\n+        read = channel.read(bufferProxy, fileOffset + readTotal);\n+      }\n+      while (read != -1 && (readTotal += read) < filePageSize);\n+\n+      // Zero-fill the rest.\n+      assert readTotal >= 0 && filePageSize <= bufferSize && readTotal <= filePageSize : format(\n+          \"pointer = %h, readTotal = %s, length = %s, page size = %s\",\n+          bufferAddress, readTotal, filePageSize, bufferSize);\n+      UnsafeUtil.setMemory(bufferAddress + readTotal, filePageSize - readTotal, MuninnPageCache.ZERO_BYTE);\n+      return readTotal;\n+    } catch (IOException e)\n+    {\n+      throw e;\n+    } catch (Throwable e)\n+    {\n+      String msg = format(\n+          \"Read failed after %s of %s bytes from fileOffset %s\",\n+          readTotal, filePageSize, fileOffset);\n+      throw new IOException(msg, e);\n+    }\n+  }\n+\n+  private int swapOut(long bufferAddress, long fileOffset, StoreChannel channel) throws IOException\n+  {\n+    try\n+    {\n+      ByteBuffer bufferProxy = proxy(bufferAddress, filePageSize);\n+      channel.writeAll(bufferProxy, fileOffset);\n+    } catch (IOException e)\n+    {\n+      throw e;\n+    } catch (Throwable e)\n+    {\n+      throw new IOException(e);\n+    }\n+    return filePageSize;\n+  }\n+\n+  private void clear(long bufferAddress, int bufferSize)\n+  {\n+    UnsafeUtil.setMemory(bufferAddress, bufferSize, MuninnPageCache.ZERO_BYTE);\n+  }\n+\n+  @Override\n+  public long read(long filePageId, long bufferAddress, int bufferSize) throws IOException\n+  {\n+    return readAndRetryIfInterrupted(filePageId, bufferAddress, bufferSize, MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS);\n+  }\n+\n+  private long readAndRetryIfInterrupted(long filePageId, long bufferAddress, int bufferSize, int attemptsLeft) throws IOException\n+  {\n+    long fileOffset = pageIdToPosition(filePageId);\n+    try\n+    {\n+      if (fileOffset < getCurrentFileSize())\n+      {\n+        return swapIn(channel(filePageId), bufferAddress, bufferSize, fileOffset, filePageSize);\n+      } else\n+      {\n+        clear(bufferAddress, bufferSize);\n+      }\n+    } catch (ClosedChannelException e)\n+    {\n+      tryReopen(filePageId, e);\n+\n+      if (attemptsLeft < 1)\n+      {\n+        throw new IOException(\"IO failed due to interruption\", e);\n+      }\n+\n+      boolean interrupted = Thread.interrupted();\n+      long bytesRead = readAndRetryIfInterrupted(filePageId, bufferAddress, bufferSize, attemptsLeft - 1);\n+      if (interrupted)\n+      {\n+        Thread.currentThread().interrupt();\n+      }\n+      return bytesRead;\n+    }\n+    return 0;\n+  }\n+\n+  @Override\n+  public long read(long startFilePageId, long[] bufferAddresses, int bufferSize, int arrayOffset, int length) throws IOException\n+  {\n+    if (positionLockGetter != null && hasPositionLock)\n+    {\n+      try\n+      {\n+        return readPositionedVectoredToFileChannel(startFilePageId, bufferAddresses, arrayOffset, length);\n+      } catch (IOException ioe)\n+      {\n+        throw ioe;\n+      } catch (Exception ignore)\n+      {\n+        // There's a lot of reflection going on in that method. We ignore everything that can go wrong, and\n+        // isn't exactly an IOException. Instead, we'll try our fallback code and see what it says.\n+      }\n+    }\n+    return readPositionedVectoredFallback(startFilePageId, bufferAddresses, bufferSize, arrayOffset, length);\n+  }\n+\n+  private long readPositionedVectoredToFileChannel(\n+      long startFilePageId, long[] bufferAddresses, int arrayOffset, int length) throws Exception\n+  {\n+    long fileOffset = pageIdToPosition(startFilePageId);\n+    FileChannel channel = unwrappedChannel(startFilePageId);\n+    ByteBuffer[] srcs = convertToByteBuffers(bufferAddresses, arrayOffset, length);\n+    long bytesRead = lockPositionReadVectorAndRetryIfInterrupted(startFilePageId, channel, fileOffset, srcs, MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS);\n+    if (bytesRead == -1)\n+    {\n+      for (long address : bufferAddresses)\n+      {\n+        UnsafeUtil.setMemory(address, filePageSize, MuninnPageCache.ZERO_BYTE);\n+      }\n+      return 0;\n+    } else if (bytesRead < ((long) filePageSize) * length)\n+    {\n+      int pagesRead = (int) (bytesRead / filePageSize);\n+      int bytesReadIntoLastReadPage = (int) (bytesRead % filePageSize);\n+      int pagesNeedingZeroing = length - pagesRead;\n+      for (int i = 0; i < pagesNeedingZeroing; i++)\n+      {\n+        long address = bufferAddresses[arrayOffset + pagesRead + i];\n+        long bytesToZero = filePageSize;\n+        if (i == 0)\n+        {\n+          address += bytesReadIntoLastReadPage;\n+          bytesToZero -= bytesReadIntoLastReadPage;\n+        }\n+        UnsafeUtil.setMemory(address, bytesToZero, MuninnPageCache.ZERO_BYTE);\n+      }\n+    }\n+    return bytesRead;\n+  }\n+\n+  private long lockPositionReadVectorAndRetryIfInterrupted(long filePageId, FileChannel channel, long fileOffset, ByteBuffer[] srcs, int attemptsLeft)\n+      throws IOException\n+  {\n+    try\n+    {\n+      long toRead = filePageSize * (long) srcs.length;\n+      long read;\n+      long readTotal = 0;\n+      synchronized (positionLock(channel))\n+      {\n+        channel.position(fileOffset);\n+        do\n         {\n-            StoreChannel channel = channel( filePageId );\n-            return swapOut( bufferAddress, fileOffset, channel );\n-        }\n-        catch ( ClosedChannelException e )\n+          read = channel.read(srcs);\n+        }\n+        while (read != -1 && (readTotal += read) < toRead);\n+        return readTotal;\n+      }\n+    } catch (ClosedChannelException e)\n+    {\n+      tryReopen(filePageId, e);\n+\n+      if (attemptsLeft < 1)\n+      {\n+        throw new IOException(\"IO failed due to interruption\", e);\n+      }\n+\n+      boolean interrupted = Thread.interrupted();\n+      channel = unwrappedChannel(filePageId);\n+      long bytesWritten = lockPositionReadVectorAndRetryIfInterrupted(filePageId, channel, fileOffset, srcs, attemptsLeft - 1);\n+      if (interrupted)\n+      {\n+        Thread.currentThread().interrupt();\n+      }\n+      return bytesWritten;\n+    }\n+  }\n+\n+  private int readPositionedVectoredFallback(\n+      long startFilePageId, long[] bufferAddresses, int bufferSize, int arrayOffset, int length) throws IOException\n+  {\n+    int bytes = 0;\n+    for (int i = 0; i < length; i++)\n+    {\n+      long address = bufferAddresses[arrayOffset + i];\n+      bytes += read(startFilePageId + i, address, bufferSize);\n+    }\n+    return bytes;\n+  }\n+\n+  @Override\n+  public long write(long filePageId, long bufferAddress) throws IOException\n+  {\n+    return writeAndRetryIfInterrupted(filePageId, bufferAddress, MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS);\n+  }\n+\n+  private long writeAndRetryIfInterrupted(long filePageId, long bufferAddress, int attemptsLeft) throws IOException\n+  {\n+    long fileOffset = pageIdToPosition(filePageId);\n+    increaseFileSizeTo(fileOffset + filePageSize);\n+    try\n+    {\n+      StoreChannel channel = channel(filePageId);\n+      return swapOut(bufferAddress, fileOffset, channel);\n+    } catch (ClosedChannelException e)\n+    {\n+      tryReopen(filePageId, e);\n+\n+      if (attemptsLeft < 1)\n+      {\n+        throw new IOException(\"IO failed due to interruption\", e);\n+      }\n+\n+      boolean interrupted = Thread.interrupted();\n+      long bytesWritten = writeAndRetryIfInterrupted(filePageId, bufferAddress, attemptsLeft - 1);\n+      if (interrupted)\n+      {\n+        Thread.currentThread().interrupt();\n+      }\n+      return bytesWritten;\n+    }\n+  }\n+\n+  @Override\n+  public long write(long startFilePageId, long[] bufferAddresses, int arrayOffset, int length) throws IOException\n+  {\n+    if (positionLockGetter != null && hasPositionLock)\n+    {\n+      try\n+      {\n+        return writePositionedVectoredToFileChannel(startFilePageId, bufferAddresses, arrayOffset, length);\n+      } catch (IOException ioe)\n+      {\n+        throw ioe;\n+      } catch (Exception ignore)\n+      {\n+        // There's a lot of reflection going on in that method. We ignore everything that can go wrong, and\n+        // isn't exactly an IOException. Instead, we'll try our fallback code and see what it says.\n+      }\n+    }\n+    return writePositionVectoredFallback(startFilePageId, bufferAddresses, arrayOffset, length);\n+  }\n+\n+  private long writePositionedVectoredToFileChannel(\n+      long startFilePageId, long[] bufferAddresses, int arrayOffset, int length) throws Exception\n+  {\n+    long fileOffset = pageIdToPosition(startFilePageId);\n+    increaseFileSizeTo(fileOffset + (((long) filePageSize) * length));\n+    FileChannel channel = unwrappedChannel(startFilePageId);\n+    ByteBuffer[] srcs = convertToByteBuffers(bufferAddresses, arrayOffset, length);\n+    return lockPositionWriteVectorAndRetryIfInterrupted(startFilePageId, channel, fileOffset, srcs, MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS);\n+  }\n+\n+  private ByteBuffer[] convertToByteBuffers(long[] bufferAddresses, int arrayOffset, int length) throws Exception\n+  {\n+    ByteBuffer[] buffers = new ByteBuffer[length];\n+    for (int i = 0; i < length; i++)\n+    {\n+      long address = bufferAddresses[arrayOffset + i];\n+      buffers[i] = UnsafeUtil.newDirectByteBuffer(address, filePageSize);\n+    }\n+    return buffers;\n+  }\n+\n+  private FileChannel unwrappedChannel(long startFilePageId)\n+  {\n+    StoreChannel storeChannel = channel(startFilePageId);\n+    return StoreFileChannelUnwrapper.unwrap(storeChannel);\n+  }\n+\n+  private long lockPositionWriteVectorAndRetryIfInterrupted(long filePageId, FileChannel channel, long fileOffset, ByteBuffer[] srcs, int attemptsLeft)\n+      throws IOException\n+  {\n+    try\n+    {\n+      long toWrite = filePageSize * (long) srcs.length;\n+      long bytesWritten = 0;\n+      synchronized (positionLock(channel))\n+      {\n+        channel.position(fileOffset);\n+        do\n         {\n-            tryReopen( filePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n-            {\n-                throw new IOException( \"IO failed due to interruption\", e );\n-            }\n-\n-            boolean interrupted = Thread.interrupted();\n-            long bytesWritten = writeAndRetryIfInterrupted( filePageId, bufferAddress, attemptsLeft - 1 );\n-            if ( interrupted )\n-            {\n-                Thread.currentThread().interrupt();\n-            }\n-            return bytesWritten;\n+          bytesWritten += channel.write(srcs);\n         }\n-    }\n-\n-    @Override\n-    public long write( long startFilePageId, long[] bufferAddresses, int arrayOffset, int length ) throws IOException\n+        while (bytesWritten < toWrite);\n+        return bytesWritten;\n+      }\n+    } catch (ClosedChannelException e)\n     {\n-        if ( positionLockGetter != null && hasPositionLock )\n-        {\n-            try\n-            {\n-                return writePositionedVectoredToFileChannel( startFilePageId, bufferAddresses, arrayOffset, length );\n-            }\n-            catch ( IOException ioe )\n-            {\n-                throw ioe;\n-            }\n-            catch ( Exception ignore )\n-            {\n-                // There's a lot of reflection going on in that method. We ignore everything that can go wrong, and\n-                // isn't exactly an IOException. Instead, we'll try our fallback code and see what it says.\n-            }\n-        }\n-        return writePositionVectoredFallback( startFilePageId, bufferAddresses, arrayOffset, length );\n-    }\n+      tryReopen(filePageId, e);\n \n-    private long writePositionedVectoredToFileChannel(\n-            long startFilePageId, long[] bufferAddresses, int arrayOffset, int length ) throws Exception\n-    {\n-        long fileOffset = pageIdToPosition( startFilePageId );\n-        increaseFileSizeTo( fileOffset + (((long) filePageSize) * length) );\n-        FileChannel channel = unwrappedChannel( startFilePageId );\n-        ByteBuffer[] srcs = convertToByteBuffers( bufferAddresses, arrayOffset, length );\n-        return lockPositionWriteVectorAndRetryIfInterrupted( startFilePageId, channel, fileOffset, srcs, MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS );\n-    }\n+      if (attemptsLeft < 1)\n+      {\n+        throw new IOException(\"IO failed due to interruption\", e);\n+      }\n \n-    private ByteBuffer[] convertToByteBuffers( long[] bufferAddresses, int arrayOffset, int length ) throws Exception\n-    {\n-        ByteBuffer[] buffers = new ByteBuffer[length];\n-        for ( int i = 0; i < length; i++ )\n-        {\n-            long address = bufferAddresses[arrayOffset + i];\n-            buffers[i] = UnsafeUtil.newDirectByteBuffer( address, filePageSize );\n-        }\n-        return buffers;\n+      boolean interrupted = Thread.interrupted();\n+      channel = unwrappedChannel(filePageId);\n+      long bytesWritten = lockPositionWriteVectorAndRetryIfInterrupted(filePageId, channel, fileOffset, srcs, attemptsLeft - 1);\n+      if (interrupted)\n+      {\n+        Thread.currentThread().interrupt();\n+      }\n+      return bytesWritten;\n     }\n+  }\n \n-    private FileChannel unwrappedChannel( long startFilePageId )\n+  private Object positionLock(FileChannel channel)\n+  {\n+    sun.nio.ch.FileChannelImpl impl = (FileChannelImpl) channel;\n+    try\n     {\n-        StoreChannel storeChannel = channel( startFilePageId );\n-        return StoreFileChannelUnwrapper.unwrap( storeChannel );\n-    }\n-\n-    private long lockPositionWriteVectorAndRetryIfInterrupted( long filePageId, FileChannel channel, long fileOffset, ByteBuffer[] srcs, int attemptsLeft )\n-            throws IOException\n+      return (Object) positionLockGetter.invokeExact(impl);\n+    } catch (Throwable th)\n     {\n-        try\n-        {\n-            long toWrite = filePageSize * (long) srcs.length;\n-            long bytesWritten = 0;\n-            synchronized ( positionLock( channel ) )\n-            {\n-                channel.position( fileOffset );\n-                do\n-                {\n-                    bytesWritten += channel.write( srcs );\n-                }\n-                while ( bytesWritten < toWrite );\n-                return bytesWritten;\n-            }\n-        }\n-        catch ( ClosedChannelException e )\n-        {\n-            tryReopen( filePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n-            {\n-                throw new IOException( \"IO failed due to interruption\", e );\n-            }\n-\n-            boolean interrupted = Thread.interrupted();\n-            channel = unwrappedChannel( filePageId );\n-            long bytesWritten = lockPositionWriteVectorAndRetryIfInterrupted( filePageId, channel, fileOffset, srcs, attemptsLeft - 1 );\n-            if ( interrupted )\n-            {\n-                Thread.currentThread().interrupt();\n-            }\n-            return bytesWritten;\n-        }\n+      throw new LinkageError(\"No getter for FileChannel.positionLock\", th);\n     }\n+  }\n \n-    private Object positionLock( FileChannel channel )\n+  private int writePositionVectoredFallback(long startFilePageId, long[] bufferAddresses, int arrayOffset, int length)\n+      throws IOException\n+  {\n+    int bytes = 0;\n+    for (int i = 0; i < length; i++)\n     {\n-        sun.nio.ch.FileChannelImpl impl = (FileChannelImpl) channel;\n-        try\n-        {\n-            return (Object) positionLockGetter.invokeExact( impl );\n-        }\n-        catch ( Throwable th )\n-        {\n-            throw new LinkageError( \"No getter for FileChannel.positionLock\", th );\n-        }\n+      long address = bufferAddresses[arrayOffset + i];\n+      bytes += write(startFilePageId + i, address);\n     }\n+    return bytes;\n+  }\n \n-    private int writePositionVectoredFallback( long startFilePageId, long[] bufferAddresses, int arrayOffset, int length )\n-            throws IOException\n+  @Override\n+  public void evicted(long filePageId)\n+  {\n+    PageEvictionCallback callback = this.onEviction;\n+    if (callback != null)\n     {\n-        int bytes = 0;\n-        for ( int i = 0; i < length; i++ )\n-        {\n-            long address = bufferAddresses[arrayOffset + i];\n-            bytes += write( startFilePageId + i, address );\n-        }\n-        return bytes;\n+      callback.onEvict(filePageId);\n     }\n+  }\n \n-    @Override\n-    public void evicted( long filePageId )\n-    {\n-        PageEvictionCallback callback = this.onEviction;\n-        if ( callback != null )\n-        {\n-            callback.onEvict( filePageId );\n-        }\n-    }\n+  @Override\n+  public File file()\n+  {\n+    return file;\n+  }\n \n-    @Override\n-    public File file()\n-    {\n-        return file;\n-    }\n+  private long pageIdToPosition(long pageId)\n+  {\n+    return filePageSize * pageId;\n+  }\n \n-    private long pageIdToPosition( long pageId )\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return filePageSize * pageId;\n+      return true;\n     }\n-\n-    @Override\n-    public boolean equals( Object o )\n+    if (o == null || getClass() != o.getClass())\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        SingleFilePageSwapper that = (SingleFilePageSwapper) o;\n-\n-        return file.equals( that.file );\n-\n+      return false;\n     }\n \n-    @Override\n-    public int hashCode()\n-    {\n-        return file.hashCode();\n-    }\n+    SingleFilePageSwapper that = (SingleFilePageSwapper) o;\n \n-    /**\n-     * Reopens the channel if it has been closed and the close() method on\n-     * this swapper has not been called. In other words, if the channel has\n-     * been \"accidentally\" closed by an interrupt or the like.\n-     *\n-     * If the channel has been explicitly closed with the PageSwapper#close()\n-     * method, then this method will re-throw the passed-in exception.\n-     *\n-     * If the reopening of the file fails with an exception for some reason,\n-     * then that exception is added as a suppressed exception to the passed in\n-     * ClosedChannelException, and the CCE is then rethrown.\n-     */\n-    private synchronized void tryReopen( long filePageId, ClosedChannelException closedException ) throws ClosedChannelException\n-    {\n-        int stripe = stripe( filePageId );\n-        StoreChannel channel = channels[stripe];\n-        if ( channel.isOpen() )\n-        {\n-            // Someone got ahead of us, presumably. Nothing to do.\n-            return;\n-        }\n+    return file.equals(that.file);\n \n-        if ( closed )\n-        {\n-            // We've been explicitly closed, so we shouldn't reopen the\n-            // channel.\n-            throw closedException;\n-        }\n+  }\n \n-        try\n-        {\n-            channels[stripe] = fs.open( file, OpenMode.READ_WRITE );\n-            if ( stripe == tokenChannelStripe )\n-            {\n-                // The closing of a FileChannel also releases all associated file locks.\n-                acquireLock();\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            closedException.addSuppressed( e );\n-            throw closedException;\n-        }\n-    }\n+  @Override\n+  public int hashCode()\n+  {\n+    return file.hashCode();\n+  }\n \n-    @Override\n-    public synchronized void close() throws IOException\n+  /**\n+   * Reopens the channel if it has been closed and the close() method on\n+   * this swapper has not been called. In other words, if the channel has\n+   * been \"accidentally\" closed by an interrupt or the like.\n+   * <p>\n+   * If the channel has been explicitly closed with the PageSwapper#close()\n+   * method, then this method will re-throw the passed-in exception.\n+   * <p>\n+   * If the reopening of the file fails with an exception for some reason,\n+   * then that exception is added as a suppressed exception to the passed in\n+   * ClosedChannelException, and the CCE is then rethrown.\n+   */\n+  private synchronized void tryReopen(long filePageId, ClosedChannelException closedException) throws ClosedChannelException\n+  {\n+    int stripe = stripe(filePageId);\n+    StoreChannel channel = channels[stripe];\n+    if (channel.isOpen())\n     {\n-        closed = true;\n-        try\n-        {\n-            closeAndCollectExceptions( 0, null );\n-        }\n-        finally\n-        {\n-            // Eagerly relinquish our reference to the onEviction callback, because even though\n-            // we've closed the PagedFile at this point, there are likely still pages in the cache that are bound to\n-            // this swapper, and will stay bound, until the eviction threads eventually gets around to kicking them out.\n-            // It is especially important to null out the onEviction callback field, because it is in turn holding on to\n-            // the striped translation table, which can be a rather large structure.\n-            onEviction = null;\n-        }\n+      // Someone got ahead of us, presumably. Nothing to do.\n+      return;\n     }\n \n-    private void closeAndCollectExceptions( int channelIndex, IOException exception ) throws IOException\n+    if (closed)\n     {\n-        if ( channelIndex == channels.length )\n-        {\n-            if ( exception != null )\n-            {\n-                throw exception;\n-            }\n-            return;\n-        }\n-\n-        try\n-        {\n-            channels[channelIndex].close();\n-        }\n-        catch ( IOException e )\n-        {\n-            if ( exception == null )\n-            {\n-                exception = e;\n-            }\n-            else\n-            {\n-                exception.addSuppressed( e );\n-            }\n-        }\n-        closeAndCollectExceptions( channelIndex + 1, exception );\n+      // We've been explicitly closed, so we shouldn't reopen the\n+      // channel.\n+      throw closedException;\n     }\n \n-    @Override\n-    public synchronized void closeAndDelete() throws IOException\n+    try\n     {\n-        close();\n-        fs.deleteFile( file );\n-    }\n-\n-    @Override\n-    public void force() throws IOException\n+      channels[stripe] = fs.open(file, OpenMode.READ_WRITE);\n+      if (stripe == tokenChannelStripe)\n+      {\n+        // The closing of a FileChannel also releases all associated file locks.\n+        acquireLock();\n+      }\n+    } catch (IOException e)\n     {\n-        forceAndRetryIfInterrupted( MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS );\n+      closedException.addSuppressed(e);\n+      throw closedException;\n     }\n+  }\n \n-    private void forceAndRetryIfInterrupted( int attemptsLeft ) throws IOException\n+  @Override\n+  public synchronized void close() throws IOException\n+  {\n+    closed = true;\n+    try\n     {\n-        try\n-        {\n-            channel( tokenFilePageId ).force( false );\n-        }\n-        catch ( ClosedChannelException e )\n-        {\n-            tryReopen( tokenFilePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n-            {\n-                throw new IOException( \"IO failed due to interruption\", e );\n-            }\n-\n-            boolean interrupted = Thread.interrupted();\n-            forceAndRetryIfInterrupted( attemptsLeft - 1 );\n-            if ( interrupted )\n-            {\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public long getLastPageId()\n+      closeAndCollectExceptions(0, null);\n+    } finally\n     {\n-        long channelSize = getCurrentFileSize();\n-        if ( channelSize == 0 )\n-        {\n-            return PageCursor.UNBOUND_PAGE_ID;\n-        }\n-        long div = channelSize / filePageSize;\n-        long mod = channelSize % filePageSize;\n-        return mod == 0 ? div - 1 : div;\n+      // Eagerly relinquish our reference to the onEviction callback, because even though\n+      // we've closed the PagedFile at this point, there are likely still pages in the cache that are bound to\n+      // this swapper, and will stay bound, until the eviction threads eventually gets around to kicking them out.\n+      // It is especially important to null out the onEviction callback field, because it is in turn holding on to\n+      // the striped translation table, which can be a rather large structure.\n+      onEviction = null;\n     }\n+  }\n \n-    @Override\n-    public void truncate() throws IOException\n-    {\n-        truncateAndRetryIfInterrupted( MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS );\n-    }\n-\n-    private void truncateAndRetryIfInterrupted( int attemptsLeft ) throws IOException\n-    {\n-        setCurrentFileSize( 0 );\n-        try\n-        {\n-            channel( tokenFilePageId ).truncate( 0 );\n-        }\n-        catch ( ClosedChannelException e )\n-        {\n-            tryReopen( tokenFilePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n-            {\n-                throw new IOException( \"IO failed due to interruption\", e );\n-            }\n-\n-            boolean interrupted = Thread.interrupted();\n-            truncateAndRetryIfInterrupted( attemptsLeft - 1 );\n-            if ( interrupted )\n-            {\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"SingleFilePageSwapper{\" +\n-                \"filePageSize=\" + filePageSize +\n-                \", file=\" + file +\n-                '}';\n-    }\n+  private void closeAndCollectExceptions(int channelIndex, IOException exception) throws IOException\n+  {\n+    if (channelIndex == channels.length)\n+    {\n+      if (exception != null)\n+      {\n+        throw exception;\n+      }\n+      return;\n+    }\n+\n+    try\n+    {\n+      channels[channelIndex].close();\n+    } catch (IOException e)\n+    {\n+      if (exception == null)\n+      {\n+        exception = e;\n+      } else\n+      {\n+        exception.addSuppressed(e);\n+      }\n+    }\n+    closeAndCollectExceptions(channelIndex + 1, exception);\n+  }\n+\n+  @Override\n+  public synchronized void closeAndDelete() throws IOException\n+  {\n+    close();\n+    fs.deleteFile(file);\n+  }\n+\n+  @Override\n+  public void force() throws IOException\n+  {\n+    forceAndRetryIfInterrupted(MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS);\n+  }\n+\n+  private void forceAndRetryIfInterrupted(int attemptsLeft) throws IOException\n+  {\n+    try\n+    {\n+      channel(tokenFilePageId).force(false);\n+    } catch (ClosedChannelException e)\n+    {\n+      tryReopen(tokenFilePageId, e);\n+\n+      if (attemptsLeft < 1)\n+      {\n+        throw new IOException(\"IO failed due to interruption\", e);\n+      }\n+\n+      boolean interrupted = Thread.interrupted();\n+      forceAndRetryIfInterrupted(attemptsLeft - 1);\n+      if (interrupted)\n+      {\n+        Thread.currentThread().interrupt();\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public long getLastPageId()\n+  {\n+    long channelSize = getCurrentFileSize();\n+    if (channelSize == 0)\n+    {\n+      return PageCursor.UNBOUND_PAGE_ID;\n+    }\n+    long div = channelSize / filePageSize;\n+    long mod = channelSize % filePageSize;\n+    return mod == 0 ? div - 1 : div;\n+  }\n+\n+  @Override\n+  public void truncate() throws IOException\n+  {\n+    truncateAndRetryIfInterrupted(MAX_INTERRUPTED_CHANNEL_REOPEN_ATTEMPTS);\n+  }\n+\n+  private void truncateAndRetryIfInterrupted(int attemptsLeft) throws IOException\n+  {\n+    setCurrentFileSize(0);\n+    try\n+    {\n+      channel(tokenFilePageId).truncate(0);\n+    } catch (ClosedChannelException e)\n+    {\n+      tryReopen(tokenFilePageId, e);\n+\n+      if (attemptsLeft < 1)\n+      {\n+        throw new IOException(\"IO failed due to interruption\", e);\n+      }\n+\n+      boolean interrupted = Thread.interrupted();\n+      truncateAndRetryIfInterrupted(attemptsLeft - 1);\n+      if (interrupted)\n+      {\n+        Thread.currentThread().interrupt();\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"SingleFilePageSwapper{\" +\n+        \"filePageSize=\" + filePageSize +\n+        \", file=\" + file +\n+        '}';\n+  }\n }\n",
            "diff_size": 1196
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "222",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "356",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "374",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "507",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1507/SingleFilePageSwapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1507/SingleFilePageSwapper.java\nindex 0cea641cf26..4a69f35b938 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1507/SingleFilePageSwapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1507/SingleFilePageSwapper.java\n@@ -66,23 +66,18 @@ public class SingleFilePageSwapper implements PageSwapper\n     }\n \n     // Exponent of 2 of how many channels we open per file:\n-    private static final int channelStripePower = Integer.getInteger(\n-            \"org.neo4j.io.pagecache.implSingleFilePageSwapper.channelStripePower\",\n-            defaultChannelStripePower() );\n-\n+    private static final int channelStripePower = Integer.getInteger( \"org.neo4j.io.pagecache.implSingleFilePageSwapper.channelStripePower\", defaultChannelStripePower() );\n     // Exponent of 2 of how many consecutive pages go to the same stripe\n-    private static final int channelStripeShift = Integer.getInteger(\n-            \"org.neo4j.io.pagecache.implSingleFilePageSwapper.channelStripeShift\", 4 );\n+    private static final int channelStripeShift = Integer.getInteger( \"org.neo4j.io.pagecache.implSingleFilePageSwapper.channelStripeShift\", 4 );\n \n-    private static final int channelStripeCount = 1 << channelStripePower;\n+private static final int channelStripeCount = 1 << channelStripePower;\n     private static final int channelStripeMask = channelStripeCount - 1;\n     private static final int tokenChannelStripe = 0;\n     private static final long tokenFilePageId = 0;\n \n-    private static final long fileSizeOffset =\n-            UnsafeUtil.getFieldOffset( SingleFilePageSwapper.class, \"fileSize\" );\n+    private static final long fileSizeOffset = UnsafeUtil.getFieldOffset( SingleFilePageSwapper.class, \"fileSize\" );\n \n-    private static final ThreadLocal<ByteBuffer> proxyCache = new ThreadLocal<>();\n+private static final ThreadLocal<ByteBuffer> proxyCache = new ThreadLocal<>();\n     private static final MethodHandle positionLockGetter = getPositionLockGetter();\n \n     private static MethodHandle getPositionLockGetter()\n@@ -108,7 +103,8 @@ public class SingleFilePageSwapper implements PageSwapper\n             UnsafeUtil.initDirectByteBuffer( buf, buffer, bufferLength );\n             return buf;\n         }\n-        return createAndGetNewBuffer( buffer, bufferLength );\n+\n+return createAndGetNewBuffer( buffer, bufferLength );\n     }\n \n     private static ByteBuffer createAndGetNewBuffer( long buffer, int bufferLength ) throws IOException\n@@ -140,12 +136,10 @@ public class SingleFilePageSwapper implements PageSwapper\n     @SuppressWarnings( \"unused\" ) // Accessed through unsafe\n     private volatile long fileSize;\n \n-    public SingleFilePageSwapper(\n-            File file,\n-            FileSystemAbstraction fs,\n-            int filePageSize,\n+    public SingleFilePageSwapper( File file,\n+            FileSystemAbstraction fs, int filePageSize,\n             PageEvictionCallback onEviction ) throws IOException\n-    {\n+{\n         this.fs = fs;\n         this.file = file;\n         this.channels = new StoreChannel[channelStripeCount];\n@@ -155,7 +149,8 @@ public class SingleFilePageSwapper implements PageSwapper\n         }\n         this.filePageSize = filePageSize;\n         this.onEviction = onEviction;\n-        increaseFileSizeTo( channels[tokenChannelStripe].size() );\n+\n+increaseFileSizeTo( channels[tokenChannelStripe].size() );\n \n         try\n         {\n@@ -165,8 +160,8 @@ public class SingleFilePageSwapper implements PageSwapper\n         {\n             closeAndCollectExceptions( 0, e );\n         }\n-        hasPositionLock = channels[0].getClass() == StoreFileChannel.class\n-                && StoreFileChannelUnwrapper.unwrap( channels[0] ).getClass() == sun.nio.ch.FileChannelImpl.class;\n+\n+hasPositionLock = channels[0].getClass() == StoreFileChannel.class && StoreFileChannelUnwrapper.unwrap( channels[0] ).getClass() == sun.nio.ch.FileChannelImpl.class;\n     }\n \n     private void increaseFileSizeTo( long newFileSize )\n@@ -176,8 +171,7 @@ public class SingleFilePageSwapper implements PageSwapper\n         {\n             currentFileSize = getCurrentFileSize();\n         }\n-        while ( currentFileSize < newFileSize && !UnsafeUtil.compareAndSwapLong(\n-                this, fileSizeOffset, currentFileSize, newFileSize ) );\n+        while ( currentFileSize < newFileSize && !UnsafeUtil.compareAndSwapLong( this, fileSizeOffset, currentFileSize, newFileSize ) );\n     }\n \n     private long getCurrentFileSize()\n@@ -225,7 +219,7 @@ public class SingleFilePageSwapper implements PageSwapper\n \n     private static int stripe( long filePageId )\n     {\n-        return (int) (filePageId >>> channelStripeShift) & channelStripeMask;\n+        return ( int) ( filePageId >>> channelStripeShift) & channelStripeMask;\n     }\n \n     private int swapIn( StoreChannel channel, long bufferAddress, int bufferSize, long fileOffset, int filePageSize ) throws IOException\n@@ -239,13 +233,11 @@ public class SingleFilePageSwapper implements PageSwapper\n             {\n                 read = channel.read( bufferProxy, fileOffset + readTotal );\n             }\n-            while ( read != -1 && (readTotal += read) < filePageSize );\n+            while ( read != -1 && ( readTotal += read) < filePageSize );\n \n             // Zero-fill the rest.\n-            assert readTotal >= 0 && filePageSize <= bufferSize && readTotal <= filePageSize : format(\n-                    \"pointer = %h, readTotal = %s, length = %s, page size = %s\",\n-                    bufferAddress, readTotal, filePageSize, bufferSize );\n-            UnsafeUtil.setMemory( bufferAddress + readTotal, filePageSize - readTotal, MuninnPageCache.ZERO_BYTE );\n+            assert readTotal >= 0 && filePageSize <= bufferSize && readTotal <= filePageSize : format( \"pointer = %h, readTotal = %s, length = %s, page size = %s\", bufferAddress, readTotal, filePageSize, bufferSize );\n+UnsafeUtil.setMemory( bufferAddress + readTotal, filePageSize - readTotal, MuninnPageCache.ZERO_BYTE );\n             return readTotal;\n         }\n         catch ( IOException e )\n@@ -254,10 +246,8 @@ public class SingleFilePageSwapper implements PageSwapper\n         }\n         catch ( Throwable e )\n         {\n-            String msg = format(\n-                    \"Read failed after %s of %s bytes from fileOffset %s\",\n-                    readTotal, filePageSize, fileOffset );\n-            throw new IOException( msg, e );\n+            String msg = format( \"Read failed after %s of %s bytes from fileOffset %s\", readTotal, filePageSize, fileOffset );\n+    throw new IOException( msg, e );\n         }\n     }\n \n@@ -276,7 +266,8 @@ public class SingleFilePageSwapper implements PageSwapper\n         {\n             throw new IOException( e );\n         }\n-        return filePageSize;\n+\n+return filePageSize;\n     }\n \n     private void clear( long bufferAddress, int bufferSize )\n@@ -307,8 +298,7 @@ public class SingleFilePageSwapper implements PageSwapper\n         catch ( ClosedChannelException e )\n         {\n             tryReopen( filePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n+if ( attemptsLeft < 1 )\n             {\n                 throw new IOException( \"IO failed due to interruption\", e );\n             }\n@@ -319,7 +309,8 @@ public class SingleFilePageSwapper implements PageSwapper\n             {\n                 Thread.currentThread().interrupt();\n             }\n-            return bytesRead;\n+\n+return bytesRead;\n         }\n         return 0;\n     }\n@@ -346,9 +337,8 @@ public class SingleFilePageSwapper implements PageSwapper\n         return readPositionedVectoredFallback( startFilePageId, bufferAddresses, bufferSize, arrayOffset, length );\n     }\n \n-    private long readPositionedVectoredToFileChannel(\n-            long startFilePageId, long[] bufferAddresses, int arrayOffset, int length ) throws Exception\n-    {\n+    private long readPositionedVectoredToFileChannel( long startFilePageId, long[] bufferAddresses, int arrayOffset, int length ) throws Exception\n+{\n         long fileOffset = pageIdToPosition( startFilePageId );\n         FileChannel channel = unwrappedChannel( startFilePageId );\n         ByteBuffer[] srcs = convertToByteBuffers( bufferAddresses, arrayOffset, length );\n@@ -363,8 +353,8 @@ public class SingleFilePageSwapper implements PageSwapper\n         }\n         else if ( bytesRead < ((long) filePageSize) * length )\n         {\n-            int pagesRead = (int) (bytesRead / filePageSize);\n-            int bytesReadIntoLastReadPage = (int) (bytesRead % filePageSize);\n+            int pagesRead = ( int) ( bytesRead / filePageSize);\n+            int bytesReadIntoLastReadPage = ( int) ( bytesRead % filePageSize);\n             int pagesNeedingZeroing = length - pagesRead;\n             for ( int i = 0; i < pagesNeedingZeroing; i++ )\n             {\n@@ -381,9 +371,8 @@ public class SingleFilePageSwapper implements PageSwapper\n         return bytesRead;\n     }\n \n-    private long lockPositionReadVectorAndRetryIfInterrupted( long filePageId, FileChannel channel, long fileOffset, ByteBuffer[] srcs, int attemptsLeft )\n-            throws IOException\n-    {\n+    private long lockPositionReadVectorAndRetryIfInterrupted( long filePageId, FileChannel channel, long fileOffset, ByteBuffer[] srcs, int attemptsLeft ) throws IOException\n+{\n         try\n         {\n             long toRead = filePageSize * (long) srcs.length;\n@@ -396,15 +385,14 @@ public class SingleFilePageSwapper implements PageSwapper\n                 {\n                     read = channel.read( srcs );\n                 }\n-                while ( read != -1 && (readTotal += read) < toRead );\n+                while ( read != -1 && ( readTotal += read) < toRead );\n                 return readTotal;\n             }\n         }\n         catch ( ClosedChannelException e )\n         {\n             tryReopen( filePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n+if ( attemptsLeft < 1 )\n             {\n                 throw new IOException( \"IO failed due to interruption\", e );\n             }\n@@ -416,20 +404,21 @@ public class SingleFilePageSwapper implements PageSwapper\n             {\n                 Thread.currentThread().interrupt();\n             }\n-            return bytesWritten;\n+\n+return bytesWritten;\n         }\n     }\n \n-    private int readPositionedVectoredFallback(\n-            long startFilePageId, long[] bufferAddresses, int bufferSize, int arrayOffset, int length ) throws IOException\n-    {\n+    private int readPositionedVectoredFallback( long startFilePageId, long[] bufferAddresses, int bufferSize, int arrayOffset, int length ) throws IOException\n+{\n         int bytes = 0;\n         for ( int i = 0; i < length; i++ )\n         {\n             long address = bufferAddresses[arrayOffset + i];\n             bytes += read( startFilePageId + i, address, bufferSize );\n         }\n-        return bytes;\n+\n+return bytes;\n     }\n \n     @Override\n@@ -450,8 +439,7 @@ public class SingleFilePageSwapper implements PageSwapper\n         catch ( ClosedChannelException e )\n         {\n             tryReopen( filePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n+if ( attemptsLeft < 1 )\n             {\n                 throw new IOException( \"IO failed due to interruption\", e );\n             }\n@@ -462,7 +450,8 @@ public class SingleFilePageSwapper implements PageSwapper\n             {\n                 Thread.currentThread().interrupt();\n             }\n-            return bytesWritten;\n+\n+return bytesWritten;\n         }\n     }\n \n@@ -488,9 +477,8 @@ public class SingleFilePageSwapper implements PageSwapper\n         return writePositionVectoredFallback( startFilePageId, bufferAddresses, arrayOffset, length );\n     }\n \n-    private long writePositionedVectoredToFileChannel(\n-            long startFilePageId, long[] bufferAddresses, int arrayOffset, int length ) throws Exception\n-    {\n+    private long writePositionedVectoredToFileChannel( long startFilePageId, long[] bufferAddresses, int arrayOffset, int length ) throws Exception\n+{\n         long fileOffset = pageIdToPosition( startFilePageId );\n         increaseFileSizeTo( fileOffset + (((long) filePageSize) * length) );\n         FileChannel channel = unwrappedChannel( startFilePageId );\n@@ -506,7 +494,8 @@ public class SingleFilePageSwapper implements PageSwapper\n             long address = bufferAddresses[arrayOffset + i];\n             buffers[i] = UnsafeUtil.newDirectByteBuffer( address, filePageSize );\n         }\n-        return buffers;\n+\n+return buffers;\n     }\n \n     private FileChannel unwrappedChannel( long startFilePageId )\n@@ -515,9 +504,8 @@ public class SingleFilePageSwapper implements PageSwapper\n         return StoreFileChannelUnwrapper.unwrap( storeChannel );\n     }\n \n-    private long lockPositionWriteVectorAndRetryIfInterrupted( long filePageId, FileChannel channel, long fileOffset, ByteBuffer[] srcs, int attemptsLeft )\n-            throws IOException\n-    {\n+    private long lockPositionWriteVectorAndRetryIfInterrupted( long filePageId, FileChannel channel, long fileOffset, ByteBuffer[] srcs, int attemptsLeft ) throws IOException\n+{\n         try\n         {\n             long toWrite = filePageSize * (long) srcs.length;\n@@ -536,8 +524,7 @@ public class SingleFilePageSwapper implements PageSwapper\n         catch ( ClosedChannelException e )\n         {\n             tryReopen( filePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n+if ( attemptsLeft < 1 )\n             {\n                 throw new IOException( \"IO failed due to interruption\", e );\n             }\n@@ -549,7 +536,8 @@ public class SingleFilePageSwapper implements PageSwapper\n             {\n                 Thread.currentThread().interrupt();\n             }\n-            return bytesWritten;\n+\n+return bytesWritten;\n         }\n     }\n \n@@ -566,16 +554,16 @@ public class SingleFilePageSwapper implements PageSwapper\n         }\n     }\n \n-    private int writePositionVectoredFallback( long startFilePageId, long[] bufferAddresses, int arrayOffset, int length )\n-            throws IOException\n-    {\n+    private int writePositionVectoredFallback( long startFilePageId, long[] bufferAddresses, int arrayOffset, int length ) throws IOException\n+{\n         int bytes = 0;\n         for ( int i = 0; i < length; i++ )\n         {\n             long address = bufferAddresses[arrayOffset + i];\n             bytes += write( startFilePageId + i, address );\n         }\n-        return bytes;\n+\n+return bytes;\n     }\n \n     @Override\n@@ -606,7 +594,8 @@ public class SingleFilePageSwapper implements PageSwapper\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n@@ -614,7 +603,6 @@ public class SingleFilePageSwapper implements PageSwapper\n         SingleFilePageSwapper that = (SingleFilePageSwapper) o;\n \n         return file.equals( that.file );\n-\n     }\n \n     @Override\n@@ -713,7 +701,8 @@ public class SingleFilePageSwapper implements PageSwapper\n                 exception.addSuppressed( e );\n             }\n         }\n-        closeAndCollectExceptions( channelIndex + 1, exception );\n+\n+closeAndCollectExceptions( channelIndex + 1, exception );\n     }\n \n     @Override\n@@ -738,8 +727,7 @@ public class SingleFilePageSwapper implements PageSwapper\n         catch ( ClosedChannelException e )\n         {\n             tryReopen( tokenFilePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n+if ( attemptsLeft < 1 )\n             {\n                 throw new IOException( \"IO failed due to interruption\", e );\n             }\n@@ -782,8 +770,7 @@ public class SingleFilePageSwapper implements PageSwapper\n         catch ( ClosedChannelException e )\n         {\n             tryReopen( tokenFilePageId, e );\n-\n-            if ( attemptsLeft < 1 )\n+if ( attemptsLeft < 1 )\n             {\n                 throw new IOException( \"IO failed due to interruption\", e );\n             }\n@@ -800,9 +787,6 @@ public class SingleFilePageSwapper implements PageSwapper\n     @Override\n     public String toString()\n     {\n-        return \"SingleFilePageSwapper{\" +\n-                \"filePageSize=\" + filePageSize +\n-                \", file=\" + file +\n-                '}';\n+        return \"SingleFilePageSwapper{\" + \"filePageSize=\" + filePageSize + \", file=\" + file + '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 92
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}