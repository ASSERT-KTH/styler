{
    "project_name": "wso2-attic-commons",
    "error_id": "564",
    "information": {
        "errors": [
            {
                "line": "45",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 145).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        for (Attribute attribute : attributeList) {\n            if (attribute.getName().equals(attributeName)) {\n                throw new AttributeAlreadyExist(attributeName + \" is already defined for with type \" + attribute.getType() + \" for \" + streamId);\n            }\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/564/StreamDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/564/StreamDefinition.java\nindex d9fa2d583ed..fe0aa4c6eda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/564/StreamDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/564/StreamDefinition.java\n@@ -42,9 +42,10 @@ public class StreamDefinition implements ExecutionPlan {\n     private void checkAttribute(String attributeName) {\n         for (Attribute attribute : attributeList) {\n             if (attribute.getName().equals(attributeName)) {\n-                throw new AttributeAlreadyExist(attributeName + \" is already defined for with type \" + attribute.getType() + \" for \" + streamId);\n-            }\n-        }\n+                throw new AttributeAlreadyExist(attributeName +\n+                        \" is already defined for with type \" + attribute.getType() + \" for \" + streamId);\n+             }\n+         }\n     }\n \n     public String getStreamId() {\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/564/StreamDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/564/StreamDefinition.java\nindex d9fa2d583ed..3bbb329ad15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/564/StreamDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/564/StreamDefinition.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.query.api.definition;\n \n import org.wso2.siddhi.query.api.ExecutionPlan;\n@@ -25,60 +26,61 @@ import java.util.List;\n \n public class StreamDefinition implements ExecutionPlan {\n \n-    String streamId;\n-    List<Attribute> attributeList = new ArrayList<Attribute>();\n+  String streamId;\n+  List<Attribute> attributeList = new ArrayList<Attribute>();\n \n-    public StreamDefinition name(String streamId) {\n-        this.streamId = streamId;\n-        return this;\n-    }\n+  public StreamDefinition name(String streamId) {\n+    this.streamId = streamId;\n+    return this;\n+  }\n \n-    public StreamDefinition attribute(String attributeName, Attribute.Type type) {\n-        checkAttribute(attributeName);\n-        this.attributeList.add(new Attribute(attributeName, type));\n-        return this;\n-    }\n+  public StreamDefinition attribute(String attributeName, Attribute.Type type) {\n+    checkAttribute(attributeName);\n+    this.attributeList.add(new Attribute(attributeName, type));\n+    return this;\n+  }\n \n-    private void checkAttribute(String attributeName) {\n-        for (Attribute attribute : attributeList) {\n-            if (attribute.getName().equals(attributeName)) {\n-                throw new AttributeAlreadyExist(attributeName + \" is already defined for with type \" + attribute.getType() + \" for \" + streamId);\n-            }\n-        }\n+  private void checkAttribute(String attributeName) {\n+    for (Attribute attribute : attributeList) {\n+      if (attribute.getName().equals(attributeName)) {\n+        throw new AttributeAlreadyExist(\n+          attributeName + \" is already defined for with type \" + attribute.getType() + \" for \" + streamId);\n+      }\n     }\n+  }\n \n-    public String getStreamId() {\n-        return streamId;\n-    }\n+  public String getStreamId() {\n+    return streamId;\n+  }\n \n-    public List<Attribute> getAttributeList() {\n-        return attributeList;\n-    }\n+  public List<Attribute> getAttributeList() {\n+    return attributeList;\n+  }\n \n-    public Attribute.Type getAttributeType(String attributeName) {\n-        for (Attribute attribute : attributeList) {\n-            if (attribute.getName().equals(attributeName)) {\n-                return attribute.getType();\n-            }\n-        }\n-        return null;   //todo through exception\n+  public Attribute.Type getAttributeType(String attributeName) {\n+    for (Attribute attribute : attributeList) {\n+      if (attribute.getName().equals(attributeName)) {\n+        return attribute.getType();\n+      }\n     }\n+    return null;   //todo through exception\n+  }\n \n-    public int getAttributePosition(String attributeName) {\n-        for (int i = 0, attributeListSize = attributeList.size(); i < attributeListSize; i++) {\n-            Attribute attribute = attributeList.get(i);\n-            if (attribute.getName().equals(attributeName)) {\n-                return i;\n-            }\n-        }\n-        return 0;   //todo through exception\n+  public int getAttributePosition(String attributeName) {\n+    for (int i = 0, attributeListSize = attributeList.size(); i < attributeListSize; i++) {\n+      Attribute attribute = attributeList.get(i);\n+      if (attribute.getName().equals(attributeName)) {\n+        return i;\n+      }\n     }\n+    return 0;   //todo through exception\n+  }\n \n-    @Override\n-    public String toString() {\n-        return \"StreamDefinition{\" +\n-               \"streamId='\" + streamId + '\\'' +\n-               \", attributeList=\" + attributeList +\n-               '}';\n-    }\n+  @Override\n+  public String toString() {\n+    return \"StreamDefinition{\" +\n+      \"streamId='\" + streamId + '\\'' +\n+      \", attributeList=\" + attributeList +\n+      '}';\n+  }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/564/StreamDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/564/StreamDefinition.java\nindex d9fa2d583ed..1296d0e0b16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/564/StreamDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/564/StreamDefinition.java\n@@ -61,7 +61,7 @@ public class StreamDefinition implements ExecutionPlan {\n                 return attribute.getType();\n             }\n         }\n-        return null;   //todo through exception\n+        return null;  //todo through exception\n     }\n \n     public int getAttributePosition(String attributeName) {\n@@ -71,7 +71,7 @@ public class StreamDefinition implements ExecutionPlan {\n                 return i;\n             }\n         }\n-        return 0;   //todo through exception\n+        return 0; //todo through exception\n     }\n \n     @Override\n@@ -81,4 +81,4 @@ public class StreamDefinition implements ExecutionPlan {\n                \", attributeList=\" + attributeList +\n                '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/564/StreamDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/564/StreamDefinition.java\nindex d9fa2d583ed..fe0aa4c6eda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/564/StreamDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/564/StreamDefinition.java\n@@ -42,9 +42,10 @@ public class StreamDefinition implements ExecutionPlan {\n     private void checkAttribute(String attributeName) {\n         for (Attribute attribute : attributeList) {\n             if (attribute.getName().equals(attributeName)) {\n-                throw new AttributeAlreadyExist(attributeName + \" is already defined for with type \" + attribute.getType() + \" for \" + streamId);\n-            }\n-        }\n+                throw new AttributeAlreadyExist(attributeName +\n+                        \" is already defined for with type \" + attribute.getType() + \" for \" + streamId);\n+             }\n+         }\n     }\n \n     public String getStreamId() {\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}