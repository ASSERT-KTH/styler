{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "367",
    "information": {
        "errors": [
            {
                "line": "34",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class ValidationRules\n{\n\t/**\n\t * If there is a fixed {value constraint} the element information item must have no element information item\n\t * children.\n\t */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/367/ValidationRules.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/367/ValidationRules.java\nindex 4f641e3c07e..ee913631ea7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/367/ValidationRules.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/367/ValidationRules.java\n@@ -31,11 +31,11 @@ import org.genxdm.xs.types.ComplexType;\n \n final class ValidationRules\n {\n-\t/**\n+/**\n \t * If there is a fixed {value constraint} the element information item must have no element information item\n \t * children.\n \t */\n-\tpublic static  void checkValueConstraintAllowsElementChild(final ElementDefinition elementDeclaration, final QName childName, final Locatable childLocatable, final SchemaExceptionHandler errors) throws AbortException\n+ public static  void checkValueConstraintAllowsElementChild(final ElementDefinition elementDeclaration, final QName childName, final Locatable childLocatable, final SchemaExceptionHandler errors) throws AbortException\n \t{\n \t\tfinal ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n \t\tif (null != valueConstraint)\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/367/ValidationRules.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/367/ValidationRules.java\nindex 4f641e3c07e..522aeff13a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/367/ValidationRules.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/367/ValidationRules.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import javax.xml.namespace.QName;\n@@ -29,86 +30,84 @@ import org.genxdm.xs.exceptions.SchemaExceptionHandler;\n import org.genxdm.xs.types.ComplexType;\n \n \n-final class ValidationRules\n-{\n-\t/**\n-\t * If there is a fixed {value constraint} the element information item must have no element information item\n-\t * children.\n-\t */\n-\tpublic static  void checkValueConstraintAllowsElementChild(final ElementDefinition elementDeclaration, final QName childName, final Locatable childLocatable, final SchemaExceptionHandler errors) throws AbortException\n-\t{\n-\t\tfinal ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n-\t\tif (null != valueConstraint)\n-\t\t{\n-\t\t\tswitch (valueConstraint.getVariety())\n-\t\t\t{\n-\t\t\t\tcase Fixed:\n-\t\t\t\t{\n-\t\t\t\t\terrors.error(new CvcElementChildElementWithFixedException(elementDeclaration, childName, childLocatable.getLocation()));\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\t\tcase Default:\n-\t\t\t\t{\n-\t\t\t\t\t// No problem.\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t{\n-\t\t\t\t\tthrow new AssertionError(valueConstraint.getVariety().name());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+final class ValidationRules {\n+    /**\n+     * If there is a fixed {value constraint} the element information item must have no element information item\n+     * children.\n+     */\n+    public static void checkValueConstraintAllowsElementChild(\n+        final ElementDefinition elementDeclaration, final QName childName,\n+        final Locatable childLocatable, final SchemaExceptionHandler errors) throws AbortException {\n+        final ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n+        if (null != valueConstraint) {\n+            switch (valueConstraint.getVariety()) {\n+                case Fixed: {\n+                    errors.error(\n+                        new CvcElementChildElementWithFixedException(elementDeclaration, childName,\n+                            childLocatable.getLocation()));\n+                }\n+                break;\n+                case Default: {\n+                    // No problem.\n+                }\n+                break;\n+                default: {\n+                    throw new AssertionError(valueConstraint.getVariety().name());\n+                }\n+            }\n+        }\n+    }\n \n-\t/**\n-\t * If the data component has a \"fixed\" attribute, reports an error if there is a conflict with the validated value.\n-\t */\n-\tpublic static <A> void checkValueConstraintForMixedContent(final ElementDefinition elementDeclaration, final String initialValue, final Locatable locatable, final SchemaExceptionHandler errors, final AtomBridge<A> atomBridge) throws AbortException\n-\t{\n-\t\tfinal ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n-\t\tif (null != valueConstraint)\n-\t\t{\n-\t\t\tswitch (valueConstraint.getVariety())\n-\t\t\t{\n-\t\t\t\tcase Fixed:\n-\t\t\t\t{\n-\t\t\t\t\tfinal String expectValue = atomBridge.getC14NString(valueConstraint.getValue(atomBridge));\n+    /**\n+     * If the data component has a \"fixed\" attribute, reports an error if there is a conflict with the validated value.\n+     */\n+    public static <A> void checkValueConstraintForMixedContent(\n+        final ElementDefinition elementDeclaration, final String initialValue,\n+        final Locatable locatable, final SchemaExceptionHandler errors,\n+        final AtomBridge<A> atomBridge) throws AbortException {\n+        final ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n+        if (null != valueConstraint) {\n+            switch (valueConstraint.getVariety()) {\n+                case Fixed: {\n+                    final String expectValue =\n+                        atomBridge.getC14NString(valueConstraint.getValue(atomBridge));\n \n-\t\t\t\t\tif (!expectValue.equals(initialValue))\n-\t\t\t\t\t{\n-\t\t\t\t\t\terrors.error(new CvcElementFixedValueOverriddenMixedException(elementDeclaration, expectValue, initialValue, locatable.getLocation()));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\t\tcase Default:\n-\t\t\t\t{\n-\t\t\t\t\t// No problem.\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t{\n-\t\t\t\t\tthrow new AssertionError(valueConstraint.getVariety());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+                    if (!expectValue.equals(initialValue)) {\n+                        errors.error(\n+                            new CvcElementFixedValueOverriddenMixedException(elementDeclaration,\n+                                expectValue, initialValue, locatable.getLocation()));\n+                    }\n+                }\n+                break;\n+                case Default: {\n+                    // No problem.\n+                }\n+                break;\n+                default: {\n+                    throw new AssertionError(valueConstraint.getVariety());\n+                }\n+            }\n+        }\n+    }\n \n-\t/**\n-\t * Determines whether the element {type} is {abstract}. <br/>\n-\t * The error is only raised if the element {type} exists, is a complex type, and is abstract.\n-\t * \n-\t * @param elementType\n-\t *            The type of the element, may be <code>null</code>.\n-\t * @param elementName\n-\t *            The name of the element information item.\n-\t * @param errors\n-\t *            The exception handler.\n-\t */\n-\tpublic static void checkComplexTypeNotAbstract(final ComplexType elementType, final QName elementName, final SchemaExceptionHandler errors) throws AbortException\n-\t{\n-\t\tif (null != elementType && elementType.isAbstract())\n-\t\t{\n-\t\t\terrors.error(new CvcAbstractComplexTypeException(elementName, elementType, new SrcFrozenLocation(-1, -1, -1, null, null)));\n-\t\t}\n-\t}\n+    /**\n+     * Determines whether the element {type} is {abstract}. <br/>\n+     * The error is only raised if the element {type} exists, is a complex type, and is abstract.\n+     *\n+     * @param elementType\n+     *            The type of the element, may be <code>null</code>.\n+     * @param elementName\n+     *            The name of the element information item.\n+     * @param errors\n+     *            The exception handler.\n+     */\n+    public static void checkComplexTypeNotAbstract(final ComplexType elementType,\n+                                                   final QName elementName,\n+                                                   final SchemaExceptionHandler errors)\n+        throws AbortException {\n+        if (null != elementType && elementType.isAbstract()) {\n+            errors.error(new CvcAbstractComplexTypeException(elementName, elementType,\n+                new SrcFrozenLocation(-1, -1, -1, null, null)));\n+        }\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/367/ValidationRules.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/367/ValidationRules.java\nindex 4f641e3c07e..0e29f02c421 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/367/ValidationRules.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/367/ValidationRules.java\n@@ -16,7 +16,6 @@\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import javax.xml.namespace.QName;\n-\n import org.genxdm.processor.w3c.xs.exception.cvc.CvcAbstractComplexTypeException;\n import org.genxdm.processor.w3c.xs.exception.cvc.CvcElementChildElementWithFixedException;\n import org.genxdm.processor.w3c.xs.exception.cvc.CvcElementFixedValueOverriddenMixedException;\n@@ -28,87 +27,93 @@ import org.genxdm.xs.exceptions.AbortException;\n import org.genxdm.xs.exceptions.SchemaExceptionHandler;\n import org.genxdm.xs.types.ComplexType;\n \n-\n final class ValidationRules\n {\n-\t/**\n-\t * If there is a fixed {value constraint} the element information item must have no element information item\n-\t * children.\n-\t */\n-\tpublic static  void checkValueConstraintAllowsElementChild(final ElementDefinition elementDeclaration, final QName childName, final Locatable childLocatable, final SchemaExceptionHandler errors) throws AbortException\n-\t{\n-\t\tfinal ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n-\t\tif (null != valueConstraint)\n-\t\t{\n-\t\t\tswitch (valueConstraint.getVariety())\n-\t\t\t{\n-\t\t\t\tcase Fixed:\n-\t\t\t\t{\n-\t\t\t\t\terrors.error(new CvcElementChildElementWithFixedException(elementDeclaration, childName, childLocatable.getLocation()));\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\t\tcase Default:\n-\t\t\t\t{\n-\t\t\t\t\t// No problem.\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t{\n-\t\t\t\t\tthrow new AssertionError(valueConstraint.getVariety().name());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    /**\n+     * If there is a fixed {value constraint} the element information item must have no element information item\n+     * children.\n+     */\n+    public static void checkValueConstraintAllowsElementChild(final ElementDefinition elementDeclaration, final QName childName, final Locatable childLocatable, final SchemaExceptionHandler errors)\n+        throws AbortException\n+    {\n+        final ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n+        if (null != valueConstraint)\n+        {\n+            switch (valueConstraint.getVariety())\n+            {\n+                case Fixed:\n+                {\n+                    errors.error(new CvcElementChildElementWithFixedException(elementDeclaration, childName, childLocatable.getLocation()));\n+                }\n+                break;\n+                case Default:\n+                {\n+                    // No problem.\n+\n+                }\n+                break;\n+                default:\n+                {\n+                    throw new AssertionError(valueConstraint.getVariety().name());\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * If the data component has a \"fixed\" attribute, reports an error if there is a conflict with the validated value.\n+     */\n+\n+    public static <A> void checkValueConstraintForMixedContent(final ElementDefinition elementDeclaration, final String initialValue, final Locatable locatable, final SchemaExceptionHandler errors, final AtomBridge<A> atomBridge) throws AbortException\n+    {\n+        final ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n+        if (null != valueConstraint)\n+        {\n+            switch (valueConstraint.getVariety())\n+            {\n+                case Fixed:\n+                {\n+                    final String expectValue = atomBridge.getC14NString(valueConstraint.getValue(atomBridge));\n+                    if (!expectValue.equals(initialValue))\n+                    {\n+                        errors.error(new CvcElementFixedValueOverriddenMixedException(elementDeclaration, expectValue, initialValue, locatable.getLocation()));\n+                    }\n+                }\n+                break;\n+                case Default:\n+                {\n+                    // No problem.\n \n-\t/**\n-\t * If the data component has a \"fixed\" attribute, reports an error if there is a conflict with the validated value.\n-\t */\n-\tpublic static <A> void checkValueConstraintForMixedContent(final ElementDefinition elementDeclaration, final String initialValue, final Locatable locatable, final SchemaExceptionHandler errors, final AtomBridge<A> atomBridge) throws AbortException\n-\t{\n-\t\tfinal ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n-\t\tif (null != valueConstraint)\n-\t\t{\n-\t\t\tswitch (valueConstraint.getVariety())\n-\t\t\t{\n-\t\t\t\tcase Fixed:\n-\t\t\t\t{\n-\t\t\t\t\tfinal String expectValue = atomBridge.getC14NString(valueConstraint.getValue(atomBridge));\n+                }\n+                break;\n+                default:\n+                {\n+                    throw new AssertionError(valueConstraint.getVariety());\n+                }\n+            }\n+        }\n+    }\n \n-\t\t\t\t\tif (!expectValue.equals(initialValue))\n-\t\t\t\t\t{\n-\t\t\t\t\t\terrors.error(new CvcElementFixedValueOverriddenMixedException(elementDeclaration, expectValue, initialValue, locatable.getLocation()));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\t\tcase Default:\n-\t\t\t\t{\n-\t\t\t\t\t// No problem.\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t{\n-\t\t\t\t\tthrow new AssertionError(valueConstraint.getVariety());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    /**\n+     * Determines whether the element {type} is {abstract}. <br/>\n+     * The error is only raised if the element {type} exists, is a complex type, and is abstract.\n+     * \n+     * @param elementType\n+     *            The type of the element, may be <code>null</code>.\n+     * @param elementName\n+     *            The name of the element information item.\n+     * @param errors\n+     *            The exception handler.\n+     */\n \n-\t/**\n-\t * Determines whether the element {type} is {abstract}. <br/>\n-\t * The error is only raised if the element {type} exists, is a complex type, and is abstract.\n-\t * \n-\t * @param elementType\n-\t *            The type of the element, may be <code>null</code>.\n-\t * @param elementName\n-\t *            The name of the element information item.\n-\t * @param errors\n-\t *            The exception handler.\n-\t */\n-\tpublic static void checkComplexTypeNotAbstract(final ComplexType elementType, final QName elementName, final SchemaExceptionHandler errors) throws AbortException\n-\t{\n-\t\tif (null != elementType && elementType.isAbstract())\n-\t\t{\n-\t\t\terrors.error(new CvcAbstractComplexTypeException(elementName, elementType, new SrcFrozenLocation(-1, -1, -1, null, null)));\n-\t\t}\n-\t}\n+    public static void checkComplexTypeNotAbstract(final ComplexType elementType, final QName elementName, final SchemaExceptionHandler errors)\n+        throws AbortException\n+    {\n+        if (null != elementType && elementType.isAbstract())\n+        {\n+            errors.error(new CvcAbstractComplexTypeException(elementName,\n+                elementType,\n+                    new SrcFrozenLocation(-1, -1, -1, null, null)));\n+        }\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 105
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "35",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/367/ValidationRules.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/367/ValidationRules.java\nindex 4f641e3c07e..ee913631ea7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/367/ValidationRules.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/367/ValidationRules.java\n@@ -31,11 +31,11 @@ import org.genxdm.xs.types.ComplexType;\n \n final class ValidationRules\n {\n-\t/**\n+/**\n \t * If there is a fixed {value constraint} the element information item must have no element information item\n \t * children.\n \t */\n-\tpublic static  void checkValueConstraintAllowsElementChild(final ElementDefinition elementDeclaration, final QName childName, final Locatable childLocatable, final SchemaExceptionHandler errors) throws AbortException\n+ public static  void checkValueConstraintAllowsElementChild(final ElementDefinition elementDeclaration, final QName childName, final Locatable childLocatable, final SchemaExceptionHandler errors) throws AbortException\n \t{\n \t\tfinal ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n \t\tif (null != valueConstraint)\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "35",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/367/ValidationRules.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/367/ValidationRules.java\nindex 4f641e3c07e..5183989f96b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/367/ValidationRules.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/367/ValidationRules.java\n@@ -31,11 +31,11 @@ import org.genxdm.xs.types.ComplexType;\n \n final class ValidationRules\n {\n-\t/**\n+/**\n \t * If there is a fixed {value constraint} the element information item must have no element information item\n \t * children.\n \t */\n-\tpublic static  void checkValueConstraintAllowsElementChild(final ElementDefinition elementDeclaration, final QName childName, final Locatable childLocatable, final SchemaExceptionHandler errors) throws AbortException\n+        public static  void checkValueConstraintAllowsElementChild(final ElementDefinition elementDeclaration, final QName childName, final Locatable childLocatable, final SchemaExceptionHandler errors) throws AbortException\n \t{\n \t\tfinal ValueConstraint valueConstraint = elementDeclaration.getValueConstraint();\n \t\tif (null != valueConstraint)\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}