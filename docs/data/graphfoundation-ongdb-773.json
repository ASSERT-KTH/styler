{
    "project_name": "graphfoundation-ongdb",
    "error_id": "773",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "108",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/773/LogPruningImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/773/LogPruningImpl.java\nindex 52d25509d19..ffb858a08af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/773/LogPruningImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/773/LogPruningImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.pruning;\n \n import java.io.File;\n@@ -37,103 +38,101 @@ import org.neo4j.logging.LogProvider;\n  */\n public class LogPruningImpl implements LogPruning\n {\n-    private final Lock pruneLock = new ReentrantLock();\n-    private final FileSystemAbstraction fs;\n-    private final LogFiles logFiles;\n-    private final Log msgLog;\n-    private final LogPruneStrategyFactory strategyFactory;\n-    private final Clock clock;\n-    private volatile LogPruneStrategy pruneStrategy;\n-\n-    public LogPruningImpl( FileSystemAbstraction fs,\n-                           LogFiles logFiles,\n-                           LogProvider logProvider,\n-                           LogPruneStrategyFactory strategyFactory,\n-                           Clock clock,\n-                           Config config )\n-    {\n-        this.fs = fs;\n-        this.logFiles = logFiles;\n-        this.msgLog = logProvider.getLog( getClass() );\n-        this.strategyFactory = strategyFactory;\n-        this.clock = clock;\n-        this.pruneStrategy = strategyFactory.strategyFromConfigValue( fs, logFiles, clock, config.get( GraphDatabaseSettings.keep_logical_logs ) );\n-\n-        // Register listener for updates\n-        config.registerDynamicUpdateListener( GraphDatabaseSettings.keep_logical_logs,\n-                ( prev, update ) -> updateConfiguration( update ) );\n-    }\n+  private final Lock pruneLock = new ReentrantLock();\n+  private final FileSystemAbstraction fs;\n+  private final LogFiles logFiles;\n+  private final Log msgLog;\n+  private final LogPruneStrategyFactory strategyFactory;\n+  private final Clock clock;\n+  private volatile LogPruneStrategy pruneStrategy;\n \n-    private static class CountingDeleter implements LongConsumer\n-    {\n-        private static final int NO_VERSION = -1;\n-        private final LogFiles logFiles;\n-        private final FileSystemAbstraction fs;\n-        private final long upToVersion;\n-        private long fromVersion;\n-        private long toVersion;\n+  public LogPruningImpl(FileSystemAbstraction fs,\n+                        LogFiles logFiles,\n+                        LogProvider logProvider,\n+                        LogPruneStrategyFactory strategyFactory,\n+                        Clock clock,\n+                        Config config)\n+  {\n+    this.fs = fs;\n+    this.logFiles = logFiles;\n+    this.msgLog = logProvider.getLog(getClass());\n+    this.strategyFactory = strategyFactory;\n+    this.clock = clock;\n+    this.pruneStrategy = strategyFactory.strategyFromConfigValue(fs, logFiles, clock, config.get(GraphDatabaseSettings.keep_logical_logs));\n \n-        private CountingDeleter( LogFiles logFiles, FileSystemAbstraction fs, long upToVersion )\n-        {\n-            this.logFiles = logFiles;\n-            this.fs = fs;\n-            this.upToVersion = upToVersion;\n-            fromVersion = NO_VERSION;\n-            toVersion = NO_VERSION;\n-        }\n+    // Register listener for updates\n+    config.registerDynamicUpdateListener(GraphDatabaseSettings.keep_logical_logs,\n+        (prev, update) -> updateConfiguration(update));\n+  }\n \n-        @Override\n-        public void accept( long version )\n-        {\n-            fromVersion = fromVersion == NO_VERSION ? version : Math.min( fromVersion, version );\n-            toVersion = toVersion == NO_VERSION ? version : Math.max( toVersion, version );\n-            File logFile = logFiles.getLogFileForVersion( version );\n-            fs.deleteFile( logFile );\n-        }\n+  private static class CountingDeleter implements LongConsumer\n+  {\n+    private static final int NO_VERSION = -1;\n+    private final LogFiles logFiles;\n+    private final FileSystemAbstraction fs;\n+    private final long upToVersion;\n+    private long fromVersion;\n+    private long toVersion;\n \n-        public String describeResult()\n-        {\n-            if ( fromVersion == NO_VERSION )\n-            {\n-                return \"No log version pruned, last checkpoint was made in version \" + upToVersion;\n-            }\n-            else\n-            {\n-                return \"Pruned log versions \" + fromVersion + \"-\" + toVersion +\n-                       \", last checkpoint was made in version \" + upToVersion;\n-            }\n-        }\n+    private CountingDeleter(LogFiles logFiles, FileSystemAbstraction fs, long upToVersion)\n+    {\n+      this.logFiles = logFiles;\n+      this.fs = fs;\n+      this.upToVersion = upToVersion;\n+      fromVersion = NO_VERSION;\n+      toVersion = NO_VERSION;\n     }\n \n-    private void updateConfiguration( String pruningConf )\n+    @Override\n+    public void accept(long version)\n     {\n-        this.pruneStrategy = strategyFactory.strategyFromConfigValue( fs, logFiles, clock, pruningConf );\n-        msgLog.info( \"Retention policy updated, value will take effect during the next evaluation.\" );\n+      fromVersion = fromVersion == NO_VERSION ? version : Math.min(fromVersion, version);\n+      toVersion = toVersion == NO_VERSION ? version : Math.max(toVersion, version);\n+      File logFile = logFiles.getLogFileForVersion(version);\n+      fs.deleteFile(logFile);\n     }\n \n-    @Override\n-    public void pruneLogs( long upToVersion )\n+    public String describeResult()\n     {\n-        // Only one is allowed to do pruning at any given time,\n-        // and it's OK to skip pruning if another one is doing so right now.\n-        if ( pruneLock.tryLock() )\n-        {\n-            try\n-            {\n-                CountingDeleter deleter = new CountingDeleter( logFiles, fs, upToVersion );\n-                pruneStrategy.findLogVersionsToDelete( upToVersion ).forEachOrdered( deleter );\n-                msgLog.info( deleter.describeResult() );\n-            }\n-            finally\n-            {\n-                pruneLock.unlock();\n-            }\n-        }\n+      if (fromVersion == NO_VERSION)\n+      {\n+        return \"No log version pruned, last checkpoint was made in version \" + upToVersion;\n+      } else\n+      {\n+        return \"Pruned log versions \" + fromVersion + \"-\" + toVersion +\n+            \", last checkpoint was made in version \" + upToVersion;\n+      }\n     }\n+  }\n \n-    @Override\n-    public boolean mightHaveLogsToPrune()\n+  private void updateConfiguration(String pruningConf)\n+  {\n+    this.pruneStrategy = strategyFactory.strategyFromConfigValue(fs, logFiles, clock, pruningConf);\n+    msgLog.info(\"Retention policy updated, value will take effect during the next evaluation.\");\n+  }\n+\n+  @Override\n+  public void pruneLogs(long upToVersion)\n+  {\n+    // Only one is allowed to do pruning at any given time,\n+    // and it's OK to skip pruning if another one is doing so right now.\n+    if (pruneLock.tryLock())\n     {\n-        return pruneStrategy.findLogVersionsToDelete( logFiles.getHighestLogVersion() ).count() > 0;\n+      try\n+      {\n+        CountingDeleter deleter = new CountingDeleter(logFiles, fs, upToVersion);\n+        pruneStrategy.findLogVersionsToDelete(upToVersion).forEachOrdered(deleter);\n+        msgLog.info(deleter.describeResult());\n+      } finally\n+      {\n+        pruneLock.unlock();\n+      }\n     }\n+  }\n+\n+  @Override\n+  public boolean mightHaveLogsToPrune()\n+  {\n+    return pruneStrategy.findLogVersionsToDelete(logFiles.getHighestLogVersion()).count() > 0;\n+  }\n }\n",
            "diff_size": 120
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/773/LogPruningImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/773/LogPruningImpl.java\nindex 52d25509d19..c37c9aa8ab9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/773/LogPruningImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/773/LogPruningImpl.java\n@@ -45,13 +45,12 @@ public class LogPruningImpl implements LogPruning\n     private final Clock clock;\n     private volatile LogPruneStrategy pruneStrategy;\n \n-    public LogPruningImpl( FileSystemAbstraction fs,\n-                           LogFiles logFiles,\n+    public LogPruningImpl( FileSystemAbstraction fs, LogFiles logFiles,\n                            LogProvider logProvider,\n                            LogPruneStrategyFactory strategyFactory,\n                            Clock clock,\n                            Config config )\n-    {\n+{\n         this.fs = fs;\n         this.logFiles = logFiles;\n         this.msgLog = logProvider.getLog( getClass() );\n@@ -60,8 +59,7 @@ public class LogPruningImpl implements LogPruning\n         this.pruneStrategy = strategyFactory.strategyFromConfigValue( fs, logFiles, clock, config.get( GraphDatabaseSettings.keep_logical_logs ) );\n \n         // Register listener for updates\n-        config.registerDynamicUpdateListener( GraphDatabaseSettings.keep_logical_logs,\n-                ( prev, update ) -> updateConfiguration( update ) );\n+        config.registerDynamicUpdateListener( GraphDatabaseSettings.keep_logical_logs,( prev, update ) -> updateConfiguration( update ) );\n     }\n \n     private static class CountingDeleter implements LongConsumer\n@@ -99,9 +97,8 @@ public class LogPruningImpl implements LogPruning\n             }\n             else\n             {\n-                return \"Pruned log versions \" + fromVersion + \"-\" + toVersion +\n-                       \", last checkpoint was made in version \" + upToVersion;\n-            }\n+                return \"Pruned log versions \" + fromVersion + \"-\" + toVersion + \", last checkpoint was made in version \" + upToVersion;\n+    }\n         }\n     }\n \n@@ -136,4 +133,4 @@ public class LogPruningImpl implements LogPruning\n     {\n         return pruneStrategy.findLogVersionsToDelete( logFiles.getHighestLogVersion() ).count() > 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}