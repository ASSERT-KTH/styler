{
    "project_name": "graphfoundation-ongdb",
    "error_id": "947",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/947/OnlineBackupRequiredArguments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/947/OnlineBackupRequiredArguments.java\nindex f659fb8b33f..35f4bdf16dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/947/OnlineBackupRequiredArguments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/947/OnlineBackupRequiredArguments.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.backup.impl;\n \n import java.nio.file.Path;\n@@ -25,70 +26,70 @@ import org.neo4j.kernel.impl.util.OptionalHostnamePort;\n \n class OnlineBackupRequiredArguments\n {\n-    private final OptionalHostnamePort address;\n-    private final Path directory;\n-    private final String name;\n-    private final boolean fallbackToFull;\n-    private final boolean doConsistencyCheck;\n-    private final long timeout;\n-    private final Path reportDir;\n-    private final SelectedBackupProtocol selectedBackupProtocol;\n+  private final OptionalHostnamePort address;\n+  private final Path directory;\n+  private final String name;\n+  private final boolean fallbackToFull;\n+  private final boolean doConsistencyCheck;\n+  private final long timeout;\n+  private final Path reportDir;\n+  private final SelectedBackupProtocol selectedBackupProtocol;\n \n-    OnlineBackupRequiredArguments( OptionalHostnamePort address, Path directory, String name, SelectedBackupProtocol selectedBackupProtocol,\n-            boolean fallbackToFull, boolean doConsistencyCheck, long timeout, Path reportDir )\n-    {\n-        this.address = address;\n-        this.directory = directory;\n-        this.name = name;\n-        this.fallbackToFull = fallbackToFull;\n-        this.doConsistencyCheck = doConsistencyCheck;\n-        this.timeout = timeout;\n-        this.reportDir = reportDir;\n-        this.selectedBackupProtocol = selectedBackupProtocol;\n-    }\n+  OnlineBackupRequiredArguments(OptionalHostnamePort address, Path directory, String name, SelectedBackupProtocol selectedBackupProtocol,\n+                                boolean fallbackToFull, boolean doConsistencyCheck, long timeout, Path reportDir)\n+  {\n+    this.address = address;\n+    this.directory = directory;\n+    this.name = name;\n+    this.fallbackToFull = fallbackToFull;\n+    this.doConsistencyCheck = doConsistencyCheck;\n+    this.timeout = timeout;\n+    this.reportDir = reportDir;\n+    this.selectedBackupProtocol = selectedBackupProtocol;\n+  }\n \n-    public OptionalHostnamePort getAddress()\n-    {\n-        return address;\n-    }\n+  public OptionalHostnamePort getAddress()\n+  {\n+    return address;\n+  }\n \n-    public Path getDirectory()\n-    {\n-        return directory;\n-    }\n+  public Path getDirectory()\n+  {\n+    return directory;\n+  }\n \n-    public String getName()\n-    {\n-        return name;\n-    }\n+  public String getName()\n+  {\n+    return name;\n+  }\n \n-    public boolean isFallbackToFull()\n-    {\n-        return fallbackToFull;\n-    }\n+  public boolean isFallbackToFull()\n+  {\n+    return fallbackToFull;\n+  }\n \n-    public boolean isDoConsistencyCheck()\n-    {\n-        return doConsistencyCheck;\n-    }\n+  public boolean isDoConsistencyCheck()\n+  {\n+    return doConsistencyCheck;\n+  }\n \n-    public long getTimeout()\n-    {\n-        return timeout;\n-    }\n+  public long getTimeout()\n+  {\n+    return timeout;\n+  }\n \n-    public Path getReportDir()\n-    {\n-        return reportDir;\n-    }\n+  public Path getReportDir()\n+  {\n+    return reportDir;\n+  }\n \n-    public Path getResolvedLocationFromName()\n-    {\n-        return directory.resolve( name );\n-    }\n+  public Path getResolvedLocationFromName()\n+  {\n+    return directory.resolve(name);\n+  }\n \n-    public SelectedBackupProtocol getSelectedBackupProtocol()\n-    {\n-        return selectedBackupProtocol;\n-    }\n+  public SelectedBackupProtocol getSelectedBackupProtocol()\n+  {\n+    return selectedBackupProtocol;\n+  }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/947/OnlineBackupRequiredArguments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/947/OnlineBackupRequiredArguments.java\nindex f659fb8b33f..ee5ccecb1fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/947/OnlineBackupRequiredArguments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/947/OnlineBackupRequiredArguments.java\n@@ -91,4 +91,4 @@ class OnlineBackupRequiredArguments\n     {\n         return selectedBackupProtocol;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}