{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1039",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "180",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1039/SpectrumExecutionMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1039/SpectrumExecutionMonitor.java\nindex dda839b922e..57f0e394067 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1039/SpectrumExecutionMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1039/SpectrumExecutionMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import java.io.PrintStream;\n@@ -40,200 +41,199 @@ import static org.neo4j.helpers.collection.Iterables.last;\n  * <pre>\n  * NODE |--INPUT--|--NODE--|======NODE=PROPERTY======|-------------WRITER-------------| 1000\n  * </pre>\n- *\n+ * <p>\n  * where there's one line per stage, updated rapidly, overwriting the line each time. The width\n  * of the {@link Step} column is based on how slow it is compared to the others.\n- *\n+ * <p>\n  * The width of the \"spectrum\" is user specified, but is dynamic in that it can shrink or expand\n  * based on how many simultaneous {@link StageExecution executions} this monitor is monitoring.\n- *\n+ * <p>\n  * The specified width is included stage identifier and progress, so in a console the whole\n  * console width can be specified.\n  */\n public class SpectrumExecutionMonitor extends ExecutionMonitor.Adapter\n {\n-    public static final int DEFAULT_WIDTH = 100;\n-    private static final int PROGRESS_WIDTH = 5;\n-    private static final char[] WEIGHTS = new char[] {' ', 'K', 'M', 'B', 'T'};\n-\n-    private final PrintStream out;\n-    private final int width;\n-    // For tracking delta\n-    private long lastProgress;\n-\n-    public SpectrumExecutionMonitor( long interval, TimeUnit unit, PrintStream out, int width )\n+  public static final int DEFAULT_WIDTH = 100;\n+  private static final int PROGRESS_WIDTH = 5;\n+  private static final char[] WEIGHTS = new char[] {' ', 'K', 'M', 'B', 'T'};\n+\n+  private final PrintStream out;\n+  private final int width;\n+  // For tracking delta\n+  private long lastProgress;\n+\n+  public SpectrumExecutionMonitor(long interval, TimeUnit unit, PrintStream out, int width)\n+  {\n+    super(interval, unit);\n+    this.out = out;\n+    this.width = width;\n+  }\n+\n+  @Override\n+  public void start(StageExecution execution)\n+  {\n+    out.println(execution.name() + \", started \" + date());\n+    lastProgress = 0;\n+  }\n+\n+  @Override\n+  public void end(StageExecution execution, long totalTimeMillis)\n+  {\n+    check(execution);\n+    out.println();\n+    out.println(\"Done in \" + duration(totalTimeMillis));\n+  }\n+\n+  @Override\n+  public void done(boolean successful, long totalTimeMillis, String additionalInformation)\n+  {\n+    out.println();\n+    out.println(format(\"IMPORT %s in %s. %s\", successful ? \"DONE\" : \"FAILED\", duration(totalTimeMillis), additionalInformation));\n+  }\n+\n+  @Override\n+  public void check(StageExecution execution)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    printSpectrum(builder, execution, width, DetailLevel.IMPORTANT);\n+\n+    // add delta\n+    long progress = last(execution.steps()).stats().stat(Keys.done_batches).asLong() * execution.getConfig().batchSize();\n+    long currentDelta = progress - lastProgress;\n+    builder.append(\" \u2206\").append(fitInProgress(currentDelta));\n+\n+    // and remember progress to compare with next check\n+    lastProgress = progress;\n+\n+    // print it (overwriting the previous contents on this console line)\n+    out.print(\"\\r\" + builder);\n+  }\n+\n+  public static void printSpectrum(StringBuilder builder, StageExecution execution, int width, DetailLevel additionalStatsLevel)\n+  {\n+    long[] values = values(execution);\n+    long total = total(values);\n+\n+    // reduce the width with the known extra characters we know we'll print in and around the spectrum\n+    width -= 2/*'[]' chars*/ + PROGRESS_WIDTH/*progress chars*/;\n+\n+    Pair<Step<?>, Float> bottleNeck = execution.stepsOrderedBy(Keys.avg_processing_time, false).iterator().next();\n+    QuantizedProjection projection = new QuantizedProjection(total, width);\n+    long lastDoneBatches = 0;\n+    int stepIndex = 0;\n+    boolean hasProgressed = false;\n+    builder.append('[');\n+    for (Step<?> step : execution.steps())\n     {\n-        super( interval, unit );\n-        this.out = out;\n-        this.width = width;\n-    }\n-\n-    @Override\n-    public void start( StageExecution execution )\n-    {\n-        out.println( execution.name() + \", started \" + date() );\n-        lastProgress = 0;\n+      StepStats stats = step.stats();\n+      if (!projection.next(values[stepIndex]))\n+      {\n+        break; // odd though\n+      }\n+      long stepWidth = total == 0 && stepIndex == 0 ? width : projection.step();\n+      if (stepWidth > 0)\n+      {\n+        if (hasProgressed)\n+        {\n+          stepWidth--;\n+          builder.append('|');\n+        }\n+        boolean isBottleNeck = bottleNeck.first() == step;\n+        String name =\n+            (isBottleNeck ? \"*\" : \"\") +\n+                stats.toString(additionalStatsLevel) + (step.processors(0) > 1\n+                ? \"(\" + step.processors(0) + \")\"\n+                : \"\");\n+        int charIndex = 0; // negative value \"delays\" the text, i.e. pushes it to the right\n+        char backgroundChar = step.processors(0) > 1 ? '=' : '-';\n+        for (int i = 0; i < stepWidth; i++, charIndex++)\n+        {\n+          char ch = backgroundChar;\n+          if (charIndex >= 0 && charIndex < name.length() && charIndex < stepWidth)\n+          {\n+            ch = name.charAt(charIndex);\n+          }\n+          builder.append(ch);\n+        }\n+        hasProgressed = true;\n+      }\n+      lastDoneBatches = stats.stat(Keys.done_batches).asLong();\n+      stepIndex++;\n     }\n \n-    @Override\n-    public void end( StageExecution execution, long totalTimeMillis )\n-    {\n-        check( execution );\n-        out.println();\n-        out.println( \"Done in \" + duration( totalTimeMillis ) );\n-    }\n+    long progress = lastDoneBatches * execution.getConfig().batchSize();\n+    builder.append(\"]\").append(fitInProgress(progress));\n+  }\n \n-    @Override\n-    public void done( boolean successful, long totalTimeMillis, String additionalInformation )\n-    {\n-        out.println();\n-        out.println( format( \"IMPORT %s in %s. %s\", successful ? \"DONE\" : \"FAILED\", duration( totalTimeMillis ), additionalInformation ) );\n-    }\n+  private static String fitInProgress(long value)\n+  {\n+    int weight = weight(value);\n \n-    @Override\n-    public void check( StageExecution execution )\n+    String progress;\n+    if (weight == 0)\n     {\n-        StringBuilder builder = new StringBuilder();\n-        printSpectrum( builder, execution, width, DetailLevel.IMPORTANT );\n-\n-        // add delta\n-        long progress = last( execution.steps() ).stats().stat( Keys.done_batches ).asLong() * execution.getConfig().batchSize();\n-        long currentDelta = progress - lastProgress;\n-        builder.append( \" \u2206\" ).append( fitInProgress( currentDelta ) );\n-\n-        // and remember progress to compare with next check\n-        lastProgress = progress;\n-\n-        // print it (overwriting the previous contents on this console line)\n-        out.print( \"\\r\" + builder );\n-    }\n-\n-    public static void printSpectrum( StringBuilder builder, StageExecution execution, int width, DetailLevel additionalStatsLevel )\n+      progress = String.valueOf(value);\n+    } else\n     {\n-        long[] values = values( execution );\n-        long total = total( values );\n-\n-        // reduce the width with the known extra characters we know we'll print in and around the spectrum\n-        width -= 2/*'[]' chars*/ + PROGRESS_WIDTH/*progress chars*/;\n-\n-        Pair<Step<?>,Float> bottleNeck = execution.stepsOrderedBy( Keys.avg_processing_time, false ).iterator().next();\n-        QuantizedProjection projection = new QuantizedProjection( total, width );\n-        long lastDoneBatches = 0;\n-        int stepIndex = 0;\n-        boolean hasProgressed = false;\n-        builder.append( '[' );\n-        for ( Step<?> step : execution.steps() )\n-        {\n-            StepStats stats = step.stats();\n-            if ( !projection.next( values[stepIndex] ) )\n-            {\n-                break; // odd though\n-            }\n-            long stepWidth = total == 0 && stepIndex == 0 ? width : projection.step();\n-            if ( stepWidth > 0 )\n-            {\n-                if ( hasProgressed )\n-                {\n-                    stepWidth--;\n-                    builder.append( '|' );\n-                }\n-                boolean isBottleNeck = bottleNeck.first() == step;\n-                String name =\n-                        (isBottleNeck ? \"*\" : \"\") +\n-                        stats.toString( additionalStatsLevel ) + (step.processors( 0 ) > 1\n-                        ? \"(\" + step.processors( 0 ) + \")\"\n-                        : \"\");\n-                int charIndex = 0; // negative value \"delays\" the text, i.e. pushes it to the right\n-                char backgroundChar = step.processors( 0 ) > 1 ? '=' : '-';\n-                for ( int i = 0; i < stepWidth; i++, charIndex++ )\n-                {\n-                    char ch = backgroundChar;\n-                    if ( charIndex >= 0 && charIndex < name.length() && charIndex < stepWidth )\n-                    {\n-                        ch = name.charAt( charIndex );\n-                    }\n-                    builder.append( ch );\n-                }\n-                hasProgressed = true;\n-            }\n-            lastDoneBatches = stats.stat( Keys.done_batches ).asLong();\n-            stepIndex++;\n-        }\n-\n-        long progress = lastDoneBatches * execution.getConfig().batchSize();\n-        builder.append( \"]\" ).append( fitInProgress( progress ) );\n+      double floatValue = value / pow(1000, weight);\n+      progress = String.valueOf(floatValue);\n+      if (progress.length() > PROGRESS_WIDTH - 1)\n+      {\n+        progress = progress.substring(0, PROGRESS_WIDTH - 1);\n+      }\n+      if (progress.endsWith(\".\"))\n+      {\n+        progress = progress.substring(0, progress.length() - 1);\n+      }\n+      progress += WEIGHTS[weight];\n     }\n \n-    private static String fitInProgress( long value )\n-    {\n-        int weight = weight( value );\n-\n-        String progress;\n-        if ( weight == 0 )\n-        {\n-            progress = String.valueOf( value );\n-        }\n-        else\n-        {\n-            double floatValue = value / pow( 1000, weight );\n-            progress = String.valueOf( floatValue );\n-            if ( progress.length() > PROGRESS_WIDTH - 1 )\n-            {\n-                progress = progress.substring( 0, PROGRESS_WIDTH - 1 );\n-            }\n-            if ( progress.endsWith( \".\" ) )\n-            {\n-                progress = progress.substring( 0, progress.length() - 1 );\n-            }\n-            progress += WEIGHTS[weight];\n-        }\n-\n-        return pad( progress, PROGRESS_WIDTH, ' ' );\n-    }\n+    return pad(progress, PROGRESS_WIDTH, ' ');\n+  }\n \n-    private static String pad( String result, int length, char padChar )\n+  private static String pad(String result, int length, char padChar)\n+  {\n+    while (result.length() < length)\n     {\n-        while ( result.length() < length )\n-        {\n-            result = padChar + result;\n-        }\n-        return result;\n+      result = padChar + result;\n     }\n+    return result;\n+  }\n \n-    private static int weight( long value )\n+  private static int weight(long value)\n+  {\n+    int weight = 0;\n+    while (value >= 1000)\n     {\n-        int weight = 0;\n-        while ( value >= 1000 )\n-        {\n-            value /= 1000;\n-            weight++;\n-        }\n-        return weight;\n+      value /= 1000;\n+      weight++;\n     }\n-\n-    private static long[] values( StageExecution execution )\n+    return weight;\n+  }\n+\n+  private static long[] values(StageExecution execution)\n+  {\n+    long[] values = new long[execution.size()];\n+    int i = 0;\n+    for (Step<?> step : execution.steps())\n     {\n-        long[] values = new long[execution.size()];\n-        int i = 0;\n-        for ( Step<?> step : execution.steps() )\n-        {\n-            values[i++] = avg( step.stats() );\n-        }\n-        return values;\n+      values[i++] = avg(step.stats());\n     }\n+    return values;\n+  }\n \n-    private static long total( long[] values )\n+  private static long total(long[] values)\n+  {\n+    long total = 0;\n+    for (long value : values)\n     {\n-        long total = 0;\n-        for ( long value : values )\n-        {\n-            total += value;\n-        }\n-        return total;\n+      total += value;\n     }\n+    return total;\n+  }\n \n-    private static long avg( StatsProvider step )\n-    {\n-        return step.stat( Keys.avg_processing_time ).asLong();\n-    }\n+  private static long avg(StatsProvider step)\n+  {\n+    return step.stat(Keys.avg_processing_time).asLong();\n+  }\n }\n",
            "diff_size": 272
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "column": "122",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "143",
                    "column": "59",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "208",
                    "column": "36",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1039/SpectrumExecutionMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1039/SpectrumExecutionMonitor.java\nindex dda839b922e..a2a563abb69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1039/SpectrumExecutionMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1039/SpectrumExecutionMonitor.java\n@@ -54,7 +54,7 @@ public class SpectrumExecutionMonitor extends ExecutionMonitor.Adapter\n {\n     public static final int DEFAULT_WIDTH = 100;\n     private static final int PROGRESS_WIDTH = 5;\n-    private static final char[] WEIGHTS = new char[] {' ', 'K', 'M', 'B', 'T'};\n+    private static final char[] WEIGHTS = new char[]{' ', 'K', 'M', 'B', 'T'};\n \n     private final PrintStream out;\n     private final int width;\n@@ -138,13 +138,9 @@ public class SpectrumExecutionMonitor extends ExecutionMonitor.Adapter\n                     builder.append( '|' );\n                 }\n                 boolean isBottleNeck = bottleNeck.first() == step;\n-                String name =\n-                        (isBottleNeck ? \"*\" : \"\") +\n-                        stats.toString( additionalStatsLevel ) + (step.processors( 0 ) > 1\n-                        ? \"(\" + step.processors( 0 ) + \")\"\n-                        : \"\");\n-                int charIndex = 0; // negative value \"delays\" the text, i.e. pushes it to the right\n-                char backgroundChar = step.processors( 0 ) > 1 ? '=' : '-';\n+                String name = ( isBottleNeck ? \"*\" : \"\") + stats.toString( additionalStatsLevel ) + (step.processors( 0 )> 1 ? \"(\" + step.processors( 0 ) + \")\" : \"\" );\n+    int charIndex = 0; // negative value \"delays\" the text, i.e. pushes it to the right\n+                char backgroundChar = step.processors( 0 )> 1 ? '=' : '-';\n                 for ( int i = 0; i < stepWidth; i++, charIndex++ )\n                 {\n                     char ch = backgroundChar;\n@@ -154,9 +150,11 @@ public class SpectrumExecutionMonitor extends ExecutionMonitor.Adapter\n                     }\n                     builder.append( ch );\n                 }\n-                hasProgressed = true;\n+\n+hasProgressed = true;\n             }\n-            lastDoneBatches = stats.stat( Keys.done_batches ).asLong();\n+\n+lastDoneBatches = stats.stat( Keys.done_batches ).asLong();\n             stepIndex++;\n         }\n \n@@ -167,8 +165,7 @@ public class SpectrumExecutionMonitor extends ExecutionMonitor.Adapter\n     private static String fitInProgress( long value )\n     {\n         int weight = weight( value );\n-\n-        String progress;\n+String progress;\n         if ( weight == 0 )\n         {\n             progress = String.valueOf( value );\n@@ -181,11 +178,13 @@ public class SpectrumExecutionMonitor extends ExecutionMonitor.Adapter\n             {\n                 progress = progress.substring( 0, PROGRESS_WIDTH - 1 );\n             }\n-            if ( progress.endsWith( \".\" ) )\n+\n+if ( progress.endsWith( \".\" ) )\n             {\n                 progress = progress.substring( 0, progress.length() - 1 );\n             }\n-            progress += WEIGHTS[weight];\n+\n+progress += WEIGHTS[weight];\n         }\n \n         return pad( progress, PROGRESS_WIDTH, ' ' );\n@@ -197,7 +196,8 @@ public class SpectrumExecutionMonitor extends ExecutionMonitor.Adapter\n         {\n             result = padChar + result;\n         }\n-        return result;\n+\n+return result;\n     }\n \n     private static int weight( long value )\n@@ -205,10 +205,10 @@ public class SpectrumExecutionMonitor extends ExecutionMonitor.Adapter\n         int weight = 0;\n         while ( value >= 1000 )\n         {\n-            value /= 1000;\n-            weight++;\n+            value /= 1000; weight++;\n         }\n-        return weight;\n+\n+return weight;\n     }\n \n     private static long[] values( StageExecution execution )\n@@ -219,7 +219,8 @@ public class SpectrumExecutionMonitor extends ExecutionMonitor.Adapter\n         {\n             values[i++] = avg( step.stats() );\n         }\n-        return values;\n+\n+return values;\n     }\n \n     private static long total( long[] values )\n@@ -229,11 +230,12 @@ public class SpectrumExecutionMonitor extends ExecutionMonitor.Adapter\n         {\n             total += value;\n         }\n-        return total;\n+\n+return total;\n     }\n \n     private static long avg( StatsProvider step )\n     {\n         return step.stat( Keys.avg_processing_time ).asLong();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}