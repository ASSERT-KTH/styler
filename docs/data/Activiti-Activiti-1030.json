{
    "project_name": "Activiti-Activiti",
    "error_id": "1030",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.behavior;\n\nimport java.util.List;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1030/IntermediateCatchSignalEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/1030/IntermediateCatchSignalEventActivityBehavior.java\nindex 4264cce6429..72f776dbc48 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1030/IntermediateCatchSignalEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/1030/IntermediateCatchSignalEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1030/IntermediateCatchSignalEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/1030/IntermediateCatchSignalEventActivityBehavior.java\nindex 4264cce6429..507e5e841d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1030/IntermediateCatchSignalEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/1030/IntermediateCatchSignalEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n@@ -29,63 +30,63 @@ import org.apache.commons.lang3.StringUtils;\n \n public class IntermediateCatchSignalEventActivityBehavior extends IntermediateCatchEventActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n-\n-  protected SignalEventDefinition signalEventDefinition;\n-  protected Signal signal;\n-\n-  public IntermediateCatchSignalEventActivityBehavior(SignalEventDefinition signalEventDefinition, Signal signal) {\n-    this.signalEventDefinition = signalEventDefinition;\n-    this.signal = signal;\n-  }\n-\n-  public void execute(DelegateExecution execution) {\n-    CommandContext commandContext = Context.getCommandContext();\n-    ExecutionEntity executionEntity = (ExecutionEntity) execution;\n-    \n-    String signalName = null;\n-    if (StringUtils.isNotEmpty(signalEventDefinition.getSignalRef())) {\n-      signalName = signalEventDefinition.getSignalRef();\n-    } else {\n-      Expression signalExpression = commandContext.getProcessEngineConfiguration().getExpressionManager()\n-          .createExpression(signalEventDefinition.getSignalExpression());\n-      signalName = signalExpression.getValue(execution).toString();\n+    private static final long serialVersionUID = 1L;\n+\n+    protected SignalEventDefinition signalEventDefinition;\n+    protected Signal signal;\n+\n+    public IntermediateCatchSignalEventActivityBehavior(SignalEventDefinition signalEventDefinition, Signal signal) {\n+        this.signalEventDefinition = signalEventDefinition;\n+        this.signal = signal;\n+    }\n+\n+    public void execute(DelegateExecution execution) {\n+        CommandContext commandContext = Context.getCommandContext();\n+        ExecutionEntity executionEntity = (ExecutionEntity) execution;\n+\n+        String signalName = null;\n+        if (StringUtils.isNotEmpty(signalEventDefinition.getSignalRef())) {\n+            signalName = signalEventDefinition.getSignalRef();\n+        } else {\n+            Expression signalExpression = commandContext.getProcessEngineConfiguration().getExpressionManager()\n+                    .createExpression(signalEventDefinition.getSignalExpression());\n+            signalName = signalExpression.getValue(execution).toString();\n+        }\n+\n+        commandContext.getEventSubscriptionEntityManager().insertSignalEvent(signalName, signal, executionEntity);\n+    }\n+\n+    @Override\n+    public void trigger(DelegateExecution execution, String triggerName, Object triggerData) {\n+        ExecutionEntity executionEntity = deleteSignalEventSubscription(execution);\n+        leaveIntermediateCatchEvent(executionEntity);\n     }\n-    \n-    commandContext.getEventSubscriptionEntityManager().insertSignalEvent(signalName, signal, executionEntity);\n-  }\n-\n-  @Override\n-  public void trigger(DelegateExecution execution, String triggerName, Object triggerData) {\n-    ExecutionEntity executionEntity = deleteSignalEventSubscription(execution);\n-    leaveIntermediateCatchEvent(executionEntity);\n-  }\n-  \n-  @Override\n-  public void eventCancelledByEventGateway(DelegateExecution execution) {\n-    deleteSignalEventSubscription(execution);\n-    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution, \n-        DeleteReason.EVENT_BASED_GATEWAY_CANCEL);\n-  }\n-\n-  protected ExecutionEntity deleteSignalEventSubscription(DelegateExecution execution) {\n-    ExecutionEntity executionEntity = (ExecutionEntity) execution;\n-\n-    String eventName = null;\n-    if (signal != null) {\n-      eventName = signal.getName();\n-    } else {\n-      eventName = signalEventDefinition.getSignalRef();\n+\n+    @Override\n+    public void eventCancelledByEventGateway(DelegateExecution execution) {\n+        deleteSignalEventSubscription(execution);\n+        Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n+                DeleteReason.EVENT_BASED_GATEWAY_CANCEL);\n     }\n \n-    EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n-    List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n-    for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n-      if (eventSubscription instanceof SignalEventSubscriptionEntity && eventSubscription.getEventName().equals(eventName)) {\n+    protected ExecutionEntity deleteSignalEventSubscription(DelegateExecution execution) {\n+        ExecutionEntity executionEntity = (ExecutionEntity) execution;\n+\n+        String eventName = null;\n+        if (signal != null) {\n+            eventName = signal.getName();\n+        } else {\n+            eventName = signalEventDefinition.getSignalRef();\n+        }\n+\n+        EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n+        List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n+        for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n+            if (eventSubscription instanceof SignalEventSubscriptionEntity && eventSubscription.getEventName().equals(eventName)) {\n \n-        eventSubscriptionEntityManager.delete(eventSubscription);\n-      }\n+                eventSubscriptionEntityManager.delete(eventSubscription);\n+            }\n+        }\n+        return executionEntity;\n     }\n-    return executionEntity;\n-  }\n }\n",
            "diff_size": 76
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1030/IntermediateCatchSignalEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/1030/IntermediateCatchSignalEventActivityBehavior.java\nindex 4264cce6429..ea5c78d27dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1030/IntermediateCatchSignalEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/1030/IntermediateCatchSignalEventActivityBehavior.java\n@@ -13,7 +13,6 @@\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n-\n import org.activiti.bpmn.model.Signal;\n import org.activiti.bpmn.model.SignalEventDefinition;\n import org.activiti.engine.delegate.DelegateExecution;\n@@ -27,10 +26,10 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n import org.activiti.engine.impl.persistence.entity.SignalEventSubscriptionEntity;\n import org.apache.commons.lang3.StringUtils;\n \n+\n public class IntermediateCatchSignalEventActivityBehavior extends IntermediateCatchEventActivityBehavior {\n \n   private static final long serialVersionUID = 1L;\n-\n   protected SignalEventDefinition signalEventDefinition;\n   protected Signal signal;\n \n@@ -42,16 +41,13 @@ public class IntermediateCatchSignalEventActivityBehavior extends IntermediateCa\n   public void execute(DelegateExecution execution) {\n     CommandContext commandContext = Context.getCommandContext();\n     ExecutionEntity executionEntity = (ExecutionEntity) execution;\n-    \n     String signalName = null;\n     if (StringUtils.isNotEmpty(signalEventDefinition.getSignalRef())) {\n       signalName = signalEventDefinition.getSignalRef();\n     } else {\n-      Expression signalExpression = commandContext.getProcessEngineConfiguration().getExpressionManager()\n-          .createExpression(signalEventDefinition.getSignalExpression());\n+      Expression signalExpression = commandContext.getProcessEngineConfiguration().getExpressionManager().createExpression(signalEventDefinition.getSignalExpression());\n       signalName = signalExpression.getValue(execution).toString();\n     }\n-    \n     commandContext.getEventSubscriptionEntityManager().insertSignalEvent(signalName, signal, executionEntity);\n   }\n \n@@ -60,17 +56,16 @@ public class IntermediateCatchSignalEventActivityBehavior extends IntermediateCa\n     ExecutionEntity executionEntity = deleteSignalEventSubscription(execution);\n     leaveIntermediateCatchEvent(executionEntity);\n   }\n-  \n+\n   @Override\n   public void eventCancelledByEventGateway(DelegateExecution execution) {\n     deleteSignalEventSubscription(execution);\n-    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution, \n-        DeleteReason.EVENT_BASED_GATEWAY_CANCEL);\n+    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n+                                                                                          DeleteReason.EVENT_BASED_GATEWAY_CANCEL);\n   }\n \n   protected ExecutionEntity deleteSignalEventSubscription(DelegateExecution execution) {\n     ExecutionEntity executionEntity = (ExecutionEntity) execution;\n-\n     String eventName = null;\n     if (signal != null) {\n       eventName = signal.getName();\n@@ -82,10 +77,9 @@ public class IntermediateCatchSignalEventActivityBehavior extends IntermediateCa\n     List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n     for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n       if (eventSubscription instanceof SignalEventSubscriptionEntity && eventSubscription.getEventName().equals(eventName)) {\n-\n         eventSubscriptionEntityManager.delete(eventSubscription);\n       }\n     }\n     return executionEntity;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1030/IntermediateCatchSignalEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/1030/IntermediateCatchSignalEventActivityBehavior.java\nindex 4264cce6429..72f776dbc48 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1030/IntermediateCatchSignalEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/1030/IntermediateCatchSignalEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1030/IntermediateCatchSignalEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/1030/IntermediateCatchSignalEventActivityBehavior.java\nindex 4264cce6429..72f776dbc48 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1030/IntermediateCatchSignalEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/1030/IntermediateCatchSignalEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}