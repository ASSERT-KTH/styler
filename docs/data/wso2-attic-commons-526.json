{
    "project_name": "wso2-attic-commons",
    "error_id": "526",
    "information": {
        "errors": [
            {
                "line": "40",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n\n        if (currentEvent != null) {\n            if (currentEvent instanceof ListEvent) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/526/FirstPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/526/FirstPerTimeOutputRateManager.java\nindex 8fc915bd17b..cff28edaef5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/526/FirstPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/526/FirstPerTimeOutputRateManager.java\n@@ -37,9 +37,10 @@ public class FirstPerTimeOutputRateManager extends OutputRateManager {\n     }\n \n     @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n+    public synchronized void send(long timeStamp, StreamEvent currentEvent,\n+            StreamEvent expiredEvent, String groupByKey) {\n \n-        if (currentEvent != null) {\n+         if (currentEvent != null) {\n             if (currentEvent instanceof ListEvent) {\n                 for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n                     if (firstEvent == null) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/526/FirstPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/526/FirstPerTimeOutputRateManager.java\nindex 8fc915bd17b..05542d835f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/526/FirstPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/526/FirstPerTimeOutputRateManager.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.query.output.ratelimit.time;\n \n import org.apache.log4j.Logger;\n@@ -26,66 +27,66 @@ import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n public class FirstPerTimeOutputRateManager extends OutputRateManager {\n-    private final Long value;\n-    private StreamEvent firstEvent = null;\n-    static final Logger log = Logger.getLogger(FirstPerTimeOutputRateManager.class);\n+  private final Long value;\n+  private StreamEvent firstEvent = null;\n+  static final Logger log = Logger.getLogger(FirstPerTimeOutputRateManager.class);\n \n \n-    public FirstPerTimeOutputRateManager(Long value, ScheduledExecutorService scheduledExecutorService) {\n-        this.value = value;\n-        scheduledExecutorService.scheduleAtFixedRate(new EventReSeter(), 0, value.longValue(), TimeUnit.MILLISECONDS);\n-    }\n+  public FirstPerTimeOutputRateManager(Long value, ScheduledExecutorService scheduledExecutorService) {\n+    this.value = value;\n+    scheduledExecutorService.scheduleAtFixedRate(new EventReSeter(), 0, value.longValue(), TimeUnit.MILLISECONDS);\n+  }\n \n-    @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n+  @Override\n+  public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n \n-        if (currentEvent != null) {\n-            if (currentEvent instanceof ListEvent) {\n-                for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n-                    if (firstEvent == null) {\n-                        firstEvent = ((ListEvent) currentEvent).getEvent(i);\n-                        sendToCallBacks(timeStamp, firstEvent, null, firstEvent);\n-                    }\n-                }\n-            } else {\n-                if (firstEvent == null) {\n-                    firstEvent = currentEvent;\n-                    sendToCallBacks(timeStamp, currentEvent, null, currentEvent);\n-                }\n-            }\n-        } else if (expiredEvent != null) {\n-            if (expiredEvent instanceof ListEvent) {\n-                for (int i = 0, size = ((ListEvent) expiredEvent).getActiveEvents(); i < size; i++) {\n-                    if (firstEvent == null) {\n-                        firstEvent = ((ListEvent) expiredEvent).getEvent(i);\n-                        sendToCallBacks(timeStamp, firstEvent, null, firstEvent);\n-                    }\n-                }\n-            } else {\n-                if (firstEvent == null) {\n-                    firstEvent = expiredEvent;\n-                    sendToCallBacks(timeStamp, null, expiredEvent, expiredEvent);\n-                }\n-            }\n+    if (currentEvent != null) {\n+      if (currentEvent instanceof ListEvent) {\n+        for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n+          if (firstEvent == null) {\n+            firstEvent = ((ListEvent) currentEvent).getEvent(i);\n+            sendToCallBacks(timeStamp, firstEvent, null, firstEvent);\n+          }\n         }\n-\n+      } else {\n+        if (firstEvent == null) {\n+          firstEvent = currentEvent;\n+          sendToCallBacks(timeStamp, currentEvent, null, currentEvent);\n+        }\n+      }\n+    } else if (expiredEvent != null) {\n+      if (expiredEvent instanceof ListEvent) {\n+        for (int i = 0, size = ((ListEvent) expiredEvent).getActiveEvents(); i < size; i++) {\n+          if (firstEvent == null) {\n+            firstEvent = ((ListEvent) expiredEvent).getEvent(i);\n+            sendToCallBacks(timeStamp, firstEvent, null, firstEvent);\n+          }\n+        }\n+      } else {\n+        if (firstEvent == null) {\n+          firstEvent = expiredEvent;\n+          sendToCallBacks(timeStamp, null, expiredEvent, expiredEvent);\n+        }\n+      }\n     }\n \n-    private synchronized void resetEvents() {\n-        if (firstEvent != null) {\n-            firstEvent = null;\n-        }\n+  }\n+\n+  private synchronized void resetEvents() {\n+    if (firstEvent != null) {\n+      firstEvent = null;\n     }\n+  }\n \n \n-    private class EventReSeter implements Runnable {\n-        @Override\n-        public void run() {\n-            try {\n-                resetEvents();\n-            } catch (Throwable t) {\n-                log.error(t.getMessage(), t);\n-            }\n-        }\n+  private class EventReSeter implements Runnable {\n+    @Override\n+    public void run() {\n+      try {\n+        resetEvents();\n+      } catch (Throwable t) {\n+        log.error(t.getMessage(), t);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 90
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/526/FirstPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/526/FirstPerTimeOutputRateManager.java\nindex 8fc915bd17b..95724a95e99 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/526/FirstPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/526/FirstPerTimeOutputRateManager.java\n@@ -88,4 +88,4 @@ public class FirstPerTimeOutputRateManager extends OutputRateManager {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/526/FirstPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/526/FirstPerTimeOutputRateManager.java\nindex 8fc915bd17b..cff28edaef5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/526/FirstPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/526/FirstPerTimeOutputRateManager.java\n@@ -37,9 +37,10 @@ public class FirstPerTimeOutputRateManager extends OutputRateManager {\n     }\n \n     @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n+    public synchronized void send(long timeStamp, StreamEvent currentEvent,\n+            StreamEvent expiredEvent, String groupByKey) {\n \n-        if (currentEvent != null) {\n+         if (currentEvent != null) {\n             if (currentEvent instanceof ListEvent) {\n                 for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n                     if (firstEvent == null) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}