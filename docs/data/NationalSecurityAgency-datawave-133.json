{
    "project_name": "NationalSecurityAgency-datawave",
    "error_id": "133",
    "information": {
        "errors": [
            {
                "line": "15",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import org.apache.accumulo.core.data.Key;\nimport org.apache.accumulo.core.data.Value;\nimport org.apache.accumulo.core.dataImpl.thrift.IterInfo;\nimport org.apache.accumulo.core.security.Authorizations;\nimport org.apache.hadoop.io.Text;\nimport org.slf4j.Logger;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "15",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "15",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/133/ScannerBaseDelegate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/133/ScannerBaseDelegate.java\nindex 3c579c6d311..bca7b289afe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/133/ScannerBaseDelegate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/133/ScannerBaseDelegate.java\n@@ -22,226 +22,223 @@ import com.google.common.collect.Lists;\n \n /**\n  * A simple wrapper around a {@link ScannerBase} that overrides the methods that configure iterators.\n- * \n+ *\n  * @see ScannerOptionsHelper\n  */\n public class ScannerBaseDelegate implements ScannerBase {\n-    private static final Logger log = LoggerFactory.getLogger(ScannerBaseDelegate.class);\n-    private static final String SYSTEM_ITERATOR_NAME_PREFIX = \"sys_\";\n-    \n-    protected final ScannerBase delegate;\n-    \n-    public ScannerBaseDelegate(ScannerBase delegate) {\n-        this.delegate = delegate;\n-    }\n-    \n-    @Override\n-    public void addScanIterator(IteratorSetting cfg) {\n-        if (cfg.getName().startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n-            throw new IllegalArgumentException(\"Non-system iterators' names cannot start with \" + SYSTEM_ITERATOR_NAME_PREFIX);\n-        } else {\n-            delegate.addScanIterator(cfg);\n-        }\n-    }\n-    \n-    /**\n-     * Adds a \"system\" scan iterator. The iterator name is automatically prefixed with {@link #SYSTEM_ITERATOR_NAME_PREFIX}. A \"system\" scan iterator can only\n-     * be modified or removed by calling {@link #updateSystemScanIteratorOption(String, String, String)}, {@link #removeSystemScanIterator(String)}, or\n-     * {@link #clearSystemScanIterators()}. Updates the iterator configuration for {@code iteratorName}. The iterator name is automatically prefixed with\n-     * {@link #SYSTEM_ITERATOR_NAME_PREFIX}.\n-     *\n-     * @param cfg\n-     *            the configuration of the iterator to add\n-     */\n-    public void addSystemScanIterator(IteratorSetting cfg) {\n-        if (!cfg.getName().startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n-            cfg.setName(SYSTEM_ITERATOR_NAME_PREFIX + cfg.getName());\n-        }\n-        delegate.addScanIterator(cfg);\n-    }\n-    \n-    @Override\n-    public void removeScanIterator(String iteratorName) {\n-        if (iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n-            throw new IllegalArgumentException(\"DATAWAVE system iterator \" + iteratorName + \" cannot be removed\");\n-        } else {\n-            delegate.removeScanIterator(iteratorName);\n-        }\n-    }\n-    \n-    /**\n-     * Removes a \"system\" scan iterator. The iterator name is automatically prefixed with {@link #SYSTEM_ITERATOR_NAME_PREFIX}.\n-     *\n-     * @param iteratorName\n-     *            the name of the system iterator to remove\n-     */\n-    public void removeSystemScanIterator(String iteratorName) {\n-        if (!iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n-            iteratorName = SYSTEM_ITERATOR_NAME_PREFIX + iteratorName;\n-        }\n-        delegate.removeScanIterator(iteratorName);\n-    }\n-    \n-    @Override\n-    public void updateScanIteratorOption(String iteratorName, String key, String value) {\n-        if (iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n-            throw new IllegalArgumentException(\"DATAWAVE system iterator \" + iteratorName + \" cannot be updated\");\n-        } else {\n-            delegate.updateScanIteratorOption(iteratorName, key, value);\n-        }\n-    }\n-    \n-    /**\n-     * Updates the iterator configuration for {@code iteratorName}. The iterator name is automatically prefixed with {@link #SYSTEM_ITERATOR_NAME_PREFIX}.\n-     *\n-     * @param iteratorName\n-     *            the name of the system iterator to modify\n-     * @param key\n-     *            the name of the iterator option to modify\n-     * @param value\n-     *            the new value for the iterator option named in {@code key}\n-     */\n-    public void updateSystemScanIteratorOption(String iteratorName, String key, String value) {\n-        if (!iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n-            iteratorName = SYSTEM_ITERATOR_NAME_PREFIX + iteratorName;\n-        }\n-        delegate.updateScanIteratorOption(iteratorName, key, value);\n-    }\n-    \n-    @Override\n-    public void fetchColumnFamily(Text col) {\n-        delegate.fetchColumnFamily(col);\n-    }\n-    \n-    @Override\n-    public void fetchColumn(Text colFam, Text colQual) {\n-        delegate.fetchColumn(colFam, colQual);\n-    }\n-    \n-    @Override\n-    public void fetchColumn(Column column) {\n-        delegate.fetchColumn(column);\n-    }\n-    \n-    @Override\n-    public void clearColumns() {\n-        delegate.clearColumns();\n-    }\n-    \n-    @Override\n-    public void clearScanIterators() {\n-        if (delegate instanceof ScannerOptions) {\n-            ScannerOptionsHelper opts = new ScannerOptionsHelper((ScannerOptions) delegate);\n-            for (IteratorSetting iteratorSetting : opts.getIterators()) {\n-                if (!iteratorSetting.getName().startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n-                    delegate.removeScanIterator(iteratorSetting.getName());\n-                }\n-            }\n-        } else {\n-            throw new UnsupportedOperationException(\"Cannot clear scan iterators on a non-ScannerOptions class! (\" + delegate.getClass() + \")\");\n+  private static final Logger log = LoggerFactory.getLogger(ScannerBaseDelegate.class);\n+  private static final String SYSTEM_ITERATOR_NAME_PREFIX = \"sys_\";\n+\n+  protected final ScannerBase delegate;\n+\n+  public ScannerBaseDelegate(ScannerBase delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public void addScanIterator(IteratorSetting cfg) {\n+    if (cfg.getName().startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n+      throw new IllegalArgumentException(\n+          \"Non-system iterators' names cannot start with \" + SYSTEM_ITERATOR_NAME_PREFIX);\n+    } else {\n+      delegate.addScanIterator(cfg);\n+    }\n+  }\n+\n+  /**\n+   * Adds a \"system\" scan iterator. The iterator name is automatically prefixed with {@link #SYSTEM_ITERATOR_NAME_PREFIX}. A \"system\" scan iterator can only\n+   * be modified or removed by calling {@link #updateSystemScanIteratorOption(String, String, String)}, {@link #removeSystemScanIterator(String)}, or\n+   * {@link #clearSystemScanIterators()}. Updates the iterator configuration for {@code iteratorName}. The iterator name is automatically prefixed with\n+   * {@link #SYSTEM_ITERATOR_NAME_PREFIX}.\n+   *\n+   * @param cfg the configuration of the iterator to add\n+   */\n+  public void addSystemScanIterator(IteratorSetting cfg) {\n+    if (!cfg.getName().startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n+      cfg.setName(SYSTEM_ITERATOR_NAME_PREFIX + cfg.getName());\n+    }\n+    delegate.addScanIterator(cfg);\n+  }\n+\n+  @Override\n+  public void removeScanIterator(String iteratorName) {\n+    if (iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n+      throw new IllegalArgumentException(\"DATAWAVE system iterator \" + iteratorName + \" cannot be removed\");\n+    } else {\n+      delegate.removeScanIterator(iteratorName);\n+    }\n+  }\n+\n+  /**\n+   * Removes a \"system\" scan iterator. The iterator name is automatically prefixed with {@link #SYSTEM_ITERATOR_NAME_PREFIX}.\n+   *\n+   * @param iteratorName the name of the system iterator to remove\n+   */\n+  public void removeSystemScanIterator(String iteratorName) {\n+    if (!iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n+      iteratorName = SYSTEM_ITERATOR_NAME_PREFIX + iteratorName;\n+    }\n+    delegate.removeScanIterator(iteratorName);\n+  }\n+\n+  @Override\n+  public void updateScanIteratorOption(String iteratorName, String key, String value) {\n+    if (iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n+      throw new IllegalArgumentException(\"DATAWAVE system iterator \" + iteratorName + \" cannot be updated\");\n+    } else {\n+      delegate.updateScanIteratorOption(iteratorName, key, value);\n+    }\n+  }\n+\n+  /**\n+   * Updates the iterator configuration for {@code iteratorName}. The iterator name is automatically prefixed with {@link #SYSTEM_ITERATOR_NAME_PREFIX}.\n+   *\n+   * @param iteratorName the name of the system iterator to modify\n+   * @param key          the name of the iterator option to modify\n+   * @param value        the new value for the iterator option named in {@code key}\n+   */\n+  public void updateSystemScanIteratorOption(String iteratorName, String key, String value) {\n+    if (!iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n+      iteratorName = SYSTEM_ITERATOR_NAME_PREFIX + iteratorName;\n+    }\n+    delegate.updateScanIteratorOption(iteratorName, key, value);\n+  }\n+\n+  @Override\n+  public void fetchColumnFamily(Text col) {\n+    delegate.fetchColumnFamily(col);\n+  }\n+\n+  @Override\n+  public void fetchColumn(Text colFam, Text colQual) {\n+    delegate.fetchColumn(colFam, colQual);\n+  }\n+\n+  @Override\n+  public void fetchColumn(Column column) {\n+    delegate.fetchColumn(column);\n+  }\n+\n+  @Override\n+  public void clearColumns() {\n+    delegate.clearColumns();\n+  }\n+\n+  @Override\n+  public void clearScanIterators() {\n+    if (delegate instanceof ScannerOptions) {\n+      ScannerOptionsHelper opts = new ScannerOptionsHelper((ScannerOptions) delegate);\n+      for (IteratorSetting iteratorSetting : opts.getIterators()) {\n+        if (!iteratorSetting.getName().startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n+          delegate.removeScanIterator(iteratorSetting.getName());\n         }\n+      }\n+    } else {\n+      throw new UnsupportedOperationException(\n+          \"Cannot clear scan iterators on a non-ScannerOptions class! (\" + delegate.getClass() + \")\");\n     }\n-    \n-    /**\n-     * Clears all iterators (including system iterators).\n-     */\n-    public void clearSystemScanIterators() {\n-        delegate.clearScanIterators();\n-    }\n-    \n-    @Override\n-    public Iterator<Map.Entry<Key,Value>> iterator() {\n-        return delegate.iterator();\n-    }\n-    \n-    @Override\n-    public void setTimeout(long timeOut, TimeUnit timeUnit) {\n-        delegate.setTimeout(timeOut, timeUnit);\n-    }\n-    \n-    @Override\n-    public long getTimeout(TimeUnit timeUnit) {\n-        return delegate.getTimeout(timeUnit);\n-    }\n-    \n-    @Override\n-    public void close() {\n-        delegate.close();\n-    }\n-    \n-    @Override\n-    public Authorizations getAuthorizations() {\n-        return delegate.getAuthorizations();\n-    }\n-    \n-    @Override\n-    public void setSamplerConfiguration(SamplerConfiguration samplerConfiguration) {\n-        delegate.setSamplerConfiguration(samplerConfiguration);\n-    }\n-    \n-    @Override\n-    public SamplerConfiguration getSamplerConfiguration() {\n-        return delegate.getSamplerConfiguration();\n-    }\n-    \n-    @Override\n-    public void clearSamplerConfiguration() {\n-        delegate.clearSamplerConfiguration();\n-    }\n-    \n-    @Override\n-    public void setBatchTimeout(long l, TimeUnit timeUnit) {\n-        delegate.setBatchTimeout(l, timeUnit);\n-    }\n-    \n-    @Override\n-    public long getBatchTimeout(TimeUnit timeUnit) {\n-        return delegate.getBatchTimeout(timeUnit);\n-    }\n-    \n-    @Override\n-    public void setClassLoaderContext(String s) {\n-        delegate.setClassLoaderContext(s);\n-    }\n-    \n-    @Override\n-    public void clearClassLoaderContext() {\n-        delegate.clearClassLoaderContext();\n-    }\n-    \n-    @Override\n-    public String getClassLoaderContext() {\n-        return delegate.getClassLoaderContext();\n-    }\n-    \n-    public void setContext(String context) {\n-        delegate.setClassLoaderContext(context);\n-    }\n-    \n-    public void clearContext() {\n-        delegate.clearClassLoaderContext();\n-    }\n-    \n-    public String getContext() {\n-        return delegate.getClassLoaderContext();\n+  }\n+\n+  /**\n+   * Clears all iterators (including system iterators).\n+   */\n+  public void clearSystemScanIterators() {\n+    delegate.clearScanIterators();\n+  }\n+\n+  @Override\n+  public Iterator<Map.Entry<Key, Value>> iterator() {\n+    return delegate.iterator();\n+  }\n+\n+  @Override\n+  public void setTimeout(long timeOut, TimeUnit timeUnit) {\n+    delegate.setTimeout(timeOut, timeUnit);\n+  }\n+\n+  @Override\n+  public long getTimeout(TimeUnit timeUnit) {\n+    return delegate.getTimeout(timeUnit);\n+  }\n+\n+  @Override\n+  public void close() {\n+    delegate.close();\n+  }\n+\n+  @Override\n+  public Authorizations getAuthorizations() {\n+    return delegate.getAuthorizations();\n+  }\n+\n+  @Override\n+  public void setSamplerConfiguration(SamplerConfiguration samplerConfiguration) {\n+    delegate.setSamplerConfiguration(samplerConfiguration);\n+  }\n+\n+  @Override\n+  public SamplerConfiguration getSamplerConfiguration() {\n+    return delegate.getSamplerConfiguration();\n+  }\n+\n+  @Override\n+  public void clearSamplerConfiguration() {\n+    delegate.clearSamplerConfiguration();\n+  }\n+\n+  @Override\n+  public void setBatchTimeout(long l, TimeUnit timeUnit) {\n+    delegate.setBatchTimeout(l, timeUnit);\n+  }\n+\n+  @Override\n+  public long getBatchTimeout(TimeUnit timeUnit) {\n+    return delegate.getBatchTimeout(timeUnit);\n+  }\n+\n+  @Override\n+  public void setClassLoaderContext(String s) {\n+    delegate.setClassLoaderContext(s);\n+  }\n+\n+  @Override\n+  public void clearClassLoaderContext() {\n+    delegate.clearClassLoaderContext();\n+  }\n+\n+  @Override\n+  public String getClassLoaderContext() {\n+    return delegate.getClassLoaderContext();\n+  }\n+\n+  public void setContext(String context) {\n+    delegate.setClassLoaderContext(context);\n+  }\n+\n+  public void clearContext() {\n+    delegate.clearClassLoaderContext();\n+  }\n+\n+  public String getContext() {\n+    return delegate.getClassLoaderContext();\n+  }\n+\n+  private static class ScannerOptionsHelper extends ScannerOptions {\n+\n+    public ScannerOptionsHelper(ScannerOptions other) {\n+      super(other);\n     }\n-    \n-    private static class ScannerOptionsHelper extends ScannerOptions {\n-        \n-        public ScannerOptionsHelper(ScannerOptions other) {\n-            super(other);\n-        }\n-        \n-        public Collection<IteratorSetting> getIterators() {\n-            Collection<IteratorSetting> settings = Lists.newArrayList();\n-            for (IterInfo iter : serverSideIteratorList) {\n-                IteratorSetting setting = new IteratorSetting(iter.getPriority(), iter.getIterName(), iter.getClassName());\n-                setting.addOptions(serverSideIteratorOptions.get(iter.getIterName()));\n-                settings.add(setting);\n-            }\n-            return settings;\n-        }\n-        \n+\n+    public Collection<IteratorSetting> getIterators() {\n+      Collection<IteratorSetting> settings = Lists.newArrayList();\n+      for (IterInfo iter : serverSideIteratorList) {\n+        IteratorSetting setting = new IteratorSetting(iter.getPriority(), iter.getIterName(), iter.getClassName());\n+        setting.addOptions(serverSideIteratorOptions.get(iter.getIterName()));\n+        settings.add(setting);\n+      }\n+      return settings;\n     }\n-    \n+\n+  }\n+\n }\n",
            "diff_size": 228
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "15",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/133/ScannerBaseDelegate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/133/ScannerBaseDelegate.java\nindex 3c579c6d311..da86fc1378b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/133/ScannerBaseDelegate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/133/ScannerBaseDelegate.java\n@@ -244,4 +244,4 @@ public class ScannerBaseDelegate implements ScannerBase {\n         \n     }\n     \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/133/ScannerBaseDelegate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/133/ScannerBaseDelegate.java\nindex 3c579c6d311..99ea900a096 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/133/ScannerBaseDelegate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/133/ScannerBaseDelegate.java\n@@ -4,7 +4,6 @@ import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n-\n import org.apache.accumulo.core.client.IteratorSetting;\n import org.apache.accumulo.core.client.IteratorSetting.Column;\n import org.apache.accumulo.core.client.ScannerBase;\n@@ -17,7 +16,6 @@ import org.apache.accumulo.core.security.Authorizations;\n import org.apache.hadoop.io.Text;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.google.common.collect.Lists;\n \n /**\n@@ -25,16 +23,17 @@ import com.google.common.collect.Lists;\n  * \n  * @see ScannerOptionsHelper\n  */\n+\n+\n public class ScannerBaseDelegate implements ScannerBase {\n     private static final Logger log = LoggerFactory.getLogger(ScannerBaseDelegate.class);\n     private static final String SYSTEM_ITERATOR_NAME_PREFIX = \"sys_\";\n-    \n     protected final ScannerBase delegate;\n-    \n+\n     public ScannerBaseDelegate(ScannerBase delegate) {\n         this.delegate = delegate;\n     }\n-    \n+\n     @Override\n     public void addScanIterator(IteratorSetting cfg) {\n         if (cfg.getName().startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n@@ -53,13 +52,14 @@ public class ScannerBaseDelegate implements ScannerBase {\n      * @param cfg\n      *            the configuration of the iterator to add\n      */\n+\n     public void addSystemScanIterator(IteratorSetting cfg) {\n         if (!cfg.getName().startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n             cfg.setName(SYSTEM_ITERATOR_NAME_PREFIX + cfg.getName());\n         }\n         delegate.addScanIterator(cfg);\n     }\n-    \n+\n     @Override\n     public void removeScanIterator(String iteratorName) {\n         if (iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n@@ -75,13 +75,14 @@ public class ScannerBaseDelegate implements ScannerBase {\n      * @param iteratorName\n      *            the name of the system iterator to remove\n      */\n+\n     public void removeSystemScanIterator(String iteratorName) {\n         if (!iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n             iteratorName = SYSTEM_ITERATOR_NAME_PREFIX + iteratorName;\n         }\n         delegate.removeScanIterator(iteratorName);\n     }\n-    \n+\n     @Override\n     public void updateScanIteratorOption(String iteratorName, String key, String value) {\n         if (iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n@@ -101,33 +102,34 @@ public class ScannerBaseDelegate implements ScannerBase {\n      * @param value\n      *            the new value for the iterator option named in {@code key}\n      */\n+\n     public void updateSystemScanIteratorOption(String iteratorName, String key, String value) {\n         if (!iteratorName.startsWith(SYSTEM_ITERATOR_NAME_PREFIX)) {\n             iteratorName = SYSTEM_ITERATOR_NAME_PREFIX + iteratorName;\n         }\n         delegate.updateScanIteratorOption(iteratorName, key, value);\n     }\n-    \n+\n     @Override\n     public void fetchColumnFamily(Text col) {\n         delegate.fetchColumnFamily(col);\n     }\n-    \n+\n     @Override\n     public void fetchColumn(Text colFam, Text colQual) {\n         delegate.fetchColumn(colFam, colQual);\n     }\n-    \n+\n     @Override\n     public void fetchColumn(Column column) {\n         delegate.fetchColumn(column);\n     }\n-    \n+\n     @Override\n     public void clearColumns() {\n         delegate.clearColumns();\n     }\n-    \n+\n     @Override\n     public void clearScanIterators() {\n         if (delegate instanceof ScannerOptions) {\n@@ -145,93 +147,93 @@ public class ScannerBaseDelegate implements ScannerBase {\n     /**\n      * Clears all iterators (including system iterators).\n      */\n+\n     public void clearSystemScanIterators() {\n         delegate.clearScanIterators();\n     }\n-    \n+\n     @Override\n     public Iterator<Map.Entry<Key,Value>> iterator() {\n         return delegate.iterator();\n     }\n-    \n+\n     @Override\n     public void setTimeout(long timeOut, TimeUnit timeUnit) {\n         delegate.setTimeout(timeOut, timeUnit);\n     }\n-    \n+\n     @Override\n     public long getTimeout(TimeUnit timeUnit) {\n         return delegate.getTimeout(timeUnit);\n     }\n-    \n+\n     @Override\n     public void close() {\n         delegate.close();\n     }\n-    \n+\n     @Override\n     public Authorizations getAuthorizations() {\n         return delegate.getAuthorizations();\n     }\n-    \n+\n     @Override\n     public void setSamplerConfiguration(SamplerConfiguration samplerConfiguration) {\n         delegate.setSamplerConfiguration(samplerConfiguration);\n     }\n-    \n+\n     @Override\n     public SamplerConfiguration getSamplerConfiguration() {\n         return delegate.getSamplerConfiguration();\n     }\n-    \n+\n     @Override\n     public void clearSamplerConfiguration() {\n         delegate.clearSamplerConfiguration();\n     }\n-    \n+\n     @Override\n     public void setBatchTimeout(long l, TimeUnit timeUnit) {\n         delegate.setBatchTimeout(l, timeUnit);\n     }\n-    \n+\n     @Override\n     public long getBatchTimeout(TimeUnit timeUnit) {\n         return delegate.getBatchTimeout(timeUnit);\n     }\n-    \n+\n     @Override\n     public void setClassLoaderContext(String s) {\n         delegate.setClassLoaderContext(s);\n     }\n-    \n+\n     @Override\n     public void clearClassLoaderContext() {\n         delegate.clearClassLoaderContext();\n     }\n-    \n+\n     @Override\n     public String getClassLoaderContext() {\n         return delegate.getClassLoaderContext();\n     }\n-    \n+\n     public void setContext(String context) {\n         delegate.setClassLoaderContext(context);\n     }\n-    \n+\n     public void clearContext() {\n         delegate.clearClassLoaderContext();\n     }\n-    \n+\n     public String getContext() {\n         return delegate.getClassLoaderContext();\n     }\n-    \n+\n     private static class ScannerOptionsHelper extends ScannerOptions {\n-        \n         public ScannerOptionsHelper(ScannerOptions other) {\n             super(other);\n         }\n-        \n+\n         public Collection<IteratorSetting> getIterators() {\n             Collection<IteratorSetting> settings = Lists.newArrayList();\n             for (IterInfo iter : serverSideIteratorList) {\n@@ -241,7 +243,5 @@ public class ScannerBaseDelegate implements ScannerBase {\n             }\n             return settings;\n         }\n-        \n     }\n-    \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "15",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "15",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}