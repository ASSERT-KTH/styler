{
    "project_name": "Angel-ML-angel",
    "error_id": "796",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/796/ServerLongAnyRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/796/ServerLongAnyRow.java\nindex fe217b8c8f2..120e76463e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/796/ServerLongAnyRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/796/ServerLongAnyRow.java\n@@ -29,32 +29,32 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n   /**\n    * Create a new ServerLongAnyRow\n    *\n-   * @param valueType element value type class\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param valueType  element value type class\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n-   * @param storage vector storage\n+   * @param storage    vector storage\n    */\n   public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum,\n-      LongElementStorage storage) {\n+                          long startCol, long endCol, long estElemNum,\n+                          LongElementStorage storage) {\n     super(valueType, rowId, rowType, startCol, endCol, estElemNum, storage);\n   }\n \n   /**\n    * Create a new ServerLongAnyRow\n    *\n-   * @param valueType element value type class\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param valueType  element value type class\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum) {\n+                          long startCol, long endCol, long estElemNum) {\n     this(valueType, rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/796/ServerLongAnyRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/796/ServerLongAnyRow.java\nindex fe217b8c8f2..f426d1958de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/796/ServerLongAnyRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/796/ServerLongAnyRow.java\n@@ -38,7 +38,7 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n    * @param storage vector storage\n    */\n   public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum,\n+long startCol, long endCol, long estElemNum,\n       LongElementStorage storage) {\n     super(valueType, rowId, rowType, startCol, endCol, estElemNum, storage);\n   }\n@@ -54,8 +54,8 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n    * @param estElemNum the estimate element number\n    */\n   public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum) {\n-    this(valueType, rowId, rowType, startCol, endCol, estElemNum, null);\n+long startCol, long endCol, long estElemNum) {\n+  this(valueType, rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n   /**\n@@ -82,13 +82,13 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n   @Override\n   public ServerRow adaptiveClone() {\n     return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n-        (LongElementStorage) getStorage().adaptiveClone());\n+(LongElementStorage) getStorage().adaptiveClone());\n   }\n \n   @Override\n   public ServerRow deepClone() {\n     return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n-        (LongElementStorage) getStorage().deepClone());\n+(LongElementStorage) getStorage().deepClone());\n   }\n \n   @Override\n@@ -115,4 +115,4 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n   public boolean exist(long index) {\n     return getStorage().exist(index);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/796/ServerLongAnyRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/796/ServerLongAnyRow.java\nindex fe217b8c8f2..e84745702c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/796/ServerLongAnyRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/796/ServerLongAnyRow.java\n@@ -37,9 +37,12 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n    * @param estElemNum the estimate element number\n    * @param storage vector storage\n    */\n-  public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum,\n-      LongElementStorage storage) {\n+\n+  public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId,\n+                          RowType rowType,\n+                          long startCol,\n+                          long endCol,\n+                          long estElemNum, LongElementStorage storage) {\n     super(valueType, rowId, rowType, startCol, endCol, estElemNum, storage);\n   }\n \n@@ -53,14 +56,15 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum) {\n+\n+  public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType, long startCol, long endCol, long estElemNum) {\n     this(valueType, rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n   /**\n    * Create a new empty ServerLongAnyRow\n    */\n+\n   public ServerLongAnyRow(RowType rowType) {\n     this(null, 0, rowType, 0, 0, 0, null);\n   }\n@@ -81,14 +85,12 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n \n   @Override\n   public ServerRow adaptiveClone() {\n-    return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n-        (LongElementStorage) getStorage().adaptiveClone());\n+    return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum, (LongElementStorage) getStorage().adaptiveClone());\n   }\n \n   @Override\n   public ServerRow deepClone() {\n-    return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n-        (LongElementStorage) getStorage().deepClone());\n+    return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum, (LongElementStorage) getStorage().deepClone());\n   }\n \n   @Override\n@@ -115,4 +117,4 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n   public boolean exist(long index) {\n     return getStorage().exist(index);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}