{
    "project_name": "apache-iotdb",
    "error_id": "394",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * under the License.\n */\npackage org.apache.iotdb.db.writelog.node;\n\nimport org.apache.iotdb.db.conf.IoTDBConfig;\nimport org.apache.iotdb.db.conf.IoTDBDescriptor;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/394/ExclusiveWriteLogNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/394/ExclusiveWriteLogNode.java\nindex c94796367f7..3f538ac8683 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/394/ExclusiveWriteLogNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/394/ExclusiveWriteLogNode.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.writelog.node;\n \n import org.apache.iotdb.db.conf.IoTDBConfig;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/394/ExclusiveWriteLogNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/394/ExclusiveWriteLogNode.java\nindex c94796367f7..e5621f811ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/394/ExclusiveWriteLogNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/394/ExclusiveWriteLogNode.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.writelog.node;\n \n import org.apache.iotdb.db.conf.IoTDBConfig;\n@@ -45,7 +46,9 @@ import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.locks.ReentrantLock;\n \n-/** This WriteLogNode is used to manage insert ahead logs of a TsFile. */\n+/**\n+ * This WriteLogNode is used to manage insert ahead logs of a TsFile.\n+ */\n public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<ExclusiveWriteLogNode> {\n \n   public static final String WAL_FILE_NAME = \"wal\";\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "176",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/394/ExclusiveWriteLogNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/394/ExclusiveWriteLogNode.java\nindex c94796367f7..b3a25cd5c4e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/394/ExclusiveWriteLogNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/394/ExclusiveWriteLogNode.java\n@@ -27,12 +27,10 @@ import org.apache.iotdb.db.writelog.io.ILogReader;\n import org.apache.iotdb.db.writelog.io.ILogWriter;\n import org.apache.iotdb.db.writelog.io.LogWriter;\n import org.apache.iotdb.db.writelog.io.MultiFileLogReader;\n-\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n@@ -46,37 +44,27 @@ import java.util.concurrent.Executors;\n import java.util.concurrent.locks.ReentrantLock;\n \n /** This WriteLogNode is used to manage insert ahead logs of a TsFile. */\n+\n public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<ExclusiveWriteLogNode> {\n \n   public static final String WAL_FILE_NAME = \"wal\";\n   private static final Logger logger = LoggerFactory.getLogger(ExclusiveWriteLogNode.class);\n-\n   private String identifier;\n-\n   private String logDirectory;\n-\n   private ILogWriter currentFileWriter;\n-\n   private IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n-\n   private ByteBuffer logBufferWorking;\n   private ByteBuffer logBufferIdle;\n   private ByteBuffer logBufferFlushing;\n \n   // used for the convenience of deletion\n   private ByteBuffer[] bufferArray;\n-\n   private final Object switchBufferCondition = new Object();\n   private ReentrantLock lock = new ReentrantLock();\n-  private static final ExecutorService FLUSH_BUFFER_THREAD_POOL =\n-      Executors.newCachedThreadPool(\n-          new ThreadFactoryBuilder().setNameFormat(\"Flush-WAL-Thread-%d\").setDaemon(true).build());\n-\n+  private static final ExecutorService FLUSH_BUFFER_THREAD_POOL = Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(\"Flush-WAL-Thread-%d\").setDaemon(true).build());\n   private long fileId = 0;\n   private long lastFlushedId = 0;\n-\n   private int bufferedLogNum = 0;\n-\n   private boolean deleted;\n \n   /**\n@@ -84,10 +72,11 @@ public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<Exclusive\n    *\n    * @param identifier ExclusiveWriteLogNode identifier\n    */\n+\n   public ExclusiveWriteLogNode(String identifier) {\n     this.identifier = identifier;\n-    this.logDirectory =\n-        DirectoryManager.getInstance().getWALFolder() + File.separator + this.identifier;\n+    this.logDirectory = DirectoryManager.getInstance().getWALFolder()\n+      + File.separator + this.identifier;\n     if (SystemFileFactory.INSTANCE.getFile(logDirectory).mkdirs()) {\n       logger.info(\"create the WAL folder {}.\", logDirectory);\n     }\n@@ -112,7 +101,8 @@ public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<Exclusive\n         sync();\n       }\n     } catch (BufferOverflowException e) {\n-      throw new IOException(\"Log cannot fit into the buffer, please increase wal_buffer_size\", e);\n+      throw new IOException(\n+          \"Log cannot fit into the buffer, please increase wal_buffer_size\", e);\n     } finally {\n       lock.unlock();\n     }\n@@ -143,7 +133,6 @@ public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<Exclusive\n         }\n         switchBufferCondition.notifyAll();\n       }\n-\n       if (this.currentFileWriter != null) {\n         this.currentFileWriter.close();\n         logger.debug(\"WAL file {} is closed\", currentFileWriter);\n@@ -184,8 +173,7 @@ public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<Exclusive\n   public void notifyEndFlush() {\n     lock.lock();\n     try {\n-      File logFile =\n-          SystemFileFactory.INSTANCE.getFile(logDirectory, WAL_FILE_NAME + ++lastFlushedId);\n+      File logFile = SystemFileFactory.INSTANCE.getFile(logDirectory, WAL_FILE_NAME + ++lastFlushedId);\n       discard(logFile);\n     } finally {\n       lock.unlock();\n@@ -219,8 +207,8 @@ public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<Exclusive\n   public ILogReader getLogReader() {\n     File[] logFiles = SystemFileFactory.INSTANCE.getFile(logDirectory).listFiles();\n     Arrays.sort(\n-        logFiles,\n-        Comparator.comparingInt(f -> Integer.parseInt(f.getName().replace(WAL_FILE_NAME, \"\"))));\n+         logFiles,\n+         Comparator.comparingInt(f -> Integer.parseInt(f.getName().replace(WAL_FILE_NAME, \"\"))));\n     return new MultiFileLogReader(logFiles);\n   }\n \n@@ -262,7 +250,6 @@ public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<Exclusive\n       ILogWriter currWriter = getCurrentFileWriter();\n       FLUSH_BUFFER_THREAD_POOL.submit(() -> flushBuffer(currWriter));\n       switchBufferIdleToWorking();\n-\n       bufferedLogNum = 0;\n       logger.debug(\"Log node {} ends sync.\", identifier);\n     } catch (InterruptedException e) {\n@@ -280,13 +267,13 @@ public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<Exclusive\n       writer.write(logBufferFlushing);\n     } catch (ClosedChannelException e) {\n       // ignore\n+\n     } catch (IOException e) {\n       logger.error(\"Log node {} sync failed, change system mode to read-only\", identifier, e);\n       IoTDBDescriptor.getInstance().getConfig().setReadOnly(true);\n       return;\n     }\n     logBufferFlushing.clear();\n-\n     try {\n       switchBufferFlushingToIdle();\n     } catch (InterruptedException e) {\n@@ -361,7 +348,6 @@ public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<Exclusive\n     if (getClass() != obj.getClass()) {\n       return false;\n     }\n-\n     return compareTo((ExclusiveWriteLogNode) obj) == 0;\n   }\n \n@@ -374,4 +360,4 @@ public class ExclusiveWriteLogNode implements WriteLogNode, Comparable<Exclusive\n   public int compareTo(ExclusiveWriteLogNode o) {\n     return this.identifier.compareTo(o.identifier);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/394/ExclusiveWriteLogNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/394/ExclusiveWriteLogNode.java\nindex c94796367f7..3f538ac8683 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/394/ExclusiveWriteLogNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/394/ExclusiveWriteLogNode.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.writelog.node;\n \n import org.apache.iotdb.db.conf.IoTDBConfig;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/394/ExclusiveWriteLogNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/394/ExclusiveWriteLogNode.java\nindex c94796367f7..3f538ac8683 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/394/ExclusiveWriteLogNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/394/ExclusiveWriteLogNode.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.writelog.node;\n \n import org.apache.iotdb.db.conf.IoTDBConfig;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}