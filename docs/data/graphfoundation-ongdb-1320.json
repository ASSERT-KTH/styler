{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1320",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "78",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "215",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "216",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "358",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "363",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "372",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "376",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "385",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "413",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "418",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "428",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "432",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "436",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "445",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "455",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "482",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1320/DataFactories.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1320/DataFactories.java\nindex 333263ac0e9..20579f54b99 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1320/DataFactories.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1320/DataFactories.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.input.csv;\n \n import java.io.File;\n@@ -61,442 +62,429 @@ import static org.neo4j.csv.reader.Readables.iterator;\n  */\n public class DataFactories\n {\n-    private DataFactories()\n+  private DataFactories()\n+  {\n+  }\n+\n+  /**\n+   * Creates a {@link DataFactory} where data exists in multiple files. If the first line of the first file is a header,\n+   * {@link #defaultFormatNodeFileHeader()} can be used to extract that.\n+   *\n+   * @param decorator Decorator for this data.\n+   * @param charset   {@link Charset} to read data in.\n+   * @param files     the files making up the data.\n+   * @return {@link DataFactory} that returns a {@link CharSeeker} over all the supplied {@code files}.\n+   */\n+  public static DataFactory data(final Decorator decorator,\n+                                 final Charset charset, final File... files)\n+  {\n+    if (files.length == 0)\n     {\n+      throw new IllegalArgumentException(\"No files specified\");\n     }\n \n-    /**\n-     * Creates a {@link DataFactory} where data exists in multiple files. If the first line of the first file is a header,\n-     * {@link #defaultFormatNodeFileHeader()} can be used to extract that.\n-     *\n-     * @param decorator Decorator for this data.\n-     * @param charset {@link Charset} to read data in.\n-     * @param files the files making up the data.\n-     *\n-     * @return {@link DataFactory} that returns a {@link CharSeeker} over all the supplied {@code files}.\n-     */\n-    public static DataFactory data( final Decorator decorator,\n-            final Charset charset, final File... files )\n+    return config -> new Data()\n     {\n-        if ( files.length == 0 )\n-        {\n-            throw new IllegalArgumentException( \"No files specified\" );\n-        }\n+      @Override\n+      public RawIterator<CharReadable, IOException> stream()\n+      {\n+        return individualFiles(charset, files);\n+      }\n+\n+      @Override\n+      public Decorator decorator()\n+      {\n+        return decorator;\n+      }\n+    };\n+  }\n+\n+  /**\n+   * @param decorator Decorator for this data.\n+   * @param readable  we need to have this as a {@link Factory} since one data file may be opened and scanned\n+   *                  multiple times.\n+   * @return {@link DataFactory} that returns a {@link CharSeeker} over the supplied {@code readable}\n+   */\n+  public static DataFactory data(final Decorator decorator,\n+                                 final Supplier<CharReadable> readable)\n+  {\n+    return config -> new Data()\n+    {\n+      @Override\n+      public RawIterator<CharReadable, IOException> stream()\n+      {\n+        return iterator(reader -> reader, readable.get());\n+      }\n+\n+      @Override\n+      public Decorator decorator()\n+      {\n+        return decorator;\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Header parser that will read header information, using the default node header format,\n+   * from the top of the data file.\n+   * <p>\n+   * This header factory can be used even when the header exists in a separate file, if that file\n+   * is the first in the list of files supplied to {@link #data}.\n+   *\n+   * @param defaultTimeZone A supplier of the time zone to be used for temporal values when not specified explicitly\n+   */\n+  public static Header.Factory defaultFormatNodeFileHeader(Supplier<ZoneId> defaultTimeZone)\n+  {\n+    return new DefaultNodeFileHeaderParser(defaultTimeZone);\n+  }\n+\n+  /**\n+   * Like {@link #defaultFormatNodeFileHeader(Supplier<ZoneId>)} with UTC as the default time zone.\n+   */\n+  public static Header.Factory defaultFormatNodeFileHeader()\n+  {\n+    return defaultFormatNodeFileHeader(defaultTimeZone);\n+  }\n+\n+  /**\n+   * Header parser that will read header information, using the default relationship header format,\n+   * from the top of the data file.\n+   * <p>\n+   * This header factory can be used even when the header exists in a separate file, if that file\n+   * is the first in the list of files supplied to {@link #data}.\n+   *\n+   * @param defaultTimeZone A supplier of the time zone to be used for temporal values when not specified explicitly\n+   */\n+  public static Header.Factory defaultFormatRelationshipFileHeader(Supplier<ZoneId> defaultTimeZone)\n+  {\n+    return new DefaultRelationshipFileHeaderParser(defaultTimeZone);\n+  }\n+\n+  /**\n+   * Like {@link #defaultFormatRelationshipFileHeader(Supplier<ZoneId>)} with UTC as the default time zone.\n+   */\n+  public static Header.Factory defaultFormatRelationshipFileHeader()\n+  {\n+    return defaultFormatRelationshipFileHeader(defaultTimeZone);\n+  }\n+\n+  private static Supplier<ZoneId> defaultTimeZone = () -> UTC;\n+\n+  private abstract static class AbstractDefaultFileHeaderParser implements Header.Factory\n+  {\n+    private final boolean createGroups;\n+    private final Type[] mandatoryTypes;\n+    private final Supplier<ZoneId> defaultTimeZone;\n+\n+    protected AbstractDefaultFileHeaderParser(Supplier<ZoneId> defaultTimeZone, boolean createGroups, Type... mandatoryTypes)\n+    {\n+      this.defaultTimeZone = defaultTimeZone;\n+      this.createGroups = createGroups;\n+      this.mandatoryTypes = mandatoryTypes;\n+    }\n \n-        return config -> new Data()\n+    @Override\n+    public Header create(CharSeeker dataSeeker, Configuration config, IdType idType, Groups groups)\n+    {\n+      try\n+      {\n+        Mark mark = new Mark();\n+        Extractors extractors = new Extractors(config.arrayDelimiter(), config.emptyQuotedStringsAsNull(),\n+            config.trimStrings(), defaultTimeZone);\n+        Extractor<?> idExtractor = idType.extractor(extractors);\n+        int delimiter = config.delimiter();\n+        List<Header.Entry> columns = new ArrayList<>();\n+        for (int i = 0; !mark.isEndOfLine() && dataSeeker.seek(mark, delimiter); i++)\n         {\n-            @Override\n-            public RawIterator<CharReadable,IOException> stream()\n-            {\n-                return individualFiles( charset, files );\n-            }\n-\n-            @Override\n-            public Decorator decorator()\n-            {\n-                return decorator;\n-            }\n-        };\n+          String entryString = dataSeeker.tryExtract(mark, extractors.string())\n+              ? extractors.string().value() : null;\n+          HeaderEntrySpec spec = new HeaderEntrySpec(entryString);\n+\n+          if ((spec.name == null && spec.type == null) ||\n+              (spec.type != null && spec.type.equals(Type.IGNORE.name())))\n+          {\n+            columns.add(new Header.Entry(null, Type.IGNORE, Group.GLOBAL, null, null));\n+          } else\n+          {\n+            Group group = createGroups ? groups.getOrCreate(spec.groupName) : groups.get(spec.groupName);\n+            columns.add(entry(i, spec.name, spec.type, group, extractors, idExtractor));\n+          }\n+        }\n+        Entry[] entries = columns.toArray(new Header.Entry[columns.size()]);\n+        validateHeader(entries);\n+        return new Header(entries);\n+      } catch (IOException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n     }\n \n-    /**\n-     * @param decorator Decorator for this data.\n-     * @param readable we need to have this as a {@link Factory} since one data file may be opened and scanned\n-     * multiple times.\n-     * @return {@link DataFactory} that returns a {@link CharSeeker} over the supplied {@code readable}\n-     */\n-    public static DataFactory data( final Decorator decorator,\n-            final Supplier<CharReadable> readable )\n+    private void validateHeader(Entry[] entries)\n     {\n-        return config -> new Data()\n+      Map<String, Entry> properties = new HashMap<>();\n+      EnumMap<Type, Entry> singletonEntries = new EnumMap<>(Type.class);\n+      for (Entry entry : entries)\n+      {\n+        switch (entry.type())\n         {\n-            @Override\n-            public RawIterator<CharReadable,IOException> stream()\n+          case PROPERTY:\n+            Entry existingPropertyEntry = properties.get(entry.name());\n+            if (existingPropertyEntry != null)\n             {\n-                return iterator( reader -> reader, readable.get() );\n+              throw new DuplicateHeaderException(existingPropertyEntry, entry);\n             }\n-\n-            @Override\n-            public Decorator decorator()\n+            properties.put(entry.name(), entry);\n+            break;\n+\n+          case ID:\n+          case START_ID:\n+          case END_ID:\n+          case TYPE:\n+            Entry existingSingletonEntry = singletonEntries.get(entry.type());\n+            if (existingSingletonEntry != null)\n             {\n-                return decorator;\n+              throw new DuplicateHeaderException(existingSingletonEntry, entry);\n             }\n-        };\n-    }\n+            singletonEntries.put(entry.type(), entry);\n+            break;\n+          default:\n+            // No need to validate other headers\n+            break;\n+        }\n+      }\n \n-    /**\n-     * Header parser that will read header information, using the default node header format,\n-     * from the top of the data file.\n-     *\n-     * This header factory can be used even when the header exists in a separate file, if that file\n-     * is the first in the list of files supplied to {@link #data}.\n-     *\n-     * @param defaultTimeZone A supplier of the time zone to be used for temporal values when not specified explicitly\n-     */\n-    public static Header.Factory defaultFormatNodeFileHeader( Supplier<ZoneId> defaultTimeZone )\n-    {\n-        return new DefaultNodeFileHeaderParser( defaultTimeZone );\n+      for (Type type : mandatoryTypes)\n+      {\n+        if (!singletonEntries.containsKey(type))\n+        {\n+          throw new MissingHeaderException(type, entries);\n+        }\n+      }\n     }\n \n-    /**\n-     * Like {@link #defaultFormatNodeFileHeader(Supplier<ZoneId>)} with UTC as the default time zone.\n-     */\n-    public static Header.Factory defaultFormatNodeFileHeader()\n+    protected boolean isRecognizedType(String typeSpec)\n     {\n-        return defaultFormatNodeFileHeader( defaultTimeZone );\n+      for (Type type : Type.values())\n+      {\n+        if (type.name().equalsIgnoreCase(typeSpec))\n+        {\n+          return true;\n+        }\n+      }\n+      return false;\n     }\n \n-    /**\n-     * Header parser that will read header information, using the default relationship header format,\n-     * from the top of the data file.\n-     *\n-     * This header factory can be used even when the header exists in a separate file, if that file\n-     * is the first in the list of files supplied to {@link #data}.\n-     *\n-     * @param defaultTimeZone A supplier of the time zone to be used for temporal values when not specified explicitly\n-     */\n-    public static Header.Factory defaultFormatRelationshipFileHeader( Supplier<ZoneId> defaultTimeZone )\n+    @Override\n+    public boolean isDefined()\n     {\n-        return new DefaultRelationshipFileHeaderParser( defaultTimeZone );\n+      return false;\n     }\n \n     /**\n-     * Like {@link #defaultFormatRelationshipFileHeader(Supplier<ZoneId>)} with UTC as the default time zone.\n+     * @param idExtractor we supply the id extractor explicitly because it's a configuration,\n+     *                    or at least input-global concern and not a concern of this particular header.\n      */\n-    public static Header.Factory defaultFormatRelationshipFileHeader()\n-    {\n-        return defaultFormatRelationshipFileHeader( defaultTimeZone );\n-    }\n+    protected abstract Header.Entry entry(int index, String name, String typeSpec, Group group,\n+                                          Extractors extractors, Extractor<?> idExtractor);\n+  }\n \n-    private static Supplier<ZoneId> defaultTimeZone = () -> UTC;\n+  private static class HeaderEntrySpec\n+  {\n+    private final String name;\n+    private final String type;\n+    private final String groupName;\n \n-    private abstract static class AbstractDefaultFileHeaderParser implements Header.Factory\n+    HeaderEntrySpec(String rawHeaderField)\n     {\n-        private final boolean createGroups;\n-        private final Type[] mandatoryTypes;\n-        private final Supplier<ZoneId> defaultTimeZone;\n-\n-        protected AbstractDefaultFileHeaderParser( Supplier<ZoneId> defaultTimeZone, boolean createGroups, Type... mandatoryTypes )\n-        {\n-            this.defaultTimeZone = defaultTimeZone;\n-            this.createGroups = createGroups;\n-            this.mandatoryTypes = mandatoryTypes;\n-        }\n-\n-        @Override\n-        public Header create( CharSeeker dataSeeker, Configuration config, IdType idType, Groups groups )\n-        {\n-            try\n-            {\n-                Mark mark = new Mark();\n-                Extractors extractors = new Extractors( config.arrayDelimiter(), config.emptyQuotedStringsAsNull(),\n-                        config.trimStrings(), defaultTimeZone );\n-                Extractor<?> idExtractor = idType.extractor( extractors );\n-                int delimiter = config.delimiter();\n-                List<Header.Entry> columns = new ArrayList<>();\n-                for ( int i = 0; !mark.isEndOfLine() && dataSeeker.seek( mark, delimiter ); i++ )\n-                {\n-                    String entryString = dataSeeker.tryExtract( mark, extractors.string() )\n-                            ? extractors.string().value() : null;\n-                    HeaderEntrySpec spec = new HeaderEntrySpec( entryString );\n-\n-                    if ( (spec.name == null && spec.type == null) ||\n-                         (spec.type != null && spec.type.equals( Type.IGNORE.name() )) )\n-                    {\n-                        columns.add( new Header.Entry( null, Type.IGNORE, Group.GLOBAL, null, null ) );\n-                    }\n-                    else\n-                    {\n-                        Group group = createGroups ? groups.getOrCreate( spec.groupName ) : groups.get( spec.groupName );\n-                        columns.add( entry( i, spec.name, spec.type, group, extractors, idExtractor ) );\n-                    }\n-                }\n-                Entry[] entries = columns.toArray( new Header.Entry[columns.size()] );\n-                validateHeader( entries );\n-                return new Header( entries );\n-            }\n-            catch ( IOException e )\n+      String name = rawHeaderField;\n+      String type = null;\n+      String groupName = null;\n+\n+      int typeIndex;\n+\n+      if (rawHeaderField != null)\n+      {\n+        String rawHeaderUntilOptions = rawHeaderField.split(\"\\\\{\")[0];\n+        if ((typeIndex = rawHeaderUntilOptions.lastIndexOf(':')) != -1)\n+        {   // Specific type given\n+          name = typeIndex > 0 ? rawHeaderField.substring(0, typeIndex) : null;\n+          type = rawHeaderField.substring(typeIndex + 1);\n+          int groupNameStartIndex = type.indexOf('(');\n+          if (groupNameStartIndex != -1)\n+          {   // Specific group given also\n+            if (!type.endsWith(\")\"))\n             {\n-                throw new RuntimeException( e );\n+              throw new IllegalArgumentException(\n+                  \"Group specification in '\" + rawHeaderField + \"' is invalid, format expected to be 'name:TYPE(group)' \" +\n+                      \"where TYPE and (group) are optional\");\n             }\n+            groupName = type.substring(groupNameStartIndex + 1, type.length() - 1);\n+            type = type.substring(0, groupNameStartIndex);\n+          }\n         }\n+      }\n \n-        private void validateHeader( Entry[] entries )\n-        {\n-            Map<String,Entry> properties = new HashMap<>();\n-            EnumMap<Type,Entry> singletonEntries = new EnumMap<>( Type.class );\n-            for ( Entry entry : entries )\n-            {\n-                switch ( entry.type() )\n-                {\n-                case PROPERTY:\n-                    Entry existingPropertyEntry = properties.get( entry.name() );\n-                    if ( existingPropertyEntry != null )\n-                    {\n-                        throw new DuplicateHeaderException( existingPropertyEntry, entry );\n-                    }\n-                    properties.put( entry.name(), entry );\n-                    break;\n-\n-                case ID: case START_ID: case END_ID: case TYPE:\n-                    Entry existingSingletonEntry = singletonEntries.get( entry.type() );\n-                    if ( existingSingletonEntry != null )\n-                    {\n-                        throw new DuplicateHeaderException( existingSingletonEntry, entry );\n-                    }\n-                    singletonEntries.put( entry.type(), entry );\n-                    break;\n-                default:\n-                    // No need to validate other headers\n-                    break;\n-                }\n-            }\n+      this.name = name;\n+      this.type = type;\n+      this.groupName = groupName;\n+    }\n+  }\n \n-            for ( Type type : mandatoryTypes )\n-            {\n-                if ( !singletonEntries.containsKey( type ) )\n-                {\n-                    throw new MissingHeaderException( type, entries );\n-                }\n-            }\n-        }\n+  private static class DefaultNodeFileHeaderParser extends AbstractDefaultFileHeaderParser\n+  {\n+    protected DefaultNodeFileHeaderParser(Supplier<ZoneId> defaultTimeZone)\n+    {\n+      super(defaultTimeZone, true);\n+    }\n \n-        protected boolean isRecognizedType( String typeSpec )\n+    @Override\n+    protected Header.Entry entry(int index, String name, String typeSpec, Group group, Extractors extractors,\n+                                 Extractor<?> idExtractor)\n+    {\n+      // For nodes it's simply ID,LABEL,PROPERTY. typeSpec can be either ID,LABEL or a type of property,\n+      // like 'int' or 'string_array' or similar, or empty for 'string' property.\n+      Type type = null;\n+      Extractor<?> extractor = null;\n+      CSVHeaderInformation optionalParameter = null;\n+      if (typeSpec == null)\n+      {\n+        type = Type.PROPERTY;\n+        extractor = extractors.string();\n+      } else\n+      {\n+        Pair<String, String> split = splitTypeSpecAndOptionalParameter(typeSpec);\n+        typeSpec = split.first();\n+        String optionalParameterString = split.other();\n+        if (optionalParameterString != null)\n         {\n-            for ( Type type : Type.values() )\n-            {\n-                if ( type.name().equalsIgnoreCase( typeSpec ) )\n-                {\n-                    return true;\n-                }\n-            }\n-            return false;\n+          if (Extractors.PointExtractor.NAME.equals(typeSpec))\n+          {\n+            optionalParameter = PointValue.parseHeaderInformation(optionalParameterString);\n+          } else if (Extractors.TimeExtractor.NAME.equals(typeSpec) || Extractors.DateTimeExtractor.NAME.equals(typeSpec))\n+          {\n+            optionalParameter = TemporalValue.parseHeaderInformation(optionalParameterString);\n+          }\n         }\n-\n-        @Override\n-        public boolean isDefined()\n+        if (typeSpec.equalsIgnoreCase(Type.ID.name()))\n+        {\n+          type = Type.ID;\n+          extractor = idExtractor;\n+        } else if (typeSpec.equalsIgnoreCase(Type.LABEL.name()))\n         {\n-            return false;\n+          type = Type.LABEL;\n+          extractor = extractors.stringArray();\n+        } else if (isRecognizedType(typeSpec))\n+        {\n+          throw new HeaderException(\"Unexpected node header type '\" + typeSpec + \"'\");\n+        } else\n+        {\n+          type = Type.PROPERTY;\n+          extractor = parsePropertyType(typeSpec, extractors);\n         }\n-\n-        /**\n-         * @param idExtractor we supply the id extractor explicitly because it's a configuration,\n-         * or at least input-global concern and not a concern of this particular header.\n-         */\n-        protected abstract Header.Entry entry( int index, String name, String typeSpec, Group group,\n-                Extractors extractors, Extractor<?> idExtractor );\n+      }\n+      return new Header.Entry(name, type, group, extractor, optionalParameter);\n     }\n+  }\n \n-    private static class HeaderEntrySpec\n+  private static class DefaultRelationshipFileHeaderParser extends AbstractDefaultFileHeaderParser\n+  {\n+    protected DefaultRelationshipFileHeaderParser(Supplier<ZoneId> defaultTimeZone)\n     {\n-        private final String name;\n-        private final String type;\n-        private final String groupName;\n-\n-        HeaderEntrySpec( String rawHeaderField )\n-        {\n-            String name = rawHeaderField;\n-            String type = null;\n-            String groupName = null;\n-\n-            int typeIndex;\n-\n-            if ( rawHeaderField != null )\n-            {\n-                String rawHeaderUntilOptions = rawHeaderField.split( \"\\\\{\" )[0];\n-                if ( (typeIndex = rawHeaderUntilOptions.lastIndexOf( ':' )) != -1 )\n-                {   // Specific type given\n-                    name = typeIndex > 0 ? rawHeaderField.substring( 0, typeIndex ) : null;\n-                    type = rawHeaderField.substring( typeIndex + 1 );\n-                    int groupNameStartIndex = type.indexOf( '(' );\n-                    if ( groupNameStartIndex != -1 )\n-                    {   // Specific group given also\n-                        if ( !type.endsWith( \")\" ) )\n-                        {\n-                            throw new IllegalArgumentException(\n-                                    \"Group specification in '\" + rawHeaderField + \"' is invalid, format expected to be 'name:TYPE(group)' \" +\n-                                            \"where TYPE and (group) are optional\" );\n-                        }\n-                        groupName = type.substring( groupNameStartIndex + 1, type.length() - 1 );\n-                        type = type.substring( 0, groupNameStartIndex );\n-                    }\n-                }\n-            }\n-\n-            this.name = name;\n-            this.type = type;\n-            this.groupName = groupName;\n-        }\n+      // Don't have TYPE as mandatory since a decorator could provide that\n+      super(defaultTimeZone, false, Type.START_ID, Type.END_ID);\n     }\n \n-    private static class DefaultNodeFileHeaderParser extends AbstractDefaultFileHeaderParser\n+    @Override\n+    protected Header.Entry entry(int index, String name, String typeSpec, Group group, Extractors extractors,\n+                                 Extractor<?> idExtractor)\n     {\n-        protected DefaultNodeFileHeaderParser( Supplier<ZoneId> defaultTimeZone )\n+      Type type = null;\n+      Extractor<?> extractor = null;\n+      CSVHeaderInformation optionalParameter = null;\n+      if (typeSpec == null)\n+      {   // Property\n+        type = Type.PROPERTY;\n+        extractor = extractors.string();\n+      } else\n+      {\n+        Pair<String, String> split = splitTypeSpecAndOptionalParameter(typeSpec);\n+        typeSpec = split.first();\n+        String optionalParameterString = split.other();\n+        if (optionalParameterString != null)\n         {\n-            super( defaultTimeZone, true );\n+          if (Extractors.PointExtractor.NAME.equals(typeSpec))\n+          {\n+            optionalParameter = PointValue.parseHeaderInformation(optionalParameterString);\n+          } else if (Extractors.TimeExtractor.NAME.equals(typeSpec) || Extractors.DateTimeExtractor.NAME.equals(typeSpec))\n+          {\n+            optionalParameter = TemporalValue.parseHeaderInformation(optionalParameterString);\n+          }\n         }\n \n-        @Override\n-        protected Header.Entry entry( int index, String name, String typeSpec, Group group, Extractors extractors,\n-                Extractor<?> idExtractor )\n+        if (typeSpec.equalsIgnoreCase(Type.START_ID.name()))\n         {\n-            // For nodes it's simply ID,LABEL,PROPERTY. typeSpec can be either ID,LABEL or a type of property,\n-            // like 'int' or 'string_array' or similar, or empty for 'string' property.\n-            Type type = null;\n-            Extractor<?> extractor = null;\n-            CSVHeaderInformation optionalParameter = null;\n-            if ( typeSpec == null )\n-            {\n-                type = Type.PROPERTY;\n-                extractor = extractors.string();\n-            }\n-            else\n-            {\n-                Pair<String, String> split = splitTypeSpecAndOptionalParameter(typeSpec);\n-                typeSpec = split.first();\n-                String optionalParameterString = split.other();\n-                if ( optionalParameterString != null )\n-                {\n-                    if ( Extractors.PointExtractor.NAME.equals( typeSpec ) )\n-                    {\n-                        optionalParameter = PointValue.parseHeaderInformation( optionalParameterString );\n-                    }\n-                    else if ( Extractors.TimeExtractor.NAME.equals( typeSpec ) || Extractors.DateTimeExtractor.NAME.equals( typeSpec ) )\n-                    {\n-                        optionalParameter = TemporalValue.parseHeaderInformation( optionalParameterString );\n-                    }\n-                }\n-                if ( typeSpec.equalsIgnoreCase( Type.ID.name() ) )\n-                {\n-                    type = Type.ID;\n-                    extractor = idExtractor;\n-                }\n-                else if ( typeSpec.equalsIgnoreCase( Type.LABEL.name() ) )\n-                {\n-                    type = Type.LABEL;\n-                    extractor = extractors.stringArray();\n-                }\n-                else if ( isRecognizedType( typeSpec ) )\n-                {\n-                    throw new HeaderException( \"Unexpected node header type '\" + typeSpec + \"'\" );\n-                }\n-                else\n-                {\n-                    type = Type.PROPERTY;\n-                    extractor = parsePropertyType( typeSpec, extractors );\n-                }\n-            }\n-            return new Header.Entry( name, type, group, extractor, optionalParameter );\n-        }\n-    }\n-\n-    private static class DefaultRelationshipFileHeaderParser extends AbstractDefaultFileHeaderParser\n-    {\n-        protected DefaultRelationshipFileHeaderParser( Supplier<ZoneId> defaultTimeZone )\n+          type = Type.START_ID;\n+          extractor = idExtractor;\n+        } else if (typeSpec.equalsIgnoreCase(Type.END_ID.name()))\n         {\n-            // Don't have TYPE as mandatory since a decorator could provide that\n-            super( defaultTimeZone, false, Type.START_ID, Type.END_ID );\n-        }\n-\n-        @Override\n-        protected Header.Entry entry( int index, String name, String typeSpec, Group group, Extractors extractors,\n-                Extractor<?> idExtractor )\n+          type = Type.END_ID;\n+          extractor = idExtractor;\n+        } else if (typeSpec.equalsIgnoreCase(Type.TYPE.name()))\n         {\n-            Type type = null;\n-            Extractor<?> extractor = null;\n-            CSVHeaderInformation optionalParameter = null;\n-            if ( typeSpec == null )\n-            {   // Property\n-                type = Type.PROPERTY;\n-                extractor = extractors.string();\n-            }\n-            else\n-            {\n-                Pair<String, String> split = splitTypeSpecAndOptionalParameter( typeSpec );\n-                typeSpec = split.first();\n-                String optionalParameterString = split.other();\n-                if ( optionalParameterString != null )\n-                {\n-                    if ( Extractors.PointExtractor.NAME.equals( typeSpec ) )\n-                    {\n-                        optionalParameter = PointValue.parseHeaderInformation( optionalParameterString );\n-                    }\n-                    else if ( Extractors.TimeExtractor.NAME.equals( typeSpec ) || Extractors.DateTimeExtractor.NAME.equals( typeSpec ) )\n-                    {\n-                        optionalParameter = TemporalValue.parseHeaderInformation( optionalParameterString );\n-                    }\n-                }\n-\n-                if ( typeSpec.equalsIgnoreCase( Type.START_ID.name() ) )\n-                {\n-                    type = Type.START_ID;\n-                    extractor = idExtractor;\n-                }\n-                else if ( typeSpec.equalsIgnoreCase( Type.END_ID.name() ) )\n-                {\n-                    type = Type.END_ID;\n-                    extractor = idExtractor;\n-                }\n-                else if ( typeSpec.equalsIgnoreCase( Type.TYPE.name() ) )\n-                {\n-                    type = Type.TYPE;\n-                    extractor = extractors.string();\n-                }\n-                else if ( isRecognizedType( typeSpec ) )\n-                {\n-                    throw new HeaderException( \"Unexpected relationship header type '\" + typeSpec + \"'\" );\n-                }\n-                else\n-                {\n-                    type = Type.PROPERTY;\n-                    extractor = parsePropertyType( typeSpec, extractors );\n-                }\n-            }\n-            return new Header.Entry( name, type, group, extractor, optionalParameter );\n-        }\n-\n-    }\n-\n-    private static Extractor<?> parsePropertyType( String typeSpec, Extractors extractors )\n-    {\n-        try\n+          type = Type.TYPE;\n+          extractor = extractors.string();\n+        } else if (isRecognizedType(typeSpec))\n         {\n-            return extractors.valueOf( typeSpec );\n-        }\n-        catch ( IllegalArgumentException e )\n+          throw new HeaderException(\"Unexpected relationship header type '\" + typeSpec + \"'\");\n+        } else\n         {\n-            throw new HeaderException( \"Unable to parse header\", e );\n+          type = Type.PROPERTY;\n+          extractor = parsePropertyType(typeSpec, extractors);\n         }\n+      }\n+      return new Header.Entry(name, type, group, extractor, optionalParameter);\n     }\n \n-    @SafeVarargs\n-    public static Iterable<DataFactory> datas( DataFactory... factories )\n+  }\n+\n+  private static Extractor<?> parsePropertyType(String typeSpec, Extractors extractors)\n+  {\n+    try\n+    {\n+      return extractors.valueOf(typeSpec);\n+    } catch (IllegalArgumentException e)\n     {\n-        return Iterables.iterable( factories );\n+      throw new HeaderException(\"Unable to parse header\", e);\n     }\n+  }\n \n-    private static Pattern typeSpecAndOptionalParameter = Pattern.compile( \"(?<newTypeSpec>.+?)(?<optionalParameter>\\\\{.*\\\\})?$\" );\n+  @SafeVarargs\n+  public static Iterable<DataFactory> datas(DataFactory... factories)\n+  {\n+    return Iterables.iterable(factories);\n+  }\n \n-    public static Pair<String,String> splitTypeSpecAndOptionalParameter( String typeSpec )\n-    {\n-        String optionalParameter = null;\n-        String newTypeSpec = typeSpec;\n+  private static Pattern typeSpecAndOptionalParameter = Pattern.compile(\"(?<newTypeSpec>.+?)(?<optionalParameter>\\\\{.*\\\\})?$\");\n \n-        Matcher matcher = typeSpecAndOptionalParameter.matcher( typeSpec );\n+  public static Pair<String, String> splitTypeSpecAndOptionalParameter(String typeSpec)\n+  {\n+    String optionalParameter = null;\n+    String newTypeSpec = typeSpec;\n \n-        if ( matcher.find() )\n-        {\n-            try\n-            {\n-                newTypeSpec = matcher.group( \"newTypeSpec\" );\n-                optionalParameter = matcher.group( \"optionalParameter\" );\n-            }\n-            catch ( IllegalArgumentException e )\n-            {\n-                String errorMessage = format( \"Failed to parse header: '%s'\", typeSpec );\n-                throw new IllegalArgumentException( errorMessage, e );\n-            }\n-        }\n-        return Pair.of( newTypeSpec, optionalParameter );\n+    Matcher matcher = typeSpecAndOptionalParameter.matcher(typeSpec);\n+\n+    if (matcher.find())\n+    {\n+      try\n+      {\n+        newTypeSpec = matcher.group(\"newTypeSpec\");\n+        optionalParameter = matcher.group(\"optionalParameter\");\n+      } catch (IllegalArgumentException e)\n+      {\n+        String errorMessage = format(\"Failed to parse header: '%s'\", typeSpec);\n+        throw new IllegalArgumentException(errorMessage, e);\n+      }\n     }\n+    return Pair.of(newTypeSpec, optionalParameter);\n+  }\n }\n",
            "diff_size": 611
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}