{
    "project_name": "Angel-ML-angel",
    "error_id": "1078",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1078/DefaultGetRowFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1078/DefaultGetRowFunc.java\nindex 92e8e283b4a..957e1b6da02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1078/DefaultGetRowFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1078/DefaultGetRowFunc.java\n@@ -27,7 +27,7 @@ import com.tencent.angel.psagent.matrix.transport.adapter.RowSplitCombineUtils;\n /**\n  * The function of default get row.\n  */\n-public class DefaultGetRowFunc extends BaseGetRowFunc{\n+public class DefaultGetRowFunc extends BaseGetRowFunc {\n \n   /**\n    * Creates a new function.\n@@ -39,7 +39,7 @@ public class DefaultGetRowFunc extends BaseGetRowFunc{\n   }\n \n   /**\n-   *  Creates a new function by default.\n+   * Creates a new function by default.\n    */\n   public DefaultGetRowFunc() {\n     super();\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1078/DefaultGetRowFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1078/DefaultGetRowFunc.java\nindex 92e8e283b4a..b2161f36e37 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1078/DefaultGetRowFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1078/DefaultGetRowFunc.java\n@@ -27,7 +27,7 @@ import com.tencent.angel.psagent.matrix.transport.adapter.RowSplitCombineUtils;\n /**\n  * The function of default get row.\n  */\n-public class DefaultGetRowFunc extends BaseGetRowFunc{\n+public class DefaultGetRowFunc extends BaseGetRowFunc {\n \n   /**\n    * Creates a new function.\n@@ -48,8 +48,7 @@ public class DefaultGetRowFunc extends BaseGetRowFunc{\n   @Override\n   public PartitionGetRowResult partitionGet(PartitionGetRowParam param) {\n     ServerRow row =\n-        PSContext\n-            .get()\n+        PSContext.get()\n             .getMatrixPartitionManager()\n             .getRow(param.getMatrixId(), param.getRowIndex(), param.getPartKey().getPartitionId());\n     return new PartitionGetRowResult(row);\n@@ -63,7 +62,6 @@ public class DefaultGetRowFunc extends BaseGetRowFunc{\n       rowSplits.add(partResults.get(i).getRowSplit());\n     }\n \n-    return new GetRowResult(ResponseType.SUCCESS, RowSplitCombineUtils.combineServerRowSplits(\n-        rowSplits, param.matrixId, param.rowIndex));\n+    return new GetRowResult(ResponseType.SUCCESS, RowSplitCombineUtils.combineServerRowSplits(rowSplits, param.matrixId, param.rowIndex));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1078/DefaultGetRowFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1078/DefaultGetRowFunc.java\nindex 92e8e283b4a..9e25539f105 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1078/DefaultGetRowFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1078/DefaultGetRowFunc.java\n@@ -18,7 +18,6 @@ package com.tencent.angel.ml.matrix.udf.getrow;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import com.tencent.angel.ps.impl.PSContext;\n import com.tencent.angel.ps.impl.matrix.ServerRow;\n import com.tencent.angel.psagent.matrix.ResponseType;\n@@ -27,13 +26,15 @@ import com.tencent.angel.psagent.matrix.transport.adapter.RowSplitCombineUtils;\n /**\n  * The function of default get row.\n  */\n-public class DefaultGetRowFunc extends BaseGetRowFunc{\n+\n+public class DefaultGetRowFunc extends BaseGetRowFunc {\n \n   /**\n    * Creates a new function.\n    *\n    * @param param the param\n    */\n+\n   public DefaultGetRowFunc(GetRowParam param) {\n     super(param);\n   }\n@@ -41,17 +42,14 @@ public class DefaultGetRowFunc extends BaseGetRowFunc{\n   /**\n    *  Creates a new function by default.\n    */\n+\n   public DefaultGetRowFunc() {\n     super();\n   }\n \n   @Override\n   public PartitionGetRowResult partitionGet(PartitionGetRowParam param) {\n-    ServerRow row =\n-        PSContext\n-            .get()\n-            .getMatrixPartitionManager()\n-            .getRow(param.getMatrixId(), param.getRowIndex(), param.getPartKey().getPartitionId());\n+    ServerRow row = PSContext.get().getMatrixPartitionManager().getRow(param.getMatrixId(), param.getRowIndex(), param.getPartKey().getPartitionId());\n     return new PartitionGetRowResult(row);\n   }\n \n@@ -62,8 +60,7 @@ public class DefaultGetRowFunc extends BaseGetRowFunc{\n     for (int i = 0; i < size; i++) {\n       rowSplits.add(partResults.get(i).getRowSplit());\n     }\n-\n-    return new GetRowResult(ResponseType.SUCCESS, RowSplitCombineUtils.combineServerRowSplits(\n-        rowSplits, param.matrixId, param.rowIndex));\n+    return new GetRowResult(ResponseType.SUCCESS, RowSplitCombineUtils.combineServerRowSplits(rowSplits, param.matrixId, param.rowIndex));\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}