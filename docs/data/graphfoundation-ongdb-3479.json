{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3479",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3479/LimitingResourceIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3479/LimitingResourceIterator.java\nindex 75be2d6599d..0bb70e12d85 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3479/LimitingResourceIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3479/LimitingResourceIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers.collection;\n \n import java.util.Iterator;\n@@ -26,59 +27,57 @@ import org.neo4j.graphdb.ResourceIterator;\n /**\n  * Limits the amount of items returned by an {@link Iterator}.\n  *\n- * @author Mattias Persson\n- *\n  * @param <T> the type of items in this {@link Iterator}.\n+ * @author Mattias Persson\n  */\n public class LimitingResourceIterator<T> extends PrefetchingResourceIterator<T>\n {\n-    private int returned;\n-    private final ResourceIterator<T> source;\n-    private final int limit;\n+  private int returned;\n+  private final ResourceIterator<T> source;\n+  private final int limit;\n \n-    /**\n-     * Instantiates a new limiting iterator which iterates over {@code source}\n-     * and if {@code limit} items have been returned the next {@link #hasNext()}\n-     * will return {@code false}.\n-     *\n-     * @param source the source of items.\n-     * @param limit the limit, i.e. the max number of items to return.\n-     */\n-    public LimitingResourceIterator( ResourceIterator<T> source, int limit )\n-    {\n-        this.source = source;\n-        this.limit = limit;\n-    }\n+  /**\n+   * Instantiates a new limiting iterator which iterates over {@code source}\n+   * and if {@code limit} items have been returned the next {@link #hasNext()}\n+   * will return {@code false}.\n+   *\n+   * @param source the source of items.\n+   * @param limit  the limit, i.e. the max number of items to return.\n+   */\n+  public LimitingResourceIterator(ResourceIterator<T> source, int limit)\n+  {\n+    this.source = source;\n+    this.limit = limit;\n+  }\n \n-    @Override\n-    protected T fetchNextOrNull()\n+  @Override\n+  protected T fetchNextOrNull()\n+  {\n+    if (!source.hasNext() || returned >= limit)\n     {\n-        if ( !source.hasNext() || returned >= limit )\n-        {\n-            return null;\n-        }\n-        try\n-        {\n-            return source.next();\n-        }\n-        finally\n-        {\n-            returned++;\n-        }\n+      return null;\n     }\n-\n-    /**\n-     * @return {@code true} if the number of items returned up to this point\n-     * is equal to the limit given in the constructor, otherwise {@code false}.\n-     */\n-    public boolean limitReached()\n+    try\n     {\n-        return returned == limit;\n-    }\n-\n-    @Override\n-    public void close()\n+      return source.next();\n+    } finally\n     {\n-        source.close();\n+      returned++;\n     }\n+  }\n+\n+  /**\n+   * @return {@code true} if the number of items returned up to this point\n+   * is equal to the limit given in the constructor, otherwise {@code false}.\n+   */\n+  public boolean limitReached()\n+  {\n+    return returned == limit;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    source.close();\n+  }\n }\n",
            "diff_size": 64
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3479/LimitingResourceIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3479/LimitingResourceIterator.java\nindex 75be2d6599d..e3e74acd81d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3479/LimitingResourceIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3479/LimitingResourceIterator.java\n@@ -57,7 +57,8 @@ public class LimitingResourceIterator<T> extends PrefetchingResourceIterator<T>\n         {\n             return null;\n         }\n-        try\n+\n+try\n         {\n             return source.next();\n         }\n@@ -81,4 +82,4 @@ public class LimitingResourceIterator<T> extends PrefetchingResourceIterator<T>\n     {\n         source.close();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "39",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "57",
                    "column": "32",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3479/LimitingResourceIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3479/LimitingResourceIterator.java\nindex 75be2d6599d..51626713d5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3479/LimitingResourceIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3479/LimitingResourceIterator.java\n@@ -20,7 +20,6 @@\n package org.neo4j.helpers.collection;\n \n import java.util.Iterator;\n-\n import org.neo4j.graphdb.ResourceIterator;\n \n /**\n@@ -30,7 +29,8 @@ import org.neo4j.graphdb.ResourceIterator;\n  *\n  * @param <T> the type of items in this {@link Iterator}.\n  */\n-public class LimitingResourceIterator<T> extends PrefetchingResourceIterator<T>\n+\n+public class LimitingResourceIterator <T> extends PrefetchingResourceIterator<T>\n {\n     private int returned;\n     private final ResourceIterator<T> source;\n@@ -44,6 +44,7 @@ public class LimitingResourceIterator<T> extends PrefetchingResourceIterator<T>\n      * @param source the source of items.\n      * @param limit the limit, i.e. the max number of items to return.\n      */\n+\n     public LimitingResourceIterator( ResourceIterator<T> source, int limit )\n     {\n         this.source = source;\n@@ -53,10 +54,11 @@ public class LimitingResourceIterator<T> extends PrefetchingResourceIterator<T>\n     @Override\n     protected T fetchNextOrNull()\n     {\n-        if ( !source.hasNext() || returned >= limit )\n+        if ( ! source.hasNext()|| returned >= limit )\n         {\n             return null;\n         }\n+\n         try\n         {\n             return source.next();\n@@ -71,6 +73,7 @@ public class LimitingResourceIterator<T> extends PrefetchingResourceIterator<T>\n      * @return {@code true} if the number of items returned up to this point\n      * is equal to the limit given in the constructor, otherwise {@code false}.\n      */\n+\n     public boolean limitReached()\n     {\n         return returned == limit;\n@@ -81,4 +84,4 @@ public class LimitingResourceIterator<T> extends PrefetchingResourceIterator<T>\n     {\n         source.close();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}