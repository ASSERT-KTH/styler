{
    "project_name": "apache-crunch",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "62",
                "column": "30",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    }\n    current++;\n    while (scanner.hasNext() &&\n        (keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n      scanner.next();\n      current++;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler/16/Tokenizer.java\nindex 8de90b637ad..af5e93eeeb7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler/16/Tokenizer.java\n@@ -59,8 +59,7 @@ public class Tokenizer {\n       return;\n     }\n     current++;\n-    while (scanner.hasNext() &&\n-        (keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n+    while (scanner.hasNext() && (keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n       scanner.next();\n       current++;\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "63",
                    "column": "30",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/intellij/16/Tokenizer.java\nindex 8de90b637ad..9716b8bf792 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/intellij/16/Tokenizer.java\n@@ -6,15 +6,16 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.crunch.contrib.text;\n \n import java.util.Scanner;\n@@ -30,10 +31,10 @@ public class Tokenizer {\n   private final Set<Integer> indices;\n   private final boolean keep;\n   private int current;\n-  \n+\n   /**\n    * Create a new {@code Tokenizer} instance.\n-   * \n+   *\n    * @param scanner The scanner to manage\n    * @param indices The indices to keep/drop\n    * @param keep Whether the indices should be kept (true) or dropped (false)\n@@ -44,7 +45,7 @@ public class Tokenizer {\n     this.keep = keep;\n     this.current = -1;\n   }\n-  \n+\n   private static Set<Integer> checkIndices(Set<Integer> indices) {\n     for (Integer index : indices) {\n       if (index < 0) {\n@@ -53,7 +54,7 @@ public class Tokenizer {\n     }\n     return indices;\n   }\n-  \n+\n   private void advance() {\n     if (indices.isEmpty()) {\n       return;\n@@ -65,7 +66,7 @@ public class Tokenizer {\n       current++;\n     }\n   }\n-  \n+\n   /**\n    * Returns true if the underlying {@code Scanner} has any tokens remaining.\n    */\n@@ -75,7 +76,7 @@ public class Tokenizer {\n \n   /**\n    * Advance this {@code Tokenizer} and return the next String from the {@code Scanner}.\n-   * \n+   *\n    * @return The next String from the {@code Scanner}\n    */\n   public String next() {\n@@ -85,7 +86,7 @@ public class Tokenizer {\n \n   /**\n    * Advance this {@code Tokenizer} and return the next Long from the {@code Scanner}.\n-   * \n+   *\n    * @return The next Long from the {@code Scanner}\n    */\n   public Long nextLong() {\n@@ -95,7 +96,7 @@ public class Tokenizer {\n \n   /**\n    * Advance this {@code Tokenizer} and return the next Boolean from the {@code Scanner}.\n-   * \n+   *\n    * @return The next Boolean from the {@code Scanner}\n    */\n   public Boolean nextBoolean() {\n@@ -105,7 +106,7 @@ public class Tokenizer {\n \n   /**\n    * Advance this {@code Tokenizer} and return the next Double from the {@code Scanner}.\n-   * \n+   *\n    * @return The next Double from the {@code Scanner}\n    */\n   public Double nextDouble() {\n@@ -115,7 +116,7 @@ public class Tokenizer {\n \n   /**\n    * Advance this {@code Tokenizer} and return the next Float from the {@code Scanner}.\n-   * \n+   *\n    * @return The next Float from the {@code Scanner}\n    */\n   public Float nextFloat() {\n@@ -125,7 +126,7 @@ public class Tokenizer {\n \n   /**\n    * Advance this {@code Tokenizer} and return the next Integer from the {@code Scanner}.\n-   * \n+   *\n    * @return The next Integer from the {@code Scanner}\n    */\n   public Integer nextInt() {\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/naturalize/16/Tokenizer.java\nindex 8de90b637ad..1ca874ac637 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/naturalize/16/Tokenizer.java\n@@ -46,7 +46,7 @@ public class Tokenizer {\n   }\n   \n   private static Set<Integer> checkIndices(Set<Integer> indices) {\n-    for (Integer index : indices) {\n+  for (Integer index : indices) {\n       if (index < 0) {\n         throw new IllegalArgumentException(\"All tokenizer indices must be non-negative\");\n       }\n@@ -59,8 +59,7 @@ public class Tokenizer {\n       return;\n     }\n     current++;\n-    while (scanner.hasNext() &&\n-        (keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n+    while (scanner.hasNext() && (keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n       scanner.next();\n       current++;\n     }\n@@ -132,4 +131,4 @@ public class Tokenizer {\n     advance();\n     return scanner.nextInt();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/codebuff/16/Tokenizer.java\nindex 8de90b637ad..5342f68cfc0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/codebuff/16/Tokenizer.java\n@@ -24,6 +24,7 @@ import java.util.Set;\n  * Manages a {@link Scanner} instance and provides support for returning only a subset\n  * of the fields returned by the underlying {@code Scanner}.\n  */\n+\n public class Tokenizer {\n \n   private final Scanner scanner;\n@@ -38,13 +39,14 @@ public class Tokenizer {\n    * @param indices The indices to keep/drop\n    * @param keep Whether the indices should be kept (true) or dropped (false)\n    */\n+\n   public Tokenizer(Scanner scanner, Set<Integer> indices, boolean keep) {\n     this.scanner = scanner;\n     this.indices = checkIndices(indices);\n     this.keep = keep;\n     this.current = -1;\n   }\n-  \n+\n   private static Set<Integer> checkIndices(Set<Integer> indices) {\n     for (Integer index : indices) {\n       if (index < 0) {\n@@ -53,14 +55,13 @@ public class Tokenizer {\n     }\n     return indices;\n   }\n-  \n+\n   private void advance() {\n     if (indices.isEmpty()) {\n       return;\n     }\n     current++;\n-    while (scanner.hasNext() &&\n-        (keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n+    while (scanner.hasNext() && (keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n       scanner.next();\n       current++;\n     }\n@@ -69,6 +70,7 @@ public class Tokenizer {\n   /**\n    * Returns true if the underlying {@code Scanner} has any tokens remaining.\n    */\n+\n   public boolean hasNext() {\n     return scanner.hasNext();\n   }\n@@ -78,6 +80,7 @@ public class Tokenizer {\n    * \n    * @return The next String from the {@code Scanner}\n    */\n+\n   public String next() {\n     advance();\n     return scanner.next();\n@@ -88,6 +91,7 @@ public class Tokenizer {\n    * \n    * @return The next Long from the {@code Scanner}\n    */\n+\n   public Long nextLong() {\n     advance();\n     return scanner.nextLong();\n@@ -98,6 +102,7 @@ public class Tokenizer {\n    * \n    * @return The next Boolean from the {@code Scanner}\n    */\n+\n   public Boolean nextBoolean() {\n     advance();\n     return scanner.nextBoolean();\n@@ -108,6 +113,7 @@ public class Tokenizer {\n    * \n    * @return The next Double from the {@code Scanner}\n    */\n+\n   public Double nextDouble() {\n     advance();\n     return scanner.nextDouble();\n@@ -118,6 +124,7 @@ public class Tokenizer {\n    * \n    * @return The next Float from the {@code Scanner}\n    */\n+\n   public Float nextFloat() {\n     advance();\n     return scanner.nextFloat();\n@@ -128,8 +135,9 @@ public class Tokenizer {\n    * \n    * @return The next Integer from the {@code Scanner}\n    */\n+\n   public Integer nextInt() {\n     advance();\n     return scanner.nextInt();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_random/16/Tokenizer.java\nindex 8de90b637ad..af5e93eeeb7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_random/16/Tokenizer.java\n@@ -59,8 +59,7 @@ public class Tokenizer {\n       return;\n     }\n     current++;\n-    while (scanner.hasNext() &&\n-        (keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n+    while (scanner.hasNext() && (keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n       scanner.next();\n       current++;\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "62",
                    "column": "30",
                    "severity": "warning",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_three_grams/16/Tokenizer.java\nindex 8de90b637ad..ffb89c4440c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/16/Tokenizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_three_grams/16/Tokenizer.java\n@@ -59,8 +59,7 @@ public class Tokenizer {\n       return;\n     }\n     current++;\n-    while (scanner.hasNext() &&\n-        (keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n+    while (scanner.hasNext() &&(keep && !indices.contains(current)) || (!keep && indices.contains(current))) {\n       scanner.next();\n       current++;\n     }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "styler_three_grams"
    ]
}