{
    "project_name": "Activiti-Activiti",
    "error_id": "74",
    "information": {
        "errors": [
            {
                "line": "124",
                "column": "17",
                "severity": "error",
                "message": "'+' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    public ProcessRuntimeEventListener<ProcessCompletedEvent> processCompletedListener() {\n        return processCompleted -> logger.info(\">>> Process Completed: '\"\n                + processCompleted.getEntity().getName() +\n                \"' We can send a notification to the initiator: \" + processCompleted.getEntity().getInitiator());\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/74/DemoApplication.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/74/DemoApplication.java\nindex cb6f6f0d725..c64f27c6ce7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/74/DemoApplication.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/74/DemoApplication.java\n@@ -120,8 +120,7 @@ public class DemoApplication implements CommandLineRunner {\n \n     @Bean\n     public ProcessRuntimeEventListener<ProcessCompletedEvent> processCompletedListener() {\n-        return processCompleted -> logger.info(\">>> Process Completed: '\"\n-                + processCompleted.getEntity().getName() +\n+        return processCompleted -> logger.info(\">>> Process Completed: '\" + processCompleted.getEntity().getName() +\n                 \"' We can send a notification to the initiator: \" + processCompleted.getEntity().getInitiator());\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "124",
                    "column": "17",
                    "severity": "error",
                    "message": "'+' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 6, indentation should be the same level as line 72.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/74/DemoApplication.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/74/DemoApplication.java\nindex cb6f6f0d725..c1c6d80738b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/74/DemoApplication.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/74/DemoApplication.java\n@@ -4,7 +4,6 @@ import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.Map;\n import java.util.Random;\n-\n import org.activiti.api.process.model.ProcessDefinition;\n import org.activiti.api.process.model.ProcessInstance;\n import org.activiti.api.process.model.builders.ProcessPayloadBuilder;\n@@ -28,107 +27,88 @@ import org.springframework.scheduling.annotation.Scheduled;\n @EnableScheduling\n public class DemoApplication implements CommandLineRunner {\n \n-    private Logger logger = LoggerFactory.getLogger(DemoApplication.class);\n+  private Logger logger = LoggerFactory.getLogger(DemoApplication.class);\n \n-    @Autowired\n-    private ProcessRuntime processRuntime;\n+  @Autowired\n+  private ProcessRuntime processRuntime;\n \n-    @Autowired\n-    private SecurityUtil securityUtil;\n+  @Autowired\n+  private SecurityUtil securityUtil;\n+  public static void main(String[] args) {\n+    SpringApplication.run(DemoApplication.class, args);\n+  }\n \n-    public static void main(String[] args) {\n-        SpringApplication.run(DemoApplication.class, args);\n+  @Override\n+  public void run(String... args) {\n+    securityUtil.logInAs(\"system\");\n \n+    Page<ProcessDefinition> processDefinitionPage = processRuntime.processDefinitions(Pageable.of(0, 10));\n+    logger.info(\"> Available Process definitions: \" + processDefinitionPage.getTotalItems());\n+    for (ProcessDefinition pd : processDefinitionPage.getContent()) {\n+        logger.info(\"\\t > Process definition: \" + pd);\n     }\n-\n-    @Override\n-    public void run(String... args) {\n-        securityUtil.logInAs(\"system\");\n-\n-        Page<ProcessDefinition> processDefinitionPage = processRuntime.processDefinitions(Pageable.of(0, 10));\n-        logger.info(\"> Available Process definitions: \" + processDefinitionPage.getTotalItems());\n-        for (ProcessDefinition pd : processDefinitionPage.getContent()) {\n-            logger.info(\"\\t > Process definition: \" + pd);\n-        }\n-\n-    }\n-\n-    @Scheduled(initialDelay = 1000, fixedDelay = 1000)\n-    public void processText() {\n-\n-        securityUtil.logInAs(\"system\");\n-\n-        String content = pickRandomString();\n-\n-        SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MM-yy HH:mm:ss\");\n-\n-        logger.info(\"> Processing content: \" + content + \" at \" + formatter.format(new Date()));\n-\n-        ProcessInstance processInstance = processRuntime.start(ProcessPayloadBuilder\n-                .start()\n-                .withProcessDefinitionKey(\"categorizeProcess\")\n-                .withName(\"Processing Content: \" + content)\n-                .withVariable(\"content\", content)\n-                .build());\n-        logger.info(\">>> Created Process Instance: \" + processInstance);\n-\n-\n-    }\n-\n-    @Bean\n-    public Connector processTextConnector() {\n-        return integrationContext -> {\n-            Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables();\n-            String contentToProcess = (String) inBoundVariables.get(\"content\");\n+  }\n+\n+  @Scheduled(\n+    initialDelay = 1000,\n+    fixedDelay = 1000)\n+  public void processText() {\n+    securityUtil.logInAs(\"system\");\n+\n+    String content = pickRandomString();\n+    SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MM-yy HH:mm:ss\");\n+    logger.info(\"> Processing content: \" + content + \" at \" + formatter.format(new Date()));\n+\n+    ProcessInstance processInstance = processRuntime.start(ProcessPayloadBuilder.start().withProcessDefinitionKey(\"categorizeProcess\").withName(\"Processing Content: \" + content).withVariable(\"content\", content).build());\n+    logger.info(\">>> Created Process Instance: \" + processInstance);\n+  }\n+\n+  @Bean\n+  public Connector processTextConnector() {\n+    return integrationContext -> {\n+      Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables();\n+      String contentToProcess = (String) inBoundVariables.get(\"content\");\n             // Logic Here to decide if content is approved or not\n-            if (contentToProcess.contains(\"activiti\")) {\n-                logger.info(\"> Approving content: \" + contentToProcess);\n-                integrationContext.addOutBoundVariable(\"approved\",\n-                        true);\n-            } else {\n-                logger.info(\"> Discarding content: \" + contentToProcess);\n-                integrationContext.addOutBoundVariable(\"approved\",\n-                        false);\n-            }\n-            return integrationContext;\n-        };\n-    }\n-\n-    @Bean\n-    public Connector tagTextConnector() {\n-        return integrationContext -> {\n-            String contentToTag = (String) integrationContext.getInBoundVariables().get(\"content\");\n-            contentToTag += \" :) \";\n-            integrationContext.addOutBoundVariable(\"content\",\n-                    contentToTag);\n-            logger.info(\"Final Content: \" + contentToTag);\n-            return integrationContext;\n-        };\n-    }\n-\n-    @Bean\n-    public Connector discardTextConnector() {\n-        return integrationContext -> {\n-            String contentToDiscard = (String) integrationContext.getInBoundVariables().get(\"content\");\n-            contentToDiscard += \" :( \";\n-            integrationContext.addOutBoundVariable(\"content\",\n-                    contentToDiscard);\n-            logger.info(\"Final Content: \" + contentToDiscard);\n-            return integrationContext;\n-        };\n-    }\n-\n-    @Bean\n-    public ProcessRuntimeEventListener<ProcessCompletedEvent> processCompletedListener() {\n-        return processCompleted -> logger.info(\">>> Process Completed: '\"\n-                + processCompleted.getEntity().getName() +\n-                \"' We can send a notification to the initiator: \" + processCompleted.getEntity().getInitiator());\n-    }\n-\n-    private String pickRandomString() {\n-        String[] texts = {\"hello from london\", \"Hi there from activiti!\", \"all good news over here.\", \"I've tweeted about activiti today.\",\n-                \"other boring projects.\", \"activiti cloud - Cloud Native Java BPM\"};\n-        return texts[new Random().nextInt(texts.length)];\n-    }\n-\n-}\n+      if (contentToProcess.contains(\"activiti\")) {\n+        logger.info(\"> Approving content: \" + contentToProcess);\n+        integrationContext.addOutBoundVariable(\"approved\", true);\n+      } else {\n+        logger.info(\"> Discarding content: \" + contentToProcess);\n+        integrationContext.addOutBoundVariable(\"approved\", false);\n+      }\n+      return integrationContext;\n+};\n+  }\n+\n+  @Bean\n+  public Connector tagTextConnector() {\n+    return integrationContext -> {\n+      String contentToTag = (String) integrationContext.getInBoundVariables().get(\"content\");\n+      contentToTag += \" :) \";\n+      integrationContext.addOutBoundVariable(\"content\", contentToTag);\n+      logger.info(\"Final Content: \" + contentToTag);\n+      return integrationContext;\n+};\n+  }\n+\n+  @Bean\n+  public Connector discardTextConnector() {\n+    return integrationContext -> {\n+      String contentToDiscard = (String) integrationContext.getInBoundVariables().get(\"content\");\n+      contentToDiscard += \" :( \";\n+      integrationContext.addOutBoundVariable(\"content\", contentToDiscard);\n+      logger.info(\"Final Content: \" + contentToDiscard);\n+      return integrationContext;\n+};\n+  }\n+\n+  @Bean\n+  public ProcessRuntimeEventListener<ProcessCompletedEvent> processCompletedListener() {\n+    return processCompleted -> logger.info(\">>> Process Completed: '\" + processCompleted.getEntity().getName() + \"' We can send a notification to the initiator: \" + processCompleted.getEntity().getInitiator());\n+  }\n+\n+  private String pickRandomString() {\n+    String[] texts = { \"hello from london\", \"Hi there from activiti!\", \"all good news over here.\", \"I've tweeted about activiti today.\", \"other boring projects.\", \"activiti cloud - Cloud Native Java BPM\" };\n+    return texts[new Random().nextInt(texts.length)];\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 107
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/74/DemoApplication.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/74/DemoApplication.java\nindex cb6f6f0d725..c64f27c6ce7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/74/DemoApplication.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/74/DemoApplication.java\n@@ -120,8 +120,7 @@ public class DemoApplication implements CommandLineRunner {\n \n     @Bean\n     public ProcessRuntimeEventListener<ProcessCompletedEvent> processCompletedListener() {\n-        return processCompleted -> logger.info(\">>> Process Completed: '\"\n-                + processCompleted.getEntity().getName() +\n+        return processCompleted -> logger.info(\">>> Process Completed: '\" + processCompleted.getEntity().getName() +\n                 \"' We can send a notification to the initiator: \" + processCompleted.getEntity().getInitiator());\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/74/DemoApplication.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/74/DemoApplication.java\nindex cb6f6f0d725..c64f27c6ce7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/74/DemoApplication.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/74/DemoApplication.java\n@@ -120,8 +120,7 @@ public class DemoApplication implements CommandLineRunner {\n \n     @Bean\n     public ProcessRuntimeEventListener<ProcessCompletedEvent> processCompletedListener() {\n-        return processCompleted -> logger.info(\">>> Process Completed: '\"\n-                + processCompleted.getEntity().getName() +\n+        return processCompleted -> logger.info(\">>> Process Completed: '\" + processCompleted.getEntity().getName() +\n                 \"' We can send a notification to the initiator: \" + processCompleted.getEntity().getInitiator());\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}