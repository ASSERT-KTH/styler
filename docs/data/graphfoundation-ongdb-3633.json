{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3633",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "77",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "211",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "431",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "443",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "449",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "462",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "476",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "523",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "561",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "565",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "565",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "592",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "592",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "601",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "629",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "631",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "631",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3633/Args.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3633/Args.java\nindex 68d01a66a3b..26b9548ffd0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3633/Args.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3633/Args.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers;\n \n import java.util.ArrayList;\n@@ -41,7 +42,7 @@ import org.neo4j.kernel.impl.util.Validator;\n  *   '-path'\n  *   '--path'\n  * </pre>\n- *\n+ * <p>\n  * A key/value pair can be either one single String from the array where there's\n  * a '=' delimiter between the key and value, like so:\n  *\n@@ -52,594 +53,588 @@ import org.neo4j.kernel.impl.util.Validator;\n  * <pre>\n  *   '-path' '/my/path/to/something'\n  * </pre>\n- *\n+ * <p>\n  * Multiple values for an option is supported, however the only means of extracting all values is be\n  * using {@link #interpretOptions(String, Function, Function, Validator...)}, all other methods revolve\n  * around single value, i.e. will fail if there are multiple.\n- *\n+ * <p>\n  * Options can have metadata which can be extracted using\n  * {@link #interpretOptions(String, Function, Function, Validator...)}. Metadata looks like:\n  * <pre>\n  *   --my-option:Metadata my-value\n  * </pre>\n- *\n+ * <p>\n  * where {@code Metadata} would be the metadata of {@code my-value}.\n  */\n public class Args\n {\n-    private static final char OPTION_METADATA_DELIMITER = ':';\n-\n-    public static class ArgsParser\n-    {\n-        private final String[] flags;\n-\n-        private ArgsParser( String... flags )\n-        {\n-            this.flags = Objects.requireNonNull( flags );\n-        }\n-\n-        public Args parse( String... arguments )\n-        {\n-            return new Args( flags, arguments );\n-        }\n-    }\n-\n-    public static class Option<T>\n-    {\n-        private final T value;\n-        private final String metadata;\n-\n-        private Option( T value, String metadata )\n-        {\n-            this.value = value;\n-            this.metadata = metadata;\n-        }\n+  private static final char OPTION_METADATA_DELIMITER = ':';\n \n-        public T value()\n-        {\n-            return value;\n-        }\n-\n-        public String metadata()\n-        {\n-            return metadata;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return \"Option[\" + value + (metadata != null ? \", \" + metadata : \"\") + \"]\";\n-        }\n-    }\n-\n-    private static final Function<String,Option<String>> DEFAULT_OPTION_PARSER = from ->\n-    {\n-        int metadataStartIndex = from.indexOf( OPTION_METADATA_DELIMITER );\n-        return metadataStartIndex == -1\n-                ? new Option<>( from, null )\n-                : new Option<>( from.substring( 0, metadataStartIndex ), from.substring( metadataStartIndex + 1 ) );\n-    };\n-\n-    private final String[] args;\n+  public static class ArgsParser\n+  {\n     private final String[] flags;\n-    private final Map<String, List<Option<String>>> map = new HashMap<>();\n-    private final List<String> orphans = new ArrayList<>();\n-\n-    public static ArgsParser withFlags( String... flags )\n-    {\n-        return new ArgsParser( flags );\n-    }\n \n-    public static Args parse( String...args )\n+    private ArgsParser(String... flags)\n     {\n-        return withFlags().parse( args );\n+      this.flags = Objects.requireNonNull(flags);\n     }\n \n-    /**\n-     * Suitable for main( String[] args )\n-     * @param args the arguments to parse.\n-     */\n-    private Args( String[] flags, String[] args )\n+    public Args parse(String... arguments)\n     {\n-        this( DEFAULT_OPTION_PARSER, flags, args );\n+      return new Args(flags, arguments);\n     }\n+  }\n \n-    /**\n-     * Suitable for main( String[] args )\n-     * @param flags list of possible flags (e.g -v or -skip-bad). A flag differs from an option in that it\n-     * has no value after it. This list of flags is used for distinguishing between the two.\n-     * @param args the arguments to parse.\n-     */\n-    private Args( Function<String,Option<String>> optionParser, String[] flags, String[] args )\n-    {\n-        this.flags = flags;\n-        this.args = args;\n-        parseArgs( optionParser, args );\n-    }\n+  public static class Option<T>\n+  {\n+    private final T value;\n+    private final String metadata;\n \n-    public Args( Map<String, String> source )\n+    private Option(T value, String metadata)\n     {\n-        this( DEFAULT_OPTION_PARSER, source );\n+      this.value = value;\n+      this.metadata = metadata;\n     }\n \n-    public Args( Function<String,Option<String>> optionParser, Map<String, String> source )\n+    public T value()\n     {\n-        this.flags = new String[] {};\n-        this.args = null;\n-        for ( Entry<String,String> entry : source.entrySet() )\n-        {\n-            put( optionParser, entry.getKey(), entry.getValue() );\n-        }\n+      return value;\n     }\n \n-    public String[] source()\n+    public String metadata()\n     {\n-        return this.args;\n-    }\n-\n-    public Map<String, String> asMap()\n-    {\n-        Map<String,String> result = new HashMap<>();\n-        for ( Map.Entry<String,List<Option<String>>> entry : map.entrySet() )\n-        {\n-            Option<String> value = Iterables.firstOrNull( entry.getValue() );\n-            result.put( entry.getKey(), value != null ? value.value() : null );\n-        }\n-        return result;\n-    }\n-\n-    public boolean has( String  key )\n-    {\n-        return this.map.containsKey( key );\n-    }\n-\n-    public boolean hasNonNull( String key )\n-    {\n-        List<Option<String>> values = this.map.get( key );\n-        return values != null && !values.isEmpty();\n-    }\n-\n-    private String getSingleOptionOrNull( String key )\n-    {\n-        List<Option<String>> values = this.map.get( key );\n-        if ( values == null || values.isEmpty() )\n-        {\n-            return null;\n-        }\n-        else if ( values.size() > 1 )\n-        {\n-            throw new IllegalArgumentException( \"There are multiple values for '\" + key + \"'\" );\n-        }\n-        return values.get( 0 ).value();\n-    }\n-\n-    /**\n-     * Get a config option by name.\n-     * @param key name of the option, without any `-` or `--` prefix, eg. \"o\".\n-     * @return the string value of the option, or null if the user has not specified it\n-     */\n-    public String get( String key )\n-    {\n-        return getSingleOptionOrNull( key );\n-    }\n-\n-    public String get( String key, String defaultValue )\n-    {\n-        String value = getSingleOptionOrNull( key );\n-        return value != null ? value : defaultValue;\n-    }\n-\n-    public String get( String key, String defaultValueIfNotFound, String defaultValueIfNoValue )\n-    {\n-        String value = getSingleOptionOrNull( key );\n-        if ( value != null )\n-        {\n-            return value;\n-        }\n-        return this.map.containsKey( key ) ? defaultValueIfNoValue : defaultValueIfNotFound;\n-    }\n-\n-    public Number getNumber( String key, Number defaultValue )\n-    {\n-        String value = getSingleOptionOrNull( key );\n-        return value != null ? Double.valueOf( value ) : defaultValue;\n-    }\n-\n-    public long getDuration( String key, long defaultValueInMillis )\n-    {\n-        String value = getSingleOptionOrNull( key );\n-        return value != null ? TimeUtil.parseTimeMillis.apply(value) : defaultValueInMillis;\n-    }\n-\n-    /**\n-     * Like calling {@link #getBoolean(String, Boolean)} with {@code false} for default value.\n-     * This is the most common case, i.e. returns {@code true} if boolean argument was specified as:\n-     * <ul>\n-     * <li>--myboolean</li>\n-     * <li>--myboolean=true</li>\n-     * </ul>\n-     * Otherwise {@code false.\n-     * }\n-     * @param key argument key.\n-     * @return {@code true} if argument was specified w/o value, or w/ value {@code true}, otherwise {@code false}.\n-     */\n-    public boolean getBoolean( String key )\n-    {\n-        return getBoolean( key, false );\n-    }\n-\n-    /**\n-     * Like calling {@link #getBoolean(String, Boolean, Boolean)} with {@code true} for\n-     * {@code defaultValueIfNoValue}, i.e. specifying {@code --myarg} will interpret it as {@code true}.\n-     *\n-     * @param key argument key.\n-     * @param defaultValueIfNotSpecified used if argument not specified.\n-     * @return argument boolean value depending on what was specified, see above.\n-     */\n-    public Boolean getBoolean( String key, Boolean defaultValueIfNotSpecified )\n-    {\n-        return getBoolean( key, defaultValueIfNotSpecified, Boolean.TRUE );\n-    }\n-\n-    /**\n-     * Parses a {@code boolean} argument. There are a couple of cases:\n-     * <ul>\n-     * <li>The argument isn't specified. In this case the value of {@code defaultValueIfNotSpecified}\n-     * will be returned.</li>\n-     * <li>The argument is specified without value, for example <pre>--myboolean</pre>. In this case\n-     * the value of {@code defaultValueIfNotSpecified} will be returned.</li>\n-     * <li>The argument is specified with value, for example <pre>--myboolean=true</pre>.\n-     * In this case the actual value will be returned.</li>\n-     * </ul>\n-     *\n-     * @param key argument key.\n-     * @param defaultValueIfNotSpecified used if argument not specified.\n-     * @param defaultValueIfSpecifiedButNoValue used if argument specified w/o value.\n-     * @return argument boolean value depending on what was specified, see above.\n-     */\n-    public Boolean getBoolean( String key, Boolean defaultValueIfNotSpecified,\n-            Boolean defaultValueIfSpecifiedButNoValue )\n-    {\n-        String value = getSingleOptionOrNull( key );\n-        if ( value != null )\n-        {\n-            return Boolean.valueOf( value );\n-        }\n-        return this.map.containsKey( key ) ? defaultValueIfSpecifiedButNoValue : defaultValueIfNotSpecified;\n-    }\n-\n-    public <T extends Enum<T>> T getEnum( Class<T> enumClass, String key, T defaultValue )\n-    {\n-        String raw = getSingleOptionOrNull( key );\n-        if ( raw == null )\n-        {\n-            return defaultValue;\n-        }\n-\n-        for ( T candidate : enumClass.getEnumConstants() )\n-        {\n-            if ( candidate.name().equals( raw ) )\n-            {\n-                return candidate;\n-            }\n-        }\n-        throw new IllegalArgumentException( \"No enum instance '\" + raw + \"' in \" + enumClass.getName() );\n-    }\n-\n-    /**\n-     * Orphans are arguments specified without options flags, eg:\n-     *\n-     * <pre>myprogram -o blah orphan1 orphan2</pre>\n-     *\n-     * Would yield a list here of {@code \"orphan1\"} and {@code \"orphan2\"}.\n-     *\n-     * @return list of orphan arguments\n-     */\n-    public List<String> orphans()\n-    {\n-        return new ArrayList<>( this.orphans );\n-    }\n-\n-    /**\n-     * @see #orphans()\n-     * @return list of orphan arguments.\n-     */\n-    public String[] orphansAsArray()\n-    {\n-        return orphans.toArray( new String[0] );\n-    }\n-\n-    public String[] asArgs()\n-    {\n-        List<String> list = new ArrayList<>( orphans.size() );\n-        for ( String orphan : orphans )\n-        {\n-            String quote = orphan.contains( \" \" ) ? \" \" : \"\";\n-            list.add( quote + orphan + quote );\n-        }\n-        for ( Map.Entry<String,List<Option<String>>> entry : map.entrySet() )\n-        {\n-            for ( Option<String> option : entry.getValue() )\n-            {\n-                String key = option.metadata != null\n-                        ? entry.getKey() + OPTION_METADATA_DELIMITER + option.metadata()\n-                        : entry.getKey();\n-                String value = option.value();\n-                String quote = key.contains( \" \" ) || (value != null && value.contains( \" \" )) ? \" \" : \"\";\n-                list.add( quote + (key.length() > 1 ? \"--\" : \"-\") + key + (value != null ? \"=\" + value + quote : \"\") );\n-            }\n-        }\n-        return list.toArray( new String[0] );\n+      return metadata;\n     }\n \n     @Override\n     public String toString()\n     {\n-        StringBuilder builder = new StringBuilder();\n-        for ( String arg : asArgs() )\n-        {\n-            builder.append( builder.length() > 0 ? \" \" : \"\" ).append( arg );\n-        }\n-        return builder.toString();\n-    }\n-\n-    private static boolean isOption( String arg )\n-    {\n-        return arg.startsWith( \"-\" ) && arg.length() > 1;\n-    }\n-\n-    private boolean isFlag( String arg )\n-    {\n-        return ArrayUtil.contains( flags, arg );\n-    }\n-\n-    private static boolean isBoolean( String value )\n-    {\n-        return \"true\".equalsIgnoreCase( value ) || \"false\".equalsIgnoreCase( value );\n-    }\n-\n-    private static String stripOption( String arg )\n-    {\n-        while ( !arg.isEmpty() && arg.charAt( 0 ) == '-' )\n-        {\n-            arg = arg.substring( 1 );\n-        }\n-        return arg;\n-    }\n-\n-    private void parseArgs( Function<String,Option<String>> optionParser, String[] args )\n-    {\n-        for ( int i = 0; i < args.length; i++ )\n-        {\n-            String arg = args[ i ];\n-            if ( isOption( arg ) )\n-            {\n-                arg = stripOption( arg );\n-                int equalIndex = arg.indexOf( '=' );\n-                if ( equalIndex != -1 )\n-                {\n-                    String key = arg.substring( 0, equalIndex );\n-                    String value = arg.substring( equalIndex + 1 );\n-                    if ( !value.isEmpty() )\n-                    {\n-                        put( optionParser, key, value );\n-                    }\n-                }\n-                else if ( isFlag( arg ) )\n-                {\n-                    int nextIndex = i + 1;\n-                    String value = nextIndex < args.length ? args[nextIndex] : null;\n-                    if ( isBoolean( value ) )\n-                    {\n-                        i = nextIndex;\n-                        put( optionParser, arg, Boolean.valueOf( value ).toString() );\n-                    }\n-                    else\n-                    {\n-                        put( optionParser, arg, null );\n-                    }\n-                }\n-                else\n-                {\n-                    int nextIndex = i + 1;\n-                    String value = nextIndex < args.length ?\n-                        args[ nextIndex ] : null;\n-                    value = ( value == null || isOption( value ) ) ? null : value;\n-                    if ( value != null )\n-                    {\n-                        i = nextIndex;\n-                    }\n-                    put( optionParser, arg, value );\n-                }\n-            }\n-            else\n-            {\n-                orphans.add( arg );\n-            }\n-        }\n-    }\n-\n-    private void put( Function<String,Option<String>> optionParser, String key, String value )\n-    {\n-        Option<String> option = optionParser.apply( key );\n-        List<Option<String>> values = map.computeIfAbsent( option.value(), k -> new ArrayList<>() );\n-        values.add( new Option<>( value, option.metadata() ) );\n-    }\n-\n-    public static String jarUsage( Class<?> main, String... params )\n-    {\n-        StringBuilder usage = new StringBuilder( \"USAGE: java [-cp ...] \" );\n-        try\n-        {\n-            String jar = main.getProtectionDomain().getCodeSource().getLocation().getPath();\n-            usage.append( \"-jar \" ).append( jar );\n-        }\n-        catch ( Exception ignored )\n-        {\n-        }\n-        usage.append( ' ' ).append( main.getCanonicalName() );\n-        for ( String param : params )\n-        {\n-            usage.append( ' ' ).append( param );\n-        }\n-        return usage.toString();\n-    }\n-\n-    /**\n-     * Useful for printing usage where the description itself shouldn't have knowledge about the width\n-     * of the window where it's printed. Existing new-line characters in the text are honored.\n-     *\n-     * @param description text to split, if needed.\n-     * @param maxLength line length to split at, actually closest previous white space.\n-     * @return description split into multiple lines if need be.\n-     */\n-    public static String[] splitLongLine( String description, int maxLength )\n-    {\n-        List<String> lines = new ArrayList<>();\n-        while ( description.length() > 0 )\n-        {\n-            String line = description.substring( 0, Math.min( maxLength, description.length() ) );\n-            int position = line.indexOf( \"\\n\" );\n-            if ( position > -1 )\n-            {\n-                line = description.substring( 0, position );\n-                lines.add( line );\n-                description = description.substring( position );\n-                if ( description.length() > 0 )\n-                {\n-                    description = description.substring( 1 );\n-                }\n-            }\n-            else\n-            {\n-                position = description.length() > maxLength ?\n-                        findSpaceBefore( description, maxLength ) : description.length();\n-                line = description.substring( 0, position );\n-                lines.add( line );\n-                description = description.substring( position );\n-            }\n-        }\n-        return lines.toArray( new String[0] );\n-    }\n-\n-    private static int findSpaceBefore( String description, int position )\n-    {\n-        while ( !Character.isWhitespace( description.charAt( position ) ) )\n-        {\n-            position--;\n-        }\n-        return position + 1;\n-    }\n-\n-    @SafeVarargs\n-    public final <T> T interpretOption( String key, Function<String,T> defaultValue,\n-            Function<String,T> converter, Validator<T>... validators )\n-    {\n-        T value;\n-        if ( !has( key ) )\n-        {\n-            value = defaultValue.apply( key );\n-        }\n-        else\n-        {\n-            String stringValue = get( key );\n-            value = converter.apply( stringValue );\n-        }\n-        return validated( value, validators );\n-    }\n-\n-    /**\n-     * An option can be specified multiple times; this method will allow interpreting all values for\n-     * the given key, returning a {@link Collection}. This is the only means of extracting multiple values\n-     * for any given option. All other methods revolve around zero or one value for an option.\n-     *\n-     * @param key Key of the option\n-     * @param defaultValue Default value value of the option\n-     * @param converter Converter to use\n-     * @param validators Validators to use\n-     * @param <T> The type of the option values\n-     * @return The option values\n-     */\n-    @SafeVarargs\n-    public final <T> Collection<T> interpretOptions( String key, Function<String,T> defaultValue,\n-            Function<String,T> converter, Validator<T>... validators )\n-    {\n-        Collection<Option<T>> options = interpretOptionsWithMetadata( key, defaultValue, converter, validators );\n-        Collection<T> values = new ArrayList<>( options.size() );\n-        for ( Option<T> option : options )\n-        {\n-            values.add( option.value() );\n-        }\n-        return values;\n-    }\n-\n-    /**\n-     * An option can be specified multiple times; this method will allow interpreting all values for\n-     * the given key, returning a {@link Collection}. This is the only means of extracting multiple values\n-     * for any given option. All other methods revolve around zero or one value for an option.\n-     * This is also the only means of extracting metadata about a options. Metadata can be supplied as part\n-     * of the option key, like --my-option:Metadata \"my value\".\n-     *\n-     * @param key Key of the option\n-     * @param defaultValue Default value value of the option\n-     * @param converter Converter to use\n-     * @param validators Validators to use\n-     * @param <T> The type of the option values\n-     * @return The option values\n-     */\n-    @SafeVarargs\n-    public final <T> Collection<Option<T>> interpretOptionsWithMetadata( String key, Function<String,T> defaultValue,\n-            Function<String,T> converter, Validator<T>... validators )\n-    {\n-        Collection<Option<T>> values = new ArrayList<>();\n-        if ( !hasNonNull( key ) )\n-        {\n-            T defaultItem = defaultValue.apply( key );\n-            if ( defaultItem != null )\n-            {\n-                values.add( new Option<>( validated( defaultItem, validators ), null ) );\n-            }\n-        }\n-        else\n-        {\n-            for ( Option<String> option : map.get( key ) )\n-            {\n-                String stringValue = option.value();\n-                values.add( new Option<>( validated( converter.apply( stringValue ), validators ), option.metadata() ) );\n-            }\n-        }\n-        return values;\n-    }\n-\n-    @SafeVarargs\n-    public final <T> T interpretOrphan( int index, Function<String,T> defaultValue,\n-            Function<String,T> converter, Validator<T>... validators )\n-    {\n-        assert index >= 0;\n-\n-        T value;\n-        if ( index >= orphans.size() )\n-        {\n-            value = defaultValue.apply( \"argument at index \" + index );\n-        }\n-        else\n-        {\n-            String stringValue = orphans.get( index );\n-            value = converter.apply( stringValue );\n-        }\n-        return validated( value, validators );\n-    }\n-\n-    @SafeVarargs\n-    private final <T> T validated( T value, Validator<T>... validators )\n-    {\n-        if ( value != null )\n-        {\n-            for ( Validator<T> validator : validators )\n-            {\n-                validator.validate( value );\n-            }\n-        }\n-        return value;\n-    }\n+      return \"Option[\" + value + (metadata != null ? \", \" + metadata : \"\") + \"]\";\n+    }\n+  }\n+\n+  private static final Function<String, Option<String>> DEFAULT_OPTION_PARSER = from ->\n+  {\n+    int metadataStartIndex = from.indexOf(OPTION_METADATA_DELIMITER);\n+    return metadataStartIndex == -1\n+        ? new Option<>(from, null)\n+        : new Option<>(from.substring(0, metadataStartIndex), from.substring(metadataStartIndex + 1));\n+  };\n+\n+  private final String[] args;\n+  private final String[] flags;\n+  private final Map<String, List<Option<String>>> map = new HashMap<>();\n+  private final List<String> orphans = new ArrayList<>();\n+\n+  public static ArgsParser withFlags(String... flags)\n+  {\n+    return new ArgsParser(flags);\n+  }\n+\n+  public static Args parse(String... args)\n+  {\n+    return withFlags().parse(args);\n+  }\n+\n+  /**\n+   * Suitable for main( String[] args )\n+   *\n+   * @param args the arguments to parse.\n+   */\n+  private Args(String[] flags, String[] args)\n+  {\n+    this(DEFAULT_OPTION_PARSER, flags, args);\n+  }\n+\n+  /**\n+   * Suitable for main( String[] args )\n+   *\n+   * @param flags list of possible flags (e.g -v or -skip-bad). A flag differs from an option in that it\n+   *              has no value after it. This list of flags is used for distinguishing between the two.\n+   * @param args  the arguments to parse.\n+   */\n+  private Args(Function<String, Option<String>> optionParser, String[] flags, String[] args)\n+  {\n+    this.flags = flags;\n+    this.args = args;\n+    parseArgs(optionParser, args);\n+  }\n+\n+  public Args(Map<String, String> source)\n+  {\n+    this(DEFAULT_OPTION_PARSER, source);\n+  }\n+\n+  public Args(Function<String, Option<String>> optionParser, Map<String, String> source)\n+  {\n+    this.flags = new String[] {};\n+    this.args = null;\n+    for (Entry<String, String> entry : source.entrySet())\n+    {\n+      put(optionParser, entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  public String[] source()\n+  {\n+    return this.args;\n+  }\n+\n+  public Map<String, String> asMap()\n+  {\n+    Map<String, String> result = new HashMap<>();\n+    for (Map.Entry<String, List<Option<String>>> entry : map.entrySet())\n+    {\n+      Option<String> value = Iterables.firstOrNull(entry.getValue());\n+      result.put(entry.getKey(), value != null ? value.value() : null);\n+    }\n+    return result;\n+  }\n+\n+  public boolean has(String key)\n+  {\n+    return this.map.containsKey(key);\n+  }\n+\n+  public boolean hasNonNull(String key)\n+  {\n+    List<Option<String>> values = this.map.get(key);\n+    return values != null && !values.isEmpty();\n+  }\n+\n+  private String getSingleOptionOrNull(String key)\n+  {\n+    List<Option<String>> values = this.map.get(key);\n+    if (values == null || values.isEmpty())\n+    {\n+      return null;\n+    } else if (values.size() > 1)\n+    {\n+      throw new IllegalArgumentException(\"There are multiple values for '\" + key + \"'\");\n+    }\n+    return values.get(0).value();\n+  }\n+\n+  /**\n+   * Get a config option by name.\n+   *\n+   * @param key name of the option, without any `-` or `--` prefix, eg. \"o\".\n+   * @return the string value of the option, or null if the user has not specified it\n+   */\n+  public String get(String key)\n+  {\n+    return getSingleOptionOrNull(key);\n+  }\n+\n+  public String get(String key, String defaultValue)\n+  {\n+    String value = getSingleOptionOrNull(key);\n+    return value != null ? value : defaultValue;\n+  }\n+\n+  public String get(String key, String defaultValueIfNotFound, String defaultValueIfNoValue)\n+  {\n+    String value = getSingleOptionOrNull(key);\n+    if (value != null)\n+    {\n+      return value;\n+    }\n+    return this.map.containsKey(key) ? defaultValueIfNoValue : defaultValueIfNotFound;\n+  }\n+\n+  public Number getNumber(String key, Number defaultValue)\n+  {\n+    String value = getSingleOptionOrNull(key);\n+    return value != null ? Double.valueOf(value) : defaultValue;\n+  }\n+\n+  public long getDuration(String key, long defaultValueInMillis)\n+  {\n+    String value = getSingleOptionOrNull(key);\n+    return value != null ? TimeUtil.parseTimeMillis.apply(value) : defaultValueInMillis;\n+  }\n+\n+  /**\n+   * Like calling {@link #getBoolean(String, Boolean)} with {@code false} for default value.\n+   * This is the most common case, i.e. returns {@code true} if boolean argument was specified as:\n+   * <ul>\n+   * <li>--myboolean</li>\n+   * <li>--myboolean=true</li>\n+   * </ul>\n+   * Otherwise {@code false.\n+   * }\n+   *\n+   * @param key argument key.\n+   * @return {@code true} if argument was specified w/o value, or w/ value {@code true}, otherwise {@code false}.\n+   */\n+  public boolean getBoolean(String key)\n+  {\n+    return getBoolean(key, false);\n+  }\n+\n+  /**\n+   * Like calling {@link #getBoolean(String, Boolean, Boolean)} with {@code true} for\n+   * {@code defaultValueIfNoValue}, i.e. specifying {@code --myarg} will interpret it as {@code true}.\n+   *\n+   * @param key                        argument key.\n+   * @param defaultValueIfNotSpecified used if argument not specified.\n+   * @return argument boolean value depending on what was specified, see above.\n+   */\n+  public Boolean getBoolean(String key, Boolean defaultValueIfNotSpecified)\n+  {\n+    return getBoolean(key, defaultValueIfNotSpecified, Boolean.TRUE);\n+  }\n+\n+  /**\n+   * Parses a {@code boolean} argument. There are a couple of cases:\n+   * <ul>\n+   * <li>The argument isn't specified. In this case the value of {@code defaultValueIfNotSpecified}\n+   * will be returned.</li>\n+   * <li>The argument is specified without value, for example <pre>--myboolean</pre>. In this case\n+   * the value of {@code defaultValueIfNotSpecified} will be returned.</li>\n+   * <li>The argument is specified with value, for example <pre>--myboolean=true</pre>.\n+   * In this case the actual value will be returned.</li>\n+   * </ul>\n+   *\n+   * @param key                               argument key.\n+   * @param defaultValueIfNotSpecified        used if argument not specified.\n+   * @param defaultValueIfSpecifiedButNoValue used if argument specified w/o value.\n+   * @return argument boolean value depending on what was specified, see above.\n+   */\n+  public Boolean getBoolean(String key, Boolean defaultValueIfNotSpecified,\n+                            Boolean defaultValueIfSpecifiedButNoValue)\n+  {\n+    String value = getSingleOptionOrNull(key);\n+    if (value != null)\n+    {\n+      return Boolean.valueOf(value);\n+    }\n+    return this.map.containsKey(key) ? defaultValueIfSpecifiedButNoValue : defaultValueIfNotSpecified;\n+  }\n+\n+  public <T extends Enum<T>> T getEnum(Class<T> enumClass, String key, T defaultValue)\n+  {\n+    String raw = getSingleOptionOrNull(key);\n+    if (raw == null)\n+    {\n+      return defaultValue;\n+    }\n+\n+    for (T candidate : enumClass.getEnumConstants())\n+    {\n+      if (candidate.name().equals(raw))\n+      {\n+        return candidate;\n+      }\n+    }\n+    throw new IllegalArgumentException(\"No enum instance '\" + raw + \"' in \" + enumClass.getName());\n+  }\n+\n+  /**\n+   * Orphans are arguments specified without options flags, eg:\n+   *\n+   * <pre>myprogram -o blah orphan1 orphan2</pre>\n+   * <p>\n+   * Would yield a list here of {@code \"orphan1\"} and {@code \"orphan2\"}.\n+   *\n+   * @return list of orphan arguments\n+   */\n+  public List<String> orphans()\n+  {\n+    return new ArrayList<>(this.orphans);\n+  }\n+\n+  /**\n+   * @return list of orphan arguments.\n+   * @see #orphans()\n+   */\n+  public String[] orphansAsArray()\n+  {\n+    return orphans.toArray(new String[0]);\n+  }\n+\n+  public String[] asArgs()\n+  {\n+    List<String> list = new ArrayList<>(orphans.size());\n+    for (String orphan : orphans)\n+    {\n+      String quote = orphan.contains(\" \") ? \" \" : \"\";\n+      list.add(quote + orphan + quote);\n+    }\n+    for (Map.Entry<String, List<Option<String>>> entry : map.entrySet())\n+    {\n+      for (Option<String> option : entry.getValue())\n+      {\n+        String key = option.metadata != null\n+            ? entry.getKey() + OPTION_METADATA_DELIMITER + option.metadata()\n+            : entry.getKey();\n+        String value = option.value();\n+        String quote = key.contains(\" \") || (value != null && value.contains(\" \")) ? \" \" : \"\";\n+        list.add(quote + (key.length() > 1 ? \"--\" : \"-\") + key + (value != null ? \"=\" + value + quote : \"\"));\n+      }\n+    }\n+    return list.toArray(new String[0]);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    for (String arg : asArgs())\n+    {\n+      builder.append(builder.length() > 0 ? \" \" : \"\").append(arg);\n+    }\n+    return builder.toString();\n+  }\n+\n+  private static boolean isOption(String arg)\n+  {\n+    return arg.startsWith(\"-\") && arg.length() > 1;\n+  }\n+\n+  private boolean isFlag(String arg)\n+  {\n+    return ArrayUtil.contains(flags, arg);\n+  }\n+\n+  private static boolean isBoolean(String value)\n+  {\n+    return \"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value);\n+  }\n+\n+  private static String stripOption(String arg)\n+  {\n+    while (!arg.isEmpty() && arg.charAt(0) == '-')\n+    {\n+      arg = arg.substring(1);\n+    }\n+    return arg;\n+  }\n+\n+  private void parseArgs(Function<String, Option<String>> optionParser, String[] args)\n+  {\n+    for (int i = 0; i < args.length; i++)\n+    {\n+      String arg = args[i];\n+      if (isOption(arg))\n+      {\n+        arg = stripOption(arg);\n+        int equalIndex = arg.indexOf('=');\n+        if (equalIndex != -1)\n+        {\n+          String key = arg.substring(0, equalIndex);\n+          String value = arg.substring(equalIndex + 1);\n+          if (!value.isEmpty())\n+          {\n+            put(optionParser, key, value);\n+          }\n+        } else if (isFlag(arg))\n+        {\n+          int nextIndex = i + 1;\n+          String value = nextIndex < args.length ? args[nextIndex] : null;\n+          if (isBoolean(value))\n+          {\n+            i = nextIndex;\n+            put(optionParser, arg, Boolean.valueOf(value).toString());\n+          } else\n+          {\n+            put(optionParser, arg, null);\n+          }\n+        } else\n+        {\n+          int nextIndex = i + 1;\n+          String value = nextIndex < args.length ?\n+              args[nextIndex] : null;\n+          value = (value == null || isOption(value)) ? null : value;\n+          if (value != null)\n+          {\n+            i = nextIndex;\n+          }\n+          put(optionParser, arg, value);\n+        }\n+      } else\n+      {\n+        orphans.add(arg);\n+      }\n+    }\n+  }\n+\n+  private void put(Function<String, Option<String>> optionParser, String key, String value)\n+  {\n+    Option<String> option = optionParser.apply(key);\n+    List<Option<String>> values = map.computeIfAbsent(option.value(), k -> new ArrayList<>());\n+    values.add(new Option<>(value, option.metadata()));\n+  }\n+\n+  public static String jarUsage(Class<?> main, String... params)\n+  {\n+    StringBuilder usage = new StringBuilder(\"USAGE: java [-cp ...] \");\n+    try\n+    {\n+      String jar = main.getProtectionDomain().getCodeSource().getLocation().getPath();\n+      usage.append(\"-jar \").append(jar);\n+    } catch (Exception ignored)\n+    {\n+    }\n+    usage.append(' ').append(main.getCanonicalName());\n+    for (String param : params)\n+    {\n+      usage.append(' ').append(param);\n+    }\n+    return usage.toString();\n+  }\n+\n+  /**\n+   * Useful for printing usage where the description itself shouldn't have knowledge about the width\n+   * of the window where it's printed. Existing new-line characters in the text are honored.\n+   *\n+   * @param description text to split, if needed.\n+   * @param maxLength   line length to split at, actually closest previous white space.\n+   * @return description split into multiple lines if need be.\n+   */\n+  public static String[] splitLongLine(String description, int maxLength)\n+  {\n+    List<String> lines = new ArrayList<>();\n+    while (description.length() > 0)\n+    {\n+      String line = description.substring(0, Math.min(maxLength, description.length()));\n+      int position = line.indexOf(\"\\n\");\n+      if (position > -1)\n+      {\n+        line = description.substring(0, position);\n+        lines.add(line);\n+        description = description.substring(position);\n+        if (description.length() > 0)\n+        {\n+          description = description.substring(1);\n+        }\n+      } else\n+      {\n+        position = description.length() > maxLength ?\n+            findSpaceBefore(description, maxLength) : description.length();\n+        line = description.substring(0, position);\n+        lines.add(line);\n+        description = description.substring(position);\n+      }\n+    }\n+    return lines.toArray(new String[0]);\n+  }\n+\n+  private static int findSpaceBefore(String description, int position)\n+  {\n+    while (!Character.isWhitespace(description.charAt(position)))\n+    {\n+      position--;\n+    }\n+    return position + 1;\n+  }\n+\n+  @SafeVarargs\n+  public final <T> T interpretOption(String key, Function<String, T> defaultValue,\n+                                     Function<String, T> converter, Validator<T>... validators)\n+  {\n+    T value;\n+    if (!has(key))\n+    {\n+      value = defaultValue.apply(key);\n+    } else\n+    {\n+      String stringValue = get(key);\n+      value = converter.apply(stringValue);\n+    }\n+    return validated(value, validators);\n+  }\n+\n+  /**\n+   * An option can be specified multiple times; this method will allow interpreting all values for\n+   * the given key, returning a {@link Collection}. This is the only means of extracting multiple values\n+   * for any given option. All other methods revolve around zero or one value for an option.\n+   *\n+   * @param key          Key of the option\n+   * @param defaultValue Default value value of the option\n+   * @param converter    Converter to use\n+   * @param validators   Validators to use\n+   * @param <T>          The type of the option values\n+   * @return The option values\n+   */\n+  @SafeVarargs\n+  public final <T> Collection<T> interpretOptions(String key, Function<String, T> defaultValue,\n+                                                  Function<String, T> converter, Validator<T>... validators)\n+  {\n+    Collection<Option<T>> options = interpretOptionsWithMetadata(key, defaultValue, converter, validators);\n+    Collection<T> values = new ArrayList<>(options.size());\n+    for (Option<T> option : options)\n+    {\n+      values.add(option.value());\n+    }\n+    return values;\n+  }\n+\n+  /**\n+   * An option can be specified multiple times; this method will allow interpreting all values for\n+   * the given key, returning a {@link Collection}. This is the only means of extracting multiple values\n+   * for any given option. All other methods revolve around zero or one value for an option.\n+   * This is also the only means of extracting metadata about a options. Metadata can be supplied as part\n+   * of the option key, like --my-option:Metadata \"my value\".\n+   *\n+   * @param key          Key of the option\n+   * @param defaultValue Default value value of the option\n+   * @param converter    Converter to use\n+   * @param validators   Validators to use\n+   * @param <T>          The type of the option values\n+   * @return The option values\n+   */\n+  @SafeVarargs\n+  public final <T> Collection<Option<T>> interpretOptionsWithMetadata(String key, Function<String, T> defaultValue,\n+                                                                      Function<String, T> converter, Validator<T>... validators)\n+  {\n+    Collection<Option<T>> values = new ArrayList<>();\n+    if (!hasNonNull(key))\n+    {\n+      T defaultItem = defaultValue.apply(key);\n+      if (defaultItem != null)\n+      {\n+        values.add(new Option<>(validated(defaultItem, validators), null));\n+      }\n+    } else\n+    {\n+      for (Option<String> option : map.get(key))\n+      {\n+        String stringValue = option.value();\n+        values.add(new Option<>(validated(converter.apply(stringValue), validators), option.metadata()));\n+      }\n+    }\n+    return values;\n+  }\n+\n+  @SafeVarargs\n+  public final <T> T interpretOrphan(int index, Function<String, T> defaultValue,\n+                                     Function<String, T> converter, Validator<T>... validators)\n+  {\n+    assert index >= 0;\n+\n+    T value;\n+    if (index >= orphans.size())\n+    {\n+      value = defaultValue.apply(\"argument at index \" + index);\n+    } else\n+    {\n+      String stringValue = orphans.get(index);\n+      value = converter.apply(stringValue);\n+    }\n+    return validated(value, validators);\n+  }\n+\n+  @SafeVarargs\n+  private final <T> T validated(T value, Validator<T>... validators)\n+  {\n+    if (value != null)\n+    {\n+      for (Validator<T> validator : validators)\n+      {\n+        validator.validate(value);\n+      }\n+    }\n+    return value;\n+  }\n }\n",
            "diff_size": 821
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "595",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3633/Args.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3633/Args.java\nindex 68d01a66a3b..dce87c0a8c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3633/Args.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3633/Args.java\n@@ -115,9 +115,7 @@ public class Args\n     private static final Function<String,Option<String>> DEFAULT_OPTION_PARSER = from ->\n     {\n         int metadataStartIndex = from.indexOf( OPTION_METADATA_DELIMITER );\n-        return metadataStartIndex == -1\n-                ? new Option<>( from, null )\n-                : new Option<>( from.substring( 0, metadataStartIndex ), from.substring( metadataStartIndex + 1 ) );\n+        return metadataStartIndex == -1 ? new Option<>( from, null ) : new Option<>( from.substring( 0, metadataStartIndex ), from.substring( metadataStartIndex + 1 ) );\n     };\n \n     private final String[] args;\n@@ -154,17 +152,19 @@ public class Args\n     {\n         this.flags = flags;\n         this.args = args;\n-        parseArgs( optionParser, args );\n+\n+parseArgs( optionParser, args );\n     }\n \n-    public Args( Map<String, String> source )\n+    public Args( Map<String,String> source )\n     {\n         this( DEFAULT_OPTION_PARSER, source );\n     }\n \n-    public Args( Function<String,Option<String>> optionParser, Map<String, String> source )\n+    public Args( Function<String,Option<String>> optionParser, Map<String,String> source )\n     {\n-        this.flags = new String[] {};\n+        this.flags = new String[]{\n+};\n         this.args = null;\n         for ( Entry<String,String> entry : source.entrySet() )\n         {\n@@ -177,7 +177,7 @@ public class Args\n         return this.args;\n     }\n \n-    public Map<String, String> asMap()\n+    public Map<String,String> asMap()\n     {\n         Map<String,String> result = new HashMap<>();\n         for ( Map.Entry<String,List<Option<String>>> entry : map.entrySet() )\n@@ -185,10 +185,11 @@ public class Args\n             Option<String> value = Iterables.firstOrNull( entry.getValue() );\n             result.put( entry.getKey(), value != null ? value.value() : null );\n         }\n-        return result;\n+\n+return result;\n     }\n \n-    public boolean has( String  key )\n+    public boolean has( String key )\n     {\n         return this.map.containsKey( key );\n     }\n@@ -210,7 +211,8 @@ public class Args\n         {\n             throw new IllegalArgumentException( \"There are multiple values for '\" + key + \"'\" );\n         }\n-        return values.get( 0 ).value();\n+\n+return values.get( 0 ).value();\n     }\n \n     /**\n@@ -361,10 +363,8 @@ public class Args\n         {\n             for ( Option<String> option : entry.getValue() )\n             {\n-                String key = option.metadata != null\n-                        ? entry.getKey() + OPTION_METADATA_DELIMITER + option.metadata()\n-                        : entry.getKey();\n-                String value = option.value();\n+                String key = option.metadata != null ? entry.getKey() + OPTION_METADATA_DELIMITER + option.metadata() : entry.getKey();\n+String value = option.value();\n                 String quote = key.contains( \" \" ) || (value != null && value.contains( \" \" )) ? \" \" : \"\";\n                 list.add( quote + (key.length() > 1 ? \"--\" : \"-\") + key + (value != null ? \"=\" + value + quote : \"\") );\n             }\n@@ -380,7 +380,8 @@ public class Args\n         {\n             builder.append( builder.length() > 0 ? \" \" : \"\" ).append( arg );\n         }\n-        return builder.toString();\n+\n+return builder.toString();\n     }\n \n     private static boolean isOption( String arg )\n@@ -404,7 +405,8 @@ public class Args\n         {\n             arg = arg.substring( 1 );\n         }\n-        return arg;\n+\n+return arg;\n     }\n \n     private void parseArgs( Function<String,Option<String>> optionParser, String[] args )\n@@ -432,7 +434,8 @@ public class Args\n                     if ( isBoolean( value ) )\n                     {\n                         i = nextIndex;\n-                        put( optionParser, arg, Boolean.valueOf( value ).toString() );\n+\n+put( optionParser, arg, Boolean.valueOf( value ).toString() );\n                     }\n                     else\n                     {\n@@ -442,14 +445,14 @@ public class Args\n                 else\n                 {\n                     int nextIndex = i + 1;\n-                    String value = nextIndex < args.length ?\n-                        args[ nextIndex ] : null;\n+                    String value = nextIndex < args.length ? args[ nextIndex ] : null;\n                     value = ( value == null || isOption( value ) ) ? null : value;\n                     if ( value != null )\n                     {\n                         i = nextIndex;\n                     }\n-                    put( optionParser, arg, value );\n+\n+put( optionParser, arg, value );\n                 }\n             }\n             else\n@@ -482,7 +485,8 @@ public class Args\n         {\n             usage.append( ' ' ).append( param );\n         }\n-        return usage.toString();\n+\n+return usage.toString();\n     }\n \n     /**\n@@ -512,9 +516,8 @@ public class Args\n             }\n             else\n             {\n-                position = description.length() > maxLength ?\n-                        findSpaceBefore( description, maxLength ) : description.length();\n-                line = description.substring( 0, position );\n+                position = description.length() > maxLength ? findSpaceBefore( description, maxLength ) : description.length();\n+line = description.substring( 0, position );\n                 lines.add( line );\n                 description = description.substring( position );\n             }\n@@ -528,12 +531,12 @@ public class Args\n         {\n             position--;\n         }\n-        return position + 1;\n+\n+return position + 1;\n     }\n \n     @SafeVarargs\n-    public final <T> T interpretOption( String key, Function<String,T> defaultValue,\n-            Function<String,T> converter, Validator<T>... validators )\n+    public final <T> T interpretOption( String key, Function<String,T> defaultValue, Function<String,T> converter, Validator<T>... validators )\n     {\n         T value;\n         if ( !has( key ) )\n@@ -545,7 +548,8 @@ public class Args\n             String stringValue = get( key );\n             value = converter.apply( stringValue );\n         }\n-        return validated( value, validators );\n+\n+return validated( value, validators );\n     }\n \n     /**\n@@ -561,8 +565,7 @@ public class Args\n      * @return The option values\n      */\n     @SafeVarargs\n-    public final <T> Collection<T> interpretOptions( String key, Function<String,T> defaultValue,\n-            Function<String,T> converter, Validator<T>... validators )\n+    public final <T> Collection<T> interpretOptions( String key, Function<String,T> defaultValue, Function<String,T> converter, Validator<T>... validators )\n     {\n         Collection<Option<T>> options = interpretOptionsWithMetadata( key, defaultValue, converter, validators );\n         Collection<T> values = new ArrayList<>( options.size() );\n@@ -570,7 +573,8 @@ public class Args\n         {\n             values.add( option.value() );\n         }\n-        return values;\n+\n+return values;\n     }\n \n     /**\n@@ -588,8 +592,7 @@ public class Args\n      * @return The option values\n      */\n     @SafeVarargs\n-    public final <T> Collection<Option<T>> interpretOptionsWithMetadata( String key, Function<String,T> defaultValue,\n-            Function<String,T> converter, Validator<T>... validators )\n+    public final <T> Collection<Option<T>> interpretOptionsWithMetadata( String key, Function<String,T> defaultValue, Function<String,T> converter, Validator<T>... validators )\n     {\n         Collection<Option<T>> values = new ArrayList<>();\n         if ( !hasNonNull( key ) )\n@@ -612,8 +615,7 @@ public class Args\n     }\n \n     @SafeVarargs\n-    public final <T> T interpretOrphan( int index, Function<String,T> defaultValue,\n-            Function<String,T> converter, Validator<T>... validators )\n+    public final <T> T interpretOrphan( int index, Function<String,T> defaultValue, Function<String,T> converter, Validator<T>... validators )\n     {\n         assert index >= 0;\n \n@@ -627,7 +629,8 @@ public class Args\n             String stringValue = orphans.get( index );\n             value = converter.apply( stringValue );\n         }\n-        return validated( value, validators );\n+\n+return validated( value, validators );\n     }\n \n     @SafeVarargs\n@@ -642,4 +645,4 @@ public class Args\n         }\n         return value;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}