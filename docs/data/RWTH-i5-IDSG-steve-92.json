{
    "project_name": "RWTH-i5-IDSG-steve",
    "error_id": "92",
    "information": {
        "errors": [
            {
                "line": "54",
                "column": "113",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n        if (externalFileName == null) {\n            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n                    \"which will be prioritized over the bundled one\", name);\n            loadFromClasspath(name);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "55",
                    "column": "13",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/92/PropertiesFileLoader.java\nindex ecd1d4b1496..2872ef38e01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/92/PropertiesFileLoader.java\n@@ -51,8 +51,8 @@ public class PropertiesFileLoader {\n         String externalFileName = System.getProperty(name);\n \n         if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n-                    \"which will be prioritized over the bundled one\", name);\n+            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \"\n+            +\"which will be prioritized over the bundled one\", name);\n             loadFromClasspath(name);\n \n         } else {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "55",
                    "column": "107",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/92/PropertiesFileLoader.java\nindex ecd1d4b1496..d87cc40e83f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/92/PropertiesFileLoader.java\n@@ -16,6 +16,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n  */\n+\n package de.rwth.idsg.steve.utils;\n \n import com.google.common.base.Splitter;\n@@ -40,140 +41,140 @@ import java.util.Properties;\n @Slf4j\n public class PropertiesFileLoader {\n \n-    private Properties prop;\n+  private Properties prop;\n \n-    /**\n-     * The name parameter acts as\n-     * 1) the file name to load from classpath, and\n-     * 2) the system property which can be set to load from file system.\n-     */\n-    public PropertiesFileLoader(String name) {\n-        String externalFileName = System.getProperty(name);\n+  /**\n+   * The name parameter acts as\n+   * 1) the file name to load from classpath, and\n+   * 2) the system property which can be set to load from file system.\n+   */\n+  public PropertiesFileLoader(String name) {\n+    String externalFileName = System.getProperty(name);\n \n-        if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n-                    \"which will be prioritized over the bundled one\", name);\n-            loadFromClasspath(name);\n+    if (externalFileName == null) {\n+      log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n+        \"which will be prioritized over the bundled one\", name);\n+      loadFromClasspath(name);\n \n-        } else {\n-            loadFromSystem(externalFileName);\n-        }\n+    } else {\n+      loadFromSystem(externalFileName);\n     }\n+  }\n \n-    // -------------------------------------------------------------------------\n-    // Strict\n-    // -------------------------------------------------------------------------\n-\n-    public String getString(String key) {\n-        String s = prop.getProperty(key);\n+  // -------------------------------------------------------------------------\n+  // Strict\n+  // -------------------------------------------------------------------------\n \n-        if (s == null) {\n-            throw new IllegalArgumentException(\"The property '\" + key + \"' is not found\");\n-        }\n+  public String getString(String key) {\n+    String s = prop.getProperty(key);\n \n-        if (s.isEmpty()) {\n-            throw new IllegalArgumentException(\"The property '\" + key + \"' has no value set\");\n-        }\n-\n-        s = resolveIfSystemEnv(s);\n-        return trim(key, s);\n+    if (s == null) {\n+      throw new IllegalArgumentException(\"The property '\" + key + \"' is not found\");\n     }\n \n-    public boolean getBoolean(String key) {\n-        return Boolean.parseBoolean(getString(key));\n+    if (s.isEmpty()) {\n+      throw new IllegalArgumentException(\"The property '\" + key + \"' has no value set\");\n     }\n \n-    public int getInt(String key) {\n-        return Integer.parseInt(getString(key));\n-    }\n+    s = resolveIfSystemEnv(s);\n+    return trim(key, s);\n+  }\n \n-    // -------------------------------------------------------------------------\n-    // Return null if not set\n-    // -------------------------------------------------------------------------\n-\n-    public String getOptionalString(String key) {\n-        String s = prop.getProperty(key);\n-        if (Strings.isNullOrEmpty(s)) {\n-            return null;\n-        }\n-        s = resolveIfSystemEnv(s);\n-        return trim(key, s);\n-    }\n+  public boolean getBoolean(String key) {\n+    return Boolean.parseBoolean(getString(key));\n+  }\n \n-    public List<String> getStringList(String key) {\n-        String s = prop.getProperty(key);\n-        if (Strings.isNullOrEmpty(s)) {\n-            return Collections.emptyList();\n-        }\n-        s = resolveIfSystemEnv(s);\n-        return Splitter.on(\",\")\n-                       .trimResults()\n-                       .omitEmptyStrings()\n-                       .splitToList(s);\n-    }\n+  public int getInt(String key) {\n+    return Integer.parseInt(getString(key));\n+  }\n \n-    public boolean getOptionalBoolean(String key) {\n-        String s = getOptionalString(key);\n-        if (s == null) {\n-            // In this special case, to make findbugs happy, we don't return null.\n-            // Reason: http://findbugs.sourceforge.net/bugDescriptions.html#NP_BOOLEAN_RETURN_NULL\n-            return false;\n-        } else {\n-            return Boolean.parseBoolean(s);\n-        }\n-    }\n+  // -------------------------------------------------------------------------\n+  // Return null if not set\n+  // -------------------------------------------------------------------------\n \n-    public Integer getOptionalInt(String key) {\n-        String s = getOptionalString(key);\n-        if (s == null) {\n-            return null;\n-        } else {\n-            return Integer.parseInt(s);\n-        }\n+  public String getOptionalString(String key) {\n+    String s = prop.getProperty(key);\n+    if (Strings.isNullOrEmpty(s)) {\n+      return null;\n     }\n-\n-    // -------------------------------------------------------------------------\n-    // Private helpers\n-    // -------------------------------------------------------------------------\n-\n-    private void loadFromSystem(String fileName) {\n-        try (FileInputStream inputStream = new FileInputStream(fileName)) {\n-            prop = new Properties();\n-            prop.load(inputStream);\n-            log.info(\"Loaded properties from {}\", fileName);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n+    s = resolveIfSystemEnv(s);\n+    return trim(key, s);\n+  }\n+\n+  public List<String> getStringList(String key) {\n+    String s = prop.getProperty(key);\n+    if (Strings.isNullOrEmpty(s)) {\n+      return Collections.emptyList();\n     }\n-\n-    private void loadFromClasspath(String fileName) {\n-        try (InputStream is = this.getClass().getClassLoader().getResourceAsStream(fileName)) {\n-            if (is == null) {\n-                throw new FileNotFoundException(\"Property file '\" + fileName + \"' is not found in classpath\");\n-            }\n-            prop = new Properties();\n-            prop.load(is);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n+    s = resolveIfSystemEnv(s);\n+    return Splitter.on(\",\")\n+      .trimResults()\n+      .omitEmptyStrings()\n+      .splitToList(s);\n+  }\n+\n+  public boolean getOptionalBoolean(String key) {\n+    String s = getOptionalString(key);\n+    if (s == null) {\n+      // In this special case, to make findbugs happy, we don't return null.\n+      // Reason: http://findbugs.sourceforge.net/bugDescriptions.html#NP_BOOLEAN_RETURN_NULL\n+      return false;\n+    } else {\n+      return Boolean.parseBoolean(s);\n     }\n-\n-    /**\n-     * If the first character of the value of the property is a dollar sign, we deduce that this property points to a\n-     * system environment variable and look it up.\n-     */\n-    private static String resolveIfSystemEnv(@NotNull String value) {\n-        if (\"$\".equals(String.valueOf(value.charAt(0)))) {\n-            return System.getenv(value.substring(1));\n-        }\n-        return value;\n+  }\n+\n+  public Integer getOptionalInt(String key) {\n+    String s = getOptionalString(key);\n+    if (s == null) {\n+      return null;\n+    } else {\n+      return Integer.parseInt(s);\n+    }\n+  }\n+\n+  // -------------------------------------------------------------------------\n+  // Private helpers\n+  // -------------------------------------------------------------------------\n+\n+  private void loadFromSystem(String fileName) {\n+    try (FileInputStream inputStream = new FileInputStream(fileName)) {\n+      prop = new Properties();\n+      prop.load(inputStream);\n+      log.info(\"Loaded properties from {}\", fileName);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private void loadFromClasspath(String fileName) {\n+    try (InputStream is = this.getClass().getClassLoader().getResourceAsStream(fileName)) {\n+      if (is == null) {\n+        throw new FileNotFoundException(\"Property file '\" + fileName + \"' is not found in classpath\");\n+      }\n+      prop = new Properties();\n+      prop.load(is);\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  /**\n+   * If the first character of the value of the property is a dollar sign, we deduce that this property points to a\n+   * system environment variable and look it up.\n+   */\n+  private static String resolveIfSystemEnv(@NotNull String value) {\n+    if (\"$\".equals(String.valueOf(value.charAt(0)))) {\n+      return System.getenv(value.substring(1));\n     }\n+    return value;\n+  }\n \n-    private static String trim(String key, String value) {\n-        String trimmed = value.trim();\n-        if (!trimmed.equals(value)) {\n-            log.warn(\"The property '{}' has leading or trailing spaces which were removed!\", key);\n-        }\n-        return trimmed;\n+  private static String trim(String key, String value) {\n+    String trimmed = value.trim();\n+    if (!trimmed.equals(value)) {\n+      log.warn(\"The property '{}' has leading or trailing spaces which were removed!\", key);\n     }\n+    return trimmed;\n+  }\n }\n",
            "diff_size": 159
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/92/PropertiesFileLoader.java\nindex ecd1d4b1496..7c5ada744b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/92/PropertiesFileLoader.java\n@@ -15,8 +15,7 @@\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n- */\n-package de.rwth.idsg.steve.utils;\n+ */package de.rwth.idsg.steve.utils;\n \n import com.google.common.base.Splitter;\n import com.google.common.base.Strings;\n@@ -51,8 +50,7 @@ public class PropertiesFileLoader {\n         String externalFileName = System.getProperty(name);\n \n         if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n-                    \"which will be prioritized over the bundled one\", name);\n+            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" + \"which will be prioritized over the bundled one\", name);\n             loadFromClasspath(name);\n \n         } else {\n@@ -176,4 +174,4 @@ public class PropertiesFileLoader {\n         }\n         return trimmed;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/92/PropertiesFileLoader.java\nindex ecd1d4b1496..62a63ad8875 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/92/PropertiesFileLoader.java\n@@ -22,7 +22,6 @@ import com.google.common.base.Splitter;\n import com.google.common.base.Strings;\n import lombok.extern.slf4j.Slf4j;\n import org.jetbrains.annotations.NotNull;\n-\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n@@ -37,9 +36,10 @@ import java.util.Properties;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 01.10.2015\n  */\n+\n+\n @Slf4j\n public class PropertiesFileLoader {\n-\n     private Properties prop;\n \n     /**\n@@ -47,14 +47,12 @@ public class PropertiesFileLoader {\n      * 1) the file name to load from classpath, and\n      * 2) the system property which can be set to load from file system.\n      */\n+\n     public PropertiesFileLoader(String name) {\n         String externalFileName = System.getProperty(name);\n-\n         if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n-                    \"which will be prioritized over the bundled one\", name);\n+            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" + \"which will be prioritized over the bundled one\", name);\n             loadFromClasspath(name);\n-\n         } else {\n             loadFromSystem(externalFileName);\n         }\n@@ -66,7 +64,6 @@ public class PropertiesFileLoader {\n \n     public String getString(String key) {\n         String s = prop.getProperty(key);\n-\n         if (s == null) {\n             throw new IllegalArgumentException(\"The property '\" + key + \"' is not found\");\n         }\n@@ -96,6 +93,7 @@ public class PropertiesFileLoader {\n         if (Strings.isNullOrEmpty(s)) {\n             return null;\n         }\n+\n         s = resolveIfSystemEnv(s);\n         return trim(key, s);\n     }\n@@ -105,11 +103,12 @@ public class PropertiesFileLoader {\n         if (Strings.isNullOrEmpty(s)) {\n             return Collections.emptyList();\n         }\n+\n         s = resolveIfSystemEnv(s);\n         return Splitter.on(\",\")\n-                       .trimResults()\n-                       .omitEmptyStrings()\n-                       .splitToList(s);\n+            .trimResults()\n+            .omitEmptyStrings()\n+            .splitToList(s);\n     }\n \n     public boolean getOptionalBoolean(String key) {\n@@ -147,10 +146,13 @@ public class PropertiesFileLoader {\n     }\n \n     private void loadFromClasspath(String fileName) {\n-        try (InputStream is = this.getClass().getClassLoader().getResourceAsStream(fileName)) {\n+        try (InputStream is = this.getClass()\n+                                  .getClassLoader()\n+                                  .getResourceAsStream(fileName)) {\n             if (is == null) {\n                 throw new FileNotFoundException(\"Property file '\" + fileName + \"' is not found in classpath\");\n             }\n+\n             prop = new Properties();\n             prop.load(is);\n         } catch (Exception e) {\n@@ -162,6 +164,7 @@ public class PropertiesFileLoader {\n      * If the first character of the value of the property is a dollar sign, we deduce that this property points to a\n      * system environment variable and look it up.\n      */\n+\n     private static String resolveIfSystemEnv(@NotNull String value) {\n         if (\"$\".equals(String.valueOf(value.charAt(0)))) {\n             return System.getenv(value.substring(1));\n@@ -176,4 +179,4 @@ public class PropertiesFileLoader {\n         }\n         return trimmed;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "54",
                    "column": "112",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "54",
                    "column": "112",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/92/PropertiesFileLoader.java\nindex ecd1d4b1496..f6fae0aaf97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/92/PropertiesFileLoader.java\n@@ -51,7 +51,7 @@ public class PropertiesFileLoader {\n         String externalFileName = System.getProperty(name);\n \n         if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n+            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \"+\n                     \"which will be prioritized over the bundled one\", name);\n             loadFromClasspath(name);\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "column": "13",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/92/PropertiesFileLoader.java\nindex ecd1d4b1496..2872ef38e01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/92/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/92/PropertiesFileLoader.java\n@@ -51,8 +51,8 @@ public class PropertiesFileLoader {\n         String externalFileName = System.getProperty(name);\n \n         if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n-                    \"which will be prioritized over the bundled one\", name);\n+            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \"\n+            +\"which will be prioritized over the bundled one\", name);\n             loadFromClasspath(name);\n \n         } else {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}