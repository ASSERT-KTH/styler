{
    "project_name": "neo4j-neo4j",
    "error_id": "314",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/314/ProcedureVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/314/ProcedureVisitor.java\nindex f742356e4e9..1e03a12936c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/314/ProcedureVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/314/ProcedureVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tooling.procedure.visitors;\n \n import java.util.List;\n@@ -36,63 +37,63 @@ import org.neo4j.tooling.procedure.compilerutils.TypeMirrorUtils;\n import org.neo4j.tooling.procedure.messages.CompilationMessage;\n import org.neo4j.tooling.procedure.messages.ReturnTypeError;\n \n-public class ProcedureVisitor extends SimpleElementVisitor8<Stream<CompilationMessage>,Void>\n+public class ProcedureVisitor extends SimpleElementVisitor8<Stream<CompilationMessage>, Void>\n {\n \n     private final Types typeUtils;\n     private final Elements elementUtils;\n-    private final ElementVisitor<Stream<CompilationMessage>,Void> classVisitor;\n-    private final TypeVisitor<Stream<CompilationMessage>,Void> recordVisitor;\n-    private final ElementVisitor<Stream<CompilationMessage>,Void> parameterVisitor;\n+    private final ElementVisitor<Stream<CompilationMessage>, Void> classVisitor;\n+    private final TypeVisitor<Stream<CompilationMessage>, Void> recordVisitor;\n+    private final ElementVisitor<Stream<CompilationMessage>, Void> parameterVisitor;\n \n-    public ProcedureVisitor( Types typeUtils, Elements elementUtils, boolean ignoresWarnings )\n+    public ProcedureVisitor(Types typeUtils, Elements elementUtils, boolean ignoresWarnings)\n     {\n-        TypeMirrorUtils typeMirrors = new TypeMirrorUtils( typeUtils, elementUtils );\n+        TypeMirrorUtils typeMirrors = new TypeMirrorUtils(typeUtils, elementUtils);\n \n         this.typeUtils = typeUtils;\n         this.elementUtils = elementUtils;\n-        this.classVisitor = new ExtensionClassVisitor( typeUtils, elementUtils, ignoresWarnings );\n-        this.recordVisitor = new RecordTypeVisitor( typeUtils, typeMirrors );\n-        this.parameterVisitor = new ParameterVisitor( new ParameterTypeVisitor( typeUtils, typeMirrors ) );\n+        this.classVisitor = new ExtensionClassVisitor(typeUtils, elementUtils, ignoresWarnings);\n+        this.recordVisitor = new RecordTypeVisitor(typeUtils, typeMirrors);\n+        this.parameterVisitor = new ParameterVisitor(new ParameterTypeVisitor(typeUtils, typeMirrors));\n     }\n \n     /**\n      * Validates method parameters and return type\n      */\n     @Override\n-    public Stream<CompilationMessage> visitExecutable( ExecutableElement executableElement, Void ignored )\n+    public Stream<CompilationMessage> visitExecutable(ExecutableElement executableElement, Void ignored)\n     {\n-        return Stream.of( classVisitor.visit( executableElement.getEnclosingElement() ),\n-                validateParameters( executableElement.getParameters() ),\n-                validateReturnType( executableElement ) )\n-                .flatMap( Function.identity() );\n+        return Stream.of(classVisitor.visit(executableElement.getEnclosingElement()),\n+          validateParameters(executableElement.getParameters()),\n+          validateReturnType(executableElement))\n+          .flatMap(Function.identity());\n     }\n \n-    private Stream<CompilationMessage> validateParameters( List<? extends VariableElement> parameters )\n+    private Stream<CompilationMessage> validateParameters(List<? extends VariableElement> parameters)\n     {\n-        return parameters.stream().flatMap( parameterVisitor::visit );\n+        return parameters.stream().flatMap(parameterVisitor::visit);\n     }\n \n-    private Stream<CompilationMessage> validateReturnType( ExecutableElement method )\n+    private Stream<CompilationMessage> validateReturnType(ExecutableElement method)\n     {\n         String streamClassName = Stream.class.getCanonicalName();\n \n-        TypeMirror streamType = typeUtils.erasure( elementUtils.getTypeElement( streamClassName ).asType() );\n+        TypeMirror streamType = typeUtils.erasure(elementUtils.getTypeElement(streamClassName).asType());\n         TypeMirror returnType = method.getReturnType();\n-        TypeMirror erasedReturnType = typeUtils.erasure( returnType );\n+        TypeMirror erasedReturnType = typeUtils.erasure(returnType);\n \n-        TypeMirror voidType = typeUtils.getNoType( TypeKind.VOID );\n-        if ( typeUtils.isSameType( returnType, voidType ) )\n+        TypeMirror voidType = typeUtils.getNoType(TypeKind.VOID);\n+        if (typeUtils.isSameType(returnType, voidType))\n         {\n             return Stream.empty();\n         }\n \n-        if ( !typeUtils.isSubtype( erasedReturnType, streamType ) )\n+        if (!typeUtils.isSubtype(erasedReturnType, streamType))\n         {\n-            return Stream.of( new ReturnTypeError( method, \"Return type of %s#%s must be %s\",\n-                    method.getEnclosingElement().getSimpleName(), method.getSimpleName(), streamClassName ) );\n+            return Stream.of(new ReturnTypeError(method, \"Return type of %s#%s must be %s\",\n+              method.getEnclosingElement().getSimpleName(), method.getSimpleName(), streamClassName));\n         }\n \n-        return recordVisitor.visit( returnType );\n+        return recordVisitor.visit(returnType);\n     }\n }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}