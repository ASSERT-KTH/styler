{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2530",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "123",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "213",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2530/DatabaseRebuildTool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2530/DatabaseRebuildTool.java\nindex 51cd2c030ad..7c8a641adbd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2530/DatabaseRebuildTool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2530/DatabaseRebuildTool.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tools.applytx;\n \n import java.io.File;\n@@ -53,182 +54,180 @@ import static org.neo4j.tools.console.input.ConsoleUtil.staticPrompt;\n  * Tool for rebuilding database from transaction logs onto a new store. Transaction can be applied interactively,\n  * i.e. applied up to any transaction id and consistency checked at any point. Also there are other utilities,\n  * such as printing record structure at any point as well.\n- *\n+ * <p>\n  * Running this tool will eventually go into a mode where it's awaiting user input, so typed commands\n  * will control what happens. Type help to get more information.\n  */\n public class DatabaseRebuildTool\n {\n-    private final InputStream in;\n-    private final PrintStream out;\n-    private final PrintStream err;\n-\n-    public DatabaseRebuildTool()\n+  private final InputStream in;\n+  private final PrintStream out;\n+  private final PrintStream err;\n+\n+  public DatabaseRebuildTool()\n+  {\n+    this(System.in, System.out, System.err);\n+  }\n+\n+  public DatabaseRebuildTool(InputStream in, PrintStream out, PrintStream err)\n+  {\n+    this.in = in;\n+    this.out = out;\n+    this.err = err;\n+  }\n+\n+  public static void main(String[] arguments) throws Exception\n+  {\n+    new DatabaseRebuildTool().run(arguments);\n+  }\n+\n+  public void run(String... arguments) throws Exception\n+  {\n+    if (arguments.length == 0)\n     {\n-        this( System.in, System.out, System.err );\n+      System.err.println(\"Tool for rebuilding database from transaction logs onto a new store\");\n+      System.err.println(\"Example: dbrebuild --from path/to/some.db --to path/to/new.db apply next\");\n+      System.err.println(\"         dbrebuild --from path/to/some.db --to path/to/new.db -i\");\n+      System.err.println(\"          --from : which db to use as source for reading transactions\");\n+      System.err.println(\"            --to : where to build the new db\");\n+      System.err.println(\"  --overwrite-to : always starts from empty 'to' db\");\n+      System.err.println(\"              -i : interactive mode (enter a shell)\");\n+      return;\n     }\n \n-    public DatabaseRebuildTool( InputStream in, PrintStream out, PrintStream err )\n+    Args args = Args.withFlags(\"i\", \"overwrite-to\").parse(arguments);\n+    File fromPath = getFrom(args);\n+    File toPath = getTo(args);\n+    GraphDatabaseBuilder dbBuilder = newDbBuilder(toPath, args);\n+    boolean interactive = args.getBoolean(\"i\");\n+    if (interactive && !args.orphans().isEmpty())\n     {\n-        this.in = in;\n-        this.out = out;\n-        this.err = err;\n+      throw new IllegalArgumentException(\"No additional commands allowed in interactive mode\");\n     }\n \n-    public static void main( String[] arguments ) throws Exception\n+    @SuppressWarnings(\"resource\")\n+    InputStream input = interactive ? in : oneCommand(args.orphansAsArray());\n+    LifeSupport life = new LifeSupport();\n+    ConsoleInput consoleInput = console(fromPath, dbBuilder, input,\n+        interactive ? staticPrompt(\"# \") : NO_PROMPT, life);\n+    life.start();\n+    try\n     {\n-        new DatabaseRebuildTool().run( arguments );\n-    }\n-\n-    public void run( String... arguments ) throws Exception\n+      consoleInput.waitFor();\n+    } finally\n     {\n-        if ( arguments.length == 0 )\n-        {\n-            System.err.println( \"Tool for rebuilding database from transaction logs onto a new store\" );\n-            System.err.println( \"Example: dbrebuild --from path/to/some.db --to path/to/new.db apply next\" );\n-            System.err.println( \"         dbrebuild --from path/to/some.db --to path/to/new.db -i\" );\n-            System.err.println( \"          --from : which db to use as source for reading transactions\" );\n-            System.err.println( \"            --to : where to build the new db\" );\n-            System.err.println( \"  --overwrite-to : always starts from empty 'to' db\" );\n-            System.err.println( \"              -i : interactive mode (enter a shell)\" );\n-            return;\n-        }\n-\n-        Args args = Args.withFlags( \"i\", \"overwrite-to\" ).parse( arguments );\n-        File fromPath = getFrom( args );\n-        File toPath = getTo( args );\n-        GraphDatabaseBuilder dbBuilder = newDbBuilder( toPath, args );\n-        boolean interactive = args.getBoolean( \"i\" );\n-        if ( interactive && !args.orphans().isEmpty() )\n-        {\n-            throw new IllegalArgumentException( \"No additional commands allowed in interactive mode\" );\n-        }\n-\n-        @SuppressWarnings( \"resource\" )\n-        InputStream input = interactive ? in : oneCommand( args.orphansAsArray() );\n-        LifeSupport life = new LifeSupport();\n-        ConsoleInput consoleInput = console( fromPath, dbBuilder, input,\n-                interactive ? staticPrompt( \"# \" ) : NO_PROMPT, life );\n-        life.start();\n-        try\n-        {\n-            consoleInput.waitFor();\n-        }\n-        finally\n-        {\n-            life.shutdown();\n-        }\n+      life.shutdown();\n     }\n+  }\n \n-    private File getTo( Args args ) throws IOException\n+  private File getTo(Args args) throws IOException\n+  {\n+    String to = args.get(\"to\");\n+    if (to == null)\n     {\n-        String to = args.get( \"to\" );\n-        if ( to == null )\n-        {\n-            to = \"target/db-from-apply-txs\";\n-            err.println( \"Defaulting --to to \" + to );\n-        }\n-        File toPath = new File( to );\n-        if ( args.getBoolean( \"overwrite-to\" ) )\n-        {\n-            FileUtils.deleteRecursively( toPath );\n-        }\n-        return toPath;\n+      to = \"target/db-from-apply-txs\";\n+      err.println(\"Defaulting --to to \" + to);\n     }\n-\n-    private File getFrom( Args args )\n+    File toPath = new File(to);\n+    if (args.getBoolean(\"overwrite-to\"))\n     {\n-        String from = args.get( \"from\" );\n-        if ( from == null )\n-        {\n-            throw new IllegalArgumentException( \"Missing --from i.e. from where to read transaction logs\" );\n-        }\n-        return new File( from );\n+      FileUtils.deleteRecursively(toPath);\n     }\n+    return toPath;\n+  }\n \n-    private static GraphDatabaseBuilder newDbBuilder( File path, Args args )\n+  private File getFrom(Args args)\n+  {\n+    String from = args.get(\"from\");\n+    if (from == null)\n     {\n-        GraphDatabaseBuilder builder = new GraphDatabaseFactory().newEmbeddedDatabaseBuilder( path );\n-        for ( Map.Entry<String, String> entry : args.asMap().entrySet() )\n-        {\n-            if ( entry.getKey().startsWith( \"D\" ) )\n-            {\n-                String key = entry.getKey().substring( 1 );\n-                String value = entry.getValue();\n-                builder = builder.setConfig( key, value );\n-            }\n-        }\n-        return builder;\n+      throw new IllegalArgumentException(\"Missing --from i.e. from where to read transaction logs\");\n     }\n+    return new File(from);\n+  }\n \n-    private static class Store\n+  private static GraphDatabaseBuilder newDbBuilder(File path, Args args)\n+  {\n+    GraphDatabaseBuilder builder = new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(path);\n+    for (Map.Entry<String, String> entry : args.asMap().entrySet())\n     {\n-        private final GraphDatabaseAPI db;\n-        private final StoreAccess access;\n-        private final File storeDir;\n+      if (entry.getKey().startsWith(\"D\"))\n+      {\n+        String key = entry.getKey().substring(1);\n+        String value = entry.getValue();\n+        builder = builder.setConfig(key, value);\n+      }\n+    }\n+    return builder;\n+  }\n \n-        Store( GraphDatabaseBuilder dbBuilder )\n-        {\n-            this.db = (GraphDatabaseAPI) dbBuilder.newGraphDatabase();\n-            this.access = new StoreAccess( db.getDependencyResolver()\n-                    .resolveDependency( RecordStorageEngine.class ).testAccessNeoStores() ).initialize();\n-            this.storeDir = db.getStoreDir();\n-        }\n+  private static class Store\n+  {\n+    private final GraphDatabaseAPI db;\n+    private final StoreAccess access;\n+    private final File storeDir;\n \n-        public void shutdown()\n-        {\n-            db.shutdown();\n-        }\n+    Store(GraphDatabaseBuilder dbBuilder)\n+    {\n+      this.db = (GraphDatabaseAPI) dbBuilder.newGraphDatabase();\n+      this.access = new StoreAccess(db.getDependencyResolver()\n+          .resolveDependency(RecordStorageEngine.class).testAccessNeoStores()).initialize();\n+      this.storeDir = db.getStoreDir();\n     }\n \n-    private ConsoleInput console( final File fromPath, final GraphDatabaseBuilder dbBuilder,\n-            InputStream in, Listener<PrintStream> prompt, LifeSupport life )\n+    public void shutdown()\n+    {\n+      db.shutdown();\n+    }\n+  }\n+\n+  private ConsoleInput console(final File fromPath, final GraphDatabaseBuilder dbBuilder,\n+                               InputStream in, Listener<PrintStream> prompt, LifeSupport life)\n+  {\n+    // We must have this indirection here since in order to perform CC (one of the commands) we must shut down\n+    // the database and let CC instantiate its own to run on. After that completes the db\n+    // should be restored. The commands has references to providers of things to accommodate for this.\n+    final AtomicReference<Store> store =\n+        new AtomicReference<>(new Store(dbBuilder));\n+    final Supplier<StoreAccess> storeAccess = () -> store.get().access;\n+    final Supplier<GraphDatabaseAPI> dbAccess = () -> store.get().db;\n+\n+    ConsoleInput consoleInput = life.add(new ConsoleInput(in, out, prompt));\n+    consoleInput.add(\"apply\", new ApplyTransactionsCommand(fromPath, dbAccess));\n+    consoleInput.add(DumpRecordsCommand.NAME, new DumpRecordsCommand(storeAccess));\n+    consoleInput.add(\"cc\", new ArgsCommand()\n     {\n-        // We must have this indirection here since in order to perform CC (one of the commands) we must shut down\n-        // the database and let CC instantiate its own to run on. After that completes the db\n-        // should be restored. The commands has references to providers of things to accommodate for this.\n-        final AtomicReference<Store> store =\n-                new AtomicReference<>( new Store( dbBuilder ) );\n-        final Supplier<StoreAccess> storeAccess = () -> store.get().access;\n-        final Supplier<GraphDatabaseAPI> dbAccess = () -> store.get().db;\n-\n-        ConsoleInput consoleInput = life.add( new ConsoleInput( in, out, prompt ) );\n-        consoleInput.add( \"apply\", new ApplyTransactionsCommand( fromPath, dbAccess ) );\n-        consoleInput.add( DumpRecordsCommand.NAME, new DumpRecordsCommand( storeAccess ) );\n-        consoleInput.add( \"cc\", new ArgsCommand()\n+      @Override\n+      public void run(Args action, PrintStream out) throws Exception\n+      {\n+        File storeDir = store.get().storeDir;\n+        store.get().shutdown();\n+        try\n         {\n-            @Override\n-            public void run( Args action, PrintStream out ) throws Exception\n-            {\n-                File storeDir = store.get().storeDir;\n-                store.get().shutdown();\n-                try\n-                {\n-                    Result result = new ConsistencyCheckService().runFullConsistencyCheck( storeDir,\n-                            Config.defaults(), ProgressMonitorFactory.textual( out ),\n-                            FormattedLogProvider.toOutputStream( System.out ), false );\n-                    out.println( result.isSuccessful() ? \"consistent\" : \"INCONSISTENT\" );\n-                }\n-                finally\n-                {\n-                    store.set( new Store( dbBuilder ) );\n-                }\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                return \"Runs consistency check on the database for data that has been applied up to this point\";\n-            }\n-        } );\n-        life.add( new LifecycleAdapter()\n+          Result result = new ConsistencyCheckService().runFullConsistencyCheck(storeDir,\n+              Config.defaults(), ProgressMonitorFactory.textual(out),\n+              FormattedLogProvider.toOutputStream(System.out), false);\n+          out.println(result.isSuccessful() ? \"consistent\" : \"INCONSISTENT\");\n+        } finally\n         {\n-            @Override\n-            public void shutdown()\n-            {\n-                store.get().shutdown();\n-            }\n-        } );\n-        return consoleInput;\n-    }\n+          store.set(new Store(dbBuilder));\n+        }\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return \"Runs consistency check on the database for data that has been applied up to this point\";\n+      }\n+    });\n+    life.add(new LifecycleAdapter()\n+    {\n+      @Override\n+      public void shutdown()\n+      {\n+        store.get().shutdown();\n+      }\n+    });\n+    return consoleInput;\n+  }\n }\n",
            "diff_size": 238
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2530/DatabaseRebuildTool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2530/DatabaseRebuildTool.java\nindex 51cd2c030ad..782a4a3d3ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2530/DatabaseRebuildTool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2530/DatabaseRebuildTool.java\n@@ -109,7 +109,7 @@ public class DatabaseRebuildTool\n         LifeSupport life = new LifeSupport();\n         ConsoleInput consoleInput = console( fromPath, dbBuilder, input,\n                 interactive ? staticPrompt( \"# \" ) : NO_PROMPT, life );\n-        life.start();\n+life.start();\n         try\n         {\n             consoleInput.waitFor();\n@@ -128,12 +128,14 @@ public class DatabaseRebuildTool\n             to = \"target/db-from-apply-txs\";\n             err.println( \"Defaulting --to to \" + to );\n         }\n-        File toPath = new File( to );\n+\n+File toPath = new File( to );\n         if ( args.getBoolean( \"overwrite-to\" ) )\n         {\n             FileUtils.deleteRecursively( toPath );\n         }\n-        return toPath;\n+\n+return toPath;\n     }\n \n     private File getFrom( Args args )\n@@ -149,7 +151,7 @@ public class DatabaseRebuildTool\n     private static GraphDatabaseBuilder newDbBuilder( File path, Args args )\n     {\n         GraphDatabaseBuilder builder = new GraphDatabaseFactory().newEmbeddedDatabaseBuilder( path );\n-        for ( Map.Entry<String, String> entry : args.asMap().entrySet() )\n+        for ( Map.Entry<String,String> entry : args.asMap().entrySet() )\n         {\n             if ( entry.getKey().startsWith( \"D\" ) )\n             {\n@@ -170,9 +172,8 @@ public class DatabaseRebuildTool\n         Store( GraphDatabaseBuilder dbBuilder )\n         {\n             this.db = (GraphDatabaseAPI) dbBuilder.newGraphDatabase();\n-            this.access = new StoreAccess( db.getDependencyResolver()\n-                    .resolveDependency( RecordStorageEngine.class ).testAccessNeoStores() ).initialize();\n-            this.storeDir = db.getStoreDir();\n+            this.access = new StoreAccess( db.getDependencyResolver().resolveDependency( RecordStorageEngine.class ).testAccessNeoStores() ).initialize();\n+this.storeDir = db.getStoreDir();\n         }\n \n         public void shutdown()\n@@ -187,9 +188,8 @@ public class DatabaseRebuildTool\n         // We must have this indirection here since in order to perform CC (one of the commands) we must shut down\n         // the database and let CC instantiate its own to run on. After that completes the db\n         // should be restored. The commands has references to providers of things to accommodate for this.\n-        final AtomicReference<Store> store =\n-                new AtomicReference<>( new Store( dbBuilder ) );\n-        final Supplier<StoreAccess> storeAccess = () -> store.get().access;\n+        final AtomicReference<Store> store = new AtomicReference<>( new Store( dbBuilder ) );\n+    final Supplier<StoreAccess> storeAccess = () -> store.get().access;\n         final Supplier<GraphDatabaseAPI> dbAccess = () -> store.get().db;\n \n         ConsoleInput consoleInput = life.add( new ConsoleInput( in, out, prompt ) );\n@@ -205,9 +205,8 @@ public class DatabaseRebuildTool\n                 try\n                 {\n                     Result result = new ConsistencyCheckService().runFullConsistencyCheck( storeDir,\n-                            Config.defaults(), ProgressMonitorFactory.textual( out ),\n-                            FormattedLogProvider.toOutputStream( System.out ), false );\n-                    out.println( result.isSuccessful() ? \"consistent\" : \"INCONSISTENT\" );\n+                            Config.defaults(), ProgressMonitorFactory.textual( out ), FormattedLogProvider.toOutputStream( System.out ), false );\n+out.println( result.isSuccessful() ? \"consistent\" : \"INCONSISTENT\" );\n                 }\n                 finally\n                 {\n@@ -231,4 +230,4 @@ public class DatabaseRebuildTool\n         } );\n         return consoleInput;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}