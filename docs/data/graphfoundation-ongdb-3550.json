{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3550",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3550/BranchCollisionDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3550/BranchCollisionDetector.java\nindex 798ff0712e6..360db69675f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3550/BranchCollisionDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3550/BranchCollisionDetector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.traversal;\n \n import org.neo4j.graphdb.Direction;\n@@ -29,21 +30,21 @@ import org.neo4j.graphdb.Path;\n  */\n public interface BranchCollisionDetector\n {\n-    /**\n-     * Evaluate the given {@code branch} coming from either the start side or the\n-     * end side. Which side the branch represents is controlled by the {@code direction}\n-     * argument, {@link Direction#OUTGOING} means the start side and {@link Direction#INCOMING}\n-     * means the end side. Returns an {@link Iterable} of new unique {@link Path}s if\n-     * this branch resulted in a collision with other previously registered branches,\n-     * or {@code null} if this branch didn't result in any collision.\n-     *\n-     * @param branch the {@link TraversalBranch} to check for collision with other\n-     * previously registered branches.\n-     * @param direction {@link Direction#OUTGOING} if this branch represents a branch\n-     * from the start side of this bidirectional traversal, or {@link Direction#INCOMING}\n-     * for the end side.\n-     * @return new paths formed if this branch collided with other branches,\n-     * or {@code null} if no collision occurred.\n-     */\n-    Iterable<Path> evaluate( TraversalBranch branch, Direction direction );\n+  /**\n+   * Evaluate the given {@code branch} coming from either the start side or the\n+   * end side. Which side the branch represents is controlled by the {@code direction}\n+   * argument, {@link Direction#OUTGOING} means the start side and {@link Direction#INCOMING}\n+   * means the end side. Returns an {@link Iterable} of new unique {@link Path}s if\n+   * this branch resulted in a collision with other previously registered branches,\n+   * or {@code null} if this branch didn't result in any collision.\n+   *\n+   * @param branch    the {@link TraversalBranch} to check for collision with other\n+   *                  previously registered branches.\n+   * @param direction {@link Direction#OUTGOING} if this branch represents a branch\n+   *                  from the start side of this bidirectional traversal, or {@link Direction#INCOMING}\n+   *                  for the end side.\n+   * @return new paths formed if this branch collided with other branches,\n+   * or {@code null} if no collision occurred.\n+   */\n+  Iterable<Path> evaluate(TraversalBranch branch, Direction direction);\n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3550/BranchCollisionDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3550/BranchCollisionDetector.java\nindex 798ff0712e6..90229ac59a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3550/BranchCollisionDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3550/BranchCollisionDetector.java\n@@ -46,4 +46,4 @@ public interface BranchCollisionDetector\n      * or {@code null} if no collision occurred.\n      */\n     Iterable<Path> evaluate( TraversalBranch branch, Direction direction );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}