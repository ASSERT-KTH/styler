{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2768",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "103",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "140",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "94",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2768/ModifierProtocolRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2768/ModifierProtocolRepository.java\nindex 23968660b09..74424447018 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2768/ModifierProtocolRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2768/ModifierProtocolRepository.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.protocol.handshake;\n \n import java.util.Collection;\n@@ -30,65 +31,65 @@ import java.util.stream.Collectors;\n \n import org.neo4j.causalclustering.protocol.Protocol;\n \n-public class ModifierProtocolRepository extends ProtocolRepository<String,Protocol.ModifierProtocol>\n+public class ModifierProtocolRepository extends ProtocolRepository<String, Protocol.ModifierProtocol>\n {\n-    private final Collection<ModifierSupportedProtocols> supportedProtocols;\n-    private final Map<String,ModifierSupportedProtocols> supportedProtocolsLookup;\n+  private final Collection<ModifierSupportedProtocols> supportedProtocols;\n+  private final Map<String, ModifierSupportedProtocols> supportedProtocolsLookup;\n \n-    public ModifierProtocolRepository( Protocol.ModifierProtocol[] protocols, Collection<ModifierSupportedProtocols> supportedProtocols )\n-    {\n-        super( protocols, getModifierProtocolComparator( supportedProtocols ), ModifierProtocolSelection::new );\n-        this.supportedProtocols = Collections.unmodifiableCollection( supportedProtocols );\n-        this.supportedProtocolsLookup = supportedProtocols.stream()\n-                .collect( Collectors.toMap( supp -> supp.identifier().canonicalName(), Function.identity() ) );\n-    }\n+  public ModifierProtocolRepository(Protocol.ModifierProtocol[] protocols, Collection<ModifierSupportedProtocols> supportedProtocols)\n+  {\n+    super(protocols, getModifierProtocolComparator(supportedProtocols), ModifierProtocolSelection::new);\n+    this.supportedProtocols = Collections.unmodifiableCollection(supportedProtocols);\n+    this.supportedProtocolsLookup = supportedProtocols.stream()\n+        .collect(Collectors.toMap(supp -> supp.identifier().canonicalName(), Function.identity()));\n+  }\n \n-    static Function<String,Comparator<Protocol.ModifierProtocol>> getModifierProtocolComparator(\n-            Collection<ModifierSupportedProtocols> supportedProtocols )\n-    {\n-        return getModifierProtocolComparator( versionMap( supportedProtocols ) );\n-    }\n+  static Function<String, Comparator<Protocol.ModifierProtocol>> getModifierProtocolComparator(\n+      Collection<ModifierSupportedProtocols> supportedProtocols)\n+  {\n+    return getModifierProtocolComparator(versionMap(supportedProtocols));\n+  }\n \n-    private static Map<String,List<String>> versionMap( Collection<ModifierSupportedProtocols> supportedProtocols )\n-    {\n-        return supportedProtocols.stream()\n-                .collect( Collectors.toMap( supportedProtocol -> supportedProtocol.identifier().canonicalName(), SupportedProtocols::versions ) );\n-    }\n+  private static Map<String, List<String>> versionMap(Collection<ModifierSupportedProtocols> supportedProtocols)\n+  {\n+    return supportedProtocols.stream()\n+        .collect(Collectors.toMap(supportedProtocol -> supportedProtocol.identifier().canonicalName(), SupportedProtocols::versions));\n+  }\n \n-    private static Function<String,Comparator<Protocol.ModifierProtocol>> getModifierProtocolComparator( Map<String,List<String>> versionMap )\n-    {\n-        return protocolName -> {\n-            Comparator<Protocol.ModifierProtocol> positionalComparator = Comparator.comparing( modifierProtocol ->\n-                    Optional.ofNullable( versionMap.get( protocolName ) )\n-                    .map( versions -> byPosition( modifierProtocol, versions ) )\n-                    .orElse( 0 ) );\n+  private static Function<String, Comparator<Protocol.ModifierProtocol>> getModifierProtocolComparator(Map<String, List<String>> versionMap)\n+  {\n+    return protocolName -> {\n+      Comparator<Protocol.ModifierProtocol> positionalComparator = Comparator.comparing(modifierProtocol ->\n+          Optional.ofNullable(versionMap.get(protocolName))\n+              .map(versions -> byPosition(modifierProtocol, versions))\n+              .orElse(0));\n \n-            return fallBackToVersionNumbers( positionalComparator );\n-        };\n-    }\n+      return fallBackToVersionNumbers(positionalComparator);\n+    };\n+  }\n \n-    // Needed if supported modifiers has an empty version list\n-    private static Comparator<Protocol.ModifierProtocol> fallBackToVersionNumbers( Comparator<Protocol.ModifierProtocol> positionalComparator )\n-    {\n-        return positionalComparator.thenComparing( versionNumberComparator() );\n-    }\n+  // Needed if supported modifiers has an empty version list\n+  private static Comparator<Protocol.ModifierProtocol> fallBackToVersionNumbers(Comparator<Protocol.ModifierProtocol> positionalComparator)\n+  {\n+    return positionalComparator.thenComparing(versionNumberComparator());\n+  }\n \n-    /**\n-     * @return Greatest is head of versions, least is not included in versions\n-     */\n-    private static Integer byPosition( Protocol.ModifierProtocol modifierProtocol, List<String> versions )\n-    {\n-        int index = versions.indexOf( modifierProtocol.implementation() );\n-        return index == -1 ? Integer.MIN_VALUE : -index;\n-    }\n+  /**\n+   * @return Greatest is head of versions, least is not included in versions\n+   */\n+  private static Integer byPosition(Protocol.ModifierProtocol modifierProtocol, List<String> versions)\n+  {\n+    int index = versions.indexOf(modifierProtocol.implementation());\n+    return index == -1 ? Integer.MIN_VALUE : -index;\n+  }\n \n-    public Optional<SupportedProtocols<String,Protocol.ModifierProtocol>> supportedProtocolFor( String protocolName )\n-    {\n-        return Optional.ofNullable( supportedProtocolsLookup.get( protocolName ) );\n-    }\n+  public Optional<SupportedProtocols<String, Protocol.ModifierProtocol>> supportedProtocolFor(String protocolName)\n+  {\n+    return Optional.ofNullable(supportedProtocolsLookup.get(protocolName));\n+  }\n \n-    public Collection<ModifierSupportedProtocols> supportedProtocols()\n-    {\n-        return supportedProtocols;\n-    }\n+  public Collection<ModifierSupportedProtocols> supportedProtocols()\n+  {\n+    return supportedProtocols;\n+  }\n }\n",
            "diff_size": 52
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 243).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2768/ModifierProtocolRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2768/ModifierProtocolRepository.java\nindex 23968660b09..9f30019d343 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2768/ModifierProtocolRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2768/ModifierProtocolRepository.java\n@@ -39,31 +39,25 @@ public class ModifierProtocolRepository extends ProtocolRepository<String,Protoc\n     {\n         super( protocols, getModifierProtocolComparator( supportedProtocols ), ModifierProtocolSelection::new );\n         this.supportedProtocols = Collections.unmodifiableCollection( supportedProtocols );\n-        this.supportedProtocolsLookup = supportedProtocols.stream()\n-                .collect( Collectors.toMap( supp -> supp.identifier().canonicalName(), Function.identity() ) );\n+        this.supportedProtocolsLookup = supportedProtocols.stream().collect( Collectors.toMap( supp -> supp.identifier().canonicalName(), Function.identity() ) );\n     }\n \n-    static Function<String,Comparator<Protocol.ModifierProtocol>> getModifierProtocolComparator(\n-            Collection<ModifierSupportedProtocols> supportedProtocols )\n+    static Function<String,Comparator<Protocol.ModifierProtocol>> getModifierProtocolComparator( Collection<ModifierSupportedProtocols> supportedProtocols )\n     {\n         return getModifierProtocolComparator( versionMap( supportedProtocols ) );\n     }\n \n     private static Map<String,List<String>> versionMap( Collection<ModifierSupportedProtocols> supportedProtocols )\n     {\n-        return supportedProtocols.stream()\n-                .collect( Collectors.toMap( supportedProtocol -> supportedProtocol.identifier().canonicalName(), SupportedProtocols::versions ) );\n+        return supportedProtocols.stream().collect( Collectors.toMap( supportedProtocol -> supportedProtocol.identifier().canonicalName(), SupportedProtocols::versions ) );\n     }\n \n     private static Function<String,Comparator<Protocol.ModifierProtocol>> getModifierProtocolComparator( Map<String,List<String>> versionMap )\n     {\n-        return protocolName -> {\n-            Comparator<Protocol.ModifierProtocol> positionalComparator = Comparator.comparing( modifierProtocol ->\n-                    Optional.ofNullable( versionMap.get( protocolName ) )\n-                    .map( versions -> byPosition( modifierProtocol, versions ) )\n-                    .orElse( 0 ) );\n-\n-            return fallBackToVersionNumbers( positionalComparator );\n+        return protocolName ->\n+{\n+            Comparator<Protocol.ModifierProtocol> positionalComparator = Comparator.comparing( modifierProtocol -> Optional.ofNullable( versionMap.get( protocolName ) ).map( versions -> byPosition( modifierProtocol, versions ) ).orElse( 0 ) );\n+return fallBackToVersionNumbers( positionalComparator );\n         };\n     }\n \n@@ -91,4 +85,4 @@ public class ModifierProtocolRepository extends ProtocolRepository<String,Protoc\n     {\n         return supportedProtocols;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}