{
    "project_name": "CESNET-perun",
    "error_id": "387",
    "information": {
        "errors": [
            {
                "line": "90",
                "severity": "error",
                "message": "Space before tab.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t * @param destinationResource destination resource containing destination facility, VO and resource name.\n\t * @param withGroups if set to true and resources ARE from the same VO we also - copy all group-resource and member-resource attributes\n\t *                   \t\t\t\t\t\t\t\t\t\t\t\t\t\t   - assign all groups same as on templateResource\n\t *\t                 if set to true and resources ARE NOT from the same VO InternalErrorException is thrown,\n\t *                   if set to false we will NOT copy groups and group related attributes.\n\t * @return Resource new Resource with copied settings based on withGroups parameter.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/387/ResourcesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/387/ResourcesManagerMethod.java\nindex f14425a2848..21517b654e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/387/ResourcesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/387/ResourcesManagerMethod.java\n@@ -12,21 +12,20 @@ import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n \n public enum ResourcesManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Returns resource by its <code>id</code>.\n-\t *\n-\t * @param id int Resource <code>id</code>\n-\t * @return Resource Found Resource\n-\t */\n-\tgetResourceById {\n-\n-\t\t@Override\n-\t\tpublic Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourceById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n+    /*#\n+     * Returns resource by its <code>id</code>.\n+     *\n+     * @param id int Resource <code>id</code>\n+     * @return Resource Found Resource\n+     */\n+    getResourceById {\n+        @Override\n+        public Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourceById(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n      * Returns resource by its name, Vo <code>id</code> and Facility <code>id</code>.\n      *\n      * @param vo int VO <code>id</code>\n@@ -34,1039 +33,1006 @@ public enum ResourcesManagerMethod implements ManagerMethod {\n      * @param name String resource name\n      * @return Resource Found Resource based on the input.\n      */\n-\tgetResourceByName {\n-\t\t@Override\n-\t\tpublic Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getResourceByName(ac.getSession(),\n-\t\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")),\n-\t\t\t\t\t\t\tparms.readString(\"name\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns RichResource by its <code>id</code> (also containing facility and VO inside)\n-\t *\n-\t * @param id int RichResource <code>id</code>\n-\t * @return RichResource Found RichResource\n-\t */\n-\tgetRichResourceById {\n-\n-\t\t@Override\n-\t\tpublic RichResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getRichResourceById(ac.getSession(), parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates a new resource.\n-\t *\n-\t * @param resource Resource JSON object\n-\t * @param vo int virtual organization <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return Resource Created resource\n-\t */\n-\tcreateResource {\n-\n-\t\t@Override\n-\t\tpublic Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getResourcesManager().createResource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resource\", Resource.class),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Copy \"template\" settings from user's another existing resource and create new resource with this template.\n-\t * The settings are attributes, services, tags (if exists), groups and their members (if the resources are from the same VO and withGroups is true)\n-\t * Template Resource can be from any of user's facilities.\n-\t *\n-\t * @param templateResource template resource to copy\n-\t * @param destinationResource destination resource containing destination facility, VO and resource name.\n-\t * @param withGroups if set to true and resources ARE from the same VO we also - copy all group-resource and member-resource attributes\n-\t *                   \t\t\t\t\t\t\t\t\t\t\t\t\t\t   - assign all groups same as on templateResource\n-\t *\t                 if set to true and resources ARE NOT from the same VO InternalErrorException is thrown,\n-\t *                   if set to false we will NOT copy groups and group related attributes.\n-\t * @return Resource new Resource with copied settings based on withGroups parameter.\n-\t */\n-\tcopyResource {\n-\t\t@Override\n-\t\tpublic Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getResourcesManager().copyResource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"templateResource\", Resource.class),\n-\t\t\t\t\tparms.read(\"destinationResource\", Resource.class),\n-\t\t\t\t\tparms.readBoolean(\"withGroups\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates a resource.\n-\t *\n-\t * @param resource Resource JSON object\n-\t * @return Resource Updated resource\n-\t */\n-\tupdateResource {\n-\n-\t\t@Override\n-\t\tpublic Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getResourcesManager().updateResource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resource\", Resource.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes a resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t */\n-\tdeleteResource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().deleteResource(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get facility which belongs to a specific resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return Facility Found facility\n-\t */\n-\tgetFacility {\n-\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getFacility(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Sets Facility to resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tsetFacility {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().setFacility(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns Vo which is tied to a specific resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return Vo VirtualOrganization\n-\t */\n-\tgetVo {\n-\n-\t\t@Override\n-\t\tpublic Vo call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getVo(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all members assigned to the resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<Member> Members assigned to the resource\n-\t */\n-\tgetAllowedMembers {\n-\n-\t\t@Override\n-\t\tpublic List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllowedMembers(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all users assigned to the resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<User> Users assigned to the resource\n-\t */\n-\tgetAllowedUsers {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllowedUsers(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign group to a resource. Check if attributes for each member from group are valid. Fill members' attributes with missing value.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param resource int Resource <code>id</code>\n-\t */\n-\tassignGroupToResource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().assignGroupToResource(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign groups to a resource. Check if attributes for each member from groups are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param groups List<Integer> list of groups IDs\n-\t * @param resource int Resource <code>id</code>\n-\t */\n-\tassignGroupsToResource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tList<Integer> ids = parms.readList(\"groups\", Integer.class);\n-\t\t\tList<Group> groups = new ArrayList<Group>();\n-\t\t\tfor (Integer i : ids) {\n-\t\t\t\tgroups.add(ac.getGroupById(i));\n-\t\t\t}\n-\t\t\tac.getResourcesManager().assignGroupsToResource(ac.getSession(),\n-\t\t\t\t\tgroups,\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign group to resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param resources List<Integer> list of resources IDs\n-\t */\n-\tassignGroupToResources {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tList<Integer> ids = parms.readList(\"resources\", Integer.class);\n-\t\t\tList<Resource> resources = new ArrayList<Resource>();\n-\t\t\tfor (Integer i : ids) {\n-\t\t\t\tresources.add(ac.getResourceById(i));\n-\t\t\t}\n-\t\t\tac.getResourcesManager().assignGroupToResources(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tresources);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove group from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param resource int Resource <code>id</code>\n-\t */\n-\tremoveGroupFromResource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().removeGroupFromResource(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove groups from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param groups List<Group> list of group\n-\t * @param resource int Resource <code>id</code>\n-\t */\n-\tremoveGroupsFromResource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tList<Integer> ids = parms.readList(\"groups\", Integer.class);\n-\t\t\tList<Group> groups = new ArrayList<Group>();\n-\t\t\tfor (Integer i : ids) {\n-\t\t\t\tgroups.add(ac.getGroupById(i));\n-\t\t\t}\n-\t\t\tac.getResourcesManager().removeGroupsFromResource(ac.getSession(),\n-\t\t\t\t\tgroups,\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove group from resources.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param resources List<Integer> list of resources IDs\n-\t */\n-\tremoveGroupFromResources {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tList<Integer> ids = parms.readList(\"resources\", Integer.class);\n-\t\t\tList<Resource> resources = new ArrayList<Resource>();\n-\t\t\tfor (Integer i : ids) {\n-\t\t\t\tresources.add(ac.getResourceById(i));\n-\t\t\t}\n-\t\t\tac.getResourcesManager().removeGroupFromResources(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tresources);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List all groups associated with the resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<Group> Resource groups\n-\t */\n-\t/*#\n-\t * List all groups associated with the resource and member\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param member int Member <code>id</code>\n-\t * @return List<Group> Resource groups with specified member\n-\t */\n-\tgetAssignedGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"member\")) {\n-\t\t\t\treturn ac.getResourcesManager().getAssignedGroups(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")), ac.getMemberById(parms.readInt(\"member\")));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getResourcesManager().getAssignedGroups(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List all resources associated with a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<Resource> Resources\n-\t */\n-\t/*#\n-\t * List all resources associated with a member's group.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return List<Resource> Resources\n-\t */\n-\tgetAssignedResources {\n-\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"member\")) {\n-\t\t\t\tif (parms.contains(\"service\")) {\n-\t\t\t\t\treturn ac.getResourcesManager().getAssignedResources(ac.getSession(),\n-\t\t\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")), ac.getServiceById(parms.readInt(\"service\")));\n-\t\t\t\t} else {\n-\t\t\t\t\treturn ac.getResourcesManager().getAssignedResources(ac.getSession(),\n-\t\t\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\treturn ac.getResourcesManager().getAssignedResources(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all rich resources where the service and the member are assigned with facility property filled.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @param service int Service <code>id</code>\n-\t * @return List<RichResource> List of rich resources\n-\t */\n-\t/*#\n-\t * List all rich resources associated with a member's group.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return List<RichResource> List of rich resources\n-\t */\n-\t/*#\n-\t * List all rich resources associated with a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichResource> List of rich resources\n-\t */\n-\tgetAssignedRichResources {\n-\n-\t\t@Override\n-\t\tpublic List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"member\")) {\n-\t\t\t\tif (parms.contains(\"service\")) {\n-\t\t\t\t\treturn ac.getResourcesManager().getAssignedRichResources(ac.getSession(),\n-\t\t\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")), ac.getServiceById(parms.readInt(\"service\")));\n-\t\t\t\t} else {\n-\t\t\t\t\treturn ac.getResourcesManager().getAssignedRichResources(ac.getSession(),\n-\t\t\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\treturn ac.getResourcesManager().getAssignedRichResources(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all members assigned to the resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<Member> list of assigned members\n-\t */\n-\tgetAssignedMembers {\n-\t\t@Override\n-\t\tpublic List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAssignedMembers(ac.getSession(),\n-\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all members assigned to the resource as RichMembers.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<RichMember> list of assigned rich members\n-\t */\n-\tgetAssignedRichMembers {\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAssignedRichMembers(ac.getSession(),\n-\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds a Resource admin.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Adds a group administrator to the Resource.\n-\t *\n-\t *  @param resource int Resource <code>id</code>\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\taddAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getResourcesManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getResourcesManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a Resource admin.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Removes a group administrator of the Resource.\n-\t *\n-\t *  @param resource int Resource <code>id</code>\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\tremoveAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getResourcesManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getResourcesManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all resource administrators for supported role and given resource.\n-\t *\n-\t * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param onlyDirectAdmins boolean if true, get only direct resource administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<User> list of all resource administrators of the given resource for supported role\n-\t */\n-\tgetAdmins {\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAdmins(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Resource group admins.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<Group> admins\n-\t */\n-\tgetAdminGroups {\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getAdminGroups(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all richUser administrators for the resource and supported role with specific attributes.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is true, return only direct admins of the resource for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes int if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins int if == true, get only direct resource administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<RichUser> list of RichUser administrators for the resource and supported role with attributes\n-\t */\n-\tgetRichAdmins {\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getRichAdmins(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tparms.readList(\"specificAttributes\", String.class),\n-\t\t\t\t\tparms.readBoolean(\"allUserAttributes\"),\n-\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of Resources, where the user is an Administrator.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Resource> Found Resources\n-\t */\n-\tgetResourcesWhereUserIsAdmin {\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getResourcesWhereUserIsAdmin(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign service to resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param service int Service <code>id</code>\n-\t */\n-\tassignService {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().assignService(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign all services from services package to resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param servicesPackage int Services package <code>id</code>\n-\t */\n-\tassignServicesPackage {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().assignServicesPackage(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tac.getServicesPackageById(parms.readInt(\"servicesPackage\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a service from a resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param service int Service <code>id</code>\n-\t */\n-\tremoveService {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().removeService(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove from resource all services from services package.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param servicesPackage int Services package <code>id</code>\n-\t */\n-\tremoveServicesPackage {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().removeServicesPackage(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tac.getServicesPackageById(parms.readInt(\"servicesPackage\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all VO resources.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<Resource> VO resources\n-\t */\n-\tgetResources {\n-\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getResources(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all VO rich resources.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<RichResource> VO resources\n-\t */\n-\tgetRichResources {\n-\n-\t\t@Override\n-\t\tpublic List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getRichResources(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns number of VO resources\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return int VO resources count\n-\t */\n-\t/*#\n-\t * Gets count of all users.\n-\n-\t * @return int resources count\n-\t */\n-\tgetResourcesCount {\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"vo\")) {\n-\t\t\t\treturn ac.getResourcesManager().getResourcesCount(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getResourcesManager().getResourcesCount(ac.getSession());\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes all VO resources\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t */\n-\tdeleteAllResources {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().deleteAllResources(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all resources which have the member access on.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return List<Resource> VO resources\n-\t */\n-\tgetAllowedResources {\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllowedResources(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Create new resource tag in VO\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag with tagName set\n-\t * @param vo int <code>id</code> of VO to create tag for\n-\t *\n-\t * @return ResourceTag created ResourceTag with <code>id</code> and VO_ID set\n-\t */\n-\tcreateResourceTag {\n-\t\t@Override\n-\t\tpublic ResourceTag call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().createResourceTag(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Update resource tag name by it's <code>id</code> and VO_ID\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag with new tagName set\n-\t *\n-\t * @return ResourceTag updated ResourceTag with new tagName\n-\t */\n-\tupdateResourceTag {\n-\t\t@Override\n-\t\tpublic ResourceTag call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().updateResourceTag(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete resource tag by it's <code>id</code> and VO_ID\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag to delete\n-\t */\n-\tdeleteResourceTag {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getResourcesManager().deleteResourceTag(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete all resources tags of VO\n-\t *\n-\t * @param vo int <code>id</code> of VO to delete all resources tags for\n-\t */\n-\tdeleteAllResourcesTagsForVo {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getResourcesManager().deleteAllResourcesTagsForVo(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign resource tag to resource\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag to assign\n-\t * @param resource int <code>id</code> of Resource to assign tags for\n-\t */\n-\tassignResourceTagToResource {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getResourcesManager().assignResourceTagToResource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove resource tag from resource\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag to remove\n-\t * @param resource int <code>id</code> of Resource to remove tags for\n-\t */\n-\tremoveResourceTagFromResource {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getResourcesManager().removeResourceTagFromResource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove all resources tags from resource\n-\t *\n-\t * @param resource int <code>id</code> of Resource to remove all tags for\n-\t */\n-\tremoveAllResourcesTagFromResource {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getResourcesManager().removeAllResourcesTagFromResource(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all resources with specific tag assigned\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag to get resources for\n-\t *\n-\t * @return List<Resource> all resources with specific tag assigned\n-\t */\n-\tgetAllResourcesByResourceTag {\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllResourcesByResourceTag(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all resource tags of VO\n-\t *\n-\t * @param vo int <code>id</code> of VO to get all resource tags for\n-\t *\n-\t * @return List<ResourceTag> all resources tags of VO\n-\t */\n-\tgetAllResourcesTagsForVo {\n-\t\t@Override\n-\t\tpublic List<ResourceTag> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllResourcesTagsForVo(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all resource tags of Resource\n-\t *\n-\t * @param resource int <code>id</code> of Resource to get all resource tags for\n-\t *\n-\t * @return List<ResourceTag> all resources tags of Resource\n-\t */\n-\tgetAllResourcesTagsForResource {\n-\t\t@Override\n-\t\tpublic List<ResourceTag> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllResourcesTagsForResource(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List all services associated with the resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<Service> Services\n-\t */\n-\tgetAssignedServices {\n-\n-\t\t@Override\n-\t\tpublic List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getAssignedServices(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Set ban for member on resource.\n-\t *\n-\t * @param banOnResource BanOnResource JSON object\n-\t * @return BanOnResource Created banOnResource\n-\t */\n-\tsetBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getResourcesManager().setBan(ac.getSession(),\n-\t\t\t\t\tparms.read(\"banOnResource\", BanOnResource.class));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Get Ban for member on resource by it's id.\n-\t *\n-\t * @param banId int BanOnResource <code>id</code>\n-\t * @return BanOnResource banOnResource\n-\t */\n-\tgetBanById {\n-\n-\t\t@Override\n-\t\tpublic BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getBanById(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"banId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Get ban by memberId and resource id.\n-\t *\n-\t * @param memberId int Member <code>id</code>\n-\t * @param resourceId int Resource <code>id</code>\n-\t * @return BanOnResource banOnResource\n-\t */\n-\tgetBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"memberId\"), parms.readInt(\"resourceId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all bans for member on any resource.\n-\t *\n-\t * @param memberId int Member <code>id</code>\n-\t * @return List<BanOnResource> memberBansOnResources\n-\t */\n-\tgetBansForMember {\n-\n-\t\t@Override\n-\t\tpublic List<BanOnResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getBansForMember(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"memberId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all bans for members on the resource.\n-\t *\n-\t * @param resourceId int Resource <code>id</code>\n-\t * @return List<BanOnResource> membersBansOnResource\n-\t */\n-\tgetBansForResource {\n-\n-\t\t@Override\n-\t\tpublic List<BanOnResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getBansForResource(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"resourceId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Update existing ban (description, validation timestamp)\n-\t *\n-\t * @param banOnResource BanOnResource JSON object\n-\t * @return BanOnResource updated banOnResource\n-\t */\n-\tupdateBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getResourcesManager().updateBan(ac.getSession(),\n-\t\t\t\t\tparms.read(\"banOnResource\", BanOnResource.class));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove specific ban by it's id.\n-\t *\n-\t * @param banId int BanOnResource <code>id</code>\n-\t */\n-\t/*#\n-\t * Remove specific ban by memberId and resourceId.\n-\t *\n-\t * @param memberId int Member <code>id</code>\n-\t * @param resourceId int Resource <code>id</code>\n-\t */\n-\tremoveBan {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif(parms.contains(\"banId\")) {\n-\t\t\t\tac.getResourcesManager().removeBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"banId\"));\n-\t\t\t} else {\n-\t\t\t\tac.getResourcesManager().removeBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"memberId\"), parms.readInt(\"resourceId\"));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t};\n+    getResourceByName {\n+        @Override\n+        public Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getResourceByName(ac.getSession(),\n+                    ac.getVoById(parms.readInt(\"vo\")),\n+                    ac.getFacilityById(parms.readInt(\"facility\")),\n+                    parms.readString(\"name\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns RichResource by its <code>id</code> (also containing facility and VO inside)\n+     *\n+     * @param id int RichResource <code>id</code>\n+     * @return RichResource Found RichResource\n+     */\n+    getRichResourceById {\n+        @Override\n+        public RichResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getRichResourceById(ac.getSession(), parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Creates a new resource.\n+     *\n+     * @param resource Resource JSON object\n+     * @param vo int virtual organization <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @return Resource Created resource\n+     */\n+    createResource {\n+        @Override\n+        public Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getResourcesManager().createResource(ac.getSession(),\n+                    parms.read(\"resource\", Resource.class),\n+                    ac.getVoById(parms.readInt(\"vo\")),\n+                    ac.getFacilityById(parms.readInt(\"facility\")));\n+        }\n+    },\n+\n+    /*#\n+     * Copy \"template\" settings from user's another existing resource and create new resource with this template.\n+     * The settings are attributes, services, tags (if exists), groups and their members (if the resources are from the same VO and withGroups is true)\n+     * Template Resource can be from any of user's facilities.\n+     *\n+     * @param templateResource template resource to copy\n+     * @param destinationResource destination resource containing destination facility, VO and resource name.\n+     * @param withGroups if set to true and resources ARE from the same VO we also - copy all group-resource and member-resource attributes\n+     *                   \t\t\t\t\t\t\t\t\t\t\t\t\t\t   - assign all groups same as on templateResource\n+     *\t                 if set to true and resources ARE NOT from the same VO InternalErrorException is thrown,\n+     *                   if set to false we will NOT copy groups and group related attributes.\n+     * @return Resource new Resource with copied settings based on withGroups parameter.\n+     */\n+    copyResource {\n+        @Override\n+        public Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getResourcesManager().copyResource(ac.getSession(),\n+                    parms.read(\"templateResource\", Resource.class),\n+                    parms.read(\"destinationResource\", Resource.class),\n+                    parms.readBoolean(\"withGroups\"));\n+        }\n+    },\n+\n+    /*#\n+     * Updates a resource.\n+     *\n+     * @param resource Resource JSON object\n+     * @return Resource Updated resource\n+     */\n+    updateResource {\n+        @Override\n+        public Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getResourcesManager().updateResource(ac.getSession(),\n+                    parms.read(\"resource\", Resource.class));\n+        }\n+    },\n+\n+    /*#\n+     * Deletes a resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     */\n+    deleteResource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getResourcesManager().deleteResource(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get facility which belongs to a specific resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @return Facility Found facility\n+     */\n+    getFacility {\n+        @Override\n+        public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getFacility(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+        }\n+    },\n+\n+    /*#\n+     * Sets Facility to resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     */\n+    setFacility {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getResourcesManager().setFacility(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")),\n+                    ac.getFacilityById(parms.readInt(\"facility\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Returns Vo which is tied to a specific resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @return Vo VirtualOrganization\n+     */\n+    getVo {\n+        @Override\n+        public Vo call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getVo(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all members assigned to the resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @return List<Member> Members assigned to the resource\n+     */\n+    getAllowedMembers {\n+        @Override\n+        public List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getAllowedMembers(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all users assigned to the resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @return List<User> Users assigned to the resource\n+     */\n+    getAllowedUsers {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getAllowedUsers(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+        }\n+    },\n+\n+    /*#\n+     * Assign group to a resource. Check if attributes for each member from group are valid. Fill members' attributes with missing value.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param resource int Resource <code>id</code>\n+     */\n+    assignGroupToResource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getResourcesManager().assignGroupToResource(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Assign groups to a resource. Check if attributes for each member from groups are valid. Fill members' attributes with missing values.\n+     *\n+     * @param groups List<Integer> list of groups IDs\n+     * @param resource int Resource <code>id</code>\n+     */\n+    assignGroupsToResource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            List<Integer> ids = parms.readList(\"groups\", Integer.class);\n+            List<Group> groups = new ArrayList<Group>();\n+            for (Integer i : ids) {\n+                groups.add(ac.getGroupById(i));\n+            }\n+            ac.getResourcesManager().assignGroupsToResource(ac.getSession(),\n+                    groups,\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Assign group to resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param resources List<Integer> list of resources IDs\n+     */\n+    assignGroupToResources {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            List<Integer> ids = parms.readList(\"resources\", Integer.class);\n+            List<Resource> resources = new ArrayList<Resource>();\n+            for (Integer i : ids) {\n+                resources.add(ac.getResourceById(i));\n+            }\n+            ac.getResourcesManager().assignGroupToResources(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    resources);\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove group from a resource.\n+     * After removing, check attributes and fix them if it is needed.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param resource int Resource <code>id</code>\n+     */\n+    removeGroupFromResource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getResourcesManager().removeGroupFromResource(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove groups from a resource.\n+     * After removing, check attributes and fix them if it is needed.\n+     *\n+     * @param groups List<Group> list of group\n+     * @param resource int Resource <code>id</code>\n+     */\n+    removeGroupsFromResource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            List<Integer> ids = parms.readList(\"groups\", Integer.class);\n+            List<Group> groups = new ArrayList<Group>();\n+            for (Integer i : ids) {\n+                groups.add(ac.getGroupById(i));\n+            }\n+            ac.getResourcesManager().removeGroupsFromResource(ac.getSession(),\n+                    groups,\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove group from resources.\n+     * After removing, check attributes and fix them if it is needed.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @param resources List<Integer> list of resources IDs\n+     */\n+    removeGroupFromResources {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            List<Integer> ids = parms.readList(\"resources\", Integer.class);\n+            List<Resource> resources = new ArrayList<Resource>();\n+            for (Integer i : ids) {\n+                resources.add(ac.getResourceById(i));\n+            }\n+            ac.getResourcesManager().removeGroupFromResources(ac.getSession(),\n+                    ac.getGroupById(parms.readInt(\"group\")),\n+                    resources);\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * List all groups associated with the resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @return List<Group> Resource groups\n+     */\n+    /*#\n+     * List all groups associated with the resource and member\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param member int Member <code>id</code>\n+     * @return List<Group> Resource groups with specified member\n+     */\n+    getAssignedGroups {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"member\")) {\n+                return ac.getResourcesManager().getAssignedGroups(ac.getSession(),\n+                        ac.getResourceById(parms.readInt(\"resource\")), ac.getMemberById(parms.readInt(\"member\")));\n+            } else {\n+                return ac.getResourcesManager().getAssignedGroups(ac.getSession(),\n+                        ac.getResourceById(parms.readInt(\"resource\")));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * List all resources associated with a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return List<Resource> Resources\n+     */\n+    /*#\n+     * List all resources associated with a member's group.\n+     *\n+     * @param member int Member <code>id</code>\n+     * @return List<Resource> Resources\n+     */\n+    getAssignedResources {\n+        @Override\n+        public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"member\")) {\n+                if (parms.contains(\"service\")) {\n+                    return ac.getResourcesManager().getAssignedResources(ac.getSession(),\n+                            ac.getMemberById(parms.readInt(\"member\")), ac.getServiceById(parms.readInt(\"service\")));\n+                } else {\n+                    return ac.getResourcesManager().getAssignedResources(ac.getSession(),\n+                            ac.getMemberById(parms.readInt(\"member\")));\n+                }\n+            } else {\n+                return ac.getResourcesManager().getAssignedResources(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Get all rich resources where the service and the member are assigned with facility property filled.\n+     *\n+     * @param member int Member <code>id</code>\n+     * @param service int Service <code>id</code>\n+     * @return List<RichResource> List of rich resources\n+     */\n+    /*#\n+     * List all rich resources associated with a member's group.\n+     *\n+     * @param member int Member <code>id</code>\n+     * @return List<RichResource> List of rich resources\n+     */\n+    /*#\n+     * List all rich resources associated with a group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return List<RichResource> List of rich resources\n+     */\n+    getAssignedRichResources {\n+        @Override\n+        public List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"member\")) {\n+                if (parms.contains(\"service\")) {\n+                    return ac.getResourcesManager().getAssignedRichResources(ac.getSession(),\n+                            ac.getMemberById(parms.readInt(\"member\")), ac.getServiceById(parms.readInt(\"service\")));\n+                } else {\n+                    return ac.getResourcesManager().getAssignedRichResources(ac.getSession(),\n+                            ac.getMemberById(parms.readInt(\"member\")));\n+                }\n+            } else {\n+                return ac.getResourcesManager().getAssignedRichResources(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Returns all members assigned to the resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @return List<Member> list of assigned members\n+     */\n+    getAssignedMembers {\n+        @Override\n+        public List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getAssignedMembers(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all members assigned to the resource as RichMembers.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @return List<RichMember> list of assigned rich members\n+     */\n+    getAssignedRichMembers {\n+        @Override\n+        public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getAssignedRichMembers(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+        }\n+    },\n+\n+    /*#\n+     * Adds a Resource admin.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param user int User <code>id</code>\n+     */\n+    /*#\n+     *  Adds a group administrator to the Resource.\n+     *\n+     *  @param resource int Resource <code>id</code>\n+     *  @param authorizedGroup int Group <code>id</code>\n+     */\n+    addAdmin {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            if (parms.contains(\"user\")) {\n+                ac.getResourcesManager().addAdmin(ac.getSession(),\n+                        ac.getResourceById(parms.readInt(\"resource\")),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            } else {\n+                ac.getResourcesManager().addAdmin(ac.getSession(),\n+                        ac.getResourceById(parms.readInt(\"resource\")),\n+                        ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+            }\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Removes a Resource admin.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param user int User <code>id</code>\n+     */\n+    /*#\n+     *  Removes a group administrator of the Resource.\n+     *\n+     *  @param resource int Resource <code>id</code>\n+     *  @param authorizedGroup int Group <code>id</code>\n+     */\n+    removeAdmin {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+            if (parms.contains(\"user\")) {\n+                ac.getResourcesManager().removeAdmin(ac.getSession(),\n+                        ac.getResourceById(parms.readInt(\"resource\")),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            } else {\n+                ac.getResourcesManager().removeAdmin(ac.getSession(),\n+                        ac.getResourceById(parms.readInt(\"resource\")),\n+                        ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+            }\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get list of all resource administrators for supported role and given resource.\n+     *\n+     * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n+     *\n+     * Supported roles: ResourceAdmin, VOAdmin\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param onlyDirectAdmins boolean if true, get only direct resource administrators (if false, get both direct and indirect)\n+     *\n+     * @return List<User> list of all resource administrators of the given resource for supported role\n+     */\n+    getAdmins {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getAdmins(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")),\n+                    parms.readBoolean(\"onlyDirectAdmins\"));\n+        }\n+    },\n+\n+    /*#\n+     * Get all Resource group admins.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @return List<Group> admins\n+     */\n+    getAdminGroups {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getResourcesManager().getAdminGroups(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+        }\n+    },\n+\n+    /*#\n+     * Get list of all richUser administrators for the resource and supported role with specific attributes.\n+     *\n+     * Supported roles: ResourceAdmin, VOAdmin\n+     *\n+     * If \"onlyDirectAdmins\" is true, return only direct admins of the resource for supported role with specific attributes.\n+     * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n+     * @param allUserAttributes int if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+     * @param onlyDirectAdmins int if == true, get only direct resource administrators (if false, get both direct and indirect)\n+     *\n+     * @return List<RichUser> list of RichUser administrators for the resource and supported role with attributes\n+     */\n+    getRichAdmins {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getRichAdmins(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")),\n+                    parms.readList(\"specificAttributes\", String.class),\n+                    parms.readBoolean(\"allUserAttributes\"),\n+                    parms.readBoolean(\"onlyDirectAdmins\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of Resources, where the user is an Administrator.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<Resource> Found Resources\n+     */\n+    getResourcesWhereUserIsAdmin {\n+        @Override\n+        public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getResourcesWhereUserIsAdmin(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")));\n+        }\n+    },\n+\n+    /*#\n+     * Assign service to resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param service int Service <code>id</code>\n+     */\n+    assignService {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getResourcesManager().assignService(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")),\n+                    ac.getServiceById(parms.readInt(\"service\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Assign all services from services package to resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param servicesPackage int Services package <code>id</code>\n+     */\n+    assignServicesPackage {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getResourcesManager().assignServicesPackage(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")),\n+                    ac.getServicesPackageById(parms.readInt(\"servicesPackage\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Removes a service from a resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param service int Service <code>id</code>\n+     */\n+    removeService {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getResourcesManager().removeService(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")),\n+                    ac.getServiceById(parms.readInt(\"service\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove from resource all services from services package.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @param servicesPackage int Services package <code>id</code>\n+     */\n+    removeServicesPackage {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getResourcesManager().removeServicesPackage(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")),\n+                    ac.getServicesPackageById(parms.readInt(\"servicesPackage\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get all VO resources.\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @return List<Resource> VO resources\n+     */\n+    getResources {\n+        @Override\n+        public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getResources(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+        }\n+    },\n+\n+    /*#\n+     * Get all VO rich resources.\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @return List<RichResource> VO resources\n+     */\n+    getRichResources {\n+        @Override\n+        public List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getRichResources(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns number of VO resources\n+     *\n+     * @param vo int VO <code>id</code>\n+     * @return int VO resources count\n+     */\n+    /*#\n+     * Gets count of all users.\n+\n+     * @return int resources count\n+     */\n+    getResourcesCount {\n+        @Override\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"vo\")) {\n+                return ac.getResourcesManager().getResourcesCount(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+            } else {\n+                return ac.getResourcesManager().getResourcesCount(ac.getSession());\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Deletes all VO resources\n+     *\n+     * @param vo int VO <code>id</code>\n+     */\n+    deleteAllResources {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            ac.getResourcesManager().deleteAllResources(ac.getSession(),\n+                    ac.getVoById(parms.readInt(\"vo\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get all resources which have the member access on.\n+     *\n+     * @param member int Member <code>id</code>\n+     * @return List<Resource> VO resources\n+     */\n+    getAllowedResources {\n+        @Override\n+        public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getAllowedResources(ac.getSession(),\n+                    ac.getMemberById(parms.readInt(\"member\")));\n+        }\n+    },\n+\n+    /*#\n+     * Create new resource tag in VO\n+     *\n+     * @param resourceTag ResourceTag ResourceTag with tagName set\n+     * @param vo int <code>id</code> of VO to create tag for\n+     *\n+     * @return ResourceTag created ResourceTag with <code>id</code> and VO_ID set\n+     */\n+    createResourceTag {\n+        @Override\n+        public ResourceTag call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().createResourceTag(ac.getSession(),\n+                    parms.read(\"resourceTag\", ResourceTag.class),\n+                    ac.getVoById(parms.readInt(\"vo\")));\n+        }\n+    },\n+\n+    /*#\n+     * Update resource tag name by it's <code>id</code> and VO_ID\n+     *\n+     * @param resourceTag ResourceTag ResourceTag with new tagName set\n+     *\n+     * @return ResourceTag updated ResourceTag with new tagName\n+     */\n+    updateResourceTag {\n+        @Override\n+        public ResourceTag call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().updateResourceTag(ac.getSession(),\n+                    parms.read(\"resourceTag\", ResourceTag.class));\n+        }\n+    },\n+\n+    /*#\n+     * Delete resource tag by it's <code>id</code> and VO_ID\n+     *\n+     * @param resourceTag ResourceTag ResourceTag to delete\n+     */\n+    deleteResourceTag {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getResourcesManager().deleteResourceTag(ac.getSession(),\n+                    parms.read(\"resourceTag\", ResourceTag.class));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Delete all resources tags of VO\n+     *\n+     * @param vo int <code>id</code> of VO to delete all resources tags for\n+     */\n+    deleteAllResourcesTagsForVo {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getResourcesManager().deleteAllResourcesTagsForVo(ac.getSession(),\n+                    ac.getVoById(parms.readInt(\"vo\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Assign resource tag to resource\n+     *\n+     * @param resourceTag ResourceTag ResourceTag to assign\n+     * @param resource int <code>id</code> of Resource to assign tags for\n+     */\n+    assignResourceTagToResource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getResourcesManager().assignResourceTagToResource(ac.getSession(),\n+                    parms.read(\"resourceTag\", ResourceTag.class),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove resource tag from resource\n+     *\n+     * @param resourceTag ResourceTag ResourceTag to remove\n+     * @param resource int <code>id</code> of Resource to remove tags for\n+     */\n+    removeResourceTagFromResource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getResourcesManager().removeResourceTagFromResource(ac.getSession(),\n+                    parms.read(\"resourceTag\", ResourceTag.class),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove all resources tags from resource\n+     *\n+     * @param resource int <code>id</code> of Resource to remove all tags for\n+     */\n+    removeAllResourcesTagFromResource {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getResourcesManager().removeAllResourcesTagFromResource(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get all resources with specific tag assigned\n+     *\n+     * @param resourceTag ResourceTag ResourceTag to get resources for\n+     *\n+     * @return List<Resource> all resources with specific tag assigned\n+     */\n+    getAllResourcesByResourceTag {\n+        @Override\n+        public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getAllResourcesByResourceTag(ac.getSession(),\n+                    parms.read(\"resourceTag\", ResourceTag.class));\n+        }\n+    },\n+\n+    /*#\n+     * Get all resource tags of VO\n+     *\n+     * @param vo int <code>id</code> of VO to get all resource tags for\n+     *\n+     * @return List<ResourceTag> all resources tags of VO\n+     */\n+    getAllResourcesTagsForVo {\n+        @Override\n+        public List<ResourceTag> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getAllResourcesTagsForVo(ac.getSession(),\n+                    ac.getVoById(parms.readInt(\"vo\")));\n+        }\n+    },\n+\n+    /*#\n+     * Get all resource tags of Resource\n+     *\n+     * @param resource int <code>id</code> of Resource to get all resource tags for\n+     *\n+     * @return List<ResourceTag> all resources tags of Resource\n+     */\n+    getAllResourcesTagsForResource {\n+        @Override\n+        public List<ResourceTag> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getResourcesManager().getAllResourcesTagsForResource(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+        }\n+    },\n+\n+    /*#\n+     * List all services associated with the resource.\n+     *\n+     * @param resource int Resource <code>id</code>\n+     * @return List<Service> Services\n+     */\n+    getAssignedServices {\n+        @Override\n+        public List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getResourcesManager().getAssignedServices(ac.getSession(),\n+                    ac.getResourceById(parms.readInt(\"resource\")));\n+\n+        }\n+    },\n+\n+    /*#\n+     *  Set ban for member on resource.\n+     *\n+     * @param banOnResource BanOnResource JSON object\n+     * @return BanOnResource Created banOnResource\n+     */\n+    setBan {\n+        @Override\n+        public BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getResourcesManager().setBan(ac.getSession(),\n+                    parms.read(\"banOnResource\", BanOnResource.class));\n+\n+        }\n+    },\n+\n+    /*#\n+     *  Get Ban for member on resource by it's id.\n+     *\n+     * @param banId int BanOnResource <code>id</code>\n+     * @return BanOnResource banOnResource\n+     */\n+    getBanById {\n+        @Override\n+        public BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getResourcesManager().getBanById(ac.getSession(),\n+                    parms.readInt(\"banId\"));\n+\n+        }\n+    },\n+\n+    /*#\n+     *  Get ban by memberId and resource id.\n+     *\n+     * @param memberId int Member <code>id</code>\n+     * @param resourceId int Resource <code>id</code>\n+     * @return BanOnResource banOnResource\n+     */\n+    getBan {\n+        @Override\n+        public BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getResourcesManager().getBan(ac.getSession(),\n+                    parms.readInt(\"memberId\"), parms.readInt(\"resourceId\"));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Get all bans for member on any resource.\n+     *\n+     * @param memberId int Member <code>id</code>\n+     * @return List<BanOnResource> memberBansOnResources\n+     */\n+    getBansForMember {\n+        @Override\n+        public List<BanOnResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getResourcesManager().getBansForMember(ac.getSession(),\n+                    parms.readInt(\"memberId\"));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Get all bans for members on the resource.\n+     *\n+     * @param resourceId int Resource <code>id</code>\n+     * @return List<BanOnResource> membersBansOnResource\n+     */\n+    getBansForResource {\n+        @Override\n+        public List<BanOnResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getResourcesManager().getBansForResource(ac.getSession(),\n+                    parms.readInt(\"resourceId\"));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Update existing ban (description, validation timestamp)\n+     *\n+     * @param banOnResource BanOnResource JSON object\n+     * @return BanOnResource updated banOnResource\n+     */\n+    updateBan {\n+        @Override\n+        public BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            return ac.getResourcesManager().updateBan(ac.getSession(),\n+                    parms.read(\"banOnResource\", BanOnResource.class));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Remove specific ban by it's id.\n+     *\n+     * @param banId int BanOnResource <code>id</code>\n+     */\n+    /*#\n+     * Remove specific ban by memberId and resourceId.\n+     *\n+     * @param memberId int Member <code>id</code>\n+     * @param resourceId int Resource <code>id</code>\n+     */\n+    removeBan {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.stateChangingCheck();\n+\n+            if (parms.contains(\"banId\")) {\n+                ac.getResourcesManager().removeBan(ac.getSession(),\n+                        parms.readInt(\"banId\"));\n+            } else {\n+                ac.getResourcesManager().removeBan(ac.getSession(),\n+                        parms.readInt(\"memberId\"), parms.readInt(\"resourceId\"));\n+            }\n+            return null;\n+        }\n+    };\n }\n",
            "diff_size": 1050
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/387/ResourcesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/387/ResourcesManagerMethod.java\nindex f14425a2848..6657d80c888 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/387/ResourcesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/387/ResourcesManagerMethod.java\n@@ -1,32 +1,32 @@\n package cz.metacentrum.perun.rpc.methods;\n \n-\n import java.util.ArrayList;\n import java.util.List;\n-\n import cz.metacentrum.perun.core.api.*;\n import cz.metacentrum.perun.core.api.exceptions.PerunException;\n import cz.metacentrum.perun.rpc.ApiCaller;\n import cz.metacentrum.perun.rpc.ManagerMethod;\n import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n \n+\n public enum ResourcesManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Returns resource by its <code>id</code>.\n-\t *\n-\t * @param id int Resource <code>id</code>\n-\t * @return Resource Found Resource\n-\t */\n-\tgetResourceById {\n-\n-\t\t@Override\n-\t\tpublic Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourceById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n+ /*#\n+  * Returns resource by its <code>id</code>.\n+  *\n+  * @param id int Resource <code>id</code>\n+  * @return Resource Found Resource\n+  */\n+\n+\n+ getResourceById {\n+  @Override\n+  public Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourceById(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n      * Returns resource by its name, Vo <code>id</code> and Facility <code>id</code>.\n      *\n      * @param vo int VO <code>id</code>\n@@ -34,1039 +34,1031 @@ public enum ResourcesManagerMethod implements ManagerMethod {\n      * @param name String resource name\n      * @return Resource Found Resource based on the input.\n      */\n-\tgetResourceByName {\n-\t\t@Override\n-\t\tpublic Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getResourceByName(ac.getSession(),\n-\t\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")),\n-\t\t\t\t\t\t\tparms.readString(\"name\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns RichResource by its <code>id</code> (also containing facility and VO inside)\n-\t *\n-\t * @param id int RichResource <code>id</code>\n-\t * @return RichResource Found RichResource\n-\t */\n-\tgetRichResourceById {\n-\n-\t\t@Override\n-\t\tpublic RichResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getRichResourceById(ac.getSession(), parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates a new resource.\n-\t *\n-\t * @param resource Resource JSON object\n-\t * @param vo int virtual organization <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return Resource Created resource\n-\t */\n-\tcreateResource {\n-\n-\t\t@Override\n-\t\tpublic Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getResourcesManager().createResource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resource\", Resource.class),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Copy \"template\" settings from user's another existing resource and create new resource with this template.\n-\t * The settings are attributes, services, tags (if exists), groups and their members (if the resources are from the same VO and withGroups is true)\n-\t * Template Resource can be from any of user's facilities.\n-\t *\n-\t * @param templateResource template resource to copy\n-\t * @param destinationResource destination resource containing destination facility, VO and resource name.\n-\t * @param withGroups if set to true and resources ARE from the same VO we also - copy all group-resource and member-resource attributes\n-\t *                   \t\t\t\t\t\t\t\t\t\t\t\t\t\t   - assign all groups same as on templateResource\n-\t *\t                 if set to true and resources ARE NOT from the same VO InternalErrorException is thrown,\n-\t *                   if set to false we will NOT copy groups and group related attributes.\n-\t * @return Resource new Resource with copied settings based on withGroups parameter.\n-\t */\n-\tcopyResource {\n-\t\t@Override\n-\t\tpublic Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getResourcesManager().copyResource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"templateResource\", Resource.class),\n-\t\t\t\t\tparms.read(\"destinationResource\", Resource.class),\n-\t\t\t\t\tparms.readBoolean(\"withGroups\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates a resource.\n-\t *\n-\t * @param resource Resource JSON object\n-\t * @return Resource Updated resource\n-\t */\n-\tupdateResource {\n-\n-\t\t@Override\n-\t\tpublic Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getResourcesManager().updateResource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resource\", Resource.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes a resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t */\n-\tdeleteResource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().deleteResource(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get facility which belongs to a specific resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return Facility Found facility\n-\t */\n-\tgetFacility {\n-\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getFacility(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Sets Facility to resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tsetFacility {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().setFacility(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns Vo which is tied to a specific resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return Vo VirtualOrganization\n-\t */\n-\tgetVo {\n-\n-\t\t@Override\n-\t\tpublic Vo call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getVo(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all members assigned to the resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<Member> Members assigned to the resource\n-\t */\n-\tgetAllowedMembers {\n-\n-\t\t@Override\n-\t\tpublic List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllowedMembers(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all users assigned to the resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<User> Users assigned to the resource\n-\t */\n-\tgetAllowedUsers {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllowedUsers(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign group to a resource. Check if attributes for each member from group are valid. Fill members' attributes with missing value.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param resource int Resource <code>id</code>\n-\t */\n-\tassignGroupToResource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().assignGroupToResource(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign groups to a resource. Check if attributes for each member from groups are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param groups List<Integer> list of groups IDs\n-\t * @param resource int Resource <code>id</code>\n-\t */\n-\tassignGroupsToResource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tList<Integer> ids = parms.readList(\"groups\", Integer.class);\n-\t\t\tList<Group> groups = new ArrayList<Group>();\n-\t\t\tfor (Integer i : ids) {\n-\t\t\t\tgroups.add(ac.getGroupById(i));\n-\t\t\t}\n-\t\t\tac.getResourcesManager().assignGroupsToResource(ac.getSession(),\n-\t\t\t\t\tgroups,\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign group to resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param resources List<Integer> list of resources IDs\n-\t */\n-\tassignGroupToResources {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tList<Integer> ids = parms.readList(\"resources\", Integer.class);\n-\t\t\tList<Resource> resources = new ArrayList<Resource>();\n-\t\t\tfor (Integer i : ids) {\n-\t\t\t\tresources.add(ac.getResourceById(i));\n-\t\t\t}\n-\t\t\tac.getResourcesManager().assignGroupToResources(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tresources);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove group from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param resource int Resource <code>id</code>\n-\t */\n-\tremoveGroupFromResource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().removeGroupFromResource(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove groups from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param groups List<Group> list of group\n-\t * @param resource int Resource <code>id</code>\n-\t */\n-\tremoveGroupsFromResource {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tList<Integer> ids = parms.readList(\"groups\", Integer.class);\n-\t\t\tList<Group> groups = new ArrayList<Group>();\n-\t\t\tfor (Integer i : ids) {\n-\t\t\t\tgroups.add(ac.getGroupById(i));\n-\t\t\t}\n-\t\t\tac.getResourcesManager().removeGroupsFromResource(ac.getSession(),\n-\t\t\t\t\tgroups,\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove group from resources.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @param resources List<Integer> list of resources IDs\n-\t */\n-\tremoveGroupFromResources {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tList<Integer> ids = parms.readList(\"resources\", Integer.class);\n-\t\t\tList<Resource> resources = new ArrayList<Resource>();\n-\t\t\tfor (Integer i : ids) {\n-\t\t\t\tresources.add(ac.getResourceById(i));\n-\t\t\t}\n-\t\t\tac.getResourcesManager().removeGroupFromResources(ac.getSession(),\n-\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")),\n-\t\t\t\t\tresources);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List all groups associated with the resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<Group> Resource groups\n-\t */\n-\t/*#\n-\t * List all groups associated with the resource and member\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param member int Member <code>id</code>\n-\t * @return List<Group> Resource groups with specified member\n-\t */\n-\tgetAssignedGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"member\")) {\n-\t\t\t\treturn ac.getResourcesManager().getAssignedGroups(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")), ac.getMemberById(parms.readInt(\"member\")));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getResourcesManager().getAssignedGroups(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List all resources associated with a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<Resource> Resources\n-\t */\n-\t/*#\n-\t * List all resources associated with a member's group.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return List<Resource> Resources\n-\t */\n-\tgetAssignedResources {\n-\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"member\")) {\n-\t\t\t\tif (parms.contains(\"service\")) {\n-\t\t\t\t\treturn ac.getResourcesManager().getAssignedResources(ac.getSession(),\n-\t\t\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")), ac.getServiceById(parms.readInt(\"service\")));\n-\t\t\t\t} else {\n-\t\t\t\t\treturn ac.getResourcesManager().getAssignedResources(ac.getSession(),\n-\t\t\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\treturn ac.getResourcesManager().getAssignedResources(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all rich resources where the service and the member are assigned with facility property filled.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @param service int Service <code>id</code>\n-\t * @return List<RichResource> List of rich resources\n-\t */\n-\t/*#\n-\t * List all rich resources associated with a member's group.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return List<RichResource> List of rich resources\n-\t */\n-\t/*#\n-\t * List all rich resources associated with a group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<RichResource> List of rich resources\n-\t */\n-\tgetAssignedRichResources {\n-\n-\t\t@Override\n-\t\tpublic List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"member\")) {\n-\t\t\t\tif (parms.contains(\"service\")) {\n-\t\t\t\t\treturn ac.getResourcesManager().getAssignedRichResources(ac.getSession(),\n-\t\t\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")), ac.getServiceById(parms.readInt(\"service\")));\n-\t\t\t\t} else {\n-\t\t\t\t\treturn ac.getResourcesManager().getAssignedRichResources(ac.getSession(),\n-\t\t\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\treturn ac.getResourcesManager().getAssignedRichResources(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all members assigned to the resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<Member> list of assigned members\n-\t */\n-\tgetAssignedMembers {\n-\t\t@Override\n-\t\tpublic List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAssignedMembers(ac.getSession(),\n-\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all members assigned to the resource as RichMembers.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<RichMember> list of assigned rich members\n-\t */\n-\tgetAssignedRichMembers {\n-\t\t@Override\n-\t\tpublic List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAssignedRichMembers(ac.getSession(),\n-\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds a Resource admin.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Adds a group administrator to the Resource.\n-\t *\n-\t *  @param resource int Resource <code>id</code>\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\taddAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getResourcesManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getResourcesManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a Resource admin.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Removes a group administrator of the Resource.\n-\t *\n-\t *  @param resource int Resource <code>id</code>\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\tremoveAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getResourcesManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getResourcesManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all resource administrators for supported role and given resource.\n-\t *\n-\t * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param onlyDirectAdmins boolean if true, get only direct resource administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<User> list of all resource administrators of the given resource for supported role\n-\t */\n-\tgetAdmins {\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAdmins(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Resource group admins.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<Group> admins\n-\t */\n-\tgetAdminGroups {\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getAdminGroups(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all richUser administrators for the resource and supported role with specific attributes.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is true, return only direct admins of the resource for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes int if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins int if == true, get only direct resource administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<RichUser> list of RichUser administrators for the resource and supported role with attributes\n-\t */\n-\tgetRichAdmins {\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getRichAdmins(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tparms.readList(\"specificAttributes\", String.class),\n-\t\t\t\t\tparms.readBoolean(\"allUserAttributes\"),\n-\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of Resources, where the user is an Administrator.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Resource> Found Resources\n-\t */\n-\tgetResourcesWhereUserIsAdmin {\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getResourcesWhereUserIsAdmin(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign service to resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param service int Service <code>id</code>\n-\t */\n-\tassignService {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().assignService(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign all services from services package to resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param servicesPackage int Services package <code>id</code>\n-\t */\n-\tassignServicesPackage {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().assignServicesPackage(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tac.getServicesPackageById(parms.readInt(\"servicesPackage\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a service from a resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param service int Service <code>id</code>\n-\t */\n-\tremoveService {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().removeService(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove from resource all services from services package.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @param servicesPackage int Services package <code>id</code>\n-\t */\n-\tremoveServicesPackage {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().removeServicesPackage(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")),\n-\t\t\t\t\tac.getServicesPackageById(parms.readInt(\"servicesPackage\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all VO resources.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<Resource> VO resources\n-\t */\n-\tgetResources {\n-\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getResources(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all VO rich resources.\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return List<RichResource> VO resources\n-\t */\n-\tgetRichResources {\n-\n-\t\t@Override\n-\t\tpublic List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getRichResources(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns number of VO resources\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t * @return int VO resources count\n-\t */\n-\t/*#\n-\t * Gets count of all users.\n-\n-\t * @return int resources count\n-\t */\n-\tgetResourcesCount {\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"vo\")) {\n-\t\t\t\treturn ac.getResourcesManager().getResourcesCount(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getResourcesManager().getResourcesCount(ac.getSession());\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes all VO resources\n-\t *\n-\t * @param vo int VO <code>id</code>\n-\t */\n-\tdeleteAllResources {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tac.getResourcesManager().deleteAllResources(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all resources which have the member access on.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return List<Resource> VO resources\n-\t */\n-\tgetAllowedResources {\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllowedResources(ac.getSession(),\n-\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Create new resource tag in VO\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag with tagName set\n-\t * @param vo int <code>id</code> of VO to create tag for\n-\t *\n-\t * @return ResourceTag created ResourceTag with <code>id</code> and VO_ID set\n-\t */\n-\tcreateResourceTag {\n-\t\t@Override\n-\t\tpublic ResourceTag call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().createResourceTag(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Update resource tag name by it's <code>id</code> and VO_ID\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag with new tagName set\n-\t *\n-\t * @return ResourceTag updated ResourceTag with new tagName\n-\t */\n-\tupdateResourceTag {\n-\t\t@Override\n-\t\tpublic ResourceTag call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().updateResourceTag(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete resource tag by it's <code>id</code> and VO_ID\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag to delete\n-\t */\n-\tdeleteResourceTag {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getResourcesManager().deleteResourceTag(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Delete all resources tags of VO\n-\t *\n-\t * @param vo int <code>id</code> of VO to delete all resources tags for\n-\t */\n-\tdeleteAllResourcesTagsForVo {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getResourcesManager().deleteAllResourcesTagsForVo(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign resource tag to resource\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag to assign\n-\t * @param resource int <code>id</code> of Resource to assign tags for\n-\t */\n-\tassignResourceTagToResource {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getResourcesManager().assignResourceTagToResource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove resource tag from resource\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag to remove\n-\t * @param resource int <code>id</code> of Resource to remove tags for\n-\t */\n-\tremoveResourceTagFromResource {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getResourcesManager().removeResourceTagFromResource(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove all resources tags from resource\n-\t *\n-\t * @param resource int <code>id</code> of Resource to remove all tags for\n-\t */\n-\tremoveAllResourcesTagFromResource {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getResourcesManager().removeAllResourcesTagFromResource(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all resources with specific tag assigned\n-\t *\n-\t * @param resourceTag ResourceTag ResourceTag to get resources for\n-\t *\n-\t * @return List<Resource> all resources with specific tag assigned\n-\t */\n-\tgetAllResourcesByResourceTag {\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllResourcesByResourceTag(ac.getSession(),\n-\t\t\t\t\tparms.read(\"resourceTag\", ResourceTag.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all resource tags of VO\n-\t *\n-\t * @param vo int <code>id</code> of VO to get all resource tags for\n-\t *\n-\t * @return List<ResourceTag> all resources tags of VO\n-\t */\n-\tgetAllResourcesTagsForVo {\n-\t\t@Override\n-\t\tpublic List<ResourceTag> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllResourcesTagsForVo(ac.getSession(),\n-\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all resource tags of Resource\n-\t *\n-\t * @param resource int <code>id</code> of Resource to get all resource tags for\n-\t *\n-\t * @return List<ResourceTag> all resources tags of Resource\n-\t */\n-\tgetAllResourcesTagsForResource {\n-\t\t@Override\n-\t\tpublic List<ResourceTag> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getResourcesManager().getAllResourcesTagsForResource(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List all services associated with the resource.\n-\t *\n-\t * @param resource int Resource <code>id</code>\n-\t * @return List<Service> Services\n-\t */\n-\tgetAssignedServices {\n-\n-\t\t@Override\n-\t\tpublic List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getAssignedServices(ac.getSession(),\n-\t\t\t\t\tac.getResourceById(parms.readInt(\"resource\")));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Set ban for member on resource.\n-\t *\n-\t * @param banOnResource BanOnResource JSON object\n-\t * @return BanOnResource Created banOnResource\n-\t */\n-\tsetBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getResourcesManager().setBan(ac.getSession(),\n-\t\t\t\t\tparms.read(\"banOnResource\", BanOnResource.class));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Get Ban for member on resource by it's id.\n-\t *\n-\t * @param banId int BanOnResource <code>id</code>\n-\t * @return BanOnResource banOnResource\n-\t */\n-\tgetBanById {\n-\n-\t\t@Override\n-\t\tpublic BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getBanById(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"banId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Get ban by memberId and resource id.\n-\t *\n-\t * @param memberId int Member <code>id</code>\n-\t * @param resourceId int Resource <code>id</code>\n-\t * @return BanOnResource banOnResource\n-\t */\n-\tgetBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"memberId\"), parms.readInt(\"resourceId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all bans for member on any resource.\n-\t *\n-\t * @param memberId int Member <code>id</code>\n-\t * @return List<BanOnResource> memberBansOnResources\n-\t */\n-\tgetBansForMember {\n-\n-\t\t@Override\n-\t\tpublic List<BanOnResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getBansForMember(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"memberId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all bans for members on the resource.\n-\t *\n-\t * @param resourceId int Resource <code>id</code>\n-\t * @return List<BanOnResource> membersBansOnResource\n-\t */\n-\tgetBansForResource {\n-\n-\t\t@Override\n-\t\tpublic List<BanOnResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getResourcesManager().getBansForResource(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"resourceId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Update existing ban (description, validation timestamp)\n-\t *\n-\t * @param banOnResource BanOnResource JSON object\n-\t * @return BanOnResource updated banOnResource\n-\t */\n-\tupdateBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\treturn ac.getResourcesManager().updateBan(ac.getSession(),\n-\t\t\t\t\tparms.read(\"banOnResource\", BanOnResource.class));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove specific ban by it's id.\n-\t *\n-\t * @param banId int BanOnResource <code>id</code>\n-\t */\n-\t/*#\n-\t * Remove specific ban by memberId and resourceId.\n-\t *\n-\t * @param memberId int Member <code>id</code>\n-\t * @param resourceId int Resource <code>id</code>\n-\t */\n-\tremoveBan {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.stateChangingCheck();\n-\n-\t\t\tif(parms.contains(\"banId\")) {\n-\t\t\t\tac.getResourcesManager().removeBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"banId\"));\n-\t\t\t} else {\n-\t\t\t\tac.getResourcesManager().removeBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"memberId\"), parms.readInt(\"resourceId\"));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t};\n-}\n+\n+\n+ getResourceByName {\n+  @Override\n+  public Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getResourceByName(ac.getSession(),\n+ac.getVoById(parms.readInt(\"vo\")),\n+ac.getFacilityById(parms.readInt(\"facility\")),\n+parms.readString(\"name\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns RichResource by its <code>id</code> (also containing facility and VO inside)\n+  *\n+  * @param id int RichResource <code>id</code>\n+  * @return RichResource Found RichResource\n+  */\n+\n+\n+ getRichResourceById {\n+  @Override\n+  public RichResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getRichResourceById(ac.getSession(), parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Creates a new resource.\n+  *\n+  * @param resource Resource JSON object\n+  * @param vo int virtual organization <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @return Resource Created resource\n+  */\n+\n+\n+ createResource {\n+  @Override\n+  public Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getResourcesManager().createResource(ac.getSession(), parms.read(\"resource\", Resource.class), ac.getVoById(parms.readInt(\"vo\")), ac.getFacilityById(parms.readInt(\"facility\")));\n+  }\n+ },\n+\n+ /*#\n+  * Copy \"template\" settings from user's another existing resource and create new resource with this template.\n+  * The settings are attributes, services, tags (if exists), groups and their members (if the resources are from the same VO and withGroups is true)\n+  * Template Resource can be from any of user's facilities.\n+  *\n+  * @param templateResource template resource to copy\n+  * @param destinationResource destination resource containing destination facility, VO and resource name.\n+  * @param withGroups if set to true and resources ARE from the same VO we also - copy all group-resource and member-resource attributes\n+  *                                    - assign all groups same as on templateResource\n+  *                  if set to true and resources ARE NOT from the same VO InternalErrorException is thrown,\n+  *                   if set to false we will NOT copy groups and group related attributes.\n+  * @return Resource new Resource with copied settings based on withGroups parameter.\n+  */\n+\n+\n+ copyResource {\n+  @Override\n+  public Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getResourcesManager().copyResource(ac.getSession(), parms.read(\"templateResource\", Resource.class), parms.read(\"destinationResource\", Resource.class), parms.readBoolean(\"withGroups\"));\n+  }\n+ },\n+\n+ /*#\n+  * Updates a resource.\n+  *\n+  * @param resource Resource JSON object\n+  * @return Resource Updated resource\n+  */\n+\n+\n+ updateResource {\n+  @Override\n+  public Resource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getResourcesManager().updateResource(ac.getSession(), parms.read(\"resource\", Resource.class));\n+  }\n+ },\n+\n+ /*#\n+  * Deletes a resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  */\n+\n+\n+ deleteResource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getResourcesManager().deleteResource(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get facility which belongs to a specific resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @return Facility Found facility\n+  */\n+\n+\n+ getFacility {\n+  @Override\n+  public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getFacility(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+  }\n+ },\n+\n+ /*#\n+  * Sets Facility to resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  */\n+\n+\n+ setFacility {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getResourcesManager().setFacility(ac.getSession(),\n+ac.getResourceById(parms.readInt(\"resource\")),\n+ac.getFacilityById(parms.readInt(\"facility\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Returns Vo which is tied to a specific resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @return Vo VirtualOrganization\n+  */\n+\n+\n+ getVo {\n+  @Override\n+  public Vo call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getVo(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all members assigned to the resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @return List<Member> Members assigned to the resource\n+  */\n+\n+\n+ getAllowedMembers {\n+  @Override\n+  public List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAllowedMembers(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all users assigned to the resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @return List<User> Users assigned to the resource\n+  */\n+\n+\n+ getAllowedUsers {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAllowedUsers(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+  }\n+ },\n+\n+ /*#\n+  * Assign group to a resource. Check if attributes for each member from group are valid. Fill members' attributes with missing value.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param resource int Resource <code>id</code>\n+  */\n+\n+\n+ assignGroupToResource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getResourcesManager().assignGroupToResource(ac.getSession(),\n+ac.getGroupById(parms.readInt(\"group\")),\n+ac.getResourceById(parms.readInt(\"resource\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Assign groups to a resource. Check if attributes for each member from groups are valid. Fill members' attributes with missing values.\n+  *\n+  * @param groups List<Integer> list of groups IDs\n+  * @param resource int Resource <code>id</code>\n+  */\n+\n+\n+ assignGroupsToResource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   List<Integer> ids = parms.readList(\"groups\", Integer.class);\n+   List<Group> groups = new ArrayList<Group>();\n+   for (Integer i : ids) {\n+    groups.add(ac.getGroupById(i));\n+   }\n+   ac.getResourcesManager().assignGroupsToResource(ac.getSession(), groups, ac.getResourceById(parms.readInt(\"resource\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Assign group to resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param resources List<Integer> list of resources IDs\n+  */\n+\n+\n+ assignGroupToResources {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   List<Integer> ids = parms.readList(\"resources\", Integer.class);\n+   List<Resource> resources = new ArrayList<Resource>();\n+   for (Integer i : ids) {\n+    resources.add(ac.getResourceById(i));\n+   }\n+   ac.getResourcesManager().assignGroupToResources(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), resources);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove group from a resource.\n+  * After removing, check attributes and fix them if it is needed.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param resource int Resource <code>id</code>\n+  */\n+\n+\n+ removeGroupFromResource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getResourcesManager().removeGroupFromResource(ac.getSession(),\n+ac.getGroupById(parms.readInt(\"group\")),\n+ac.getResourceById(parms.readInt(\"resource\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove groups from a resource.\n+  * After removing, check attributes and fix them if it is needed.\n+  *\n+  * @param groups List<Group> list of group\n+  * @param resource int Resource <code>id</code>\n+  */\n+\n+\n+ removeGroupsFromResource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   List<Integer> ids = parms.readList(\"groups\", Integer.class);\n+   List<Group> groups = new ArrayList<Group>();\n+   for (Integer i : ids) {\n+    groups.add(ac.getGroupById(i));\n+   }\n+   ac.getResourcesManager().removeGroupsFromResource(ac.getSession(), groups, ac.getResourceById(parms.readInt(\"resource\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove group from resources.\n+  * After removing, check attributes and fix them if it is needed.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @param resources List<Integer> list of resources IDs\n+  */\n+\n+\n+ removeGroupFromResources {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   List<Integer> ids = parms.readList(\"resources\", Integer.class);\n+   List<Resource> resources = new ArrayList<Resource>();\n+   for (Integer i : ids) {\n+    resources.add(ac.getResourceById(i));\n+   }\n+   ac.getResourcesManager().removeGroupFromResources(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")), resources);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * List all groups associated with the resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @return List<Group> Resource groups\n+  */\n+ /*#\n+  * List all groups associated with the resource and member\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param member int Member <code>id</code>\n+  * @return List<Group> Resource groups with specified member\n+  */\n+\n+\n+ getAssignedGroups {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"member\")) {\n+    return ac.getResourcesManager().getAssignedGroups(ac.getSession(),\n+ac.getResourceById(parms.readInt(\"resource\")),\n+ac.getMemberById(parms.readInt(\"member\")));\n+   } else {\n+    return ac.getResourcesManager().getAssignedGroups(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * List all resources associated with a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return List<Resource> Resources\n+  */\n+ /*#\n+  * List all resources associated with a member's group.\n+  *\n+  * @param member int Member <code>id</code>\n+  * @return List<Resource> Resources\n+  */\n+\n+\n+ getAssignedResources {\n+  @Override\n+  public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"member\")) {\n+    if (parms.contains(\"service\")) {\n+     return ac.getResourcesManager().getAssignedResources(ac.getSession(),\n+ac.getMemberById(parms.readInt(\"member\")),\n+ac.getServiceById(parms.readInt(\"service\")));\n+    } else {\n+     return ac.getResourcesManager().getAssignedResources(ac.getSession(), ac.getMemberById(parms.readInt(\"member\")));\n+    }\n+   } else {\n+    return ac.getResourcesManager().getAssignedResources(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Get all rich resources where the service and the member are assigned with facility property filled.\n+  *\n+  * @param member int Member <code>id</code>\n+  * @param service int Service <code>id</code>\n+  * @return List<RichResource> List of rich resources\n+  */\n+ /*#\n+  * List all rich resources associated with a member's group.\n+  *\n+  * @param member int Member <code>id</code>\n+  * @return List<RichResource> List of rich resources\n+  */\n+ /*#\n+  * List all rich resources associated with a group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return List<RichResource> List of rich resources\n+  */\n+\n+\n+ getAssignedRichResources {\n+  @Override\n+  public List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"member\")) {\n+    if (parms.contains(\"service\")) {\n+     return ac.getResourcesManager().getAssignedRichResources(ac.getSession(),\n+ac.getMemberById(parms.readInt(\"member\")),\n+ac.getServiceById(parms.readInt(\"service\")));\n+    } else {\n+     return ac.getResourcesManager().getAssignedRichResources(ac.getSession(), ac.getMemberById(parms.readInt(\"member\")));\n+    }\n+   } else {\n+    return ac.getResourcesManager().getAssignedRichResources(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Returns all members assigned to the resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @return List<Member> list of assigned members\n+  */\n+\n+\n+ getAssignedMembers {\n+  @Override\n+  public List<Member> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAssignedMembers(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all members assigned to the resource as RichMembers.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @return List<RichMember> list of assigned rich members\n+  */\n+\n+\n+ getAssignedRichMembers {\n+  @Override\n+  public List<RichMember> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAssignedRichMembers(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+  }\n+ },\n+\n+ /*#\n+  * Adds a Resource admin.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param user int User <code>id</code>\n+  */\n+ /*#\n+  *  Adds a group administrator to the Resource.\n+  *\n+  *  @param resource int Resource <code>id</code>\n+  *  @param authorizedGroup int Group <code>id</code>\n+  */\n+\n+\n+ addAdmin {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"user\")) {\n+    ac.getResourcesManager().addAdmin(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")), ac.getUserById(parms.readInt(\"user\")));\n+   } else {\n+    ac.getResourcesManager().addAdmin(ac.getSession(),\n+ac.getResourceById(parms.readInt(\"resource\")),\n+ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Removes a Resource admin.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param user int User <code>id</code>\n+  */\n+ /*#\n+  *  Removes a group administrator of the Resource.\n+  *\n+  *  @param resource int Resource <code>id</code>\n+  *  @param authorizedGroup int Group <code>id</code>\n+  */\n+\n+\n+ removeAdmin {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"user\")) {\n+    ac.getResourcesManager().removeAdmin(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")), ac.getUserById(parms.readInt(\"user\")));\n+   } else {\n+    ac.getResourcesManager().removeAdmin(ac.getSession(),\n+ac.getResourceById(parms.readInt(\"resource\")),\n+ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get list of all resource administrators for supported role and given resource.\n+  *\n+  * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n+  *\n+  * Supported roles: ResourceAdmin, VOAdmin\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param onlyDirectAdmins boolean if true, get only direct resource administrators (if false, get both direct and indirect)\n+  *\n+  * @return List<User> list of all resource administrators of the given resource for supported role\n+  */\n+\n+\n+ getAdmins {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAdmins(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")), parms.readBoolean(\"onlyDirectAdmins\"));\n+  }\n+ },\n+\n+ /*#\n+  * Get all Resource group admins.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @return List<Group> admins\n+  */\n+\n+\n+ getAdminGroups {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAdminGroups(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+  }\n+ },\n+\n+ /*#\n+  * Get list of all richUser administrators for the resource and supported role with specific attributes.\n+  *\n+  * Supported roles: ResourceAdmin, VOAdmin\n+  *\n+  * If \"onlyDirectAdmins\" is true, return only direct admins of the resource for supported role with specific attributes.\n+  * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n+  * @param allUserAttributes int if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+  * @param onlyDirectAdmins int if == true, get only direct resource administrators (if false, get both direct and indirect)\n+  *\n+  * @return List<RichUser> list of RichUser administrators for the resource and supported role with attributes\n+  */\n+\n+\n+ getRichAdmins {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getRichAdmins(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")), parms.readList(\"specificAttributes\", String.class), parms.readBoolean(\"allUserAttributes\"), parms.readBoolean(\"onlyDirectAdmins\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of Resources, where the user is an Administrator.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<Resource> Found Resources\n+  */\n+\n+\n+ getResourcesWhereUserIsAdmin {\n+  @Override\n+  public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getResourcesWhereUserIsAdmin(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+  }\n+ },\n+\n+ /*#\n+  * Assign service to resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param service int Service <code>id</code>\n+  */\n+\n+\n+ assignService {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getResourcesManager().assignService(ac.getSession(),\n+ac.getResourceById(parms.readInt(\"resource\")),\n+ac.getServiceById(parms.readInt(\"service\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Assign all services from services package to resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param servicesPackage int Services package <code>id</code>\n+  */\n+\n+\n+ assignServicesPackage {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getResourcesManager().assignServicesPackage(ac.getSession(),\n+ac.getResourceById(parms.readInt(\"resource\")),\n+ac.getServicesPackageById(parms.readInt(\"servicesPackage\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Removes a service from a resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param service int Service <code>id</code>\n+  */\n+\n+\n+ removeService {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getResourcesManager().removeService(ac.getSession(),\n+ac.getResourceById(parms.readInt(\"resource\")),\n+ac.getServiceById(parms.readInt(\"service\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove from resource all services from services package.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @param servicesPackage int Services package <code>id</code>\n+  */\n+\n+\n+ removeServicesPackage {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getResourcesManager().removeServicesPackage(ac.getSession(),\n+ac.getResourceById(parms.readInt(\"resource\")),\n+ac.getServicesPackageById(parms.readInt(\"servicesPackage\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get all VO resources.\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @return List<Resource> VO resources\n+  */\n+\n+\n+ getResources {\n+  @Override\n+  public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getResources(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+  }\n+ },\n+\n+ /*#\n+  * Get all VO rich resources.\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @return List<RichResource> VO resources\n+  */\n+\n+\n+ getRichResources {\n+  @Override\n+  public List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getRichResources(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns number of VO resources\n+  *\n+  * @param vo int VO <code>id</code>\n+  * @return int VO resources count\n+  */\n+ /*#\n+  * Gets count of all users.\n+\n+  * @return int resources count\n+  */\n+\n+\n+ getResourcesCount {\n+  @Override\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"vo\")) {\n+    return ac.getResourcesManager().getResourcesCount(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+   } else {\n+    return ac.getResourcesManager().getResourcesCount(ac.getSession());\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Deletes all VO resources\n+  *\n+  * @param vo int VO <code>id</code>\n+  */\n+\n+\n+ deleteAllResources {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   ac.getResourcesManager().deleteAllResources(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get all resources which have the member access on.\n+  *\n+  * @param member int Member <code>id</code>\n+  * @return List<Resource> VO resources\n+  */\n+\n+\n+ getAllowedResources {\n+  @Override\n+  public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAllowedResources(ac.getSession(), ac.getMemberById(parms.readInt(\"member\")));\n+  }\n+ },\n+\n+ /*#\n+  * Create new resource tag in VO\n+  *\n+  * @param resourceTag ResourceTag ResourceTag with tagName set\n+  * @param vo int <code>id</code> of VO to create tag for\n+  *\n+  * @return ResourceTag created ResourceTag with <code>id</code> and VO_ID set\n+  */\n+\n+\n+ createResourceTag {\n+  @Override\n+  public ResourceTag call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().createResourceTag(ac.getSession(), parms.read(\"resourceTag\", ResourceTag.class), ac.getVoById(parms.readInt(\"vo\")));\n+  }\n+ },\n+\n+ /*#\n+  * Update resource tag name by it's <code>id</code> and VO_ID\n+  *\n+  * @param resourceTag ResourceTag ResourceTag with new tagName set\n+  *\n+  * @return ResourceTag updated ResourceTag with new tagName\n+  */\n+\n+\n+ updateResourceTag {\n+  @Override\n+  public ResourceTag call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().updateResourceTag(ac.getSession(), parms.read(\"resourceTag\", ResourceTag.class));\n+  }\n+ },\n+\n+ /*#\n+  * Delete resource tag by it's <code>id</code> and VO_ID\n+  *\n+  * @param resourceTag ResourceTag ResourceTag to delete\n+  */\n+\n+\n+ deleteResourceTag {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getResourcesManager().deleteResourceTag(ac.getSession(), parms.read(\"resourceTag\", ResourceTag.class));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Delete all resources tags of VO\n+  *\n+  * @param vo int <code>id</code> of VO to delete all resources tags for\n+  */\n+\n+\n+ deleteAllResourcesTagsForVo {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getResourcesManager().deleteAllResourcesTagsForVo(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Assign resource tag to resource\n+  *\n+  * @param resourceTag ResourceTag ResourceTag to assign\n+  * @param resource int <code>id</code> of Resource to assign tags for\n+  */\n+\n+\n+ assignResourceTagToResource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getResourcesManager().assignResourceTagToResource(ac.getSession(),\n+parms.read(\"resourceTag\", ResourceTag.class),\n+ac.getResourceById(parms.readInt(\"resource\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove resource tag from resource\n+  *\n+  * @param resourceTag ResourceTag ResourceTag to remove\n+  * @param resource int <code>id</code> of Resource to remove tags for\n+  */\n+\n+\n+ removeResourceTagFromResource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getResourcesManager().removeResourceTagFromResource(ac.getSession(),\n+parms.read(\"resourceTag\", ResourceTag.class),\n+ac.getResourceById(parms.readInt(\"resource\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove all resources tags from resource\n+  *\n+  * @param resource int <code>id</code> of Resource to remove all tags for\n+  */\n+\n+\n+ removeAllResourcesTagFromResource {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getResourcesManager().removeAllResourcesTagFromResource(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get all resources with specific tag assigned\n+  *\n+  * @param resourceTag ResourceTag ResourceTag to get resources for\n+  *\n+  * @return List<Resource> all resources with specific tag assigned\n+  */\n+\n+\n+ getAllResourcesByResourceTag {\n+  @Override\n+  public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAllResourcesByResourceTag(ac.getSession(), parms.read(\"resourceTag\", ResourceTag.class));\n+  }\n+ },\n+\n+ /*#\n+  * Get all resource tags of VO\n+  *\n+  * @param vo int <code>id</code> of VO to get all resource tags for\n+  *\n+  * @return List<ResourceTag> all resources tags of VO\n+  */\n+\n+\n+ getAllResourcesTagsForVo {\n+  @Override\n+  public List<ResourceTag> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAllResourcesTagsForVo(ac.getSession(), ac.getVoById(parms.readInt(\"vo\")));\n+  }\n+ },\n+\n+ /*#\n+  * Get all resource tags of Resource\n+  *\n+  * @param resource int <code>id</code> of Resource to get all resource tags for\n+  *\n+  * @return List<ResourceTag> all resources tags of Resource\n+  */\n+\n+\n+ getAllResourcesTagsForResource {\n+  @Override\n+  public List<ResourceTag> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAllResourcesTagsForResource(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+  }\n+ },\n+\n+ /*#\n+  * List all services associated with the resource.\n+  *\n+  * @param resource int Resource <code>id</code>\n+  * @return List<Service> Services\n+  */\n+\n+\n+ getAssignedServices {\n+  @Override\n+  public List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getAssignedServices(ac.getSession(), ac.getResourceById(parms.readInt(\"resource\")));\n+  }\n+ },\n+\n+ /*#\n+  *  Set ban for member on resource.\n+  *\n+  * @param banOnResource BanOnResource JSON object\n+  * @return BanOnResource Created banOnResource\n+  */\n+\n+\n+ setBan {\n+  @Override\n+  public BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getResourcesManager().setBan(ac.getSession(), parms.read(\"banOnResource\", BanOnResource.class));\n+  }\n+ },\n+\n+ /*#\n+  *  Get Ban for member on resource by it's id.\n+  *\n+  * @param banId int BanOnResource <code>id</code>\n+  * @return BanOnResource banOnResource\n+  */\n+\n+\n+ getBanById {\n+  @Override\n+  public BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getBanById(ac.getSession(), parms.readInt(\"banId\"));\n+  }\n+ },\n+\n+ /*#\n+  *  Get ban by memberId and resource id.\n+  *\n+  * @param memberId int Member <code>id</code>\n+  * @param resourceId int Resource <code>id</code>\n+  * @return BanOnResource banOnResource\n+  */\n+\n+\n+ getBan {\n+  @Override\n+  public BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getBan(ac.getSession(), parms.readInt(\"memberId\"), parms.readInt(\"resourceId\"));\n+  }\n+ },\n+\n+ /*#\n+  * Get all bans for member on any resource.\n+  *\n+  * @param memberId int Member <code>id</code>\n+  * @return List<BanOnResource> memberBansOnResources\n+  */\n+\n+\n+ getBansForMember {\n+  @Override\n+  public List<BanOnResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getBansForMember(ac.getSession(), parms.readInt(\"memberId\"));\n+  }\n+ },\n+\n+ /*#\n+  * Get all bans for members on the resource.\n+  *\n+  * @param resourceId int Resource <code>id</code>\n+  * @return List<BanOnResource> membersBansOnResource\n+  */\n+\n+\n+ getBansForResource {\n+  @Override\n+  public List<BanOnResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getResourcesManager().getBansForResource(ac.getSession(), parms.readInt(\"resourceId\"));\n+  }\n+ },\n+\n+ /*#\n+  * Update existing ban (description, validation timestamp)\n+  *\n+  * @param banOnResource BanOnResource JSON object\n+  * @return BanOnResource updated banOnResource\n+  */\n+\n+\n+ updateBan {\n+  @Override\n+  public BanOnResource call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   return ac.getResourcesManager().updateBan(ac.getSession(), parms.read(\"banOnResource\", BanOnResource.class));\n+  }\n+ },\n+\n+ /*#\n+  * Remove specific ban by it's id.\n+  *\n+  * @param banId int BanOnResource <code>id</code>\n+  */\n+ /*#\n+  * Remove specific ban by memberId and resourceId.\n+  *\n+  * @param memberId int Member <code>id</code>\n+  * @param resourceId int Resource <code>id</code>\n+  */\n+\n+\n+ removeBan {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.stateChangingCheck();\n+   if (parms.contains(\"banId\")) {\n+    ac.getResourcesManager().removeBan(ac.getSession(), parms.readInt(\"banId\"));\n+   } else {\n+    ac.getResourcesManager().removeBan(ac.getSession(), parms.readInt(\"memberId\"), parms.readInt(\"resourceId\"));\n+   }\n+\n+   return null;\n+  }\n+ };\n+}\n\\ No newline at end of file\n",
            "diff_size": 1055
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}