{
    "project_name": "neo4j-neo4j",
    "error_id": "2425",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2425/DbmsDiagnosticsManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2425/DbmsDiagnosticsManager.java\nindex ae8a00d96f1..fc49186e76b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2425/DbmsDiagnosticsManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2425/DbmsDiagnosticsManager.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.diagnostics.providers;\n \n import java.util.Collection;\n@@ -50,181 +51,180 @@ import static org.neo4j.util.FeatureToggles.getInteger;\n \n public class DbmsDiagnosticsManager\n {\n-    private static final int CONCISE_DATABASE_DUMP_THRESHOLD = getInteger( DbmsDiagnosticsManager.class, \"conciseDumpThreshold\", 10 );\n+    private static final int CONCISE_DATABASE_DUMP_THRESHOLD = getInteger(DbmsDiagnosticsManager.class, \"conciseDumpThreshold\", 10);\n     private static final int CONCISE_DATABASE_NAMES_PER_ROW = 5;\n     private final Dependencies dependencies;\n     private final boolean enabled;\n     private final Log log;\n \n-    public DbmsDiagnosticsManager( Dependencies dependencies, LogService logService )\n+    public DbmsDiagnosticsManager(Dependencies dependencies, LogService logService)\n     {\n-        this.log = logService.getInternalLog( DiagnosticsManager.class );\n+        this.log = logService.getInternalLog(DiagnosticsManager.class);\n         this.dependencies = dependencies;\n-        this.enabled = dependencies.resolveDependency( Config.class ).get( GraphDatabaseInternalSettings.dump_diagnostics );\n+        this.enabled = dependencies.resolveDependency(Config.class).get(GraphDatabaseInternalSettings.dump_diagnostics);\n     }\n \n     public void dumpSystemDiagnostics()\n     {\n-        if ( enabled )\n+        if (enabled)\n         {\n-            dumpSystemDiagnostics( log );\n+            dumpSystemDiagnostics(log);\n         }\n     }\n \n-    public void dumpDatabaseDiagnostics( Database database )\n+    public void dumpDatabaseDiagnostics(Database database)\n     {\n-        if ( enabled )\n+        if (enabled)\n         {\n-            dumpDatabaseDiagnostics( database, log, false );\n+            dumpDatabaseDiagnostics(database, log, false);\n         }\n     }\n \n     public void dumpAll()\n     {\n-        dumpAll( log );\n+        dumpAll(log);\n     }\n \n-    public void dumpAll( Log log )\n+    public void dumpAll(Log log)\n     {\n-        if ( enabled )\n+        if (enabled)\n         {\n-            dumpSystemDiagnostics( log );\n-            dumpAllDatabases( log );\n+            dumpSystemDiagnostics(log);\n+            dumpAllDatabases(log);\n         }\n     }\n \n-    private void dumpAllDatabases( Log log )\n+    private void dumpAllDatabases(Log log)\n     {\n         Collection<? extends DatabaseContext> values = getDatabaseManager().registeredDatabases().values();\n-        if ( values.size() > CONCISE_DATABASE_DUMP_THRESHOLD )\n+        if (values.size() > CONCISE_DATABASE_DUMP_THRESHOLD)\n         {\n-            dumpConciseDiagnostics( values, log );\n-        }\n-        else\n+            dumpConciseDiagnostics(values, log);\n+        } else\n         {\n-            values.forEach( dbCtx -> dumpDatabaseDiagnostics( dbCtx.database(), log, true ) );\n+            values.forEach(dbCtx -> dumpDatabaseDiagnostics(dbCtx.database(), log, true));\n         }\n     }\n \n-    private void dumpConciseDiagnostics( Collection<? extends DatabaseContext> databaseContexts, Log log )\n+    private void dumpConciseDiagnostics(Collection<? extends DatabaseContext> databaseContexts, Log log)\n     {\n-        var startedDbs = databaseContexts.stream().map( DatabaseContext::database ).filter( Database::isStarted ).collect( toList() );\n-        var stoppedDbs = databaseContexts.stream().map( DatabaseContext::database ).filter( not( Database::isStarted ) ).collect( toList() );\n+        var startedDbs = databaseContexts.stream().map(DatabaseContext::database).filter(Database::isStarted).collect(toList());\n+        var stoppedDbs = databaseContexts.stream().map(DatabaseContext::database).filter(not(Database::isStarted)).collect(toList());\n \n-        dumpAsSingleMessage( log, stringJoiner ->\n+        dumpAsSingleMessage(log, stringJoiner ->\n         {\n-            logDatabasesState( stringJoiner::add, startedDbs, \"Started\" );\n-            logDatabasesState( stringJoiner::add, stoppedDbs, \"Stopped\" );\n-        } );\n+            logDatabasesState(stringJoiner::add, startedDbs, \"Started\");\n+            logDatabasesState(stringJoiner::add, stoppedDbs, \"Stopped\");\n+        });\n     }\n \n-    private void logDatabasesState( DiagnosticsLogger log, List<Database> databases, String state )\n+    private void logDatabasesState(DiagnosticsLogger log, List<Database> databases, String state)\n     {\n-        DiagnosticsManager.section( log, state + \" Databases\" );\n-        if ( databases.isEmpty() )\n+        DiagnosticsManager.section(log, state + \" Databases\");\n+        if (databases.isEmpty())\n         {\n-            log.log( format( \"There are no %s databases\", state.toLowerCase() ) );\n+            log.log(format(\"There are no %s databases\", state.toLowerCase()));\n             return;\n         }\n         int lastIndex = 0;\n-        for ( int i = CONCISE_DATABASE_NAMES_PER_ROW; i < databases.size(); i += CONCISE_DATABASE_NAMES_PER_ROW )\n+        for (int i = CONCISE_DATABASE_NAMES_PER_ROW; i < databases.size(); i += CONCISE_DATABASE_NAMES_PER_ROW)\n         {\n-            var subList = databases.subList( lastIndex, i );\n-            logDatabases( log, subList );\n+            var subList = databases.subList(lastIndex, i);\n+            logDatabases(log, subList);\n             lastIndex = i;\n         }\n-        var lastDbs = databases.subList( lastIndex, databases.size() );\n-        logDatabases( log, lastDbs );\n+        var lastDbs = databases.subList(lastIndex, databases.size());\n+        logDatabases(log, lastDbs);\n     }\n \n-    private void logDatabases( DiagnosticsLogger log, List<Database> subList )\n+    private void logDatabases(DiagnosticsLogger log, List<Database> subList)\n     {\n-        log.log( subList\n-                .stream()\n-                .map( database -> database.getNamedDatabaseId().name() )\n-                .collect( joining( \", \" ) ) );\n+        log.log(subList\n+          .stream()\n+          .map(database -> database.getNamedDatabaseId().name())\n+          .collect(joining(\", \")));\n     }\n \n-    private void dumpSystemDiagnostics( Log log )\n+    private void dumpSystemDiagnostics(Log log)\n     {\n-        dumpAsSingleMessage( log, stringJoiner ->\n+        dumpAsSingleMessage(log, stringJoiner ->\n         {\n-            DiagnosticsManager.section( stringJoiner::add, \"System diagnostics\" );\n-            DiagnosticsManager.dump( SystemDiagnostics.class, log, stringJoiner::add );\n-            DiagnosticsManager.dump( new ConfigDiagnostics( dependencies.resolveDependency( Config.class ) ), log, stringJoiner::add );\n+            DiagnosticsManager.section(stringJoiner::add, \"System diagnostics\");\n+            DiagnosticsManager.dump(SystemDiagnostics.class, log, stringJoiner::add);\n+            DiagnosticsManager.dump(new ConfigDiagnostics(dependencies.resolveDependency(Config.class)), log, stringJoiner::add);\n             // dump any custom additional diagnostics that can be registered by specific edition\n-            dependencies.resolveTypeDependencies( DiagnosticsProvider.class )\n-                    .forEach( provider -> DiagnosticsManager.dump( provider, log, stringJoiner::add ) );\n-        } );\n+            dependencies.resolveTypeDependencies(DiagnosticsProvider.class)\n+              .forEach(provider -> DiagnosticsManager.dump(provider, log, stringJoiner::add));\n+        });\n     }\n \n-    private void dumpDatabaseDiagnostics( Database database, Log log, boolean checkStatus )\n+    private void dumpDatabaseDiagnostics(Database database, Log log, boolean checkStatus)\n     {\n-        dumpAsSingleMessageWithDbPrefix( log, stringJoiner ->\n+        dumpAsSingleMessageWithDbPrefix(log, stringJoiner ->\n         {\n-            dumpDatabaseSectionName( database, stringJoiner::add );\n-            if ( checkStatus )\n+            dumpDatabaseSectionName(database, stringJoiner::add);\n+            if (checkStatus)\n             {\n-                logDatabaseStatus( database, stringJoiner::add );\n+                logDatabaseStatus(database, stringJoiner::add);\n \n-                if ( !database.isStarted() )\n+                if (!database.isStarted())\n                 {\n                     return;\n                 }\n             }\n             Dependencies databaseResolver = database.getDependencyResolver();\n-            DbmsInfo dbmsInfo = databaseResolver.resolveDependency( DbmsInfo.class );\n-            FileSystemAbstraction fs = databaseResolver.resolveDependency( FileSystemAbstraction.class );\n-            StorageEngineFactory storageEngineFactory = databaseResolver.resolveDependency( StorageEngineFactory.class );\n-            StorageEngine storageEngine = databaseResolver.resolveDependency( StorageEngine.class );\n+            DbmsInfo dbmsInfo = databaseResolver.resolveDependency(DbmsInfo.class);\n+            FileSystemAbstraction fs = databaseResolver.resolveDependency(FileSystemAbstraction.class);\n+            StorageEngineFactory storageEngineFactory = databaseResolver.resolveDependency(StorageEngineFactory.class);\n+            StorageEngine storageEngine = databaseResolver.resolveDependency(StorageEngine.class);\n \n-            DiagnosticsManager.dump( new VersionDiagnostics( dbmsInfo, database.getStoreId() ), log, stringJoiner::add );\n-            DiagnosticsManager.dump( new StoreFilesDiagnostics( storageEngineFactory, fs, database.getDatabaseLayout() ), log, stringJoiner::add );\n-            DiagnosticsManager.dump( new TransactionRangeDiagnostics( database ), log, stringJoiner::add );\n-            storageEngine.dumpDiagnostics( log, stringJoiner::add );\n-        }, database.getNamedDatabaseId() );\n+            DiagnosticsManager.dump(new VersionDiagnostics(dbmsInfo, database.getStoreId()), log, stringJoiner::add);\n+            DiagnosticsManager.dump(new StoreFilesDiagnostics(storageEngineFactory, fs, database.getDatabaseLayout()), log, stringJoiner::add);\n+            DiagnosticsManager.dump(new TransactionRangeDiagnostics(database), log, stringJoiner::add);\n+            storageEngine.dumpDiagnostics(log, stringJoiner::add);\n+        }, database.getNamedDatabaseId());\n     }\n \n-    private void dumpAsSingleMessageWithDbPrefix( Log log, Consumer<StringJoiner> dumpFunction, NamedDatabaseId db )\n+    private void dumpAsSingleMessageWithDbPrefix(Log log, Consumer<StringJoiner> dumpFunction, NamedDatabaseId db)\n     {\n-        dumpAsSingleMessageWithPrefix( log, dumpFunction, \"[\" + db.logPrefix() + \"] \" );\n+        dumpAsSingleMessageWithPrefix(log, dumpFunction, \"[\" + db.logPrefix() + \"] \");\n     }\n \n-    private void dumpAsSingleMessage( Log log, Consumer<StringJoiner> dumpFunction )\n+    private void dumpAsSingleMessage(Log log, Consumer<StringJoiner> dumpFunction)\n     {\n-                dumpAsSingleMessageWithPrefix( log, dumpFunction, \"\" );\n+        dumpAsSingleMessageWithPrefix(log, dumpFunction, \"\");\n     }\n \n     /**\n      * Messages will be buffered and logged as one single message to make sure that diagnostics are grouped together in the log.\n      */\n-    private void dumpAsSingleMessageWithPrefix( Log log, Consumer<StringJoiner> dumpFunction, String prefix )\n+    private void dumpAsSingleMessageWithPrefix(Log log, Consumer<StringJoiner> dumpFunction, String prefix)\n     {\n         // Optimization to skip diagnostics dumping (which is time consuming) if there's no log anyway.\n         // This is first and foremost useful for speeding up testing.\n-        if ( log == NullLog.getInstance() )\n+        if (log == NullLog.getInstance())\n         {\n             return;\n         }\n \n         StringJoiner message =\n-                new StringJoiner( System.lineSeparator() + \" \".repeat( 64 ) + prefix, prefix + System.lineSeparator() + \" \".repeat( 64 ) + prefix, \"\" );\n-        dumpFunction.accept( message );\n-        log.info( message.toString() );\n+          new StringJoiner(System.lineSeparator() + \" \".repeat(64) + prefix, prefix + System.lineSeparator() + \" \".repeat(64) + prefix, \"\");\n+        dumpFunction.accept(message);\n+        log.info(message.toString());\n     }\n \n-    private static void logDatabaseStatus( Database database, DiagnosticsLogger log )\n+    private static void logDatabaseStatus(Database database, DiagnosticsLogger log)\n     {\n-        log.log( format( \"Database is %s.\", database.isStarted() ? \"started\" : \"stopped\" ) );\n+        log.log(format(\"Database is %s.\", database.isStarted() ? \"started\" : \"stopped\"));\n     }\n \n-    private void dumpDatabaseSectionName( Database database, DiagnosticsLogger log )\n+    private void dumpDatabaseSectionName(Database database, DiagnosticsLogger log)\n     {\n-        DiagnosticsManager.section( log, \"Database: \" + database.getNamedDatabaseId().name() );\n+        DiagnosticsManager.section(log, \"Database: \" + database.getNamedDatabaseId().name());\n     }\n \n     private DatabaseManager<?> getDatabaseManager()\n     {\n-        return dependencies.resolveDependency( DatabaseManager.class );\n+        return dependencies.resolveDependency(DatabaseManager.class);\n     }\n }\n",
            "diff_size": 79
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2425/DbmsDiagnosticsManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2425/DbmsDiagnosticsManager.java\nindex ae8a00d96f1..e6ec96994b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2425/DbmsDiagnosticsManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2425/DbmsDiagnosticsManager.java\n@@ -139,8 +139,7 @@ public class DbmsDiagnosticsManager\n \n     private void logDatabases( DiagnosticsLogger log, List<Database> subList )\n     {\n-        log.log( subList\n-                .stream()\n+        log.log( subList.stream()\n                 .map( database -> database.getNamedDatabaseId().name() )\n                 .collect( joining( \", \" ) ) );\n     }\n@@ -192,7 +191,7 @@ public class DbmsDiagnosticsManager\n \n     private void dumpAsSingleMessage( Log log, Consumer<StringJoiner> dumpFunction )\n     {\n-                dumpAsSingleMessageWithPrefix( log, dumpFunction, \"\" );\n+    dumpAsSingleMessageWithPrefix( log, dumpFunction, \"\" );\n     }\n \n     /**\n@@ -227,4 +226,4 @@ public class DbmsDiagnosticsManager\n     {\n         return dependencies.resolveDependency( DatabaseManager.class );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}