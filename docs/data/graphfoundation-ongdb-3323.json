{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3323",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3323/HeartbeatIAmAliveProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3323/HeartbeatIAmAliveProcessor.java\nindex 3dd6ce24d8e..6a0c894bd13 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3323/HeartbeatIAmAliveProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3323/HeartbeatIAmAliveProcessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.protocol.heartbeat;\n \n import java.net.URI;\n@@ -32,55 +33,54 @@ import org.neo4j.cluster.protocol.cluster.ClusterContext;\n  * When a message is received, create an I Am Alive message as well, since we know that the sending instance is up.\n  * The exceptions to this rule are:\n  * - when the message is of type \"I Am Alive\", since this would lead to a feedback loop of more and more \"I Am Alive\"\n- *   messages being sent.\n+ * messages being sent.\n  * - when the message is of type \"Suspicions\", since these should be ignored for failed instances and generating an\n- *   \"I Am Alive\" message for it would mark the instance as alive before ignoring its suspicions.\n+ * \"I Am Alive\" message for it would mark the instance as alive before ignoring its suspicions.\n  */\n public class HeartbeatIAmAliveProcessor implements MessageProcessor\n {\n-    private final MessageHolder output;\n-    private final ClusterContext clusterContext;\n+  private final MessageHolder output;\n+  private final ClusterContext clusterContext;\n \n-    public HeartbeatIAmAliveProcessor( MessageHolder output, ClusterContext clusterContext )\n-    {\n-        this.output = output;\n-        this.clusterContext = clusterContext;\n-    }\n+  public HeartbeatIAmAliveProcessor(MessageHolder output, ClusterContext clusterContext)\n+  {\n+    this.output = output;\n+    this.clusterContext = clusterContext;\n+  }\n \n-    @Override\n-    public boolean process( Message<? extends MessageType> message )\n+  @Override\n+  public boolean process(Message<? extends MessageType> message)\n+  {\n+    if (!message.isInternal() &&\n+        !message.getMessageType().equals(HeartbeatMessage.i_am_alive) &&\n+        !message.getMessageType().equals(HeartbeatMessage.suspicions))\n     {\n-        if ( !message.isInternal() &&\n-                !message.getMessageType().equals( HeartbeatMessage.i_am_alive ) &&\n-                !message.getMessageType().equals( HeartbeatMessage.suspicions ) )\n+      // We assume the HEADER_FROM header always exists.\n+      String from = message.getHeader(Message.HEADER_FROM);\n+      if (!from.equals(message.getHeader(Message.HEADER_TO)))\n+      {\n+        InstanceId theId;\n+        if (message.hasHeader(Message.HEADER_INSTANCE_ID))\n         {\n-            // We assume the HEADER_FROM header always exists.\n-            String from =  message.getHeader( Message.HEADER_FROM );\n-            if ( !from.equals( message.getHeader( Message.HEADER_TO ) )  )\n-            {\n-                InstanceId theId;\n-                if ( message.hasHeader( Message.HEADER_INSTANCE_ID ) )\n-                {\n-                    // HEADER_INSTANCE_ID is there since after 1.9.6\n-                    theId = new InstanceId( Integer.parseInt( message.getHeader( Message.HEADER_INSTANCE_ID ) ) );\n-                }\n-                else\n-                {\n-                    theId = clusterContext.getConfiguration().getIdForUri( URI.create( from ) );\n-                }\n+          // HEADER_INSTANCE_ID is there since after 1.9.6\n+          theId = new InstanceId(Integer.parseInt(message.getHeader(Message.HEADER_INSTANCE_ID)));\n+        } else\n+        {\n+          theId = clusterContext.getConfiguration().getIdForUri(URI.create(from));\n+        }\n \n-                if ( theId != null && clusterContext.getConfiguration().getMembers().containsKey( theId )\n-                        && !clusterContext.isMe( theId ) )\n-                {\n-                    Message<HeartbeatMessage> heartbeatMessage = message.copyHeadersTo(\n-                            Message.internal( HeartbeatMessage.i_am_alive,\n-                                    new HeartbeatMessage.IAmAliveState( theId ) ),\n-                            Message.HEADER_FROM, Message.HEADER_INSTANCE_ID\n-                    );\n-                    output.offer( heartbeatMessage );\n-                }\n-            }\n+        if (theId != null && clusterContext.getConfiguration().getMembers().containsKey(theId)\n+            && !clusterContext.isMe(theId))\n+        {\n+          Message<HeartbeatMessage> heartbeatMessage = message.copyHeadersTo(\n+              Message.internal(HeartbeatMessage.i_am_alive,\n+                  new HeartbeatMessage.IAmAliveState(theId)),\n+              Message.HEADER_FROM, Message.HEADER_INSTANCE_ID\n+          );\n+          output.offer(heartbeatMessage);\n         }\n-        return true;\n+      }\n     }\n+    return true;\n+  }\n }\n",
            "diff_size": 50
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "column": "106",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3323/HeartbeatIAmAliveProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3323/HeartbeatIAmAliveProcessor.java\nindex 3dd6ce24d8e..2039cd2400b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3323/HeartbeatIAmAliveProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3323/HeartbeatIAmAliveProcessor.java\n@@ -55,8 +55,8 @@ public class HeartbeatIAmAliveProcessor implements MessageProcessor\n                 !message.getMessageType().equals( HeartbeatMessage.suspicions ) )\n         {\n             // We assume the HEADER_FROM header always exists.\n-            String from =  message.getHeader( Message.HEADER_FROM );\n-            if ( !from.equals( message.getHeader( Message.HEADER_TO ) )  )\n+            String from = message.getHeader( Message.HEADER_FROM );\n+            if ( !from.equals( message.getHeader( Message.HEADER_TO ) ) )\n             {\n                 InstanceId theId;\n                 if ( message.hasHeader( Message.HEADER_INSTANCE_ID ) )\n@@ -69,18 +69,13 @@ public class HeartbeatIAmAliveProcessor implements MessageProcessor\n                     theId = clusterContext.getConfiguration().getIdForUri( URI.create( from ) );\n                 }\n \n-                if ( theId != null && clusterContext.getConfiguration().getMembers().containsKey( theId )\n-                        && !clusterContext.isMe( theId ) )\n+                if ( theId != null && clusterContext.getConfiguration().getMembers().containsKey( theId )&& !clusterContext.isMe( theId ) )\n                 {\n-                    Message<HeartbeatMessage> heartbeatMessage = message.copyHeadersTo(\n-                            Message.internal( HeartbeatMessage.i_am_alive,\n-                                    new HeartbeatMessage.IAmAliveState( theId ) ),\n-                            Message.HEADER_FROM, Message.HEADER_INSTANCE_ID\n-                    );\n+                    Message<HeartbeatMessage> heartbeatMessage = message.copyHeadersTo( Message.internal( HeartbeatMessage.i_am_alive, new HeartbeatMessage.IAmAliveState( theId ) ), Message.HEADER_FROM, Message.HEADER_INSTANCE_ID );\n                     output.offer( heartbeatMessage );\n                 }\n             }\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}