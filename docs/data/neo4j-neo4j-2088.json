{
    "project_name": "neo4j-neo4j",
    "error_id": "2088",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "59",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2088/FusionIndexCapability.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2088/FusionIndexCapability.java\nindex 8e88005c2d7..668c379f4be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2088/FusionIndexCapability.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2088/FusionIndexCapability.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.util.function.Function;\n@@ -29,52 +30,51 @@ import org.neo4j.values.storable.ValueCategory;\n \n public class FusionIndexCapability implements IndexCapability\n {\n-    private static final Function<ValueCategory,ValueCategory> categoryOf = Function.identity();\n+    private static final Function<ValueCategory, ValueCategory> categoryOf = Function.identity();\n     private final SlotSelector slotSelector;\n     private final InstanceSelector<IndexCapability> instanceSelector;\n     private final IndexBehaviour[] behaviours;\n \n-    FusionIndexCapability( SlotSelector slotSelector, InstanceSelector<IndexCapability> instanceSelector )\n+    FusionIndexCapability(SlotSelector slotSelector, InstanceSelector<IndexCapability> instanceSelector)\n     {\n         this.slotSelector = slotSelector;\n         this.instanceSelector = instanceSelector;\n-        this.behaviours = buildBehaviours( slotSelector );\n+        this.behaviours = buildBehaviours(slotSelector);\n     }\n \n-    private static IndexBehaviour[] buildBehaviours( SlotSelector slotSelector )\n+    private static IndexBehaviour[] buildBehaviours(SlotSelector slotSelector)\n     {\n         // If we delegate single property text queries to anything else than Lucene, we have slow contains\n-        IndexSlot slot = slotSelector.selectSlot( new ValueCategory[]{ValueCategory.TEXT}, categoryOf );\n-        if ( slot != IndexSlot.LUCENE )\n+        IndexSlot slot = slotSelector.selectSlot(new ValueCategory[] {ValueCategory.TEXT}, categoryOf);\n+        if (slot != IndexSlot.LUCENE)\n         {\n-            return new IndexBehaviour[]{IndexBehaviour.SLOW_CONTAINS};\n-        }\n-        else\n+            return new IndexBehaviour[] {IndexBehaviour.SLOW_CONTAINS};\n+        } else\n         {\n             return new IndexBehaviour[0];\n         }\n     }\n \n     @Override\n-    public IndexOrderCapability orderCapability( ValueCategory... valueCategories )\n+    public IndexOrderCapability orderCapability(ValueCategory... valueCategories)\n     {\n-        IndexSlot slot = slotSelector.selectSlot( valueCategories, categoryOf );\n-        if ( slot == null )\n+        IndexSlot slot = slotSelector.selectSlot(valueCategories, categoryOf);\n+        if (slot == null)\n         {\n             return IndexOrderCapability.NONE;\n         }\n-        return instanceSelector.select( slot ).orderCapability( valueCategories );\n+        return instanceSelector.select(slot).orderCapability(valueCategories);\n     }\n \n     @Override\n-    public IndexValueCapability valueCapability( ValueCategory... valueCategories )\n+    public IndexValueCapability valueCapability(ValueCategory... valueCategories)\n     {\n-        IndexSlot slot = slotSelector.selectSlot( valueCategories, categoryOf );\n-        if ( slot == null )\n+        IndexSlot slot = slotSelector.selectSlot(valueCategories, categoryOf);\n+        if (slot == null)\n         {\n             return IndexValueCapability.PARTIAL;\n         }\n-        return instanceSelector.select( slot ).valueCapability( valueCategories );\n+        return instanceSelector.select(slot).valueCapability(valueCategories);\n     }\n \n     @Override\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}