{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "184",
    "information": {
        "errors": [
            {
                "line": "187",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 104).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      ImmutableMap.<Long, List<BigQueryError>>of(0L, ImmutableList.of(BIGQUERY_ERROR));\n  private static final InsertAllResponse INSERT_ALL_RESPONSE = new InsertAllResponse(ERRORS_MAP);\n  private static final FieldValue FIELD_VALUE = new FieldValue(FieldValue.Attribute.PRIMITIVE, \"value\");\n  private static final TableRow TABLE_ROW = new TableRow.Builder()\n      .addValue(FIELD_VALUE)\n      .build();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/184/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/184/SerializationTest.java\nindex 24caa6c9e9c..9c96a638125 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/184/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/184/SerializationTest.java\n@@ -99,9 +99,9 @@ public class SerializationTest {\n   private static final List<String> SOURCE_URIS = ImmutableList.of(\"uri1\", \"uri2\");\n   private static final ExternalDataConfiguration EXTERNAL_DATA_CONFIGURATION =\n       ExternalDataConfiguration.builder(SOURCE_URIS, TABLE_SCHEMA, CSV_OPTIONS)\n-      .ignoreUnknownValues(true)\n-      .maxBadRecords(42)\n-      .build();\n+          .ignoreUnknownValues(true)\n+          .maxBadRecords(42)\n+          .build();\n   private static final UserDefinedFunction INLINE_FUNCTION =\n       new UserDefinedFunction.InlineFunction(\"inline\");\n   private static final UserDefinedFunction URI_FUNCTION =\n@@ -131,10 +131,10 @@ public class SerializationTest {\n           .streamingBuffer(STREAMING_BUFFER)\n           .build();\n   private static final JobStatistics JOB_STATISTICS = JobStatistics.builder()\n-          .creationTime(1L)\n-          .endTime(3L)\n-          .startTime(2L)\n-          .build();\n+      .creationTime(1L)\n+      .endTime(3L)\n+      .startTime(2L)\n+      .build();\n   private static final JobStatistics.ExtractStatistics EXTRACT_STATISTICS =\n       JobStatistics.ExtractStatistics.builder()\n           .creationTime(1L)\n@@ -184,7 +184,8 @@ public class SerializationTest {\n   private static final Map<Long, List<BigQueryError>> ERRORS_MAP =\n       ImmutableMap.<Long, List<BigQueryError>>of(0L, ImmutableList.of(BIGQUERY_ERROR));\n   private static final InsertAllResponse INSERT_ALL_RESPONSE = new InsertAllResponse(ERRORS_MAP);\n-  private static final FieldValue FIELD_VALUE = new FieldValue(FieldValue.Attribute.PRIMITIVE, \"value\");\n+  private static final FieldValue FIELD_VALUE =\n+      new FieldValue(FieldValue.Attribute.PRIMITIVE, \"value\");\n   private static final TableRow TABLE_ROW = new TableRow.Builder()\n       .addValue(FIELD_VALUE)\n       .build();\n@@ -232,7 +233,7 @@ public class SerializationTest {\n       output.writeObject(obj);\n     }\n     try (ObjectInputStream input =\n-        new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n+             new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n       return (T) input.readObject();\n     }\n   }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'Field' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'Field' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'ViewInfo' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "'ExternalTableInfo' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'JobStatistics' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "'JobStatistics' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "'JobStatistics' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "'new' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "184",
                    "column": "47",
                    "severity": "warning",
                    "message": "GenericWhitespace '>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/184/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/184/SerializationTest.java\nindex 24caa6c9e9c..614dad2469b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/184/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/184/SerializationTest.java\n@@ -83,17 +83,17 @@ public class SerializationTest {\n           .mode(Field.Mode.NULLABLE)\n           .description(\"FieldDescription1\")\n           .build();\n-  private static final Field FIELD_SCHEMA2 =\n+    private static final Field FIELD_SCHEMA2 =\n       Field.builder(\"IntegerField\", Field.Type.integer())\n           .mode(Field.Mode.REPEATED)\n           .description(\"FieldDescription2\")\n           .build();\n-  private static final Field FIELD_SCHEMA3 =\n+    private static final Field FIELD_SCHEMA3 =\n       Field.builder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2))\n           .mode(Field.Mode.REQUIRED)\n           .description(\"FieldDescription3\")\n           .build();\n-  private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n+    private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n   private static final BaseTableInfo.StreamingBuffer STREAMING_BUFFER =\n       new BaseTableInfo.StreamingBuffer(1L, 2L, 3L);\n   private static final List<String> SOURCE_URIS = ImmutableList.of(\"uri1\", \"uri2\");\n@@ -115,14 +115,14 @@ public class SerializationTest {\n           .location(LOCATION)\n           .streamingBuffer(STREAMING_BUFFER)\n           .build();\n-  private static final ViewInfo VIEW_INFO =\n+    private static final ViewInfo VIEW_INFO =\n       ViewInfo.builder(TABLE_ID, \"QUERY\")\n           .creationTime(CREATION_TIME)\n           .description(DESCRIPTION)\n           .etag(ETAG)\n           .id(ID)\n           .build();\n-  private static final ExternalTableInfo EXTERNAL_TABLE_INFO =\n+    private static final ExternalTableInfo EXTERNAL_TABLE_INFO =\n       ExternalTableInfo.builder(TABLE_ID, EXTERNAL_DATA_CONFIGURATION)\n           .creationTime(CREATION_TIME)\n           .description(DESCRIPTION)\n@@ -130,19 +130,18 @@ public class SerializationTest {\n           .id(ID)\n           .streamingBuffer(STREAMING_BUFFER)\n           .build();\n-  private static final JobStatistics JOB_STATISTICS = JobStatistics.builder()\n-          .creationTime(1L)\n+    private static final JobStatistics JOB_STATISTICS = JobStatistics.builder().creationTime(1L)\n           .endTime(3L)\n           .startTime(2L)\n           .build();\n-  private static final JobStatistics.ExtractStatistics EXTRACT_STATISTICS =\n+    private static final JobStatistics.ExtractStatistics EXTRACT_STATISTICS =\n       JobStatistics.ExtractStatistics.builder()\n           .creationTime(1L)\n           .endTime(3L)\n           .startTime(2L)\n           .destinationUriFileCounts(ImmutableList.of(42L))\n           .build();\n-  private static final JobStatistics.LoadStatistics LOAD_STATISTICS =\n+    private static final JobStatistics.LoadStatistics LOAD_STATISTICS =\n       JobStatistics.LoadStatistics.builder()\n           .creationTime(1L)\n           .endTime(3L)\n@@ -152,7 +151,7 @@ public class SerializationTest {\n           .inputBytes(2048L)\n           .outputRows(24L)\n           .build();\n-  private static final JobStatistics.QueryStatistics QUERY_STATISTICS =\n+    private static final JobStatistics.QueryStatistics QUERY_STATISTICS =\n       JobStatistics.QueryStatistics.builder()\n           .creationTime(1L)\n           .endTime(3L)\n@@ -162,7 +161,7 @@ public class SerializationTest {\n           .cacheHit(false)\n           .billingTier(42)\n           .build();\n-  private static final BigQueryError BIGQUERY_ERROR =\n+    private static final BigQueryError BIGQUERY_ERROR =\n       new BigQueryError(\"reason\", \"location\", \"message\", \"debugInfo\");\n   private static final JobStatus JOB_STATUS = new JobStatus(JobStatus.State.DONE, BIGQUERY_ERROR,\n       ImmutableList.of(BIGQUERY_ERROR));\n@@ -182,14 +181,14 @@ public class SerializationTest {\n       .skipInvalidRows(false)\n       .build();\n   private static final Map<Long, List<BigQueryError>> ERRORS_MAP =\n-      ImmutableMap.<Long, List<BigQueryError>>of(0L, ImmutableList.of(BIGQUERY_ERROR));\n+      ImmutableMap.<Long, List<BigQueryError>> of(0L, ImmutableList.of(BIGQUERY_ERROR));\n   private static final InsertAllResponse INSERT_ALL_RESPONSE = new InsertAllResponse(ERRORS_MAP);\n   private static final FieldValue FIELD_VALUE = new FieldValue(FieldValue.Attribute.PRIMITIVE, \"value\");\n   private static final TableRow TABLE_ROW = new TableRow.Builder()\n       .addValue(FIELD_VALUE)\n       .build();\n \n-  @Test\n+@Test\n   public void testServiceOptions() throws Exception {\n     BigQueryOptions options = BigQueryOptions.builder()\n         .projectId(\"p1\")\n@@ -236,4 +235,4 @@ public class SerializationTest {\n       return (T) input.readObject();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 321).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 224).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 241).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 246).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 486).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/184/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/184/SerializationTest.java\nindex 24caa6c9e9c..08581d41896 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/184/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/184/SerializationTest.java\n@@ -23,9 +23,7 @@ import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.gcloud.AuthCredentials;\n import com.google.gcloud.RetryParams;\n-\n import org.junit.Test;\n-\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n@@ -36,17 +34,14 @@ import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.Map;\n \n+\n public class SerializationTest {\n \n-  private static final Acl DOMAIN_ACCESS =\n-      new Acl(new Acl.Domain(\"domain\"), Acl.Role.WRITER);\n-  private static final Acl GROUP_ACCESS =\n-      new Acl(Acl.Group.ofAllAuthenticatedUsers(), Acl.Role.READER);\n+  private static final Acl DOMAIN_ACCESS = new Acl(new Acl.Domain(\"domain\"), Acl.Role.WRITER);\n+  private static final Acl GROUP_ACCESS = new Acl(Acl.Group.ofAllAuthenticatedUsers(), Acl.Role.READER);\n   private static final Acl USER_ACCESS = new Acl(new Acl.User(\"user\"), Acl.Role.OWNER);\n-  private static final Acl VIEW_ACCESS =\n-      new Acl(new Acl.View(TableId.of(\"project\", \"dataset\", \"table\")), Acl.Role.WRITER);\n-  private static final List<Acl> ACCESS_RULES = ImmutableList.of(DOMAIN_ACCESS, GROUP_ACCESS,\n-      VIEW_ACCESS, USER_ACCESS);\n+  private static final Acl VIEW_ACCESS = new Acl(new Acl.View(TableId.of(\"project\", \"dataset\", \"table\")), Acl.Role.WRITER);\n+  private static final List<Acl> ACCESS_RULES = ImmutableList.of(DOMAIN_ACCESS, GROUP_ACCESS, VIEW_ACCESS, USER_ACCESS);\n   private static final Long CREATION_TIME = System.currentTimeMillis() - 10;\n   private static final Long DEFAULT_TABLE_EXPIRATION = 100L;\n   private static final String DESCRIPTION = \"Description\";\n@@ -57,164 +52,53 @@ public class SerializationTest {\n   private static final String LOCATION = \"\";\n   private static final String SELF_LINK = \"http://bigquery/p/d\";\n   private static final DatasetId DATASET_ID = DatasetId.of(\"project\", \"dataset\");\n-  private static final DatasetInfo DATASET_INFO = DatasetInfo.builder(DATASET_ID)\n-      .acl(ACCESS_RULES)\n-      .creationTime(CREATION_TIME)\n-      .defaultTableLifetime(DEFAULT_TABLE_EXPIRATION)\n-      .description(DESCRIPTION)\n-      .etag(ETAG)\n-      .friendlyName(FRIENDLY_NAME)\n-      .id(ID)\n-      .lastModified(LAST_MODIFIED)\n-      .location(LOCATION)\n-      .selfLink(SELF_LINK)\n-      .build();\n+  private static final DatasetInfo DATASET_INFO = DatasetInfo.builder(DATASET_ID).acl(ACCESS_RULES).creationTime(CREATION_TIME).defaultTableLifetime(DEFAULT_TABLE_EXPIRATION).description(DESCRIPTION).etag(ETAG).friendlyName(FRIENDLY_NAME).id(ID).lastModified(LAST_MODIFIED).location(LOCATION).selfLink(SELF_LINK).build();\n   private static final TableId TABLE_ID = TableId.of(\"project\", \"dataset\", \"table\");\n-  private static final CsvOptions CSV_OPTIONS = CsvOptions.builder()\n-      .allowJaggedRows(true)\n-      .allowQuotedNewLines(false)\n-      .encoding(StandardCharsets.ISO_8859_1)\n-      .fieldDelimiter(\",\")\n-      .quote(\"\\\"\")\n-      .skipLeadingRows(42)\n-      .build();\n-  private static final Field FIELD_SCHEMA1 =\n-      Field.builder(\"StringField\", Field.Type.string())\n-          .mode(Field.Mode.NULLABLE)\n-          .description(\"FieldDescription1\")\n-          .build();\n-  private static final Field FIELD_SCHEMA2 =\n-      Field.builder(\"IntegerField\", Field.Type.integer())\n-          .mode(Field.Mode.REPEATED)\n-          .description(\"FieldDescription2\")\n-          .build();\n-  private static final Field FIELD_SCHEMA3 =\n-      Field.builder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2))\n-          .mode(Field.Mode.REQUIRED)\n-          .description(\"FieldDescription3\")\n-          .build();\n+  private static final CsvOptions CSV_OPTIONS = CsvOptions.builder().allowJaggedRows(true).allowQuotedNewLines(false).encoding(StandardCharsets.ISO_8859_1).fieldDelimiter(\",\").quote(\"\\\"\").skipLeadingRows(42).build();\n+  private static final Field FIELD_SCHEMA1 = Field.builder(\"StringField\", Field.Type.string()).mode(Field.Mode.NULLABLE).description(\"FieldDescription1\").build();\n+  private static final Field FIELD_SCHEMA2 = Field.builder(\"IntegerField\", Field.Type.integer()).mode(Field.Mode.REPEATED).description(\"FieldDescription2\").build();\n+  private static final Field FIELD_SCHEMA3 = Field.builder(\"RecordField\", Field.Type.record(FIELD_SCHEMA1, FIELD_SCHEMA2)).mode(Field.Mode.REQUIRED).description(\"FieldDescription3\").build();\n   private static final Schema TABLE_SCHEMA = Schema.of(FIELD_SCHEMA1, FIELD_SCHEMA2, FIELD_SCHEMA3);\n-  private static final BaseTableInfo.StreamingBuffer STREAMING_BUFFER =\n-      new BaseTableInfo.StreamingBuffer(1L, 2L, 3L);\n+  private static final BaseTableInfo.StreamingBuffer STREAMING_BUFFER = new BaseTableInfo.StreamingBuffer(1L, 2L, 3L);\n   private static final List<String> SOURCE_URIS = ImmutableList.of(\"uri1\", \"uri2\");\n-  private static final ExternalDataConfiguration EXTERNAL_DATA_CONFIGURATION =\n-      ExternalDataConfiguration.builder(SOURCE_URIS, TABLE_SCHEMA, CSV_OPTIONS)\n-      .ignoreUnknownValues(true)\n-      .maxBadRecords(42)\n-      .build();\n-  private static final UserDefinedFunction INLINE_FUNCTION =\n-      new UserDefinedFunction.InlineFunction(\"inline\");\n-  private static final UserDefinedFunction URI_FUNCTION =\n-      new UserDefinedFunction.UriFunction(\"URI\");\n-  private static final BaseTableInfo TABLE_INFO =\n-      TableInfo.builder(TABLE_ID, TABLE_SCHEMA)\n-          .creationTime(CREATION_TIME)\n-          .description(DESCRIPTION)\n-          .etag(ETAG)\n-          .id(ID)\n-          .location(LOCATION)\n-          .streamingBuffer(STREAMING_BUFFER)\n-          .build();\n-  private static final ViewInfo VIEW_INFO =\n-      ViewInfo.builder(TABLE_ID, \"QUERY\")\n-          .creationTime(CREATION_TIME)\n-          .description(DESCRIPTION)\n-          .etag(ETAG)\n-          .id(ID)\n-          .build();\n-  private static final ExternalTableInfo EXTERNAL_TABLE_INFO =\n-      ExternalTableInfo.builder(TABLE_ID, EXTERNAL_DATA_CONFIGURATION)\n-          .creationTime(CREATION_TIME)\n-          .description(DESCRIPTION)\n-          .etag(ETAG)\n-          .id(ID)\n-          .streamingBuffer(STREAMING_BUFFER)\n-          .build();\n-  private static final JobStatistics JOB_STATISTICS = JobStatistics.builder()\n-          .creationTime(1L)\n-          .endTime(3L)\n-          .startTime(2L)\n-          .build();\n-  private static final JobStatistics.ExtractStatistics EXTRACT_STATISTICS =\n-      JobStatistics.ExtractStatistics.builder()\n-          .creationTime(1L)\n-          .endTime(3L)\n-          .startTime(2L)\n-          .destinationUriFileCounts(ImmutableList.of(42L))\n-          .build();\n-  private static final JobStatistics.LoadStatistics LOAD_STATISTICS =\n-      JobStatistics.LoadStatistics.builder()\n-          .creationTime(1L)\n-          .endTime(3L)\n-          .startTime(2L)\n-          .inputFiles(42L)\n-          .outputBytes(1024L)\n-          .inputBytes(2048L)\n-          .outputRows(24L)\n-          .build();\n-  private static final JobStatistics.QueryStatistics QUERY_STATISTICS =\n-      JobStatistics.QueryStatistics.builder()\n-          .creationTime(1L)\n-          .endTime(3L)\n-          .startTime(2L)\n-          .totalBytesProcessed(2048L)\n-          .totalBytesBilled(1024L)\n-          .cacheHit(false)\n-          .billingTier(42)\n-          .build();\n-  private static final BigQueryError BIGQUERY_ERROR =\n-      new BigQueryError(\"reason\", \"location\", \"message\", \"debugInfo\");\n-  private static final JobStatus JOB_STATUS = new JobStatus(JobStatus.State.DONE, BIGQUERY_ERROR,\n-      ImmutableList.of(BIGQUERY_ERROR));\n+  private static final ExternalDataConfiguration EXTERNAL_DATA_CONFIGURATION = ExternalDataConfiguration.builder(SOURCE_URIS, TABLE_SCHEMA, CSV_OPTIONS).ignoreUnknownValues(true).maxBadRecords(42).build();\n+  private static final UserDefinedFunction INLINE_FUNCTION = new UserDefinedFunction.InlineFunction(\"inline\");\n+  private static final UserDefinedFunction URI_FUNCTION = new UserDefinedFunction.UriFunction(\"URI\");\n+  private static final BaseTableInfo TABLE_INFO = TableInfo.builder(TABLE_ID, TABLE_SCHEMA).creationTime(CREATION_TIME).description(DESCRIPTION).etag(ETAG).id(ID).location(LOCATION).streamingBuffer(STREAMING_BUFFER).build();\n+  private static final ViewInfo VIEW_INFO = ViewInfo.builder(TABLE_ID, \"QUERY\").creationTime(CREATION_TIME).description(DESCRIPTION).etag(ETAG).id(ID).build();\n+  private static final ExternalTableInfo EXTERNAL_TABLE_INFO = ExternalTableInfo.builder(TABLE_ID, EXTERNAL_DATA_CONFIGURATION).creationTime(CREATION_TIME).description(DESCRIPTION).etag(ETAG).id(ID).streamingBuffer(STREAMING_BUFFER).build();\n+  private static final JobStatistics JOB_STATISTICS = JobStatistics.builder().creationTime(1L).endTime(3L).startTime(2L).build();\n+  private static final JobStatistics.ExtractStatistics EXTRACT_STATISTICS = JobStatistics.ExtractStatistics.builder().creationTime(1L).endTime(3L).startTime(2L).destinationUriFileCounts(ImmutableList.of(42L)).build();\n+  private static final JobStatistics.LoadStatistics LOAD_STATISTICS = JobStatistics.LoadStatistics.builder().creationTime(1L).endTime(3L).startTime(2L).inputFiles(42L).outputBytes(1024L).inputBytes(2048L).outputRows(24L).build();\n+  private static final JobStatistics.QueryStatistics QUERY_STATISTICS = JobStatistics.QueryStatistics.builder().creationTime(1L).endTime(3L).startTime(2L).totalBytesProcessed(2048L).totalBytesBilled(1024L).cacheHit(false).billingTier(42).build();\n+  private static final BigQueryError BIGQUERY_ERROR = new BigQueryError(\"reason\", \"location\", \"message\", \"debugInfo\");\n+  private static final JobStatus JOB_STATUS = new JobStatus(JobStatus.State.DONE, BIGQUERY_ERROR, ImmutableList.of(BIGQUERY_ERROR));\n   private static final JobId JOB_ID = JobId.of(\"project\", \"job\");\n   private static final CopyJobInfo COPY_JOB = CopyJobInfo.of(TABLE_ID, TABLE_ID);\n   private static final ExtractJobInfo EXTRACT_JOB = ExtractJobInfo.of(TABLE_ID, SOURCE_URIS);\n   private static final LoadJobInfo LOAD_JOB = LoadJobInfo.of(TABLE_ID, SOURCE_URIS);\n   private static final QueryJobInfo QUERY_JOB = QueryJobInfo.of(\"query\");\n-  private static final Map<String, Object> CONTENT1 =\n-      ImmutableMap.<String, Object>of(\"key\", \"val1\");\n-  private static final Map<String, Object> CONTENT2 =\n-      ImmutableMap.<String, Object>of(\"key\", \"val2\");\n-  private static final InsertAllRequest INSERT_ALL_REQUEST = InsertAllRequest.builder(TABLE_ID)\n-      .addRow(CONTENT1)\n-      .addRow(CONTENT2)\n-      .ignoreUnknownValues(true)\n-      .skipInvalidRows(false)\n-      .build();\n-  private static final Map<Long, List<BigQueryError>> ERRORS_MAP =\n-      ImmutableMap.<Long, List<BigQueryError>>of(0L, ImmutableList.of(BIGQUERY_ERROR));\n+  private static final Map<String, Object> CONTENT1 = ImmutableMap.<String, Object>of(\"key\", \"val1\");\n+  private static final Map<String, Object> CONTENT2 = ImmutableMap.<String, Object>of(\"key\", \"val2\");\n+  private static final InsertAllRequest INSERT_ALL_REQUEST = InsertAllRequest.builder(TABLE_ID).addRow(CONTENT1).addRow(CONTENT2).ignoreUnknownValues(true).skipInvalidRows(false).build();\n+  private static final Map<Long, List<BigQueryError>> ERRORS_MAP = ImmutableMap.<Long, List<BigQueryError>>of(0L, ImmutableList.of(BIGQUERY_ERROR));\n   private static final InsertAllResponse INSERT_ALL_RESPONSE = new InsertAllResponse(ERRORS_MAP);\n   private static final FieldValue FIELD_VALUE = new FieldValue(FieldValue.Attribute.PRIMITIVE, \"value\");\n-  private static final TableRow TABLE_ROW = new TableRow.Builder()\n-      .addValue(FIELD_VALUE)\n-      .build();\n+  private static final TableRow TABLE_ROW = new TableRow.Builder().addValue(FIELD_VALUE).build();\n \n   @Test\n   public void testServiceOptions() throws Exception {\n-    BigQueryOptions options = BigQueryOptions.builder()\n-        .projectId(\"p1\")\n-        .authCredentials(AuthCredentials.createForAppEngine())\n-        .build();\n+    BigQueryOptions options = BigQueryOptions.builder().projectId(\"p1\").authCredentials(AuthCredentials.createForAppEngine()).build();\n     BigQueryOptions serializedCopy = serializeAndDeserialize(options);\n     assertEquals(options, serializedCopy);\n-\n-    options = options.toBuilder()\n-        .projectId(\"p2\")\n-        .retryParams(RetryParams.getDefaultInstance())\n-        .authCredentials(AuthCredentials.noCredentials())\n-        .build();\n+    options = options.toBuilder().projectId(\"p2\").retryParams(RetryParams.getDefaultInstance()).authCredentials(AuthCredentials.noCredentials()).build();\n     serializedCopy = serializeAndDeserialize(options);\n     assertEquals(options, serializedCopy);\n   }\n \n   @Test\n   public void testModelAndRequests() throws Exception {\n-    Serializable[] objects = {DOMAIN_ACCESS, GROUP_ACCESS, USER_ACCESS, VIEW_ACCESS, DATASET_ID,\n-        DATASET_INFO, TABLE_ID, CSV_OPTIONS, STREAMING_BUFFER, EXTERNAL_DATA_CONFIGURATION,\n-        TABLE_SCHEMA, TABLE_INFO, VIEW_INFO, EXTERNAL_TABLE_INFO, INLINE_FUNCTION, URI_FUNCTION,\n-        JOB_STATISTICS, EXTRACT_STATISTICS, LOAD_STATISTICS, QUERY_STATISTICS, BIGQUERY_ERROR,\n-        JOB_STATUS, JOB_ID, COPY_JOB, EXTRACT_JOB, LOAD_JOB, QUERY_JOB, INSERT_ALL_REQUEST,\n-        INSERT_ALL_RESPONSE, FIELD_VALUE, TABLE_ROW};\n+    Serializable[] objects = {DOMAIN_ACCESS, GROUP_ACCESS, USER_ACCESS, VIEW_ACCESS, DATASET_ID, DATASET_INFO, TABLE_ID, CSV_OPTIONS, STREAMING_BUFFER, EXTERNAL_DATA_CONFIGURATION, TABLE_SCHEMA, TABLE_INFO, VIEW_INFO, EXTERNAL_TABLE_INFO, INLINE_FUNCTION, URI_FUNCTION, JOB_STATISTICS, EXTRACT_STATISTICS, LOAD_STATISTICS, QUERY_STATISTICS, BIGQUERY_ERROR, JOB_STATUS, JOB_ID, COPY_JOB, EXTRACT_JOB, LOAD_JOB, QUERY_JOB, INSERT_ALL_REQUEST, INSERT_ALL_RESPONSE, FIELD_VALUE, TABLE_ROW};\n     for (Serializable obj : objects) {\n       Object copy = serializeAndDeserialize(obj);\n       assertEquals(obj, obj);\n@@ -225,15 +109,15 @@ public class SerializationTest {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  private <T extends java.io.Serializable> T serializeAndDeserialize(T obj)\n-      throws IOException, ClassNotFoundException {\n+  private <T extends java.io.Serializable> T serializeAndDeserialize(T obj) throws IOException, ClassNotFoundException {\n     ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n-    try (ObjectOutputStream output = new ObjectOutputStream(bytes)) {\n+    try (ObjectOutputStream output =\n+      new ObjectOutputStream(bytes)) {\n       output.writeObject(obj);\n     }\n     try (ObjectInputStream input =\n-        new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n+      new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n       return (T) input.readObject();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 154
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/184/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/184/SerializationTest.java\nindex 24caa6c9e9c..df564658a81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/184/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/184/SerializationTest.java\n@@ -184,7 +184,7 @@ public class SerializationTest {\n   private static final Map<Long, List<BigQueryError>> ERRORS_MAP =\n       ImmutableMap.<Long, List<BigQueryError>>of(0L, ImmutableList.of(BIGQUERY_ERROR));\n   private static final InsertAllResponse INSERT_ALL_RESPONSE = new InsertAllResponse(ERRORS_MAP);\n-  private static final FieldValue FIELD_VALUE = new FieldValue(FieldValue.Attribute.PRIMITIVE, \"value\");\n+  private static final FieldValue FIELD_VALUE = new FieldValue(FieldValue.Attribute.PRIMITIVE,\"value\");\n   private static final TableRow TABLE_ROW = new TableRow.Builder()\n       .addValue(FIELD_VALUE)\n       .build();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}