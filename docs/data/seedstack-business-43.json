{
    "project_name": "seedstack-business",
    "error_id": "43",
    "information": {
        "errors": [
            {
                "line": "8",
                "column": "1",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.specification;\n\nimport org.seedstack.business.specification.AttributeSpecification;\nimport org.seedstack.business.specification.EqualSpecification;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/43/SpecificationPickerImpl.java\nindex fa7a6e4be08..06b82c7cb4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/43/SpecificationPickerImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.specification;\n \n import org.seedstack.business.specification.AttributeSpecification;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/43/SpecificationPickerImpl.java\nindex fa7a6e4be08..d3ab16c2b3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/43/SpecificationPickerImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.specification;\n \n import org.seedstack.business.specification.AttributeSpecification;\n@@ -94,7 +95,8 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n \n     @Override\n     public <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue,\n-            boolean leftInclusive, boolean rightInclusive) {\n+                                                                          boolean leftInclusive,\n+                                                                          boolean rightInclusive) {\n         Specification<V> gt = new GreaterThanSpecification<>(leftValue);\n         if (leftInclusive) {\n             gt = gt.or(new EqualSpecification<>(leftValue));\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "column": "1",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "column": "1",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/43/SpecificationPickerImpl.java\nindex fa7a6e4be08..b6991802d33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/43/SpecificationPickerImpl.java\n@@ -69,9 +69,8 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n \n     @Override\n     public <V extends Comparable<? super V>> OperatorPicker<T, S> greaterThanOrEqualTo(V value) {\n-        context.addSpecification(\n-                processSpecification(new EqualSpecification<>(value).or(new GreaterThanSpecification<>(value))));\n-        return new OperatorPickerImpl<>(context);\n+        context.addSpecification(processSpecification(new EqualSpecification<>(value).or(new GreaterThanSpecification<>(value))));\n+return new OperatorPickerImpl<>(context);\n     }\n \n     @Override\n@@ -82,9 +81,8 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n \n     @Override\n     public <V extends Comparable<? super V>> OperatorPicker<T, S> lessThanOrEqualTo(V value) {\n-        context.addSpecification(\n-                processSpecification(new EqualSpecification<>(value).or(new LessThanSpecification<>(value))));\n-        return new OperatorPickerImpl<>(context);\n+        context.addSpecification(processSpecification(new EqualSpecification<>(value).or(new LessThanSpecification<>(value))));\n+return new OperatorPickerImpl<>(context);\n     }\n \n     @Override\n@@ -95,15 +93,13 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n     @Override\n     public <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue,\n             boolean leftInclusive, boolean rightInclusive) {\n-        Specification<V> gt = new GreaterThanSpecification<>(leftValue);\n+    Specification<V> gt = new GreaterThanSpecification<>(leftValue);\n         if (leftInclusive) {\n             gt = gt.or(new EqualSpecification<>(leftValue));\n-        }\n-        Specification<V> lt = new LessThanSpecification<>(rightValue);\n+        } Specification<V> lt = new LessThanSpecification<>(rightValue);\n         if (rightInclusive) {\n             lt = lt.or(new EqualSpecification<>(rightValue));\n-        }\n-        context.addSpecification(processSpecification(gt.and(lt)));\n+        } context.addSpecification(processSpecification(gt.and(lt)));\n         return new OperatorPickerImpl<>(context);\n     }\n \n@@ -117,4 +113,4 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n         }\n         return not ? result.negate() : result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "74",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "102",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "19",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "19",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "35",
                    "severity": "warning",
                    "message": "WhitespaceAround: ':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/43/SpecificationPickerImpl.java\nindex fa7a6e4be08..97fb7969d1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/43/SpecificationPickerImpl.java\n@@ -20,6 +20,7 @@ import org.seedstack.business.specification.dsl.OperatorPicker;\n import org.seedstack.business.specification.dsl.SpecificationPicker;\n import org.seedstack.business.specification.dsl.StringOptionPicker;\n \n+\n class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements SpecificationPicker<T, S> {\n \n     private final SpecificationBuilderContext<T, S> context;\n@@ -31,7 +32,7 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n \n     @Override\n     public SpecificationPicker<T, S> not() {\n-        not = !not;\n+        not = ! not;\n         return this;\n     }\n \n@@ -69,8 +70,8 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n \n     @Override\n     public <V extends Comparable<? super V>> OperatorPicker<T, S> greaterThanOrEqualTo(V value) {\n-        context.addSpecification(\n-                processSpecification(new EqualSpecification<>(value).or(new GreaterThanSpecification<>(value))));\n+        context.addSpecification(processSpecification(new EqualSpecification<>(value)\n+            .or(new GreaterThanSpecification<>(value))));\n         return new OperatorPickerImpl<>(context);\n     }\n \n@@ -82,8 +83,8 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n \n     @Override\n     public <V extends Comparable<? super V>> OperatorPicker<T, S> lessThanOrEqualTo(V value) {\n-        context.addSpecification(\n-                processSpecification(new EqualSpecification<>(value).or(new LessThanSpecification<>(value))));\n+        context.addSpecification(processSpecification(new EqualSpecification<>(value)\n+            .or(new LessThanSpecification<>(value))));\n         return new OperatorPickerImpl<>(context);\n     }\n \n@@ -93,14 +94,12 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n     }\n \n     @Override\n-    public <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue,\n-            boolean leftInclusive, boolean rightInclusive) {\n+    public <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue, boolean leftInclusive, boolean rightInclusive) {\n         Specification<V> gt = new GreaterThanSpecification<>(leftValue);\n-        if (leftInclusive) {\n+        if(leftInclusive) {\n             gt = gt.or(new EqualSpecification<>(leftValue));\n-        }\n-        Specification<V> lt = new LessThanSpecification<>(rightValue);\n-        if (rightInclusive) {\n+        } Specification<V> lt = new LessThanSpecification<>(rightValue);\n+        if(rightInclusive) {\n             lt = lt.or(new EqualSpecification<>(rightValue));\n         }\n         context.addSpecification(processSpecification(gt.and(lt)));\n@@ -115,6 +114,6 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n         } else {\n             result = (Specification<T>) specification;\n         }\n-        return not ? result.negate() : result;\n+        return not?result.negate(): result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/43/SpecificationPickerImpl.java\nindex fa7a6e4be08..06b82c7cb4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/43/SpecificationPickerImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.specification;\n \n import org.seedstack.business.specification.AttributeSpecification;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/43/SpecificationPickerImpl.java\nindex fa7a6e4be08..06b82c7cb4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/43/SpecificationPickerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/43/SpecificationPickerImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.specification;\n \n import org.seedstack.business.specification.AttributeSpecification;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}