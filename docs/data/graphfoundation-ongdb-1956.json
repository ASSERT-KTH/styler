{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1956",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "87",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "119",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "212",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "229",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1956/IndexProviderStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1956/IndexProviderStore.java\nindex 698c4b4710d..4acc52d6a2a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1956/IndexProviderStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1956/IndexProviderStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index;\n \n import java.io.File;\n@@ -34,206 +35,200 @@ import static org.neo4j.kernel.impl.store.MetaDataStore.versionLongToString;\n \n public class IndexProviderStore\n {\n-    private static final int RECORD_SIZE = 8;\n-    private static final int RECORD_COUNT = 5;\n-\n-    private final long creationTime;\n-    private final long randomIdentifier;\n-    private volatile long version;\n-    private final long indexVersion;\n-\n-    private final StoreChannel fileChannel;\n-    private final ByteBuffer buf = ByteBuffer.allocate( RECORD_SIZE * RECORD_COUNT );\n-    private volatile long lastCommittedTx;\n-    private final File file;\n-    private final Random random;\n-\n-    public IndexProviderStore( File file, FileSystemAbstraction fileSystem, long expectedVersion, boolean allowUpgrade )\n-    {\n-        this.file = file;\n-        this.random = new Random( System.currentTimeMillis() );\n-        StoreChannel channel = null;\n-        boolean success = false;\n-        try\n-        {\n-            // Create it if it doesn't exist\n-            if ( !fileSystem.fileExists( file ) || fileSystem.getFileSize( file ) == 0 )\n-            {\n-                create( file, fileSystem, expectedVersion );\n-            }\n-\n-            // Read all the records in the file\n-            channel = fileSystem.open( file, OpenMode.READ_WRITE );\n-            Long[] records = readRecordsWithNullDefaults( channel, RECORD_COUNT, allowUpgrade );\n-            creationTime = records[0];\n-            randomIdentifier = records[1];\n-            version = records[2];\n-            lastCommittedTx = records[3];\n-            Long readIndexVersion = records[4];\n-            fileChannel = channel;\n-\n-            // Compare version and throw exception if there's a mismatch, also considering \"allow upgrade\"\n-            boolean versionDiffers = compareExpectedVersionWithStoreVersion( expectedVersion, allowUpgrade, readIndexVersion );\n-\n-            // Here we know that either the version matches or we just upgraded to the expected version\n-            indexVersion = expectedVersion;\n-            if ( versionDiffers )\n-            // We have upgraded the version, let's write it\n-            {\n-                writeOut();\n-            }\n-            success = true;\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n-        finally\n-        {\n-            if ( !success && channel != null )\n-            {\n-                try\n-                {\n-                    channel.close();\n-                }\n-                catch ( IOException e )\n-                {   // What to do?\n-                }\n-            }\n-        }\n-    }\n-\n-    private boolean compareExpectedVersionWithStoreVersion( long expectedVersion,\n-            boolean allowUpgrade, Long readIndexVersion )\n+  private static final int RECORD_SIZE = 8;\n+  private static final int RECORD_COUNT = 5;\n+\n+  private final long creationTime;\n+  private final long randomIdentifier;\n+  private volatile long version;\n+  private final long indexVersion;\n+\n+  private final StoreChannel fileChannel;\n+  private final ByteBuffer buf = ByteBuffer.allocate(RECORD_SIZE * RECORD_COUNT);\n+  private volatile long lastCommittedTx;\n+  private final File file;\n+  private final Random random;\n+\n+  public IndexProviderStore(File file, FileSystemAbstraction fileSystem, long expectedVersion, boolean allowUpgrade)\n+  {\n+    this.file = file;\n+    this.random = new Random(System.currentTimeMillis());\n+    StoreChannel channel = null;\n+    boolean success = false;\n+    try\n     {\n-        boolean versionDiffers = readIndexVersion == null || readIndexVersion != expectedVersion;\n-        if ( versionDiffers )\n-        {\n-            // We can throw a more explicit exception if we see that we're trying to run\n-            // with an older version than the store is.\n-            if ( readIndexVersion != null && expectedVersion < readIndexVersion )\n-            {\n-                String expected = versionLongToString( expectedVersion );\n-                String readVersion = versionLongToString( readIndexVersion );\n-                throw new NotCurrentStoreVersionException( expected, readVersion,\n-                        \"Your index has been upgraded to \" + readVersion +\n-                        \" and cannot run with an older version \" + expected, false );\n-            }\n-            else if ( !allowUpgrade )\n-            {\n-                // We try to run with a newer version than the store is but isn't allowed to upgrade.\n-                throw new UpgradeNotAllowedByConfigurationException();\n-            }\n-        }\n-        return versionDiffers;\n-    }\n-\n-    private Long[] readRecordsWithNullDefaults( StoreChannel fileChannel, int count, boolean allowUpgrade ) throws IOException\n+      // Create it if it doesn't exist\n+      if (!fileSystem.fileExists(file) || fileSystem.getFileSize(file) == 0)\n+      {\n+        create(file, fileSystem, expectedVersion);\n+      }\n+\n+      // Read all the records in the file\n+      channel = fileSystem.open(file, OpenMode.READ_WRITE);\n+      Long[] records = readRecordsWithNullDefaults(channel, RECORD_COUNT, allowUpgrade);\n+      creationTime = records[0];\n+      randomIdentifier = records[1];\n+      version = records[2];\n+      lastCommittedTx = records[3];\n+      Long readIndexVersion = records[4];\n+      fileChannel = channel;\n+\n+      // Compare version and throw exception if there's a mismatch, also considering \"allow upgrade\"\n+      boolean versionDiffers = compareExpectedVersionWithStoreVersion(expectedVersion, allowUpgrade, readIndexVersion);\n+\n+      // Here we know that either the version matches or we just upgraded to the expected version\n+      indexVersion = expectedVersion;\n+      if (versionDiffers)\n+      // We have upgraded the version, let's write it\n+      {\n+        writeOut();\n+      }\n+      success = true;\n+    } catch (IOException e)\n     {\n-        buf.clear();\n-        int bytesRead = fileChannel.read( buf );\n-        int wholeRecordsRead = bytesRead / RECORD_SIZE;\n-        if ( wholeRecordsRead < RECORD_COUNT && !allowUpgrade )\n-        {\n-            throw new UpgradeNotAllowedByConfigurationException( \"Index version (managed by \" + file + \") has changed and needs to be upgraded\" );\n-        }\n-\n-        buf.flip();\n-        Long[] result = new Long[count];\n-        for ( int i = 0; i < wholeRecordsRead; i++ )\n-        {\n-            result[i] = buf.getLong();\n-        }\n-        return result;\n-    }\n-\n-    private void create( File file, FileSystemAbstraction fileSystem, long indexVersion ) throws IOException\n+      throw new RuntimeException(e);\n+    } finally\n     {\n-        if ( fileSystem.fileExists( file ) && fileSystem.getFileSize( file ) > 0 )\n-        {\n-            throw new IllegalArgumentException( file + \" already exist\" );\n-        }\n-\n-        try ( StoreChannel fileChannel = fileSystem.open( file, OpenMode.READ_WRITE ) )\n+      if (!success && channel != null)\n+      {\n+        try\n         {\n-            write( fileChannel, System.currentTimeMillis(), random.nextLong(), 0, 1, indexVersion );\n+          channel.close();\n+        } catch (IOException e)\n+        {   // What to do?\n         }\n+      }\n     }\n+  }\n \n-    private void write( StoreChannel channel, long time, long identifier, long version, long lastCommittedTxId,\n-            long indexVersion ) throws IOException\n+  private boolean compareExpectedVersionWithStoreVersion(long expectedVersion,\n+                                                         boolean allowUpgrade, Long readIndexVersion)\n+  {\n+    boolean versionDiffers = readIndexVersion == null || readIndexVersion != expectedVersion;\n+    if (versionDiffers)\n     {\n-        buf.clear();\n-        buf.putLong( time ).putLong( identifier ).putLong( version ).putLong( lastCommittedTxId ).putLong( indexVersion );\n-        buf.flip();\n-\n-        channel.writeAll( buf, 0 );\n-        channel.force( true );\n+      // We can throw a more explicit exception if we see that we're trying to run\n+      // with an older version than the store is.\n+      if (readIndexVersion != null && expectedVersion < readIndexVersion)\n+      {\n+        String expected = versionLongToString(expectedVersion);\n+        String readVersion = versionLongToString(readIndexVersion);\n+        throw new NotCurrentStoreVersionException(expected, readVersion,\n+            \"Your index has been upgraded to \" + readVersion +\n+                \" and cannot run with an older version \" + expected, false);\n+      } else if (!allowUpgrade)\n+      {\n+        // We try to run with a newer version than the store is but isn't allowed to upgrade.\n+        throw new UpgradeNotAllowedByConfigurationException();\n+      }\n     }\n-\n-    public File getFile()\n+    return versionDiffers;\n+  }\n+\n+  private Long[] readRecordsWithNullDefaults(StoreChannel fileChannel, int count, boolean allowUpgrade) throws IOException\n+  {\n+    buf.clear();\n+    int bytesRead = fileChannel.read(buf);\n+    int wholeRecordsRead = bytesRead / RECORD_SIZE;\n+    if (wholeRecordsRead < RECORD_COUNT && !allowUpgrade)\n     {\n-        return file;\n+      throw new UpgradeNotAllowedByConfigurationException(\"Index version (managed by \" + file + \") has changed and needs to be upgraded\");\n     }\n \n-    public long getCreationTime()\n+    buf.flip();\n+    Long[] result = new Long[count];\n+    for (int i = 0; i < wholeRecordsRead; i++)\n     {\n-        return creationTime;\n+      result[i] = buf.getLong();\n     }\n+    return result;\n+  }\n \n-    public long getVersion()\n+  private void create(File file, FileSystemAbstraction fileSystem, long indexVersion) throws IOException\n+  {\n+    if (fileSystem.fileExists(file) && fileSystem.getFileSize(file) > 0)\n     {\n-        return version;\n+      throw new IllegalArgumentException(file + \" already exist\");\n     }\n \n-    public long getIndexVersion()\n+    try (StoreChannel fileChannel = fileSystem.open(file, OpenMode.READ_WRITE))\n     {\n-        return indexVersion;\n+      write(fileChannel, System.currentTimeMillis(), random.nextLong(), 0, 1, indexVersion);\n     }\n-\n-    public synchronized void setVersion( long version )\n+  }\n+\n+  private void write(StoreChannel channel, long time, long identifier, long version, long lastCommittedTxId,\n+                     long indexVersion) throws IOException\n+  {\n+    buf.clear();\n+    buf.putLong(time).putLong(identifier).putLong(version).putLong(lastCommittedTxId).putLong(indexVersion);\n+    buf.flip();\n+\n+    channel.writeAll(buf, 0);\n+    channel.force(true);\n+  }\n+\n+  public File getFile()\n+  {\n+    return file;\n+  }\n+\n+  public long getCreationTime()\n+  {\n+    return creationTime;\n+  }\n+\n+  public long getVersion()\n+  {\n+    return version;\n+  }\n+\n+  public long getIndexVersion()\n+  {\n+    return indexVersion;\n+  }\n+\n+  public synchronized void setVersion(long version)\n+  {\n+    this.version = version;\n+    writeOut();\n+  }\n+\n+  public synchronized void setLastCommittedTx(long txId)\n+  {\n+    this.lastCommittedTx = txId;\n+  }\n+\n+  public long getLastCommittedTx()\n+  {\n+    return this.lastCommittedTx;\n+  }\n+\n+  private void writeOut()\n+  {\n+    try\n     {\n-        this.version = version;\n-        writeOut();\n-    }\n-\n-    public synchronized void setLastCommittedTx( long txId )\n+      write(fileChannel, creationTime, randomIdentifier, version, lastCommittedTx, indexVersion);\n+    } catch (IOException e)\n     {\n-        this.lastCommittedTx = txId;\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    public long getLastCommittedTx()\n+  public void close()\n+  {\n+    if (!fileChannel.isOpen())\n     {\n-        return this.lastCommittedTx;\n+      return;\n     }\n \n-    private void writeOut()\n+    writeOut();\n+    try\n     {\n-        try\n-        {\n-            write( fileChannel, creationTime, randomIdentifier, version, lastCommittedTx, indexVersion );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n-    }\n-\n-    public void close()\n+      fileChannel.close();\n+    } catch (IOException e)\n     {\n-        if ( !fileChannel.isOpen() )\n-        {\n-            return;\n-        }\n-\n-        writeOut();\n-        try\n-        {\n-            fileChannel.close();\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n+      throw new RuntimeException(e);\n     }\n+  }\n }\n",
            "diff_size": 261
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}