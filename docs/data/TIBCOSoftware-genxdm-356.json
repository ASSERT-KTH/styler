{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "356",
    "information": {
        "errors": [
            {
                "line": "28",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class IdentityTuple\n{\n\tprivate final ArrayList<IdentityKey> m_keys;\n\n\tpublic IdentityTuple(final ArrayList<IdentityKey> keys)\n\t{",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/356/IdentityTuple.java\nindex be9c43b5ca5..d050ca9ee2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/356/IdentityTuple.java\n@@ -25,7 +25,7 @@ import org.genxdm.exceptions.PreCondition;\n  */\n final class IdentityTuple\n {\n-\tprivate final ArrayList<IdentityKey> m_keys;\n+private final ArrayList<IdentityKey> m_keys;\n \n \tpublic IdentityTuple(final ArrayList<IdentityKey> keys)\n \t{\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/356/IdentityTuple.java\nindex be9c43b5ca5..c8fd3f52f0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/356/IdentityTuple.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n@@ -23,62 +24,49 @@ import org.genxdm.exceptions.PreCondition;\n /**\n  * A tuple is an ordered list of keys values.\n  */\n-final class IdentityTuple\n-{\n-\tprivate final ArrayList<IdentityKey> m_keys;\n+final class IdentityTuple {\n+    private final ArrayList<IdentityKey> m_keys;\n \n-\tpublic IdentityTuple(final ArrayList<IdentityKey> keys)\n-\t{\n-\t\t// This invariant may not hold up to the test of time.\n-\t\tthis.m_keys = PreCondition.assertArgumentNotNull(keys, \"keys\");\n-\t}\n+    public IdentityTuple(final ArrayList<IdentityKey> keys) {\n+        // This invariant may not hold up to the test of time.\n+        this.m_keys = PreCondition.assertArgumentNotNull(keys, \"keys\");\n+    }\n \n-\tpublic ArrayList<IdentityKey> getKeys()\n-\t{\n-\t\treturn m_keys;\n-\t}\n+    public ArrayList<IdentityKey> getKeys() {\n+        return m_keys;\n+    }\n \n-\t@Override\n-\tpublic int hashCode()\n-\t{\n-\t\treturn m_keys.size();\n-\t}\n+    @Override\n+    public int hashCode() {\n+        return m_keys.size();\n+    }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic boolean equals(final Object obj)\n-\t{\n-\t\tif (obj instanceof IdentityTuple)\n-\t\t{\n-\t\t\tfinal IdentityTuple other = (IdentityTuple)obj;\n-\t\t\treturn equalKeys(m_keys, other.m_keys);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t}\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj instanceof IdentityTuple) {\n+            final IdentityTuple other = (IdentityTuple) obj;\n+            return equalKeys(m_keys, other.m_keys);\n+        } else {\n+            return false;\n+        }\n+    }\n \n-\tprivate static <A> boolean equalKeys(final ArrayList<IdentityKey> expect, final ArrayList<IdentityKey> actual)\n-\t{\n-\t\tfinal Iterator<IdentityKey> lhs = expect.iterator();\n-\t\tfinal Iterator<IdentityKey> rhs = actual.iterator();\n-\t\twhile (lhs.hasNext())\n-\t\t{\n-\t\t\tfinal IdentityKey lhsAtom = lhs.next();\n-\t\t\tif (rhs.hasNext())\n-\t\t\t{\n-\t\t\t\tfinal IdentityKey rhsAtom = rhs.next();\n-\t\t\t\tif (!lhsAtom.equals(rhsAtom))\n-\t\t\t\t{\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\treturn !rhs.hasNext();\n-\t}\n+    private static <A> boolean equalKeys(final ArrayList<IdentityKey> expect,\n+                                         final ArrayList<IdentityKey> actual) {\n+        final Iterator<IdentityKey> lhs = expect.iterator();\n+        final Iterator<IdentityKey> rhs = actual.iterator();\n+        while (lhs.hasNext()) {\n+            final IdentityKey lhsAtom = lhs.next();\n+            if (rhs.hasNext()) {\n+                final IdentityKey rhsAtom = rhs.next();\n+                if (!lhsAtom.equals(rhsAtom)) {\n+                    return false;\n+                }\n+            } else {\n+                return false;\n+            }\n+        }\n+        return !rhs.hasNext();\n+    }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/356/IdentityTuple.java\nindex be9c43b5ca5..c5d91dab206 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/356/IdentityTuple.java\n@@ -25,60 +25,60 @@ import org.genxdm.exceptions.PreCondition;\n  */\n final class IdentityTuple\n {\n-\tprivate final ArrayList<IdentityKey> m_keys;\n+    private final ArrayList<IdentityKey> m_keys;\n \n \tpublic IdentityTuple(final ArrayList<IdentityKey> keys)\n \t{\n-\t\t// This invariant may not hold up to the test of time.\n+    // This invariant may not hold up to the test of time.\n \t\tthis.m_keys = PreCondition.assertArgumentNotNull(keys, \"keys\");\n-\t}\n+    }\n \n \tpublic ArrayList<IdentityKey> getKeys()\n \t{\n-\t\treturn m_keys;\n-\t}\n+    return m_keys;\n+    }\n \n \t@Override\n \tpublic int hashCode()\n \t{\n-\t\treturn m_keys.size();\n-\t}\n+    return m_keys.size();\n+    }\n \n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic boolean equals(final Object obj)\n \t{\n-\t\tif (obj instanceof IdentityTuple)\n+    if (obj instanceof IdentityTuple)\n \t\t{\n-\t\t\tfinal IdentityTuple other = (IdentityTuple)obj;\n+    final IdentityTuple other = (IdentityTuple)obj;\n \t\t\treturn equalKeys(m_keys, other.m_keys);\n-\t\t}\n+    }\n \t\telse\n \t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t}\n+    return false;\n+    }\n+    }\n \n \tprivate static <A> boolean equalKeys(final ArrayList<IdentityKey> expect, final ArrayList<IdentityKey> actual)\n \t{\n-\t\tfinal Iterator<IdentityKey> lhs = expect.iterator();\n+    final Iterator<IdentityKey> lhs = expect.iterator();\n \t\tfinal Iterator<IdentityKey> rhs = actual.iterator();\n \t\twhile (lhs.hasNext())\n \t\t{\n-\t\t\tfinal IdentityKey lhsAtom = lhs.next();\n+    final IdentityKey lhsAtom = lhs.next();\n \t\t\tif (rhs.hasNext())\n \t\t\t{\n-\t\t\t\tfinal IdentityKey rhsAtom = rhs.next();\n+    final IdentityKey rhsAtom = rhs.next();\n \t\t\t\tif (!lhsAtom.equals(rhsAtom))\n \t\t\t\t{\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n+    return false;\n+    }\n+    }\n \t\t\telse\n \t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n+    return false;\n+    }\n+    }\n \t\treturn !rhs.hasNext();\n-\t}\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/356/IdentityTuple.java\nindex be9c43b5ca5..15842eceec0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/356/IdentityTuple.java\n@@ -17,68 +17,68 @@ package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n import java.util.Iterator;\n-\n import org.genxdm.exceptions.PreCondition;\n \n /**\n  * A tuple is an ordered list of keys values.\n  */\n+\n final class IdentityTuple\n {\n-\tprivate final ArrayList<IdentityKey> m_keys;\n+    private final ArrayList<IdentityKey> m_keys;\n \n-\tpublic IdentityTuple(final ArrayList<IdentityKey> keys)\n-\t{\n-\t\t// This invariant may not hold up to the test of time.\n-\t\tthis.m_keys = PreCondition.assertArgumentNotNull(keys, \"keys\");\n-\t}\n+    public IdentityTuple(final ArrayList<IdentityKey> keys)\n+    {\n+        // This invariant may not hold up to the test of time.\n+        this.m_keys = PreCondition.assertArgumentNotNull(keys, \"keys\");\n+    }\n \n-\tpublic ArrayList<IdentityKey> getKeys()\n-\t{\n-\t\treturn m_keys;\n-\t}\n+    public ArrayList<IdentityKey> getKeys()\n+    {\n+        return m_keys;\n+    }\n \n-\t@Override\n-\tpublic int hashCode()\n-\t{\n-\t\treturn m_keys.size();\n-\t}\n+    @Override\n+    public int hashCode()\n+    {\n+        return m_keys.size();\n+    }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic boolean equals(final Object obj)\n-\t{\n-\t\tif (obj instanceof IdentityTuple)\n-\t\t{\n-\t\t\tfinal IdentityTuple other = (IdentityTuple)obj;\n-\t\t\treturn equalKeys(m_keys, other.m_keys);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t}\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public boolean equals(final Object obj)\n+    {\n+        if (obj instanceof IdentityTuple)\n+        {\n+            final IdentityTuple other = (IdentityTuple)obj;\n+            return equalKeys(m_keys, other.m_keys);\n+        }\n+        else\n+        {\n+            return false;\n+        }\n+    }\n \n-\tprivate static <A> boolean equalKeys(final ArrayList<IdentityKey> expect, final ArrayList<IdentityKey> actual)\n-\t{\n-\t\tfinal Iterator<IdentityKey> lhs = expect.iterator();\n-\t\tfinal Iterator<IdentityKey> rhs = actual.iterator();\n-\t\twhile (lhs.hasNext())\n-\t\t{\n-\t\t\tfinal IdentityKey lhsAtom = lhs.next();\n-\t\t\tif (rhs.hasNext())\n-\t\t\t{\n-\t\t\t\tfinal IdentityKey rhsAtom = rhs.next();\n-\t\t\t\tif (!lhsAtom.equals(rhsAtom))\n-\t\t\t\t{\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\treturn !rhs.hasNext();\n-\t}\n-}\n+    private static <A> boolean equalKeys(final ArrayList<IdentityKey> expect, final ArrayList<IdentityKey> actual)\n+    {\n+        final Iterator<IdentityKey> lhs = expect.iterator();\n+        final Iterator<IdentityKey> rhs = actual.iterator();\n+        while (lhs.hasNext())\n+        {\n+            final IdentityKey lhsAtom = lhs.next();\n+            if (rhs.hasNext())\n+            {\n+                final IdentityKey rhsAtom = rhs.next();\n+                if (!lhsAtom.equals(rhsAtom))\n+                {\n+                    return false;\n+                }\n+            }\n+            else\n+            {\n+                return false;\n+            }\n+        }\n+        return !rhs.hasNext();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 54
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/356/IdentityTuple.java\nindex be9c43b5ca5..d050ca9ee2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/356/IdentityTuple.java\n@@ -25,7 +25,7 @@ import org.genxdm.exceptions.PreCondition;\n  */\n final class IdentityTuple\n {\n-\tprivate final ArrayList<IdentityKey> m_keys;\n+private final ArrayList<IdentityKey> m_keys;\n \n \tpublic IdentityTuple(final ArrayList<IdentityKey> keys)\n \t{\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/356/IdentityTuple.java\nindex be9c43b5ca5..99b68e715f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/356/IdentityTuple.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/356/IdentityTuple.java\n@@ -25,7 +25,7 @@ import org.genxdm.exceptions.PreCondition;\n  */\n final class IdentityTuple\n {\n-\tprivate final ArrayList<IdentityKey> m_keys;\n+    private final ArrayList<IdentityKey> m_keys;\n \n \tpublic IdentityTuple(final ArrayList<IdentityKey> keys)\n \t{\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}