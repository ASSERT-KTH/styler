{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2975",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2975/CountsMigrator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2975/CountsMigrator.java\nindex 218de485d08..2ffa4f03199 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2975/CountsMigrator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2975/CountsMigrator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.storemigration.participant;\n \n import java.io.File;\n@@ -71,118 +72,117 @@ import static org.neo4j.kernel.impl.storemigration.FileOperation.MOVE;\n  */\n public class CountsMigrator extends AbstractStoreMigrationParticipant\n {\n-    private static final Iterable<StoreFile> COUNTS_STORE_FILES = Iterables\n-            .iterable( StoreFile.COUNTS_STORE_LEFT, StoreFile.COUNTS_STORE_RIGHT );\n+  private static final Iterable<StoreFile> COUNTS_STORE_FILES = Iterables\n+      .iterable(StoreFile.COUNTS_STORE_LEFT, StoreFile.COUNTS_STORE_RIGHT);\n \n-    private final Config config;\n-    private final FileSystemAbstraction fileSystem;\n-    private final PageCache pageCache;\n-    private boolean migrated;\n+  private final Config config;\n+  private final FileSystemAbstraction fileSystem;\n+  private final PageCache pageCache;\n+  private boolean migrated;\n \n-    public CountsMigrator( FileSystemAbstraction fileSystem, PageCache pageCache, Config config )\n-    {\n-        super( \"Counts store\" );\n-        this.fileSystem = fileSystem;\n-        this.pageCache = pageCache;\n-        this.config = config;\n-    }\n+  public CountsMigrator(FileSystemAbstraction fileSystem, PageCache pageCache, Config config)\n+  {\n+    super(\"Counts store\");\n+    this.fileSystem = fileSystem;\n+    this.pageCache = pageCache;\n+    this.config = config;\n+  }\n \n-    @Override\n-    public void migrate( File storeDir, File migrationDir, ProgressReporter progressMonitor,\n-            String versionToMigrateFrom, String versionToMigrateTo ) throws IOException\n+  @Override\n+  public void migrate(File storeDir, File migrationDir, ProgressReporter progressMonitor,\n+                      String versionToMigrateFrom, String versionToMigrateTo) throws IOException\n+  {\n+    if (countStoreRebuildRequired(versionToMigrateFrom))\n     {\n-        if ( countStoreRebuildRequired( versionToMigrateFrom ) )\n-        {\n-            // create counters from scratch\n-            StoreFile.fileOperation( DELETE, fileSystem, migrationDir, migrationDir, COUNTS_STORE_FILES, true, null,\n-                    StoreFileType.STORE );\n-            File neoStore = new File( storeDir, DEFAULT_NAME );\n-            long lastTxId = MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_TRANSACTION_ID );\n-            try\n-            {\n-                rebuildCountsFromScratch( migrationDir, migrationDir, lastTxId, progressMonitor, versionToMigrateTo,\n-                        pageCache, NullLogProvider.getInstance() );\n-            }\n-            catch ( StoreFailureException e )\n-            {\n-                //This means that we did not perform a full migration, as the formats had the same capabilities. Thus\n-                // we should use the store directory for information when rebuilding the count store. Note that we\n-                // still put the new count store in the migration directory.\n-                rebuildCountsFromScratch( storeDir, migrationDir, lastTxId, progressMonitor, versionToMigrateFrom,\n-                        pageCache, NullLogProvider.getInstance() );\n-            }\n-            migrated = true;\n-        }\n+      // create counters from scratch\n+      StoreFile.fileOperation(DELETE, fileSystem, migrationDir, migrationDir, COUNTS_STORE_FILES, true, null,\n+          StoreFileType.STORE);\n+      File neoStore = new File(storeDir, DEFAULT_NAME);\n+      long lastTxId = MetaDataStore.getRecord(pageCache, neoStore, Position.LAST_TRANSACTION_ID);\n+      try\n+      {\n+        rebuildCountsFromScratch(migrationDir, migrationDir, lastTxId, progressMonitor, versionToMigrateTo,\n+            pageCache, NullLogProvider.getInstance());\n+      } catch (StoreFailureException e)\n+      {\n+        //This means that we did not perform a full migration, as the formats had the same capabilities. Thus\n+        // we should use the store directory for information when rebuilding the count store. Note that we\n+        // still put the new count store in the migration directory.\n+        rebuildCountsFromScratch(storeDir, migrationDir, lastTxId, progressMonitor, versionToMigrateFrom,\n+            pageCache, NullLogProvider.getInstance());\n+      }\n+      migrated = true;\n     }\n+  }\n \n-    @Override\n-    public void moveMigratedFiles( File migrationDir, File storeDir, String versionToUpgradeFrom,\n-            String versionToUpgradeTo ) throws IOException\n-    {\n+  @Override\n+  public void moveMigratedFiles(File migrationDir, File storeDir, String versionToUpgradeFrom,\n+                                String versionToUpgradeTo) throws IOException\n+  {\n \n-        if ( migrated )\n-        {\n-            // Delete any current count files in the store directory.\n-            StoreFile.fileOperation( DELETE, fileSystem, storeDir, null, COUNTS_STORE_FILES, true, null,\n-                    StoreFileType.values() );\n-            // Move the migrated ones into the store directory\n-            StoreFile.fileOperation( MOVE, fileSystem, migrationDir, storeDir, COUNTS_STORE_FILES, true,\n-                    // allow to skip non existent source files\n-                    ExistingTargetStrategy.OVERWRITE, // allow to overwrite target files\n-                    StoreFileType.values() );\n-            // We do not need to move files with the page cache, as the count files always reside on the normal file system.\n-        }\n-    }\n-\n-    @Override\n-    public void cleanup( File migrationDir ) throws IOException\n+    if (migrated)\n     {\n-        fileSystem.deleteRecursively( migrationDir );\n+      // Delete any current count files in the store directory.\n+      StoreFile.fileOperation(DELETE, fileSystem, storeDir, null, COUNTS_STORE_FILES, true, null,\n+          StoreFileType.values());\n+      // Move the migrated ones into the store directory\n+      StoreFile.fileOperation(MOVE, fileSystem, migrationDir, storeDir, COUNTS_STORE_FILES, true,\n+          // allow to skip non existent source files\n+          ExistingTargetStrategy.OVERWRITE, // allow to overwrite target files\n+          StoreFileType.values());\n+      // We do not need to move files with the page cache, as the count files always reside on the normal file system.\n     }\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return \"Kernel Node Count Rebuilder\";\n-    }\n+  @Override\n+  public void cleanup(File migrationDir) throws IOException\n+  {\n+    fileSystem.deleteRecursively(migrationDir);\n+  }\n \n-    boolean countStoreRebuildRequired( String versionToMigrateFrom )\n-    {\n-        return StandardV2_3.STORE_VERSION.equals( versionToMigrateFrom ) ||\n-               StandardV3_0.STORE_VERSION.equals( versionToMigrateFrom ) ||\n-               StoreVersion.HIGH_LIMIT_V3_0_0.versionString().equals( versionToMigrateFrom ) ||\n-               StoreVersion.HIGH_LIMIT_V3_0_6.versionString().equals( versionToMigrateFrom ) ||\n-               StoreVersion.HIGH_LIMIT_V3_1_0.versionString().equals( versionToMigrateFrom );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return \"Kernel Node Count Rebuilder\";\n+  }\n \n-    private void rebuildCountsFromScratch( File storeDirToReadFrom, File migrationDir, long lastTxId,\n-            ProgressReporter progressMonitor, String expectedStoreVersion, PageCache pageCache,\n-            LogProvider logProvider )\n-    {\n-        final File storeFileBase = new File( migrationDir,\n-                MetaDataStore.DEFAULT_NAME + StoreFactory.COUNTS_STORE );\n+  boolean countStoreRebuildRequired(String versionToMigrateFrom)\n+  {\n+    return StandardV2_3.STORE_VERSION.equals(versionToMigrateFrom) ||\n+        StandardV3_0.STORE_VERSION.equals(versionToMigrateFrom) ||\n+        StoreVersion.HIGH_LIMIT_V3_0_0.versionString().equals(versionToMigrateFrom) ||\n+        StoreVersion.HIGH_LIMIT_V3_0_6.versionString().equals(versionToMigrateFrom) ||\n+        StoreVersion.HIGH_LIMIT_V3_1_0.versionString().equals(versionToMigrateFrom);\n+  }\n+\n+  private void rebuildCountsFromScratch(File storeDirToReadFrom, File migrationDir, long lastTxId,\n+                                        ProgressReporter progressMonitor, String expectedStoreVersion, PageCache pageCache,\n+                                        LogProvider logProvider)\n+  {\n+    final File storeFileBase = new File(migrationDir,\n+        MetaDataStore.DEFAULT_NAME + StoreFactory.COUNTS_STORE);\n \n-        RecordFormats recordFormats = selectForVersion( expectedStoreVersion );\n-        IdGeneratorFactory idGeneratorFactory = new ReadOnlyIdGeneratorFactory( fileSystem );\n-        StoreFactory storeFactory = new StoreFactory( storeDirToReadFrom, config, idGeneratorFactory, pageCache,\n-                fileSystem, recordFormats, logProvider, EmptyVersionContextSupplier.EMPTY );\n-        try ( NeoStores neoStores = storeFactory\n-                .openNeoStores( StoreType.NODE, StoreType.RELATIONSHIP, StoreType.LABEL_TOKEN,\n-                        StoreType.RELATIONSHIP_TYPE_TOKEN ) )\n-        {\n-            neoStores.verifyStoreOk();\n-            NodeStore nodeStore = neoStores.getNodeStore();\n-            RelationshipStore relationshipStore = neoStores.getRelationshipStore();\n-            try ( Lifespan life = new Lifespan() )\n-            {\n-                int highLabelId = (int) neoStores.getLabelTokenStore().getHighId();\n-                int highRelationshipTypeId = (int) neoStores.getRelationshipTypeTokenStore().getHighId();\n-                CountsComputer initializer = new CountsComputer( lastTxId, nodeStore, relationshipStore, highLabelId,\n-                        highRelationshipTypeId, NumberArrayFactory.auto( pageCache, migrationDir, true, NumberArrayFactory.NO_MONITOR ),\n-                        progressMonitor );\n-                life.add( new CountsTracker( logProvider, fileSystem, pageCache, config,\n-                        storeFileBase, EmptyVersionContextSupplier.EMPTY ).setInitializer( initializer ) );\n-            }\n-        }\n+    RecordFormats recordFormats = selectForVersion(expectedStoreVersion);\n+    IdGeneratorFactory idGeneratorFactory = new ReadOnlyIdGeneratorFactory(fileSystem);\n+    StoreFactory storeFactory = new StoreFactory(storeDirToReadFrom, config, idGeneratorFactory, pageCache,\n+        fileSystem, recordFormats, logProvider, EmptyVersionContextSupplier.EMPTY);\n+    try (NeoStores neoStores = storeFactory\n+        .openNeoStores(StoreType.NODE, StoreType.RELATIONSHIP, StoreType.LABEL_TOKEN,\n+            StoreType.RELATIONSHIP_TYPE_TOKEN))\n+    {\n+      neoStores.verifyStoreOk();\n+      NodeStore nodeStore = neoStores.getNodeStore();\n+      RelationshipStore relationshipStore = neoStores.getRelationshipStore();\n+      try (Lifespan life = new Lifespan())\n+      {\n+        int highLabelId = (int) neoStores.getLabelTokenStore().getHighId();\n+        int highRelationshipTypeId = (int) neoStores.getRelationshipTypeTokenStore().getHighId();\n+        CountsComputer initializer = new CountsComputer(lastTxId, nodeStore, relationshipStore, highLabelId,\n+            highRelationshipTypeId, NumberArrayFactory.auto(pageCache, migrationDir, true, NumberArrayFactory.NO_MONITOR),\n+            progressMonitor);\n+        life.add(new CountsTracker(logProvider, fileSystem, pageCache, config,\n+            storeFileBase, EmptyVersionContextSupplier.EMPTY).setInitializer(initializer));\n+      }\n     }\n+  }\n }\n",
            "diff_size": 123
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "149",
                    "column": "74",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "174",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2975/CountsMigrator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2975/CountsMigrator.java\nindex 218de485d08..91d38ca1ec4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2975/CountsMigrator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2975/CountsMigrator.java\n@@ -71,10 +71,8 @@ import static org.neo4j.kernel.impl.storemigration.FileOperation.MOVE;\n  */\n public class CountsMigrator extends AbstractStoreMigrationParticipant\n {\n-    private static final Iterable<StoreFile> COUNTS_STORE_FILES = Iterables\n-            .iterable( StoreFile.COUNTS_STORE_LEFT, StoreFile.COUNTS_STORE_RIGHT );\n-\n-    private final Config config;\n+    private static final Iterable<StoreFile> COUNTS_STORE_FILES = Iterables.iterable( StoreFile.COUNTS_STORE_LEFT, StoreFile.COUNTS_STORE_RIGHT );\n+private final Config config;\n     private final FileSystemAbstraction fileSystem;\n     private final PageCache pageCache;\n     private boolean migrated;\n@@ -90,19 +88,19 @@ public class CountsMigrator extends AbstractStoreMigrationParticipant\n     @Override\n     public void migrate( File storeDir, File migrationDir, ProgressReporter progressMonitor,\n             String versionToMigrateFrom, String versionToMigrateTo ) throws IOException\n-    {\n+{\n         if ( countStoreRebuildRequired( versionToMigrateFrom ) )\n         {\n             // create counters from scratch\n             StoreFile.fileOperation( DELETE, fileSystem, migrationDir, migrationDir, COUNTS_STORE_FILES, true, null,\n                     StoreFileType.STORE );\n-            File neoStore = new File( storeDir, DEFAULT_NAME );\n+File neoStore = new File( storeDir, DEFAULT_NAME );\n             long lastTxId = MetaDataStore.getRecord( pageCache, neoStore, Position.LAST_TRANSACTION_ID );\n             try\n             {\n                 rebuildCountsFromScratch( migrationDir, migrationDir, lastTxId, progressMonitor, versionToMigrateTo,\n                         pageCache, NullLogProvider.getInstance() );\n-            }\n+    }\n             catch ( StoreFailureException e )\n             {\n                 //This means that we did not perform a full migration, as the formats had the same capabilities. Thus\n@@ -111,26 +109,26 @@ public class CountsMigrator extends AbstractStoreMigrationParticipant\n                 rebuildCountsFromScratch( storeDir, migrationDir, lastTxId, progressMonitor, versionToMigrateFrom,\n                         pageCache, NullLogProvider.getInstance() );\n             }\n-            migrated = true;\n+\n+migrated = true;\n         }\n     }\n \n     @Override\n     public void moveMigratedFiles( File migrationDir, File storeDir, String versionToUpgradeFrom,\n             String versionToUpgradeTo ) throws IOException\n-    {\n-\n-        if ( migrated )\n+{\n+    if ( migrated )\n         {\n             // Delete any current count files in the store directory.\n             StoreFile.fileOperation( DELETE, fileSystem, storeDir, null, COUNTS_STORE_FILES, true, null,\n                     StoreFileType.values() );\n-            // Move the migrated ones into the store directory\n+    // Move the migrated ones into the store directory\n             StoreFile.fileOperation( MOVE, fileSystem, migrationDir, storeDir, COUNTS_STORE_FILES, true,\n                     // allow to skip non existent source files\n                     ExistingTargetStrategy.OVERWRITE, // allow to overwrite target files\n                     StoreFileType.values() );\n-            // We do not need to move files with the page cache, as the count files always reside on the normal file system.\n+    // We do not need to move files with the page cache, as the count files always reside on the normal file system.\n         }\n     }\n \n@@ -148,8 +146,7 @@ public class CountsMigrator extends AbstractStoreMigrationParticipant\n \n     boolean countStoreRebuildRequired( String versionToMigrateFrom )\n     {\n-        return StandardV2_3.STORE_VERSION.equals( versionToMigrateFrom ) ||\n-               StandardV3_0.STORE_VERSION.equals( versionToMigrateFrom ) ||\n+        return StandardV2_3.STORE_VERSION.equals( versionToMigrateFrom ) ||StandardV3_0.STORE_VERSION.equals( versionToMigrateFrom ) ||\n                StoreVersion.HIGH_LIMIT_V3_0_0.versionString().equals( versionToMigrateFrom ) ||\n                StoreVersion.HIGH_LIMIT_V3_0_6.versionString().equals( versionToMigrateFrom ) ||\n                StoreVersion.HIGH_LIMIT_V3_1_0.versionString().equals( versionToMigrateFrom );\n@@ -161,28 +158,26 @@ public class CountsMigrator extends AbstractStoreMigrationParticipant\n     {\n         final File storeFileBase = new File( migrationDir,\n                 MetaDataStore.DEFAULT_NAME + StoreFactory.COUNTS_STORE );\n-\n-        RecordFormats recordFormats = selectForVersion( expectedStoreVersion );\n+RecordFormats recordFormats = selectForVersion( expectedStoreVersion );\n         IdGeneratorFactory idGeneratorFactory = new ReadOnlyIdGeneratorFactory( fileSystem );\n         StoreFactory storeFactory = new StoreFactory( storeDirToReadFrom, config, idGeneratorFactory, pageCache,\n                 fileSystem, recordFormats, logProvider, EmptyVersionContextSupplier.EMPTY );\n-        try ( NeoStores neoStores = storeFactory\n-                .openNeoStores( StoreType.NODE, StoreType.RELATIONSHIP, StoreType.LABEL_TOKEN,\n+\n+try ( NeoStores neoStores = storeFactory.openNeoStores( StoreType.NODE, StoreType.RELATIONSHIP, StoreType.LABEL_TOKEN,\n                         StoreType.RELATIONSHIP_TYPE_TOKEN ) )\n-        {\n+{\n             neoStores.verifyStoreOk();\n             NodeStore nodeStore = neoStores.getNodeStore();\n             RelationshipStore relationshipStore = neoStores.getRelationshipStore();\n             try ( Lifespan life = new Lifespan() )\n             {\n-                int highLabelId = (int) neoStores.getLabelTokenStore().getHighId();\n-                int highRelationshipTypeId = (int) neoStores.getRelationshipTypeTokenStore().getHighId();\n+                int highLabelId = ( int) neoStores.getLabelTokenStore().getHighId();\n+                int highRelationshipTypeId = ( int) neoStores.getRelationshipTypeTokenStore().getHighId();\n                 CountsComputer initializer = new CountsComputer( lastTxId, nodeStore, relationshipStore, highLabelId,\n-                        highRelationshipTypeId, NumberArrayFactory.auto( pageCache, migrationDir, true, NumberArrayFactory.NO_MONITOR ),\n-                        progressMonitor );\n-                life.add( new CountsTracker( logProvider, fileSystem, pageCache, config,\n+                        highRelationshipTypeId, NumberArrayFactory.auto( pageCache, migrationDir, true, NumberArrayFactory.NO_MONITOR ), progressMonitor );\n+life.add( new CountsTracker( logProvider, fileSystem, pageCache, config,\n                         storeFileBase, EmptyVersionContextSupplier.EMPTY ).setInitializer( initializer ) );\n-            }\n+    }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}