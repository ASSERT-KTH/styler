{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "95",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @return the opened bucket if successful.\n     */\n    Observable<AsyncBucket> openBucket(String name, String password, List<Transcoder<? extends Document, ?>> transcoders);\n\n    /**\n     * Provides access to the {@link AsyncClusterManager} to perform cluster-wide operations.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/38/AsyncCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/38/AsyncCluster.java\nindex f77a0c6a835..02b5c415532 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/38/AsyncCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/38/AsyncCluster.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.java;\n \n import com.couchbase.client.core.ClusterFacade;\n@@ -28,7 +29,7 @@ import java.util.List;\n \n /**\n  * Represents a Couchbase Server {@link Cluster}.\n- *\n+ * <p>\n  * A {@link AsyncCluster} is able to open many {@link AsyncBucket}s while sharing the underlying resources very\n  * efficiently. In addition, the {@link AsyncClusterManager} is available to perform cluster-wide operations.\n  *\n@@ -41,12 +42,12 @@ public interface AsyncCluster {\n \n     /**\n      * Opens the default bucket with an empty password.\n-     *\n+     * <p>\n      * The {@link Observable} can error under the following conditions:\n-     *\n-     *  - com.couchbase.client.core.CouchbaseException: If the bucket could not be opened (see logs and nested stack\n-     *    trace for more details why it failed).\n-     *   - com.couchbase.client.core.BackpressureException: If the incoming request rate is too high to be processed.\n+     * <p>\n+     * - com.couchbase.client.core.CouchbaseException: If the bucket could not be opened (see logs and nested stack\n+     * trace for more details why it failed).\n+     * - com.couchbase.client.core.BackpressureException: If the incoming request rate is too high to be processed.\n      *\n      * @return the opened bucket if successful.\n      */\n@@ -54,12 +55,12 @@ public interface AsyncCluster {\n \n     /**\n      * Opens the bucket with the given name and an empty password.\n-     *\n+     * <p>\n      * The {@link Observable} can error under the following conditions:\n-     *\n-     *  - com.couchbase.client.core.CouchbaseException: If the bucket could not be opened (see logs and nested stack\n-     *    trace for more details why it failed).\n-     *   - com.couchbase.client.core.BackpressureException: If the incoming request rate is too high to be processed.\n+     * <p>\n+     * - com.couchbase.client.core.CouchbaseException: If the bucket could not be opened (see logs and nested stack\n+     * trace for more details why it failed).\n+     * - com.couchbase.client.core.BackpressureException: If the incoming request rate is too high to be processed.\n      *\n      * @param name the name of the bucket.\n      * @return the opened bucket if successful.\n@@ -68,12 +69,12 @@ public interface AsyncCluster {\n \n     /**\n      * Opens the bucket with the given name and password.\n-     *\n+     * <p>\n      * The {@link Observable} can error under the following conditions:\n-     *\n-     *  - com.couchbase.client.core.CouchbaseException: If the bucket could not be opened (see logs and nested stack\n-     *    trace for more details why it failed).\n-     *   - com.couchbase.client.core.BackpressureException: If the incoming request rate is too high to be processed.\n+     * <p>\n+     * - com.couchbase.client.core.CouchbaseException: If the bucket could not be opened (see logs and nested stack\n+     * trace for more details why it failed).\n+     * - com.couchbase.client.core.BackpressureException: If the incoming request rate is too high to be processed.\n      *\n      * @param name the name of the bucket.\n      * @return the opened bucket if successful.\n@@ -82,21 +83,22 @@ public interface AsyncCluster {\n \n     /**\n      * Opens the bucket with the given name, password and a custom list of {@link Transcoder}s.\n-     *\n+     * <p>\n      * The {@link Observable} can error under the following conditions:\n-     *\n-     *  - com.couchbase.client.core.CouchbaseException: If the bucket could not be opened (see logs and nested stack\n-     *    trace for more details why it failed).\n-     *   - com.couchbase.client.core.BackpressureException: If the incoming request rate is too high to be processed.\n+     * <p>\n+     * - com.couchbase.client.core.CouchbaseException: If the bucket could not be opened (see logs and nested stack\n+     * trace for more details why it failed).\n+     * - com.couchbase.client.core.BackpressureException: If the incoming request rate is too high to be processed.\n      *\n      * @param name the name of the bucket.\n      * @return the opened bucket if successful.\n      */\n-    Observable<AsyncBucket> openBucket(String name, String password, List<Transcoder<? extends Document, ?>> transcoders);\n+    Observable<AsyncBucket> openBucket(String name, String password,\n+                                       List<Transcoder<? extends Document, ?>> transcoders);\n \n     /**\n      * Provides access to the {@link AsyncClusterManager} to perform cluster-wide operations.\n-     *\n+     * <p>\n      * Note that the credentials provided here are different from bucket-level credentials. As a rule of thumb, the\n      * \"Administrator\" credentials need to be passed in here or any credentials with enough permissions to perform\n      * the underlying operations. **Bucket level credentials will not work.**\n@@ -116,7 +118,7 @@ public interface AsyncCluster {\n \n     /**\n      * Returns the underlying \"core-io\" library through its {@link ClusterFacade}.\n-     *\n+     * <p>\n      * Handle with care, with great power comes great responsibility. All additional checks which are normally performed\n      * by this library are skipped.\n      *\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/38/AsyncCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/38/AsyncCluster.java\nindex f77a0c6a835..666e6cc37dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/38/AsyncCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/38/AsyncCluster.java\n@@ -124,4 +124,4 @@ public interface AsyncCluster {\n      */\n     Observable<ClusterFacade> core();\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/38/AsyncCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/38/AsyncCluster.java\nindex f77a0c6a835..eb07f04f24f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/38/AsyncCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/38/AsyncCluster.java\n@@ -23,7 +23,6 @@ import com.couchbase.client.java.document.Document;\n import com.couchbase.client.java.env.CouchbaseEnvironment;\n import com.couchbase.client.java.transcoder.Transcoder;\n import rx.Observable;\n-\n import java.util.List;\n \n /**\n@@ -35,6 +34,8 @@ import java.util.List;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n+\n+\n @InterfaceStability.Committed\n @InterfaceAudience.Public\n public interface AsyncCluster {\n@@ -50,6 +51,7 @@ public interface AsyncCluster {\n      *\n      * @return the opened bucket if successful.\n      */\n+\n     Observable<AsyncBucket> openBucket();\n \n     /**\n@@ -64,6 +66,8 @@ public interface AsyncCluster {\n      * @param name the name of the bucket.\n      * @return the opened bucket if successful.\n      */\n+\n+\n     Observable<AsyncBucket> openBucket(String name);\n \n     /**\n@@ -78,6 +82,8 @@ public interface AsyncCluster {\n      * @param name the name of the bucket.\n      * @return the opened bucket if successful.\n      */\n+\n+\n     Observable<AsyncBucket> openBucket(String name, String password);\n \n     /**\n@@ -92,6 +98,8 @@ public interface AsyncCluster {\n      * @param name the name of the bucket.\n      * @return the opened bucket if successful.\n      */\n+\n+\n     Observable<AsyncBucket> openBucket(String name, String password, List<Transcoder<? extends Document, ?>> transcoders);\n \n     /**\n@@ -105,6 +113,8 @@ public interface AsyncCluster {\n      * @param password the password associated with the username.\n      * @return the {@link AsyncClusterManager} if successful.\n      */\n+\n+\n     Observable<AsyncClusterManager> clusterManager(String username, String password);\n \n     /**\n@@ -112,6 +122,8 @@ public interface AsyncCluster {\n      *\n      * @return true once done and everything succeeded, false otherwise.\n      */\n+\n+\n     Observable<Boolean> disconnect();\n \n     /**\n@@ -122,6 +134,8 @@ public interface AsyncCluster {\n      *\n      * @return the underlying {@link ClusterFacade} from the \"core-io\" package.\n      */\n+\n+\n     Observable<ClusterFacade> core();\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}