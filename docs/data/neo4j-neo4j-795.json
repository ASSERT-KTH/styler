{
    "project_name": "neo4j-neo4j",
    "error_id": "795",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "65",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "112",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/795/SchemaRuleDeserializer2_0to3_1.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/795/SchemaRuleDeserializer2_0to3_1.java\nindex e32a4c2d418..cdd58334b43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/795/SchemaRuleDeserializer2_0to3_1.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/795/SchemaRuleDeserializer2_0to3_1.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.storemigration.legacy;\n \n import java.nio.ByteBuffer;\n@@ -44,78 +45,76 @@ class SchemaRuleDeserializer2_0to3_1\n     {\n     }\n \n-    static boolean isLegacySchemaRule( byte schemaRuleType )\n+    static boolean isLegacySchemaRule(byte schemaRuleType)\n     {\n         return schemaRuleType >= 1 && schemaRuleType <= SchemaRuleKind.values().length;\n     }\n \n-    static SchemaRule deserialize( long id, int labelId, byte kindByte, ByteBuffer buffer ) throws MalformedSchemaRuleException\n+    static SchemaRule deserialize(long id, int labelId, byte kindByte, ByteBuffer buffer) throws MalformedSchemaRuleException\n     {\n-        SchemaRuleKind kind = SchemaRuleKind.forId( kindByte );\n+        SchemaRuleKind kind = SchemaRuleKind.forId(kindByte);\n         try\n         {\n-            SchemaRule rule = newRule( kind, id, labelId, buffer );\n-            if ( null == rule )\n+            SchemaRule rule = newRule(kind, id, labelId, buffer);\n+            if (null == rule)\n             {\n-                throw new MalformedSchemaRuleException( null,\n-                        \"Deserialized null schema rule for id %d with kind %s\", id, kind.name() );\n+                throw new MalformedSchemaRuleException(null,\n+                  \"Deserialized null schema rule for id %d with kind %s\", id, kind.name());\n             }\n             return rule;\n-        }\n-        catch ( Exception e )\n+        } catch (Exception e)\n         {\n-            throw new MalformedSchemaRuleException( e,\n-                    \"Could not deserialize schema rule for id %d with kind %s\", id, kind.name() );\n+            throw new MalformedSchemaRuleException(e,\n+              \"Could not deserialize schema rule for id %d with kind %s\", id, kind.name());\n         }\n     }\n \n-    private static SchemaRule newRule( SchemaRuleKind kind, long id, int labelId, ByteBuffer buffer )\n+    private static SchemaRule newRule(SchemaRuleKind kind, long id, int labelId, ByteBuffer buffer)\n     {\n-        switch ( kind )\n+        switch (kind)\n         {\n-        case INDEX_RULE:\n-            return readIndexRule( id, false, labelId, buffer );\n-        case CONSTRAINT_INDEX_RULE:\n-            return readIndexRule( id, true, labelId, buffer );\n-        case UNIQUENESS_CONSTRAINT:\n-            return readUniquenessConstraintRule( id, labelId, buffer );\n-        case NODE_PROPERTY_EXISTENCE_CONSTRAINT:\n-            return readNodePropertyExistenceConstraintRule( id, labelId, buffer );\n-        case RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT:\n-            return readRelPropertyExistenceConstraintRule( id, labelId, buffer );\n-        default:\n-            throw new IllegalArgumentException( kind.name() );\n+            case INDEX_RULE:\n+                return readIndexRule(id, false, labelId, buffer);\n+            case CONSTRAINT_INDEX_RULE:\n+                return readIndexRule(id, true, labelId, buffer);\n+            case UNIQUENESS_CONSTRAINT:\n+                return readUniquenessConstraintRule(id, labelId, buffer);\n+            case NODE_PROPERTY_EXISTENCE_CONSTRAINT:\n+                return readNodePropertyExistenceConstraintRule(id, labelId, buffer);\n+            case RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT:\n+                return readRelPropertyExistenceConstraintRule(id, labelId, buffer);\n+            default:\n+                throw new IllegalArgumentException(kind.name());\n         }\n     }\n \n     // === INDEX RULES ===\n \n-    private static IndexDescriptor readIndexRule( long id, boolean constraintIndex, int label, ByteBuffer serialized )\n+    private static IndexDescriptor readIndexRule(long id, boolean constraintIndex, int label, ByteBuffer serialized)\n     {\n-        String providerKey = getDecodedStringFrom( serialized );\n-        String providerVersion = getDecodedStringFrom( serialized );\n-        IndexProviderDescriptor providerDescriptor = new IndexProviderDescriptor( providerKey, providerVersion );\n-        int[] propertyKeyIds = readIndexPropertyKeys( serialized );\n-        LabelSchemaDescriptor schema = SchemaDescriptor.forLabel( label, propertyKeyIds );\n-        String name = defaultIndexName( id );\n-        if ( constraintIndex )\n+        String providerKey = getDecodedStringFrom(serialized);\n+        String providerVersion = getDecodedStringFrom(serialized);\n+        IndexProviderDescriptor providerDescriptor = new IndexProviderDescriptor(providerKey, providerVersion);\n+        int[] propertyKeyIds = readIndexPropertyKeys(serialized);\n+        LabelSchemaDescriptor schema = SchemaDescriptor.forLabel(label, propertyKeyIds);\n+        String name = defaultIndexName(id);\n+        if (constraintIndex)\n         {\n-            return IndexPrototype.uniqueForSchema( schema, providerDescriptor )\n-                    .withName( name ).materialise( id ).withOwningConstraintId( readOwningConstraint( serialized ) );\n-        }\n-        else\n+            return IndexPrototype.uniqueForSchema(schema, providerDescriptor)\n+              .withName(name).materialise(id).withOwningConstraintId(readOwningConstraint(serialized));\n+        } else\n         {\n-            return IndexPrototype.forSchema( schema, providerDescriptor )\n-                    .withName( name ).materialise( id );\n+            return IndexPrototype.forSchema(schema, providerDescriptor)\n+              .withName(name).materialise(id);\n         }\n     }\n \n-    static String defaultIndexName( long id )\n+    static String defaultIndexName(long id)\n     {\n         return \"index_\" + id;\n     }\n \n-    private static int[] readIndexPropertyKeys( ByteBuffer serialized )\n+    private static int[] readIndexPropertyKeys(ByteBuffer serialized)\n     {\n         // Currently only one key is supported although the data format supports multiple\n         int count = serialized.getShort();\n@@ -123,56 +122,56 @@ class SchemaRuleDeserializer2_0to3_1\n \n         // Changed from being a long to an int 2013-09-10, but keeps reading a long to not change the store format.\n         int[] props = new int[count];\n-        for ( int i = 0; i < count; i++ )\n+        for (int i = 0; i < count; i++)\n         {\n-            props[i] = safeCastLongToInt( serialized.getLong() );\n+            props[i] = safeCastLongToInt(serialized.getLong());\n         }\n         return props;\n     }\n \n-    private static long readOwningConstraint( ByteBuffer serialized )\n+    private static long readOwningConstraint(ByteBuffer serialized)\n     {\n         return serialized.getLong();\n     }\n \n     // === CONSTRAINT RULES ===\n \n-    public static ConstraintDescriptor readUniquenessConstraintRule( long id, int labelId, ByteBuffer buffer )\n+    public static ConstraintDescriptor readUniquenessConstraintRule(long id, int labelId, ByteBuffer buffer)\n     {\n-        int[] propertyIds = readConstraintPropertyKeys( buffer );\n-        Long ownedIndex = readOwnedIndexRule( buffer );\n-        UniquenessConstraintDescriptor constraint = ConstraintDescriptorFactory.uniqueForLabel( labelId, propertyIds );\n-        return constraint.withId( id ).withOwnedIndexId( ownedIndex );\n+        int[] propertyIds = readConstraintPropertyKeys(buffer);\n+        Long ownedIndex = readOwnedIndexRule(buffer);\n+        UniquenessConstraintDescriptor constraint = ConstraintDescriptorFactory.uniqueForLabel(labelId, propertyIds);\n+        return constraint.withId(id).withOwnedIndexId(ownedIndex);\n     }\n \n-    public static ConstraintDescriptor readNodePropertyExistenceConstraintRule( long id, int labelId, ByteBuffer buffer )\n+    public static ConstraintDescriptor readNodePropertyExistenceConstraintRule(long id, int labelId, ByteBuffer buffer)\n     {\n-        int propertyKey = readPropertyKey( buffer );\n-        return ConstraintDescriptorFactory.existsForLabel( labelId, propertyKey ).withId( id );\n+        int propertyKey = readPropertyKey(buffer);\n+        return ConstraintDescriptorFactory.existsForLabel(labelId, propertyKey).withId(id);\n     }\n \n-    public static ConstraintDescriptor readRelPropertyExistenceConstraintRule( long id, int relTypeId, ByteBuffer buffer )\n+    public static ConstraintDescriptor readRelPropertyExistenceConstraintRule(long id, int relTypeId, ByteBuffer buffer)\n     {\n-        int propertyKey = readPropertyKey( buffer );\n-        return ConstraintDescriptorFactory.existsForRelType( relTypeId, propertyKey ).withId( id );\n+        int propertyKey = readPropertyKey(buffer);\n+        return ConstraintDescriptorFactory.existsForRelType(relTypeId, propertyKey).withId(id);\n     }\n \n-    private static int readPropertyKey( ByteBuffer buffer )\n+    private static int readPropertyKey(ByteBuffer buffer)\n     {\n         return buffer.getInt();\n     }\n \n-    private static int[] readConstraintPropertyKeys( ByteBuffer buffer )\n+    private static int[] readConstraintPropertyKeys(ByteBuffer buffer)\n     {\n         int[] keys = new int[buffer.get()];\n-        for ( int i = 0; i < keys.length; i++ )\n+        for (int i = 0; i < keys.length; i++)\n         {\n-            keys[i] = safeCastLongToInt( buffer.getLong() );\n+            keys[i] = safeCastLongToInt(buffer.getLong());\n         }\n         return keys;\n     }\n \n-    private static Long readOwnedIndexRule( ByteBuffer buffer )\n+    private static Long readOwnedIndexRule(ByteBuffer buffer)\n     {\n         return buffer.getLong();\n     }\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}