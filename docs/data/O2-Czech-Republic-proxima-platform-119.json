{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "119",
    "information": {
        "errors": [
            {
                "line": "33",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 97).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  public void testBufferUntilCheckpointIsIdentity() {\n    Pipeline p = Pipeline.create();\n    PCollection<String> input = p.apply(Create.of(\"a\", \"b\", \"c\")).setCoder(StringUtf8Coder.of());\n    PCollection<String> output = input.apply(ParDo.of(new BufferUntilCheckpoint<>()));\n\n    PAssert.that(output).containsInAnyOrder(\"a\", \"b\", \"c\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/119/BufferUntilCheckpointTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/119/BufferUntilCheckpointTest.java\nindex 4598cddbac5..fe36bddd18c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/119/BufferUntilCheckpointTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/119/BufferUntilCheckpointTest.java\n@@ -30,7 +30,8 @@ public class BufferUntilCheckpointTest {\n   @Test\n   public void testBufferUntilCheckpointIsIdentity() {\n     Pipeline p = Pipeline.create();\n-    PCollection<String> input = p.apply(Create.of(\"a\", \"b\", \"c\")).setCoder(StringUtf8Coder.of());\n+    PCollection<String> input = p.apply(Create.of(\"a\",\"b\",\"c\"\n+    )).setCoder(StringUtf8Coder.of());\n     PCollection<String> output = input.apply(ParDo.of(new BufferUntilCheckpoint<>()));\n \n     PAssert.that(output).containsInAnyOrder(\"a\", \"b\", \"c\");\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/119/BufferUntilCheckpointTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/119/BufferUntilCheckpointTest.java\nindex 4598cddbac5..c2b8bc6c205 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/119/BufferUntilCheckpointTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/119/BufferUntilCheckpointTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.beam.transforms;\n \n import static org.junit.Assert.assertNotNull;\n@@ -30,7 +31,8 @@ public class BufferUntilCheckpointTest {\n   @Test\n   public void testBufferUntilCheckpointIsIdentity() {\n     Pipeline p = Pipeline.create();\n-    PCollection<String> input = p.apply(Create.of(\"a\", \"b\", \"c\")).setCoder(StringUtf8Coder.of());\n+    PCollection<String> input =\n+        p.apply(Create.of(\"a\", \"b\", \"c\")).setCoder(StringUtf8Coder.of());\n     PCollection<String> output = input.apply(ParDo.of(new BufferUntilCheckpoint<>()));\n \n     PAssert.that(output).containsInAnyOrder(\"a\", \"b\", \"c\");\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/119/BufferUntilCheckpointTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/119/BufferUntilCheckpointTest.java\nindex 4598cddbac5..2954a982251 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/119/BufferUntilCheckpointTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/119/BufferUntilCheckpointTest.java\n@@ -37,4 +37,4 @@ public class BufferUntilCheckpointTest {\n \n     assertNotNull(p.run());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/119/BufferUntilCheckpointTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/119/BufferUntilCheckpointTest.java\nindex 4598cddbac5..7a2ca358c38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/119/BufferUntilCheckpointTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/119/BufferUntilCheckpointTest.java\n@@ -16,7 +16,6 @@\n package cz.o2.proxima.beam.transforms;\n \n import static org.junit.Assert.assertNotNull;\n-\n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.coders.StringUtf8Coder;\n import org.apache.beam.sdk.testing.PAssert;\n@@ -25,6 +24,7 @@ import org.apache.beam.sdk.transforms.ParDo;\n import org.apache.beam.sdk.values.PCollection;\n import org.junit.Test;\n \n+\n public class BufferUntilCheckpointTest {\n \n   @Test\n@@ -32,9 +32,7 @@ public class BufferUntilCheckpointTest {\n     Pipeline p = Pipeline.create();\n     PCollection<String> input = p.apply(Create.of(\"a\", \"b\", \"c\")).setCoder(StringUtf8Coder.of());\n     PCollection<String> output = input.apply(ParDo.of(new BufferUntilCheckpoint<>()));\n-\n     PAssert.that(output).containsInAnyOrder(\"a\", \"b\", \"c\");\n-\n     assertNotNull(p.run());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/119/BufferUntilCheckpointTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/119/BufferUntilCheckpointTest.java\nindex 4598cddbac5..fe36bddd18c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/119/BufferUntilCheckpointTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/119/BufferUntilCheckpointTest.java\n@@ -30,7 +30,8 @@ public class BufferUntilCheckpointTest {\n   @Test\n   public void testBufferUntilCheckpointIsIdentity() {\n     Pipeline p = Pipeline.create();\n-    PCollection<String> input = p.apply(Create.of(\"a\", \"b\", \"c\")).setCoder(StringUtf8Coder.of());\n+    PCollection<String> input = p.apply(Create.of(\"a\",\"b\",\"c\"\n+    )).setCoder(StringUtf8Coder.of());\n     PCollection<String> output = input.apply(ParDo.of(new BufferUntilCheckpoint<>()));\n \n     PAssert.that(output).containsInAnyOrder(\"a\", \"b\", \"c\");\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}