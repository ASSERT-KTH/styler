{
    "project_name": "codefollower-H2-Research",
    "error_id": "328",
    "information": {
        "errors": [
            {
                "line": "75",
                "column": "38",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "     * @return the last record\n     */\n    public UndoLogRecord getLast() { //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n        int i = records.size() - 1;\n        if (i < 0 && storedEntries > 0) {\n            int last = storedEntriesPos.size() - 1;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/328/UndoLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/328/UndoLog.java\nindex c53a066f371..887ed66cb85 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/328/UndoLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/328/UndoLog.java\n@@ -72,8 +72,9 @@ public class UndoLog {\n      *\n      * @return the last record\n      */\n-    public UndoLogRecord getLast() { //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n-        int i = records.size() - 1;\n+    public UndoLogRecord getLast() {\n+        //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n+    int i = records.size() - 1;\n         if (i < 0 && storedEntries > 0) {\n             int last = storedEntriesPos.size() - 1;\n             long pos = storedEntriesPos.remove(last);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "76",
                    "column": "36",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/328/UndoLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/328/UndoLog.java\nindex c53a066f371..b425e21135a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/328/UndoLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/328/UndoLog.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.engine;\n \n import java.util.ArrayList;\n@@ -18,133 +19,133 @@ import org.h2.util.Utils;\n  */\n public class UndoLog {\n \n-    private final Database database;\n-    private final ArrayList<Long> storedEntriesPos = Utils.newSmallArrayList();\n-    private final ArrayList<UndoLogRecord> records = Utils.newSmallArrayList();\n-    private FileStore file;\n-    private Data rowBuff;\n-    private int memoryUndo;\n-    private int storedEntries;\n-    private HashMap<Integer, Table> tables;\n+  private final Database database;\n+  private final ArrayList<Long> storedEntriesPos = Utils.newSmallArrayList();\n+  private final ArrayList<UndoLogRecord> records = Utils.newSmallArrayList();\n+  private FileStore file;\n+  private Data rowBuff;\n+  private int memoryUndo;\n+  private int storedEntries;\n+  private HashMap<Integer, Table> tables;\n \n-    /**\n-     * Create a new undo log for the given session.\n-     *\n-     * @param database the database\n-     */\n+  /**\n+   * Create a new undo log for the given session.\n+   *\n+   * @param database the database\n+   */\n //<<<<<<< HEAD\n //    UndoLog(Session session) {\n //        this.database = session.getDatabase();\n //        //\u9ed8\u8ba4\u662ftrue\uff0c\u901a\u8fc7prop.setProperty(\"LARGE_TRANSACTIONS\", \"false\")\u8bbe\u4e3afalse\n //        largeTransactions = database.getSettings().largeTransactions;\n //=======\n-    UndoLog(Database database) {\n-        this.database = database;\n-    }\n+  UndoLog(Database database) {\n+    this.database = database;\n+  }\n \n-    /**\n-     * Get the number of active rows in this undo log.\n-     *\n-     * @return the number of rows\n-     */\n-    int size() {\n-        return storedEntries + records.size();\n-    }\n+  /**\n+   * Get the number of active rows in this undo log.\n+   *\n+   * @return the number of rows\n+   */\n+  int size() {\n+    return storedEntries + records.size();\n+  }\n \n-    /**\n-     * Clear the undo log. This method is called after the transaction is\n-     * committed.\n-     */\n-    void clear() {\n-        records.clear();\n-        storedEntries = 0;\n-        storedEntriesPos.clear();\n-        memoryUndo = 0;\n-        if (file != null) {\n-            file.closeAndDeleteSilently();\n-            file = null;\n-            rowBuff = null;\n-        }\n+  /**\n+   * Clear the undo log. This method is called after the transaction is\n+   * committed.\n+   */\n+  void clear() {\n+    records.clear();\n+    storedEntries = 0;\n+    storedEntriesPos.clear();\n+    memoryUndo = 0;\n+    if (file != null) {\n+      file.closeAndDeleteSilently();\n+      file = null;\n+      rowBuff = null;\n     }\n+  }\n \n-    /**\n-     * Get the last record and remove it from the list of operations.\n-     *\n-     * @return the last record\n-     */\n-    public UndoLogRecord getLast() { //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n-        int i = records.size() - 1;\n-        if (i < 0 && storedEntries > 0) {\n-            int last = storedEntriesPos.size() - 1;\n-            long pos = storedEntriesPos.remove(last);\n-            long end = file.length();\n-            int bufferLength = (int) (end - pos);\n-            Data buff = Data.create(database, bufferLength, true);\n-            file.seek(pos);\n-            file.readFully(buff.getBytes(), 0, bufferLength);\n-            while (buff.length() < bufferLength) {\n-                UndoLogRecord e = UndoLogRecord.loadFromBuffer(buff, this);\n-                records.add(e);\n-                memoryUndo++;\n-            }\n-            storedEntries -= records.size();\n-            file.setLength(pos);\n-            file.seek(pos);\n-        }\n-        i = records.size() - 1;\n-        UndoLogRecord entry = records.get(i);\n-        if (entry.isStored()) {\n-            int start = Math.max(0, i - database.getMaxMemoryUndo() / 2);\n-            UndoLogRecord first = null;\n-            for (int j = start; j <= i; j++) {\n-                UndoLogRecord e = records.get(j);\n-                if (e.isStored()) {\n-                    e.load(rowBuff, file, this);\n-                    memoryUndo++;\n-                    if (first == null) {\n-                        first = e;\n-                    }\n-                }\n-            }\n-            for (int k = 0; k < i; k++) {\n-                UndoLogRecord e = records.get(k);\n-                e.invalidatePos();\n-            }\n-            seek(first.getFilePos());\n+  /**\n+   * Get the last record and remove it from the list of operations.\n+   *\n+   * @return the last record\n+   */\n+  public UndoLogRecord getLast() { //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n+    int i = records.size() - 1;\n+    if (i < 0 && storedEntries > 0) {\n+      int last = storedEntriesPos.size() - 1;\n+      long pos = storedEntriesPos.remove(last);\n+      long end = file.length();\n+      int bufferLength = (int) (end - pos);\n+      Data buff = Data.create(database, bufferLength, true);\n+      file.seek(pos);\n+      file.readFully(buff.getBytes(), 0, bufferLength);\n+      while (buff.length() < bufferLength) {\n+        UndoLogRecord e = UndoLogRecord.loadFromBuffer(buff, this);\n+        records.add(e);\n+        memoryUndo++;\n+      }\n+      storedEntries -= records.size();\n+      file.setLength(pos);\n+      file.seek(pos);\n+    }\n+    i = records.size() - 1;\n+    UndoLogRecord entry = records.get(i);\n+    if (entry.isStored()) {\n+      int start = Math.max(0, i - database.getMaxMemoryUndo() / 2);\n+      UndoLogRecord first = null;\n+      for (int j = start; j <= i; j++) {\n+        UndoLogRecord e = records.get(j);\n+        if (e.isStored()) {\n+          e.load(rowBuff, file, this);\n+          memoryUndo++;\n+          if (first == null) {\n+            first = e;\n+          }\n         }\n-        return entry;\n+      }\n+      for (int k = 0; k < i; k++) {\n+        UndoLogRecord e = records.get(k);\n+        e.invalidatePos();\n+      }\n+      seek(first.getFilePos());\n     }\n+    return entry;\n+  }\n \n-    /**\n-     * Go to the right position in the file.\n-     *\n-     * @param filePos the position in the file\n-     */\n-    void seek(long filePos) {\n-        file.seek(filePos * Constants.FILE_BLOCK_SIZE);\n-    }\n+  /**\n+   * Go to the right position in the file.\n+   *\n+   * @param filePos the position in the file\n+   */\n+  void seek(long filePos) {\n+    file.seek(filePos * Constants.FILE_BLOCK_SIZE);\n+  }\n \n-    /**\n-     * Remove the last record from the list of operations.\n-     */\n+  /**\n+   * Remove the last record from the list of operations.\n+   */\n //<<<<<<< HEAD\n //    void removeLast(boolean trimToSize) { //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n //=======\n-    void removeLast() {\n-        int i = records.size() - 1;\n-        UndoLogRecord r = records.remove(i);\n-        if (!r.isStored()) {\n-            memoryUndo--;\n-        }\n+  void removeLast() {\n+    int i = records.size() - 1;\n+    UndoLogRecord r = records.remove(i);\n+    if (!r.isStored()) {\n+      memoryUndo--;\n     }\n+  }\n \n-    /**\n-     * Append an undo log entry to the log.\n-     *\n-     * @param entry the entry\n-     */\n-    void add(UndoLogRecord entry) {\n-        records.add(entry);\n+  /**\n+   * Append an undo log entry to the log.\n+   *\n+   * @param entry the entry\n+   */\n+  void add(UndoLogRecord entry) {\n+    records.add(entry);\n //<<<<<<< HEAD\n //        if (largeTransactions) {\n //            memoryUndo++;\n@@ -197,61 +198,61 @@ public class UndoLog {\n //                } else {\n //                    saveIfPossible(entry, rowBuff);\n //=======\n-        memoryUndo++;\n-        if (memoryUndo > database.getMaxMemoryUndo() &&\n-                database.isPersistent() &&\n-                !database.isMVStore()) {\n-            if (file == null) {\n-                String fileName = database.createTempFile();\n-                file = database.openFile(fileName, \"rw\", false);\n-                file.autoDelete();\n-                file.setCheckedWriting(false);\n-                file.setLength(FileStore.HEADER_LENGTH);\n-            }\n-            Data buff = Data.create(database, Constants.DEFAULT_PAGE_SIZE, true);\n-            for (int i = 0; i < records.size(); i++) {\n-                UndoLogRecord r = records.get(i);\n-                buff.checkCapacity(Constants.DEFAULT_PAGE_SIZE);\n-                r.append(buff, this);\n-                if (i == records.size() - 1 || buff.length() > Constants.UNDO_BLOCK_SIZE) {\n-                    storedEntriesPos.add(file.getFilePointer());\n-                    file.write(buff.getBytes(), 0, buff.length());\n-                    buff.reset();\n-                }\n-            }\n-            storedEntries += records.size();\n-            memoryUndo = 0;\n-            records.clear();\n+    memoryUndo++;\n+    if (memoryUndo > database.getMaxMemoryUndo() &&\n+        database.isPersistent() &&\n+        !database.isMVStore()) {\n+      if (file == null) {\n+        String fileName = database.createTempFile();\n+        file = database.openFile(fileName, \"rw\", false);\n+        file.autoDelete();\n+        file.setCheckedWriting(false);\n+        file.setLength(FileStore.HEADER_LENGTH);\n+      }\n+      Data buff = Data.create(database, Constants.DEFAULT_PAGE_SIZE, true);\n+      for (int i = 0; i < records.size(); i++) {\n+        UndoLogRecord r = records.get(i);\n+        buff.checkCapacity(Constants.DEFAULT_PAGE_SIZE);\n+        r.append(buff, this);\n+        if (i == records.size() - 1 || buff.length() > Constants.UNDO_BLOCK_SIZE) {\n+          storedEntriesPos.add(file.getFilePointer());\n+          file.write(buff.getBytes(), 0, buff.length());\n+          buff.reset();\n         }\n+      }\n+      storedEntries += records.size();\n+      memoryUndo = 0;\n+      records.clear();\n     }\n+  }\n \n-    /**\n-     * Get the table id for this undo log. If the table is not registered yet,\n-     * this is done as well.\n-     *\n-     * @param table the table\n-     * @return the id\n-     */\n-    int getTableId(Table table) {\n-        int id = table.getId();\n-        if (tables == null) {\n-            tables = new HashMap<>();\n-        }\n-        // need to overwrite the old entry, because the old object\n-        // might be deleted in the meantime\n-        tables.put(id, table);\n-        return id;\n+  /**\n+   * Get the table id for this undo log. If the table is not registered yet,\n+   * this is done as well.\n+   *\n+   * @param table the table\n+   * @return the id\n+   */\n+  int getTableId(Table table) {\n+    int id = table.getId();\n+    if (tables == null) {\n+      tables = new HashMap<>();\n     }\n+    // need to overwrite the old entry, because the old object\n+    // might be deleted in the meantime\n+    tables.put(id, table);\n+    return id;\n+  }\n \n-    /**\n-     * Get the table for this id. The table must be registered for this undo log\n-     * first by calling getTableId.\n-     *\n-     * @param id the table id\n-     * @return the table object\n-     */\n-    Table getTable(int id) {\n-        return tables.get(id);\n-    }\n+  /**\n+   * Get the table for this id. The table must be registered for this undo log\n+   * first by calling getTableId.\n+   *\n+   * @param id the table id\n+   * @return the table object\n+   */\n+  Table getTable(int id) {\n+    return tables.get(id);\n+  }\n \n }\n",
            "diff_size": 178
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "83",
                    "column": "38",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/328/UndoLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/328/UndoLog.java\nindex c53a066f371..a53aed03fd5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/328/UndoLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/328/UndoLog.java\n@@ -7,7 +7,6 @@ package org.h2.engine;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n-\n import org.h2.store.Data;\n import org.h2.store.FileStore;\n import org.h2.table.Table;\n@@ -16,6 +15,8 @@ import org.h2.util.Utils;\n /**\n  * Each session keeps a undo log if rollback is required.\n  */\n+\n+\n public class UndoLog {\n \n     private final Database database;\n@@ -38,6 +39,7 @@ public class UndoLog {\n //        //\u9ed8\u8ba4\u662ftrue\uff0c\u901a\u8fc7prop.setProperty(\"LARGE_TRANSACTIONS\", \"false\")\u8bbe\u4e3afalse\n //        largeTransactions = database.getSettings().largeTransactions;\n //=======\n+\n     UndoLog(Database database) {\n         this.database = database;\n     }\n@@ -47,6 +49,8 @@ public class UndoLog {\n      *\n      * @return the number of rows\n      */\n+\n+\n     int size() {\n         return storedEntries + records.size();\n     }\n@@ -55,6 +59,8 @@ public class UndoLog {\n      * Clear the undo log. This method is called after the transaction is\n      * committed.\n      */\n+\n+\n     void clear() {\n         records.clear();\n         storedEntries = 0;\n@@ -72,6 +78,8 @@ public class UndoLog {\n      *\n      * @return the last record\n      */\n+\n+\n     public UndoLogRecord getLast() { //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n         int i = records.size() - 1;\n         if (i < 0 && storedEntries > 0) {\n@@ -120,6 +128,8 @@ public class UndoLog {\n      *\n      * @param filePos the position in the file\n      */\n+\n+\n     void seek(long filePos) {\n         file.seek(filePos * Constants.FILE_BLOCK_SIZE);\n     }\n@@ -130,6 +140,8 @@ public class UndoLog {\n //<<<<<<< HEAD\n //    void removeLast(boolean trimToSize) { //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n //=======\n+\n+\n     void removeLast() {\n         int i = records.size() - 1;\n         UndoLogRecord r = records.remove(i);\n@@ -143,6 +155,8 @@ public class UndoLog {\n      *\n      * @param entry the entry\n      */\n+\n+\n     void add(UndoLogRecord entry) {\n         records.add(entry);\n //<<<<<<< HEAD\n@@ -198,9 +212,8 @@ public class UndoLog {\n //                    saveIfPossible(entry, rowBuff);\n //=======\n         memoryUndo++;\n-        if (memoryUndo > database.getMaxMemoryUndo() &&\n-                database.isPersistent() &&\n-                !database.isMVStore()) {\n+        if (memoryUndo > database.getMaxMemoryUndo() && database.isPersistent()\n+                && !database.isMVStore()) {\n             if (file == null) {\n                 String fileName = database.createTempFile();\n                 file = database.openFile(fileName, \"rw\", false);\n@@ -232,10 +245,12 @@ public class UndoLog {\n      * @param table the table\n      * @return the id\n      */\n+\n+\n     int getTableId(Table table) {\n         int id = table.getId();\n         if (tables == null) {\n-            tables = new HashMap<>();\n+            tables = new HashMap< >();\n         }\n         // need to overwrite the old entry, because the old object\n         // might be deleted in the meantime\n@@ -250,8 +265,10 @@ public class UndoLog {\n      * @param id the table id\n      * @return the table object\n      */\n+\n+\n     Table getTable(int id) {\n         return tables.get(id);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/328/UndoLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/328/UndoLog.java\nindex c53a066f371..887ed66cb85 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/328/UndoLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/328/UndoLog.java\n@@ -72,8 +72,9 @@ public class UndoLog {\n      *\n      * @return the last record\n      */\n-    public UndoLogRecord getLast() { //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n-        int i = records.size() - 1;\n+    public UndoLogRecord getLast() {\n+        //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n+    int i = records.size() - 1;\n         if (i < 0 && storedEntries > 0) {\n             int last = storedEntriesPos.size() - 1;\n             long pos = storedEntriesPos.remove(last);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/328/UndoLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/328/UndoLog.java\nindex c53a066f371..aaf8680d9f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/328/UndoLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/328/UndoLog.java\n@@ -72,8 +72,9 @@ public class UndoLog {\n      *\n      * @return the last record\n      */\n-    public UndoLogRecord getLast() { //\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n-        int i = records.size() - 1;\n+    public UndoLogRecord getLast() {\n+//\u901a\u5e38\u5728rollback\u65f6\u8c03\u7528\n+    int i = records.size() - 1;\n         if (i < 0 && storedEntries > 0) {\n             int last = storedEntriesPos.size() - 1;\n             long pos = storedEntriesPos.remove(last);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}