{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1287",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "76",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1287/CoreStateMachines.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1287/CoreStateMachines.java\nindex 0426a144751..31b29e03b7d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1287/CoreStateMachines.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1287/CoreStateMachines.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.state.machines;\n \n import java.io.IOException;\n@@ -46,157 +47,157 @@ import static java.lang.Math.max;\n \n public class CoreStateMachines\n {\n-    private final ReplicatedTransactionStateMachine replicatedTxStateMachine;\n-\n-    private final ReplicatedTokenStateMachine<Token> labelTokenStateMachine;\n-    private final ReplicatedTokenStateMachine<RelationshipTypeToken> relationshipTypeTokenStateMachine;\n-    private final ReplicatedTokenStateMachine<Token> propertyKeyTokenStateMachine;\n-\n-    private final ReplicatedLockTokenStateMachine replicatedLockTokenStateMachine;\n-    private final ReplicatedIdAllocationStateMachine idAllocationStateMachine;\n-\n-    private final DummyMachine benchmarkMachine;\n-\n-    private final LocalDatabase localDatabase;\n-    private final RecoverConsensusLogIndex consensusLogIndexRecovery;\n-\n-    private final CommandDispatcher dispatcher = new StateMachineCommandDispatcher();\n-    private volatile boolean runningBatch;\n-\n-    CoreStateMachines(\n-            ReplicatedTransactionStateMachine replicatedTxStateMachine,\n-            ReplicatedTokenStateMachine<Token> labelTokenStateMachine,\n-            ReplicatedTokenStateMachine<RelationshipTypeToken> relationshipTypeTokenStateMachine,\n-            ReplicatedTokenStateMachine<Token> propertyKeyTokenStateMachine,\n-            ReplicatedLockTokenStateMachine replicatedLockTokenStateMachine,\n-            ReplicatedIdAllocationStateMachine idAllocationStateMachine,\n-            DummyMachine benchmarkMachine,\n-            LocalDatabase localDatabase,\n-            RecoverConsensusLogIndex consensusLogIndexRecovery )\n-    {\n-        this.replicatedTxStateMachine = replicatedTxStateMachine;\n-        this.labelTokenStateMachine = labelTokenStateMachine;\n-        this.relationshipTypeTokenStateMachine = relationshipTypeTokenStateMachine;\n-        this.propertyKeyTokenStateMachine = propertyKeyTokenStateMachine;\n-        this.replicatedLockTokenStateMachine = replicatedLockTokenStateMachine;\n-        this.idAllocationStateMachine = idAllocationStateMachine;\n-        this.benchmarkMachine = benchmarkMachine;\n-        this.localDatabase = localDatabase;\n-        this.consensusLogIndexRecovery = consensusLogIndexRecovery;\n-    }\n-\n-    public CommandDispatcher commandDispatcher()\n+  private final ReplicatedTransactionStateMachine replicatedTxStateMachine;\n+\n+  private final ReplicatedTokenStateMachine<Token> labelTokenStateMachine;\n+  private final ReplicatedTokenStateMachine<RelationshipTypeToken> relationshipTypeTokenStateMachine;\n+  private final ReplicatedTokenStateMachine<Token> propertyKeyTokenStateMachine;\n+\n+  private final ReplicatedLockTokenStateMachine replicatedLockTokenStateMachine;\n+  private final ReplicatedIdAllocationStateMachine idAllocationStateMachine;\n+\n+  private final DummyMachine benchmarkMachine;\n+\n+  private final LocalDatabase localDatabase;\n+  private final RecoverConsensusLogIndex consensusLogIndexRecovery;\n+\n+  private final CommandDispatcher dispatcher = new StateMachineCommandDispatcher();\n+  private volatile boolean runningBatch;\n+\n+  CoreStateMachines(\n+      ReplicatedTransactionStateMachine replicatedTxStateMachine,\n+      ReplicatedTokenStateMachine<Token> labelTokenStateMachine,\n+      ReplicatedTokenStateMachine<RelationshipTypeToken> relationshipTypeTokenStateMachine,\n+      ReplicatedTokenStateMachine<Token> propertyKeyTokenStateMachine,\n+      ReplicatedLockTokenStateMachine replicatedLockTokenStateMachine,\n+      ReplicatedIdAllocationStateMachine idAllocationStateMachine,\n+      DummyMachine benchmarkMachine,\n+      LocalDatabase localDatabase,\n+      RecoverConsensusLogIndex consensusLogIndexRecovery)\n+  {\n+    this.replicatedTxStateMachine = replicatedTxStateMachine;\n+    this.labelTokenStateMachine = labelTokenStateMachine;\n+    this.relationshipTypeTokenStateMachine = relationshipTypeTokenStateMachine;\n+    this.propertyKeyTokenStateMachine = propertyKeyTokenStateMachine;\n+    this.replicatedLockTokenStateMachine = replicatedLockTokenStateMachine;\n+    this.idAllocationStateMachine = idAllocationStateMachine;\n+    this.benchmarkMachine = benchmarkMachine;\n+    this.localDatabase = localDatabase;\n+    this.consensusLogIndexRecovery = consensusLogIndexRecovery;\n+  }\n+\n+  public CommandDispatcher commandDispatcher()\n+  {\n+    localDatabase.assertHealthy(IllegalStateException.class);\n+    assert !runningBatch;\n+    runningBatch = true;\n+    return dispatcher;\n+  }\n+\n+  public long getLastAppliedIndex()\n+  {\n+    long lastAppliedLockTokenIndex = replicatedLockTokenStateMachine.lastAppliedIndex();\n+    long lastAppliedIdAllocationIndex = idAllocationStateMachine.lastAppliedIndex();\n+    return max(lastAppliedLockTokenIndex, lastAppliedIdAllocationIndex);\n+  }\n+\n+  public void flush() throws IOException\n+  {\n+    assert !runningBatch;\n+\n+    replicatedTxStateMachine.flush();\n+\n+    labelTokenStateMachine.flush();\n+    relationshipTypeTokenStateMachine.flush();\n+    propertyKeyTokenStateMachine.flush();\n+\n+    replicatedLockTokenStateMachine.flush();\n+    idAllocationStateMachine.flush();\n+  }\n+\n+  public void addSnapshots(CoreSnapshot coreSnapshot)\n+  {\n+    assert !runningBatch;\n+\n+    coreSnapshot.add(CoreStateType.ID_ALLOCATION, idAllocationStateMachine.snapshot());\n+    coreSnapshot.add(CoreStateType.LOCK_TOKEN, replicatedLockTokenStateMachine.snapshot());\n+    // transactions and tokens live in the store\n+  }\n+\n+  public void installSnapshots(CoreSnapshot coreSnapshot)\n+  {\n+    assert !runningBatch;\n+\n+    idAllocationStateMachine.installSnapshot(coreSnapshot.get(CoreStateType.ID_ALLOCATION));\n+    replicatedLockTokenStateMachine.installSnapshot(coreSnapshot.get(CoreStateType.LOCK_TOKEN));\n+    // transactions and tokens live in the store\n+  }\n+\n+  public void installCommitProcess(TransactionCommitProcess localCommit)\n+  {\n+    assert !runningBatch;\n+    long lastAppliedIndex = consensusLogIndexRecovery.findLastAppliedIndex();\n+\n+    replicatedTxStateMachine.installCommitProcess(localCommit, lastAppliedIndex);\n+\n+    labelTokenStateMachine.installCommitProcess(localCommit, lastAppliedIndex);\n+    relationshipTypeTokenStateMachine.installCommitProcess(localCommit, lastAppliedIndex);\n+    propertyKeyTokenStateMachine.installCommitProcess(localCommit, lastAppliedIndex);\n+  }\n+\n+  private class StateMachineCommandDispatcher implements CommandDispatcher\n+  {\n+    @Override\n+    public void dispatch(ReplicatedTransaction transaction, long commandIndex, Consumer<Result> callback)\n     {\n-        localDatabase.assertHealthy( IllegalStateException.class );\n-        assert !runningBatch;\n-        runningBatch = true;\n-        return dispatcher;\n+      replicatedTxStateMachine.applyCommand(transaction, commandIndex, callback);\n     }\n \n-    public long getLastAppliedIndex()\n+    @Override\n+    public void dispatch(ReplicatedIdAllocationRequest idRequest, long commandIndex, Consumer<Result> callback)\n     {\n-        long lastAppliedLockTokenIndex = replicatedLockTokenStateMachine.lastAppliedIndex();\n-        long lastAppliedIdAllocationIndex = idAllocationStateMachine.lastAppliedIndex();\n-        return max( lastAppliedLockTokenIndex, lastAppliedIdAllocationIndex );\n+      replicatedTxStateMachine.ensuredApplied();\n+      idAllocationStateMachine.applyCommand(idRequest, commandIndex, callback);\n     }\n \n-    public void flush() throws IOException\n+    @Override\n+    public void dispatch(ReplicatedTokenRequest tokenRequest, long commandIndex, Consumer<Result> callback)\n     {\n-        assert !runningBatch;\n-\n-        replicatedTxStateMachine.flush();\n-\n-        labelTokenStateMachine.flush();\n-        relationshipTypeTokenStateMachine.flush();\n-        propertyKeyTokenStateMachine.flush();\n-\n-        replicatedLockTokenStateMachine.flush();\n-        idAllocationStateMachine.flush();\n-    }\n-\n-    public void addSnapshots( CoreSnapshot coreSnapshot )\n-    {\n-        assert !runningBatch;\n-\n-        coreSnapshot.add( CoreStateType.ID_ALLOCATION, idAllocationStateMachine.snapshot() );\n-        coreSnapshot.add( CoreStateType.LOCK_TOKEN, replicatedLockTokenStateMachine.snapshot() );\n-        // transactions and tokens live in the store\n+      replicatedTxStateMachine.ensuredApplied();\n+      switch (tokenRequest.type())\n+      {\n+        case PROPERTY:\n+          propertyKeyTokenStateMachine.applyCommand(tokenRequest, commandIndex, callback);\n+          break;\n+        case RELATIONSHIP:\n+          relationshipTypeTokenStateMachine.applyCommand(tokenRequest, commandIndex, callback);\n+          break;\n+        case LABEL:\n+          labelTokenStateMachine.applyCommand(tokenRequest, commandIndex, callback);\n+          break;\n+        default:\n+          throw new IllegalStateException();\n+      }\n     }\n \n-    public void installSnapshots( CoreSnapshot coreSnapshot )\n+    @Override\n+    public void dispatch(ReplicatedLockTokenRequest lockRequest, long commandIndex, Consumer<Result> callback)\n     {\n-        assert !runningBatch;\n-\n-        idAllocationStateMachine.installSnapshot( coreSnapshot.get( CoreStateType.ID_ALLOCATION ) );\n-        replicatedLockTokenStateMachine.installSnapshot( coreSnapshot.get( CoreStateType.LOCK_TOKEN ) );\n-        // transactions and tokens live in the store\n+      replicatedTxStateMachine.ensuredApplied();\n+      replicatedLockTokenStateMachine.applyCommand(lockRequest, commandIndex, callback);\n     }\n \n-    public void installCommitProcess( TransactionCommitProcess localCommit )\n+    @Override\n+    public void dispatch(DummyRequest dummyRequest, long commandIndex, Consumer<Result> callback)\n     {\n-        assert !runningBatch;\n-        long lastAppliedIndex = consensusLogIndexRecovery.findLastAppliedIndex();\n-\n-        replicatedTxStateMachine.installCommitProcess( localCommit, lastAppliedIndex );\n-\n-        labelTokenStateMachine.installCommitProcess( localCommit, lastAppliedIndex );\n-        relationshipTypeTokenStateMachine.installCommitProcess( localCommit, lastAppliedIndex );\n-        propertyKeyTokenStateMachine.installCommitProcess( localCommit, lastAppliedIndex );\n+      benchmarkMachine.applyCommand(dummyRequest, commandIndex, callback);\n     }\n \n-    private class StateMachineCommandDispatcher implements CommandDispatcher\n+    @Override\n+    public void close()\n     {\n-        @Override\n-        public void dispatch( ReplicatedTransaction transaction, long commandIndex, Consumer<Result> callback )\n-        {\n-            replicatedTxStateMachine.applyCommand( transaction, commandIndex, callback );\n-        }\n-\n-        @Override\n-        public void dispatch( ReplicatedIdAllocationRequest idRequest, long commandIndex, Consumer<Result> callback )\n-        {\n-            replicatedTxStateMachine.ensuredApplied();\n-            idAllocationStateMachine.applyCommand( idRequest, commandIndex, callback );\n-        }\n-\n-        @Override\n-        public void dispatch( ReplicatedTokenRequest tokenRequest, long commandIndex, Consumer<Result> callback )\n-        {\n-            replicatedTxStateMachine.ensuredApplied();\n-            switch ( tokenRequest.type() )\n-            {\n-            case PROPERTY:\n-                propertyKeyTokenStateMachine.applyCommand( tokenRequest, commandIndex, callback );\n-                break;\n-            case RELATIONSHIP:\n-                relationshipTypeTokenStateMachine.applyCommand( tokenRequest, commandIndex, callback );\n-                break;\n-            case LABEL:\n-                labelTokenStateMachine.applyCommand( tokenRequest, commandIndex, callback );\n-                break;\n-            default:\n-                throw new IllegalStateException();\n-            }\n-        }\n-\n-        @Override\n-        public void dispatch( ReplicatedLockTokenRequest lockRequest, long commandIndex, Consumer<Result> callback )\n-        {\n-            replicatedTxStateMachine.ensuredApplied();\n-            replicatedLockTokenStateMachine.applyCommand( lockRequest, commandIndex, callback );\n-        }\n-\n-        @Override\n-        public void dispatch( DummyRequest dummyRequest, long commandIndex, Consumer<Result> callback )\n-        {\n-            benchmarkMachine.applyCommand( dummyRequest, commandIndex, callback );\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            runningBatch = false;\n-            replicatedTxStateMachine.ensuredApplied();\n-        }\n+      runningBatch = false;\n+      replicatedTxStateMachine.ensuredApplied();\n     }\n+  }\n }\n",
            "diff_size": 205
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 292).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1287/CoreStateMachines.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1287/CoreStateMachines.java\nindex 0426a144751..67bae960d55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1287/CoreStateMachines.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1287/CoreStateMachines.java\n@@ -63,11 +63,7 @@ public class CoreStateMachines\n     private final CommandDispatcher dispatcher = new StateMachineCommandDispatcher();\n     private volatile boolean runningBatch;\n \n-    CoreStateMachines(\n-            ReplicatedTransactionStateMachine replicatedTxStateMachine,\n-            ReplicatedTokenStateMachine<Token> labelTokenStateMachine,\n-            ReplicatedTokenStateMachine<RelationshipTypeToken> relationshipTypeTokenStateMachine,\n-            ReplicatedTokenStateMachine<Token> propertyKeyTokenStateMachine,\n+    CoreStateMachines( ReplicatedTransactionStateMachine replicatedTxStateMachine, ReplicatedTokenStateMachine<Token> labelTokenStateMachine, ReplicatedTokenStateMachine<RelationshipTypeToken> relationshipTypeTokenStateMachine, ReplicatedTokenStateMachine<Token> propertyKeyTokenStateMachine,\n             ReplicatedLockTokenStateMachine replicatedLockTokenStateMachine,\n             ReplicatedIdAllocationStateMachine idAllocationStateMachine,\n             DummyMachine benchmarkMachine,\n@@ -105,12 +101,10 @@ public class CoreStateMachines\n         assert !runningBatch;\n \n         replicatedTxStateMachine.flush();\n-\n-        labelTokenStateMachine.flush();\n+labelTokenStateMachine.flush();\n         relationshipTypeTokenStateMachine.flush();\n         propertyKeyTokenStateMachine.flush();\n-\n-        replicatedLockTokenStateMachine.flush();\n+replicatedLockTokenStateMachine.flush();\n         idAllocationStateMachine.flush();\n     }\n \n@@ -136,10 +130,8 @@ public class CoreStateMachines\n     {\n         assert !runningBatch;\n         long lastAppliedIndex = consensusLogIndexRecovery.findLastAppliedIndex();\n-\n-        replicatedTxStateMachine.installCommitProcess( localCommit, lastAppliedIndex );\n-\n-        labelTokenStateMachine.installCommitProcess( localCommit, lastAppliedIndex );\n+replicatedTxStateMachine.installCommitProcess( localCommit, lastAppliedIndex );\n+labelTokenStateMachine.installCommitProcess( localCommit, lastAppliedIndex );\n         relationshipTypeTokenStateMachine.installCommitProcess( localCommit, lastAppliedIndex );\n         propertyKeyTokenStateMachine.installCommitProcess( localCommit, lastAppliedIndex );\n     }\n@@ -199,4 +191,4 @@ public class CoreStateMachines\n             replicatedTxStateMachine.ensuredApplied();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}