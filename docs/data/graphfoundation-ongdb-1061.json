{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1061",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "78",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "82",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "99",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "99",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "114",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "121",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "128",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "145",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1061/DbStructureArgumentFormatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1061/DbStructureArgumentFormatter.java\nindex d9ad6fa8654..628bfb80c09 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1061/DbStructureArgumentFormatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1061/DbStructureArgumentFormatter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.dbstructure;\n \n import java.io.IOException;\n@@ -43,124 +44,111 @@ import static org.neo4j.kernel.api.schema.index.SchemaIndexDescriptor.Type.GENER\n \n public enum DbStructureArgumentFormatter implements ArgumentFormatter\n {\n-    INSTANCE;\n+  INSTANCE;\n \n-    private static List<String> IMPORTS = Arrays.asList(\n-            ConstraintDescriptorFactory.class.getCanonicalName(),\n-            UniquenessConstraintDescriptor.class.getCanonicalName(),\n-            RelExistenceConstraintDescriptor.class.getCanonicalName(),\n-            NodeExistenceConstraintDescriptor.class.getCanonicalName(),\n-            NodeKeyConstraintDescriptor.class.getCanonicalName(),\n-            SchemaDescriptor.class.getCanonicalName(),\n-            SchemaDescriptorFactory.class.getCanonicalName(),\n-            SchemaIndexDescriptor.class.getCanonicalName(),\n-            SchemaIndexDescriptorFactory.class.getCanonicalName()\n-    );\n+  private static List<String> IMPORTS = Arrays.asList(\n+      ConstraintDescriptorFactory.class.getCanonicalName(),\n+      UniquenessConstraintDescriptor.class.getCanonicalName(),\n+      RelExistenceConstraintDescriptor.class.getCanonicalName(),\n+      NodeExistenceConstraintDescriptor.class.getCanonicalName(),\n+      NodeKeyConstraintDescriptor.class.getCanonicalName(),\n+      SchemaDescriptor.class.getCanonicalName(),\n+      SchemaDescriptorFactory.class.getCanonicalName(),\n+      SchemaIndexDescriptor.class.getCanonicalName(),\n+      SchemaIndexDescriptorFactory.class.getCanonicalName()\n+  );\n \n-    @Override\n-    public Collection<String> imports()\n-    {\n-        return IMPORTS;\n-    }\n+  @Override\n+  public Collection<String> imports()\n+  {\n+    return IMPORTS;\n+  }\n \n-    @Override\n-    public void formatArgument( Appendable builder, Object arg ) throws IOException\n+  @Override\n+  public void formatArgument(Appendable builder, Object arg) throws IOException\n+  {\n+    if (arg == null)\n     {\n-        if ( arg == null )\n-        {\n-            builder.append( \"null\" );\n-        }\n-        else if ( arg instanceof String )\n-        {\n-            builder.append( '\"' );\n-            Strings.escape( builder, arg.toString() );\n-            builder.append( '\"' );\n-        }\n-        else if ( arg instanceof Long )\n-        {\n-            builder.append( arg.toString() );\n-            builder.append( 'L' );\n-        }\n-        else if ( arg instanceof Integer )\n-        {\n-            builder.append( arg.toString() );\n-        }\n-        else if ( arg instanceof Double )\n-        {\n-            double d = (Double) arg;\n-            if ( Double.isNaN( d ) )\n-            {\n-                builder.append( \"Double.NaN\" );\n-            }\n-            else if ( Double.isInfinite( d ) )\n-            {\n-                builder.append( d < 0 ? \"Double.NEGATIVE_INFINITY\" : \"Double.POSITIVE_INFINITY\" );\n-            }\n-            else\n-            {\n-                builder.append( arg.toString() );\n-                builder.append( 'd' );\n-            }\n-        }\n-        else if ( arg instanceof SchemaIndexDescriptor )\n-        {\n-            SchemaIndexDescriptor descriptor = (SchemaIndexDescriptor) arg;\n-            String className = SchemaIndexDescriptorFactory.class.getSimpleName();\n-            int labelId = descriptor.schema().keyId();\n-            String methodName = descriptor.type() == GENERAL ? \"forLabel\" : \"uniqueForLabel\";\n-            builder.append( format( \"%s.%s( %d, %s )\",\n-                    className, methodName, labelId, asString( descriptor.schema().getPropertyIds() ) ) );\n-        }\n-        else if ( arg instanceof LabelSchemaDescriptor )\n-        {\n-            LabelSchemaDescriptor descriptor = (LabelSchemaDescriptor) arg;\n-            String className = SchemaDescriptorFactory.class.getSimpleName();\n-            int labelId = descriptor.getLabelId();\n-            builder.append( format( \"%s.forLabel( %d, %s )\",\n-                    className, labelId, asString( descriptor.getPropertyIds() ) ) );\n-        }\n-        else if ( arg instanceof UniquenessConstraintDescriptor )\n-        {\n-            UniquenessConstraintDescriptor constraint = (UniquenessConstraintDescriptor) arg;\n-            String className = ConstraintDescriptorFactory.class.getSimpleName();\n-            int labelId = constraint.schema().getLabelId();\n-            builder.append( format( \"%s.uniqueForLabel( %d, %s )\",\n-                    className, labelId, asString( constraint.schema().getPropertyIds() ) ) );\n-        }\n-        else if ( arg instanceof NodeExistenceConstraintDescriptor )\n-        {\n-            NodeExistenceConstraintDescriptor constraint = (NodeExistenceConstraintDescriptor) arg;\n-            String className = ConstraintDescriptorFactory.class.getSimpleName();\n-            int labelId = constraint.schema().getLabelId();\n-            builder.append( format( \"%s.existsForLabel( %d, %s )\",\n-                    className, labelId, asString( constraint.schema().getPropertyIds() ) ) );\n-        }\n-        else if ( arg instanceof RelExistenceConstraintDescriptor )\n-        {\n-            RelationTypeSchemaDescriptor descriptor = ((RelExistenceConstraintDescriptor) arg).schema();\n-            String className = ConstraintDescriptorFactory.class.getSimpleName();\n-            int relTypeId = descriptor.getRelTypeId();\n-            builder.append( format( \"%s.existsForReltype( %d, %s )\",\n-                    className, relTypeId, asString( descriptor.getPropertyIds() ) ) );\n-        }\n-        else if ( arg instanceof NodeKeyConstraintDescriptor )\n-        {\n-            NodeKeyConstraintDescriptor constraint = (NodeKeyConstraintDescriptor) arg;\n-            String className = ConstraintDescriptorFactory.class.getSimpleName();\n-            int labelId = constraint.schema().getLabelId();\n-            builder.append( format( \"%s.nodeKeyForLabel( %d, %s )\",\n-                    className, labelId, asString( constraint.schema().getPropertyIds() ) ) );\n-        }\n-        else\n-        {\n-            throw new IllegalArgumentException(\n-                    format( \"Can't handle argument of type: %s with value: %s\", arg.getClass(), arg ) );\n-        }\n-    }\n-\n-    private String asString( int[] propertyIds )\n+      builder.append(\"null\");\n+    } else if (arg instanceof String)\n+    {\n+      builder.append('\"');\n+      Strings.escape(builder, arg.toString());\n+      builder.append('\"');\n+    } else if (arg instanceof Long)\n+    {\n+      builder.append(arg.toString());\n+      builder.append('L');\n+    } else if (arg instanceof Integer)\n+    {\n+      builder.append(arg.toString());\n+    } else if (arg instanceof Double)\n     {\n-        List<String> strings = Arrays.stream( propertyIds ).mapToObj( i -> \"\" + i ).collect( Collectors.toList() );\n-        return String.join( \", \", strings );\n+      double d = (Double) arg;\n+      if (Double.isNaN(d))\n+      {\n+        builder.append(\"Double.NaN\");\n+      } else if (Double.isInfinite(d))\n+      {\n+        builder.append(d < 0 ? \"Double.NEGATIVE_INFINITY\" : \"Double.POSITIVE_INFINITY\");\n+      } else\n+      {\n+        builder.append(arg.toString());\n+        builder.append('d');\n+      }\n+    } else if (arg instanceof SchemaIndexDescriptor)\n+    {\n+      SchemaIndexDescriptor descriptor = (SchemaIndexDescriptor) arg;\n+      String className = SchemaIndexDescriptorFactory.class.getSimpleName();\n+      int labelId = descriptor.schema().keyId();\n+      String methodName = descriptor.type() == GENERAL ? \"forLabel\" : \"uniqueForLabel\";\n+      builder.append(format(\"%s.%s( %d, %s )\",\n+          className, methodName, labelId, asString(descriptor.schema().getPropertyIds())));\n+    } else if (arg instanceof LabelSchemaDescriptor)\n+    {\n+      LabelSchemaDescriptor descriptor = (LabelSchemaDescriptor) arg;\n+      String className = SchemaDescriptorFactory.class.getSimpleName();\n+      int labelId = descriptor.getLabelId();\n+      builder.append(format(\"%s.forLabel( %d, %s )\",\n+          className, labelId, asString(descriptor.getPropertyIds())));\n+    } else if (arg instanceof UniquenessConstraintDescriptor)\n+    {\n+      UniquenessConstraintDescriptor constraint = (UniquenessConstraintDescriptor) arg;\n+      String className = ConstraintDescriptorFactory.class.getSimpleName();\n+      int labelId = constraint.schema().getLabelId();\n+      builder.append(format(\"%s.uniqueForLabel( %d, %s )\",\n+          className, labelId, asString(constraint.schema().getPropertyIds())));\n+    } else if (arg instanceof NodeExistenceConstraintDescriptor)\n+    {\n+      NodeExistenceConstraintDescriptor constraint = (NodeExistenceConstraintDescriptor) arg;\n+      String className = ConstraintDescriptorFactory.class.getSimpleName();\n+      int labelId = constraint.schema().getLabelId();\n+      builder.append(format(\"%s.existsForLabel( %d, %s )\",\n+          className, labelId, asString(constraint.schema().getPropertyIds())));\n+    } else if (arg instanceof RelExistenceConstraintDescriptor)\n+    {\n+      RelationTypeSchemaDescriptor descriptor = ((RelExistenceConstraintDescriptor) arg).schema();\n+      String className = ConstraintDescriptorFactory.class.getSimpleName();\n+      int relTypeId = descriptor.getRelTypeId();\n+      builder.append(format(\"%s.existsForReltype( %d, %s )\",\n+          className, relTypeId, asString(descriptor.getPropertyIds())));\n+    } else if (arg instanceof NodeKeyConstraintDescriptor)\n+    {\n+      NodeKeyConstraintDescriptor constraint = (NodeKeyConstraintDescriptor) arg;\n+      String className = ConstraintDescriptorFactory.class.getSimpleName();\n+      int labelId = constraint.schema().getLabelId();\n+      builder.append(format(\"%s.nodeKeyForLabel( %d, %s )\",\n+          className, labelId, asString(constraint.schema().getPropertyIds())));\n+    } else\n+    {\n+      throw new IllegalArgumentException(\n+          format(\"Can't handle argument of type: %s with value: %s\", arg.getClass(), arg));\n     }\n+  }\n+\n+  private String asString(int[] propertyIds)\n+  {\n+    List<String> strings = Arrays.stream(propertyIds).mapToObj(i -> \"\" + i).collect(Collectors.toList());\n+    return String.join(\", \", strings);\n+  }\n }\n",
            "diff_size": 181
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 538).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1061/DbStructureArgumentFormatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1061/DbStructureArgumentFormatter.java\nindex d9ad6fa8654..960b3dfde6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1061/DbStructureArgumentFormatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1061/DbStructureArgumentFormatter.java\n@@ -45,17 +45,7 @@ public enum DbStructureArgumentFormatter implements ArgumentFormatter\n {\n     INSTANCE;\n \n-    private static List<String> IMPORTS = Arrays.asList(\n-            ConstraintDescriptorFactory.class.getCanonicalName(),\n-            UniquenessConstraintDescriptor.class.getCanonicalName(),\n-            RelExistenceConstraintDescriptor.class.getCanonicalName(),\n-            NodeExistenceConstraintDescriptor.class.getCanonicalName(),\n-            NodeKeyConstraintDescriptor.class.getCanonicalName(),\n-            SchemaDescriptor.class.getCanonicalName(),\n-            SchemaDescriptorFactory.class.getCanonicalName(),\n-            SchemaIndexDescriptor.class.getCanonicalName(),\n-            SchemaIndexDescriptorFactory.class.getCanonicalName()\n-    );\n+    private static List<String> IMPORTS = Arrays.asList( ConstraintDescriptorFactory.class.getCanonicalName(), UniquenessConstraintDescriptor.class.getCanonicalName(), RelExistenceConstraintDescriptor.class.getCanonicalName(), NodeExistenceConstraintDescriptor.class.getCanonicalName(), NodeKeyConstraintDescriptor.class.getCanonicalName(), SchemaDescriptor.class.getCanonicalName(), SchemaDescriptorFactory.class.getCanonicalName(), SchemaIndexDescriptor.class.getCanonicalName(), SchemaIndexDescriptorFactory.class.getCanonicalName() );\n \n     @Override\n     public Collection<String> imports()\n@@ -153,9 +143,8 @@ public enum DbStructureArgumentFormatter implements ArgumentFormatter\n         }\n         else\n         {\n-            throw new IllegalArgumentException(\n-                    format( \"Can't handle argument of type: %s with value: %s\", arg.getClass(), arg ) );\n-        }\n+            throw new IllegalArgumentException( format( \"Can't handle argument of type: %s with value: %s\", arg.getClass(), arg ) );\n+    }\n     }\n \n     private String asString( int[] propertyIds )\n@@ -163,4 +152,4 @@ public enum DbStructureArgumentFormatter implements ArgumentFormatter\n         List<String> strings = Arrays.stream( propertyIds ).mapToObj( i -> \"\" + i ).collect( Collectors.toList() );\n         return String.join( \", \", strings );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}