{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "486",
    "information": {
        "errors": [
            {
                "line": "204",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        IllegalNullArgumentException.check(localName, \"localName\");\n        IllegalNullArgumentException.check(prefix, \"prefix\");\n    \tOMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n        if (null != currentNode)\n        {\n            final OMContainer container = AxiomSupport.dynamicDowncastContainer(currentNode);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/486/AxiomFragmentBuilder.java\nindex aa1b755ad0f..662e4972410 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/486/AxiomFragmentBuilder.java\n@@ -201,7 +201,7 @@ public class AxiomFragmentBuilder\n         IllegalNullArgumentException.check(namespaceURI, \"namespaceURI\");\n         IllegalNullArgumentException.check(localName, \"localName\");\n         IllegalNullArgumentException.check(prefix, \"prefix\");\n-    \tOMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n+    OMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n         if (null != currentNode)\n         {\n             final OMContainer container = AxiomSupport.dynamicDowncastContainer(currentNode);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/486/AxiomFragmentBuilder.java\nindex aa1b755ad0f..0aa36504ccd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/486/AxiomFragmentBuilder.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.bridge.axiom;\n \n import java.net.URI;\n@@ -40,73 +41,63 @@ import org.genxdm.io.DtdAttributeKind;\n import org.genxdm.io.FragmentBuilder;\n \n public class AxiomFragmentBuilder\n-    implements FragmentBuilder<Object>\n-{\n-    \n-    public AxiomFragmentBuilder(final OMFactory factory, boolean ignoreComments)\n-    {\n+    implements FragmentBuilder<Object> {\n+\n+    public AxiomFragmentBuilder(final OMFactory factory, boolean ignoreComments) {\n         this.factory = PreCondition.assertNotNull(factory, \"factory\");\n         this.ignoreComments = ignoreComments;\n     }\n \n-    public void attribute(String namespaceURI, String localName, String prefix, String value, DtdAttributeKind type)\n-        throws GenXDMException\n-    {\n+    public void attribute(String namespaceURI, String localName, String prefix, String value,\n+                          DtdAttributeKind type)\n+        throws GenXDMException {\n         PreCondition.assertNotNull(namespaceURI, \"namespaceURI\");\n         PreCondition.assertNotNull(localName, \"localName\");\n         PreCondition.assertNotNull(prefix, \"prefix\");\n         PreCondition.assertNotNull(value, \"value\");\n \n-        if (currentNode != null)\n-        {\n+        if (currentNode != null) {\n             final OMElement element = AxiomSupport.dynamicDowncastElement(currentNode);\n             OMNamespace namespace = element.findNamespace(namespaceURI, prefix);\n-            if (namespace == null)\n+            if (namespace == null) {\n                 namespace = factory.createOMNamespace(namespaceURI, prefix);\n+            }\n             final OMAttribute attribute = factory.createOMAttribute(localName, namespace, value);\n-            if (type != null)\n+            if (type != null) {\n                 attribute.setAttributeType(type.toString());\n-            if ( (type == DtdAttributeKind.ID) ||\n+            }\n+            if ((type == DtdAttributeKind.ID) ||\n                 (namespaceURI.equals(XMLConstants.XML_NS_URI) &&\n-                 localName.equals(\"id\")) )\n-            {\n+                    localName.equals(\"id\"))) {\n                 Map<String, OMElement> ids = AxiomSupport.getIdMap(documentNode);\n                 if (ids != null) // only null if we don't have a document.  *shrug*\n+                {\n                     ids.put(value, element);\n+                }\n             }\n-                \n+\n             element.addAttribute(attribute);\n             nodeId = AxiomModel.attributeIdentity(attribute);\n-        }\n-        else\n-        {\n+        } else {\n             final OMNamespace namespace = factory.createOMNamespace(namespaceURI, prefix);\n             nodes.add(factory.createOMAttribute(localName, namespace, value));\n         }\n     }\n \n     public void comment(String value)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         prolog();\n-        if (!ignoreComments)\n-        {\n-            if (null != currentNode)\n-            {\n+        if (!ignoreComments) {\n+            if (null != currentNode) {\n                 final OMContainer container = AxiomSupport.dynamicDowncastContainer(currentNode);\n-                if (null != container)\n-                {\n+                if (null != container) {\n                     final OMComment comment = factory.createOMComment(container, value);\n                     container.addChild(comment);\n                     currentNode = comment;\n-                }\n-                else\n-                {\n+                } else {\n                     throw new IllegalStateException(\"comment\");\n                 }\n-            }\n-            else\n-            {\n+            } else {\n                 // Axiom won't let use create a comment without a parent\n                 // node so we have to put it inside a document.\n                 final OMDocument document = factory.createOMDocument();\n@@ -117,215 +108,183 @@ public class AxiomFragmentBuilder\n     }\n \n     public void endDocument()\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         epilog();\n         documentNode = null;\n-        if (level > 0)\n+        if (level > 0) {\n             throw new IllegalStateException(\"Document ended with unclosed elements.\");\n+        }\n     }\n \n     public void endElement()\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         epilog();\n     }\n \n     public void namespace(String prefix, String namespaceURI)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         String ns = (namespaceURI == null) ? XMLConstants.NULL_NS_URI : namespaceURI;\n-        \n-        if (currentNode != null)\n-        {\n-            final OMElement parent = (OMElement)currentNode;\n-            if (prefix.equals(XMLConstants.DEFAULT_NS_PREFIX))\n+\n+        if (currentNode != null) {\n+            final OMElement parent = (OMElement) currentNode;\n+            if (prefix.equals(XMLConstants.DEFAULT_NS_PREFIX)) {\n                 parent.declareDefaultNamespace(ns);\n-            else\n+            } else {\n                 parent.declareNamespace(ns, prefix);\n-        }\n-        else\n-        {\n+            }\n+        } else {\n             nodes.add(factory.createOMNamespace(ns, prefix));\n         }\n     }\n \n     public void processingInstruction(String target, String data)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         prolog();\n-        if (null != currentNode)\n-        {\n+        if (null != currentNode) {\n             final OMContainer container = AxiomSupport.dynamicDowncastContainer(currentNode);\n-            if (null != container)\n-            {\n-                final OMProcessingInstruction pi = factory.createOMProcessingInstruction(container, target, data);\n+            if (null != container) {\n+                final OMProcessingInstruction pi =\n+                    factory.createOMProcessingInstruction(container, target, data);\n                 // Note AXIOM bug: https://issues.apache.org/jira/browse/AXIOM-359\n                 pi.setValue(data);\n                 container.addChild(pi);\n                 currentNode = pi;\n-            }\n-            else\n-            {\n+            } else {\n                 throw new IllegalStateException(\"processingInstruction\");\n             }\n-        }\n-        else\n-        {\n+        } else {\n             currentNode = factory.createOMProcessingInstruction(null, target, data);\n         }\n         epilog();\n     }\n \n     public void startDocument(final URI documentURI, final String docTypeDecl)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         prolog();\n-        if (null == currentNode)\n-        {\n+        if (null == currentNode) {\n             documentNode = factory.createOMDocument();\n             AxiomProcessingContext.docURIs.put(documentNode, documentURI);\n             currentNode = documentNode;\n             docNode = documentNode;\n-        }\n-        else\n-        {\n-            throw new IllegalStateException(\"A document cannot be contained by a document or element.\");\n+        } else {\n+            throw new IllegalStateException(\n+                \"A document cannot be contained by a document or element.\");\n         }\n     }\n \n     public void startElement(String namespaceURI, String localName, String prefix)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         prolog();\n         IllegalNullArgumentException.check(namespaceURI, \"namespaceURI\");\n         IllegalNullArgumentException.check(localName, \"localName\");\n         IllegalNullArgumentException.check(prefix, \"prefix\");\n-    \tOMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n-        if (null != currentNode)\n-        {\n+        OMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n+        if (null != currentNode) {\n             final OMContainer container = AxiomSupport.dynamicDowncastContainer(currentNode);\n-            if (null != container)\n-            {\n+            if (null != container) {\n                 final OMElement element = factory.createOMElement(localName, ns, container);\n                 currentNode = element;\n-            }\n-            else\n-            {\n+            } else {\n                 throw new IllegalStateException(\"startElement\");\n             }\n-        }\n-        else\n-        {\n+        } else {\n             final OMElement element = factory.createOMElement(localName, ns);\n-            \n+\n             currentNode = element;\n         }\n         nodeId = currentNode;\n     }\n \n     public void text(String data)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         prolog();\n-        if (currentNode != null)\n-        {\n+        if (currentNode != null) {\n             final OMContainer container = AxiomSupport.dynamicDowncastContainer(currentNode);\n-            if (container != null)\n-            {\n+            if (container != null) {\n                 final OMText text = factory.createOMText(data);\n                 container.addChild(text);\n                 currentNode = text;\n-            }\n-            else\n-            {\n+            } else {\n                 throw new IllegalStateException();\n             }\n-        }\n-        else\n-        {\n+        } else {\n             currentNode = factory.createOMText(data);\n         }\n         epilog();\n     }\n \n-    public void close()\n-    {\n+    public void close() {\n         // TODO: implement?\n     }\n \n-    public void flush()\n-    {\n+    public void flush() {\n         // TODO: implement?\n     }\n \n-    public List<Object> getNodes()\n-    {\n+    public List<Object> getNodes() {\n         flush();\n         return nodes;\n     }\n-    \n-    public Object getNode()\n-    {\n-        if (nodes.size() > 0)\n+\n+    public Object getNode() {\n+        if (nodes.size() > 0) {\n             return getNodes().get(0);\n+        }\n         return null;\n     }\n \n-    public void reset()\n-    {\n+    public void reset() {\n         nodes.clear();\n         currentNode = null;\n         documentNode = null;\n         level = 0;\n     }\n-    \n-    public OMFactory getFactory()\n-    {\n+\n+    public OMFactory getFactory() {\n         return factory;\n     }\n-    \n-    public Object lastNodeId()\n-    {\n+\n+    public Object lastNodeId() {\n         return nodeId;\n     }\n-    \n-    public OMDocument docNode()\n-    {\n+\n+    public OMDocument docNode() {\n         return docNode;\n     }\n \n-    private void epilog()\n-    {\n+    private void epilog() {\n         level--;\n-        if (level < 0)\n+        if (level < 0) {\n             throw new IllegalStateException(\"Closed a container that was never opened.\");\n-        if (level == 0)\n-        {\n+        }\n+        if (level == 0) {\n             nodes.add(currentNode);\n             currentNode = null;\n-        }\n-        else\n-        {\n+        } else {\n             final OMContainer parentNode = AxiomSupport.getParent(currentNode);\n-            if (null != parentNode)\n-            {\n+            if (null != parentNode) {\n                 currentNode = parentNode;\n             }\n         }\n     }\n \n-    private void prolog()\n-    {\n+    private void prolog() {\n         level++;\n     }\n-    \n+\n     protected int level;\n+\n     protected final OMFactory factory;\n+\n     protected ArrayList<Object> nodes = new ArrayList<Object>();\n+\n     protected Object currentNode;\n+\n     protected OMDocument docNode;\n+\n     protected Object nodeId;\n+\n     protected OMDocument documentNode;\n+\n     protected boolean ignoreComments;\n }\n",
            "diff_size": 144
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/486/AxiomFragmentBuilder.java\nindex aa1b755ad0f..d5a70490e3e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/486/AxiomFragmentBuilder.java\n@@ -66,16 +66,14 @@ public class AxiomFragmentBuilder\n             final OMAttribute attribute = factory.createOMAttribute(localName, namespace, value);\n             if (type != null)\n                 attribute.setAttributeType(type.toString());\n-            if ( (type == DtdAttributeKind.ID) ||\n-                (namespaceURI.equals(XMLConstants.XML_NS_URI) &&\n+            if ( (type == DtdAttributeKind.ID) || (namespaceURI.equals(XMLConstants.XML_NS_URI) &&\n                  localName.equals(\"id\")) )\n-            {\n+{\n                 Map<String, OMElement> ids = AxiomSupport.getIdMap(documentNode);\n                 if (ids != null) // only null if we don't have a document.  *shrug*\n                     ids.put(value, element);\n-            }\n-                \n-            element.addAttribute(attribute);\n+    }\n+element.addAttribute(attribute);\n             nodeId = AxiomModel.attributeIdentity(attribute);\n         }\n         else\n@@ -135,9 +133,8 @@ public class AxiomFragmentBuilder\n         throws GenXDMException\n     {\n         String ns = (namespaceURI == null) ? XMLConstants.NULL_NS_URI : namespaceURI;\n-        \n-        if (currentNode != null)\n-        {\n+if (currentNode != null)\n+{\n             final OMElement parent = (OMElement)currentNode;\n             if (prefix.equals(XMLConstants.DEFAULT_NS_PREFIX))\n                 parent.declareDefaultNamespace(ns);\n@@ -201,8 +198,8 @@ public class AxiomFragmentBuilder\n         IllegalNullArgumentException.check(namespaceURI, \"namespaceURI\");\n         IllegalNullArgumentException.check(localName, \"localName\");\n         IllegalNullArgumentException.check(prefix, \"prefix\");\n-    \tOMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n-        if (null != currentNode)\n+OMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n+if (null != currentNode)\n         {\n             final OMContainer container = AxiomSupport.dynamicDowncastContainer(currentNode);\n             if (null != container)\n@@ -220,7 +217,7 @@ public class AxiomFragmentBuilder\n             final OMElement element = factory.createOMElement(localName, ns);\n             \n             currentNode = element;\n-        }\n+    }\n         nodeId = currentNode;\n     }\n \n@@ -328,4 +325,4 @@ public class AxiomFragmentBuilder\n     protected Object nodeId;\n     protected OMDocument documentNode;\n     protected boolean ignoreComments;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/486/AxiomFragmentBuilder.java\nindex aa1b755ad0f..ef55ed03ce9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/486/AxiomFragmentBuilder.java\n@@ -20,9 +20,7 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.WeakHashMap;\n-\n import javax.xml.XMLConstants;\n-\n import org.apache.axiom.om.OMAttribute;\n import org.apache.axiom.om.OMComment;\n import org.apache.axiom.om.OMContainer;\n@@ -39,10 +37,8 @@ import org.genxdm.exceptions.PreCondition;\n import org.genxdm.io.DtdAttributeKind;\n import org.genxdm.io.FragmentBuilder;\n \n-public class AxiomFragmentBuilder\n-    implements FragmentBuilder<Object>\n+public class AxiomFragmentBuilder implements FragmentBuilder<Object>\n {\n-    \n     public AxiomFragmentBuilder(final OMFactory factory, boolean ignoreComments)\n     {\n         this.factory = PreCondition.assertNotNull(factory, \"factory\");\n@@ -56,25 +52,22 @@ public class AxiomFragmentBuilder\n         PreCondition.assertNotNull(localName, \"localName\");\n         PreCondition.assertNotNull(prefix, \"prefix\");\n         PreCondition.assertNotNull(value, \"value\");\n-\n         if (currentNode != null)\n         {\n             final OMElement element = AxiomSupport.dynamicDowncastElement(currentNode);\n             OMNamespace namespace = element.findNamespace(namespaceURI, prefix);\n             if (namespace == null)\n                 namespace = factory.createOMNamespace(namespaceURI, prefix);\n+\n             final OMAttribute attribute = factory.createOMAttribute(localName, namespace, value);\n             if (type != null)\n                 attribute.setAttributeType(type.toString());\n-            if ( (type == DtdAttributeKind.ID) ||\n-                (namespaceURI.equals(XMLConstants.XML_NS_URI) &&\n-                 localName.equals(\"id\")) )\n+            if ( (type == DtdAttributeKind.ID) || (namespaceURI.equals(XMLConstants.XML_NS_URI) && localName.equals(\"id\")))\n             {\n                 Map<String, OMElement> ids = AxiomSupport.getIdMap(documentNode);\n                 if (ids != null) // only null if we don't have a document.  *shrug*\n                     ids.put(value, element);\n             }\n-                \n             element.addAttribute(attribute);\n             nodeId = AxiomModel.attributeIdentity(attribute);\n         }\n@@ -135,7 +128,6 @@ public class AxiomFragmentBuilder\n         throws GenXDMException\n     {\n         String ns = (namespaceURI == null) ? XMLConstants.NULL_NS_URI : namespaceURI;\n-        \n         if (currentNode != null)\n         {\n             final OMElement parent = (OMElement)currentNode;\n@@ -201,7 +193,7 @@ public class AxiomFragmentBuilder\n         IllegalNullArgumentException.check(namespaceURI, \"namespaceURI\");\n         IllegalNullArgumentException.check(localName, \"localName\");\n         IllegalNullArgumentException.check(prefix, \"prefix\");\n-    \tOMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n+        OMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n         if (null != currentNode)\n         {\n             final OMContainer container = AxiomSupport.dynamicDowncastContainer(currentNode);\n@@ -218,7 +210,6 @@ public class AxiomFragmentBuilder\n         else\n         {\n             final OMElement element = factory.createOMElement(localName, ns);\n-            \n             currentNode = element;\n         }\n         nodeId = currentNode;\n@@ -252,11 +243,15 @@ public class AxiomFragmentBuilder\n     public void close()\n     {\n         // TODO: implement?\n+\n+\n     }\n \n     public void flush()\n     {\n         // TODO: implement?\n+\n+\n     }\n \n     public List<Object> getNodes()\n@@ -264,7 +259,7 @@ public class AxiomFragmentBuilder\n         flush();\n         return nodes;\n     }\n-    \n+\n     public Object getNode()\n     {\n         if (nodes.size() > 0)\n@@ -279,17 +274,17 @@ public class AxiomFragmentBuilder\n         documentNode = null;\n         level = 0;\n     }\n-    \n+\n     public OMFactory getFactory()\n     {\n         return factory;\n     }\n-    \n+\n     public Object lastNodeId()\n     {\n         return nodeId;\n     }\n-    \n+\n     public OMDocument docNode()\n     {\n         return docNode;\n@@ -319,7 +314,7 @@ public class AxiomFragmentBuilder\n     {\n         level++;\n     }\n-    \n+\n     protected int level;\n     protected final OMFactory factory;\n     protected ArrayList<Object> nodes = new ArrayList<Object>();\n@@ -328,4 +323,4 @@ public class AxiomFragmentBuilder\n     protected Object nodeId;\n     protected OMDocument documentNode;\n     protected boolean ignoreComments;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/486/AxiomFragmentBuilder.java\nindex aa1b755ad0f..662e4972410 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/486/AxiomFragmentBuilder.java\n@@ -201,7 +201,7 @@ public class AxiomFragmentBuilder\n         IllegalNullArgumentException.check(namespaceURI, \"namespaceURI\");\n         IllegalNullArgumentException.check(localName, \"localName\");\n         IllegalNullArgumentException.check(prefix, \"prefix\");\n-    \tOMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n+    OMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n         if (null != currentNode)\n         {\n             final OMContainer container = AxiomSupport.dynamicDowncastContainer(currentNode);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/486/AxiomFragmentBuilder.java\nindex aa1b755ad0f..b8098905f8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/486/AxiomFragmentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/486/AxiomFragmentBuilder.java\n@@ -201,7 +201,7 @@ public class AxiomFragmentBuilder\n         IllegalNullArgumentException.check(namespaceURI, \"namespaceURI\");\n         IllegalNullArgumentException.check(localName, \"localName\");\n         IllegalNullArgumentException.check(prefix, \"prefix\");\n-    \tOMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n+        OMNamespace ns = factory.createOMNamespace(namespaceURI, prefix);\n         if (null != currentNode)\n         {\n             final OMContainer container = AxiomSupport.dynamicDowncastContainer(currentNode);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}