{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "189",
    "information": {
        "errors": [
            {
                "line": "102",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 110).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @Test\n  public void testEmulatorHelperMultipleRunners() throws IOException, InterruptedException, TimeoutException {\n    Process process = EasyMock.createStrictMock(Process.class);\n    InputStream stream = new ByteArrayInputStream(BLOCK_UNTIL.getBytes(Charsets.UTF_8));\n    EmulatorRunner firstRunner = EasyMock.createStrictMock(EmulatorRunner.class);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/189/BaseEmulatorHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/189/BaseEmulatorHelperTest.java\nindex b4b2579f739..8dfd234f898 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/189/BaseEmulatorHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/189/BaseEmulatorHelperTest.java\n@@ -99,7 +99,8 @@ public class BaseEmulatorHelperTest {\n   }\n \n   @Test\n-  public void testEmulatorHelperMultipleRunners() throws IOException, InterruptedException, TimeoutException {\n+  public void testEmulatorHelperMultipleRunners()\n+      throws IOException, InterruptedException, TimeoutException {\n     Process process = EasyMock.createStrictMock(Process.class);\n     InputStream stream = new ByteArrayInputStream(BLOCK_UNTIL.getBytes(Charsets.UTF_8));\n     EmulatorRunner firstRunner = EasyMock.createStrictMock(EmulatorRunner.class);\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/189/BaseEmulatorHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/189/BaseEmulatorHelperTest.java\nindex b4b2579f739..ea140222457 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/189/BaseEmulatorHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/189/BaseEmulatorHelperTest.java\n@@ -119,4 +119,4 @@ public class BaseEmulatorHelperTest {\n     helper.stop(Duration.standardMinutes(1));\n     EasyMock.verify();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'CLASS_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/189/BaseEmulatorHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/189/BaseEmulatorHelperTest.java\nindex b4b2579f739..2c87b3dfc2b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/189/BaseEmulatorHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/189/BaseEmulatorHelperTest.java\n@@ -20,11 +20,9 @@ import com.google.api.client.util.Charsets;\n import com.google.cloud.ServiceOptions;\n import com.google.cloud.testing.BaseEmulatorHelper.EmulatorRunner;\n import com.google.common.collect.ImmutableList;\n-\n import org.easymock.EasyMock;\n import org.joda.time.Duration;\n import org.junit.Test;\n-\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -32,10 +30,10 @@ import java.util.List;\n import java.util.concurrent.TimeoutException;\n import java.util.logging.Logger;\n \n+\n public class BaseEmulatorHelperTest {\n \n   private static final String BLOCK_UNTIL = \"Block until\";\n-\n   private static class TestEmulatorHelper extends BaseEmulatorHelper<ServiceOptions> {\n \n     private final List<EmulatorRunner> runners;\n@@ -75,6 +73,7 @@ public class BaseEmulatorHelperTest {\n     @Override\n     public void reset() throws IOException {\n       // do nothing\n+\n     }\n   }\n \n@@ -91,8 +90,7 @@ public class BaseEmulatorHelperTest {\n     emulatorRunner.waitFor(Duration.standardMinutes(1));\n     EasyMock.expectLastCall().andReturn(0);\n     EasyMock.replay(process, emulatorRunner);\n-    TestEmulatorHelper helper =\n-        new TestEmulatorHelper(ImmutableList.of(emulatorRunner), BLOCK_UNTIL);\n+    TestEmulatorHelper helper = new TestEmulatorHelper(ImmutableList.of(emulatorRunner), BLOCK_UNTIL);\n     helper.start();\n     helper.stop(Duration.standardMinutes(1));\n     EasyMock.verify();\n@@ -113,10 +111,9 @@ public class BaseEmulatorHelperTest {\n     secondRunner.waitFor(Duration.standardMinutes(1));\n     EasyMock.expectLastCall().andReturn(0);\n     EasyMock.replay(process, secondRunner);\n-    TestEmulatorHelper helper =\n-        new TestEmulatorHelper(ImmutableList.of(firstRunner, secondRunner), BLOCK_UNTIL);\n+    TestEmulatorHelper helper = new TestEmulatorHelper(ImmutableList.of(firstRunner, secondRunner), BLOCK_UNTIL);\n     helper.start();\n     helper.stop(Duration.standardMinutes(1));\n     EasyMock.verify();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}