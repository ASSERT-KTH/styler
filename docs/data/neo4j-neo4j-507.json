{
    "project_name": "neo4j-neo4j",
    "error_id": "507",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "88",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/507/ScanOnOpenReadOnlyIdGeneratorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/507/ScanOnOpenReadOnlyIdGeneratorFactory.java\nindex 8ef1a27acf3..77b006a32af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/507/ScanOnOpenReadOnlyIdGeneratorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/507/ScanOnOpenReadOnlyIdGeneratorFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.id;\n \n import org.eclipse.collections.api.set.ImmutableSet;\n@@ -41,46 +42,46 @@ import org.neo4j.io.pagecache.tracing.cursor.PageCursorTracer;\n  */\n public class ScanOnOpenReadOnlyIdGeneratorFactory implements IdGeneratorFactory\n {\n-    private final EnumMap<IdType,ReadOnlyHighIdGenerator> idGenerators = new EnumMap<>( IdType.class );\n+    private final EnumMap<IdType, ReadOnlyHighIdGenerator> idGenerators = new EnumMap<>(IdType.class);\n \n     @Override\n-    public IdGenerator open( PageCache pageCache, Path filename, IdType idType, LongSupplier highIdScanner, long maxId, boolean readOnly, Config config,\n-            PageCursorTracer cursorTracer, ImmutableSet<OpenOption> openOptions )\n+    public IdGenerator open(PageCache pageCache, Path filename, IdType idType, LongSupplier highIdScanner, long maxId, boolean readOnly, Config config,\n+                            PageCursorTracer cursorTracer, ImmutableSet<OpenOption> openOptions)\n     {\n         long highId = highIdScanner.getAsLong();\n-        ReadOnlyHighIdGenerator idGenerator = new ReadOnlyHighIdGenerator( highId );\n-        idGenerators.put( idType, idGenerator );\n+        ReadOnlyHighIdGenerator idGenerator = new ReadOnlyHighIdGenerator(highId);\n+        idGenerators.put(idType, idGenerator);\n         return idGenerator;\n     }\n \n     @Override\n-    public IdGenerator create( PageCache pageCache, Path filename, IdType idType, long highId, boolean throwIfFileExists, long maxId, boolean readOnly,\n-            Config config, PageCursorTracer cursorTracer, ImmutableSet<OpenOption> openOptions )\n+    public IdGenerator create(PageCache pageCache, Path filename, IdType idType, long highId, boolean throwIfFileExists, long maxId, boolean readOnly,\n+                              Config config, PageCursorTracer cursorTracer, ImmutableSet<OpenOption> openOptions)\n     {\n-        return open( pageCache, filename, idType, () -> highId, maxId, readOnly, config, cursorTracer, openOptions );\n+        return open(pageCache, filename, idType, () -> highId, maxId, readOnly, config, cursorTracer, openOptions);\n     }\n \n     @Override\n-    public IdGenerator get( IdType idType )\n+    public IdGenerator get(IdType idType)\n     {\n-        ReadOnlyHighIdGenerator idGenerator = idGenerators.get( idType );\n-        if ( idGenerator == null )\n+        ReadOnlyHighIdGenerator idGenerator = idGenerators.get(idType);\n+        if (idGenerator == null)\n         {\n-            throw new IllegalStateException( \"IdGenerator for \" + idType + \" not opened\" );\n+            throw new IllegalStateException(\"IdGenerator for \" + idType + \" not opened\");\n         }\n         return idGenerator;\n     }\n \n     @Override\n-    public void visit( Consumer<IdGenerator> visitor )\n+    public void visit(Consumer<IdGenerator> visitor)\n     {\n-        idGenerators.values().forEach( visitor );\n+        idGenerators.values().forEach(visitor);\n     }\n \n     @Override\n-    public void clearCache( PageCursorTracer cursorTracer )\n+    public void clearCache(PageCursorTracer cursorTracer)\n     {\n-        idGenerators.values().forEach( idGenerator -> idGenerator.clearCache( cursorTracer ) );\n+        idGenerators.values().forEach(idGenerator -> idGenerator.clearCache(cursorTracer));\n     }\n \n     @Override\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}