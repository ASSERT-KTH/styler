{
    "project_name": "wso2-attic-commons",
    "error_id": "340",
    "information": {
        "errors": [
            {
                "line": "2",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 154).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "/*\n * $HeadURL: http://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk/contrib/src/main/java/org/apache/http/contrib/benchmark/CommandLineUtils.java $\n * $Revision: 693050 $\n * $Date: 2008-09-08 03:50:56 -0700 (Mon, 08 Sep 2008) $\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "2",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "2",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/340/CommandLineUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/340/CommandLineUtils.java\nindex f03f995aea4..8eb4aefc158 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/340/CommandLineUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/340/CommandLineUtils.java\n@@ -28,6 +28,7 @@\n  * <http://www.apache.org/>.\n  *\n  */\n+\n package org.apache.http.contrib.benchmark;\n \n import org.apache.commons.cli.CommandLine;\n@@ -40,155 +41,155 @@ import java.net.MalformedURLException;\n import java.net.URL;\n \n public class CommandLineUtils {\n-    \n-    static Options getOptions() {\n-        Option iopt = new Option(\"i\", false, \"Do HEAD requests instead of GET.\");\n-        iopt.setRequired(false);\n-\n-        Option oopt = new Option(\"o\", false, \"Use HTTP/S 1.0\");\n-        oopt.setRequired(false);\n-\n-        Option kopt = new Option(\"k\", false, \"Enable the HTTP KeepAlive feature, \" +\n-            \"i.e., perform multiple requests within one HTTP session. \" +\n-            \"Default is no KeepAlive\");\n-        kopt.setRequired(false);\n-\n-        Option nopt = new Option(\"n\", true, \"Number of requests to perform for the \" +\n-            \"benchmarking session. The default is to just perform a single \" +\n-            \"request which usually leads to non-representative benchmarking \" +\n-            \"results.\");\n-        nopt.setRequired(false);\n-        nopt.setArgName(\"requests\");\n-\n-        Option copt = new Option(\"c\", true, \"Concurrency while performing the \" +\n-            \"benchmarking session. The default is to just use a single thread/client.\");\n-        copt.setRequired(false);\n-        copt.setArgName(\"concurrency\");\n-\n-        Option popt = new Option(\"p\", true, \"File containing data to POST.\");\n-        popt.setRequired(false);\n-        popt.setArgName(\"POST-postFile\");\n-\n-        Option Topt = new Option(\"T\", true, \"Content-type header to use for POST data.\");\n-        Topt.setRequired(false);\n-        Topt.setArgName(\"content-type\");\n-\n-        Option topt = new Option(\"t\", true, \"Client side socket timeout (in ms) - default 60 Secs\");\n-        topt.setRequired(false);\n-        topt.setArgName(\"socket-Timeout\");\n-\n-        Option Hopt = new Option(\"H\", true, \"Add arbitrary header line, \" +\n-            \"eg. 'Accept-Encoding: gzip' inserted after all normal \" +\n-            \"header lines. (repeatable as -H \\\"h1: v1\\\",\\\"h2: v2\\\" etc)\");\n-        Hopt.setRequired(false);\n-        Hopt.setArgName(\"header\");\n-\n-        Option vopt = new Option(\"v\", true, \"Set verbosity level - 4 and above \" +\n-            \"prints response content, 3 and above prints \" +\n-            \"information on headers, 2 and above prints response codes (404, 200, \" +\n-            \"etc.), 1 and above prints warnings and info.\");\n-        vopt.setRequired(false);\n-        vopt.setArgName(\"verbosity\");\n-\n-        Option hopt = new Option(\"h\", false, \"Display usage information.\");\n-        nopt.setRequired(false);\n-\n-        Options options = new Options();\n-        options.addOption(iopt);\n-        options.addOption(kopt);\n-        options.addOption(nopt);\n-        options.addOption(copt);\n-        options.addOption(popt);\n-        options.addOption(Topt);\n-        options.addOption(vopt);\n-        options.addOption(Hopt);\n-        options.addOption(hopt);\n-        options.addOption(topt);\n-        options.addOption(oopt);\n-        return options;\n+\n+  static Options getOptions() {\n+    Option iopt = new Option(\"i\", false, \"Do HEAD requests instead of GET.\");\n+    iopt.setRequired(false);\n+\n+    Option oopt = new Option(\"o\", false, \"Use HTTP/S 1.0\");\n+    oopt.setRequired(false);\n+\n+    Option kopt = new Option(\"k\", false, \"Enable the HTTP KeepAlive feature, \" +\n+      \"i.e., perform multiple requests within one HTTP session. \" +\n+      \"Default is no KeepAlive\");\n+    kopt.setRequired(false);\n+\n+    Option nopt = new Option(\"n\", true, \"Number of requests to perform for the \" +\n+      \"benchmarking session. The default is to just perform a single \" +\n+      \"request which usually leads to non-representative benchmarking \" +\n+      \"results.\");\n+    nopt.setRequired(false);\n+    nopt.setArgName(\"requests\");\n+\n+    Option copt = new Option(\"c\", true, \"Concurrency while performing the \" +\n+      \"benchmarking session. The default is to just use a single thread/client.\");\n+    copt.setRequired(false);\n+    copt.setArgName(\"concurrency\");\n+\n+    Option popt = new Option(\"p\", true, \"File containing data to POST.\");\n+    popt.setRequired(false);\n+    popt.setArgName(\"POST-postFile\");\n+\n+    Option Topt = new Option(\"T\", true, \"Content-type header to use for POST data.\");\n+    Topt.setRequired(false);\n+    Topt.setArgName(\"content-type\");\n+\n+    Option topt = new Option(\"t\", true, \"Client side socket timeout (in ms) - default 60 Secs\");\n+    topt.setRequired(false);\n+    topt.setArgName(\"socket-Timeout\");\n+\n+    Option Hopt = new Option(\"H\", true, \"Add arbitrary header line, \" +\n+      \"eg. 'Accept-Encoding: gzip' inserted after all normal \" +\n+      \"header lines. (repeatable as -H \\\"h1: v1\\\",\\\"h2: v2\\\" etc)\");\n+    Hopt.setRequired(false);\n+    Hopt.setArgName(\"header\");\n+\n+    Option vopt = new Option(\"v\", true, \"Set verbosity level - 4 and above \" +\n+      \"prints response content, 3 and above prints \" +\n+      \"information on headers, 2 and above prints response codes (404, 200, \" +\n+      \"etc.), 1 and above prints warnings and info.\");\n+    vopt.setRequired(false);\n+    vopt.setArgName(\"verbosity\");\n+\n+    Option hopt = new Option(\"h\", false, \"Display usage information.\");\n+    nopt.setRequired(false);\n+\n+    Options options = new Options();\n+    options.addOption(iopt);\n+    options.addOption(kopt);\n+    options.addOption(nopt);\n+    options.addOption(copt);\n+    options.addOption(popt);\n+    options.addOption(Topt);\n+    options.addOption(vopt);\n+    options.addOption(Hopt);\n+    options.addOption(hopt);\n+    options.addOption(topt);\n+    options.addOption(oopt);\n+    return options;\n+  }\n+\n+  static void parseCommandLine(CommandLine cmd, HttpBenchmark httpBenchmark) {\n+\n+    if (cmd.hasOption('v')) {\n+      String s = cmd.getOptionValue('v');\n+      try {\n+        httpBenchmark.verbosity = Integer.parseInt(s);\n+      } catch (NumberFormatException ex) {\n+        printError(\"Invalid verbosity level: \" + s);\n+      }\n+    }\n+\n+    if (cmd.hasOption('k')) {\n+      httpBenchmark.keepAlive = true;\n+    }\n+\n+    if (cmd.hasOption('c')) {\n+      String s = cmd.getOptionValue('c');\n+      try {\n+        httpBenchmark.threads = Integer.parseInt(s);\n+      } catch (NumberFormatException ex) {\n+        printError(\"Invalid number for concurrency: \" + s);\n+      }\n+    }\n+\n+    if (cmd.hasOption('n')) {\n+      String s = cmd.getOptionValue('n');\n+      try {\n+        httpBenchmark.requests = Integer.parseInt(s);\n+      } catch (NumberFormatException ex) {\n+        printError(\"Invalid number of requests: \" + s);\n+      }\n+    }\n+\n+    try {\n+      httpBenchmark.url = new URL(cmd.getArgs()[0]);\n+    } catch (MalformedURLException e) {\n+      printError(\"Invalid request URL : \" + cmd.getArgs()[0]);\n+    }\n+\n+    if (cmd.hasOption('p')) {\n+      httpBenchmark.postFile = new File(cmd.getOptionValue('p'));\n+      if (!httpBenchmark.postFile.exists()) {\n+        printError(\"File not found: \" + httpBenchmark.postFile);\n+      }\n+    }\n+\n+    if (cmd.hasOption('T')) {\n+      httpBenchmark.contentType = cmd.getOptionValue('T');\n+    }\n+\n+    if (cmd.hasOption('i')) {\n+      httpBenchmark.doHeadInsteadOfGet = true;\n     }\n \n-    static void parseCommandLine(CommandLine cmd, HttpBenchmark httpBenchmark) {\n-\n-        if (cmd.hasOption('v')) {\n-            String s = cmd.getOptionValue('v');\n-            try {\n-                httpBenchmark.verbosity = Integer.parseInt(s);\n-            } catch (NumberFormatException ex) {\n-                printError(\"Invalid verbosity level: \" + s);\n-            }\n-        }\n-\n-        if (cmd.hasOption('k')) {\n-            httpBenchmark.keepAlive = true;\n-        }\n-\n-        if (cmd.hasOption('c')) {\n-            String s = cmd.getOptionValue('c');\n-            try {\n-                httpBenchmark.threads = Integer.parseInt(s);\n-            } catch (NumberFormatException ex) {\n-                printError(\"Invalid number for concurrency: \" + s);\n-            }\n-        }\n-\n-        if (cmd.hasOption('n')) {\n-            String s = cmd.getOptionValue('n');\n-            try {\n-                httpBenchmark.requests = Integer.parseInt(s);\n-            } catch (NumberFormatException ex) {\n-                printError(\"Invalid number of requests: \" + s);\n-            }\n-        }\n-\n-        try {\n-            httpBenchmark.url = new URL(cmd.getArgs()[0]);\n-        } catch (MalformedURLException e) {\n-            printError(\"Invalid request URL : \" + cmd.getArgs()[0]);\n-        }\n-\n-        if (cmd.hasOption('p')) {\n-            httpBenchmark.postFile = new File(cmd.getOptionValue('p'));\n-            if (!httpBenchmark.postFile.exists()) {\n-                printError(\"File not found: \" + httpBenchmark.postFile);\n-            }\n-        }\n-\n-        if (cmd.hasOption('T')) {\n-            httpBenchmark.contentType = cmd.getOptionValue('T');\n-        }\n-\n-        if (cmd.hasOption('i')) {\n-            httpBenchmark.doHeadInsteadOfGet = true;\n-        }\n-\n-        if (cmd.hasOption('H')) {\n-            String headerStr = cmd.getOptionValue('H');\n-            httpBenchmark.headers = headerStr.split(\",\");\n-        }\n-\n-        if (cmd.hasOption('t')) {\n-            String t = cmd.getOptionValue('t');\n-            try {\n-                httpBenchmark.socketTimeout = Integer.parseInt(t);\n-            } catch (NumberFormatException ex) {\n-                printError(\"Invalid socket timeout: \" + t);\n-            }\n-        }\n-\n-        if (cmd.hasOption('o')) {\n-            httpBenchmark.useHttp1_0 = true;\n-        }\n+    if (cmd.hasOption('H')) {\n+      String headerStr = cmd.getOptionValue('H');\n+      httpBenchmark.headers = headerStr.split(\",\");\n     }\n \n-    static void showUsage(final Options options) {\n-        HelpFormatter formatter = new HelpFormatter();\n-        formatter.printHelp(\"HttpBenchmark [options] [http://]hostname[:port]/path\", options);\n+    if (cmd.hasOption('t')) {\n+      String t = cmd.getOptionValue('t');\n+      try {\n+        httpBenchmark.socketTimeout = Integer.parseInt(t);\n+      } catch (NumberFormatException ex) {\n+        printError(\"Invalid socket timeout: \" + t);\n+      }\n     }\n \n-    static void printError(String msg) {\n-        System.err.println(msg);\n-        showUsage(getOptions());\n-        System.exit(-1);\n+    if (cmd.hasOption('o')) {\n+      httpBenchmark.useHttp1_0 = true;\n     }\n+  }\n+\n+  static void showUsage(final Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"HttpBenchmark [options] [http://]hostname[:port]/path\", options);\n+  }\n+\n+  static void printError(String msg) {\n+    System.err.println(msg);\n+    showUsage(getOptions());\n+    System.exit(-1);\n+  }\n }\n",
            "diff_size": 215
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "2",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/340/CommandLineUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/340/CommandLineUtils.java\nindex f03f995aea4..0b99861208f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/340/CommandLineUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/340/CommandLineUtils.java\n@@ -191,4 +191,4 @@ public class CommandLineUtils {\n         showUsage(getOptions());\n         System.exit(-1);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "2",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "2",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}