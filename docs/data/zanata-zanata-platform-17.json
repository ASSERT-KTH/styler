{
    "project_name": "zanata-zanata-platform",
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "151",
                "column": "35",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        registerServiceImpl.mergeAccounts(currentUser.getAccount(),\n                getObsoleteAccount());\n        setObsoleteAccount(null); // reset the obsolete account\n        facesMessages.addGlobal(\"Your accounts have been merged.\");\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/17/AccountMergeAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/17/AccountMergeAction.java\nindex 92143bead86..1bd251dbad1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/17/AccountMergeAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/17/AccountMergeAction.java\n@@ -148,8 +148,9 @@ public class AccountMergeAction implements Serializable {\n     public void mergeAccounts() {\n         registerServiceImpl.mergeAccounts(currentUser.getAccount(),\n                 getObsoleteAccount());\n-        setObsoleteAccount(null); // reset the obsolete account\n-        facesMessages.addGlobal(\"Your accounts have been merged.\");\n+        setObsoleteAccount(null);\n+        // reset the obsolete account\n+         facesMessages.addGlobal(\"Your accounts have been merged.\");\n     }\n \n     public String cancel() {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "152",
                    "column": "31",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/17/AccountMergeAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/17/AccountMergeAction.java\nindex 92143bead86..c0f647bb4d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/17/AccountMergeAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/17/AccountMergeAction.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.action;\n \n import static javax.faces.application.FacesMessage.SEVERITY_ERROR;\n@@ -46,7 +47,7 @@ import org.zanata.util.Synchronized;\n \n /**\n  * @author Carlos Munoz\n- *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n+ * <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n @Named(\"accountMergeAction\")\n @ViewScoped\n@@ -54,142 +55,142 @@ import org.zanata.util.Synchronized;\n @Transactional\n public class AccountMergeAction implements Serializable {\n \n-    @SessionScoped\n-    @Synchronized\n-    static class ObsoleteHolder implements Serializable {\n-\n-        private static final long serialVersionUID = 1L;\n-        @Nullable\n-        HAccount account;\n-    }\n+  @SessionScoped\n+  @Synchronized\n+  static class ObsoleteHolder implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n-    @Inject\n-    private CurrentUser currentUser;\n-    @Inject\n-    private FacesMessages facesMessages;\n-    @Inject\n-    private AuthenticationManager authenticationManager;\n-    @Inject\n-    private RegisterService registerServiceImpl;\n-    private String openId = \"http://\";\n-    @Inject\n-    private ObsoleteHolder obsolete;\n-    private boolean accountsValid;\n-    @Inject\n-    private ZanataIdentity zanataIdentity;\n-\n-    @Inject\n-    private AccountDAO accountDAO;\n-    @Inject\n-    private ObsoleteHolder obsoleteHolder;\n-\n     @Nullable\n-    public HAccount getObsoleteAccount() {\n-        return obsolete.account;\n-    }\n-\n-    private void setObsoleteAccount(@Nullable HAccount obsoleteAccount) {\n-        obsolete.account = obsoleteAccount;\n+    HAccount account;\n+  }\n+\n+  private static final long serialVersionUID = 1L;\n+  @Inject\n+  private CurrentUser currentUser;\n+  @Inject\n+  private FacesMessages facesMessages;\n+  @Inject\n+  private AuthenticationManager authenticationManager;\n+  @Inject\n+  private RegisterService registerServiceImpl;\n+  private String openId = \"http://\";\n+  @Inject\n+  private ObsoleteHolder obsolete;\n+  private boolean accountsValid;\n+  @Inject\n+  private ZanataIdentity zanataIdentity;\n+\n+  @Inject\n+  private AccountDAO accountDAO;\n+  @Inject\n+  private ObsoleteHolder obsoleteHolder;\n+\n+  @Nullable\n+  public HAccount getObsoleteAccount() {\n+    return obsolete.account;\n+  }\n+\n+  private void setObsoleteAccount(@Nullable HAccount obsoleteAccount) {\n+    obsolete.account = obsoleteAccount;\n+  }\n+\n+  @PostConstruct\n+  public void onCreate() {\n+    zanataIdentity.checkLoggedIn();\n+  }\n+\n+  public boolean getAccountsValid() {\n+    return accountsValid;\n+  }\n+\n+  public void loginToMergingAccount(String provider) {\n+    if (provider.equalsIgnoreCase(\"Internal\")) {\n+      // no implementation for internal account merging yet\n+    } else {\n+      OpenIdProviderType providerType;\n+      try {\n+        providerType = OpenIdProviderType.valueOf(provider);\n+      } catch (IllegalArgumentException e) {\n+        providerType = OpenIdProviderType.Generic;\n+      }\n+      if (providerType == OpenIdProviderType.Generic) {\n+        authenticationManager.openIdAuthenticate(openId, providerType,\n+          new AccountMergeAuthCallback(accountDAO, obsoleteHolder));\n+      } else {\n+        authenticationManager.openIdAuthenticate(providerType,\n+          new AccountMergeAuthCallback(accountDAO, obsoleteHolder));\n+      }\n     }\n-\n-    @PostConstruct\n-    public void onCreate() {\n-        zanataIdentity.checkLoggedIn();\n+  }\n+\n+  public boolean isAccountSelected() {\n+    return getObsoleteAccount() != null;\n+  }\n+\n+  public void validateAccounts() {\n+    boolean valid = true;\n+    // The account to merge in has been authenticated\n+    HAccount obsoleteAccount = getObsoleteAccount();\n+    if (obsoleteAccount != null) {\n+      if (obsoleteAccount.getId() == null) {\n+        facesMessages.addGlobal(SEVERITY_ERROR,\n+          \"Could not find an account for that user.\");\n+        valid = false;\n+      } else if (currentUser.getAccount().getId()\n+        .equals(obsoleteAccount.getId())) {\n+        facesMessages.addGlobal(SEVERITY_ERROR,\n+          \"You are attempting to merge the same account.\");\n+        valid = false;\n+      }\n     }\n+    this.accountsValid = valid;\n+  }\n \n-    public boolean getAccountsValid() {\n-        return accountsValid;\n-    }\n+  public void mergeAccounts() {\n+    registerServiceImpl.mergeAccounts(currentUser.getAccount(),\n+      getObsoleteAccount());\n+    setObsoleteAccount(null); // reset the obsolete account\n+    facesMessages.addGlobal(\"Your accounts have been merged.\");\n+  }\n \n-    public void loginToMergingAccount(String provider) {\n-        if (provider.equalsIgnoreCase(\"Internal\")) {\n-            // no implementation for internal account merging yet\n-        } else {\n-            OpenIdProviderType providerType;\n-            try {\n-                providerType = OpenIdProviderType.valueOf(provider);\n-            } catch (IllegalArgumentException e) {\n-                providerType = OpenIdProviderType.Generic;\n-            }\n-            if (providerType == OpenIdProviderType.Generic) {\n-                authenticationManager.openIdAuthenticate(openId, providerType,\n-                        new AccountMergeAuthCallback(accountDAO, obsoleteHolder));\n-            } else {\n-                authenticationManager.openIdAuthenticate(providerType,\n-                        new AccountMergeAuthCallback(accountDAO, obsoleteHolder));\n-            }\n-        }\n-    }\n+  public String cancel() {\n+    // see faces-config.xml\n+    setObsoleteAccount(null);\n+    return \"cancel\";\n+  }\n \n-    public boolean isAccountSelected() {\n-        return getObsoleteAccount() != null;\n-    }\n+  static class AccountMergeAuthCallback\n+    implements OpenIdAuthCallback, Serializable {\n \n-    public void validateAccounts() {\n-        boolean valid = true;\n-        // The account to merge in has been authenticated\n-        HAccount obsoleteAccount = getObsoleteAccount();\n-        if (obsoleteAccount != null) {\n-            if (obsoleteAccount.getId() == null) {\n-                facesMessages.addGlobal(SEVERITY_ERROR,\n-                        \"Could not find an account for that user.\");\n-                valid = false;\n-            } else if (currentUser.getAccount().getId()\n-                    .equals(obsoleteAccount.getId())) {\n-                facesMessages.addGlobal(SEVERITY_ERROR,\n-                        \"You are attempting to merge the same account.\");\n-                valid = false;\n-            }\n-        }\n-        this.accountsValid = valid;\n-    }\n+    private static final long serialVersionUID = 1L;\n+    private AccountDAO accountDAO;\n+    private ObsoleteHolder obsoleteHolder;\n \n-    public void mergeAccounts() {\n-        registerServiceImpl.mergeAccounts(currentUser.getAccount(),\n-                getObsoleteAccount());\n-        setObsoleteAccount(null); // reset the obsolete account\n-        facesMessages.addGlobal(\"Your accounts have been merged.\");\n+    AccountMergeAuthCallback(AccountDAO accountDAO, ObsoleteHolder obsoleteHolder) {\n+      this.accountDAO = accountDAO;\n+      this.obsoleteHolder = obsoleteHolder;\n     }\n \n-    public String cancel() {\n-        // see faces-config.xml\n-        setObsoleteAccount(null);\n-        return \"cancel\";\n+    @Override\n+    public void afterOpenIdAuth(OpenIdAuthenticationResult result) {\n+      if (result.isAuthenticated()) {\n+        obsoleteHolder.account = ObjectUtils.firstNonNull(accountDAO\n+            .getByCredentialsId(result.getAuthenticatedId()),\n+          new HAccount());\n+      }\n     }\n \n-    static class AccountMergeAuthCallback\n-            implements OpenIdAuthCallback, Serializable {\n-\n-        private static final long serialVersionUID = 1L;\n-        private AccountDAO accountDAO;\n-        private ObsoleteHolder obsoleteHolder;\n-\n-        AccountMergeAuthCallback(AccountDAO accountDAO, ObsoleteHolder obsoleteHolder) {\n-            this.accountDAO = accountDAO;\n-            this.obsoleteHolder = obsoleteHolder;\n-        }\n-\n-        @Override\n-        public void afterOpenIdAuth(OpenIdAuthenticationResult result) {\n-            if (result.isAuthenticated()) {\n-                obsoleteHolder.account = ObjectUtils.firstNonNull(accountDAO\n-                        .getByCredentialsId(result.getAuthenticatedId()),\n-                        new HAccount());\n-            }\n-        }\n-\n-        @Override\n-        public String getRedirectToUrl() {\n-            return \"/profile/merge_account.xhtml\";\n-        }\n+    @Override\n+    public String getRedirectToUrl() {\n+      return \"/profile/merge_account.xhtml\";\n     }\n+  }\n \n-    public String getOpenId() {\n-        return this.openId;\n-    }\n+  public String getOpenId() {\n+    return this.openId;\n+  }\n \n-    public void setOpenId(final String openId) {\n-        this.openId = openId;\n-    }\n+  public void setOpenId(final String openId) {\n+    this.openId = openId;\n+  }\n }\n",
            "diff_size": 202
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/17/AccountMergeAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/17/AccountMergeAction.java\nindex 92143bead86..b3190e5010d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/17/AccountMergeAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/17/AccountMergeAction.java\n@@ -148,7 +148,8 @@ public class AccountMergeAction implements Serializable {\n     public void mergeAccounts() {\n         registerServiceImpl.mergeAccounts(currentUser.getAccount(),\n                 getObsoleteAccount());\n-        setObsoleteAccount(null); // reset the obsolete account\n+        setObsoleteAccount(null);\n+// reset the obsolete account\n         facesMessages.addGlobal(\"Your accounts have been merged.\");\n     }\n \n@@ -192,4 +193,4 @@ public class AccountMergeAction implements Serializable {\n     public void setOpenId(final String openId) {\n         this.openId = openId;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "148",
                    "column": "35",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/17/AccountMergeAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/17/AccountMergeAction.java\nindex 92143bead86..f11bf5566db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/17/AccountMergeAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/17/AccountMergeAction.java\n@@ -21,6 +21,7 @@\n package org.zanata.action;\n \n import static javax.faces.application.FacesMessage.SEVERITY_ERROR;\n+\n import java.io.Serializable;\n import javax.annotation.Nullable;\n import javax.enterprise.context.SessionScoped;\n@@ -29,7 +30,6 @@ import javax.enterprise.inject.Model;\n import javax.faces.bean.ViewScoped;\n import javax.inject.Inject;\n import javax.inject.Named;\n-\n import org.apache.commons.lang3.ObjectUtils;\n import org.apache.deltaspike.jpa.api.transaction.Transactional;\n import org.zanata.dao.AccountDAO;\n@@ -48,16 +48,16 @@ import org.zanata.util.Synchronized;\n  * @author Carlos Munoz\n  *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n+\n+\n @Named(\"accountMergeAction\")\n @ViewScoped\n @Model\n @Transactional\n public class AccountMergeAction implements Serializable {\n-\n     @SessionScoped\n     @Synchronized\n     static class ObsoleteHolder implements Serializable {\n-\n         private static final long serialVersionUID = 1L;\n         @Nullable\n         HAccount account;\n@@ -78,12 +78,10 @@ public class AccountMergeAction implements Serializable {\n     private boolean accountsValid;\n     @Inject\n     private ZanataIdentity zanataIdentity;\n-\n     @Inject\n     private AccountDAO accountDAO;\n     @Inject\n     private ObsoleteHolder obsoleteHolder;\n-\n     @Nullable\n     public HAccount getObsoleteAccount() {\n         return obsolete.account;\n@@ -105,6 +103,7 @@ public class AccountMergeAction implements Serializable {\n     public void loginToMergingAccount(String provider) {\n         if (provider.equalsIgnoreCase(\"Internal\")) {\n             // no implementation for internal account merging yet\n+\n         } else {\n             OpenIdProviderType providerType;\n             try {\n@@ -114,10 +113,10 @@ public class AccountMergeAction implements Serializable {\n             }\n             if (providerType == OpenIdProviderType.Generic) {\n                 authenticationManager.openIdAuthenticate(openId, providerType,\n-                        new AccountMergeAuthCallback(accountDAO, obsoleteHolder));\n+                    new AccountMergeAuthCallback(accountDAO, obsoleteHolder));\n             } else {\n                 authenticationManager.openIdAuthenticate(providerType,\n-                        new AccountMergeAuthCallback(accountDAO, obsoleteHolder));\n+                    new AccountMergeAuthCallback(accountDAO, obsoleteHolder));\n             }\n         }\n     }\n@@ -133,12 +132,11 @@ public class AccountMergeAction implements Serializable {\n         if (obsoleteAccount != null) {\n             if (obsoleteAccount.getId() == null) {\n                 facesMessages.addGlobal(SEVERITY_ERROR,\n-                        \"Could not find an account for that user.\");\n+                    \"Could not find an account for that user.\");\n                 valid = false;\n-            } else if (currentUser.getAccount().getId()\n-                    .equals(obsoleteAccount.getId())) {\n+            } else if (currentUser.getAccount().getId().equals(obsoleteAccount.getId())) {\n                 facesMessages.addGlobal(SEVERITY_ERROR,\n-                        \"You are attempting to merge the same account.\");\n+                    \"You are attempting to merge the same account.\");\n                 valid = false;\n             }\n         }\n@@ -146,8 +144,7 @@ public class AccountMergeAction implements Serializable {\n     }\n \n     public void mergeAccounts() {\n-        registerServiceImpl.mergeAccounts(currentUser.getAccount(),\n-                getObsoleteAccount());\n+        registerServiceImpl.mergeAccounts(currentUser.getAccount(), getObsoleteAccount());\n         setObsoleteAccount(null); // reset the obsolete account\n         facesMessages.addGlobal(\"Your accounts have been merged.\");\n     }\n@@ -158,9 +155,7 @@ public class AccountMergeAction implements Serializable {\n         return \"cancel\";\n     }\n \n-    static class AccountMergeAuthCallback\n-            implements OpenIdAuthCallback, Serializable {\n-\n+    static class AccountMergeAuthCallback implements OpenIdAuthCallback, Serializable {\n         private static final long serialVersionUID = 1L;\n         private AccountDAO accountDAO;\n         private ObsoleteHolder obsoleteHolder;\n@@ -173,9 +168,8 @@ public class AccountMergeAction implements Serializable {\n         @Override\n         public void afterOpenIdAuth(OpenIdAuthenticationResult result) {\n             if (result.isAuthenticated()) {\n-                obsoleteHolder.account = ObjectUtils.firstNonNull(accountDAO\n-                        .getByCredentialsId(result.getAuthenticatedId()),\n-                        new HAccount());\n+                obsoleteHolder.account = ObjectUtils.firstNonNull(accountDAO.getByCredentialsId(result.getAuthenticatedId()),\n+                                                                  new HAccount());\n             }\n         }\n \n@@ -192,4 +186,4 @@ public class AccountMergeAction implements Serializable {\n     public void setOpenId(final String openId) {\n         this.openId = openId;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "151",
                    "column": "35",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/17/AccountMergeAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/17/AccountMergeAction.java\nindex 92143bead86..1bd251dbad1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/17/AccountMergeAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/17/AccountMergeAction.java\n@@ -148,8 +148,9 @@ public class AccountMergeAction implements Serializable {\n     public void mergeAccounts() {\n         registerServiceImpl.mergeAccounts(currentUser.getAccount(),\n                 getObsoleteAccount());\n-        setObsoleteAccount(null); // reset the obsolete account\n-        facesMessages.addGlobal(\"Your accounts have been merged.\");\n+        setObsoleteAccount(null);\n+        // reset the obsolete account\n+         facesMessages.addGlobal(\"Your accounts have been merged.\");\n     }\n \n     public String cancel() {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff",
        "styler_random"
    ]
}