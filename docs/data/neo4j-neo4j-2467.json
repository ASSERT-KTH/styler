{
    "project_name": "neo4j-neo4j",
    "error_id": "2467",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2467/DefaultIndexProviderMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2467/DefaultIndexProviderMap.java\nindex 23e5c2ff9b6..e5169d1611e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2467/DefaultIndexProviderMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2467/DefaultIndexProviderMap.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import java.util.HashMap;\n@@ -39,14 +40,14 @@ import static java.util.Objects.requireNonNull;\n \n public class DefaultIndexProviderMap extends LifecycleAdapter implements IndexProviderMap\n {\n-    private final Map<IndexProviderDescriptor,IndexProvider> indexProvidersByDescriptor = new HashMap<>();\n-    private final Map<String,IndexProvider> indexProvidersByName = new HashMap<>();\n+    private final Map<IndexProviderDescriptor, IndexProvider> indexProvidersByDescriptor = new HashMap<>();\n+    private final Map<String, IndexProvider> indexProvidersByName = new HashMap<>();\n     private final DependencyResolver dependencies;\n     private IndexProvider defaultIndexProvider;\n     private IndexProvider fulltextIndexProvider;\n     private final Config config;\n \n-    public DefaultIndexProviderMap( DependencyResolver dependencies, Config config )\n+    public DefaultIndexProviderMap(DependencyResolver dependencies, Config config)\n     {\n         this.dependencies = dependencies;\n         this.config = config;\n@@ -55,16 +56,16 @@ public class DefaultIndexProviderMap extends LifecycleAdapter implements IndexPr\n     @Override\n     public void init()\n     {\n-        Iterable<IndexProvider> indexProviders = dependencies.resolveTypeDependencies( IndexProvider.class );\n-        for ( IndexProvider provider : indexProviders )\n+        Iterable<IndexProvider> indexProviders = dependencies.resolveTypeDependencies(IndexProvider.class);\n+        for (IndexProvider provider : indexProviders)\n         {\n             IndexProviderDescriptor providerDescriptor = provider.getProviderDescriptor();\n-            requireNonNull( providerDescriptor );\n-            IndexProvider existing = put( providerDescriptor, provider );\n-            if ( existing != null )\n+            requireNonNull(providerDescriptor);\n+            IndexProvider existing = put(providerDescriptor, provider);\n+            if (existing != null)\n             {\n-                throw new IllegalArgumentException( \"Tried to load multiple schema index providers with the same provider descriptor \" +\n-                        providerDescriptor + \". First loaded \" + existing + \" then \" + provider );\n+                throw new IllegalArgumentException(\"Tried to load multiple schema index providers with the same provider descriptor \" +\n+                  providerDescriptor + \". First loaded \" + existing + \" then \" + provider);\n             }\n         }\n         initDefaultProviders();\n@@ -85,77 +86,77 @@ public class DefaultIndexProviderMap extends LifecycleAdapter implements IndexPr\n     }\n \n     @Override\n-    public IndexProvider lookup( IndexProviderDescriptor providerDescriptor )\n+    public IndexProvider lookup(IndexProviderDescriptor providerDescriptor)\n     {\n         assertInit();\n-        IndexProvider provider = indexProvidersByDescriptor.get( providerDescriptor );\n-        assertProviderFound( provider, providerDescriptor.name() );\n+        IndexProvider provider = indexProvidersByDescriptor.get(providerDescriptor);\n+        assertProviderFound(provider, providerDescriptor.name());\n         return provider;\n     }\n \n     @Override\n-    public IndexProvider lookup( String providerDescriptorName )\n+    public IndexProvider lookup(String providerDescriptorName)\n     {\n         assertInit();\n-        IndexProvider provider = indexProvidersByName.get( providerDescriptorName );\n-        assertProviderFound( provider, providerDescriptorName );\n+        IndexProvider provider = indexProvidersByName.get(providerDescriptorName);\n+        assertProviderFound(provider, providerDescriptorName);\n         return provider;\n     }\n \n     @Override\n-    public void accept( Consumer<IndexProvider> visitor )\n+    public void accept(Consumer<IndexProvider> visitor)\n     {\n         assertInit();\n-        indexProvidersByDescriptor.values().forEach( visitor );\n+        indexProvidersByDescriptor.values().forEach(visitor);\n     }\n \n-    private void assertProviderFound( IndexProvider provider, String providerDescriptorName )\n+    private void assertProviderFound(IndexProvider provider, String providerDescriptorName)\n     {\n-        if ( provider == null )\n+        if (provider == null)\n         {\n-            throw new IndexProviderNotFoundException( \"Tried to get index provider with name \" + providerDescriptorName +\n-                    \" whereas available providers in this session being \" + indexProvidersByName.keySet() + \", and default being \" +\n-                    defaultIndexProvider.getProviderDescriptor().name() );\n+            throw new IndexProviderNotFoundException(\"Tried to get index provider with name \" + providerDescriptorName +\n+              \" whereas available providers in this session being \" + indexProvidersByName.keySet() + \", and default being \" +\n+              defaultIndexProvider.getProviderDescriptor().name());\n         }\n     }\n \n     private void assertInit()\n     {\n-        if ( defaultIndexProvider == null || fulltextIndexProvider == null )\n+        if (defaultIndexProvider == null || fulltextIndexProvider == null)\n         {\n-            throw new IllegalStateException( \"DefaultIndexProviderMap must be part of life cycle and initialized before getting providers.\" );\n+            throw new IllegalStateException(\"DefaultIndexProviderMap must be part of life cycle and initialized before getting providers.\");\n         }\n     }\n \n     private void initDefaultProviders()\n     {\n-        String providerName = config.get( GraphDatabaseSettings.default_schema_provider );\n-        IndexProvider configuredDefaultProvider = indexProvidersByName.get( providerName );\n-        requireNonNull( configuredDefaultProvider, () -> format( \"Configured default provider: `%s` not found. Available index providers: %s.\", providerName,\n-                indexProvidersByName.keySet().toString() ) );\n+        String providerName = config.get(GraphDatabaseSettings.default_schema_provider);\n+        IndexProvider configuredDefaultProvider = indexProvidersByName.get(providerName);\n+        requireNonNull(configuredDefaultProvider, () -> format(\"Configured default provider: `%s` not found. Available index providers: %s.\", providerName,\n+          indexProvidersByName.keySet().toString()));\n         defaultIndexProvider = configuredDefaultProvider;\n \n-        String fulltextProviderName = config.get( GraphDatabaseInternalSettings.default_fulltext_provider );\n-        fulltextIndexProvider = indexProvidersByName.get( fulltextProviderName );\n-        if ( fulltextIndexProvider == null )\n+        String fulltextProviderName = config.get(GraphDatabaseInternalSettings.default_fulltext_provider);\n+        fulltextIndexProvider = indexProvidersByName.get(fulltextProviderName);\n+        if (fulltextIndexProvider == null)\n         {\n             // Not all environments have the full-text index provider available.\n             fulltextIndexProvider = IndexProvider.EMPTY;\n         }\n     }\n \n-    private IndexProvider put( IndexProviderDescriptor providerDescriptor, IndexProvider provider )\n+    private IndexProvider put(IndexProviderDescriptor providerDescriptor, IndexProvider provider)\n     {\n-        IndexProvider existing = indexProvidersByDescriptor.putIfAbsent( providerDescriptor, provider );\n-        indexProvidersByName.putIfAbsent( providerDescriptor.name(), provider );\n+        IndexProvider existing = indexProvidersByDescriptor.putIfAbsent(providerDescriptor, provider);\n+        indexProvidersByName.putIfAbsent(providerDescriptor.name(), provider);\n         return existing;\n     }\n \n     @Override\n-    public IndexDescriptor completeConfiguration( IndexDescriptor index )\n+    public IndexDescriptor completeConfiguration(IndexDescriptor index)\n     {\n         IndexProviderDescriptor providerDescriptor = index.getIndexProvider();\n-        IndexProvider provider = lookup( providerDescriptor );\n-        return provider.completeConfiguration( index );\n+        IndexProvider provider = lookup(providerDescriptor);\n+        return provider.completeConfiguration(index);\n     }\n }\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}