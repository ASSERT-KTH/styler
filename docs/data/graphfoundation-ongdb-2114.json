{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2114",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "189",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "212",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "333",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "338",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2114/HtmlFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2114/HtmlFormat.java\nindex 70858d6ec8e..66ffb86c663 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2114/HtmlFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2114/HtmlFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.repr.formats;\n \n import java.net.URI;\n@@ -40,359 +41,356 @@ import org.neo4j.server.rest.repr.RepresentationFormat;\n \n public class HtmlFormat extends RepresentationFormat\n {\n-    public HtmlFormat()\n-    {\n-        super( MediaType.TEXT_HTML_TYPE );\n-    }\n+  public HtmlFormat()\n+  {\n+    super(MediaType.TEXT_HTML_TYPE);\n+  }\n \n-    private enum MappingTemplate\n-    {\n-        NODE( Representation.NODE )\n+  private enum MappingTemplate\n+  {\n+    NODE(Representation.NODE)\n         {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                String javascript = \"\";\n-                StringBuilder builder = HtmlHelper.start( HtmlHelper.ObjectType.NODE, javascript );\n-                HtmlHelper.append( builder, Collections.singletonMap( \"data\", serialized.get( \"data\" ) ),\n-                        HtmlHelper.ObjectType.NODE );\n-                builder.append( \"<form action='javascript:neo4jHtmlBrowse.getRelationships();'>\" );\n-                builder.append(\"<fieldset><legend>Get relationships</legend>\\n\" );\n-                builder.append( \"<label for='direction'>with direction</label>\\n\" + \"<select id='direction'>\" );\n-                builder.append( \"<option value='\" )\n-                        .append( serialized.get( \"all_typed_relationships\" ) )\n-                        .append( \"'>all</option>\" );\n-                builder.append( \"<option value='\" )\n-                        .append( serialized.get( \"incoming_typed_relationships\" ) )\n-                        .append( \"'>in</option>\" );\n-                builder.append( \"<option value='\" )\n-                        .append( serialized.get( \"outgoing_typed_relationships\" ) )\n-                        .append( \"'>out</option>\" );\n-                builder.append( \"</select>\\n\" );\n-                builder.append( \"<label for='types'>for type(s)</label><select id='types' multiple='multiple'>\" );\n+          @Override\n+          String render(Map<String, Object> serialized)\n+          {\n+            String javascript = \"\";\n+            StringBuilder builder = HtmlHelper.start(HtmlHelper.ObjectType.NODE, javascript);\n+            HtmlHelper.append(builder, Collections.singletonMap(\"data\", serialized.get(\"data\")),\n+                HtmlHelper.ObjectType.NODE);\n+            builder.append(\"<form action='javascript:neo4jHtmlBrowse.getRelationships();'>\");\n+            builder.append(\"<fieldset><legend>Get relationships</legend>\\n\");\n+            builder.append(\"<label for='direction'>with direction</label>\\n\" + \"<select id='direction'>\");\n+            builder.append(\"<option value='\")\n+                .append(serialized.get(\"all_typed_relationships\"))\n+                .append(\"'>all</option>\");\n+            builder.append(\"<option value='\")\n+                .append(serialized.get(\"incoming_typed_relationships\"))\n+                .append(\"'>in</option>\");\n+            builder.append(\"<option value='\")\n+                .append(serialized.get(\"outgoing_typed_relationships\"))\n+                .append(\"'>out</option>\");\n+            builder.append(\"</select>\\n\");\n+            builder.append(\"<label for='types'>for type(s)</label><select id='types' multiple='multiple'>\");\n \n-                for ( String relationshipType : (List<String>) serialized.get( \"relationship_types\" ) )\n-                {\n-                    builder.append( \"<option selected='selected' value='\" )\n-                            .append( relationshipType )\n-                            .append( \"'>\" );\n-                    builder.append( relationshipType )\n-                            .append( \"</option>\" );\n-                }\n-                builder.append( \"</select>\\n\" );\n-                builder.append( \"<button>Get</button>\\n\" );\n-                builder.append( \"</fieldset></form>\\n\" );\n-\n-                return HtmlHelper.end( builder );\n+            for (String relationshipType : (List<String>) serialized.get(\"relationship_types\"))\n+            {\n+              builder.append(\"<option selected='selected' value='\")\n+                  .append(relationshipType)\n+                  .append(\"'>\");\n+              builder.append(relationshipType)\n+                  .append(\"</option>\");\n             }\n+            builder.append(\"</select>\\n\");\n+            builder.append(\"<button>Get</button>\\n\");\n+            builder.append(\"</fieldset></form>\\n\");\n+\n+            return HtmlHelper.end(builder);\n+          }\n         },\n-        RELATIONSHIP( Representation.RELATIONSHIP )\n+    RELATIONSHIP(Representation.RELATIONSHIP)\n         {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                Map<Object, Object> map = new LinkedHashMap<>();\n-                transfer( serialized, map, \"type\", \"data\", \"start\", \"end\" );\n-                return HtmlHelper.from( map, HtmlHelper.ObjectType.RELATIONSHIP );\n-            }\n+          @Override\n+          String render(Map<String, Object> serialized)\n+          {\n+            Map<Object, Object> map = new LinkedHashMap<>();\n+            transfer(serialized, map, \"type\", \"data\", \"start\", \"end\");\n+            return HtmlHelper.from(map, HtmlHelper.ObjectType.RELATIONSHIP);\n+          }\n         },\n-        NODE_INDEXES( Representation.NODE_INDEXES )\n+    NODE_INDEXES(Representation.NODE_INDEXES)\n         {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                return renderIndex( serialized );\n-            }\n+          @Override\n+          String render(Map<String, Object> serialized)\n+          {\n+            return renderIndex(serialized);\n+          }\n         },\n-        RELATIONSHIP_INDEXES( Representation.RELATIONSHIP_INDEXES )\n+    RELATIONSHIP_INDEXES(Representation.RELATIONSHIP_INDEXES)\n         {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                return renderIndex( serialized );\n-            }\n+          @Override\n+          String render(Map<String, Object> serialized)\n+          {\n+            return renderIndex(serialized);\n+          }\n         },\n-        GRAPHDB( Representation.GRAPHDB )\n+    GRAPHDB(Representation.GRAPHDB)\n         {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                Map<Object, Object> map = new HashMap<>();\n-                transfer( serialized, map, \"index\", \"node_index\", \"relationship_index\"/*, \"extensions_info\"*/);\n-                return HtmlHelper.from( map, HtmlHelper.ObjectType.ROOT );\n-            }\n+          @Override\n+          String render(Map<String, Object> serialized)\n+          {\n+            Map<Object, Object> map = new HashMap<>();\n+            transfer(serialized, map, \"index\", \"node_index\", \"relationship_index\"/*, \"extensions_info\"*/);\n+            return HtmlHelper.from(map, HtmlHelper.ObjectType.ROOT);\n+          }\n         },\n-        EXCEPTION( Representation.EXCEPTION )\n+    EXCEPTION(Representation.EXCEPTION)\n         {\n-            @Override\n-            String render( Map<String, Object> serialized )\n+          @Override\n+          String render(Map<String, Object> serialized)\n+          {\n+            StringBuilder entity = new StringBuilder(\"<html>\");\n+            entity.append(\"<head><title>Error</title></head><body>\");\n+            Object subjectOrNull = serialized.get(\"message\");\n+            if (subjectOrNull != null)\n             {\n-                StringBuilder entity = new StringBuilder( \"<html>\" );\n-                entity.append( \"<head><title>Error</title></head><body>\" );\n-                Object subjectOrNull = serialized.get( \"message\" );\n-                if ( subjectOrNull != null )\n-                {\n-                    entity.append( \"<p><pre>\" )\n-                            .append( subjectOrNull )\n-                            .append( \"</pre></p>\" );\n-                }\n-                entity.append( \"<p><pre>\" )\n-                        .append( serialized.get( \"exception\" ) );\n-                List<Object> tb = (List<Object>) serialized.get( \"stackTrace\" );\n-                if ( tb != null )\n-                {\n-                    for ( Object el : tb )\n-                    {\n-                        entity.append( \"\\n\\tat \" + el );\n-                    }\n-                }\n-                entity.append( \"</pre></p>\" )\n-                        .append( \"</body></html>\" );\n-                return entity.toString();\n+              entity.append(\"<p><pre>\")\n+                  .append(subjectOrNull)\n+                  .append(\"</pre></p>\");\n             }\n-        };\n-        private final String key;\n-\n-        MappingTemplate( String key )\n-        {\n-            this.key = key;\n-        }\n-\n-        static final Map<String, MappingTemplate> TEMPLATES = new HashMap<>();\n-        static\n-        {\n-            for ( MappingTemplate template : values() )\n+            entity.append(\"<p><pre>\")\n+                .append(serialized.get(\"exception\"));\n+            List<Object> tb = (List<Object>) serialized.get(\"stackTrace\");\n+            if (tb != null)\n             {\n-                TEMPLATES.put( template.key, template );\n+              for (Object el : tb)\n+              {\n+                entity.append(\"\\n\\tat \" + el);\n+              }\n             }\n-        }\n+            entity.append(\"</pre></p>\")\n+                .append(\"</body></html>\");\n+            return entity.toString();\n+          }\n+        };\n+    private final String key;\n \n-        abstract String render( Map<String, Object> data );\n+    MappingTemplate(String key)\n+    {\n+      this.key = key;\n     }\n \n-    private enum ListTemplate\n+    static final Map<String, MappingTemplate> TEMPLATES = new HashMap<>();\n+\n+    static\n     {\n-        NODES\n+      for (MappingTemplate template : values())\n+      {\n+        TEMPLATES.put(template.key, template);\n+      }\n+    }\n+\n+    abstract String render(Map<String, Object> data);\n+  }\n+\n+  private enum ListTemplate\n+  {\n+    NODES\n         {\n-            @Override\n-            String render( List<Object> data )\n+          @Override\n+          String render(List<Object> data)\n+          {\n+            StringBuilder builder = HtmlHelper.start(\"Index hits\", null);\n+            if (data.isEmpty())\n             {\n-                StringBuilder builder = HtmlHelper.start( \"Index hits\", null );\n-                if ( data.isEmpty() )\n-                {\n-                    HtmlHelper.appendMessage( builder, \"No index hits\" );\n-                    return HtmlHelper.end( builder );\n-                }\n-                else\n-                {\n-                    for ( Map<?, ?> serialized : (List<Map<?, ?>>) (List<?>) data )\n-                    {\n-                        Map<Object, Object> map = new LinkedHashMap<>();\n-                        transfer( serialized, map, \"self\", \"data\" );\n-                        HtmlHelper.append( builder, map, HtmlHelper.ObjectType.NODE );\n-                    }\n-                    return HtmlHelper.end( builder );\n-                }\n+              HtmlHelper.appendMessage(builder, \"No index hits\");\n+              return HtmlHelper.end(builder);\n+            } else\n+            {\n+              for (Map<?, ?> serialized : (List<Map<?, ?>>) (List<?>) data)\n+              {\n+                Map<Object, Object> map = new LinkedHashMap<>();\n+                transfer(serialized, map, \"self\", \"data\");\n+                HtmlHelper.append(builder, map, HtmlHelper.ObjectType.NODE);\n+              }\n+              return HtmlHelper.end(builder);\n             }\n+          }\n         },\n-        RELATIONSHIPS\n+    RELATIONSHIPS\n         {\n-            @Override\n-            String render( List<Object> data )\n+          @Override\n+          String render(List<Object> data)\n+          {\n+            if (data.isEmpty())\n             {\n-                if ( data.isEmpty() )\n-                {\n-                    StringBuilder builder = HtmlHelper.start( HtmlHelper.ObjectType.RELATIONSHIP, null );\n-                    HtmlHelper.appendMessage( builder, \"No relationships found\" );\n-                    return HtmlHelper.end( builder );\n-                }\n-                else\n-                {\n-                    Collection<Object> list = new ArrayList<>();\n-                    for ( Map<?, ?> serialized : (List<Map<?, ?>>) (List<?>) data )\n-                    {\n-                        Map<Object, Object> map = new LinkedHashMap<>();\n-                        transfer( serialized, map, \"self\", \"type\", \"data\", \"start\", \"end\" );\n-                        list.add( map );\n-                    }\n-                    return HtmlHelper.from( list, HtmlHelper.ObjectType.RELATIONSHIP );\n-                }\n+              StringBuilder builder = HtmlHelper.start(HtmlHelper.ObjectType.RELATIONSHIP, null);\n+              HtmlHelper.appendMessage(builder, \"No relationships found\");\n+              return HtmlHelper.end(builder);\n+            } else\n+            {\n+              Collection<Object> list = new ArrayList<>();\n+              for (Map<?, ?> serialized : (List<Map<?, ?>>) (List<?>) data)\n+              {\n+                Map<Object, Object> map = new LinkedHashMap<>();\n+                transfer(serialized, map, \"self\", \"type\", \"data\", \"start\", \"end\");\n+                list.add(map);\n+              }\n+              return HtmlHelper.from(list, HtmlHelper.ObjectType.RELATIONSHIP);\n             }\n+          }\n         };\n \n-        abstract String render( List<Object> data );\n-    }\n+    abstract String render(List<Object> data);\n+  }\n \n-    private static void transfer( Map<?, ?> from, Map<Object, Object> to, String... keys )\n+  private static void transfer(Map<?, ?> from, Map<Object, Object> to, String... keys)\n+  {\n+    for (String key : keys)\n     {\n-        for ( String key : keys )\n-        {\n-            Object value = from.get( key );\n-            if ( value != null )\n-            {\n-                to.put( key, value );\n-            }\n-        }\n+      Object value = from.get(key);\n+      if (value != null)\n+      {\n+        to.put(key, value);\n+      }\n     }\n+  }\n \n-    private static String renderIndex( Map<String, Object> serialized )\n+  private static String renderIndex(Map<String, Object> serialized)\n+  {\n+    String javascript = \"\";\n+    StringBuilder builder = HtmlHelper.start(HtmlHelper.ObjectType.INDEX_ROOT, javascript);\n+    int counter = 0;\n+    for (String indexName : serialized.keySet())\n     {\n-        String javascript = \"\";\n-        StringBuilder builder = HtmlHelper.start( HtmlHelper.ObjectType.INDEX_ROOT, javascript );\n-        int counter = 0;\n-        for ( String indexName : serialized.keySet() )\n-        {\n-            Map<?, ?> indexMapObject = (Map<?, ?>) serialized.get( indexName );\n-            builder.append( \"<ul>\" );\n-            {\n-                builder.append( \"<li>\" );\n-                Map<?, ?> indexMap = indexMapObject;\n-                String keyId = \"key_\" + counter;\n-                String valueId = \"value_\" + counter;\n-                builder.append( \"<form action='javascript:neo4jHtmlBrowse.search(\\\"\" )\n-                        .append( indexMap.get( \"template\" ) )\n-                        .append( \"\\\",\\\"\" )\n-                        .append( keyId )\n-                        .append( \"\\\",\\\"\" )\n-                        .append( valueId )\n-                        .append( \"\\\");'><fieldset><legend> name: \" )\n-                        .append( indexName )\n-                        .append( \" (configuration: \" )\n-                        .append( indexMap.get( \"type\" ) )\n-                        .append( \")</legend>\\n\" );\n-                builder.append( \"<label for='\" )\n-                        .append( keyId )\n-                        .append( \"'>Key</label><input id='\" )\n-                        .append( keyId )\n-                        .append( \"'>\\n\" );\n-                builder.append( \"<label for='\" )\n-                        .append( valueId )\n-                        .append( \"'>Value</label><input id='\" )\n-                        .append( valueId )\n-                        .append( \"'>\\n\" );\n-                builder.append( \"<button>Search</button>\\n\" );\n-                builder.append( \"</fieldset></form>\\n\" );\n-                builder.append( \"</li>\\n\" );\n-                counter++;\n-            }\n-            builder.append( \"</ul>\" );\n-        }\n-        return HtmlHelper.end( builder );\n+      Map<?, ?> indexMapObject = (Map<?, ?>) serialized.get(indexName);\n+      builder.append(\"<ul>\");\n+      {\n+        builder.append(\"<li>\");\n+        Map<?, ?> indexMap = indexMapObject;\n+        String keyId = \"key_\" + counter;\n+        String valueId = \"value_\" + counter;\n+        builder.append(\"<form action='javascript:neo4jHtmlBrowse.search(\\\"\")\n+            .append(indexMap.get(\"template\"))\n+            .append(\"\\\",\\\"\")\n+            .append(keyId)\n+            .append(\"\\\",\\\"\")\n+            .append(valueId)\n+            .append(\"\\\");'><fieldset><legend> name: \")\n+            .append(indexName)\n+            .append(\" (configuration: \")\n+            .append(indexMap.get(\"type\"))\n+            .append(\")</legend>\\n\");\n+        builder.append(\"<label for='\")\n+            .append(keyId)\n+            .append(\"'>Key</label><input id='\")\n+            .append(keyId)\n+            .append(\"'>\\n\");\n+        builder.append(\"<label for='\")\n+            .append(valueId)\n+            .append(\"'>Value</label><input id='\")\n+            .append(valueId)\n+            .append(\"'>\\n\");\n+        builder.append(\"<button>Search</button>\\n\");\n+        builder.append(\"</fieldset></form>\\n\");\n+        builder.append(\"</li>\\n\");\n+        counter++;\n+      }\n+      builder.append(\"</ul>\");\n     }\n+    return HtmlHelper.end(builder);\n+  }\n \n-    private static class HtmlMap extends MapWrappingWriter\n-    {\n-        private final MappingTemplate template;\n-\n-        HtmlMap( MappingTemplate template )\n-        {\n-            super( new HashMap<>(), true );\n-            this.template = template;\n-        }\n+  private static class HtmlMap extends MapWrappingWriter\n+  {\n+    private final MappingTemplate template;\n \n-        String complete()\n-        {\n-            return template.render( this.data );\n-        }\n-    }\n-\n-    private static class HtmlList extends ListWrappingWriter\n+    HtmlMap(MappingTemplate template)\n     {\n-        private final ListTemplate template;\n-\n-        HtmlList( ListTemplate template )\n-        {\n-            super( new ArrayList<>(), true );\n-            this.template = template;\n-        }\n-\n-        String complete()\n-        {\n-            return template.render( this.data );\n-        }\n+      super(new HashMap<>(), true);\n+      this.template = template;\n     }\n \n-    @Override\n-    protected String complete( ListWriter serializer )\n+    String complete()\n     {\n-        return ( (HtmlList) serializer ).complete();\n+      return template.render(this.data);\n     }\n+  }\n \n-    @Override\n-    protected String complete( MappingWriter serializer )\n-    {\n-        return ( (HtmlMap) serializer ).complete();\n-    }\n+  private static class HtmlList extends ListWrappingWriter\n+  {\n+    private final ListTemplate template;\n \n-    @Override\n-    protected ListWriter serializeList( String type )\n+    HtmlList(ListTemplate template)\n     {\n-        if ( Representation.NODE_LIST.equals( type ) )\n-        {\n-            return new HtmlList( ListTemplate.NODES );\n-        }\n-        else if ( Representation.RELATIONSHIP_LIST.equals( type ) )\n-        {\n-            return new HtmlList( ListTemplate.RELATIONSHIPS );\n-        }\n-        else\n-        {\n-            throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE )\n-                    .entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" )\n-                    .build() );\n-        }\n+      super(new ArrayList<>(), true);\n+      this.template = template;\n     }\n \n-    @Override\n-    protected MappingWriter serializeMapping( String type )\n+    String complete()\n     {\n-        MappingTemplate template = MappingTemplate.TEMPLATES.get( type );\n-        if ( template == null )\n-        {\n-            throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE )\n-                    .entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" )\n-                    .build() );\n-        }\n-        return new HtmlMap( template );\n+      return template.render(this.data);\n     }\n+  }\n \n-    @Override\n-    protected String serializeValue( String type, Object value )\n-    {\n-        throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE )\n-                .entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" )\n-                .build() );\n-    }\n+  @Override\n+  protected String complete(ListWriter serializer)\n+  {\n+    return ((HtmlList) serializer).complete();\n+  }\n \n-    @Override\n-    public List<Object> readList( String input )\n-    {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n-    }\n+  @Override\n+  protected String complete(MappingWriter serializer)\n+  {\n+    return ((HtmlMap) serializer).complete();\n+  }\n \n-    @Override\n-    public Map<String, Object> readMap( String input, String... requiredKeys )\n+  @Override\n+  protected ListWriter serializeList(String type)\n+  {\n+    if (Representation.NODE_LIST.equals(type))\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n-    }\n-\n-    @Override\n-    public URI readUri( String input )\n+      return new HtmlList(ListTemplate.NODES);\n+    } else if (Representation.RELATIONSHIP_LIST.equals(type))\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n+      return new HtmlList(ListTemplate.RELATIONSHIPS);\n+    } else\n+    {\n+      throw new WebApplicationException(Response.status(Response.Status.NOT_ACCEPTABLE)\n+          .entity(\"Cannot represent \\\"\" + type + \"\\\" as html\")\n+          .build());\n     }\n+  }\n \n-    @Override\n-    public Object readValue( String input )\n+  @Override\n+  protected MappingWriter serializeMapping(String type)\n+  {\n+    MappingTemplate template = MappingTemplate.TEMPLATES.get(type);\n+    if (template == null)\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n+      throw new WebApplicationException(Response.status(Response.Status.NOT_ACCEPTABLE)\n+          .entity(\"Cannot represent \\\"\" + type + \"\\\" as html\")\n+          .build());\n     }\n+    return new HtmlMap(template);\n+  }\n+\n+  @Override\n+  protected String serializeValue(String type, Object value)\n+  {\n+    throw new WebApplicationException(Response.status(Response.Status.NOT_ACCEPTABLE)\n+        .entity(\"Cannot represent \\\"\" + type + \"\\\" as html\")\n+        .build());\n+  }\n+\n+  @Override\n+  public List<Object> readList(String input)\n+  {\n+    throw new WebApplicationException(Response.status(Response.Status.UNSUPPORTED_MEDIA_TYPE)\n+        .entity(\"Cannot read html\")\n+        .build());\n+  }\n+\n+  @Override\n+  public Map<String, Object> readMap(String input, String... requiredKeys)\n+  {\n+    throw new WebApplicationException(Response.status(Response.Status.UNSUPPORTED_MEDIA_TYPE)\n+        .entity(\"Cannot read html\")\n+        .build());\n+  }\n+\n+  @Override\n+  public URI readUri(String input)\n+  {\n+    throw new WebApplicationException(Response.status(Response.Status.UNSUPPORTED_MEDIA_TYPE)\n+        .entity(\"Cannot read html\")\n+        .build());\n+  }\n+\n+  @Override\n+  public Object readValue(String input)\n+  {\n+    throw new WebApplicationException(Response.status(Response.Status.UNSUPPORTED_MEDIA_TYPE)\n+        .entity(\"Cannot read html\")\n+        .build());\n+  }\n }\n",
            "diff_size": 400
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "317",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "327",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2114/HtmlFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2114/HtmlFormat.java\nindex 70858d6ec8e..66e846255d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2114/HtmlFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2114/HtmlFormat.java\n@@ -50,48 +50,37 @@ public class HtmlFormat extends RepresentationFormat\n         NODE( Representation.NODE )\n         {\n             @Override\n-            String render( Map<String, Object> serialized )\n+            String render( Map<String,Object> serialized )\n             {\n                 String javascript = \"\";\n                 StringBuilder builder = HtmlHelper.start( HtmlHelper.ObjectType.NODE, javascript );\n-                HtmlHelper.append( builder, Collections.singletonMap( \"data\", serialized.get( \"data\" ) ),\n-                        HtmlHelper.ObjectType.NODE );\n-                builder.append( \"<form action='javascript:neo4jHtmlBrowse.getRelationships();'>\" );\n-                builder.append(\"<fieldset><legend>Get relationships</legend>\\n\" );\n+                HtmlHelper.append( builder, Collections.singletonMap( \"data\", serialized.get( \"data\" ) ), HtmlHelper.ObjectType.NODE );\n+builder.append( \"<form action='javascript:neo4jHtmlBrowse.getRelationships();'>\" );\n+                builder.append( \"<fieldset><legend>Get relationships</legend>\\n\" );\n                 builder.append( \"<label for='direction'>with direction</label>\\n\" + \"<select id='direction'>\" );\n-                builder.append( \"<option value='\" )\n-                        .append( serialized.get( \"all_typed_relationships\" ) )\n-                        .append( \"'>all</option>\" );\n-                builder.append( \"<option value='\" )\n-                        .append( serialized.get( \"incoming_typed_relationships\" ) )\n-                        .append( \"'>in</option>\" );\n-                builder.append( \"<option value='\" )\n-                        .append( serialized.get( \"outgoing_typed_relationships\" ) )\n-                        .append( \"'>out</option>\" );\n-                builder.append( \"</select>\\n\" );\n+                builder.append( \"<option value='\" ).append( serialized.get( \"all_typed_relationships\" ) ).append( \"'>all</option>\" );\n+builder.append( \"<option value='\" ).append( serialized.get( \"incoming_typed_relationships\" ) ).append( \"'>in</option>\" );\n+builder.append( \"<option value='\" ).append( serialized.get( \"outgoing_typed_relationships\" ) ).append( \"'>out</option>\" );\n+builder.append( \"</select>\\n\" );\n                 builder.append( \"<label for='types'>for type(s)</label><select id='types' multiple='multiple'>\" );\n-\n-                for ( String relationshipType : (List<String>) serialized.get( \"relationship_types\" ) )\n+for ( String relationshipType : (List<String>) serialized.get( \"relationship_types\" ) )\n                 {\n-                    builder.append( \"<option selected='selected' value='\" )\n-                            .append( relationshipType )\n+                    builder.append( \"<option selected='selected' value='\" ).append( relationshipType )\n                             .append( \"'>\" );\n-                    builder.append( relationshipType )\n-                            .append( \"</option>\" );\n+builder.append( relationshipType ).append( \"</option>\" );\n                 }\n                 builder.append( \"</select>\\n\" );\n                 builder.append( \"<button>Get</button>\\n\" );\n                 builder.append( \"</fieldset></form>\\n\" );\n-\n-                return HtmlHelper.end( builder );\n+return HtmlHelper.end( builder );\n             }\n         },\n         RELATIONSHIP( Representation.RELATIONSHIP )\n         {\n             @Override\n-            String render( Map<String, Object> serialized )\n+            String render( Map<String,Object> serialized )\n             {\n-                Map<Object, Object> map = new LinkedHashMap<>();\n+                Map<Object,Object> map = new LinkedHashMap<>();\n                 transfer( serialized, map, \"type\", \"data\", \"start\", \"end\" );\n                 return HtmlHelper.from( map, HtmlHelper.ObjectType.RELATIONSHIP );\n             }\n@@ -99,7 +88,7 @@ public class HtmlFormat extends RepresentationFormat\n         NODE_INDEXES( Representation.NODE_INDEXES )\n         {\n             @Override\n-            String render( Map<String, Object> serialized )\n+            String render( Map<String,Object> serialized )\n             {\n                 return renderIndex( serialized );\n             }\n@@ -107,7 +96,7 @@ public class HtmlFormat extends RepresentationFormat\n         RELATIONSHIP_INDEXES( Representation.RELATIONSHIP_INDEXES )\n         {\n             @Override\n-            String render( Map<String, Object> serialized )\n+            String render( Map<String,Object> serialized )\n             {\n                 return renderIndex( serialized );\n             }\n@@ -115,9 +104,9 @@ public class HtmlFormat extends RepresentationFormat\n         GRAPHDB( Representation.GRAPHDB )\n         {\n             @Override\n-            String render( Map<String, Object> serialized )\n+            String render( Map<String,Object> serialized )\n             {\n-                Map<Object, Object> map = new HashMap<>();\n+                Map<Object,Object> map = new HashMap<>();\n                 transfer( serialized, map, \"index\", \"node_index\", \"relationship_index\"/*, \"extensions_info\"*/);\n                 return HtmlHelper.from( map, HtmlHelper.ObjectType.ROOT );\n             }\n@@ -125,20 +114,18 @@ public class HtmlFormat extends RepresentationFormat\n         EXCEPTION( Representation.EXCEPTION )\n         {\n             @Override\n-            String render( Map<String, Object> serialized )\n+            String render( Map<String,Object> serialized )\n             {\n                 StringBuilder entity = new StringBuilder( \"<html>\" );\n                 entity.append( \"<head><title>Error</title></head><body>\" );\n                 Object subjectOrNull = serialized.get( \"message\" );\n                 if ( subjectOrNull != null )\n                 {\n-                    entity.append( \"<p><pre>\" )\n-                            .append( subjectOrNull )\n+                    entity.append( \"<p><pre>\" ).append( subjectOrNull )\n                             .append( \"</pre></p>\" );\n                 }\n-                entity.append( \"<p><pre>\" )\n-                        .append( serialized.get( \"exception\" ) );\n-                List<Object> tb = (List<Object>) serialized.get( \"stackTrace\" );\n+                entity.append( \"<p><pre>\" ).append( serialized.get( \"exception\" ) );\n+List<Object> tb = (List<Object>) serialized.get( \"stackTrace\" );\n                 if ( tb != null )\n                 {\n                     for ( Object el : tb )\n@@ -146,9 +133,8 @@ public class HtmlFormat extends RepresentationFormat\n                         entity.append( \"\\n\\tat \" + el );\n                     }\n                 }\n-                entity.append( \"</pre></p>\" )\n-                        .append( \"</body></html>\" );\n-                return entity.toString();\n+                entity.append( \"</pre></p>\" ).append( \"</body></html>\" );\n+return entity.toString();\n             }\n         };\n         private final String key;\n@@ -158,7 +144,7 @@ public class HtmlFormat extends RepresentationFormat\n             this.key = key;\n         }\n \n-        static final Map<String, MappingTemplate> TEMPLATES = new HashMap<>();\n+        static final Map<String,MappingTemplate> TEMPLATES = new HashMap<>();\n         static\n         {\n             for ( MappingTemplate template : values() )\n@@ -167,7 +153,7 @@ public class HtmlFormat extends RepresentationFormat\n             }\n         }\n \n-        abstract String render( Map<String, Object> data );\n+        abstract String render( Map<String,Object> data );\n     }\n \n     private enum ListTemplate\n@@ -187,15 +173,15 @@ public class HtmlFormat extends RepresentationFormat\n                 {\n                     for ( Map<?, ?> serialized : (List<Map<?, ?>>) (List<?>) data )\n                     {\n-                        Map<Object, Object> map = new LinkedHashMap<>();\n+                        Map<Object,Object> map = new LinkedHashMap<>();\n                         transfer( serialized, map, \"self\", \"data\" );\n                         HtmlHelper.append( builder, map, HtmlHelper.ObjectType.NODE );\n                     }\n-                    return HtmlHelper.end( builder );\n+\n+return HtmlHelper.end( builder );\n                 }\n             }\n-        },\n-        RELATIONSHIPS\n+        }, RELATIONSHIPS\n         {\n             @Override\n             String render( List<Object> data )\n@@ -211,11 +197,12 @@ public class HtmlFormat extends RepresentationFormat\n                     Collection<Object> list = new ArrayList<>();\n                     for ( Map<?, ?> serialized : (List<Map<?, ?>>) (List<?>) data )\n                     {\n-                        Map<Object, Object> map = new LinkedHashMap<>();\n+                        Map<Object,Object> map = new LinkedHashMap<>();\n                         transfer( serialized, map, \"self\", \"type\", \"data\", \"start\", \"end\" );\n                         list.add( map );\n                     }\n-                    return HtmlHelper.from( list, HtmlHelper.ObjectType.RELATIONSHIP );\n+\n+return HtmlHelper.from( list, HtmlHelper.ObjectType.RELATIONSHIP );\n                 }\n             }\n         };\n@@ -223,7 +210,7 @@ public class HtmlFormat extends RepresentationFormat\n         abstract String render( List<Object> data );\n     }\n \n-    private static void transfer( Map<?, ?> from, Map<Object, Object> to, String... keys )\n+    private static void transfer( Map<?, ?> from, Map<Object,Object> to, String... keys )\n     {\n         for ( String key : keys )\n         {\n@@ -235,7 +222,7 @@ public class HtmlFormat extends RepresentationFormat\n         }\n     }\n \n-    private static String renderIndex( Map<String, Object> serialized )\n+    private static String renderIndex( Map<String,Object> serialized )\n     {\n         String javascript = \"\";\n         StringBuilder builder = HtmlHelper.start( HtmlHelper.ObjectType.INDEX_ROOT, javascript );\n@@ -249,35 +236,25 @@ public class HtmlFormat extends RepresentationFormat\n                 Map<?, ?> indexMap = indexMapObject;\n                 String keyId = \"key_\" + counter;\n                 String valueId = \"value_\" + counter;\n-                builder.append( \"<form action='javascript:neo4jHtmlBrowse.search(\\\"\" )\n-                        .append( indexMap.get( \"template\" ) )\n-                        .append( \"\\\",\\\"\" )\n-                        .append( keyId )\n-                        .append( \"\\\",\\\"\" )\n-                        .append( valueId )\n-                        .append( \"\\\");'><fieldset><legend> name: \" )\n-                        .append( indexName )\n-                        .append( \" (configuration: \" )\n-                        .append( indexMap.get( \"type\" ) )\n-                        .append( \")</legend>\\n\" );\n-                builder.append( \"<label for='\" )\n-                        .append( keyId )\n-                        .append( \"'>Key</label><input id='\" )\n-                        .append( keyId )\n+                builder.append( \"<form action='javascript:neo4jHtmlBrowse.search(\\\"\" ).append( indexMap.get( \"template\" ) ).append( \"\\\",\\\"\" ).append( keyId )\n+                        .append( \"\\\",\\\"\" ).append( valueId )\n+                        .append( \"\\\");'><fieldset><legend> name: \" ).append( indexName )\n+                        .append( \" (configuration: \" ).append( indexMap.get( \"type\" ) ).append( \")</legend>\\n\" );\n+builder.append( \"<label for='\" ).append( keyId )\n+                        .append( \"'>Key</label><input id='\" ).append( keyId )\n                         .append( \"'>\\n\" );\n-                builder.append( \"<label for='\" )\n-                        .append( valueId )\n-                        .append( \"'>Value</label><input id='\" )\n-                        .append( valueId )\n+builder.append( \"<label for='\" ).append( valueId )\n+                        .append( \"'>Value</label><input id='\" ).append( valueId )\n                         .append( \"'>\\n\" );\n-                builder.append( \"<button>Search</button>\\n\" );\n+builder.append( \"<button>Search</button>\\n\" );\n                 builder.append( \"</fieldset></form>\\n\" );\n                 builder.append( \"</li>\\n\" );\n                 counter++;\n             }\n             builder.append( \"</ul>\" );\n         }\n-        return HtmlHelper.end( builder );\n+\n+return HtmlHelper.end( builder );\n     }\n \n     private static class HtmlMap extends MapWrappingWriter\n@@ -315,13 +292,13 @@ public class HtmlFormat extends RepresentationFormat\n     @Override\n     protected String complete( ListWriter serializer )\n     {\n-        return ( (HtmlList) serializer ).complete();\n+        return ( (HtmlList) serializer).complete();\n     }\n \n     @Override\n     protected String complete( MappingWriter serializer )\n     {\n-        return ( (HtmlMap) serializer ).complete();\n+        return ( (HtmlMap) serializer).complete();\n     }\n \n     @Override\n@@ -337,10 +314,8 @@ public class HtmlFormat extends RepresentationFormat\n         }\n         else\n         {\n-            throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE )\n-                    .entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" )\n-                    .build() );\n-        }\n+            throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE ).entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" ).build() );\n+    }\n     }\n \n     @Override\n@@ -349,9 +324,7 @@ public class HtmlFormat extends RepresentationFormat\n         MappingTemplate template = MappingTemplate.TEMPLATES.get( type );\n         if ( template == null )\n         {\n-            throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE )\n-                    .entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" )\n-                    .build() );\n+            throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE ).entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" ).build() );\n         }\n         return new HtmlMap( template );\n     }\n@@ -359,40 +332,30 @@ public class HtmlFormat extends RepresentationFormat\n     @Override\n     protected String serializeValue( String type, Object value )\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE )\n-                .entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" )\n-                .build() );\n+        throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE ).entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" ).build() );\n     }\n \n     @Override\n     public List<Object> readList( String input )\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n+        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE ).entity( \"Cannot read html\" ).build() );\n     }\n \n     @Override\n-    public Map<String, Object> readMap( String input, String... requiredKeys )\n+    public Map<String,Object> readMap( String input, String... requiredKeys )\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n+        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE ).entity( \"Cannot read html\" ).build() );\n     }\n \n     @Override\n     public URI readUri( String input )\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n+        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE ).entity( \"Cannot read html\" ).build() );\n     }\n \n     @Override\n     public Object readValue( String input )\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n+        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE ).entity( \"Cannot read html\" ).build() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 98
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "63",
                    "column": "10",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "75",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "83",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "89",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "95",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "103",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "119",
                    "column": "29",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "119",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "12",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "165",
                    "column": "14",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "166",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "189",
                    "column": "17",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "190",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "209",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "234",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 342).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "307",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "317",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2114/HtmlFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2114/HtmlFormat.java\nindex 70858d6ec8e..ccc24e7a3e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2114/HtmlFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2114/HtmlFormat.java\n@@ -30,7 +30,6 @@ import java.util.Map;\n import javax.ws.rs.WebApplicationException;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-\n import org.neo4j.server.rest.domain.HtmlHelper;\n import org.neo4j.server.rest.repr.BadInputException;\n import org.neo4j.server.rest.repr.ListWriter;\n@@ -46,186 +45,168 @@ public class HtmlFormat extends RepresentationFormat\n     }\n \n     private enum MappingTemplate\n-    {\n-        NODE( Representation.NODE )\n-        {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                String javascript = \"\";\n-                StringBuilder builder = HtmlHelper.start( HtmlHelper.ObjectType.NODE, javascript );\n-                HtmlHelper.append( builder, Collections.singletonMap( \"data\", serialized.get( \"data\" ) ),\n-                        HtmlHelper.ObjectType.NODE );\n-                builder.append( \"<form action='javascript:neo4jHtmlBrowse.getRelationships();'>\" );\n-                builder.append(\"<fieldset><legend>Get relationships</legend>\\n\" );\n-                builder.append( \"<label for='direction'>with direction</label>\\n\" + \"<select id='direction'>\" );\n-                builder.append( \"<option value='\" )\n-                        .append( serialized.get( \"all_typed_relationships\" ) )\n-                        .append( \"'>all</option>\" );\n-                builder.append( \"<option value='\" )\n-                        .append( serialized.get( \"incoming_typed_relationships\" ) )\n-                        .append( \"'>in</option>\" );\n-                builder.append( \"<option value='\" )\n-                        .append( serialized.get( \"outgoing_typed_relationships\" ) )\n-                        .append( \"'>out</option>\" );\n-                builder.append( \"</select>\\n\" );\n-                builder.append( \"<label for='types'>for type(s)</label><select id='types' multiple='multiple'>\" );\n-\n-                for ( String relationshipType : (List<String>) serialized.get( \"relationship_types\" ) )\n-                {\n-                    builder.append( \"<option selected='selected' value='\" )\n-                            .append( relationshipType )\n-                            .append( \"'>\" );\n-                    builder.append( relationshipType )\n-                            .append( \"</option>\" );\n-                }\n-                builder.append( \"</select>\\n\" );\n-                builder.append( \"<button>Get</button>\\n\" );\n-                builder.append( \"</fieldset></form>\\n\" );\n+{ NODE( Representation.NODE)\n+ {\n+     @Override String render( Map<String,Object> serialized )\n+     {\n+         String javascript = \"\";\n+         StringBuilder builder = HtmlHelper.start( HtmlHelper.ObjectType.NODE, javascript );\n+         HtmlHelper.append( builder, Collections.singletonMap( \"data\", serialized.get( \"data\" ) ), HtmlHelper.ObjectType.NODE );\n+         builder.append( \"<form action='javascript:neo4jHtmlBrowse.getRelationships();'>\" );\n+         builder.append( \"<fieldset><legend>Get relationships</legend>\\n\" );\n+         builder.append( \"<label for='direction'>with direction</label>\\n\" + \"<select id='direction'>\" );\n+         builder.append( \"<option value='\" ).append( serialized.get( \"all_typed_relationships\" ) ).append( \"'>all</option>\" );\n+         builder.append( \"<option value='\" ).append( serialized.get( \"incoming_typed_relationships\" ) ).append( \"'>in</option>\" );\n+         builder.append( \"<option value='\" ).append( serialized.get( \"outgoing_typed_relationships\" ) ).append( \"'>out</option>\" );\n+         builder.append( \"</select>\\n\" );\n+         builder.append( \"<label for='types'>for type(s)</label><select id='types' multiple='multiple'>\" );\n+         for( String relationshipType : (List<String>) serialized.get( \"relationship_types\" )\n+         )\n+         {\n+             builder.append( \"<option selected='selected' value='\" ).append( relationshipType ).append( \"'>\" );\n+             builder.append( relationshipType ).append( \"</option>\" );\n+         }\n \n-                return HtmlHelper.end( builder );\n-            }\n-        },\n-        RELATIONSHIP( Representation.RELATIONSHIP )\n-        {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                Map<Object, Object> map = new LinkedHashMap<>();\n-                transfer( serialized, map, \"type\", \"data\", \"start\", \"end\" );\n-                return HtmlHelper.from( map, HtmlHelper.ObjectType.RELATIONSHIP );\n-            }\n-        },\n-        NODE_INDEXES( Representation.NODE_INDEXES )\n-        {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                return renderIndex( serialized );\n-            }\n-        },\n-        RELATIONSHIP_INDEXES( Representation.RELATIONSHIP_INDEXES )\n-        {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                return renderIndex( serialized );\n-            }\n-        },\n-        GRAPHDB( Representation.GRAPHDB )\n-        {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                Map<Object, Object> map = new HashMap<>();\n-                transfer( serialized, map, \"index\", \"node_index\", \"relationship_index\"/*, \"extensions_info\"*/);\n-                return HtmlHelper.from( map, HtmlHelper.ObjectType.ROOT );\n-            }\n-        },\n-        EXCEPTION( Representation.EXCEPTION )\n+         builder.append( \"</select>\\n\" );\n+         builder.append( \"<button>Get</button>\\n\" );\n+         builder.append( \"</fieldset></form>\\n\" );\n+         return HtmlHelper.end( builder );\n+     }\n+ }, RELATIONSHIP( Representation.RELATIONSHIP)\n+    {\n+        @Override String render( Map<String,Object> serialized )\n         {\n-            @Override\n-            String render( Map<String, Object> serialized )\n-            {\n-                StringBuilder entity = new StringBuilder( \"<html>\" );\n-                entity.append( \"<head><title>Error</title></head><body>\" );\n-                Object subjectOrNull = serialized.get( \"message\" );\n-                if ( subjectOrNull != null )\n-                {\n-                    entity.append( \"<p><pre>\" )\n-                            .append( subjectOrNull )\n-                            .append( \"</pre></p>\" );\n-                }\n-                entity.append( \"<p><pre>\" )\n-                        .append( serialized.get( \"exception\" ) );\n-                List<Object> tb = (List<Object>) serialized.get( \"stackTrace\" );\n-                if ( tb != null )\n+            Map<Object,Object> map = new LinkedHashMap<>();\n+            transfer( serialized, map, \"type\", \"data\", \"start\", \"end\" );\n+            return HtmlHelper.from( map, HtmlHelper.ObjectType.RELATIONSHIP );\n+        }\n+    }, NODE_INDEXES( Representation.NODE_INDEXES)\n+       {\n+           @Override String render( Map<String,Object> serialized )\n+           {\n+               return renderIndex( serialized );\n+           }\n+       }, RELATIONSHIP_INDEXES( Representation.RELATIONSHIP_INDEXES)\n+          {\n+              @Override String render( Map<String,Object> serialized )\n+              {\n+                  return renderIndex( serialized );\n+              }\n+          }, GRAPHDB( Representation.GRAPHDB)\n+             {\n+                 @Override String render( Map<String,Object> serialized )\n+                 {\n+                     Map<Object,Object> map = new HashMap<>();\n+                     transfer( serialized, map, \"index\", \"node_index\", \"relationship_index\"/*, \"extensions_info\"*/ );\n+                     return HtmlHelper.from( map, HtmlHelper.ObjectType.ROOT );\n+                 }\n+             }, EXCEPTION( Representation.EXCEPTION)\n                 {\n-                    for ( Object el : tb )\n+                    @Override String render( Map<String,Object> serialized )\n                     {\n-                        entity.append( \"\\n\\tat \" + el );\n+                        StringBuilder entity = new StringBuilder( \"<html>\" );\n+                        entity.append( \"<head><title>Error</title></head><body>\" );\n+                        Object subjectOrNull = serialized.get( \"message\" );\n+                        if ( subjectOrNull != null )\n+                        {\n+                            entity.append( \"<p><pre>\" ).append( subjectOrNull ).append( \"</pre></p>\" );\n+                        }\n+\n+                        entity.append( \"<p><pre>\" ).append( serialized.get( \"exception\" ) );\n+                        List<Object> tb = (List<Object>) serialized.get( \"stackTrace\" );\n+                        if ( tb != null )\n+                        {\n+                            for( Object el : tb)\n+                            {\n+                                entity.append( \"\\n\\tat \" + el );\n+                            }\n+                        }\n+\n+                        entity.append( \"</pre></p>\" ).append( \"</body></html>\" );\n+                        return entity.toString();\n                     }\n                 }\n-                entity.append( \"</pre></p>\" )\n-                        .append( \"</body></html>\" );\n-                return entity.toString();\n-            }\n-        };\n-        private final String key;\n \n-        MappingTemplate( String key )\n-        {\n-            this.key = key;\n-        }\n+   ;\n+       private final String key;\n \n-        static final Map<String, MappingTemplate> TEMPLATES = new HashMap<>();\n-        static\n-        {\n-            for ( MappingTemplate template : values() )\n-            {\n-                TEMPLATES.put( template.key, template );\n-            }\n-        }\n+       MappingTemplate( String key )\n+       {\n+           this.key = key;\n+       }\n \n-        abstract String render( Map<String, Object> data );\n-    }\n+       static final Map<String,MappingTemplate> TEMPLATES = new HashMap<>();\n+\n+       static\n+       {\n+           for( MappingTemplate template : values()\n+           )\n+           {\n+               TEMPLATES.put( template.key, template );\n+           }\n+       }\n+\n+       abstract String render( Map<String,Object> data )\n+       ; }\n \n     private enum ListTemplate\n+{ NODES\n+ {\n+     @Override String render( List<Object> data )\n+     {\n+         StringBuilder builder = HtmlHelper.start( \"Index hits\", null );\n+         if ( data.isEmpty() )\n+         {\n+             HtmlHelper.appendMessage( builder, \"No index hits\" );\n+             return HtmlHelper.end( builder );\n+         }\n+         else\n+         {\n+             for( Map<?, ?> serialized : (List<Map<?, ?>>)\n+(List<?>) data)\n+             {\n+                 Map<Object,Object> map = new LinkedHashMap<>();\n+                 transfer( serialized, map, \"self\", \"data\" );\n+                 HtmlHelper.append( builder, map, HtmlHelper.ObjectType.NODE );\n+             }\n+\n+             return HtmlHelper.end( builder );\n+         }\n+     }\n+ }, RELATIONSHIPS\n     {\n-        NODES\n+        @Override String render( List<Object> data )\n         {\n-            @Override\n-            String render( List<Object> data )\n+            if ( data.isEmpty() )\n             {\n-                StringBuilder builder = HtmlHelper.start( \"Index hits\", null );\n-                if ( data.isEmpty() )\n-                {\n-                    HtmlHelper.appendMessage( builder, \"No index hits\" );\n-                    return HtmlHelper.end( builder );\n-                }\n-                else\n-                {\n-                    for ( Map<?, ?> serialized : (List<Map<?, ?>>) (List<?>) data )\n-                    {\n-                        Map<Object, Object> map = new LinkedHashMap<>();\n-                        transfer( serialized, map, \"self\", \"data\" );\n-                        HtmlHelper.append( builder, map, HtmlHelper.ObjectType.NODE );\n-                    }\n-                    return HtmlHelper.end( builder );\n-                }\n+                StringBuilder builder = HtmlHelper.start( HtmlHelper.ObjectType.RELATIONSHIP, null );\n+                HtmlHelper.appendMessage( builder, \"No relationships found\" );\n+                return HtmlHelper.end( builder );\n             }\n-        },\n-        RELATIONSHIPS\n-        {\n-            @Override\n-            String render( List<Object> data )\n+            else\n             {\n-                if ( data.isEmpty() )\n+                Collection<Object> list = new ArrayList<>();\n+                for( Map<?, ?> serialized : (List<Map<?, ?>>)\n+(List<?>) data)\n                 {\n-                    StringBuilder builder = HtmlHelper.start( HtmlHelper.ObjectType.RELATIONSHIP, null );\n-                    HtmlHelper.appendMessage( builder, \"No relationships found\" );\n-                    return HtmlHelper.end( builder );\n+                    Map<Object,Object> map = new LinkedHashMap<>();\n+                    transfer( serialized, map, \"self\", \"type\", \"data\", \"start\", \"end\" );\n+                    list.add( map );\n                 }\n-                else\n-                {\n-                    Collection<Object> list = new ArrayList<>();\n-                    for ( Map<?, ?> serialized : (List<Map<?, ?>>) (List<?>) data )\n-                    {\n-                        Map<Object, Object> map = new LinkedHashMap<>();\n-                        transfer( serialized, map, \"self\", \"type\", \"data\", \"start\", \"end\" );\n-                        list.add( map );\n-                    }\n-                    return HtmlHelper.from( list, HtmlHelper.ObjectType.RELATIONSHIP );\n-                }\n-            }\n-        };\n \n-        abstract String render( List<Object> data );\n+                return HtmlHelper.from( list, HtmlHelper.ObjectType.RELATIONSHIP );\n+            }\n+        }\n     }\n \n-    private static void transfer( Map<?, ?> from, Map<Object, Object> to, String... keys )\n+   ;\n+\n+       abstract String render( List<Object> data )\n+       ; }\n+\n+    private static void transfer( Map<?, ?> from, Map<Object,Object> to, String... keys )\n     {\n-        for ( String key : keys )\n+        for( String key : keys)\n         {\n             Object value = from.get( key );\n             if ( value != null )\n@@ -235,48 +216,33 @@ public class HtmlFormat extends RepresentationFormat\n         }\n     }\n \n-    private static String renderIndex( Map<String, Object> serialized )\n+    private static String renderIndex( Map<String,Object> serialized )\n     {\n         String javascript = \"\";\n         StringBuilder builder = HtmlHelper.start( HtmlHelper.ObjectType.INDEX_ROOT, javascript );\n         int counter = 0;\n-        for ( String indexName : serialized.keySet() )\n+        for( String indexName : serialized.keySet()\n+        )\n         {\n             Map<?, ?> indexMapObject = (Map<?, ?>) serialized.get( indexName );\n             builder.append( \"<ul>\" );\n             {\n-                builder.append( \"<li>\" );\n-                Map<?, ?> indexMap = indexMapObject;\n-                String keyId = \"key_\" + counter;\n-                String valueId = \"value_\" + counter;\n-                builder.append( \"<form action='javascript:neo4jHtmlBrowse.search(\\\"\" )\n-                        .append( indexMap.get( \"template\" ) )\n-                        .append( \"\\\",\\\"\" )\n-                        .append( keyId )\n-                        .append( \"\\\",\\\"\" )\n-                        .append( valueId )\n-                        .append( \"\\\");'><fieldset><legend> name: \" )\n-                        .append( indexName )\n-                        .append( \" (configuration: \" )\n-                        .append( indexMap.get( \"type\" ) )\n-                        .append( \")</legend>\\n\" );\n-                builder.append( \"<label for='\" )\n-                        .append( keyId )\n-                        .append( \"'>Key</label><input id='\" )\n-                        .append( keyId )\n-                        .append( \"'>\\n\" );\n-                builder.append( \"<label for='\" )\n-                        .append( valueId )\n-                        .append( \"'>Value</label><input id='\" )\n-                        .append( valueId )\n-                        .append( \"'>\\n\" );\n-                builder.append( \"<button>Search</button>\\n\" );\n-                builder.append( \"</fieldset></form>\\n\" );\n-                builder.append( \"</li>\\n\" );\n-                counter++;\n+            builder.append( \"<li>\" );\n+            Map<?, ?> indexMap = indexMapObject;\n+            String keyId = \"key_\" + counter;\n+            String valueId = \"value_\" + counter;\n+            builder.append( \"<form action='javascript:neo4jHtmlBrowse.search(\\\"\" ).append( indexMap.get( \"template\" ) ).append( \"\\\",\\\"\" ).append( keyId ).append( \"\\\",\\\"\" ).append( valueId ).append( \"\\\");'><fieldset><legend> name: \" ).append( indexName ).append( \" (configuration: \" ).append( indexMap.get( \"type\" ) ).append( \")</legend>\\n\" );\n+            builder.append( \"<label for='\" ).append( keyId ).append( \"'>Key</label><input id='\" ).append( keyId ).append( \"'>\\n\" );\n+            builder.append( \"<label for='\" ).append( valueId ).append( \"'>Value</label><input id='\" ).append( valueId ).append( \"'>\\n\" );\n+            builder.append( \"<button>Search</button>\\n\" );\n+            builder.append( \"</fieldset></form>\\n\" );\n+            builder.append( \"</li>\\n\" );\n+            counter++;\n             }\n+\n             builder.append( \"</ul>\" );\n         }\n+\n         return HtmlHelper.end( builder );\n     }\n \n@@ -315,13 +281,13 @@ public class HtmlFormat extends RepresentationFormat\n     @Override\n     protected String complete( ListWriter serializer )\n     {\n-        return ( (HtmlList) serializer ).complete();\n+        return ((HtmlList) serializer).complete();\n     }\n \n     @Override\n     protected String complete( MappingWriter serializer )\n     {\n-        return ( (HtmlMap) serializer ).complete();\n+        return ((HtmlMap) serializer).complete();\n     }\n \n     @Override\n@@ -331,15 +297,14 @@ public class HtmlFormat extends RepresentationFormat\n         {\n             return new HtmlList( ListTemplate.NODES );\n         }\n-        else if ( Representation.RELATIONSHIP_LIST.equals( type ) )\n+        else\n+        if ( Representation.RELATIONSHIP_LIST.equals( type ) )\n         {\n             return new HtmlList( ListTemplate.RELATIONSHIPS );\n         }\n         else\n         {\n-            throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE )\n-                    .entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" )\n-                    .build() );\n+            throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE ).entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" ).build() );\n         }\n     }\n \n@@ -349,50 +314,39 @@ public class HtmlFormat extends RepresentationFormat\n         MappingTemplate template = MappingTemplate.TEMPLATES.get( type );\n         if ( template == null )\n         {\n-            throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE )\n-                    .entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" )\n-                    .build() );\n+            throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE ).entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" ).build() );\n         }\n+\n         return new HtmlMap( template );\n     }\n \n     @Override\n     protected String serializeValue( String type, Object value )\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE )\n-                .entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" )\n-                .build() );\n+        throw new WebApplicationException( Response.status( Response.Status.NOT_ACCEPTABLE ).entity( \"Cannot represent \\\"\" + type + \"\\\" as html\" ).build() );\n     }\n \n     @Override\n     public List<Object> readList( String input )\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n+        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE ).entity( \"Cannot read html\" ).build() );\n     }\n \n     @Override\n-    public Map<String, Object> readMap( String input, String... requiredKeys )\n+    public Map<String,Object> readMap( String input, String... requiredKeys )\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n+        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE ).entity( \"Cannot read html\" ).build() );\n     }\n \n     @Override\n     public URI readUri( String input )\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n+        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE ).entity( \"Cannot read html\" ).build() );\n     }\n \n     @Override\n     public Object readValue( String input )\n     {\n-        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE )\n-                .entity( \"Cannot read html\" )\n-                .build() );\n+        throw new WebApplicationException( Response.status( Response.Status.UNSUPPORTED_MEDIA_TYPE ).entity( \"Cannot read html\" ).build() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 293
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}