{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3513",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3513/SchemaDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3513/SchemaDescriptor.java\nindex 45830b0245c..1dbea41c467 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3513/SchemaDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3513/SchemaDescriptor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api.schema;\n \n import java.util.function.Predicate;\n@@ -26,7 +27,7 @@ import org.neo4j.storageengine.api.lock.ResourceType;\n \n /**\n  * Internal representation of one schema unit, for example a label-property pair.\n- *\n+ * <p>\n  * Even when only supporting a small set of different schemas, the number of common methods is very small. This\n  * interface therefore supports a visitor type access pattern, results can be computed using the {#compute} method, and\n  * side-effect type logic performed using the processWith method. This means that when implementing this interface\n@@ -36,93 +37,97 @@ import org.neo4j.storageengine.api.lock.ResourceType;\n  */\n public interface SchemaDescriptor extends SchemaDescriptorSupplier\n {\n-    /**\n-     * Computes some value by feeding this object into the given SchemaComputer.\n-     *\n-     * Note that implementers of this method just need to call `return computer.compute( this );`.\n-     *\n-     * @param computer The SchemaComputer that hold the logic for the computation\n-     * @param <R> The return type\n-     * @return The result of the computation\n-     */\n-    <R> R computeWith( SchemaComputer<R> computer );\n+  /**\n+   * Computes some value by feeding this object into the given SchemaComputer.\n+   * <p>\n+   * Note that implementers of this method just need to call `return computer.compute( this );`.\n+   *\n+   * @param computer The SchemaComputer that hold the logic for the computation\n+   * @param <R>      The return type\n+   * @return The result of the computation\n+   */\n+  <R> R computeWith(SchemaComputer<R> computer);\n \n-    /**\n-     * Performs some side-effect type logic by processing this object using the given SchemaProcessor.\n-     *\n-     * Note that implementers of this method just need to call `return processor.process( this );`.\n-     *\n-     * @param processor The SchemaProcessor that hold the logic for the computation\n-     */\n-    void processWith( SchemaProcessor processor );\n+  /**\n+   * Performs some side-effect type logic by processing this object using the given SchemaProcessor.\n+   * <p>\n+   * Note that implementers of this method just need to call `return processor.process( this );`.\n+   *\n+   * @param processor The SchemaProcessor that hold the logic for the computation\n+   */\n+  void processWith(SchemaProcessor processor);\n \n-    /**\n-     * @param tokenNameLookup used for looking up names for token ids.\n-     * @return a user friendly description of what this index indexes.\n-     */\n-    String userDescription( TokenNameLookup tokenNameLookup );\n+  /**\n+   * @param tokenNameLookup used for looking up names for token ids.\n+   * @return a user friendly description of what this index indexes.\n+   */\n+  String userDescription(TokenNameLookup tokenNameLookup);\n \n-    /**\n-     * Translate the schema key to a key name using the given {@link TokenNameLookup}.\n-     * @param tokenNameLookup used for looking up names for token ids.\n-     * @return The string name of the key token.\n-     */\n-    String keyName( TokenNameLookup tokenNameLookup );\n+  /**\n+   * Translate the schema key to a key name using the given {@link TokenNameLookup}.\n+   *\n+   * @param tokenNameLookup used for looking up names for token ids.\n+   * @return The string name of the key token.\n+   */\n+  String keyName(TokenNameLookup tokenNameLookup);\n \n-    /**\n-     * This method return the property ids that are relevant to this Schema Descriptor.\n-     *\n-     * Putting this method here is a convenience that will break if/when we introduce more complicated schema\n-     * descriptors like paths, but until that point it is very useful.\n-     *\n-     * @return the property ids\n-     */\n-    int[] getPropertyIds();\n+  /**\n+   * This method return the property ids that are relevant to this Schema Descriptor.\n+   * <p>\n+   * Putting this method here is a convenience that will break if/when we introduce more complicated schema\n+   * descriptors like paths, but until that point it is very useful.\n+   *\n+   * @return the property ids\n+   */\n+  int[] getPropertyIds();\n \n-    /**\n-     * Assume that this schema descriptor describes a schema that includes a single property id, and return that id.\n-     *\n-     * @return The presumed single property id of this schema.\n-     * @throws IllegalStateException if this schema does not have exactly one property.\n-     */\n-    default int getPropertyId()\n+  /**\n+   * Assume that this schema descriptor describes a schema that includes a single property id, and return that id.\n+   *\n+   * @return The presumed single property id of this schema.\n+   * @throws IllegalStateException if this schema does not have exactly one property.\n+   */\n+  default int getPropertyId()\n+  {\n+    int[] propertyIds = getPropertyIds();\n+    if (propertyIds.length != 1)\n     {\n-        int[] propertyIds = getPropertyIds();\n-        if ( propertyIds.length != 1 )\n-        {\n-            throw new IllegalStateException(\n-                    \"Single property schema requires one property but had \" + propertyIds.length );\n-        }\n-        return propertyIds[0];\n+      throw new IllegalStateException(\n+          \"Single property schema requires one property but had \" + propertyIds.length);\n     }\n+    return propertyIds[0];\n+  }\n \n-    /**\n-     * Id of underlying schema descriptor key.\n-     * Key is part of schema unit that determines which resources with specified properties are applicable.\n-     * @return id of underlying key\n-     */\n-    int keyId();\n+  /**\n+   * Id of underlying schema descriptor key.\n+   * Key is part of schema unit that determines which resources with specified properties are applicable.\n+   *\n+   * @return id of underlying key\n+   */\n+  int keyId();\n \n-    /**\n-     * Type of underlying schema descriptor key.\n-     * Key is part of schema unit that determines which resources with specified properties are applicable.\n-     * @return type of underlying key\n-     */\n-    ResourceType keyType();\n+  /**\n+   * Type of underlying schema descriptor key.\n+   * Key is part of schema unit that determines which resources with specified properties are applicable.\n+   *\n+   * @return type of underlying key\n+   */\n+  ResourceType keyType();\n \n-    /**\n-     * Create a predicate that checks whether a schema descriptor Supplier supplies the given schema descriptor.\n-     * @param descriptor The schema descriptor to check equality with.\n-     * @return A predicate that returns {@code true} if it is given a schema descriptor supplier that supplies the\n-     * same schema descriptor as the given schema descriptor.\n-     */\n-    static <T extends SchemaDescriptorSupplier> Predicate<T> equalTo( SchemaDescriptor descriptor )\n-    {\n-        return supplier -> descriptor.equals( supplier.schema() );\n-    }\n+  /**\n+   * Create a predicate that checks whether a schema descriptor Supplier supplies the given schema descriptor.\n+   *\n+   * @param descriptor The schema descriptor to check equality with.\n+   * @return A predicate that returns {@code true} if it is given a schema descriptor supplier that supplies the\n+   * same schema descriptor as the given schema descriptor.\n+   */\n+  static <T extends SchemaDescriptorSupplier> Predicate<T> equalTo(SchemaDescriptor descriptor)\n+  {\n+    return supplier -> descriptor.equals(supplier.schema());\n+  }\n \n-    interface Supplier\n-    {\n-        SchemaDescriptor schema();\n-    }\n+  interface Supplier\n+  {\n+    SchemaDescriptor schema();\n+  }\n }\n",
            "diff_size": 89
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3513/SchemaDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3513/SchemaDescriptor.java\nindex 45830b0245c..7a225a9b03e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3513/SchemaDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3513/SchemaDescriptor.java\n@@ -90,10 +90,10 @@ public interface SchemaDescriptor extends SchemaDescriptorSupplier\n         int[] propertyIds = getPropertyIds();\n         if ( propertyIds.length != 1 )\n         {\n-            throw new IllegalStateException(\n-                    \"Single property schema requires one property but had \" + propertyIds.length );\n+            throw new IllegalStateException( \"Single property schema requires one property but had \" + propertyIds.length );\n         }\n-        return propertyIds[0];\n+\n+return propertyIds[0];\n     }\n \n     /**\n@@ -125,4 +125,4 @@ public interface SchemaDescriptor extends SchemaDescriptorSupplier\n     {\n         SchemaDescriptor schema();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}