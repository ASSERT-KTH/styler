{
    "project_name": "codefollower-H2-Research",
    "error_id": "258",
    "information": {
        "errors": [
            {
                "line": "62",
                "column": "33",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public void createIndexConditions(Session session, TableFilter filter) {\n        if (andOrType == AND) { //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n            left.createIndexConditions(session, filter);\n            right.createIndexConditions(session, filter);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/258/ConditionAndOr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/258/ConditionAndOr.java\nindex 0a442f10185..c318d1c033e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/258/ConditionAndOr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/258/ConditionAndOr.java\n@@ -59,8 +59,9 @@ public class ConditionAndOr extends Condition {\n \n     @Override\n     public void createIndexConditions(Session session, TableFilter filter) {\n-        if (andOrType == AND) { //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n-            left.createIndexConditions(session, filter);\n+        if (andOrType == AND) {\n+            //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n+             left.createIndexConditions(session, filter);\n             right.createIndexConditions(session, filter);\n         }\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "63",
                    "column": "29",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/258/ConditionAndOr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/258/ConditionAndOr.java\nindex 0a442f10185..e83bcadd76c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/258/ConditionAndOr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/258/ConditionAndOr.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression;\n \n import org.h2.engine.Session;\n@@ -19,281 +20,281 @@ import org.h2.value.ValueNull;\n  */\n public class ConditionAndOr extends Condition {\n \n-    /**\n-     * The AND condition type as in ID=1 AND NAME='Hello'.\n-     */\n-    public static final int AND = 0;\n+  /**\n+   * The AND condition type as in ID=1 AND NAME='Hello'.\n+   */\n+  public static final int AND = 0;\n \n-    /**\n-     * The OR condition type as in ID=1 OR NAME='Hello'.\n-     */\n-    public static final int OR = 1;\n+  /**\n+   * The OR condition type as in ID=1 OR NAME='Hello'.\n+   */\n+  public static final int OR = 1;\n \n-    private final int andOrType;\n-    private Expression left, right;\n+  private final int andOrType;\n+  private Expression left, right;\n \n-    public ConditionAndOr(int andOrType, Expression left, Expression right) {\n-        this.andOrType = andOrType;\n-        this.left = left;\n-        this.right = right;\n-        if (SysProperties.CHECK && (left == null || right == null)) {\n-            DbException.throwInternalError(left + \" \" + right);\n-        }\n+  public ConditionAndOr(int andOrType, Expression left, Expression right) {\n+    this.andOrType = andOrType;\n+    this.left = left;\n+    this.right = right;\n+    if (SysProperties.CHECK && (left == null || right == null)) {\n+      DbException.throwInternalError(left + \" \" + right);\n     }\n+  }\n \n-    @Override\n-    public String getSQL() {\n-        String sql;\n-        switch (andOrType) {\n-        case AND:\n-            sql = left.getSQL() + \"\\n    AND \" + right.getSQL();\n-            break;\n-        case OR:\n-            sql = left.getSQL() + \"\\n    OR \" + right.getSQL();\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"andOrType=\" + andOrType);\n-        }\n-        return \"(\" + sql + \")\";\n+  @Override\n+  public String getSQL() {\n+    String sql;\n+    switch (andOrType) {\n+      case AND:\n+        sql = left.getSQL() + \"\\n    AND \" + right.getSQL();\n+        break;\n+      case OR:\n+        sql = left.getSQL() + \"\\n    OR \" + right.getSQL();\n+        break;\n+      default:\n+        throw DbException.throwInternalError(\"andOrType=\" + andOrType);\n     }\n+    return \"(\" + sql + \")\";\n+  }\n \n-    @Override\n-    public void createIndexConditions(Session session, TableFilter filter) {\n-        if (andOrType == AND) { //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n-            left.createIndexConditions(session, filter);\n-            right.createIndexConditions(session, filter);\n-        }\n+  @Override\n+  public void createIndexConditions(Session session, TableFilter filter) {\n+    if (andOrType == AND) { //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n+      left.createIndexConditions(session, filter);\n+      right.createIndexConditions(session, filter);\n     }\n+  }\n \n-    @Override\n-    public Expression getNotIfPossible(Session session) {\n-        // (NOT (A OR B)): (NOT(A) AND NOT(B))\n-        // (NOT (A AND B)): (NOT(A) OR NOT(B))\n-        Expression l = left.getNotIfPossible(session);\n-        if (l == null) {\n-            l = new ConditionNot(left);\n-        }\n-        Expression r = right.getNotIfPossible(session);\n-        if (r == null) {\n-            r = new ConditionNot(right);\n-        }\n-        int reversed = andOrType == AND ? OR : AND;\n-        return new ConditionAndOr(reversed, l, r);\n+  @Override\n+  public Expression getNotIfPossible(Session session) {\n+    // (NOT (A OR B)): (NOT(A) AND NOT(B))\n+    // (NOT (A AND B)): (NOT(A) OR NOT(B))\n+    Expression l = left.getNotIfPossible(session);\n+    if (l == null) {\n+      l = new ConditionNot(left);\n     }\n+    Expression r = right.getNotIfPossible(session);\n+    if (r == null) {\n+      r = new ConditionNot(right);\n+    }\n+    int reversed = andOrType == AND ? OR : AND;\n+    return new ConditionAndOr(reversed, l, r);\n+  }\n \n-    @Override\n-    public Value getValue(Session session) {\n-        Value l = left.getValue(session);\n-        Value r;\n-        switch (andOrType) {\n-        case AND: {\n-            if (Boolean.FALSE.equals(l.getBoolean())) {\n-                return l;\n-            }\n-            r = right.getValue(session);\n-            if (Boolean.FALSE.equals(r.getBoolean())) {\n-                return r;\n-            }\n-            if (l == ValueNull.INSTANCE) {\n-                return l;\n-            }\n-            if (r == ValueNull.INSTANCE) {\n-                return r;\n-            }\n-            return ValueBoolean.get(true);\n+  @Override\n+  public Value getValue(Session session) {\n+    Value l = left.getValue(session);\n+    Value r;\n+    switch (andOrType) {\n+      case AND: {\n+        if (Boolean.FALSE.equals(l.getBoolean())) {\n+          return l;\n+        }\n+        r = right.getValue(session);\n+        if (Boolean.FALSE.equals(r.getBoolean())) {\n+          return r;\n+        }\n+        if (l == ValueNull.INSTANCE) {\n+          return l;\n+        }\n+        if (r == ValueNull.INSTANCE) {\n+          return r;\n+        }\n+        return ValueBoolean.get(true);\n+      }\n+      case OR: {\n+        if (Boolean.TRUE.equals(l.getBoolean())) {\n+          return l;\n+        }\n+        r = right.getValue(session);\n+        if (Boolean.TRUE.equals(r.getBoolean())) {\n+          return r;\n         }\n-        case OR: {\n-            if (Boolean.TRUE.equals(l.getBoolean())) {\n-                return l;\n-            }\n-            r = right.getValue(session);\n-            if (Boolean.TRUE.equals(r.getBoolean())) {\n-                return r;\n-            }\n-            if (l == ValueNull.INSTANCE) {\n-                return l;\n-            }\n-            if (r == ValueNull.INSTANCE) {\n-                return r;\n-            }\n-            return ValueBoolean.get(false);\n+        if (l == ValueNull.INSTANCE) {\n+          return l;\n         }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + andOrType);\n+        if (r == ValueNull.INSTANCE) {\n+          return r;\n         }\n+        return ValueBoolean.get(false);\n+      }\n+      default:\n+        throw DbException.throwInternalError(\"type=\" + andOrType);\n     }\n+  }\n \n-    @Override\n-    public Expression optimize(Session session) {\n-        // NULL handling: see wikipedia,\n-        // http://www-cs-students.stanford.edu/~wlam/compsci/sqlnulls\n-        left = left.optimize(session);\n-        right = right.optimize(session);\n-        //Cost\u4ee3\u4ef7\u5c11\u7684\u6362\u5de6\u8fb9\n-        int lc = left.getCost(), rc = right.getCost();\n-        if (rc < lc) {\n-            Expression t = left;\n-            left = right;\n-            right = t;\n+  @Override\n+  public Expression optimize(Session session) {\n+    // NULL handling: see wikipedia,\n+    // http://www-cs-students.stanford.edu/~wlam/compsci/sqlnulls\n+    left = left.optimize(session);\n+    right = right.optimize(session);\n+    //Cost\u4ee3\u4ef7\u5c11\u7684\u6362\u5de6\u8fb9\n+    int lc = left.getCost(), rc = right.getCost();\n+    if (rc < lc) {\n+      Expression t = left;\n+      left = right;\n+      right = t;\n+    }\n+    // this optimization does not work in the following case,\n+    // but NOT is optimized before:\n+    // CREATE TABLE TEST(A INT, B INT);\n+    // INSERT INTO TEST VALUES(1, NULL);\n+    // SELECT * FROM TEST WHERE NOT (B=A AND B=0); // no rows\n+    // SELECT * FROM TEST WHERE NOT (B=A AND B=0 AND A=0); // 1, NULL\n+    if (session.getDatabase().getSettings().optimizeTwoEquals &&\n+        andOrType == AND) {\n+      // try to add conditions (A=B AND B=1: add A=1)\n+      if (left instanceof Comparison && right instanceof Comparison) {\n+        Comparison compLeft = (Comparison) left;\n+        Comparison compRight = (Comparison) right;\n+        Expression added = compLeft.getAdditional(\n+            session, compRight, true);\n+        if (added != null) {\n+          added = added.optimize(session);\n+          ConditionAndOr a = new ConditionAndOr(AND, this, added);\n+          return a;\n         }\n-        // this optimization does not work in the following case,\n-        // but NOT is optimized before:\n-        // CREATE TABLE TEST(A INT, B INT);\n-        // INSERT INTO TEST VALUES(1, NULL);\n-        // SELECT * FROM TEST WHERE NOT (B=A AND B=0); // no rows\n-        // SELECT * FROM TEST WHERE NOT (B=A AND B=0 AND A=0); // 1, NULL\n-        if (session.getDatabase().getSettings().optimizeTwoEquals &&\n-                andOrType == AND) {\n-            // try to add conditions (A=B AND B=1: add A=1)\n-            if (left instanceof Comparison && right instanceof Comparison) {\n-                Comparison compLeft = (Comparison) left;\n-                Comparison compRight = (Comparison) right;\n-                Expression added = compLeft.getAdditional(\n-                        session, compRight, true);\n-                if (added != null) {\n-                    added = added.optimize(session);\n-                    ConditionAndOr a = new ConditionAndOr(AND, this, added);\n-                    return a;\n-                }\n-            }\n+      }\n+    }\n+    // TODO optimization: convert ((A=1 AND B=2) OR (A=1 AND B=3)) to\n+    // (A=1 AND (B=2 OR B=3))\n+    if (andOrType == OR &&\n+        session.getDatabase().getSettings().optimizeOr) {\n+      // try to add conditions (A=B AND B=1: add A=1)\n+      if (left instanceof Comparison &&\n+          right instanceof Comparison) {\n+        Comparison compLeft = (Comparison) left;\n+        Comparison compRight = (Comparison) right;\n+        Expression added = compLeft.getAdditional(\n+            session, compRight, false);\n+        if (added != null) {\n+          return added.optimize(session);\n         }\n-        // TODO optimization: convert ((A=1 AND B=2) OR (A=1 AND B=3)) to\n-        // (A=1 AND (B=2 OR B=3))\n-        if (andOrType == OR &&\n-                session.getDatabase().getSettings().optimizeOr) {\n-            // try to add conditions (A=B AND B=1: add A=1)\n-            if (left instanceof Comparison &&\n-                    right instanceof Comparison) {\n-                Comparison compLeft = (Comparison) left;\n-                Comparison compRight = (Comparison) right;\n-                Expression added = compLeft.getAdditional(\n-                        session, compRight, false);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (left instanceof ConditionIn &&\n-                    right instanceof Comparison) {\n-                Expression added = ((ConditionIn) left).\n-                        getAdditional((Comparison) right);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (right instanceof ConditionIn &&\n-                    left instanceof Comparison) {\n-                Expression added = ((ConditionIn) right).\n-                        getAdditional((Comparison) left);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (left instanceof ConditionInConstantSet &&\n-                    right instanceof Comparison) {\n-                Expression added = ((ConditionInConstantSet) left).\n-                        getAdditional(session, (Comparison) right);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (right instanceof ConditionInConstantSet &&\n-                    left instanceof Comparison) {\n-                Expression added = ((ConditionInConstantSet) right).\n-                        getAdditional(session, (Comparison) left);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            }\n+      } else if (left instanceof ConditionIn &&\n+          right instanceof Comparison) {\n+        Expression added = ((ConditionIn) left).\n+            getAdditional((Comparison) right);\n+        if (added != null) {\n+          return added.optimize(session);\n         }\n-        // TODO optimization: convert .. OR .. to UNION if the cost is lower\n-        Value l = left.isConstant() ? left.getValue(session) : null;\n-        Value r = right.isConstant() ? right.getValue(session) : null;\n-        if (l == null && r == null) {\n-            return this;\n+      } else if (right instanceof ConditionIn &&\n+          left instanceof Comparison) {\n+        Expression added = ((ConditionIn) right).\n+            getAdditional((Comparison) left);\n+        if (added != null) {\n+          return added.optimize(session);\n         }\n-        if (l != null && r != null) {\n-            return ValueExpression.get(getValue(session));\n+      } else if (left instanceof ConditionInConstantSet &&\n+          right instanceof Comparison) {\n+        Expression added = ((ConditionInConstantSet) left).\n+            getAdditional(session, (Comparison) right);\n+        if (added != null) {\n+          return added.optimize(session);\n         }\n-        switch (andOrType) {\n-        case AND:\n-            if (l != null) {\n-                if (Boolean.FALSE.equals(l.getBoolean())) {\n-                    return ValueExpression.get(l);\n-                } else if (Boolean.TRUE.equals(l.getBoolean())) {\n-                    return right;\n-                }\n-            } else if (r != null) {\n-                if (Boolean.FALSE.equals(r.getBoolean())) {\n-                    return ValueExpression.get(r);\n-                } else if (Boolean.TRUE.equals(r.getBoolean())) {\n-                    return left;\n-                }\n-            }\n-            break;\n-        case OR:\n-            if (l != null) {\n-                if (Boolean.TRUE.equals(l.getBoolean())) {\n-                    return ValueExpression.get(l);\n-                } else if (Boolean.FALSE.equals(l.getBoolean())) {\n-                    return right;\n-                }\n-            } else if (r != null) {\n-                if (Boolean.TRUE.equals(r.getBoolean())) {\n-                    return ValueExpression.get(r);\n-                } else if (Boolean.FALSE.equals(r.getBoolean())) {\n-                    return left;\n-                }\n-            }\n-            break;\n-        default:\n-            DbException.throwInternalError(\"type=\" + andOrType);\n+      } else if (right instanceof ConditionInConstantSet &&\n+          left instanceof Comparison) {\n+        Expression added = ((ConditionInConstantSet) right).\n+            getAdditional(session, (Comparison) left);\n+        if (added != null) {\n+          return added.optimize(session);\n         }\n-        return this;\n+      }\n     }\n-\n-    @Override\n-    public void addFilterConditions(TableFilter filter, boolean outerJoin) {\n-        if (andOrType == AND) {\n-            left.addFilterConditions(filter, outerJoin);\n-            right.addFilterConditions(filter, outerJoin);\n-        } else {\n-            super.addFilterConditions(filter, outerJoin);\n+    // TODO optimization: convert .. OR .. to UNION if the cost is lower\n+    Value l = left.isConstant() ? left.getValue(session) : null;\n+    Value r = right.isConstant() ? right.getValue(session) : null;\n+    if (l == null && r == null) {\n+      return this;\n+    }\n+    if (l != null && r != null) {\n+      return ValueExpression.get(getValue(session));\n+    }\n+    switch (andOrType) {\n+      case AND:\n+        if (l != null) {\n+          if (Boolean.FALSE.equals(l.getBoolean())) {\n+            return ValueExpression.get(l);\n+          } else if (Boolean.TRUE.equals(l.getBoolean())) {\n+            return right;\n+          }\n+        } else if (r != null) {\n+          if (Boolean.FALSE.equals(r.getBoolean())) {\n+            return ValueExpression.get(r);\n+          } else if (Boolean.TRUE.equals(r.getBoolean())) {\n+            return left;\n+          }\n+        }\n+        break;\n+      case OR:\n+        if (l != null) {\n+          if (Boolean.TRUE.equals(l.getBoolean())) {\n+            return ValueExpression.get(l);\n+          } else if (Boolean.FALSE.equals(l.getBoolean())) {\n+            return right;\n+          }\n+        } else if (r != null) {\n+          if (Boolean.TRUE.equals(r.getBoolean())) {\n+            return ValueExpression.get(r);\n+          } else if (Boolean.FALSE.equals(r.getBoolean())) {\n+            return left;\n+          }\n         }\n+        break;\n+      default:\n+        DbException.throwInternalError(\"type=\" + andOrType);\n     }\n+    return this;\n+  }\n \n-    @Override\n-    public void mapColumns(ColumnResolver resolver, int level) {\n-        left.mapColumns(resolver, level);\n-        right.mapColumns(resolver, level);\n+  @Override\n+  public void addFilterConditions(TableFilter filter, boolean outerJoin) {\n+    if (andOrType == AND) {\n+      left.addFilterConditions(filter, outerJoin);\n+      right.addFilterConditions(filter, outerJoin);\n+    } else {\n+      super.addFilterConditions(filter, outerJoin);\n     }\n+  }\n \n-    @Override\n-    public void setEvaluatable(TableFilter tableFilter, boolean b) {\n-        left.setEvaluatable(tableFilter, b);\n-        right.setEvaluatable(tableFilter, b);\n-    }\n+  @Override\n+  public void mapColumns(ColumnResolver resolver, int level) {\n+    left.mapColumns(resolver, level);\n+    right.mapColumns(resolver, level);\n+  }\n \n-    @Override\n-    public void updateAggregate(Session session) {\n-        left.updateAggregate(session);\n-        right.updateAggregate(session);\n-    }\n+  @Override\n+  public void setEvaluatable(TableFilter tableFilter, boolean b) {\n+    left.setEvaluatable(tableFilter, b);\n+    right.setEvaluatable(tableFilter, b);\n+  }\n \n-    @Override\n-    public boolean isEverything(ExpressionVisitor visitor) {\n-        return left.isEverything(visitor) && right.isEverything(visitor);\n-    }\n+  @Override\n+  public void updateAggregate(Session session) {\n+    left.updateAggregate(session);\n+    right.updateAggregate(session);\n+  }\n \n-    @Override\n-    public int getCost() {\n-        return left.getCost() + right.getCost();\n-    }\n+  @Override\n+  public boolean isEverything(ExpressionVisitor visitor) {\n+    return left.isEverything(visitor) && right.isEverything(visitor);\n+  }\n \n-    /**\n-     * Get the left or the right sub-expression of this condition.\n-     *\n-     * @param getLeft true to get the left sub-expression, false to get the\n-     *            right sub-expression.\n-     * @return the sub-expression\n-     */\n-    public Expression getExpression(boolean getLeft) {\n-        return getLeft ? this.left : right;\n-    }\n+  @Override\n+  public int getCost() {\n+    return left.getCost() + right.getCost();\n+  }\n+\n+  /**\n+   * Get the left or the right sub-expression of this condition.\n+   *\n+   * @param getLeft true to get the left sub-expression, false to get the\n+   *                right sub-expression.\n+   * @return the sub-expression\n+   */\n+  public Expression getExpression(boolean getLeft) {\n+    return getLeft ? this.left : right;\n+  }\n \n }\n",
            "diff_size": 338
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "67",
                    "column": "33",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/258/ConditionAndOr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/258/ConditionAndOr.java\nindex 0a442f10185..6561d060249 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/258/ConditionAndOr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/258/ConditionAndOr.java\n@@ -17,18 +17,23 @@ import org.h2.value.ValueNull;\n /**\n  * An 'and' or 'or' condition as in WHERE ID=1 AND NAME=?\n  */\n+\n+\n public class ConditionAndOr extends Condition {\n \n     /**\n      * The AND condition type as in ID=1 AND NAME='Hello'.\n      */\n+\n+\n     public static final int AND = 0;\n \n     /**\n      * The OR condition type as in ID=1 OR NAME='Hello'.\n      */\n-    public static final int OR = 1;\n \n+\n+    public static final int OR = 1;\n     private final int andOrType;\n     private Expression left, right;\n \n@@ -142,14 +147,12 @@ public class ConditionAndOr extends Condition {\n         // INSERT INTO TEST VALUES(1, NULL);\n         // SELECT * FROM TEST WHERE NOT (B=A AND B=0); // no rows\n         // SELECT * FROM TEST WHERE NOT (B=A AND B=0 AND A=0); // 1, NULL\n-        if (session.getDatabase().getSettings().optimizeTwoEquals &&\n-                andOrType == AND) {\n+        if (session.getDatabase().getSettings().optimizeTwoEquals && andOrType == AND) {\n             // try to add conditions (A=B AND B=1: add A=1)\n             if (left instanceof Comparison && right instanceof Comparison) {\n                 Comparison compLeft = (Comparison) left;\n                 Comparison compRight = (Comparison) right;\n-                Expression added = compLeft.getAdditional(\n-                        session, compRight, true);\n+                Expression added = compLeft.getAdditional(session, compRight, true);\n                 if (added != null) {\n                     added = added.optimize(session);\n                     ConditionAndOr a = new ConditionAndOr(AND, this, added);\n@@ -159,47 +162,36 @@ public class ConditionAndOr extends Condition {\n         }\n         // TODO optimization: convert ((A=1 AND B=2) OR (A=1 AND B=3)) to\n         // (A=1 AND (B=2 OR B=3))\n-        if (andOrType == OR &&\n-                session.getDatabase().getSettings().optimizeOr) {\n+        if (andOrType == OR && session.getDatabase().getSettings().optimizeOr) {\n             // try to add conditions (A=B AND B=1: add A=1)\n-            if (left instanceof Comparison &&\n-                    right instanceof Comparison) {\n+            if (left instanceof Comparison && right instanceof Comparison) {\n                 Comparison compLeft = (Comparison) left;\n                 Comparison compRight = (Comparison) right;\n-                Expression added = compLeft.getAdditional(\n-                        session, compRight, false);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (left instanceof ConditionIn &&\n-                    right instanceof Comparison) {\n-                Expression added = ((ConditionIn) left).\n-                        getAdditional((Comparison) right);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (right instanceof ConditionIn &&\n-                    left instanceof Comparison) {\n-                Expression added = ((ConditionIn) right).\n-                        getAdditional((Comparison) left);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (left instanceof ConditionInConstantSet &&\n-                    right instanceof Comparison) {\n-                Expression added = ((ConditionInConstantSet) left).\n-                        getAdditional(session, (Comparison) right);\n+                Expression added = compLeft.getAdditional(session, compRight, false);\n                 if (added != null) {\n                     return added.optimize(session);\n                 }\n-            } else if (right instanceof ConditionInConstantSet &&\n-                    left instanceof Comparison) {\n-                Expression added = ((ConditionInConstantSet) right).\n-                        getAdditional(session, (Comparison) left);\n+            } else if (left instanceof ConditionIn && right instanceof Comparison) {\n+                Expression added = ((ConditionIn) left).getAdditional((Comparison) right);\n                 if (added != null) {\n                     return added.optimize(session);\n                 }\n-            }\n+                                                                               } else if (right instanceof ConditionIn && left instanceof Comparison) {\n+                       Expression added = ((ConditionIn) right).getAdditional((Comparison) left);\n+                       if (added != null) {\n+                           return added.optimize(session);\n+                       }\n+            } else if (left instanceof ConditionInConstantSet && right instanceof Comparison) {\n+                                                                                          Expression added = ((ConditionInConstantSet) left).getAdditional(session, (Comparison) right);\n+                                                                                          if (added != null) {\n+                                                                                              return added.optimize(session);\n+                                                                                          }\n+            } else if (right instanceof ConditionInConstantSet && left instanceof Comparison) {\n+                       Expression added = ((ConditionInConstantSet) right).getAdditional(session, (Comparison) left);\n+                       if (added != null) {\n+                           return added.optimize(session);\n+                       }\n+                   }\n         }\n         // TODO optimization: convert .. OR .. to UNION if the cost is lower\n         Value l = left.isConstant() ? left.getValue(session) : null;\n@@ -292,8 +284,10 @@ public class ConditionAndOr extends Condition {\n      *            right sub-expression.\n      * @return the sub-expression\n      */\n+\n+\n     public Expression getExpression(boolean getLeft) {\n         return getLeft ? this.left : right;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 61
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/258/ConditionAndOr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/258/ConditionAndOr.java\nindex 0a442f10185..c318d1c033e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/258/ConditionAndOr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/258/ConditionAndOr.java\n@@ -59,8 +59,9 @@ public class ConditionAndOr extends Condition {\n \n     @Override\n     public void createIndexConditions(Session session, TableFilter filter) {\n-        if (andOrType == AND) { //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n-            left.createIndexConditions(session, filter);\n+        if (andOrType == AND) {\n+            //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n+             left.createIndexConditions(session, filter);\n             right.createIndexConditions(session, filter);\n         }\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/258/ConditionAndOr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/258/ConditionAndOr.java\nindex 0a442f10185..59268854038 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/258/ConditionAndOr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/258/ConditionAndOr.java\n@@ -59,8 +59,9 @@ public class ConditionAndOr extends Condition {\n \n     @Override\n     public void createIndexConditions(Session session, TableFilter filter) {\n-        if (andOrType == AND) { //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n-            left.createIndexConditions(session, filter);\n+        if (andOrType == AND) {\n+    //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n+        left.createIndexConditions(session, filter);\n             right.createIndexConditions(session, filter);\n         }\n     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}