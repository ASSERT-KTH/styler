{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3999",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3999/ErrorReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3999/ErrorReporter.java\nindex 82752e79a37..1bcd1e32650 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3999/ErrorReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3999/ErrorReporter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v1.runtime;\n \n import org.neo4j.kernel.impl.logging.LogService;\n@@ -32,45 +33,45 @@ import static org.neo4j.kernel.api.exceptions.Status.Classification.DatabaseErro\n  */\n class ErrorReporter\n {\n-    private final Log userLog;\n-    private final Log debugLog;\n+  private final Log userLog;\n+  private final Log debugLog;\n \n-    ErrorReporter( LogService logging )\n-    {\n-        this.userLog = logging.getUserLog( ErrorReporter.class );\n-        this.debugLog = logging.getInternalLog( ErrorReporter.class );\n-    }\n+  ErrorReporter(LogService logging)\n+  {\n+    this.userLog = logging.getUserLog(ErrorReporter.class);\n+    this.debugLog = logging.getInternalLog(ErrorReporter.class);\n+  }\n \n-    ErrorReporter( Log userLog, Log debugLog )\n-    {\n-        this.userLog = userLog;\n-        this.debugLog = debugLog;\n-    }\n+  ErrorReporter(Log userLog, Log debugLog)\n+  {\n+    this.userLog = userLog;\n+    this.debugLog = debugLog;\n+  }\n \n-    /**\n-     * Writes logs about database errors.\n-     * Short one-line message is written to both user and internal log.\n-     * Large message with stacktrace (if available) is written to internal log.\n-     *\n-     * @param error the error to log.\n-     * @see StoreLogService\n-     * @see DuplicatingLogProvider\n-     */\n-    public void report( Neo4jError error )\n+  /**\n+   * Writes logs about database errors.\n+   * Short one-line message is written to both user and internal log.\n+   * Large message with stacktrace (if available) is written to internal log.\n+   *\n+   * @param error the error to log.\n+   * @see StoreLogService\n+   * @see DuplicatingLogProvider\n+   */\n+  public void report(Neo4jError error)\n+  {\n+    if (error.status().code().classification() == DatabaseError)\n     {\n-        if ( error.status().code().classification() == DatabaseError )\n-        {\n-            String message = format( \"Client triggered an unexpected error [%s]: %s, reference %s.\",\n-                    error.status().code().serialize(), error.message(), error.reference() );\n+      String message = format(\"Client triggered an unexpected error [%s]: %s, reference %s.\",\n+          error.status().code().serialize(), error.message(), error.reference());\n \n-            // Writing to user log gets duplicated to the internal log\n-            userLog.error( message );\n+      // Writing to user log gets duplicated to the internal log\n+      userLog.error(message);\n \n-            // If cause/stacktrace is available write it to the internal log\n-            if ( error.cause() != null )\n-            {\n-                debugLog.error( message, error.cause() );\n-            }\n-        }\n+      // If cause/stacktrace is available write it to the internal log\n+      if (error.cause() != null)\n+      {\n+        debugLog.error(message, error.cause());\n+      }\n     }\n+  }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3999/ErrorReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3999/ErrorReporter.java\nindex 82752e79a37..cae6f0e6c53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3999/ErrorReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3999/ErrorReporter.java\n@@ -62,8 +62,7 @@ class ErrorReporter\n         {\n             String message = format( \"Client triggered an unexpected error [%s]: %s, reference %s.\",\n                     error.status().code().serialize(), error.message(), error.reference() );\n-\n-            // Writing to user log gets duplicated to the internal log\n+    // Writing to user log gets duplicated to the internal log\n             userLog.error( message );\n \n             // If cause/stacktrace is available write it to the internal log\n@@ -73,4 +72,4 @@ class ErrorReporter\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}