{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "387",
    "information": {
        "errors": [
            {
                "line": "30",
                "column": "60",
                "severity": "warning",
                "message": "WhitespaceAround: '{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": " * Base class for a Google BigQuery table type.\n */\npublic abstract class BaseTableType implements Serializable{\n\n  private static final long serialVersionUID = -374760330662959529L;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/387/BaseTableType.java\nindex f61953e9fe0..fa1ba8883f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/387/BaseTableType.java\n@@ -27,7 +27,7 @@ import java.util.Objects;\n /**\n  * Base class for a Google BigQuery table type.\n  */\n-public abstract class BaseTableType implements Serializable{\n+public abstract class BaseTableType implements Serializable {\n \n   private static final long serialVersionUID = -374760330662959529L;\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/387/BaseTableType.java\nindex f61953e9fe0..766de572502 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/387/BaseTableType.java\n@@ -27,7 +27,7 @@ import java.util.Objects;\n /**\n  * Base class for a Google BigQuery table type.\n  */\n-public abstract class BaseTableType implements Serializable{\n+public abstract class BaseTableType implements Serializable {\n \n   private static final long serialVersionUID = -374760330662959529L;\n \n@@ -54,7 +54,7 @@ public abstract class BaseTableType implements Serializable{\n      * are implemented by {@link ExternalTableType}.\n      *\n      * @see <a href=\"https://cloud.google.com/bigquery/federated-data-sources\">Federated Data\n-     *     Sources</a>\n+     * Sources</a>\n      */\n     EXTERNAL\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "'switch rcurly' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/387/BaseTableType.java\nindex f61953e9fe0..1a25853a74f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/387/BaseTableType.java\n@@ -27,7 +27,7 @@ import java.util.Objects;\n /**\n  * Base class for a Google BigQuery table type.\n  */\n-public abstract class BaseTableType implements Serializable{\n+public abstract class BaseTableType implements Serializable {\n \n   private static final long serialVersionUID = -374760330662959529L;\n \n@@ -35,7 +35,8 @@ public abstract class BaseTableType implements Serializable{\n    * The table type.\n    */\n   public enum Type {\n-    /**\n+\n+  /**\n      * A normal BigQuery table. Instances of {@code BaseTableType} for this type are implemented by\n      * {@link DefaultTableType}.\n      */\n@@ -177,6 +178,6 @@ public abstract class BaseTableType implements Serializable{\n       default:\n         // never reached\n         throw new IllegalArgumentException(\"Format \" + tablePb.getType() + \" is not supported\");\n-    }\n   }\n-}\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "176",
                    "column": "11",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'switch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "180",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "182",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 46, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/387/BaseTableType.java\nindex f61953e9fe0..95b8ebce893 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/387/BaseTableType.java\n@@ -20,25 +20,28 @@ import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.api.services.bigquery.model.Table;\n import com.google.common.base.MoreObjects;\n-\n import java.io.Serializable;\n import java.util.Objects;\n \n /**\n  * Base class for a Google BigQuery table type.\n  */\n-public abstract class BaseTableType implements Serializable{\n+\n+\n+public abstract class BaseTableType implements Serializable {\n \n   private static final long serialVersionUID = -374760330662959529L;\n \n   /**\n    * The table type.\n    */\n+\n   public enum Type {\n     /**\n      * A normal BigQuery table. Instances of {@code BaseTableType} for this type are implemented by\n      * {@link DefaultTableType}.\n      */\n+\n     TABLE,\n \n     /**\n@@ -46,8 +49,7 @@ public abstract class BaseTableType implements Serializable{\n      * implemented by {@link ViewType}.\n      *\n      * @see <a href=\"https://cloud.google.com/bigquery/querying-data#views\">Views</a>\n-     */\n-    VIEW,\n+     */ VIEW,\n \n     /**\n      * A BigQuery table backed by external data. Instances of {@code BaseTableType} for this type\n@@ -55,8 +57,7 @@ public abstract class BaseTableType implements Serializable{\n      *\n      * @see <a href=\"https://cloud.google.com/bigquery/federated-data-sources\">Federated Data\n      *     Sources</a>\n-     */\n-    EXTERNAL\n+     */ EXTERNAL\n   }\n \n   private final Type type;\n@@ -68,6 +69,7 @@ public abstract class BaseTableType implements Serializable{\n    * @param <T> the table type class\n    * @param <B> the table type builder\n    */\n+\n   public abstract static class Builder<T extends BaseTableType, B extends Builder<T, B>> {\n \n     private Type type;\n@@ -102,6 +104,7 @@ public abstract class BaseTableType implements Serializable{\n     /**\n      * Sets the table schema.\n      */\n+\n     public B schema(Schema schema) {\n       this.schema = checkNotNull(schema);\n       return self();\n@@ -110,6 +113,7 @@ public abstract class BaseTableType implements Serializable{\n     /**\n      * Creates an object.\n      */\n+\n     public abstract T build();\n   }\n \n@@ -123,6 +127,7 @@ public abstract class BaseTableType implements Serializable{\n    * If this table is an external table this method returns {@link Type#EXTERNAL}. If this table is\n    * a view table this method returns {@link Type#VIEW}.\n    */\n+\n   public Type type() {\n     return type;\n   }\n@@ -130,6 +135,7 @@ public abstract class BaseTableType implements Serializable{\n   /**\n    * Returns the table's schema.\n    */\n+\n   public Schema schema() {\n     return schema;\n   }\n@@ -137,8 +143,8 @@ public abstract class BaseTableType implements Serializable{\n   /**\n    * Returns a builder for the object.\n    */\n-  public abstract Builder toBuilder();\n \n+  public abstract Builder toBuilder();\n   MoreObjects.ToStringHelper toStringHelper() {\n     return MoreObjects.toStringHelper(this).add(\"type\", type).add(\"schema\", schema);\n   }\n@@ -167,16 +173,16 @@ public abstract class BaseTableType implements Serializable{\n \n   @SuppressWarnings(\"unchecked\")\n   static <T extends BaseTableType> T fromPb(Table tablePb) {\n-    switch (Type.valueOf(tablePb.getType())) {\n+    switch(Type.valueOf(tablePb.getType())) {\n       case TABLE:\n-        return (T) DefaultTableType.fromPb(tablePb);\n+                                              return (T) DefaultTableType.fromPb(tablePb);\n       case VIEW:\n-        return (T) ViewType.fromPb(tablePb);\n+                                              return (T) ViewType.fromPb(tablePb);\n       case EXTERNAL:\n-        return (T) ExternalTableType.fromPb(tablePb);\n+                                              return (T) ExternalTableType.fromPb(tablePb);\n       default:\n         // never reached\n-        throw new IllegalArgumentException(\"Format \" + tablePb.getType() + \" is not supported\");\n+                                              throw new IllegalArgumentException(\"Format \" + tablePb.getType() + \" is not supported\");\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/387/BaseTableType.java\nindex f61953e9fe0..fa1ba8883f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/387/BaseTableType.java\n@@ -27,7 +27,7 @@ import java.util.Objects;\n /**\n  * Base class for a Google BigQuery table type.\n  */\n-public abstract class BaseTableType implements Serializable{\n+public abstract class BaseTableType implements Serializable {\n \n   private static final long serialVersionUID = -374760330662959529L;\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/387/BaseTableType.java\nindex f61953e9fe0..fa1ba8883f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/387/BaseTableType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/387/BaseTableType.java\n@@ -27,7 +27,7 @@ import java.util.Objects;\n /**\n  * Base class for a Google BigQuery table type.\n  */\n-public abstract class BaseTableType implements Serializable{\n+public abstract class BaseTableType implements Serializable {\n \n   private static final long serialVersionUID = -374760330662959529L;\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}