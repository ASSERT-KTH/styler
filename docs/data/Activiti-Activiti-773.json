{
    "project_name": "Activiti-Activiti",
    "error_id": "773",
    "information": {
        "errors": [
            {
                "line": "80",
                "severity": "error",
                "message": "'CLASS_DEF' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npublic class RuntimeServiceImpl extends ServiceImpl implements RuntimeService {\n\n    public ProcessInstance startProcessInstanceByKey(String processDefinitionKey) {\n        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, null, null));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/773/RuntimeServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/773/RuntimeServiceImpl.java\nindex 4063c7393fe..5af49b8ca86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/773/RuntimeServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/773/RuntimeServiceImpl.java\n@@ -76,7 +76,6 @@ import org.activiti.engine.task.Event;\n import org.activiti.engine.task.IdentityLink;\n import org.activiti.engine.task.IdentityLinkType;\n \n-\n public class RuntimeServiceImpl extends ServiceImpl implements RuntimeService {\n \n     public ProcessInstance startProcessInstanceByKey(String processDefinitionKey) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/773/RuntimeServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/773/RuntimeServiceImpl.java\nindex 4063c7393fe..35732c54237 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/773/RuntimeServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/773/RuntimeServiceImpl.java\n@@ -22,7 +22,6 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import org.activiti.bpmn.model.FlowNode;\n import org.activiti.engine.ActivitiIllegalArgumentException;\n import org.activiti.engine.RuntimeService;\n@@ -79,472 +78,559 @@ import org.activiti.engine.task.IdentityLinkType;\n \n public class RuntimeServiceImpl extends ServiceImpl implements RuntimeService {\n \n-    public ProcessInstance startProcessInstanceByKey(String processDefinitionKey) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, null, null));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByKey(String processDefinitionKey, String businessKey) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, businessKey, null));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByKey(String processDefinitionKey, Map<String, Object> variables) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, null, variables));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByKey(String processDefinitionKey, String businessKey, Map<String, Object> variables) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, businessKey, variables));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByKeyAndTenantId(String processDefinitionKey, String tenantId) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, null, null, tenantId));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByKeyAndTenantId(String processDefinitionKey, String businessKey, String tenantId) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, businessKey, null, tenantId));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByKeyAndTenantId(String processDefinitionKey, Map<String, Object> variables, String tenantId) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, null, variables, tenantId));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByKeyAndTenantId(String processDefinitionKey, String businessKey, Map<String, Object> variables, String tenantId) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, businessKey, variables, tenantId));\n-    }\n-\n-    public ProcessInstance startProcessInstanceById(String processDefinitionId) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(null, processDefinitionId, null, null));\n-    }\n-\n-    public ProcessInstance startProcessInstanceById(String processDefinitionId, String businessKey) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(null, processDefinitionId, businessKey, null));\n-    }\n-\n-    public ProcessInstance startProcessInstanceById(String processDefinitionId, Map<String, Object> variables) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(null, processDefinitionId, null, variables));\n-    }\n-\n-    public ProcessInstance startProcessInstanceById(String processDefinitionId, String businessKey, Map<String, Object> variables) {\n-        return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(null, processDefinitionId, businessKey, variables));\n-    }\n-\n-    public void deleteProcessInstance(String processInstanceId, String deleteReason) {\n-        commandExecutor.execute(new DeleteProcessInstanceCmd(processInstanceId, deleteReason));\n-    }\n-\n-    public ExecutionQuery createExecutionQuery() {\n-        return new ExecutionQueryImpl(commandExecutor);\n-    }\n-\n-    public NativeExecutionQuery createNativeExecutionQuery() {\n-        return new NativeExecutionQueryImpl(commandExecutor);\n-    }\n-\n-    public NativeProcessInstanceQuery createNativeProcessInstanceQuery() {\n-        return new NativeProcessInstanceQueryImpl(commandExecutor);\n-    }\n-\n-    public void updateBusinessKey(String processInstanceId, String businessKey) {\n-        commandExecutor.execute(new SetProcessInstanceBusinessKeyCmd(processInstanceId, businessKey));\n-    }\n-\n-    public Map<String, Object> getVariables(String executionId) {\n-        return commandExecutor.execute(new GetExecutionVariablesCmd(executionId, null, false));\n-    }\n-\n-    public Map<String, VariableInstance> getVariableInstances(String executionId) {\n-        return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, null, false));\n-    }\n-\n-    public List<VariableInstance> getVariableInstancesByExecutionIds(Set<String> executionIds) {\n-        return commandExecutor.execute(new GetExecutionsVariablesCmd(executionIds));\n-    }\n-\n-    public Map<String, Object> getVariablesLocal(String executionId) {\n-        return commandExecutor.execute(new GetExecutionVariablesCmd(executionId, null, true));\n-    }\n-\n-    public Map<String, VariableInstance> getVariableInstancesLocal(String executionId) {\n-        return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, null, true));\n-    }\n-\n-    public Map<String, Object> getVariables(String executionId, Collection<String> variableNames) {\n-        return commandExecutor.execute(new GetExecutionVariablesCmd(executionId, variableNames, false));\n-    }\n-\n-    public Map<String, VariableInstance> getVariableInstances(String executionId, Collection<String> variableNames) {\n-        return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false));\n-    }\n-\n-    public Map<String, Object> getVariablesLocal(String executionId, Collection<String> variableNames) {\n-        return commandExecutor.execute(new GetExecutionVariablesCmd(executionId, variableNames, true));\n-    }\n-\n-    public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames) {\n-        return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true));\n-    }\n-\n-    public Object getVariable(String executionId, String variableName) {\n-        return commandExecutor.execute(new GetExecutionVariableCmd(executionId, variableName, false));\n-    }\n-\n-    public VariableInstance getVariableInstance(String executionId, String variableName) {\n-        return commandExecutor.execute(new GetExecutionVariableInstanceCmd(executionId, variableName, false));\n-    }\n-\n-    public <T> T getVariable(String executionId, String variableName, Class<T> variableClass) {\n-        return variableClass.cast(getVariable(executionId, variableName));\n-    }\n-\n-    public boolean hasVariable(String executionId, String variableName) {\n-        return commandExecutor.execute(new HasExecutionVariableCmd(executionId, variableName, false));\n-    }\n-\n-    public Object getVariableLocal(String executionId, String variableName) {\n-        return commandExecutor.execute(new GetExecutionVariableCmd(executionId, variableName, true));\n-    }\n-\n-    public VariableInstance getVariableInstanceLocal(String executionId, String variableName) {\n-        return commandExecutor.execute(new GetExecutionVariableInstanceCmd(executionId, variableName, true));\n-    }\n-\n-    public <T> T getVariableLocal(String executionId, String variableName, Class<T> variableClass) {\n-        return variableClass.cast(getVariableLocal(executionId, variableName));\n-    }\n-\n-    public boolean hasVariableLocal(String executionId, String variableName) {\n-        return commandExecutor.execute(new HasExecutionVariableCmd(executionId, variableName, true));\n-    }\n-\n-    public void setVariable(String executionId, String variableName, Object value) {\n-        if (variableName == null) {\n-            throw new ActivitiIllegalArgumentException(\"variableName is null\");\n-        }\n-        Map<String, Object> variables = new HashMap<String, Object>();\n-        variables.put(variableName, value);\n-        commandExecutor.execute(new SetExecutionVariablesCmd(executionId, variables, false));\n-    }\n-\n-    public void setVariableLocal(String executionId, String variableName, Object value) {\n-        if (variableName == null) {\n-            throw new ActivitiIllegalArgumentException(\"variableName is null\");\n-        }\n-        Map<String, Object> variables = new HashMap<String, Object>();\n-        variables.put(variableName, value);\n-        commandExecutor.execute(new SetExecutionVariablesCmd(executionId, variables, true));\n-    }\n-\n-    public void setVariables(String executionId, Map<String, ? extends Object> variables) {\n-        commandExecutor.execute(new SetExecutionVariablesCmd(executionId, variables, false));\n-    }\n-\n-    public void setVariablesLocal(String executionId, Map<String, ? extends Object> variables) {\n-        commandExecutor.execute(new SetExecutionVariablesCmd(executionId, variables, true));\n-    }\n-\n-    public void removeVariable(String executionId, String variableName) {\n-        Collection<String> variableNames = new ArrayList<String>(1);\n-        variableNames.add(variableName);\n-        commandExecutor.execute(new RemoveExecutionVariablesCmd(executionId, variableNames, false));\n-    }\n-\n-    public void removeVariableLocal(String executionId, String variableName) {\n-        Collection<String> variableNames = new ArrayList<String>();\n-        variableNames.add(variableName);\n-        commandExecutor.execute(new RemoveExecutionVariablesCmd(executionId, variableNames, true));\n-    }\n-\n-    public void removeVariables(String executionId, Collection<String> variableNames) {\n-        commandExecutor.execute(new RemoveExecutionVariablesCmd(executionId, variableNames, false));\n-    }\n-\n-    public void removeVariablesLocal(String executionId, Collection<String> variableNames) {\n-        commandExecutor.execute(new RemoveExecutionVariablesCmd(executionId, variableNames, true));\n-    }\n-\n-    @Override\n-    public Map<String, DataObject> getDataObjects(String executionId) {\n-        return commandExecutor.execute(new GetDataObjectsCmd(executionId, null, false));\n-    }\n-\n-    @Override\n-    public Map<String, DataObject> getDataObjects(String executionId, String locale, boolean withLocalizationFallback) {\n-        return commandExecutor.execute(new GetDataObjectsCmd(executionId, null, false, locale, withLocalizationFallback));\n-    }\n-\n-    @Override\n-    public Map<String, DataObject> getDataObjectsLocal(String executionId) {\n-        return commandExecutor.execute(new GetDataObjectsCmd(executionId, null, true));\n-    }\n-\n-    @Override\n-    public Map<String, DataObject> getDataObjectsLocal(String executionId, String locale, boolean withLocalizationFallback) {\n-        return commandExecutor.execute(new GetDataObjectsCmd(executionId, null, true, locale, withLocalizationFallback));\n-    }\n-\n-    @Override\n-    public Map<String, DataObject> getDataObjects(String executionId, Collection<String> dataObjectNames) {\n-        return commandExecutor.execute(new GetDataObjectsCmd(executionId, dataObjectNames, false));\n-    }\n-\n-    @Override\n-    public Map<String, DataObject> getDataObjects(String executionId, Collection<String> dataObjectNames, String locale, boolean withLocalizationFallback) {\n-        return commandExecutor.execute(new GetDataObjectsCmd(executionId, dataObjectNames, false, locale, withLocalizationFallback));\n-    }\n-\n-    @Override\n-    public Map<String, DataObject> getDataObjectsLocal(String executionId, Collection<String> dataObjects) {\n-        return commandExecutor.execute(new GetDataObjectsCmd(executionId, dataObjects, true));\n-    }\n-\n-    @Override\n-    public Map<String, DataObject> getDataObjectsLocal(String executionId, Collection<String> dataObjectNames, String locale, boolean withLocalizationFallback) {\n-        return commandExecutor.execute(new GetDataObjectsCmd(executionId, dataObjectNames, true, locale, withLocalizationFallback));\n-    }\n-\n-    @Override\n-    public DataObject getDataObject(String executionId, String dataObject) {\n-        return commandExecutor.execute(new GetDataObjectCmd(executionId, dataObject, false));\n-    }\n-\n-    @Override\n-    public DataObject getDataObject(String executionId, String dataObjectName, String locale, boolean withLocalizationFallback) {\n-        return commandExecutor.execute(new GetDataObjectCmd(executionId, dataObjectName, false, locale, withLocalizationFallback));\n-    }\n-\n-    @Override\n-    public DataObject getDataObjectLocal(String executionId, String dataObjectName) {\n-        return commandExecutor.execute(new GetDataObjectCmd(executionId, dataObjectName, true));\n-    }\n-\n-    @Override\n-    public DataObject getDataObjectLocal(String executionId, String dataObjectName, String locale, boolean withLocalizationFallback) {\n-        return commandExecutor.execute(new GetDataObjectCmd(executionId, dataObjectName, true, locale, withLocalizationFallback));\n-    }\n-\n-    public void signal(String executionId) {\n-        commandExecutor.execute(new TriggerCmd(executionId, null));\n-    }\n-\n-    @Override\n-    public void trigger(String executionId) {\n-        commandExecutor.execute(new TriggerCmd(executionId, null));\n-    }\n-\n-    public void signal(String executionId, Map<String, Object> processVariables) {\n-        commandExecutor.execute(new TriggerCmd(executionId, processVariables));\n-    }\n-\n-    public void trigger(String executionId, Map<String, Object> processVariables) {\n-        commandExecutor.execute(new TriggerCmd(executionId, processVariables));\n-    }\n-\n-    public void trigger(String executionId, Map<String, Object> processVariables, Map<String, Object> transientVariables) {\n-        commandExecutor.execute(new TriggerCmd(executionId, processVariables, transientVariables));\n-    }\n-\n-    public void addUserIdentityLink(String processInstanceId, String userId, String identityLinkType) {\n-        commandExecutor.execute(new AddIdentityLinkForProcessInstanceCmd(processInstanceId, userId, null, identityLinkType));\n-    }\n-\n-    public void addGroupIdentityLink(String processInstanceId, String groupId, String identityLinkType) {\n-        commandExecutor.execute(new AddIdentityLinkForProcessInstanceCmd(processInstanceId, null, groupId, identityLinkType));\n-    }\n-\n-    public void addParticipantUser(String processInstanceId, String userId) {\n-        commandExecutor.execute(new AddIdentityLinkForProcessInstanceCmd(processInstanceId, userId, null, IdentityLinkType.PARTICIPANT));\n-    }\n-\n-    public void addParticipantGroup(String processInstanceId, String groupId) {\n-        commandExecutor.execute(new AddIdentityLinkForProcessInstanceCmd(processInstanceId, null, groupId, IdentityLinkType.PARTICIPANT));\n-    }\n-\n-    public void deleteParticipantUser(String processInstanceId, String userId) {\n-        commandExecutor.execute(new DeleteIdentityLinkForProcessInstanceCmd(processInstanceId, userId, null, IdentityLinkType.PARTICIPANT));\n-    }\n-\n-    public void deleteParticipantGroup(String processInstanceId, String groupId) {\n-        commandExecutor.execute(new DeleteIdentityLinkForProcessInstanceCmd(processInstanceId, null, groupId, IdentityLinkType.PARTICIPANT));\n-    }\n-\n-    public void deleteUserIdentityLink(String processInstanceId, String userId, String identityLinkType) {\n-        commandExecutor.execute(new DeleteIdentityLinkForProcessInstanceCmd(processInstanceId, userId, null, identityLinkType));\n-    }\n-\n-    public void deleteGroupIdentityLink(String processInstanceId, String groupId, String identityLinkType) {\n-        commandExecutor.execute(new DeleteIdentityLinkForProcessInstanceCmd(processInstanceId, null, groupId, identityLinkType));\n-    }\n-\n-    public List<IdentityLink> getIdentityLinksForProcessInstance(String processInstanceId) {\n-        return commandExecutor.execute(new GetIdentityLinksForProcessInstanceCmd(processInstanceId));\n-    }\n-\n-    public ProcessInstanceQuery createProcessInstanceQuery() {\n-        return new ProcessInstanceQueryImpl(commandExecutor);\n-    }\n-\n-    public List<String> getActiveActivityIds(String executionId) {\n-        return commandExecutor.execute(new FindActiveActivityIdsCmd(executionId));\n-    }\n-\n-    public void suspendProcessInstanceById(String processInstanceId) {\n-        commandExecutor.execute(new SuspendProcessInstanceCmd(processInstanceId));\n-    }\n-\n-    public void activateProcessInstanceById(String processInstanceId) {\n-        commandExecutor.execute(new ActivateProcessInstanceCmd(processInstanceId));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByMessage(String messageName) {\n-        return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, null, null, null));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByMessageAndTenantId(String messageName, String tenantId) {\n-        return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, null, null, tenantId));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByMessage(String messageName, String businessKey) {\n-        return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, businessKey, null, null));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByMessageAndTenantId(String messageName, String businessKey, String tenantId) {\n-        return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, businessKey, null, tenantId));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByMessage(String messageName, Map<String, Object> processVariables) {\n-        return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, null, processVariables, null));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByMessageAndTenantId(String messageName, Map<String, Object> processVariables, String tenantId) {\n-        return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, null, processVariables, tenantId));\n-    }\n-\n-    public ProcessInstance startProcessInstanceByMessage(String messageName, String businessKey, Map<String, Object> processVariables) {\n-        return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, businessKey, processVariables, null));\n-    }\n-\n-    @Override\n-    public ProcessInstance startProcessInstanceByMessageAndTenantId(String messageName, String businessKey, Map<String, Object> processVariables, String tenantId) {\n-        return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, businessKey, processVariables, tenantId));\n-    }\n-\n-    public void signalEventReceived(String signalName) {\n-        commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, null, null));\n-    }\n-\n-    public void signalEventReceivedWithTenantId(String signalName, String tenantId) {\n-        commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, null, tenantId));\n-    }\n-\n-    public void signalEventReceivedAsync(String signalName) {\n-        commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, true, null));\n-    }\n-\n-    public void signalEventReceivedAsyncWithTenantId(String signalName, String tenantId) {\n-        commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, true, tenantId));\n-    }\n-\n-    public void signalEventReceived(String signalName, Map<String, Object> processVariables) {\n-        commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, processVariables, null));\n-    }\n-\n-    public void signalEventReceivedWithTenantId(String signalName, Map<String, Object> processVariables, String tenantId) {\n-        commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, processVariables, tenantId));\n-    }\n-\n-    public void signalEventReceived(String signalName, String executionId) {\n-        commandExecutor.execute(new SignalEventReceivedCmd(signalName, executionId, null, null));\n-    }\n-\n-    public void signalEventReceived(String signalName, String executionId, Map<String, Object> processVariables) {\n-        commandExecutor.execute(new SignalEventReceivedCmd(signalName, executionId, processVariables, null));\n-    }\n-\n-    public void signalEventReceivedAsync(String signalName, String executionId) {\n-        commandExecutor.execute(new SignalEventReceivedCmd(signalName, executionId, true, null));\n-    }\n-\n-    public void messageEventReceived(String messageName, String executionId) {\n-        commandExecutor.execute(new MessageEventReceivedCmd(messageName, executionId, null));\n-    }\n-\n-    public void messageEventReceived(String messageName, String executionId, Map<String, Object> processVariables) {\n-        commandExecutor.execute(new MessageEventReceivedCmd(messageName, executionId, processVariables));\n-    }\n-\n-    public void messageEventReceivedAsync(String messageName, String executionId) {\n-        commandExecutor.execute(new MessageEventReceivedCmd(messageName, executionId, true));\n-    }\n-\n-    @Override\n-    public void addEventListener(ActivitiEventListener listenerToAdd) {\n-        commandExecutor.execute(new AddEventListenerCommand(listenerToAdd));\n-    }\n-\n-    @Override\n-    public void addEventListener(ActivitiEventListener listenerToAdd, ActivitiEventType... types) {\n-        commandExecutor.execute(new AddEventListenerCommand(listenerToAdd, types));\n-    }\n-\n-    @Override\n-    public void removeEventListener(ActivitiEventListener listenerToRemove) {\n-        commandExecutor.execute(new RemoveEventListenerCommand(listenerToRemove));\n-    }\n-\n-    @Override\n-    public void dispatchEvent(ActivitiEvent event) {\n-        commandExecutor.execute(new DispatchEventCommand(event));\n-    }\n-\n-    @Override\n-    public void setProcessInstanceName(String processInstanceId, String name) {\n-        commandExecutor.execute(new SetProcessInstanceNameCmd(processInstanceId, name));\n-    }\n-\n-    @Override\n-    public List<Event> getProcessInstanceEvents(String processInstanceId) {\n-        return commandExecutor.execute(new GetProcessInstanceEventsCmd(processInstanceId));\n-    }\n-\n-    @Override\n-    public List<FlowNode> getEnabledActivitiesFromAdhocSubProcess(String executionId) {\n-        return commandExecutor.execute(new GetEnabledActivitiesForAdhocSubProcessCmd(executionId));\n-    }\n-\n-    @Override\n-    public Execution executeActivityInAdhocSubProcess(String executionId, String activityId) {\n-        return commandExecutor.execute(new ExecuteActivityForAdhocSubProcessCmd(executionId, activityId));\n-    }\n-\n-    @Override\n-    public void completeAdhocSubProcess(String executionId) {\n-        commandExecutor.execute(new CompleteAdhocSubProcessCmd(executionId));\n-    }\n-\n-    @Override\n-    public ProcessInstanceBuilder createProcessInstanceBuilder() {\n-        return new ProcessInstanceBuilderImpl(this);\n-    }\n-\n-    @Override\n-    public ProcessInstance startCreatedProcessInstance(ProcessInstance createdProcessInstance, Map<String, Object> variables) {\n-        return commandExecutor.execute(new StartCreatedProcessInstanceCmd<>(createdProcessInstance, variables));\n-    }\n-\n-    public ProcessInstance startProcessInstance(ProcessInstanceBuilderImpl processInstanceBuilder) {\n-        if (processInstanceBuilder.hasProcessDefinitionIdOrKey()) {\n-            return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processInstanceBuilder));\n-        } else if (processInstanceBuilder.getMessageName() != null) {\n-            return commandExecutor.execute(new StartProcessInstanceByMessageCmd(processInstanceBuilder));\n-        } else {\n-            throw new ActivitiIllegalArgumentException(\"No processDefinitionId, processDefinitionKey nor messageName provided\");\n-        }\n-    }\n-\n-    public ProcessInstance createProcessInstance(ProcessInstanceBuilderImpl processInstanceBuilder) {\n-        if (processInstanceBuilder.hasProcessDefinitionIdOrKey()) {\n-            return commandExecutor.execute(new CreateProcessInstanceCmd(processInstanceBuilder));\n-        } else {\n-            throw new ActivitiIllegalArgumentException(\"No processDefinitionId, processDefinitionKey nor messageName provided\");\n-        }\n-    }\n-}\n+  public ProcessInstance startProcessInstanceByKey(String processDefinitionKey) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, null, null));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByKey(String processDefinitionKey, String businessKey) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, businessKey, null));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByKey(String processDefinitionKey, Map<String, Object> variables) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, null, variables));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByKey(String processDefinitionKey, String businessKey, Map<String, Object> variables) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey,\n+                                                                                null,\n+                                                                                businessKey,\n+                                                                                variables));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByKeyAndTenantId(String processDefinitionKey, String tenantId) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, null, null, tenantId));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByKeyAndTenantId(String processDefinitionKey, String businessKey, String tenantId) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey,\n+                                                                                null,\n+                                                                                businessKey,\n+                                                                                null,\n+                                                                                tenantId));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByKeyAndTenantId(String processDefinitionKey, Map<String, Object> variables, String tenantId) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey,\n+                                                                                null,\n+                                                                                null,\n+                                                                                variables,\n+                                                                                tenantId));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByKeyAndTenantId(String processDefinitionKey,\n+                                                              String businessKey,\n+                                                              Map<String, Object> variables, String tenantId) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey,\n+                                                                                null,\n+                                                                                businessKey,\n+                                                                                variables,\n+                                                                                tenantId));\n+  }\n+\n+  public ProcessInstance startProcessInstanceById(String processDefinitionId) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(null, processDefinitionId, null, null));\n+  }\n+\n+  public ProcessInstance startProcessInstanceById(String processDefinitionId, String businessKey) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(null, processDefinitionId, businessKey, null));\n+  }\n+\n+  public ProcessInstance startProcessInstanceById(String processDefinitionId, Map<String, Object> variables) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(null, processDefinitionId, null, variables));\n+  }\n+\n+  public ProcessInstance startProcessInstanceById(String processDefinitionId, String businessKey, Map<String, Object> variables) {\n+    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(null,\n+                                                                                processDefinitionId,\n+                                                                                businessKey,\n+                                                                                variables));\n+  }\n+\n+  public void deleteProcessInstance(String processInstanceId, String deleteReason) {\n+    commandExecutor.execute(new DeleteProcessInstanceCmd(processInstanceId, deleteReason));\n+  }\n+\n+  public ExecutionQuery createExecutionQuery() {\n+    return new ExecutionQueryImpl(commandExecutor);\n+  }\n+\n+  public NativeExecutionQuery createNativeExecutionQuery() {\n+    return new NativeExecutionQueryImpl(commandExecutor);\n+  }\n+\n+  public NativeProcessInstanceQuery createNativeProcessInstanceQuery() {\n+    return new NativeProcessInstanceQueryImpl(commandExecutor);\n+  }\n+\n+  public void updateBusinessKey(String processInstanceId, String businessKey) {\n+    commandExecutor.execute(new SetProcessInstanceBusinessKeyCmd(processInstanceId, businessKey));\n+  }\n+\n+  public Map<String, Object> getVariables(String executionId) {\n+    return commandExecutor.execute(new GetExecutionVariablesCmd(executionId, null, false));\n+  }\n+\n+  public Map<String, VariableInstance> getVariableInstances(String executionId) {\n+    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, null, false));\n+  }\n+\n+  public List<VariableInstance> getVariableInstancesByExecutionIds(Set<String> executionIds) {\n+    return commandExecutor.execute(new GetExecutionsVariablesCmd(executionIds));\n+  }\n+\n+  public Map<String, Object> getVariablesLocal(String executionId) {\n+    return commandExecutor.execute(new GetExecutionVariablesCmd(executionId, null, true));\n+  }\n+\n+  public Map<String, VariableInstance> getVariableInstancesLocal(String executionId) {\n+    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, null, true));\n+  }\n+\n+  public Map<String, Object> getVariables(String executionId, Collection<String> variableNames) {\n+    return commandExecutor.execute(new GetExecutionVariablesCmd(executionId, variableNames, false));\n+  }\n+\n+  public Map<String, VariableInstance> getVariableInstances(String executionId, Collection<String> variableNames) {\n+    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, false));\n+  }\n+\n+  public Map<String, Object> getVariablesLocal(String executionId, Collection<String> variableNames) {\n+    return commandExecutor.execute(new GetExecutionVariablesCmd(executionId, variableNames, true));\n+  }\n+\n+  public Map<String, VariableInstance> getVariableInstancesLocal(String executionId, Collection<String> variableNames) {\n+    return commandExecutor.execute(new GetExecutionVariableInstancesCmd(executionId, variableNames, true));\n+  }\n+\n+  public Object getVariable(String executionId, String variableName) {\n+    return commandExecutor.execute(new GetExecutionVariableCmd(executionId, variableName, false));\n+  }\n+\n+  public VariableInstance getVariableInstance(String executionId, String variableName) {\n+    return commandExecutor.execute(new GetExecutionVariableInstanceCmd(executionId, variableName, false));\n+  }\n+\n+  public <T> T getVariable(String executionId, String variableName, Class<T> variableClass) {\n+    return variableClass.cast(getVariable(executionId, variableName));\n+  }\n+\n+  public boolean hasVariable(String executionId, String variableName) {\n+    return commandExecutor.execute(new HasExecutionVariableCmd(executionId, variableName, false));\n+  }\n+\n+  public Object getVariableLocal(String executionId, String variableName) {\n+    return commandExecutor.execute(new GetExecutionVariableCmd(executionId, variableName, true));\n+  }\n+\n+  public VariableInstance getVariableInstanceLocal(String executionId, String variableName) {\n+    return commandExecutor.execute(new GetExecutionVariableInstanceCmd(executionId, variableName, true));\n+  }\n+\n+  public <T> T getVariableLocal(String executionId, String variableName, Class<T> variableClass) {\n+    return variableClass.cast(getVariableLocal(executionId, variableName));\n+  }\n+\n+  public boolean hasVariableLocal(String executionId, String variableName) {\n+    return commandExecutor.execute(new HasExecutionVariableCmd(executionId, variableName, true));\n+  }\n+\n+  public void setVariable(String executionId, String variableName, Object value) {\n+    if (variableName == null) {\n+      throw new ActivitiIllegalArgumentException(\"variableName is null\");\n+    }\n+\n+    Map<String, Object> variables = new HashMap<String, Object>();\n+    variables.put(variableName, value);\n+    commandExecutor.execute(new SetExecutionVariablesCmd(executionId, variables, false));\n+  }\n+\n+  public void setVariableLocal(String executionId, String variableName, Object value) {\n+    if (variableName == null) {\n+      throw new ActivitiIllegalArgumentException(\"variableName is null\");\n+    }\n+\n+    Map<String, Object> variables = new HashMap<String, Object>();\n+    variables.put(variableName, value);\n+    commandExecutor.execute(new SetExecutionVariablesCmd(executionId, variables, true));\n+  }\n+\n+  public void setVariables(String executionId, Map<String, ? extends Object> variables) {\n+    commandExecutor.execute(new SetExecutionVariablesCmd(executionId, variables, false));\n+  }\n+\n+  public void setVariablesLocal(String executionId, Map<String, ? extends Object> variables) {\n+    commandExecutor.execute(new SetExecutionVariablesCmd(executionId, variables, true));\n+  }\n+\n+  public void removeVariable(String executionId, String variableName) {\n+    Collection<String> variableNames = new ArrayList<String>(1);\n+    variableNames.add(variableName);\n+    commandExecutor.execute(new RemoveExecutionVariablesCmd(executionId, variableNames, false));\n+  }\n+\n+  public void removeVariableLocal(String executionId, String variableName) {\n+    Collection<String> variableNames = new ArrayList<String>();\n+    variableNames.add(variableName);\n+    commandExecutor.execute(new RemoveExecutionVariablesCmd(executionId, variableNames, true));\n+  }\n+\n+  public void removeVariables(String executionId, Collection<String> variableNames) {\n+    commandExecutor.execute(new RemoveExecutionVariablesCmd(executionId, variableNames, false));\n+  }\n+\n+  public void removeVariablesLocal(String executionId, Collection<String> variableNames) {\n+    commandExecutor.execute(new RemoveExecutionVariablesCmd(executionId, variableNames, true));\n+  }\n+\n+  @Override\n+  public Map<String, DataObject> getDataObjects(String executionId) {\n+    return commandExecutor.execute(new GetDataObjectsCmd(executionId, null, false));\n+  }\n+\n+  @Override\n+  public Map<String, DataObject> getDataObjects(String executionId, String locale, boolean withLocalizationFallback) {\n+    return commandExecutor.execute(new GetDataObjectsCmd(executionId,\n+                                                         null,\n+                                                         false,\n+                                                         locale,\n+                                                         withLocalizationFallback));\n+  }\n+\n+  @Override\n+  public Map<String, DataObject> getDataObjectsLocal(String executionId) {\n+    return commandExecutor.execute(new GetDataObjectsCmd(executionId, null, true));\n+  }\n+\n+  @Override\n+  public Map<String, DataObject> getDataObjectsLocal(String executionId, String locale, boolean withLocalizationFallback) {\n+    return commandExecutor.execute(new GetDataObjectsCmd(executionId,\n+                                                         null,\n+                                                         true,\n+                                                         locale,\n+                                                         withLocalizationFallback));\n+  }\n+\n+  @Override\n+  public Map<String, DataObject> getDataObjects(String executionId, Collection<String> dataObjectNames) {\n+    return commandExecutor.execute(new GetDataObjectsCmd(executionId, dataObjectNames, false));\n+  }\n+\n+  @Override\n+  public Map<String, DataObject> getDataObjects(String executionId,\n+                                                Collection<String> dataObjectNames,\n+                                                String locale, boolean withLocalizationFallback) {\n+                                                  return commandExecutor.execute(new GetDataObjectsCmd(executionId,\n+                                                                                                       dataObjectNames,\n+                                                                                                       false,\n+                                                                                                       locale,\n+                                                                                                       withLocalizationFallback));\n+  }\n+\n+  @Override\n+  public Map<String, DataObject> getDataObjectsLocal(String executionId, Collection<String> dataObjects) {\n+    return commandExecutor.execute(new GetDataObjectsCmd(executionId, dataObjects, true));\n+  }\n+\n+  @Override\n+  public Map<String, DataObject> getDataObjectsLocal(String executionId,\n+                                                     Collection<String> dataObjectNames,\n+                                                     String locale, boolean withLocalizationFallback) {\n+                                                       return commandExecutor.execute(new GetDataObjectsCmd(executionId,\n+                                                                                                            dataObjectNames,\n+                                                                                                            true,\n+                                                                                                            locale,\n+                                                                                                            withLocalizationFallback));\n+  }\n+\n+  @Override\n+  public DataObject getDataObject(String executionId, String dataObject) {\n+    return commandExecutor.execute(new GetDataObjectCmd(executionId, dataObject, false));\n+  }\n+\n+  @Override\n+  public DataObject getDataObject(String executionId, String dataObjectName, String locale, boolean withLocalizationFallback) {\n+    return commandExecutor.execute(new GetDataObjectCmd(executionId,\n+                                                        dataObjectName,\n+                                                        false,\n+                                                        locale,\n+                                                        withLocalizationFallback));\n+  }\n+\n+  @Override\n+  public DataObject getDataObjectLocal(String executionId, String dataObjectName) {\n+    return commandExecutor.execute(new GetDataObjectCmd(executionId, dataObjectName, true));\n+  }\n+\n+  @Override\n+  public DataObject getDataObjectLocal(String executionId, String dataObjectName, String locale, boolean withLocalizationFallback) {\n+    return commandExecutor.execute(new GetDataObjectCmd(executionId,\n+                                                        dataObjectName,\n+                                                        true,\n+                                                        locale,\n+                                                        withLocalizationFallback));\n+  }\n+\n+  public void signal(String executionId) {\n+    commandExecutor.execute(new TriggerCmd(executionId, null));\n+  }\n+\n+  @Override\n+  public void trigger(String executionId) {\n+    commandExecutor.execute(new TriggerCmd(executionId, null));\n+  }\n+\n+  public void signal(String executionId, Map<String, Object> processVariables) {\n+    commandExecutor.execute(new TriggerCmd(executionId, processVariables));\n+  }\n+\n+  public void trigger(String executionId, Map<String, Object> processVariables) {\n+    commandExecutor.execute(new TriggerCmd(executionId, processVariables));\n+  }\n+\n+  public void trigger(String executionId, Map<String, Object> processVariables, Map<String, Object> transientVariables) {\n+    commandExecutor.execute(new TriggerCmd(executionId,\n+                                           processVariables,\n+                                           transientVariables));\n+  }\n+\n+  public void addUserIdentityLink(String processInstanceId, String userId, String identityLinkType) {\n+    commandExecutor.execute(new AddIdentityLinkForProcessInstanceCmd(processInstanceId,\n+                                                                     userId,\n+                                                                     null,\n+                                                                     identityLinkType));\n+  }\n+\n+  public void addGroupIdentityLink(String processInstanceId, String groupId, String identityLinkType) {\n+    commandExecutor.execute(new AddIdentityLinkForProcessInstanceCmd(processInstanceId,\n+                                                                     null,\n+                                                                     groupId,\n+                                                                     identityLinkType));\n+  }\n+\n+  public void addParticipantUser(String processInstanceId, String userId) {\n+    commandExecutor.execute(new AddIdentityLinkForProcessInstanceCmd(processInstanceId,\n+                                                                     userId,\n+                                                                     null,\n+                                                                     IdentityLinkType.PARTICIPANT));\n+  }\n+\n+  public void addParticipantGroup(String processInstanceId, String groupId) {\n+    commandExecutor.execute(new AddIdentityLinkForProcessInstanceCmd(processInstanceId,\n+                                                                     null,\n+                                                                     groupId,\n+                                                                     IdentityLinkType.PARTICIPANT));\n+  }\n+\n+  public void deleteParticipantUser(String processInstanceId, String userId) {\n+    commandExecutor.execute(new DeleteIdentityLinkForProcessInstanceCmd(processInstanceId,\n+                                                                        userId,\n+                                                                        null,\n+                                                                        IdentityLinkType.PARTICIPANT));\n+  }\n+\n+  public void deleteParticipantGroup(String processInstanceId, String groupId) {\n+    commandExecutor.execute(new DeleteIdentityLinkForProcessInstanceCmd(processInstanceId,\n+                                                                        null,\n+                                                                        groupId,\n+                                                                        IdentityLinkType.PARTICIPANT));\n+  }\n+\n+  public void deleteUserIdentityLink(String processInstanceId, String userId, String identityLinkType) {\n+    commandExecutor.execute(new DeleteIdentityLinkForProcessInstanceCmd(processInstanceId,\n+                                                                        userId,\n+                                                                        null,\n+                                                                        identityLinkType));\n+  }\n+\n+  public void deleteGroupIdentityLink(String processInstanceId, String groupId, String identityLinkType) {\n+    commandExecutor.execute(new DeleteIdentityLinkForProcessInstanceCmd(processInstanceId,\n+                                                                        null,\n+                                                                        groupId,\n+                                                                        identityLinkType));\n+  }\n+\n+  public List<IdentityLink> getIdentityLinksForProcessInstance(String processInstanceId) {\n+    return commandExecutor.execute(new GetIdentityLinksForProcessInstanceCmd(processInstanceId));\n+  }\n+\n+  public ProcessInstanceQuery createProcessInstanceQuery() {\n+    return new ProcessInstanceQueryImpl(commandExecutor);\n+  }\n+\n+  public List<String> getActiveActivityIds(String executionId) {\n+    return commandExecutor.execute(new FindActiveActivityIdsCmd(executionId));\n+  }\n+\n+  public void suspendProcessInstanceById(String processInstanceId) {\n+    commandExecutor.execute(new SuspendProcessInstanceCmd(processInstanceId));\n+  }\n+\n+  public void activateProcessInstanceById(String processInstanceId) {\n+    commandExecutor.execute(new ActivateProcessInstanceCmd(processInstanceId));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByMessage(String messageName) {\n+    return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, null, null, null));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByMessageAndTenantId(String messageName, String tenantId) {\n+    return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, null, null, tenantId));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByMessage(String messageName, String businessKey) {\n+    return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, businessKey, null, null));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByMessageAndTenantId(String messageName, String businessKey, String tenantId) {\n+    return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, businessKey, null, tenantId));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByMessage(String messageName, Map<String, Object> processVariables) {\n+    return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, null, processVariables, null));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByMessageAndTenantId(String messageName, Map<String, Object> processVariables, String tenantId) {\n+    return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName, null, processVariables, tenantId));\n+  }\n+\n+  public ProcessInstance startProcessInstanceByMessage(String messageName, String businessKey, Map<String, Object> processVariables) {\n+    return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName,\n+                                                                        businessKey,\n+                                                                        processVariables,\n+                                                                        null));\n+  }\n+\n+  @Override\n+  public ProcessInstance startProcessInstanceByMessageAndTenantId(String messageName,\n+                                                                  String businessKey,\n+                                                                  Map<String, Object> processVariables, String tenantId) {\n+                                                                    return commandExecutor.execute(new StartProcessInstanceByMessageCmd(messageName,\n+                                                                                                                                        businessKey,\n+                                                                                                                                        processVariables,\n+                                                                                                                                        tenantId));\n+  }\n+\n+  public void signalEventReceived(String signalName) {\n+    commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, null, null));\n+  }\n+\n+  public void signalEventReceivedWithTenantId(String signalName, String tenantId) {\n+    commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, null, tenantId));\n+  }\n+\n+  public void signalEventReceivedAsync(String signalName) {\n+    commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, true, null));\n+  }\n+\n+  public void signalEventReceivedAsyncWithTenantId(String signalName, String tenantId) {\n+    commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, true, tenantId));\n+  }\n+\n+  public void signalEventReceived(String signalName, Map<String, Object> processVariables) {\n+    commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, processVariables, null));\n+  }\n+\n+  public void signalEventReceivedWithTenantId(String signalName, Map<String, Object> processVariables, String tenantId) {\n+    commandExecutor.execute(new SignalEventReceivedCmd(signalName, null, processVariables, tenantId));\n+  }\n+\n+  public void signalEventReceived(String signalName, String executionId) {\n+    commandExecutor.execute(new SignalEventReceivedCmd(signalName, executionId, null, null));\n+  }\n+\n+  public void signalEventReceived(String signalName, String executionId, Map<String, Object> processVariables) {\n+    commandExecutor.execute(new SignalEventReceivedCmd(signalName,\n+                                                       executionId,\n+                                                       processVariables,\n+                                                       null));\n+  }\n+\n+  public void signalEventReceivedAsync(String signalName, String executionId) {\n+    commandExecutor.execute(new SignalEventReceivedCmd(signalName, executionId, true, null));\n+  }\n+\n+  public void messageEventReceived(String messageName, String executionId) {\n+    commandExecutor.execute(new MessageEventReceivedCmd(messageName, executionId, null));\n+  }\n+\n+  public void messageEventReceived(String messageName, String executionId, Map<String, Object> processVariables) {\n+    commandExecutor.execute(new MessageEventReceivedCmd(messageName, executionId, processVariables));\n+  }\n+\n+  public void messageEventReceivedAsync(String messageName, String executionId) {\n+    commandExecutor.execute(new MessageEventReceivedCmd(messageName, executionId, true));\n+  }\n+\n+  @Override\n+  public void addEventListener(ActivitiEventListener listenerToAdd) {\n+    commandExecutor.execute(new AddEventListenerCommand(listenerToAdd));\n+  }\n+\n+  @Override\n+  public void addEventListener(ActivitiEventListener listenerToAdd, ActivitiEventType... types) {\n+    commandExecutor.execute(new AddEventListenerCommand(listenerToAdd, types));\n+  }\n+\n+  @Override\n+  public void removeEventListener(ActivitiEventListener listenerToRemove) {\n+    commandExecutor.execute(new RemoveEventListenerCommand(listenerToRemove));\n+  }\n+\n+  @Override\n+  public void dispatchEvent(ActivitiEvent event) {\n+    commandExecutor.execute(new DispatchEventCommand(event));\n+  }\n+\n+  @Override\n+  public void setProcessInstanceName(String processInstanceId, String name) {\n+    commandExecutor.execute(new SetProcessInstanceNameCmd(processInstanceId, name));\n+  }\n+\n+  @Override\n+  public List<Event> getProcessInstanceEvents(String processInstanceId) {\n+    return commandExecutor.execute(new GetProcessInstanceEventsCmd(processInstanceId));\n+  }\n+\n+  @Override\n+  public List<FlowNode> getEnabledActivitiesFromAdhocSubProcess(String executionId) {\n+    return commandExecutor.execute(new GetEnabledActivitiesForAdhocSubProcessCmd(executionId));\n+  }\n+\n+  @Override\n+  public Execution executeActivityInAdhocSubProcess(String executionId, String activityId) {\n+    return commandExecutor.execute(new ExecuteActivityForAdhocSubProcessCmd(executionId, activityId));\n+  }\n+\n+  @Override\n+  public void completeAdhocSubProcess(String executionId) {\n+    commandExecutor.execute(new CompleteAdhocSubProcessCmd(executionId));\n+  }\n+\n+  @Override\n+  public ProcessInstanceBuilder createProcessInstanceBuilder() {\n+    return new ProcessInstanceBuilderImpl(this);\n+  }\n+\n+  @Override\n+  public ProcessInstance startCreatedProcessInstance(ProcessInstance createdProcessInstance, Map<String, Object> variables) {\n+    return commandExecutor.execute(new StartCreatedProcessInstanceCmd<>(createdProcessInstance, variables));\n+  }\n+\n+  public ProcessInstance startProcessInstance(ProcessInstanceBuilderImpl processInstanceBuilder) {\n+    if (processInstanceBuilder.hasProcessDefinitionIdOrKey()) {\n+      return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processInstanceBuilder));\n+    } else if (processInstanceBuilder.getMessageName() != null) {\n+      return commandExecutor.execute(new StartProcessInstanceByMessageCmd(processInstanceBuilder));\n+    } else {\n+      throw new ActivitiIllegalArgumentException(\"No processDefinitionId, processDefinitionKey nor messageName provided\");\n+    }\n+  }\n+\n+  public ProcessInstance createProcessInstance(ProcessInstanceBuilderImpl processInstanceBuilder) {\n+    if (processInstanceBuilder.hasProcessDefinitionIdOrKey()) {\n+      return commandExecutor.execute(new CreateProcessInstanceCmd(processInstanceBuilder));\n+    } else {\n+      throw new ActivitiIllegalArgumentException(\"No processDefinitionId, processDefinitionKey nor messageName provided\");\n+    }\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 557
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/773/RuntimeServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/773/RuntimeServiceImpl.java\nindex 4063c7393fe..879b1e3df64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/773/RuntimeServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/773/RuntimeServiceImpl.java\n@@ -76,10 +76,11 @@ import org.activiti.engine.task.Event;\n import org.activiti.engine.task.IdentityLink;\n import org.activiti.engine.task.IdentityLinkType;\n \n+public class RuntimeServiceImpl extends ServiceImpl implements\n \n-public class RuntimeServiceImpl extends ServiceImpl implements RuntimeService {\n+    RuntimeService {\n \n-    public ProcessInstance startProcessInstanceByKey(String processDefinitionKey) {\n+     public ProcessInstance startProcessInstanceByKey(String processDefinitionKey) {\n         return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processDefinitionKey, null, null, null));\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/773/RuntimeServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/773/RuntimeServiceImpl.java\nindex 4063c7393fe..5af49b8ca86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/773/RuntimeServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/773/RuntimeServiceImpl.java\n@@ -76,7 +76,6 @@ import org.activiti.engine.task.Event;\n import org.activiti.engine.task.IdentityLink;\n import org.activiti.engine.task.IdentityLinkType;\n \n-\n public class RuntimeServiceImpl extends ServiceImpl implements RuntimeService {\n \n     public ProcessInstance startProcessInstanceByKey(String processDefinitionKey) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}