{
    "project_name": "graphfoundation-ongdb",
    "error_id": "144",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "125",
                    "column": "110",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "97",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "215",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "215",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/144/KernelTransactions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/144/KernelTransactions.java\nindex ae0b0caba57..c31ec7f19fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/144/KernelTransactions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/144/KernelTransactions.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.util.Set;\n@@ -78,330 +79,328 @@ import static java.util.stream.Collectors.toSet;\n  */\n public class KernelTransactions extends LifecycleAdapter implements Supplier<KernelTransactionsSnapshot>\n {\n-    private final StatementLocksFactory statementLocksFactory;\n-    private final ConstraintIndexCreator constraintIndexCreator;\n-    private final StatementOperationParts statementOperations;\n-    private final SchemaWriteGuard schemaWriteGuard;\n-    private final TransactionHeaderInformationFactory transactionHeaderInformationFactory;\n-    private final TransactionCommitProcess transactionCommitProcess;\n-    private final TransactionHooks hooks;\n-    private final TransactionMonitor transactionMonitor;\n-    private final AvailabilityGuard availabilityGuard;\n-    private final Tracers tracers;\n-    private final StorageEngine storageEngine;\n-    private final Procedures procedures;\n-    private final TransactionIdStore transactionIdStore;\n-    private final AtomicReference<CpuClock> cpuClockRef;\n-    private final AtomicReference<HeapAllocation> heapAllocationRef;\n-    private final AccessCapability accessCapability;\n-    private final Supplier<ExplicitIndexTransactionState> explicitIndexTxStateSupplier;\n-    private final SystemNanoClock clock;\n-    private final VersionContextSupplier versionContextSupplier;\n-    private final ReentrantReadWriteLock newTransactionsLock = new ReentrantReadWriteLock();\n-    private final MonotonicCounter userTransactionIdCounter = MonotonicCounter.newAtomicMonotonicCounter();\n-    private final Supplier<DefaultCursors> cursorsSupplier;\n-    private final AutoIndexing autoIndexing;\n-    private final ExplicitIndexStore explicitIndexStore;\n-    private final IndexingService indexingService;\n-    private final IndexProviderMap indexProviderMap;\n-    private final CollectionsFactorySupplier collectionsFactorySupplier;\n-    private final SchemaState schemaState;\n+  private final StatementLocksFactory statementLocksFactory;\n+  private final ConstraintIndexCreator constraintIndexCreator;\n+  private final StatementOperationParts statementOperations;\n+  private final SchemaWriteGuard schemaWriteGuard;\n+  private final TransactionHeaderInformationFactory transactionHeaderInformationFactory;\n+  private final TransactionCommitProcess transactionCommitProcess;\n+  private final TransactionHooks hooks;\n+  private final TransactionMonitor transactionMonitor;\n+  private final AvailabilityGuard availabilityGuard;\n+  private final Tracers tracers;\n+  private final StorageEngine storageEngine;\n+  private final Procedures procedures;\n+  private final TransactionIdStore transactionIdStore;\n+  private final AtomicReference<CpuClock> cpuClockRef;\n+  private final AtomicReference<HeapAllocation> heapAllocationRef;\n+  private final AccessCapability accessCapability;\n+  private final Supplier<ExplicitIndexTransactionState> explicitIndexTxStateSupplier;\n+  private final SystemNanoClock clock;\n+  private final VersionContextSupplier versionContextSupplier;\n+  private final ReentrantReadWriteLock newTransactionsLock = new ReentrantReadWriteLock();\n+  private final MonotonicCounter userTransactionIdCounter = MonotonicCounter.newAtomicMonotonicCounter();\n+  private final Supplier<DefaultCursors> cursorsSupplier;\n+  private final AutoIndexing autoIndexing;\n+  private final ExplicitIndexStore explicitIndexStore;\n+  private final IndexingService indexingService;\n+  private final IndexProviderMap indexProviderMap;\n+  private final CollectionsFactorySupplier collectionsFactorySupplier;\n+  private final SchemaState schemaState;\n \n-    /**\n-     * Used to enumerate all transactions in the system, active and idle ones.\n-     * <p>\n-     * This data structure is *only* updated when brand-new transactions are created, or when transactions are disposed\n-     * of. During normal operation (where all transactions come from and are returned to the pool), this will be left\n-     * in peace, working solely as a collection of references to all transaction objects (idle and active) in the\n-     * database.\n-     * <p>\n-     * As such, it provides a good mechanism for listing all transactions without requiring synchronization when\n-     * starting and committing transactions.\n-     */\n-    private final Set<KernelTransactionImplementation> allTransactions = newSetFromMap( new ConcurrentHashMap<>() );\n+  /**\n+   * Used to enumerate all transactions in the system, active and idle ones.\n+   * <p>\n+   * This data structure is *only* updated when brand-new transactions are created, or when transactions are disposed\n+   * of. During normal operation (where all transactions come from and are returned to the pool), this will be left\n+   * in peace, working solely as a collection of references to all transaction objects (idle and active) in the\n+   * database.\n+   * <p>\n+   * As such, it provides a good mechanism for listing all transactions without requiring synchronization when\n+   * starting and committing transactions.\n+   */\n+  private final Set<KernelTransactionImplementation> allTransactions = newSetFromMap(new ConcurrentHashMap<>());\n \n-    // This is the factory that actually builds brand-new instances.\n-    private final Factory<KernelTransactionImplementation> factory = new KernelTransactionImplementationFactory( allTransactions );\n-    // Global pool of transactions, wrapped by the thread-local marshland pool and so is not used directly.\n-    private final LinkedQueuePool<KernelTransactionImplementation> globalTxPool =\n-            new GlobalKernelTransactionPool( allTransactions, factory );\n-    // Pool of unused transactions.\n-    private final MarshlandPool<KernelTransactionImplementation> localTxPool = new MarshlandPool<>( globalTxPool );\n-    private final ConstraintSemantics constraintSemantics;\n+  // This is the factory that actually builds brand-new instances.\n+  private final Factory<KernelTransactionImplementation> factory = new KernelTransactionImplementationFactory(allTransactions);\n+  // Global pool of transactions, wrapped by the thread-local marshland pool and so is not used directly.\n+  private final LinkedQueuePool<KernelTransactionImplementation> globalTxPool =\n+      new GlobalKernelTransactionPool(allTransactions, factory);\n+  // Pool of unused transactions.\n+  private final MarshlandPool<KernelTransactionImplementation> localTxPool = new MarshlandPool<>(globalTxPool);\n+  private final ConstraintSemantics constraintSemantics;\n \n-    /**\n-     * Kernel transactions component status. True when stopped, false when started.\n-     * Will not allow to start new transaction by stopped instance of kernel transactions.\n-     * Should simplify tracking of stopped component usage by up the stack components.\n-     */\n-    private volatile boolean stopped = true;\n+  /**\n+   * Kernel transactions component status. True when stopped, false when started.\n+   * Will not allow to start new transaction by stopped instance of kernel transactions.\n+   * Should simplify tracking of stopped component usage by up the stack components.\n+   */\n+  private volatile boolean stopped = true;\n \n-    public KernelTransactions( StatementLocksFactory statementLocksFactory,\n-            ConstraintIndexCreator constraintIndexCreator, StatementOperationParts statementOperations,\n-            SchemaWriteGuard schemaWriteGuard, TransactionHeaderInformationFactory txHeaderFactory,\n-            TransactionCommitProcess transactionCommitProcess, IndexConfigStore indexConfigStore,\n-            ExplicitIndexProviderLookup explicitIndexProviderLookup, TransactionHooks hooks,\n-            TransactionMonitor transactionMonitor, AvailabilityGuard availabilityGuard, Tracers tracers,\n-            StorageEngine storageEngine, Procedures procedures, TransactionIdStore transactionIdStore,\n-            SystemNanoClock clock,\n-            AtomicReference<CpuClock> cpuClockRef, AtomicReference<HeapAllocation> heapAllocationRef, AccessCapability accessCapability,\n-            Supplier<DefaultCursors> cursorsSupplier,\n-            AutoIndexing autoIndexing,\n-            ExplicitIndexStore explicitIndexStore,\n-            VersionContextSupplier versionContextSupplier,\n-            CollectionsFactorySupplier collectionsFactorySupplier,\n-            ConstraintSemantics constraintSemantics,\n-            SchemaState schemaState,\n-            IndexingService indexingService,\n-            IndexProviderMap indexProviderMap )\n-    {\n-        this.statementLocksFactory = statementLocksFactory;\n-        this.constraintIndexCreator = constraintIndexCreator;\n-        this.statementOperations = statementOperations;\n-        this.schemaWriteGuard = schemaWriteGuard;\n-        this.transactionHeaderInformationFactory = txHeaderFactory;\n-        this.transactionCommitProcess = transactionCommitProcess;\n-        this.hooks = hooks;\n-        this.transactionMonitor = transactionMonitor;\n-        this.availabilityGuard = availabilityGuard;\n-        this.tracers = tracers;\n-        this.storageEngine = storageEngine;\n-        this.procedures = procedures;\n-        this.transactionIdStore = transactionIdStore;\n-        this.cpuClockRef = cpuClockRef;\n-        this.heapAllocationRef = heapAllocationRef;\n-        this.accessCapability = accessCapability;\n-        this.autoIndexing = autoIndexing;\n-        this.explicitIndexStore = explicitIndexStore;\n-        this.indexingService = indexingService;\n-        this.indexProviderMap = indexProviderMap;\n-        this.explicitIndexTxStateSupplier = () ->\n-                new CachingExplicitIndexTransactionState(\n-                        new ExplicitIndexTransactionStateImpl( indexConfigStore, explicitIndexProviderLookup ) );\n-        this.versionContextSupplier = versionContextSupplier;\n-        this.clock = clock;\n-        doBlockNewTransactions();\n-        this.cursorsSupplier = cursorsSupplier;\n-        this.collectionsFactorySupplier = collectionsFactorySupplier;\n-        this.constraintSemantics = constraintSemantics;\n-        this.schemaState = schemaState;\n-    }\n+  public KernelTransactions(StatementLocksFactory statementLocksFactory,\n+                            ConstraintIndexCreator constraintIndexCreator, StatementOperationParts statementOperations,\n+                            SchemaWriteGuard schemaWriteGuard, TransactionHeaderInformationFactory txHeaderFactory,\n+                            TransactionCommitProcess transactionCommitProcess, IndexConfigStore indexConfigStore,\n+                            ExplicitIndexProviderLookup explicitIndexProviderLookup, TransactionHooks hooks,\n+                            TransactionMonitor transactionMonitor, AvailabilityGuard availabilityGuard, Tracers tracers,\n+                            StorageEngine storageEngine, Procedures procedures, TransactionIdStore transactionIdStore,\n+                            SystemNanoClock clock,\n+                            AtomicReference<CpuClock> cpuClockRef, AtomicReference<HeapAllocation> heapAllocationRef, AccessCapability accessCapability,\n+                            Supplier<DefaultCursors> cursorsSupplier,\n+                            AutoIndexing autoIndexing,\n+                            ExplicitIndexStore explicitIndexStore,\n+                            VersionContextSupplier versionContextSupplier,\n+                            CollectionsFactorySupplier collectionsFactorySupplier,\n+                            ConstraintSemantics constraintSemantics,\n+                            SchemaState schemaState,\n+                            IndexingService indexingService,\n+                            IndexProviderMap indexProviderMap)\n+  {\n+    this.statementLocksFactory = statementLocksFactory;\n+    this.constraintIndexCreator = constraintIndexCreator;\n+    this.statementOperations = statementOperations;\n+    this.schemaWriteGuard = schemaWriteGuard;\n+    this.transactionHeaderInformationFactory = txHeaderFactory;\n+    this.transactionCommitProcess = transactionCommitProcess;\n+    this.hooks = hooks;\n+    this.transactionMonitor = transactionMonitor;\n+    this.availabilityGuard = availabilityGuard;\n+    this.tracers = tracers;\n+    this.storageEngine = storageEngine;\n+    this.procedures = procedures;\n+    this.transactionIdStore = transactionIdStore;\n+    this.cpuClockRef = cpuClockRef;\n+    this.heapAllocationRef = heapAllocationRef;\n+    this.accessCapability = accessCapability;\n+    this.autoIndexing = autoIndexing;\n+    this.explicitIndexStore = explicitIndexStore;\n+    this.indexingService = indexingService;\n+    this.indexProviderMap = indexProviderMap;\n+    this.explicitIndexTxStateSupplier = () ->\n+        new CachingExplicitIndexTransactionState(\n+            new ExplicitIndexTransactionStateImpl(indexConfigStore, explicitIndexProviderLookup));\n+    this.versionContextSupplier = versionContextSupplier;\n+    this.clock = clock;\n+    doBlockNewTransactions();\n+    this.cursorsSupplier = cursorsSupplier;\n+    this.collectionsFactorySupplier = collectionsFactorySupplier;\n+    this.constraintSemantics = constraintSemantics;\n+    this.schemaState = schemaState;\n+  }\n \n-    public KernelTransaction newInstance( KernelTransaction.Type type, LoginContext loginContext, long timeout )\n+  public KernelTransaction newInstance(KernelTransaction.Type type, LoginContext loginContext, long timeout)\n+  {\n+    assertCurrentThreadIsNotBlockingNewTransactions();\n+    SecurityContext securityContext = loginContext.authorize(p -> storageEngine\n+        .storeReadLayer().propertyKeyGetOrCreateForName(p));\n+    try\n     {\n-        assertCurrentThreadIsNotBlockingNewTransactions();\n-        SecurityContext securityContext = loginContext.authorize( p -> storageEngine\n-                .storeReadLayer().propertyKeyGetOrCreateForName( p ) );\n-        try\n-        {\n-            while ( !newTransactionsLock.readLock().tryLock( 1, TimeUnit.SECONDS ) )\n-            {\n-                assertRunning();\n-            }\n-            try\n-            {\n-                assertRunning();\n-                TransactionId lastCommittedTransaction = transactionIdStore.getLastCommittedTransaction();\n-                KernelTransactionImplementation tx = localTxPool.acquire();\n-                StatementLocks statementLocks = statementLocksFactory.newInstance();\n-                tx.initialize( lastCommittedTransaction.transactionId(), lastCommittedTransaction.commitTimestamp(),\n-                        statementLocks, type, securityContext, timeout, userTransactionIdCounter.incrementAndGet() );\n-                return tx;\n-            }\n-            finally\n-            {\n-                newTransactionsLock.readLock().unlock();\n-            }\n-        }\n-        catch ( InterruptedException ie )\n-        {\n-            Thread.interrupted();\n-            throw new TransactionFailureException( \"Fail to start new transaction.\", ie );\n-        }\n-    }\n-\n-    /**\n-     * Give an approximate set of all transactions currently running.\n-     * This is not guaranteed to be exact, as transactions may stop and start while this set is gathered.\n-     *\n-     * @return the (approximate) set of open transactions.\n-     */\n-    public Set<KernelTransactionHandle> activeTransactions()\n+      while (!newTransactionsLock.readLock().tryLock(1, TimeUnit.SECONDS))\n+      {\n+        assertRunning();\n+      }\n+      try\n+      {\n+        assertRunning();\n+        TransactionId lastCommittedTransaction = transactionIdStore.getLastCommittedTransaction();\n+        KernelTransactionImplementation tx = localTxPool.acquire();\n+        StatementLocks statementLocks = statementLocksFactory.newInstance();\n+        tx.initialize(lastCommittedTransaction.transactionId(), lastCommittedTransaction.commitTimestamp(),\n+            statementLocks, type, securityContext, timeout, userTransactionIdCounter.incrementAndGet());\n+        return tx;\n+      } finally\n+      {\n+        newTransactionsLock.readLock().unlock();\n+      }\n+    } catch (InterruptedException ie)\n     {\n-        return allTransactions\n-            .stream()\n-            .map( this::createHandle )\n-            .filter( KernelTransactionHandle::isOpen )\n-            .collect( toSet() );\n+      Thread.interrupted();\n+      throw new TransactionFailureException(\"Fail to start new transaction.\", ie);\n     }\n+  }\n \n-    /**\n-     * Dispose of all pooled transactions. This is done on shutdown or on internal events (like an HA mode switch) that\n-     * require transactions to be re-created.\n-     */\n-    public void disposeAll()\n-    {\n-        terminateTransactions();\n-        localTxPool.close();\n-        globalTxPool.close();\n-    }\n+  /**\n+   * Give an approximate set of all transactions currently running.\n+   * This is not guaranteed to be exact, as transactions may stop and start while this set is gathered.\n+   *\n+   * @return the (approximate) set of open transactions.\n+   */\n+  public Set<KernelTransactionHandle> activeTransactions()\n+  {\n+    return allTransactions\n+        .stream()\n+        .map(this::createHandle)\n+        .filter(KernelTransactionHandle::isOpen)\n+        .collect(toSet());\n+  }\n \n-    public void terminateTransactions()\n-    {\n-        markAllTransactionsAsTerminated();\n-    }\n+  /**\n+   * Dispose of all pooled transactions. This is done on shutdown or on internal events (like an HA mode switch) that\n+   * require transactions to be re-created.\n+   */\n+  public void disposeAll()\n+  {\n+    terminateTransactions();\n+    localTxPool.close();\n+    globalTxPool.close();\n+  }\n \n-    private void markAllTransactionsAsTerminated()\n-    {\n-        // we mark all transactions for termination since we want to make sure these transactions\n-        // won't be reused, ever. Each transaction has, among other things, a Locks.Client and we\n-        // certainly want to keep that from being reused from this point.\n-        allTransactions.forEach( tx -> tx.markForTermination( Status.General.DatabaseUnavailable ) );\n-    }\n+  public void terminateTransactions()\n+  {\n+    markAllTransactionsAsTerminated();\n+  }\n \n-    public boolean haveClosingTransaction()\n-    {\n-        return allTransactions.stream().anyMatch( KernelTransactionImplementation::isClosing );\n-    }\n+  private void markAllTransactionsAsTerminated()\n+  {\n+    // we mark all transactions for termination since we want to make sure these transactions\n+    // won't be reused, ever. Each transaction has, among other things, a Locks.Client and we\n+    // certainly want to keep that from being reused from this point.\n+    allTransactions.forEach(tx -> tx.markForTermination(Status.General.DatabaseUnavailable));\n+  }\n \n-    @Override\n-    public void start()\n-    {\n-        stopped = false;\n-        unblockNewTransactions();\n-    }\n+  public boolean haveClosingTransaction()\n+  {\n+    return allTransactions.stream().anyMatch(KernelTransactionImplementation::isClosing);\n+  }\n \n-    @Override\n-    public void stop()\n-    {\n-        blockNewTransactions();\n-        stopped = true;\n-    }\n+  @Override\n+  public void start()\n+  {\n+    stopped = false;\n+    unblockNewTransactions();\n+  }\n \n-    @Override\n-    public void shutdown()\n-    {\n-        disposeAll();\n-    }\n+  @Override\n+  public void stop()\n+  {\n+    blockNewTransactions();\n+    stopped = true;\n+  }\n \n-    @Override\n-    public KernelTransactionsSnapshot get()\n-    {\n-        return new KernelTransactionsSnapshot( activeTransactions(), clock.millis() );\n-    }\n+  @Override\n+  public void shutdown()\n+  {\n+    disposeAll();\n+  }\n \n-    /**\n-     * Do not allow new transactions to start until {@link #unblockNewTransactions()} is called. Current thread have\n-     * responsibility of doing so.\n-     * <p>\n-     * Blocking call.\n-     */\n-    public void blockNewTransactions()\n-    {\n-        doBlockNewTransactions();\n-    }\n+  @Override\n+  public KernelTransactionsSnapshot get()\n+  {\n+    return new KernelTransactionsSnapshot(activeTransactions(), clock.millis());\n+  }\n+\n+  /**\n+   * Do not allow new transactions to start until {@link #unblockNewTransactions()} is called. Current thread have\n+   * responsibility of doing so.\n+   * <p>\n+   * Blocking call.\n+   */\n+  public void blockNewTransactions()\n+  {\n+    doBlockNewTransactions();\n+  }\n+\n+  /**\n+   * This is private since it's called from the constructor.\n+   */\n+  private void doBlockNewTransactions()\n+  {\n+    newTransactionsLock.writeLock().lock();\n+  }\n \n-    /**\n-     * This is private since it's called from the constructor.\n-     */\n-    private void doBlockNewTransactions()\n+  /**\n+   * Allow new transactions to be started again if current thread is the one who called\n+   * {@link #blockNewTransactions()}.\n+   *\n+   * @throws IllegalStateException if current thread is not the one that called {@link #blockNewTransactions()}.\n+   */\n+  public void unblockNewTransactions()\n+  {\n+    if (!newTransactionsLock.writeLock().isHeldByCurrentThread())\n     {\n-        newTransactionsLock.writeLock().lock();\n+      throw new IllegalStateException(\"This thread did not block transactions previously\");\n     }\n+    newTransactionsLock.writeLock().unlock();\n+  }\n \n-    /**\n-     * Allow new transactions to be started again if current thread is the one who called\n-     * {@link #blockNewTransactions()}.\n-     *\n-     * @throws IllegalStateException if current thread is not the one that called {@link #blockNewTransactions()}.\n-     */\n-    public void unblockNewTransactions()\n+  /**\n+   * Create new handle for the given transaction.\n+   * <p>\n+   * <b>Note:</b> this method is package-private for testing <b>only</b>.\n+   *\n+   * @param tx transaction to wrap.\n+   * @return transaction handle.\n+   */\n+  KernelTransactionHandle createHandle(KernelTransactionImplementation tx)\n+  {\n+    return new KernelTransactionImplementationHandle(tx, clock);\n+  }\n+\n+  private void assertRunning()\n+  {\n+    if (availabilityGuard.isShutdown())\n     {\n-        if ( !newTransactionsLock.writeLock().isHeldByCurrentThread() )\n-        {\n-            throw new IllegalStateException( \"This thread did not block transactions previously\" );\n-        }\n-        newTransactionsLock.writeLock().unlock();\n+      throw new DatabaseShutdownException();\n     }\n-\n-    /**\n-     * Create new handle for the given transaction.\n-     * <p>\n-     * <b>Note:</b> this method is package-private for testing <b>only</b>.\n-     *\n-     * @param tx transaction to wrap.\n-     * @return transaction handle.\n-     */\n-    KernelTransactionHandle createHandle( KernelTransactionImplementation tx )\n+    if (stopped)\n     {\n-        return new KernelTransactionImplementationHandle( tx, clock );\n+      throw new IllegalStateException(\"Can't start new transaction with stopped \" + getClass());\n     }\n+  }\n \n-    private void assertRunning()\n+  private void assertCurrentThreadIsNotBlockingNewTransactions()\n+  {\n+    if (newTransactionsLock.isWriteLockedByCurrentThread())\n     {\n-        if ( availabilityGuard.isShutdown() )\n-        {\n-            throw new DatabaseShutdownException();\n-        }\n-        if ( stopped )\n-        {\n-            throw new IllegalStateException( \"Can't start new transaction with stopped \" + getClass() );\n-        }\n+      throw new IllegalStateException(\n+          \"Thread that is blocking new transactions from starting can't start new transaction\");\n     }\n+  }\n+\n+  private class KernelTransactionImplementationFactory implements Factory<KernelTransactionImplementation>\n+  {\n+    private final Set<KernelTransactionImplementation> transactions;\n \n-    private void assertCurrentThreadIsNotBlockingNewTransactions()\n+    KernelTransactionImplementationFactory(Set<KernelTransactionImplementation> transactions)\n     {\n-        if ( newTransactionsLock.isWriteLockedByCurrentThread() )\n-        {\n-            throw new IllegalStateException(\n-                    \"Thread that is blocking new transactions from starting can't start new transaction\" );\n-        }\n+      this.transactions = transactions;\n     }\n \n-    private class KernelTransactionImplementationFactory implements Factory<KernelTransactionImplementation>\n+    @Override\n+    public KernelTransactionImplementation newInstance()\n     {\n-        private final Set<KernelTransactionImplementation> transactions;\n+      KernelTransactionImplementation tx =\n+          new KernelTransactionImplementation(statementOperations, schemaWriteGuard, hooks,\n+              constraintIndexCreator, procedures, transactionHeaderInformationFactory,\n+              transactionCommitProcess, transactionMonitor, explicitIndexTxStateSupplier, localTxPool,\n+              clock, cpuClockRef, heapAllocationRef, tracers.transactionTracer, tracers.lockTracer,\n+              tracers.pageCursorTracerSupplier, storageEngine, accessCapability,\n+              cursorsSupplier.get(), autoIndexing,\n+              explicitIndexStore, versionContextSupplier, collectionsFactorySupplier, constraintSemantics,\n+              schemaState, indexingService,\n+              indexProviderMap);\n+      this.transactions.add(tx);\n+      return tx;\n+    }\n+  }\n \n-        KernelTransactionImplementationFactory( Set<KernelTransactionImplementation> transactions )\n-        {\n-            this.transactions = transactions;\n-        }\n+  private static class GlobalKernelTransactionPool extends LinkedQueuePool<KernelTransactionImplementation>\n+  {\n+    private final Set<KernelTransactionImplementation> transactions;\n \n-        @Override\n-        public KernelTransactionImplementation newInstance()\n-        {\n-            KernelTransactionImplementation tx =\n-                    new KernelTransactionImplementation( statementOperations, schemaWriteGuard, hooks,\n-                            constraintIndexCreator, procedures, transactionHeaderInformationFactory,\n-                            transactionCommitProcess, transactionMonitor, explicitIndexTxStateSupplier, localTxPool,\n-                            clock, cpuClockRef, heapAllocationRef, tracers.transactionTracer, tracers.lockTracer,\n-                            tracers.pageCursorTracerSupplier, storageEngine, accessCapability,\n-                            cursorsSupplier.get(), autoIndexing,\n-                            explicitIndexStore, versionContextSupplier, collectionsFactorySupplier, constraintSemantics,\n-                            schemaState, indexingService,\n-                            indexProviderMap );\n-            this.transactions.add( tx );\n-            return tx;\n-        }\n+    GlobalKernelTransactionPool(Set<KernelTransactionImplementation> transactions,\n+                                Factory<KernelTransactionImplementation> factory)\n+    {\n+      super(8, factory);\n+      this.transactions = transactions;\n     }\n \n-    private static class GlobalKernelTransactionPool extends LinkedQueuePool<KernelTransactionImplementation>\n+    @Override\n+    protected void dispose(KernelTransactionImplementation tx)\n     {\n-        private final Set<KernelTransactionImplementation> transactions;\n-\n-        GlobalKernelTransactionPool( Set<KernelTransactionImplementation> transactions,\n-                Factory<KernelTransactionImplementation> factory )\n-        {\n-            super( 8, factory );\n-            this.transactions = transactions;\n-        }\n-\n-        @Override\n-        protected void dispose( KernelTransactionImplementation tx )\n-        {\n-            transactions.remove( tx );\n-            tx.dispose();\n-            super.dispose( tx );\n-        }\n+      transactions.remove(tx);\n+      tx.dispose();\n+      super.dispose(tx);\n     }\n+  }\n }\n",
            "diff_size": 362
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "366",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 275).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "368",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/144/KernelTransactions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/144/KernelTransactions.java\nindex ae0b0caba57..c2d7732dffe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/144/KernelTransactions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/144/KernelTransactions.java\n@@ -123,8 +123,7 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n     // This is the factory that actually builds brand-new instances.\n     private final Factory<KernelTransactionImplementation> factory = new KernelTransactionImplementationFactory( allTransactions );\n     // Global pool of transactions, wrapped by the thread-local marshland pool and so is not used directly.\n-    private final LinkedQueuePool<KernelTransactionImplementation> globalTxPool =\n-            new GlobalKernelTransactionPool( allTransactions, factory );\n+    private final LinkedQueuePool<KernelTransactionImplementation> globalTxPool = new GlobalKernelTransactionPool( allTransactions, factory );\n     // Pool of unused transactions.\n     private final MarshlandPool<KernelTransactionImplementation> localTxPool = new MarshlandPool<>( globalTxPool );\n     private final ConstraintSemantics constraintSemantics;\n@@ -143,9 +142,7 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n             ExplicitIndexProviderLookup explicitIndexProviderLookup, TransactionHooks hooks,\n             TransactionMonitor transactionMonitor, AvailabilityGuard availabilityGuard, Tracers tracers,\n             StorageEngine storageEngine, Procedures procedures, TransactionIdStore transactionIdStore,\n-            SystemNanoClock clock,\n-            AtomicReference<CpuClock> cpuClockRef, AtomicReference<HeapAllocation> heapAllocationRef, AccessCapability accessCapability,\n-            Supplier<DefaultCursors> cursorsSupplier,\n+            SystemNanoClock clock, AtomicReference<CpuClock> cpuClockRef, AtomicReference<HeapAllocation> heapAllocationRef, AccessCapability accessCapability, Supplier<DefaultCursors> cursorsSupplier,\n             AutoIndexing autoIndexing,\n             ExplicitIndexStore explicitIndexStore,\n             VersionContextSupplier versionContextSupplier,\n@@ -175,10 +172,8 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n         this.explicitIndexStore = explicitIndexStore;\n         this.indexingService = indexingService;\n         this.indexProviderMap = indexProviderMap;\n-        this.explicitIndexTxStateSupplier = () ->\n-                new CachingExplicitIndexTransactionState(\n-                        new ExplicitIndexTransactionStateImpl( indexConfigStore, explicitIndexProviderLookup ) );\n-        this.versionContextSupplier = versionContextSupplier;\n+        this.explicitIndexTxStateSupplier = () -> new CachingExplicitIndexTransactionState( new ExplicitIndexTransactionStateImpl( indexConfigStore, explicitIndexProviderLookup ) );\n+this.versionContextSupplier = versionContextSupplier;\n         this.clock = clock;\n         doBlockNewTransactions();\n         this.cursorsSupplier = cursorsSupplier;\n@@ -190,15 +185,16 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n     public KernelTransaction newInstance( KernelTransaction.Type type, LoginContext loginContext, long timeout )\n     {\n         assertCurrentThreadIsNotBlockingNewTransactions();\n-        SecurityContext securityContext = loginContext.authorize( p -> storageEngine\n-                .storeReadLayer().propertyKeyGetOrCreateForName( p ) );\n-        try\n+        SecurityContext securityContext = loginContext.authorize( p -> storageEngine.storeReadLayer().propertyKeyGetOrCreateForName( p ) );\n+\n+try\n         {\n             while ( !newTransactionsLock.readLock().tryLock( 1, TimeUnit.SECONDS ) )\n             {\n                 assertRunning();\n             }\n-            try\n+\n+try\n             {\n                 assertRunning();\n                 TransactionId lastCommittedTransaction = transactionIdStore.getLastCommittedTransaction();\n@@ -206,7 +202,7 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n                 StatementLocks statementLocks = statementLocksFactory.newInstance();\n                 tx.initialize( lastCommittedTransaction.transactionId(), lastCommittedTransaction.commitTimestamp(),\n                         statementLocks, type, securityContext, timeout, userTransactionIdCounter.incrementAndGet() );\n-                return tx;\n+return tx;\n             }\n             finally\n             {\n@@ -228,12 +224,8 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n      */\n     public Set<KernelTransactionHandle> activeTransactions()\n     {\n-        return allTransactions\n-            .stream()\n-            .map( this::createHandle )\n-            .filter( KernelTransactionHandle::isOpen )\n-            .collect( toSet() );\n-    }\n+        return allTransactions.stream().map( this::createHandle ).filter( KernelTransactionHandle::isOpen ).collect( toSet() );\n+            }\n \n     /**\n      * Dispose of all pooled transactions. This is done on shutdown or on internal events (like an HA mode switch) that\n@@ -343,7 +335,8 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n         {\n             throw new DatabaseShutdownException();\n         }\n-        if ( stopped )\n+\n+if ( stopped )\n         {\n             throw new IllegalStateException( \"Can't start new transaction with stopped \" + getClass() );\n         }\n@@ -353,9 +346,8 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n     {\n         if ( newTransactionsLock.isWriteLockedByCurrentThread() )\n         {\n-            throw new IllegalStateException(\n-                    \"Thread that is blocking new transactions from starting can't start new transaction\" );\n-        }\n+            throw new IllegalStateException( \"Thread that is blocking new transactions from starting can't start new transaction\" );\n+    }\n     }\n \n     private class KernelTransactionImplementationFactory implements Factory<KernelTransactionImplementation>\n@@ -370,17 +362,11 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n         @Override\n         public KernelTransactionImplementation newInstance()\n         {\n-            KernelTransactionImplementation tx =\n-                    new KernelTransactionImplementation( statementOperations, schemaWriteGuard, hooks,\n-                            constraintIndexCreator, procedures, transactionHeaderInformationFactory,\n-                            transactionCommitProcess, transactionMonitor, explicitIndexTxStateSupplier, localTxPool,\n-                            clock, cpuClockRef, heapAllocationRef, tracers.transactionTracer, tracers.lockTracer,\n+            KernelTransactionImplementation tx = new KernelTransactionImplementation( statementOperations, schemaWriteGuard, hooks,\n+                            constraintIndexCreator, procedures, transactionHeaderInformationFactory, transactionCommitProcess, transactionMonitor, explicitIndexTxStateSupplier, localTxPool, clock, cpuClockRef, heapAllocationRef, tracers.transactionTracer, tracers.lockTracer,\n                             tracers.pageCursorTracerSupplier, storageEngine, accessCapability,\n-                            cursorsSupplier.get(), autoIndexing,\n-                            explicitIndexStore, versionContextSupplier, collectionsFactorySupplier, constraintSemantics,\n-                            schemaState, indexingService,\n-                            indexProviderMap );\n-            this.transactions.add( tx );\n+                            cursorsSupplier.get(), autoIndexing, explicitIndexStore, versionContextSupplier, collectionsFactorySupplier, constraintSemantics, schemaState, indexingService, indexProviderMap );\n+this.transactions.add( tx );\n             return tx;\n         }\n     }\n@@ -389,8 +375,7 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n     {\n         private final Set<KernelTransactionImplementation> transactions;\n \n-        GlobalKernelTransactionPool( Set<KernelTransactionImplementation> transactions,\n-                Factory<KernelTransactionImplementation> factory )\n+        GlobalKernelTransactionPool( Set<KernelTransactionImplementation> transactions, Factory<KernelTransactionImplementation> factory )\n         {\n             super( 8, factory );\n             this.transactions = transactions;\n@@ -404,4 +389,4 @@ public class KernelTransactions extends LifecycleAdapter implements Supplier<Ker\n             super.dispose( tx );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}