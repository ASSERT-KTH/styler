{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3814",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "145",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3814/MethodDeclaration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3814/MethodDeclaration.java\nindex b9f6899ac33..b2b95af4dca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3814/MethodDeclaration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3814/MethodDeclaration.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.lang.reflect.Modifier;\n@@ -34,283 +35,281 @@ import static org.neo4j.codegen.TypeReference.typeReference;\n \n public abstract class MethodDeclaration\n {\n-    public static Builder method( Class<?> returnType, String name, Parameter... parameters )\n+  public static Builder method(Class<?> returnType, String name, Parameter... parameters)\n+  {\n+    return method(typeReference(returnType), name, parameters);\n+  }\n+\n+  public static Builder method(final TypeReference returnType, final String name, Parameter... parameters)\n+  {\n+    return new Builder(parameters)\n     {\n-        return method( typeReference( returnType ), name, parameters );\n-    }\n-\n-    public static Builder method( final TypeReference returnType, final String name, Parameter... parameters )\n+      @Override\n+      MethodDeclaration build(TypeReference owner)\n+      {\n+        return method(owner, returnType, name, parameters, exceptions(), modifiers(), typeParameters());\n+      }\n+    };\n+  }\n+\n+  static Builder constructor(Parameter... parameters)\n+  {\n+    return new Builder(parameters)\n     {\n-        return new Builder( parameters )\n-        {\n-            @Override\n-            MethodDeclaration build( TypeReference owner )\n-            {\n-                return method( owner, returnType, name, parameters, exceptions(), modifiers(), typeParameters() );\n-            }\n-        };\n+      @Override\n+      MethodDeclaration build(TypeReference owner)\n+      {\n+        return constructor(owner, parameters, exceptions(), modifiers(), typeParameters());\n+      }\n+    };\n+  }\n+\n+  public List<TypeParameter> typeParameters()\n+  {\n+    return unmodifiableList(asList(typeParameters));\n+  }\n+\n+  public List<TypeReference> throwsList()\n+  {\n+    return unmodifiableList(asList(exceptions));\n+  }\n+\n+  public abstract static class Builder\n+  {\n+    private LinkedHashMap<String, TypeReference.Bound> typeParameters;\n+\n+    public Builder parameterizedWith(String name, TypeReference.Bound bound)\n+    {\n+      if (typeParameters == null)\n+      {\n+        typeParameters = new LinkedHashMap<>();\n+      } else if (typeParameters.containsKey(name))\n+      {\n+        throw new IllegalArgumentException(name + \" defined twice\");\n+      }\n+      typeParameters.put(name, bound);\n+      return this;\n     }\n \n-    static Builder constructor( Parameter... parameters )\n+    public Builder throwsException(Class<?> type)\n     {\n-        return new Builder( parameters )\n-        {\n-            @Override\n-            MethodDeclaration build( TypeReference owner )\n-            {\n-                return constructor( owner, parameters, exceptions(), modifiers(), typeParameters() );\n-            }\n-        };\n+      return throwsException(TypeReference.typeReference(type));\n     }\n \n-    public List<TypeParameter> typeParameters()\n+    public Builder throwsException(TypeReference type)\n     {\n-        return unmodifiableList( asList( typeParameters ) );\n+      if (exceptions == null)\n+      {\n+        exceptions = new ArrayList<>();\n+      }\n+      exceptions.add(type);\n+      return this;\n     }\n \n-    public List<TypeReference> throwsList()\n+    public Builder modifiers(int modifiers)\n     {\n-        return unmodifiableList( asList( exceptions ) );\n+      this.modifiers = modifiers;\n+      return this;\n     }\n \n-    public abstract static class Builder\n+    public int modifiers()\n     {\n-        private LinkedHashMap<String,TypeReference.Bound> typeParameters;\n+      return modifiers;\n+    }\n \n-        public Builder parameterizedWith( String name, TypeReference.Bound bound )\n-        {\n-            if ( typeParameters == null )\n-            {\n-                typeParameters = new LinkedHashMap<>();\n-            }\n-            else if ( typeParameters.containsKey( name ) )\n-            {\n-                throw new IllegalArgumentException( name + \" defined twice\" );\n-            }\n-            typeParameters.put( name, bound );\n-            return this;\n-        }\n+    abstract MethodDeclaration build(TypeReference owner);\n \n-        public Builder throwsException( Class<?> type )\n-        {\n-            return throwsException( TypeReference.typeReference( type ) );\n-        }\n+    final Parameter[] parameters;\n+    private List<TypeReference> exceptions;\n+    private int modifiers = Modifier.PUBLIC;\n \n-        public Builder throwsException( TypeReference type )\n-        {\n-            if ( exceptions == null )\n-            {\n-                exceptions = new ArrayList<>();\n-            }\n-            exceptions.add( type );\n-            return this;\n-        }\n+    private Builder(Parameter[] parameters)\n+    {\n+      this.parameters = parameters;\n+    }\n \n-        public Builder modifiers( int modifiers )\n-        {\n-            this.modifiers = modifiers;\n-            return this;\n-        }\n+    TypeReference[] exceptions()\n+    {\n+      return exceptions == null ? NO_TYPES : exceptions.toArray(new TypeReference[exceptions.size()]);\n+    }\n \n-        public int modifiers()\n+    TypeParameter[] typeParameters()\n+    {\n+      if (typeParameters == null)\n+      {\n+        return TypeParameter.NO_PARAMETERS;\n+      } else\n+      {\n+        TypeParameter[] result = new TypeParameter[typeParameters.size()];\n+        int i = 0;\n+        for (Map.Entry<String, TypeReference.Bound> entry : typeParameters.entrySet())\n         {\n-            return modifiers;\n+          result[i++] = new TypeParameter(entry.getKey(), entry.getValue());\n         }\n+        return result;\n+      }\n+    }\n+  }\n+\n+  private final TypeReference owner;\n+  private final Parameter[] parameters;\n+  private final TypeReference[] exceptions;\n+  private final TypeParameter[] typeParameters;\n+  private final int modifiers;\n+\n+  MethodDeclaration(TypeReference owner, Parameter[] parameters, TypeReference[] exceptions,\n+                    int modifiers, TypeParameter[] typeParameters)\n+  {\n+    this.owner = owner;\n+    this.parameters = parameters;\n+    this.exceptions = exceptions;\n+    this.modifiers = modifiers;\n+    this.typeParameters = typeParameters;\n+  }\n+\n+  public abstract boolean isConstructor();\n+\n+  public boolean isStatic()\n+  {\n+    return Modifier.isStatic(modifiers);\n+  }\n+\n+  public boolean isGeneric()\n+  {\n+    if (returnType().isGeneric() || typeParameters.length != 0)\n+    {\n+      return true;\n+    }\n+    for (Parameter parameter : parameters)\n+    {\n+      if (parameter.type().isGeneric())\n+      {\n+        return true;\n+      }\n+    }\n \n-        abstract MethodDeclaration build( TypeReference owner );\n-\n-        final Parameter[] parameters;\n-        private List<TypeReference> exceptions;\n-        private int modifiers = Modifier.PUBLIC;\n-\n-        private Builder( Parameter[] parameters )\n-        {\n-            this.parameters = parameters;\n-        }\n+    return false;\n+  }\n \n-        TypeReference[] exceptions()\n-        {\n-            return exceptions == null ? NO_TYPES : exceptions.toArray( new TypeReference[exceptions.size()] );\n-        }\n+  public TypeReference declaringClass()\n+  {\n+    return owner;\n+  }\n \n-        TypeParameter[] typeParameters()\n-        {\n-            if ( typeParameters == null )\n-            {\n-                return TypeParameter.NO_PARAMETERS;\n-            }\n-            else\n-            {\n-                TypeParameter[] result = new TypeParameter[typeParameters.size()];\n-                int i = 0;\n-                for ( Map.Entry<String,TypeReference.Bound> entry : typeParameters.entrySet() )\n-                {\n-                    result[i++] = new TypeParameter( entry.getKey(), entry.getValue() );\n-                }\n-                return result;\n-            }\n-        }\n-    }\n+  public int modifiers()\n+  {\n+    return modifiers;\n+  }\n \n-    private final TypeReference owner;\n-    private final Parameter[] parameters;\n-    private final TypeReference[] exceptions;\n-    private final TypeParameter[] typeParameters;\n-    private final int modifiers;\n+  public abstract TypeReference returnType();\n \n-    MethodDeclaration( TypeReference owner, Parameter[] parameters, TypeReference[] exceptions,\n-            int modifiers, TypeParameter[] typeParameters )\n-    {\n-        this.owner = owner;\n-        this.parameters = parameters;\n-        this.exceptions = exceptions;\n-        this.modifiers = modifiers;\n-        this.typeParameters = typeParameters;\n-    }\n+  public abstract String name();\n \n-    public abstract boolean isConstructor();\n+  public Parameter[] parameters()\n+  {\n+    return parameters;\n+  }\n \n-    public boolean isStatic()\n+  public MethodDeclaration erased()\n+  {\n+    Map<String, TypeReference> table = new HashMap<>();\n+    for (TypeParameter parameter : typeParameters)\n     {\n-        return Modifier.isStatic( modifiers );\n+      table.put(parameter.name(), parameter.extendsBound());\n     }\n \n-    public boolean isGeneric()\n+    TypeReference newReturnType = erase(returnType(), table);\n+    Parameter[] newParameters = new Parameter[this.parameters.length];\n+    for (int i = 0; i < parameters.length; i++)\n     {\n-        if ( returnType().isGeneric() || typeParameters.length != 0 )\n-        {\n-            return true;\n-        }\n-        for ( Parameter parameter : parameters )\n-        {\n-            if ( parameter.type().isGeneric() )\n-            {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n+      Parameter parameter = parameters[i];\n+      TypeReference erasedType = erase(parameter.type(), table);\n+      newParameters[i] = param(erasedType, parameter.name());\n     }\n-\n-    public TypeReference declaringClass()\n+    TypeReference[] newExceptions = new TypeReference[exceptions.length];\n+    for (int i = 0; i < exceptions.length; i++)\n     {\n-        return owner;\n+      newExceptions[i] = erase(exceptions[i], table);\n     }\n+    String newName = name();\n+    boolean newIsConstrucor = isConstructor();\n \n-    public int modifiers()\n-    {\n-        return modifiers;\n-    }\n+    return methodDeclaration(owner, newReturnType, newParameters, newExceptions, newName, newIsConstrucor,\n+        modifiers, typeParameters);\n+  }\n \n-    public abstract TypeReference returnType();\n+  private TypeReference erase(TypeReference reference, Map<String, TypeReference> table)\n+  {\n+    TypeReference erasedReference = table.get(reference.fullName());\n \n-    public abstract String name();\n+    return erasedReference != null ? erasedReference : reference;\n+  }\n \n-    public Parameter[] parameters()\n-    {\n-        return parameters;\n-    }\n+  static MethodDeclaration method(TypeReference owner, final TypeReference returnType, final String name,\n+                                  Parameter[] parameters, TypeReference[] exceptions, int modifiers, TypeParameter[] typeParameters)\n+  {\n+    return methodDeclaration(owner, returnType, parameters, exceptions, name, false, modifiers, typeParameters);\n+  }\n \n-    public MethodDeclaration erased()\n-    {\n-        Map<String,TypeReference> table = new HashMap<>();\n-        for ( TypeParameter parameter : typeParameters )\n-        {\n-            table.put( parameter.name(), parameter.extendsBound() );\n-        }\n+  static MethodDeclaration constructor(TypeReference owner, Parameter[] parameters, TypeReference[] exceptions,\n+                                       int modifiers, TypeParameter[] typeParameters)\n+  {\n+    return methodDeclaration(owner, TypeReference.VOID, parameters, exceptions, \"<init>\", true, modifiers,\n+        typeParameters);\n+  }\n \n-        TypeReference newReturnType = erase( returnType(), table );\n-        Parameter[] newParameters = new Parameter[this.parameters.length];\n-        for ( int i = 0; i < parameters.length; i++ )\n-        {\n-            Parameter parameter = parameters[i];\n-            TypeReference erasedType = erase( parameter.type(), table );\n-            newParameters[i] = param( erasedType, parameter.name() );\n-        }\n-        TypeReference[] newExceptions = new TypeReference[exceptions.length];\n-        for ( int i = 0; i < exceptions.length; i++ )\n-        {\n-            newExceptions[i] = erase( exceptions[i], table );\n-        }\n-        String newName = name();\n-        boolean newIsConstrucor = isConstructor();\n+  public static class TypeParameter\n+  {\n+    static final TypeParameter[] NO_PARAMETERS = {};\n \n-        return methodDeclaration( owner, newReturnType, newParameters, newExceptions, newName, newIsConstrucor,\n-                modifiers, typeParameters );\n-    }\n+    final String name;\n+    final TypeReference.Bound bound;\n \n-    private TypeReference erase( TypeReference reference, Map<String,TypeReference> table )\n+    TypeParameter(String name, TypeReference.Bound bound)\n     {\n-        TypeReference erasedReference = table.get( reference.fullName() );\n-\n-        return erasedReference != null ? erasedReference : reference;\n+      this.name = name;\n+      this.bound = bound;\n     }\n \n-    static MethodDeclaration method( TypeReference owner, final TypeReference returnType, final String name,\n-            Parameter[] parameters, TypeReference[] exceptions, int modifiers, TypeParameter[] typeParameters )\n+    public String name()\n     {\n-        return methodDeclaration( owner, returnType, parameters, exceptions, name, false, modifiers, typeParameters );\n+      return name;\n     }\n \n-    static MethodDeclaration constructor( TypeReference owner, Parameter[] parameters, TypeReference[] exceptions,\n-            int modifiers, TypeParameter[] typeParameters )\n+    public TypeReference extendsBound()\n     {\n-        return methodDeclaration( owner, TypeReference.VOID, parameters, exceptions, \"<init>\", true, modifiers,\n-                typeParameters );\n+      return bound.extendsBound();\n     }\n \n-    public static class TypeParameter\n+    public TypeReference superBound()\n     {\n-        static final TypeParameter[] NO_PARAMETERS = {};\n-\n-        final String name;\n-        final TypeReference.Bound bound;\n-\n-        TypeParameter( String name, TypeReference.Bound bound )\n-        {\n-            this.name = name;\n-            this.bound = bound;\n-        }\n-\n-        public String name()\n-        {\n-            return name;\n-        }\n-\n-        public TypeReference extendsBound()\n-        {\n-            return bound.extendsBound();\n-        }\n-\n-        public TypeReference superBound()\n-        {\n-            return bound.superBound();\n-        }\n+      return bound.superBound();\n     }\n+  }\n \n-    private static MethodDeclaration methodDeclaration( TypeReference owner, final TypeReference returnType,\n-            final Parameter[] parameters, final TypeReference[] exceptions, final String name,\n-            final boolean isConstrucor, int modifiers, TypeParameter[] typeParameters )\n+  private static MethodDeclaration methodDeclaration(TypeReference owner, final TypeReference returnType,\n+                                                     final Parameter[] parameters, final TypeReference[] exceptions, final String name,\n+                                                     final boolean isConstrucor, int modifiers, TypeParameter[] typeParameters)\n+  {\n+    return new MethodDeclaration(owner, parameters, exceptions, modifiers, typeParameters)\n     {\n-        return new MethodDeclaration( owner, parameters, exceptions, modifiers, typeParameters )\n-        {\n-            @Override\n-            public boolean isConstructor()\n-            {\n-                return isConstrucor;\n-            }\n-\n-            @Override\n-            public TypeReference returnType()\n-            {\n-                return returnType;\n-            }\n-\n-            @Override\n-            public String name()\n-            {\n-                return name;\n-            }\n-        };\n-    }\n+      @Override\n+      public boolean isConstructor()\n+      {\n+        return isConstrucor;\n+      }\n+\n+      @Override\n+      public TypeReference returnType()\n+      {\n+        return returnType;\n+      }\n+\n+      @Override\n+      public String name()\n+      {\n+        return name;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 337
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "255",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "291",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 267).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3814/MethodDeclaration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3814/MethodDeclaration.java\nindex b9f6899ac33..c4d3690d15a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3814/MethodDeclaration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3814/MethodDeclaration.java\n@@ -147,7 +147,8 @@ public abstract class MethodDeclaration\n                 {\n                     result[i++] = new TypeParameter( entry.getKey(), entry.getValue() );\n                 }\n-                return result;\n+\n+return result;\n             }\n         }\n     }\n@@ -158,8 +159,7 @@ public abstract class MethodDeclaration\n     private final TypeParameter[] typeParameters;\n     private final int modifiers;\n \n-    MethodDeclaration( TypeReference owner, Parameter[] parameters, TypeReference[] exceptions,\n-            int modifiers, TypeParameter[] typeParameters )\n+    MethodDeclaration( TypeReference owner, Parameter[] parameters, TypeReference[] exceptions, int modifiers, TypeParameter[] typeParameters )\n     {\n         this.owner = owner;\n         this.parameters = parameters;\n@@ -227,23 +227,23 @@ public abstract class MethodDeclaration\n             TypeReference erasedType = erase( parameter.type(), table );\n             newParameters[i] = param( erasedType, parameter.name() );\n         }\n-        TypeReference[] newExceptions = new TypeReference[exceptions.length];\n+\n+TypeReference[] newExceptions = new TypeReference[exceptions.length];\n         for ( int i = 0; i < exceptions.length; i++ )\n         {\n             newExceptions[i] = erase( exceptions[i], table );\n         }\n-        String newName = name();\n-        boolean newIsConstrucor = isConstructor();\n \n-        return methodDeclaration( owner, newReturnType, newParameters, newExceptions, newName, newIsConstrucor,\n+String newName = name();\n+        boolean newIsConstrucor = isConstructor();\n+return methodDeclaration( owner, newReturnType, newParameters, newExceptions, newName, newIsConstrucor,\n                 modifiers, typeParameters );\n     }\n \n     private TypeReference erase( TypeReference reference, Map<String,TypeReference> table )\n     {\n         TypeReference erasedReference = table.get( reference.fullName() );\n-\n-        return erasedReference != null ? erasedReference : reference;\n+return erasedReference != null ? erasedReference : reference;\n     }\n \n     static MethodDeclaration method( TypeReference owner, final TypeReference returnType, final String name,\n@@ -252,8 +252,7 @@ public abstract class MethodDeclaration\n         return methodDeclaration( owner, returnType, parameters, exceptions, name, false, modifiers, typeParameters );\n     }\n \n-    static MethodDeclaration constructor( TypeReference owner, Parameter[] parameters, TypeReference[] exceptions,\n-            int modifiers, TypeParameter[] typeParameters )\n+    static MethodDeclaration constructor( TypeReference owner, Parameter[] parameters, TypeReference[] exceptions, int modifiers, TypeParameter[] typeParameters )\n     {\n         return methodDeclaration( owner, TypeReference.VOID, parameters, exceptions, \"<init>\", true, modifiers,\n                 typeParameters );\n@@ -261,7 +260,8 @@ public abstract class MethodDeclaration\n \n     public static class TypeParameter\n     {\n-        static final TypeParameter[] NO_PARAMETERS = {};\n+        static final TypeParameter[] NO_PARAMETERS = {\n+};\n \n         final String name;\n         final TypeReference.Bound bound;\n@@ -288,9 +288,7 @@ public abstract class MethodDeclaration\n         }\n     }\n \n-    private static MethodDeclaration methodDeclaration( TypeReference owner, final TypeReference returnType,\n-            final Parameter[] parameters, final TypeReference[] exceptions, final String name,\n-            final boolean isConstrucor, int modifiers, TypeParameter[] typeParameters )\n+    private static MethodDeclaration methodDeclaration( TypeReference owner, final TypeReference returnType, final Parameter[] parameters, final TypeReference[] exceptions, final String name, final boolean isConstrucor, int modifiers, TypeParameter[] typeParameters )\n     {\n         return new MethodDeclaration( owner, parameters, exceptions, modifiers, typeParameters )\n         {\n@@ -313,4 +311,4 @@ public abstract class MethodDeclaration\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}