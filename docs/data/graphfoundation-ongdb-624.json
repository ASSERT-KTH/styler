{
    "project_name": "graphfoundation-ongdb",
    "error_id": "624",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/624/BidirectionalTraversalDescription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/624/BidirectionalTraversalDescription.java\nindex 755494b684f..744dc325d66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/624/BidirectionalTraversalDescription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/624/BidirectionalTraversalDescription.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.traversal;\n \n import org.neo4j.graphdb.Node;\n@@ -27,128 +28,132 @@ import org.neo4j.graphdb.Path;\n  * traversal has a start side and an end side and an evaluator to handle\n  * collisions between those two sides, collisions which generates paths\n  * between start and end node(s).\n- *\n+ * <p>\n  * A {@link BidirectionalTraversalDescription} is immutable and each\n  * method which adds or modifies the behavior returns a new instances that\n  * includes the new modification, leaving the instance which returns the new\n  * instance intact.\n- *\n+ * <p>\n  * The interface is still experimental and may still change significantly.\n  *\n  * @see TraversalDescription\n  */\n public interface BidirectionalTraversalDescription\n {\n-    /**\n-     * Sets the start side {@link TraversalDescription} of this bidirectional\n-     * traversal. The point of a bidirectional traversal is that the start\n-     * and end side will meet (or collide) in the middle somewhere and\n-     * generate paths evaluated and returned by this traversal.\n-     * @param startSideDescription the {@link TraversalDescription} to use\n-     * for the start side traversal.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    BidirectionalTraversalDescription startSide( TraversalDescription startSideDescription );\n+  /**\n+   * Sets the start side {@link TraversalDescription} of this bidirectional\n+   * traversal. The point of a bidirectional traversal is that the start\n+   * and end side will meet (or collide) in the middle somewhere and\n+   * generate paths evaluated and returned by this traversal.\n+   *\n+   * @param startSideDescription the {@link TraversalDescription} to use\n+   *                             for the start side traversal.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  BidirectionalTraversalDescription startSide(TraversalDescription startSideDescription);\n \n-    /**\n-     * Sets the end side {@link TraversalDescription} of this bidirectional\n-     * traversal. The point of a bidirectional traversal is that the start\n-     * and end side will meet (or collide) in the middle somewhere and\n-     * generate paths evaluated and returned by this traversal.\n-     * @param endSideDescription the {@link TraversalDescription} to use\n-     * for the end side traversal.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    BidirectionalTraversalDescription endSide( TraversalDescription endSideDescription );\n+  /**\n+   * Sets the end side {@link TraversalDescription} of this bidirectional\n+   * traversal. The point of a bidirectional traversal is that the start\n+   * and end side will meet (or collide) in the middle somewhere and\n+   * generate paths evaluated and returned by this traversal.\n+   *\n+   * @param endSideDescription the {@link TraversalDescription} to use\n+   *                           for the end side traversal.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  BidirectionalTraversalDescription endSide(TraversalDescription endSideDescription);\n \n-    /**\n-     * Sets both the start side and end side of this bidirectional traversal,\n-     * the {@link #startSide(TraversalDescription) start side} is assigned the\n-     * {@code sideDescription} and the {@link #endSide(TraversalDescription) end side}\n-     * is assigned the same description, although\n-     * {@link TraversalDescription#reverse() reversed}. This will replace any\n-     * traversal description previously set by {@link #startSide(TraversalDescription)}\n-     * or {@link #endSide(TraversalDescription)}.\n-     *\n-     * @param sideDescription the {@link TraversalDescription} to use for both sides\n-     * of the bidirectional traversal. The end side will have it\n-     * {@link TraversalDescription#reverse() reversed}\n-     * @return a new traversal description with the new modifications.\n-     */\n-    BidirectionalTraversalDescription mirroredSides( TraversalDescription sideDescription );\n+  /**\n+   * Sets both the start side and end side of this bidirectional traversal,\n+   * the {@link #startSide(TraversalDescription) start side} is assigned the\n+   * {@code sideDescription} and the {@link #endSide(TraversalDescription) end side}\n+   * is assigned the same description, although\n+   * {@link TraversalDescription#reverse() reversed}. This will replace any\n+   * traversal description previously set by {@link #startSide(TraversalDescription)}\n+   * or {@link #endSide(TraversalDescription)}.\n+   *\n+   * @param sideDescription the {@link TraversalDescription} to use for both sides\n+   *                        of the bidirectional traversal. The end side will have it\n+   *                        {@link TraversalDescription#reverse() reversed}\n+   * @return a new traversal description with the new modifications.\n+   */\n+  BidirectionalTraversalDescription mirroredSides(TraversalDescription sideDescription);\n \n-    /**\n-     * Sets the collision policy to use during this traversal. Branch collisions\n-     * happen between {@link TraversalBranch}es where start and end branches\n-     * meet and {@link Path}s are generated from it.\n-     *\n-     * @param collisionDetection the {@link BranchCollisionPolicy} to use during\n-     * this traversal.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    BidirectionalTraversalDescription collisionPolicy( BranchCollisionPolicy collisionDetection );\n+  /**\n+   * Sets the collision policy to use during this traversal. Branch collisions\n+   * happen between {@link TraversalBranch}es where start and end branches\n+   * meet and {@link Path}s are generated from it.\n+   *\n+   * @param collisionDetection the {@link BranchCollisionPolicy} to use during\n+   *                           this traversal.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  BidirectionalTraversalDescription collisionPolicy(BranchCollisionPolicy collisionDetection);\n \n-    /**\n-     * Sets the {@link Evaluator} to use for branch collisions. The outcome\n-     * returned from the evaluator affects the colliding branches.\n-     * @param collisionEvaluator the {@link Evaluator} to use for evaluating\n-     * branch collisions.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    BidirectionalTraversalDescription collisionEvaluator( Evaluator collisionEvaluator );\n+  /**\n+   * Sets the {@link Evaluator} to use for branch collisions. The outcome\n+   * returned from the evaluator affects the colliding branches.\n+   *\n+   * @param collisionEvaluator the {@link Evaluator} to use for evaluating\n+   *                           branch collisions.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  BidirectionalTraversalDescription collisionEvaluator(Evaluator collisionEvaluator);\n \n-    /**\n-     * Sets the {@link PathEvaluator} to use for branch collisions. The outcome\n-     * returned from the evaluator affects the colliding branches.\n-     * @param collisionEvaluator the {@link PathEvaluator} to use for evaluating\n-     * branch collisions.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    BidirectionalTraversalDescription collisionEvaluator( PathEvaluator collisionEvaluator );\n+  /**\n+   * Sets the {@link PathEvaluator} to use for branch collisions. The outcome\n+   * returned from the evaluator affects the colliding branches.\n+   *\n+   * @param collisionEvaluator the {@link PathEvaluator} to use for evaluating\n+   *                           branch collisions.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  BidirectionalTraversalDescription collisionEvaluator(PathEvaluator collisionEvaluator);\n \n-    /**\n-     * In a bidirectional traversal the traverser alternates which side\n-     * (start or end) to move further for each step. This sets the\n-     * {@link SideSelectorPolicy} to use.\n-     *\n-     * @param sideSelector the {@link SideSelectorPolicy} to use for this\n-     * traversal.\n-     * @param maxDepth optional max depth parameter to the side selector.\n-     * Why is max depth a concern of the {@link SideSelector}? Because it has\n-     * got knowledge of both the sides of the traversal at any given point.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    BidirectionalTraversalDescription sideSelector( SideSelectorPolicy sideSelector, int maxDepth );\n+  /**\n+   * In a bidirectional traversal the traverser alternates which side\n+   * (start or end) to move further for each step. This sets the\n+   * {@link SideSelectorPolicy} to use.\n+   *\n+   * @param sideSelector the {@link SideSelectorPolicy} to use for this\n+   *                     traversal.\n+   * @param maxDepth     optional max depth parameter to the side selector.\n+   *                     Why is max depth a concern of the {@link SideSelector}? Because it has\n+   *                     got knowledge of both the sides of the traversal at any given point.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  BidirectionalTraversalDescription sideSelector(SideSelectorPolicy sideSelector, int maxDepth);\n \n-    /**\n-     * Traverse between a given {@code start} and {@code end} node with all\n-     * applied rules and behavior in this traversal description.\n-     * A {@link Traverser} is returned which is used to step through the\n-     * graph and getting results back. The traversal is not guaranteed to\n-     * start before the Traverser is used.\n-     *\n-     * @param start {@link Node} to use as starting point for the start\n-     * side in this traversal.\n-     * @param end {@link Node} to use as starting point for the end\n-     * side in this traversal.\n-     * @return a {@link Traverser} used to step through the graph and to get\n-     * results from.\n-     */\n-    Traverser traverse( Node start, Node end );\n+  /**\n+   * Traverse between a given {@code start} and {@code end} node with all\n+   * applied rules and behavior in this traversal description.\n+   * A {@link Traverser} is returned which is used to step through the\n+   * graph and getting results back. The traversal is not guaranteed to\n+   * start before the Traverser is used.\n+   *\n+   * @param start {@link Node} to use as starting point for the start\n+   *              side in this traversal.\n+   * @param end   {@link Node} to use as starting point for the end\n+   *              side in this traversal.\n+   * @return a {@link Traverser} used to step through the graph and to get\n+   * results from.\n+   */\n+  Traverser traverse(Node start, Node end);\n \n-    /**\n-     * Traverse between a set of {@code start} and {@code end} nodes with all\n-     * applied rules and behavior in this traversal description.\n-     * A {@link Traverser} is returned which is used to step through the\n-     * graph and getting results back. The traversal is not guaranteed to\n-     * start before the Traverser is used.\n-     *\n-     * @param start set of nodes to use as starting points for the start\n-     * side in this traversal.\n-     * @param end set of nodes to use as starting points for the end\n-     * side in this traversal.\n-     * @return a {@link Traverser} used to step through the graph and to get\n-     * results from.\n-     */\n-    Traverser traverse( Iterable<Node> start, Iterable<Node> end );\n+  /**\n+   * Traverse between a set of {@code start} and {@code end} nodes with all\n+   * applied rules and behavior in this traversal description.\n+   * A {@link Traverser} is returned which is used to step through the\n+   * graph and getting results back. The traversal is not guaranteed to\n+   * start before the Traverser is used.\n+   *\n+   * @param start set of nodes to use as starting points for the start\n+   *              side in this traversal.\n+   * @param end   set of nodes to use as starting points for the end\n+   *              side in this traversal.\n+   * @return a {@link Traverser} used to step through the graph and to get\n+   * results from.\n+   */\n+  Traverser traverse(Iterable<Node> start, Iterable<Node> end);\n }\n",
            "diff_size": 111
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/624/BidirectionalTraversalDescription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/624/BidirectionalTraversalDescription.java\nindex 755494b684f..79764c23f96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/624/BidirectionalTraversalDescription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/624/BidirectionalTraversalDescription.java\n@@ -151,4 +151,4 @@ public interface BidirectionalTraversalDescription\n      * results from.\n      */\n     Traverser traverse( Iterable<Node> start, Iterable<Node> end );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}