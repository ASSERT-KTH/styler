{
    "project_name": "primefaces-primefaces",
    "error_id": "20",
    "information": {
        "errors": [
            {
                "line": "105",
                "column": "13",
                "severity": "error",
                "message": "'}' at column 13 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "                Object columnValue = String.valueOf(o.getClass().getField(filter.getField()).get(o));\n                matching = constraint.isMatching(context, columnValue, filterValue, LocaleUtils.getCurrentLocale());\n            } catch (ReflectiveOperationException e) {\n                matching = false;\n            }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/styler/20/LazyCustomerDataModel.java\nindex 68b06023ec6..8383e76933e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/styler/20/LazyCustomerDataModel.java\n@@ -102,7 +102,8 @@ public class LazyCustomerDataModel extends LazyDataModel<Customer> {\n             try {\n                 Object columnValue = String.valueOf(o.getClass().getField(filter.getField()).get(o));\n                 matching = constraint.isMatching(context, columnValue, filterValue, LocaleUtils.getCurrentLocale());\n-            } catch (ReflectiveOperationException e) {\n+            }\n+            catch (ReflectiveOperationException e) {\n                 matching = false;\n             }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "106",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/intellij/20/LazyCustomerDataModel.java\nindex 68b06023ec6..2f829e250b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/intellij/20/LazyCustomerDataModel.java\n@@ -21,6 +21,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n+\n package org.primefaces.showcase.view.data.datatable;\n \n import java.util.*;\n@@ -66,21 +67,21 @@ public class LazyCustomerDataModel extends LazyDataModel<Customer> {\n     @Override\n     public List<Customer> load(int offset, int pageSize, Map<String, SortMeta> sortBy, Map<String, FilterMeta> filterBy) {\n         long rowCount = datasource.stream()\n-                .filter(o -> filter(FacesContext.getCurrentInstance(), filterBy.values(), o))\n-                .count();\n+            .filter(o -> filter(FacesContext.getCurrentInstance(), filterBy.values(), o))\n+            .count();\n \n         // apply offset & filters\n         List<Customer> customers = datasource.stream()\n-                .skip(offset)\n-                .filter(o -> filter(FacesContext.getCurrentInstance(), filterBy.values(), o))\n-                .limit(pageSize)\n-                .collect(Collectors.toList());\n+            .skip(offset)\n+            .filter(o -> filter(FacesContext.getCurrentInstance(), filterBy.values(), o))\n+            .limit(pageSize)\n+            .collect(Collectors.toList());\n \n         // sort\n         if (!sortBy.isEmpty()) {\n             List<Comparator<Customer>> comparators = sortBy.values().stream()\n-                    .map(o -> new LazySorter(o.getField(), o.getOrder()))\n-                    .collect(Collectors.toList());\n+                .map(o -> new LazySorter(o.getField(), o.getOrder()))\n+                .collect(Collectors.toList());\n             Comparator<Customer> cp = ComparatorUtils.chainedComparator(comparators); // from apache\n             customers.sort(cp);\n         }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "105",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/naturalize/20/LazyCustomerDataModel.java\nindex 68b06023ec6..7a0be24f75d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/naturalize/20/LazyCustomerDataModel.java\n@@ -113,4 +113,4 @@ public class LazyCustomerDataModel extends LazyDataModel<Customer> {\n \n         return matching;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/codebuff/20/LazyCustomerDataModel.java\nindex 68b06023ec6..5f19489126e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/codebuff/20/LazyCustomerDataModel.java\n@@ -25,7 +25,6 @@ package org.primefaces.showcase.view.data.datatable;\n \n import java.util.*;\n import java.util.stream.Collectors;\n-\n import org.apache.commons.collections4.ComparatorUtils;\n import org.primefaces.model.FilterMeta;\n import org.primefaces.model.LazyDataModel;\n@@ -33,12 +32,12 @@ import org.primefaces.model.SortMeta;\n import org.primefaces.model.filter.FilterConstraint;\n import org.primefaces.showcase.domain.Customer;\n import org.primefaces.util.LocaleUtils;\n-\n import javax.faces.context.FacesContext;\n \n /**\n  * Dummy implementation of LazyDataModel that uses a list to mimic a real datasource like a database.\n  */\n+\n public class LazyCustomerDataModel extends LazyDataModel<Customer> {\n \n     private List<Customer> datasource;\n@@ -65,44 +64,42 @@ public class LazyCustomerDataModel extends LazyDataModel<Customer> {\n \n     @Override\n     public List<Customer> load(int offset, int pageSize, Map<String, SortMeta> sortBy, Map<String, FilterMeta> filterBy) {\n-        long rowCount = datasource.stream()\n-                .filter(o -> filter(FacesContext.getCurrentInstance(), filterBy.values(), o))\n-                .count();\n+        long rowCount = datasource.stream().filter(o -> filter(FacesContext.getCurrentInstance(), filterBy.values(), o))\n+                                           .count();\n \n         // apply offset & filters\n-        List<Customer> customers = datasource.stream()\n-                .skip(offset)\n-                .filter(o -> filter(FacesContext.getCurrentInstance(), filterBy.values(), o))\n-                .limit(pageSize)\n-                .collect(Collectors.toList());\n+        List<Customer> customers = datasource.stream().skip(offset)\n+                                                      .filter(o -> filter(FacesContext.getCurrentInstance(), filterBy.values(), o))\n+                                                      .limit(pageSize)\n+                                                      .collect(Collectors.toList());\n \n         // sort\n         if (!sortBy.isEmpty()) {\n             List<Comparator<Customer>> comparators = sortBy.values().stream()\n-                    .map(o -> new LazySorter(o.getField(), o.getOrder()))\n-                    .collect(Collectors.toList());\n+                                                                    .map(o -> new LazySorter(o.getField(), o.getOrder()))\n+                                                                    .collect(Collectors.toList());\n             Comparator<Customer> cp = ComparatorUtils.chainedComparator(comparators); // from apache\n             customers.sort(cp);\n         }\n \n         // rowCount\n-        setRowCount((int) rowCount);\n \n+        setRowCount((int) rowCount);\n         return customers;\n     }\n \n-\n     private boolean filter(FacesContext context, Collection<FilterMeta> filterBy, Object o) {\n         boolean matching = true;\n-\n         for (FilterMeta filter : filterBy) {\n             FilterConstraint constraint = filter.getConstraint();\n             Object filterValue = filter.getFilterValue();\n \n             try {\n-                Object columnValue = String.valueOf(o.getClass().getField(filter.getField()).get(o));\n+                Object columnValue = String.valueOf(o.getClass().getField(filter.getField())\n+                                                                .get(o));\n                 matching = constraint.isMatching(context, columnValue, filterValue, LocaleUtils.getCurrentLocale());\n-            } catch (ReflectiveOperationException e) {\n+            }\n+            catch (ReflectiveOperationException e) {\n                 matching = false;\n             }\n \n@@ -113,4 +110,4 @@ public class LazyCustomerDataModel extends LazyDataModel<Customer> {\n \n         return matching;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/styler_random/20/LazyCustomerDataModel.java\nindex 68b06023ec6..8383e76933e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/styler_random/20/LazyCustomerDataModel.java\n@@ -102,7 +102,8 @@ public class LazyCustomerDataModel extends LazyDataModel<Customer> {\n             try {\n                 Object columnValue = String.valueOf(o.getClass().getField(filter.getField()).get(o));\n                 matching = constraint.isMatching(context, columnValue, filterValue, LocaleUtils.getCurrentLocale());\n-            } catch (ReflectiveOperationException e) {\n+            }\n+            catch (ReflectiveOperationException e) {\n                 matching = false;\n             }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/styler_three_grams/20/LazyCustomerDataModel.java\nindex 68b06023ec6..8383e76933e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/errored/1/20/LazyCustomerDataModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/primefaces-primefaces/styler_three_grams/20/LazyCustomerDataModel.java\n@@ -102,7 +102,8 @@ public class LazyCustomerDataModel extends LazyDataModel<Customer> {\n             try {\n                 Object columnValue = String.valueOf(o.getClass().getField(filter.getField()).get(o));\n                 matching = constraint.isMatching(context, columnValue, filterValue, LocaleUtils.getCurrentLocale());\n-            } catch (ReflectiveOperationException e) {\n+            }\n+            catch (ReflectiveOperationException e) {\n                 matching = false;\n             }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize"
    ]
}