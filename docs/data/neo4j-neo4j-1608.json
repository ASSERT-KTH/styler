{
    "project_name": "neo4j-neo4j",
    "error_id": "1608",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "152",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "160",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "114",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "127",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1608/DynamicIndexStoreView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1608/DynamicIndexStoreView.java\nindex 93688260c69..8f56d21972b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1608/DynamicIndexStoreView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1608/DynamicIndexStoreView.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state.storeview;\n \n import org.apache.commons.lang3.ArrayUtils;\n@@ -56,47 +57,47 @@ public class DynamicIndexStoreView implements IndexStoreView\n     private final Config config;\n     protected final Supplier<StorageReader> storageEngine;\n \n-    public DynamicIndexStoreView( NeoStoreIndexStoreView neoStoreIndexStoreView, LabelScanStore labelScanStore,\n-            RelationshipTypeScanStore relationshipTypeScanStore, LockService locks,\n-            Supplier<StorageReader> storageEngine, LogProvider logProvider, Config config )\n+    public DynamicIndexStoreView(NeoStoreIndexStoreView neoStoreIndexStoreView, LabelScanStore labelScanStore,\n+                                 RelationshipTypeScanStore relationshipTypeScanStore, LockService locks,\n+                                 Supplier<StorageReader> storageEngine, LogProvider logProvider, Config config)\n     {\n         this.neoStoreIndexStoreView = neoStoreIndexStoreView;\n         this.labelScanStore = labelScanStore;\n         this.relationshipTypeScanStore = relationshipTypeScanStore;\n         this.locks = locks;\n         this.storageEngine = storageEngine;\n-        this.log = logProvider.getLog( getClass() );\n+        this.log = logProvider.getLog(getClass());\n         this.config = config;\n     }\n \n     @Override\n-    public <FAILURE extends Exception> StoreScan<FAILURE> visitNodes( int[] labelIds,\n-            IntPredicate propertyKeyIdFilter, Visitor<EntityUpdates,FAILURE> propertyUpdatesVisitor,\n-            Visitor<EntityTokenUpdate,FAILURE> labelUpdateVisitor,\n-            boolean forceStoreScan, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public <FAILURE extends Exception> StoreScan<FAILURE> visitNodes(int[] labelIds,\n+                                                                     IntPredicate propertyKeyIdFilter, Visitor<EntityUpdates, FAILURE> propertyUpdatesVisitor,\n+                                                                     Visitor<EntityTokenUpdate, FAILURE> labelUpdateVisitor,\n+                                                                     boolean forceStoreScan, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        if ( forceStoreScan || useAllNodeStoreScan( labelIds, cursorTracer ) )\n+        if (forceStoreScan || useAllNodeStoreScan(labelIds, cursorTracer))\n         {\n-            return neoStoreIndexStoreView.visitNodes( labelIds, propertyKeyIdFilter, propertyUpdatesVisitor, labelUpdateVisitor,\n-                    forceStoreScan, cursorTracer, memoryTracker );\n+            return neoStoreIndexStoreView.visitNodes(labelIds, propertyKeyIdFilter, propertyUpdatesVisitor, labelUpdateVisitor,\n+              forceStoreScan, cursorTracer, memoryTracker);\n         }\n-        return new LabelViewNodeStoreScan<>( storageEngine.get(), locks, labelScanStore, labelUpdateVisitor,\n-                propertyUpdatesVisitor, labelIds, propertyKeyIdFilter, cursorTracer, memoryTracker );\n+        return new LabelViewNodeStoreScan<>(storageEngine.get(), locks, labelScanStore, labelUpdateVisitor,\n+          propertyUpdatesVisitor, labelIds, propertyKeyIdFilter, cursorTracer, memoryTracker);\n     }\n \n     @Override\n-    public <FAILURE extends Exception> StoreScan<FAILURE> visitRelationships( int[] relationshipTypeIds, IntPredicate propertyKeyIdFilter,\n-            Visitor<EntityUpdates,FAILURE> propertyUpdateVisitor,\n-            Visitor<EntityTokenUpdate,FAILURE> relationshipTypeUpdateVisitor,\n-            boolean forceStoreScan, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public <FAILURE extends Exception> StoreScan<FAILURE> visitRelationships(int[] relationshipTypeIds, IntPredicate propertyKeyIdFilter,\n+                                                                             Visitor<EntityUpdates, FAILURE> propertyUpdateVisitor,\n+                                                                             Visitor<EntityTokenUpdate, FAILURE> relationshipTypeUpdateVisitor,\n+                                                                             boolean forceStoreScan, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        if ( forceStoreScan || useAllRelationshipStoreScan( relationshipTypeIds, cursorTracer ) )\n+        if (forceStoreScan || useAllRelationshipStoreScan(relationshipTypeIds, cursorTracer))\n         {\n-            return neoStoreIndexStoreView.visitRelationships( relationshipTypeIds, propertyKeyIdFilter, propertyUpdateVisitor, relationshipTypeUpdateVisitor,\n-                    forceStoreScan, cursorTracer, memoryTracker );\n+            return neoStoreIndexStoreView.visitRelationships(relationshipTypeIds, propertyKeyIdFilter, propertyUpdateVisitor, relationshipTypeUpdateVisitor,\n+              forceStoreScan, cursorTracer, memoryTracker);\n         }\n-        return new RelationshipTypeViewRelationshipStoreScan<>( storageEngine.get(), locks, relationshipTypeScanStore, relationshipTypeUpdateVisitor,\n-                propertyUpdateVisitor, relationshipTypeIds, propertyKeyIdFilter, cursorTracer, memoryTracker );\n+        return new RelationshipTypeViewRelationshipStoreScan<>(storageEngine.get(), locks, relationshipTypeScanStore, relationshipTypeUpdateVisitor,\n+          propertyUpdateVisitor, relationshipTypeIds, propertyKeyIdFilter, cursorTracer, memoryTracker);\n     }\n \n     @Override\n@@ -105,46 +106,44 @@ public class DynamicIndexStoreView implements IndexStoreView\n         return neoStoreIndexStoreView.isEmpty();\n     }\n \n-    private boolean useAllNodeStoreScan( int[] labelIds, PageCursorTracer cursorTracer )\n+    private boolean useAllNodeStoreScan(int[] labelIds, PageCursorTracer cursorTracer)\n     {\n         try\n         {\n-            return ArrayUtils.isEmpty( labelIds ) || isEmptyLabelScanStore( cursorTracer );\n-        }\n-        catch ( Exception e )\n+            return ArrayUtils.isEmpty(labelIds) || isEmptyLabelScanStore(cursorTracer);\n+        } catch (Exception e)\n         {\n-            log.error( \"Cannot determine number of labeled nodes, falling back to all nodes scan.\", e );\n+            log.error(\"Cannot determine number of labeled nodes, falling back to all nodes scan.\", e);\n             return true;\n         }\n     }\n \n-    private boolean useAllRelationshipStoreScan( int[] relationshipTypeIds, PageCursorTracer cursorTracer )\n+    private boolean useAllRelationshipStoreScan(int[] relationshipTypeIds, PageCursorTracer cursorTracer)\n     {\n         try\n         {\n-            return !config.get( RelationshipTypeScanStoreSettings.enable_relationship_type_scan_store ) || ArrayUtils.isEmpty( relationshipTypeIds ) ||\n-                    isEmptyRelationshipTypeStoreScan( cursorTracer );\n-        }\n-        catch ( Exception e )\n+            return !config.get(RelationshipTypeScanStoreSettings.enable_relationship_type_scan_store) || ArrayUtils.isEmpty(relationshipTypeIds) ||\n+              isEmptyRelationshipTypeStoreScan(cursorTracer);\n+        } catch (Exception e)\n         {\n-            log.error( \"Cannot determine number of relationships in scan store, falling back to all relationships scan.\", e );\n+            log.error(\"Cannot determine number of relationships in scan store, falling back to all relationships scan.\", e);\n             return true;\n         }\n     }\n \n-    private boolean isEmptyLabelScanStore( PageCursorTracer cursorTracer ) throws Exception\n+    private boolean isEmptyLabelScanStore(PageCursorTracer cursorTracer) throws Exception\n     {\n-        return labelScanStore.isEmpty( cursorTracer );\n+        return labelScanStore.isEmpty(cursorTracer);\n     }\n \n-    private boolean isEmptyRelationshipTypeStoreScan( PageCursorTracer cursorTracer ) throws IOException\n+    private boolean isEmptyRelationshipTypeStoreScan(PageCursorTracer cursorTracer) throws IOException\n     {\n-        return relationshipTypeScanStore.isEmpty( cursorTracer );\n+        return relationshipTypeScanStore.isEmpty(cursorTracer);\n     }\n \n     @Override\n-    public NodePropertyAccessor newPropertyAccessor( PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public NodePropertyAccessor newPropertyAccessor(PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        return neoStoreIndexStoreView.newPropertyAccessor( cursorTracer, memoryTracker );\n+        return neoStoreIndexStoreView.newPropertyAccessor(cursorTracer, memoryTracker);\n     }\n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}