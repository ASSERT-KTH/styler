{
    "project_name": "graphfoundation-ongdb",
    "error_id": "461",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "90",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "91",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "155",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "6",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "239",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "323",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "389",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "456",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "469",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/461/HazelcastCoreTopologyService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/461/HazelcastCoreTopologyService.java\nindex 98bc2f7553a..65c75461d0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/461/HazelcastCoreTopologyService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/461/HazelcastCoreTopologyService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.discovery;\n \n import java.util.Collections;\n@@ -69,419 +70,413 @@ import static org.neo4j.causalclustering.discovery.HazelcastClusterTopology.refr\n \n public class HazelcastCoreTopologyService extends AbstractTopologyService implements CoreTopologyService\n {\n-    private static final long HAZELCAST_IS_HEALTHY_TIMEOUT_MS = TimeUnit.MINUTES.toMillis( 10 );\n-    private static final int HAZELCAST_MIN_CLUSTER = 2;\n-\n-    private final Config config;\n-    private final MemberId myself;\n-    private final Log log;\n-    private final Log userLog;\n-    private final CoreTopologyListenerService listenerService;\n-    private final RobustJobSchedulerWrapper scheduler;\n-    private final long refreshPeriod;\n-    private final HostnameResolver hostnameResolver;\n-    private final TopologyServiceRetryStrategy topologyServiceRetryStrategy;\n-    private final String localDBName;\n-\n-    private String membershipRegistrationId;\n-    private JobScheduler.JobHandle refreshJob;\n-\n-    private final AtomicReference<LeaderInfo> leaderInfo = new AtomicReference<>( LeaderInfo.INITIAL );\n-    private final AtomicReference<Optional<LeaderInfo>> stepDownInfo = new AtomicReference<>( Optional.empty() );\n-\n-    private volatile HazelcastInstance hazelcastInstance;\n-    private volatile ReadReplicaTopology readReplicaTopology = ReadReplicaTopology.EMPTY;\n-    private volatile CoreTopology coreTopology = CoreTopology.EMPTY;\n-    private volatile Map<MemberId,AdvertisedSocketAddress> catchupAddressMap = new HashMap<>();\n-    private volatile Map<MemberId,RoleInfo> coreRoles = Collections.emptyMap();\n-\n-    private Thread startingThread;\n-    private volatile boolean stopped;\n-\n-    public HazelcastCoreTopologyService( Config config, MemberId myself, JobScheduler jobScheduler,\n-            LogProvider logProvider, LogProvider userLogProvider, HostnameResolver hostnameResolver,\n-            TopologyServiceRetryStrategy topologyServiceRetryStrategy )\n+  private static final long HAZELCAST_IS_HEALTHY_TIMEOUT_MS = TimeUnit.MINUTES.toMillis(10);\n+  private static final int HAZELCAST_MIN_CLUSTER = 2;\n+\n+  private final Config config;\n+  private final MemberId myself;\n+  private final Log log;\n+  private final Log userLog;\n+  private final CoreTopologyListenerService listenerService;\n+  private final RobustJobSchedulerWrapper scheduler;\n+  private final long refreshPeriod;\n+  private final HostnameResolver hostnameResolver;\n+  private final TopologyServiceRetryStrategy topologyServiceRetryStrategy;\n+  private final String localDBName;\n+\n+  private String membershipRegistrationId;\n+  private JobScheduler.JobHandle refreshJob;\n+\n+  private final AtomicReference<LeaderInfo> leaderInfo = new AtomicReference<>(LeaderInfo.INITIAL);\n+  private final AtomicReference<Optional<LeaderInfo>> stepDownInfo = new AtomicReference<>(Optional.empty());\n+\n+  private volatile HazelcastInstance hazelcastInstance;\n+  private volatile ReadReplicaTopology readReplicaTopology = ReadReplicaTopology.EMPTY;\n+  private volatile CoreTopology coreTopology = CoreTopology.EMPTY;\n+  private volatile Map<MemberId, AdvertisedSocketAddress> catchupAddressMap = new HashMap<>();\n+  private volatile Map<MemberId, RoleInfo> coreRoles = Collections.emptyMap();\n+\n+  private Thread startingThread;\n+  private volatile boolean stopped;\n+\n+  public HazelcastCoreTopologyService(Config config, MemberId myself, JobScheduler jobScheduler,\n+                                      LogProvider logProvider, LogProvider userLogProvider, HostnameResolver hostnameResolver,\n+                                      TopologyServiceRetryStrategy topologyServiceRetryStrategy)\n+  {\n+    this.config = config;\n+    this.myself = myself;\n+    this.listenerService = new CoreTopologyListenerService();\n+    this.log = logProvider.getLog(getClass());\n+    this.scheduler = new RobustJobSchedulerWrapper(jobScheduler, log);\n+    this.userLog = userLogProvider.getLog(getClass());\n+    this.refreshPeriod = config.get(CausalClusteringSettings.cluster_topology_refresh).toMillis();\n+    this.hostnameResolver = hostnameResolver;\n+    this.topologyServiceRetryStrategy = topologyServiceRetryStrategy;\n+    this.localDBName = config.get(CausalClusteringSettings.database);\n+  }\n+\n+  @Override\n+  public void addLocalCoreTopologyListener(Listener listener)\n+  {\n+    listenerService.addCoreTopologyListener(listener);\n+    listener.onCoreTopologyChange(localCoreServers());\n+  }\n+\n+  @Override\n+  public void removeLocalCoreTopologyListener(Listener listener)\n+  {\n+    listenerService.removeCoreTopologyListener(listener);\n+  }\n+\n+  @Override\n+  public boolean setClusterId(ClusterId clusterId, String dbName) throws InterruptedException\n+  {\n+    waitOnHazelcastInstanceCreation();\n+    return HazelcastClusterTopology.casClusterId(hazelcastInstance, clusterId, dbName);\n+  }\n+\n+  @Override\n+  public void setLeader(LeaderInfo newLeaderInfo, String dbName)\n+  {\n+    leaderInfo.updateAndGet(currentLeaderInfo ->\n     {\n-        this.config = config;\n-        this.myself = myself;\n-        this.listenerService = new CoreTopologyListenerService();\n-        this.log = logProvider.getLog( getClass() );\n-        this.scheduler = new RobustJobSchedulerWrapper( jobScheduler, log );\n-        this.userLog = userLogProvider.getLog( getClass() );\n-        this.refreshPeriod = config.get( CausalClusteringSettings.cluster_topology_refresh ).toMillis();\n-        this.hostnameResolver = hostnameResolver;\n-        this.topologyServiceRetryStrategy = topologyServiceRetryStrategy;\n-        this.localDBName = config.get( CausalClusteringSettings.database );\n-    }\n-\n-    @Override\n-    public void addLocalCoreTopologyListener( Listener listener )\n+      if (currentLeaderInfo.term() < newLeaderInfo.term() && localDBName.equals(dbName))\n+      {\n+        log.info(\"Leader %s updating leader info for database %s and term %s\", myself, localDBName, newLeaderInfo.term());\n+        return newLeaderInfo;\n+      } else\n+      {\n+        return currentLeaderInfo;\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public void handleStepDown(long term, String dbName)\n+  {\n+    LeaderInfo localLeaderInfo = leaderInfo.get();\n+\n+    boolean wasLeaderForDbAndTerm =\n+        Objects.equals(myself, localLeaderInfo.memberId()) &&\n+            localDBName.equals(dbName) &&\n+            term == localLeaderInfo.term();\n+\n+    if (wasLeaderForDbAndTerm)\n     {\n-        listenerService.addCoreTopologyListener( listener );\n-        listener.onCoreTopologyChange( localCoreServers() );\n+      log.info(\"Step down event detected. This topology member, with MemberId %s, was leader in term %s, now moving \" +\n+          \"to follower.\", myself, localLeaderInfo.term());\n+      stepDownInfo.set(Optional.of(localLeaderInfo.stepDown()));\n     }\n-\n-    @Override\n-    public void removeLocalCoreTopologyListener( Listener listener )\n+  }\n+\n+  @Override\n+  public Map<MemberId, RoleInfo> allCoreRoles()\n+  {\n+    return coreRoles;\n+  }\n+\n+  @Override\n+  public String localDBName()\n+  {\n+    return localDBName;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    /*\n+     * We will start hazelcast in its own thread. Hazelcast blocks until the minimum cluster size is available\n+     * and during that block it ignores interrupts. This blocks the whole startup process and since it is the\n+     * main thread that controls lifecycle and the main thread is not daemon, it will block ignoring signals\n+     * and any shutdown attempts. The solution is to start hazelcast instance creation in its own thread which\n+     * we set as daemon. All subsequent uses of hazelcastInstance in this class will still block on it being\n+     * available (see waitOnHazelcastInstanceCreation() ) but they do so while checking for interrupt and\n+     * exiting if one happens. This provides us with a way to exit before hazelcastInstance creation completes.\n+     */\n+    startingThread = new Thread(() ->\n     {\n-        listenerService.removeCoreTopologyListener( listener );\n-    }\n-\n-    @Override\n-    public boolean setClusterId( ClusterId clusterId, String dbName ) throws InterruptedException\n+      log.info(\"Cluster discovery service starting\");\n+      hazelcastInstance = createHazelcastInstance();\n+      // We may be interrupted by the stop method after hazelcast returns. This is courtesy and not really\n+      // necessary\n+      if (Thread.currentThread().isInterrupted())\n+      {\n+        return;\n+      }\n+      membershipRegistrationId =\n+          hazelcastInstance.getCluster().addMembershipListener(new OurMembershipListener());\n+      refreshJob = scheduler.scheduleRecurring(\"TopologyRefresh\", refreshPeriod,\n+          HazelcastCoreTopologyService.this::refreshTopology);\n+      log.info(\"Cluster discovery service started\");\n+    });\n+    startingThread.setDaemon(true);\n+    startingThread.setName(\"HZ Starting Thread\");\n+    startingThread.start();\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    log.info(String.format(\"HazelcastCoreTopologyService stopping and unbinding from %s\",\n+        config.get(discovery_listen_address)));\n+\n+    // Interrupt the starting thread. Not really necessary, just cleaner exit\n+    startingThread.interrupt();\n+    // Flag to notify waiters\n+    stopped = true;\n+\n+    if (refreshJob != null)\n     {\n-        waitOnHazelcastInstanceCreation();\n-        return HazelcastClusterTopology.casClusterId( hazelcastInstance, clusterId, dbName );\n+      refreshJob.cancel(true);\n     }\n \n-    @Override\n-    public void setLeader( LeaderInfo newLeaderInfo, String dbName )\n+    if (hazelcastInstance != null && membershipRegistrationId != null)\n     {\n-        leaderInfo.updateAndGet( currentLeaderInfo ->\n-        {\n-            if ( currentLeaderInfo.term() < newLeaderInfo.term() && localDBName.equals( dbName ) )\n-            {\n-                log.info( \"Leader %s updating leader info for database %s and term %s\", myself, localDBName, newLeaderInfo.term() );\n-                return newLeaderInfo;\n-            }\n-            else\n-            {\n-                return currentLeaderInfo;\n-            }\n-        } );\n+      try\n+      {\n+        hazelcastInstance.getCluster().removeMembershipListener(membershipRegistrationId);\n+        hazelcastInstance.getLifecycleService().terminate();\n+      } catch (Throwable e)\n+      {\n+        log.warn(\"Failed to stop Hazelcast\", e);\n+      }\n     }\n+  }\n \n-    @Override\n-    public void handleStepDown( long term, String dbName )\n-    {\n-        LeaderInfo localLeaderInfo = leaderInfo.get();\n-\n-        boolean wasLeaderForDbAndTerm =\n-                Objects.equals( myself, localLeaderInfo.memberId() ) &&\n-                localDBName.equals( dbName ) &&\n-                term == localLeaderInfo.term();\n-\n-        if ( wasLeaderForDbAndTerm )\n-        {\n-            log.info( \"Step down event detected. This topology member, with MemberId %s, was leader in term %s, now moving \" +\n-                    \"to follower.\", myself, localLeaderInfo.term() );\n-            stepDownInfo.set( Optional.of( localLeaderInfo.stepDown() ) );\n-        }\n-    }\n+  private HazelcastInstance createHazelcastInstance()\n+  {\n+    System.setProperty(WAIT_SECONDS_BEFORE_JOIN.getName(), \"1\");\n \n-    @Override\n-    public Map<MemberId,RoleInfo> allCoreRoles()\n-    {\n-        return coreRoles;\n-    }\n+    JoinConfig joinConfig = new JoinConfig();\n+    joinConfig.getMulticastConfig().setEnabled(false);\n+    TcpIpConfig tcpIpConfig = joinConfig.getTcpIpConfig();\n+    tcpIpConfig.setEnabled(true);\n \n-    @Override\n-    public String localDBName()\n+    List<AdvertisedSocketAddress> initialMembers = config.get(initial_discovery_members);\n+    for (AdvertisedSocketAddress address : initialMembers)\n     {\n-        return localDBName;\n+      for (AdvertisedSocketAddress advertisedSocketAddress : hostnameResolver.resolve(address))\n+      {\n+        tcpIpConfig.addMember(advertisedSocketAddress.toString());\n+      }\n     }\n \n-    @Override\n-    public void start()\n-    {\n-        /*\n-         * We will start hazelcast in its own thread. Hazelcast blocks until the minimum cluster size is available\n-         * and during that block it ignores interrupts. This blocks the whole startup process and since it is the\n-         * main thread that controls lifecycle and the main thread is not daemon, it will block ignoring signals\n-         * and any shutdown attempts. The solution is to start hazelcast instance creation in its own thread which\n-         * we set as daemon. All subsequent uses of hazelcastInstance in this class will still block on it being\n-         * available (see waitOnHazelcastInstanceCreation() ) but they do so while checking for interrupt and\n-         * exiting if one happens. This provides us with a way to exit before hazelcastInstance creation completes.\n-         */\n-        startingThread = new Thread( () ->\n-        {\n-            log.info( \"Cluster discovery service starting\" );\n-            hazelcastInstance = createHazelcastInstance();\n-            // We may be interrupted by the stop method after hazelcast returns. This is courtesy and not really\n-            // necessary\n-            if ( Thread.currentThread().isInterrupted() )\n-            {\n-                return;\n-            }\n-            membershipRegistrationId =\n-                    hazelcastInstance.getCluster().addMembershipListener( new OurMembershipListener() );\n-            refreshJob = scheduler.scheduleRecurring( \"TopologyRefresh\", refreshPeriod,\n-                    HazelcastCoreTopologyService.this::refreshTopology );\n-            log.info( \"Cluster discovery service started\" );\n-        } );\n-        startingThread.setDaemon( true );\n-        startingThread.setName( \"HZ Starting Thread\" );\n-        startingThread.start();\n-    }\n+    ListenSocketAddress hazelcastAddress = config.get(discovery_listen_address);\n+    NetworkConfig networkConfig = new NetworkConfig();\n \n-    @Override\n-    public void stop()\n+    if (!hazelcastAddress.isWildcard())\n     {\n-        log.info( String.format( \"HazelcastCoreTopologyService stopping and unbinding from %s\",\n-                config.get( discovery_listen_address ) ) );\n-\n-        // Interrupt the starting thread. Not really necessary, just cleaner exit\n-        startingThread.interrupt();\n-        // Flag to notify waiters\n-        stopped = true;\n-\n-        if ( refreshJob != null )\n-        {\n-            refreshJob.cancel( true );\n-        }\n-\n-        if ( hazelcastInstance != null && membershipRegistrationId != null )\n-        {\n-            try\n-            {\n-                hazelcastInstance.getCluster().removeMembershipListener( membershipRegistrationId );\n-                hazelcastInstance.getLifecycleService().terminate();\n-            }\n-            catch ( Throwable e )\n-            {\n-                log.warn( \"Failed to stop Hazelcast\", e );\n-            }\n-        }\n+      InterfacesConfig interfaces = new InterfacesConfig();\n+      interfaces.addInterface(hazelcastAddress.getHostname());\n+      interfaces.setEnabled(true);\n+      networkConfig.setInterfaces(interfaces);\n     }\n \n-    private HazelcastInstance createHazelcastInstance()\n-    {\n-        System.setProperty( WAIT_SECONDS_BEFORE_JOIN.getName(), \"1\" );\n-\n-        JoinConfig joinConfig = new JoinConfig();\n-        joinConfig.getMulticastConfig().setEnabled( false );\n-        TcpIpConfig tcpIpConfig = joinConfig.getTcpIpConfig();\n-        tcpIpConfig.setEnabled( true );\n-\n-        List<AdvertisedSocketAddress> initialMembers = config.get( initial_discovery_members );\n-        for ( AdvertisedSocketAddress address : initialMembers )\n-        {\n-            for ( AdvertisedSocketAddress advertisedSocketAddress : hostnameResolver.resolve( address ) )\n-            {\n-                tcpIpConfig.addMember( advertisedSocketAddress.toString() );\n-            }\n-        }\n-\n-        ListenSocketAddress hazelcastAddress = config.get( discovery_listen_address );\n-        NetworkConfig networkConfig = new NetworkConfig();\n-\n-        if ( !hazelcastAddress.isWildcard() )\n-        {\n-            InterfacesConfig interfaces = new InterfacesConfig();\n-            interfaces.addInterface( hazelcastAddress.getHostname() );\n-            interfaces.setEnabled( true );\n-            networkConfig.setInterfaces( interfaces );\n-        }\n-\n-        networkConfig.setPort( hazelcastAddress.getPort() );\n-        networkConfig.setJoin( joinConfig );\n-        networkConfig.setPortAutoIncrement( false );\n-\n-        // We'll use election_timeout as a base value to calculate HZ timeouts. We multiply by 1.5\n-        Long electionTimeoutMillis = config.get( CausalClusteringSettings.leader_election_timeout ).toMillis();\n-        Long baseHazelcastTimeoutMillis = (3 * electionTimeoutMillis) / 2;\n-        /*\n-         * Some HZ settings require the value in seconds. Adding the divider and subtracting 1 is equivalent to the\n-         * ceiling function for integers ( Math.ceil() returns double ). Anything < 0 will return 0, any\n-         * multiple of 1000 returns the result of the division by 1000, any non multiple of 1000 returns the result\n-         * of the division + 1. In other words, values in millis are rounded up.\n-         */\n-        long baseHazelcastTimeoutSeconds = (baseHazelcastTimeoutMillis + 1000 - 1) / 1000;\n-\n-        com.hazelcast.config.Config c = new com.hazelcast.config.Config();\n-        c.setProperty( OPERATION_CALL_TIMEOUT_MILLIS.getName(), String.valueOf( baseHazelcastTimeoutMillis ) );\n-        c.setProperty( MERGE_NEXT_RUN_DELAY_SECONDS.getName(), String.valueOf( baseHazelcastTimeoutSeconds ) );\n-        c.setProperty( MERGE_FIRST_RUN_DELAY_SECONDS.getName(), String.valueOf( baseHazelcastTimeoutSeconds ) );\n-        c.setProperty( INITIAL_MIN_CLUSTER_SIZE.getName(), String.valueOf( HAZELCAST_MIN_CLUSTER ) );\n-\n-        if ( config.get( disable_middleware_logging ) )\n-        {\n-            c.setProperty( LOGGING_TYPE.getName(), \"none\" );\n-        }\n-\n-        if ( hazelcastAddress.isIPv6() )\n-        {\n-            c.setProperty( PREFER_IPv4_STACK.getName(), \"false\" );\n-        }\n-\n-        c.setNetworkConfig( networkConfig );\n-\n-        MemberAttributeConfig memberAttributeConfig =\n-                HazelcastClusterTopology.buildMemberAttributesForCore( myself, config );\n-\n-        c.setMemberAttributeConfig( memberAttributeConfig );\n-        logConnectionInfo( initialMembers );\n-\n-        JobScheduler.JobHandle logJob = scheduler.schedule( \"HazelcastHealth\", HAZELCAST_IS_HEALTHY_TIMEOUT_MS,\n-                () -> log.warn( \"The server has not been able to connect in a timely fashion to the \" +\n-                                \"cluster. Please consult the logs for more details. Rebooting the server may \" +\n-                                \"solve the problem.\" ) );\n-\n-        try\n-        {\n-            hazelcastInstance = Hazelcast.newHazelcastInstance( c );\n-            logJob.cancel( true );\n-        }\n-        catch ( HazelcastException e )\n-        {\n-            String errorMessage = String.format( \"Hazelcast was unable to start with setting: %s = %s\",\n-                    discovery_listen_address.name(), config.get( discovery_listen_address ) );\n-            userLog.error( errorMessage );\n-            log.error( errorMessage, e );\n-            throw new RuntimeException( e );\n-        }\n-\n-        List<String> groups = config.get( CausalClusteringSettings.server_groups );\n-        refreshGroups( hazelcastInstance, myself.getUuid().toString(), groups );\n-\n-        return hazelcastInstance;\n-    }\n+    networkConfig.setPort(hazelcastAddress.getPort());\n+    networkConfig.setJoin(joinConfig);\n+    networkConfig.setPortAutoIncrement(false);\n \n-    private void logConnectionInfo( List<AdvertisedSocketAddress> initialMembers )\n-    {\n-        userLog.info( \"My connection info: \" + \"[\\n\\tDiscovery:   listen=%s, advertised=%s,\" +\n-                      \"\\n\\tTransaction: listen=%s, advertised=%s, \" + \"\\n\\tRaft:        listen=%s, advertised=%s, \" +\n-                      \"\\n\\tClient Connector Addresses: %s\" + \"\\n]\", config.get( discovery_listen_address ),\n-                config.get( CausalClusteringSettings.discovery_advertised_address ),\n-                config.get( CausalClusteringSettings.transaction_listen_address ),\n-                config.get( CausalClusteringSettings.transaction_advertised_address ),\n-                config.get( CausalClusteringSettings.raft_listen_address ),\n-                config.get( CausalClusteringSettings.raft_advertised_address ),\n-                ClientConnectorAddresses.extractFromConfig( config ) );\n-        userLog.info( \"Discovering cluster with initial members: \" + initialMembers );\n-        userLog.info( \"Attempting to connect to the other cluster members before continuing...\" );\n-    }\n+    // We'll use election_timeout as a base value to calculate HZ timeouts. We multiply by 1.5\n+    Long electionTimeoutMillis = config.get(CausalClusteringSettings.leader_election_timeout).toMillis();\n+    Long baseHazelcastTimeoutMillis = (3 * electionTimeoutMillis) / 2;\n+    /*\n+     * Some HZ settings require the value in seconds. Adding the divider and subtracting 1 is equivalent to the\n+     * ceiling function for integers ( Math.ceil() returns double ). Anything < 0 will return 0, any\n+     * multiple of 1000 returns the result of the division by 1000, any non multiple of 1000 returns the result\n+     * of the division + 1. In other words, values in millis are rounded up.\n+     */\n+    long baseHazelcastTimeoutSeconds = (baseHazelcastTimeoutMillis + 1000 - 1) / 1000;\n \n-    @Override\n-    public CoreTopology allCoreServers()\n+    com.hazelcast.config.Config c = new com.hazelcast.config.Config();\n+    c.setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), String.valueOf(baseHazelcastTimeoutMillis));\n+    c.setProperty(MERGE_NEXT_RUN_DELAY_SECONDS.getName(), String.valueOf(baseHazelcastTimeoutSeconds));\n+    c.setProperty(MERGE_FIRST_RUN_DELAY_SECONDS.getName(), String.valueOf(baseHazelcastTimeoutSeconds));\n+    c.setProperty(INITIAL_MIN_CLUSTER_SIZE.getName(), String.valueOf(HAZELCAST_MIN_CLUSTER));\n+\n+    if (config.get(disable_middleware_logging))\n     {\n-        // It is perhaps confusing (Or even error inducing) that this core Topology will always contain the cluster id\n-        // for the database local to the host upon which this method is called.\n-        // TODO: evaluate returning clusterId = null for global Topologies returned by allCoreServers()\n-        return coreTopology;\n+      c.setProperty(LOGGING_TYPE.getName(), \"none\");\n     }\n \n-    @Override\n-    public ReadReplicaTopology allReadReplicas()\n+    if (hazelcastAddress.isIPv6())\n     {\n-        return readReplicaTopology;\n+      c.setProperty(PREFER_IPv4_STACK.getName(), \"false\");\n     }\n \n-    @Override\n-    public Optional<AdvertisedSocketAddress> findCatchupAddress( MemberId memberId )\n+    c.setNetworkConfig(networkConfig);\n+\n+    MemberAttributeConfig memberAttributeConfig =\n+        HazelcastClusterTopology.buildMemberAttributesForCore(myself, config);\n+\n+    c.setMemberAttributeConfig(memberAttributeConfig);\n+    logConnectionInfo(initialMembers);\n+\n+    JobScheduler.JobHandle logJob = scheduler.schedule(\"HazelcastHealth\", HAZELCAST_IS_HEALTHY_TIMEOUT_MS,\n+        () -> log.warn(\"The server has not been able to connect in a timely fashion to the \" +\n+            \"cluster. Please consult the logs for more details. Rebooting the server may \" +\n+            \"solve the problem.\"));\n+\n+    try\n     {\n-        return topologyServiceRetryStrategy.apply( memberId, this::retrieveSocketAddress, Optional::isPresent );\n+      hazelcastInstance = Hazelcast.newHazelcastInstance(c);\n+      logJob.cancel(true);\n+    } catch (HazelcastException e)\n+    {\n+      String errorMessage = String.format(\"Hazelcast was unable to start with setting: %s = %s\",\n+          discovery_listen_address.name(), config.get(discovery_listen_address));\n+      userLog.error(errorMessage);\n+      log.error(errorMessage, e);\n+      throw new RuntimeException(e);\n     }\n \n-    private Optional<AdvertisedSocketAddress> retrieveSocketAddress( MemberId memberId )\n+    List<String> groups = config.get(CausalClusteringSettings.server_groups);\n+    refreshGroups(hazelcastInstance, myself.getUuid().toString(), groups);\n+\n+    return hazelcastInstance;\n+  }\n+\n+  private void logConnectionInfo(List<AdvertisedSocketAddress> initialMembers)\n+  {\n+    userLog.info(\"My connection info: \" + \"[\\n\\tDiscovery:   listen=%s, advertised=%s,\" +\n+            \"\\n\\tTransaction: listen=%s, advertised=%s, \" + \"\\n\\tRaft:        listen=%s, advertised=%s, \" +\n+            \"\\n\\tClient Connector Addresses: %s\" + \"\\n]\", config.get(discovery_listen_address),\n+        config.get(CausalClusteringSettings.discovery_advertised_address),\n+        config.get(CausalClusteringSettings.transaction_listen_address),\n+        config.get(CausalClusteringSettings.transaction_advertised_address),\n+        config.get(CausalClusteringSettings.raft_listen_address),\n+        config.get(CausalClusteringSettings.raft_advertised_address),\n+        ClientConnectorAddresses.extractFromConfig(config));\n+    userLog.info(\"Discovering cluster with initial members: \" + initialMembers);\n+    userLog.info(\"Attempting to connect to the other cluster members before continuing...\");\n+  }\n+\n+  @Override\n+  public CoreTopology allCoreServers()\n+  {\n+    // It is perhaps confusing (Or even error inducing) that this core Topology will always contain the cluster id\n+    // for the database local to the host upon which this method is called.\n+    // TODO: evaluate returning clusterId = null for global Topologies returned by allCoreServers()\n+    return coreTopology;\n+  }\n+\n+  @Override\n+  public ReadReplicaTopology allReadReplicas()\n+  {\n+    return readReplicaTopology;\n+  }\n+\n+  @Override\n+  public Optional<AdvertisedSocketAddress> findCatchupAddress(MemberId memberId)\n+  {\n+    return topologyServiceRetryStrategy.apply(memberId, this::retrieveSocketAddress, Optional::isPresent);\n+  }\n+\n+  private Optional<AdvertisedSocketAddress> retrieveSocketAddress(MemberId memberId)\n+  {\n+    return Optional.ofNullable(catchupAddressMap.get(memberId));\n+  }\n+\n+  private void refreshRoles() throws InterruptedException\n+  {\n+    waitOnHazelcastInstanceCreation();\n+    LeaderInfo localLeaderInfo = leaderInfo.get();\n+    Optional<LeaderInfo> localStepDownInfo = stepDownInfo.get();\n+\n+    if (localStepDownInfo.isPresent())\n+    {\n+      HazelcastClusterTopology.casLeaders(hazelcastInstance, localStepDownInfo.get(), localDBName);\n+      stepDownInfo.compareAndSet(localStepDownInfo, Optional.empty());\n+    } else if (localLeaderInfo.memberId() != null && localLeaderInfo.memberId().equals(myself))\n     {\n-        return Optional.ofNullable( catchupAddressMap.get( memberId ) );\n+      HazelcastClusterTopology.casLeaders(hazelcastInstance, localLeaderInfo, localDBName);\n     }\n \n-    private void refreshRoles() throws InterruptedException\n+    coreRoles = HazelcastClusterTopology.getCoreRoles(hazelcastInstance, allCoreServers().members().keySet());\n+  }\n+\n+  private synchronized void refreshTopology() throws InterruptedException\n+  {\n+    refreshCoreTopology();\n+    refreshReadReplicaTopology();\n+    refreshRoles();\n+    catchupAddressMap = extractCatchupAddressesMap(localCoreServers(), localReadReplicas());\n+  }\n+\n+  private void refreshCoreTopology() throws InterruptedException\n+  {\n+    waitOnHazelcastInstanceCreation();\n+\n+    CoreTopology newCoreTopology = getCoreTopology(hazelcastInstance, config, log);\n+    TopologyDifference difference = coreTopology.difference(newCoreTopology);\n+    coreTopology = newCoreTopology;\n+\n+    if (difference.hasChanges())\n     {\n-        waitOnHazelcastInstanceCreation();\n-        LeaderInfo localLeaderInfo = leaderInfo.get();\n-        Optional<LeaderInfo> localStepDownInfo = stepDownInfo.get();\n-\n-        if ( localStepDownInfo.isPresent() )\n-        {\n-            HazelcastClusterTopology.casLeaders( hazelcastInstance, localStepDownInfo.get(), localDBName );\n-            stepDownInfo.compareAndSet( localStepDownInfo, Optional.empty() );\n-        }\n-        else if ( localLeaderInfo.memberId() != null && localLeaderInfo.memberId().equals( myself ) )\n-        {\n-            HazelcastClusterTopology.casLeaders( hazelcastInstance, localLeaderInfo, localDBName );\n-        }\n-\n-        coreRoles = HazelcastClusterTopology.getCoreRoles( hazelcastInstance, allCoreServers().members().keySet() );\n+      log.info(\"Core topology changed %s\", difference);\n+      listenerService.notifyListeners(coreTopology);\n     }\n+  }\n+\n+  private void refreshReadReplicaTopology() throws InterruptedException\n+  {\n+    waitOnHazelcastInstanceCreation();\n+    ReadReplicaTopology newReadReplicaTopology = getReadReplicaTopology(hazelcastInstance, log);\n \n-    private synchronized void refreshTopology() throws InterruptedException\n+    TopologyDifference difference = readReplicaTopology.difference(newReadReplicaTopology);\n+    if (difference.hasChanges())\n     {\n-        refreshCoreTopology();\n-        refreshReadReplicaTopology();\n-        refreshRoles();\n-        catchupAddressMap = extractCatchupAddressesMap( localCoreServers(), localReadReplicas() );\n+      log.info(\"Read replica topology changed %s\", difference);\n     }\n \n-    private void refreshCoreTopology() throws InterruptedException\n+    this.readReplicaTopology = newReadReplicaTopology;\n+  }\n+\n+  /*\n+   * Waits for hazelcastInstance to be set. It also checks for the stopped flag which is probably not really\n+   * necessary. Nevertheless, since hazelcastInstance is created and set by a separate thread to avoid blocking\n+   * ( see start() ), all accesses to it must be guarded by this method.\n+   */\n+  private void waitOnHazelcastInstanceCreation() throws InterruptedException\n+  {\n+    while (hazelcastInstance == null && !stopped)\n     {\n-        waitOnHazelcastInstanceCreation();\n-\n-        CoreTopology newCoreTopology = getCoreTopology( hazelcastInstance, config, log );\n-        TopologyDifference difference = coreTopology.difference( newCoreTopology );\n-        coreTopology = newCoreTopology;\n-\n-        if ( difference.hasChanges() )\n-        {\n-            log.info( \"Core topology changed %s\", difference );\n-            listenerService.notifyListeners( coreTopology );\n-        }\n+      Thread.sleep(200);\n     }\n+  }\n \n-    private void refreshReadReplicaTopology() throws InterruptedException\n+  private class OurMembershipListener implements MembershipListener\n+  {\n+    @Override\n+    public void memberAdded(MembershipEvent membershipEvent)\n     {\n-        waitOnHazelcastInstanceCreation();\n-        ReadReplicaTopology newReadReplicaTopology = getReadReplicaTopology( hazelcastInstance, log );\n-\n-        TopologyDifference difference = readReplicaTopology.difference( newReadReplicaTopology );\n-        if ( difference.hasChanges() )\n-        {\n-            log.info( \"Read replica topology changed %s\", difference );\n-        }\n-\n-        this.readReplicaTopology = newReadReplicaTopology;\n+      log.info(\"Core member added %s\", membershipEvent);\n+      try\n+      {\n+        refreshTopology();\n+      } catch (InterruptedException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n     }\n \n-    /*\n-     * Waits for hazelcastInstance to be set. It also checks for the stopped flag which is probably not really\n-     * necessary. Nevertheless, since hazelcastInstance is created and set by a separate thread to avoid blocking\n-     * ( see start() ), all accesses to it must be guarded by this method.\n-     */\n-    private void waitOnHazelcastInstanceCreation() throws InterruptedException\n+    @Override\n+    public void memberRemoved(MembershipEvent membershipEvent)\n     {\n-        while ( hazelcastInstance == null && !stopped )\n-        {\n-            Thread.sleep( 200 );\n-        }\n+      log.info(\"Core member removed %s\", membershipEvent);\n+      try\n+      {\n+        refreshTopology();\n+      } catch (InterruptedException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n     }\n \n-    private class OurMembershipListener implements MembershipListener\n+    @Override\n+    public void memberAttributeChanged(MemberAttributeEvent memberAttributeEvent)\n     {\n-        @Override\n-        public void memberAdded( MembershipEvent membershipEvent )\n-        {\n-            log.info( \"Core member added %s\", membershipEvent );\n-            try\n-            {\n-                refreshTopology();\n-            }\n-            catch ( InterruptedException e )\n-            {\n-                throw new RuntimeException( e );\n-            }\n-        }\n-\n-        @Override\n-        public void memberRemoved( MembershipEvent membershipEvent )\n-        {\n-            log.info( \"Core member removed %s\", membershipEvent );\n-            try\n-            {\n-                refreshTopology();\n-            }\n-            catch ( InterruptedException e )\n-            {\n-                throw new RuntimeException( e );\n-            }\n-        }\n-\n-        @Override\n-        public void memberAttributeChanged( MemberAttributeEvent memberAttributeEvent )\n-        {\n-            log.info( \"Core member attribute changed %s\", memberAttributeEvent );\n-        }\n+      log.info(\"Core member attribute changed %s\", memberAttributeEvent);\n     }\n+  }\n \n }\n",
            "diff_size": 593
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "304",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "327",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 663).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/461/HazelcastCoreTopologyService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/461/HazelcastCoreTopologyService.java\nindex 98bc2f7553a..0f3ce023590 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/461/HazelcastCoreTopologyService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/461/HazelcastCoreTopologyService.java\n@@ -71,8 +71,7 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n {\n     private static final long HAZELCAST_IS_HEALTHY_TIMEOUT_MS = TimeUnit.MINUTES.toMillis( 10 );\n     private static final int HAZELCAST_MIN_CLUSTER = 2;\n-\n-    private final Config config;\n+private final Config config;\n     private final MemberId myself;\n     private final Log log;\n     private final Log userLog;\n@@ -156,16 +155,13 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n     {\n         LeaderInfo localLeaderInfo = leaderInfo.get();\n \n-        boolean wasLeaderForDbAndTerm =\n-                Objects.equals( myself, localLeaderInfo.memberId() ) &&\n+        boolean wasLeaderForDbAndTerm = Objects.equals( myself, localLeaderInfo.memberId() ) &&\n                 localDBName.equals( dbName ) &&\n                 term == localLeaderInfo.term();\n-\n-        if ( wasLeaderForDbAndTerm )\n+if ( wasLeaderForDbAndTerm )\n         {\n-            log.info( \"Step down event detected. This topology member, with MemberId %s, was leader in term %s, now moving \" +\n-                    \"to follower.\", myself, localLeaderInfo.term() );\n-            stepDownInfo.set( Optional.of( localLeaderInfo.stepDown() ) );\n+            log.info( \"Step down event detected. This topology member, with MemberId %s, was leader in term %s, now moving \" + \"to follower.\", myself, localLeaderInfo.term() );\n+stepDownInfo.set( Optional.of( localLeaderInfo.stepDown() ) );\n         }\n     }\n \n@@ -203,11 +199,11 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n             {\n                 return;\n             }\n-            membershipRegistrationId =\n-                    hazelcastInstance.getCluster().addMembershipListener( new OurMembershipListener() );\n-            refreshJob = scheduler.scheduleRecurring( \"TopologyRefresh\", refreshPeriod,\n+\n+membershipRegistrationId = hazelcastInstance.getCluster().addMembershipListener( new OurMembershipListener() );\n+refreshJob = scheduler.scheduleRecurring( \"TopologyRefresh\", refreshPeriod,\n                     HazelcastCoreTopologyService.this::refreshTopology );\n-            log.info( \"Cluster discovery service started\" );\n+log.info( \"Cluster discovery service started\" );\n         } );\n         startingThread.setDaemon( true );\n         startingThread.setName( \"HZ Starting Thread\" );\n@@ -219,8 +215,7 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n     {\n         log.info( String.format( \"HazelcastCoreTopologyService stopping and unbinding from %s\",\n                 config.get( discovery_listen_address ) ) );\n-\n-        // Interrupt the starting thread. Not really necessary, just cleaner exit\n+    // Interrupt the starting thread. Not really necessary, just cleaner exit\n         startingThread.interrupt();\n         // Flag to notify waiters\n         stopped = true;\n@@ -247,8 +242,7 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n     private HazelcastInstance createHazelcastInstance()\n     {\n         System.setProperty( WAIT_SECONDS_BEFORE_JOIN.getName(), \"1\" );\n-\n-        JoinConfig joinConfig = new JoinConfig();\n+JoinConfig joinConfig = new JoinConfig();\n         joinConfig.getMulticastConfig().setEnabled( false );\n         TcpIpConfig tcpIpConfig = joinConfig.getTcpIpConfig();\n         tcpIpConfig.setEnabled( true );\n@@ -264,8 +258,7 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n \n         ListenSocketAddress hazelcastAddress = config.get( discovery_listen_address );\n         NetworkConfig networkConfig = new NetworkConfig();\n-\n-        if ( !hazelcastAddress.isWildcard() )\n+if ( !hazelcastAddress.isWildcard() )\n         {\n             InterfacesConfig interfaces = new InterfacesConfig();\n             interfaces.addInterface( hazelcastAddress.getHostname() );\n@@ -279,7 +272,7 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n \n         // We'll use election_timeout as a base value to calculate HZ timeouts. We multiply by 1.5\n         Long electionTimeoutMillis = config.get( CausalClusteringSettings.leader_election_timeout ).toMillis();\n-        Long baseHazelcastTimeoutMillis = (3 * electionTimeoutMillis) / 2;\n+        Long baseHazelcastTimeoutMillis = ( 3 * electionTimeoutMillis) / 2;\n         /*\n          * Some HZ settings require the value in seconds. Adding the divider and subtracting 1 is equivalent to the\n          * ceiling function for integers ( Math.ceil() returns double ). Anything < 0 will return 0, any\n@@ -293,8 +286,7 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n         c.setProperty( MERGE_NEXT_RUN_DELAY_SECONDS.getName(), String.valueOf( baseHazelcastTimeoutSeconds ) );\n         c.setProperty( MERGE_FIRST_RUN_DELAY_SECONDS.getName(), String.valueOf( baseHazelcastTimeoutSeconds ) );\n         c.setProperty( INITIAL_MIN_CLUSTER_SIZE.getName(), String.valueOf( HAZELCAST_MIN_CLUSTER ) );\n-\n-        if ( config.get( disable_middleware_logging ) )\n+if ( config.get( disable_middleware_logging ) )\n         {\n             c.setProperty( LOGGING_TYPE.getName(), \"none\" );\n         }\n@@ -305,19 +297,13 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n         }\n \n         c.setNetworkConfig( networkConfig );\n-\n-        MemberAttributeConfig memberAttributeConfig =\n-                HazelcastClusterTopology.buildMemberAttributesForCore( myself, config );\n-\n-        c.setMemberAttributeConfig( memberAttributeConfig );\n+MemberAttributeConfig memberAttributeConfig = HazelcastClusterTopology.buildMemberAttributesForCore( myself, config );\n+c.setMemberAttributeConfig( memberAttributeConfig );\n         logConnectionInfo( initialMembers );\n+JobScheduler.JobHandle logJob = scheduler.schedule( \"HazelcastHealth\", HAZELCAST_IS_HEALTHY_TIMEOUT_MS,\n+                () -> log.warn( \"The server has not been able to connect in a timely fashion to the \" + \"cluster. Please consult the logs for more details. Rebooting the server may \" + \"solve the problem.\" ) );\n \n-        JobScheduler.JobHandle logJob = scheduler.schedule( \"HazelcastHealth\", HAZELCAST_IS_HEALTHY_TIMEOUT_MS,\n-                () -> log.warn( \"The server has not been able to connect in a timely fashion to the \" +\n-                                \"cluster. Please consult the logs for more details. Rebooting the server may \" +\n-                                \"solve the problem.\" ) );\n-\n-        try\n+try\n         {\n             hazelcastInstance = Hazelcast.newHazelcastInstance( c );\n             logJob.cancel( true );\n@@ -326,29 +312,20 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n         {\n             String errorMessage = String.format( \"Hazelcast was unable to start with setting: %s = %s\",\n                     discovery_listen_address.name(), config.get( discovery_listen_address ) );\n-            userLog.error( errorMessage );\n+userLog.error( errorMessage );\n             log.error( errorMessage, e );\n             throw new RuntimeException( e );\n         }\n \n         List<String> groups = config.get( CausalClusteringSettings.server_groups );\n         refreshGroups( hazelcastInstance, myself.getUuid().toString(), groups );\n-\n-        return hazelcastInstance;\n+return hazelcastInstance;\n     }\n \n     private void logConnectionInfo( List<AdvertisedSocketAddress> initialMembers )\n     {\n-        userLog.info( \"My connection info: \" + \"[\\n\\tDiscovery:   listen=%s, advertised=%s,\" +\n-                      \"\\n\\tTransaction: listen=%s, advertised=%s, \" + \"\\n\\tRaft:        listen=%s, advertised=%s, \" +\n-                      \"\\n\\tClient Connector Addresses: %s\" + \"\\n]\", config.get( discovery_listen_address ),\n-                config.get( CausalClusteringSettings.discovery_advertised_address ),\n-                config.get( CausalClusteringSettings.transaction_listen_address ),\n-                config.get( CausalClusteringSettings.transaction_advertised_address ),\n-                config.get( CausalClusteringSettings.raft_listen_address ),\n-                config.get( CausalClusteringSettings.raft_advertised_address ),\n-                ClientConnectorAddresses.extractFromConfig( config ) );\n-        userLog.info( \"Discovering cluster with initial members: \" + initialMembers );\n+        userLog.info( \"My connection info: \" + \"[\\n\\tDiscovery:   listen=%s, advertised=%s,\" + \"\\n\\tTransaction: listen=%s, advertised=%s, \" + \"\\n\\tRaft:        listen=%s, advertised=%s, \" + \"\\n\\tClient Connector Addresses: %s\" + \"\\n]\", config.get( discovery_listen_address ), config.get( CausalClusteringSettings.discovery_advertised_address ), config.get( CausalClusteringSettings.transaction_listen_address ), config.get( CausalClusteringSettings.transaction_advertised_address ), config.get( CausalClusteringSettings.raft_listen_address ), config.get( CausalClusteringSettings.raft_advertised_address ), ClientConnectorAddresses.extractFromConfig( config ) );\n+userLog.info( \"Discovering cluster with initial members: \" + initialMembers );\n         userLog.info( \"Attempting to connect to the other cluster members before continuing...\" );\n     }\n \n@@ -383,8 +360,7 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n         waitOnHazelcastInstanceCreation();\n         LeaderInfo localLeaderInfo = leaderInfo.get();\n         Optional<LeaderInfo> localStepDownInfo = stepDownInfo.get();\n-\n-        if ( localStepDownInfo.isPresent() )\n+if ( localStepDownInfo.isPresent() )\n         {\n             HazelcastClusterTopology.casLeaders( hazelcastInstance, localStepDownInfo.get(), localDBName );\n             stepDownInfo.compareAndSet( localStepDownInfo, Optional.empty() );\n@@ -408,8 +384,7 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n     private void refreshCoreTopology() throws InterruptedException\n     {\n         waitOnHazelcastInstanceCreation();\n-\n-        CoreTopology newCoreTopology = getCoreTopology( hazelcastInstance, config, log );\n+CoreTopology newCoreTopology = getCoreTopology( hazelcastInstance, config, log );\n         TopologyDifference difference = coreTopology.difference( newCoreTopology );\n         coreTopology = newCoreTopology;\n \n@@ -424,8 +399,7 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n     {\n         waitOnHazelcastInstanceCreation();\n         ReadReplicaTopology newReadReplicaTopology = getReadReplicaTopology( hazelcastInstance, log );\n-\n-        TopologyDifference difference = readReplicaTopology.difference( newReadReplicaTopology );\n+TopologyDifference difference = readReplicaTopology.difference( newReadReplicaTopology );\n         if ( difference.hasChanges() )\n         {\n             log.info( \"Read replica topology changed %s\", difference );\n@@ -483,5 +457,4 @@ public class HazelcastCoreTopologyService extends AbstractTopologyService implem\n             log.info( \"Core member attribute changed %s\", memberAttributeEvent );\n         }\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}