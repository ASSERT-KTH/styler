{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "940",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n\nimport com.services.nhinc.schema.auditmessage.AuditMessageType;\nimport com.services.nhinc.schema.auditmessage.ParticipantObjectIdentificationType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/940/PatientDiscoveryDeferredRequestAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/940/PatientDiscoveryDeferredRequestAuditTransforms.java\nindex c65981d4388..d8be960b54e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/940/PatientDiscoveryDeferredRequestAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/940/PatientDiscoveryDeferredRequestAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/940/PatientDiscoveryDeferredRequestAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/940/PatientDiscoveryDeferredRequestAuditTransforms.java\nindex c65981d4388..0531cd645ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/940/PatientDiscoveryDeferredRequestAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/940/PatientDiscoveryDeferredRequestAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n@@ -37,59 +38,62 @@ import org.hl7.v3.MCCIIN000002UV01;\n import org.hl7.v3.PRPAIN201305UV02;\n \n /**\n- *\n  * @author tjafri\n  */\n public class PatientDiscoveryDeferredRequestAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<\n     PRPAIN201305UV02, MCCIIN000002UV01> {\n \n-    private static final Logger LOG = Logger.getLogger(PatientDiscoveryDeferredRequestAuditTransforms.class);\n-\n-    @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n-        AssertionType assertion, AuditMessageType auditMsg) {\n-        auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n-        try {\n-            auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n-        } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+  private static final Logger LOG = Logger.getLogger(PatientDiscoveryDeferredRequestAuditTransforms.class);\n \n-        return auditMsg;\n+  @Override\n+  protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n+                                                                          AssertionType assertion,\n+                                                                          AuditMessageType auditMsg) {\n+    auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n+    try {\n+      auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n+    } catch (JAXBException ex) {\n+      LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n+          + ex.getLocalizedMessage(), ex);\n     }\n \n-    @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n-        MCCIIN000002UV01 response, AssertionType assertion, AuditMessageType auditMsg) {\n+    return auditMsg;\n+  }\n \n-        try {\n-            auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(request, auditMsg);\n-        } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+  @Override\n+  protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n+                                                                           MCCIIN000002UV01 response,\n+                                                                           AssertionType assertion,\n+                                                                           AuditMessageType auditMsg) {\n \n-        return auditMsg;\n+    try {\n+      auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(request, auditMsg);\n+    } catch (JAXBException ex) {\n+      LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n+          + ex.getLocalizedMessage(), ex);\n     }\n \n-    private AuditMessageType getQueryParamsParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n-        AuditMessageType auditMsg) throws JAXBException {\n+    return auditMsg;\n+  }\n \n-        ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(\n-            PRPAIN201305UV02Parser.getQueryId(request));\n-        // For PDDeferred request we are populating queryByParameter from request as we don't have queryByParameter\n-        // segment in Ack.\n-        participantObject.setParticipantObjectQuery(getParticipantObjectQueryForAck(request));\n-        auditMsg.getParticipantObjectIdentification().add(participantObject);\n-        return auditMsg;\n-    }\n+  private AuditMessageType getQueryParamsParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n+                                                                                    AuditMessageType auditMsg)\n+      throws JAXBException {\n+\n+    ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(\n+        PRPAIN201305UV02Parser.getQueryId(request));\n+    // For PDDeferred request we are populating queryByParameter from request as we don't have queryByParameter\n+    // segment in Ack.\n+    participantObject.setParticipantObjectQuery(getParticipantObjectQueryForAck(request));\n+    auditMsg.getParticipantObjectIdentification().add(participantObject);\n+    return auditMsg;\n+  }\n \n-    private byte[] getParticipantObjectQueryForAck(PRPAIN201305UV02 request) throws JAXBException {\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        if (request.getControlActProcess() != null && request.getControlActProcess().getQueryByParameter() != null) {\n-            getMarshaller().marshal(request.getControlActProcess().getQueryByParameter(), baos);\n-        }\n-        return baos.toByteArray();\n+  private byte[] getParticipantObjectQueryForAck(PRPAIN201305UV02 request) throws JAXBException {\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    if (request.getControlActProcess() != null && request.getControlActProcess().getQueryByParameter() != null) {\n+      getMarshaller().marshal(request.getControlActProcess().getQueryByParameter(), baos);\n     }\n+    return baos.toByteArray();\n+  }\n }\n",
            "diff_size": 60
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/940/PatientDiscoveryDeferredRequestAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/940/PatientDiscoveryDeferredRequestAuditTransforms.java\nindex c65981d4388..5e03f1520bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/940/PatientDiscoveryDeferredRequestAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/940/PatientDiscoveryDeferredRequestAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n@@ -40,21 +41,19 @@ import org.hl7.v3.PRPAIN201305UV02;\n  *\n  * @author tjafri\n  */\n-public class PatientDiscoveryDeferredRequestAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<\n-    PRPAIN201305UV02, MCCIIN000002UV01> {\n+public class PatientDiscoveryDeferredRequestAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<PRPAIN201305UV02, MCCIIN000002UV01> {\n \n     private static final Logger LOG = Logger.getLogger(PatientDiscoveryDeferredRequestAuditTransforms.class);\n \n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n         AssertionType assertion, AuditMessageType auditMsg) {\n-        auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n+    auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n         try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n+    }\n \n         return auditMsg;\n     }\n@@ -62,34 +61,32 @@ public class PatientDiscoveryDeferredRequestAuditTransforms extends AbstractPati\n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n         MCCIIN000002UV01 response, AssertionType assertion, AuditMessageType auditMsg) {\n-\n-        try {\n+    try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(request, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n+    }\n \n         return auditMsg;\n     }\n \n     private AuditMessageType getQueryParamsParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n         AuditMessageType auditMsg) throws JAXBException {\n-\n-        ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(\n-            PRPAIN201305UV02Parser.getQueryId(request));\n+    ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(PRPAIN201305UV02Parser.getQueryId(request));\n         // For PDDeferred request we are populating queryByParameter from request as we don't have queryByParameter\n         // segment in Ack.\n         participantObject.setParticipantObjectQuery(getParticipantObjectQueryForAck(request));\n         auditMsg.getParticipantObjectIdentification().add(participantObject);\n-        return auditMsg;\n+\n+return auditMsg;\n     }\n \n     private byte[] getParticipantObjectQueryForAck(PRPAIN201305UV02 request) throws JAXBException {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         if (request.getControlActProcess() != null && request.getControlActProcess().getQueryByParameter() != null) {\n             getMarshaller().marshal(request.getControlActProcess().getQueryByParameter(), baos);\n-        }\n+\n+    }\n         return baos.toByteArray();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/940/PatientDiscoveryDeferredRequestAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/940/PatientDiscoveryDeferredRequestAuditTransforms.java\nindex c65981d4388..1dd6f9c8e82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/940/PatientDiscoveryDeferredRequestAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/940/PatientDiscoveryDeferredRequestAuditTransforms.java\n@@ -40,11 +40,14 @@ import org.hl7.v3.PRPAIN201305UV02;\n  *\n  * @author tjafri\n  */\n-public class PatientDiscoveryDeferredRequestAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<\n-    PRPAIN201305UV02, MCCIIN000002UV01> {\n+\n+\n+public class PatientDiscoveryDeferredRequestAuditTransforms extends\n+    AbstractPatientDiscoveryAuditTransforms<PRPAIN201305UV02, MCCIIN000002UV01> {\n \n     private static final Logger LOG = Logger.getLogger(PatientDiscoveryDeferredRequestAuditTransforms.class);\n \n+\n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n         AssertionType assertion, AuditMessageType auditMsg) {\n@@ -52,32 +55,26 @@ public class PatientDiscoveryDeferredRequestAuditTransforms extends AbstractPati\n         try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n         }\n-\n         return auditMsg;\n     }\n \n+\n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n-        MCCIIN000002UV01 response, AssertionType assertion, AuditMessageType auditMsg) {\n-\n+        MCCIIN000002UV01 response,\n+        AssertionType assertion, AuditMessageType auditMsg) {\n         try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(request, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n         }\n-\n         return auditMsg;\n     }\n \n-    private AuditMessageType getQueryParamsParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n-        AuditMessageType auditMsg) throws JAXBException {\n-\n-        ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(\n-            PRPAIN201305UV02Parser.getQueryId(request));\n+    private AuditMessageType getQueryParamsParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request, AuditMessageType auditMsg) throws JAXBException {\n+        ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(PRPAIN201305UV02Parser.getQueryId(request));\n         // For PDDeferred request we are populating queryByParameter from request as we don't have queryByParameter\n         // segment in Ack.\n         participantObject.setParticipantObjectQuery(getParticipantObjectQueryForAck(request));\n@@ -85,11 +82,13 @@ public class PatientDiscoveryDeferredRequestAuditTransforms extends AbstractPati\n         return auditMsg;\n     }\n \n-    private byte[] getParticipantObjectQueryForAck(PRPAIN201305UV02 request) throws JAXBException {\n+    private byte\n+                [ ] getParticipantObjectQueryForAck(PRPAIN201305UV02 request) throws JAXBException {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         if (request.getControlActProcess() != null && request.getControlActProcess().getQueryByParameter() != null) {\n             getMarshaller().marshal(request.getControlActProcess().getQueryByParameter(), baos);\n         }\n         return baos.toByteArray();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/940/PatientDiscoveryDeferredRequestAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/940/PatientDiscoveryDeferredRequestAuditTransforms.java\nindex c65981d4388..d8be960b54e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/940/PatientDiscoveryDeferredRequestAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/940/PatientDiscoveryDeferredRequestAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}