{
    "project_name": "wso2-attic-commons",
    "error_id": "536",
    "information": {
        "errors": [
            {
                "line": "120",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 191).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor, AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n        lengthToKeep = ((IntConstant) parameters[0]).getValue();\n\n        if (this.siddhiContext.isDistributedProcessingEnabled()) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/536/LengthWindowProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/536/LengthWindowProcessor.java\nindex b43323c0926..99c3466aaf4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/536/LengthWindowProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/536/LengthWindowProcessor.java\n@@ -117,8 +117,9 @@ public class LengthWindowProcessor extends WindowProcessor {\n     }\n \n     @Override\n-    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor, AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n-        lengthToKeep = ((IntConstant) parameters[0]).getValue();\n+    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor,\n+    AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n+         lengthToKeep = ((IntConstant) parameters[0]).getValue();\n \n         if (this.siddhiContext.isDistributedProcessingEnabled()) {\n             window = new SiddhiQueueGrid<StreamEvent>(elementId, this.siddhiContext, this.async);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/536/LengthWindowProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/536/LengthWindowProcessor.java\nindex b43323c0926..9333ee89855 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/536/LengthWindowProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/536/LengthWindowProcessor.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.query.processor.window;\n \n import org.wso2.siddhi.core.config.SiddhiContext;\n@@ -35,102 +36,104 @@ import java.util.Iterator;\n \n public class LengthWindowProcessor extends WindowProcessor {\n \n-    private int lengthToKeep;\n-    private ISiddhiQueue<StreamEvent> window;\n-\n-    @Override\n-    protected void processEvent(InEvent event) {\n-        acquireLock();\n-        try {\n-            window.put(new RemoveEvent(event, System.currentTimeMillis()));\n-            if (window.size() > lengthToKeep) {\n-                nextProcessor.process((Event) window.poll());\n-            }\n-            nextProcessor.process(event);\n-        } finally {\n-            releaseLock();\n-        }\n-\n+  private int lengthToKeep;\n+  private ISiddhiQueue<StreamEvent> window;\n+\n+  @Override\n+  protected void processEvent(InEvent event) {\n+    acquireLock();\n+    try {\n+      window.put(new RemoveEvent(event, System.currentTimeMillis()));\n+      if (window.size() > lengthToKeep) {\n+        nextProcessor.process((Event) window.poll());\n+      }\n+      nextProcessor.process(event);\n+    } finally {\n+      releaseLock();\n     }\n \n-    @Override\n-    protected void processEvent(InListEvent listEvent) {\n-        acquireLock();\n-        try {\n-            int toFullQueueSize = (lengthToKeep - window.size());\n-            if (listEvent.getActiveEvents() > toFullQueueSize) {\n-                InEvent[] newEvents = new InEvent[toFullQueueSize];\n-                int index = 0;\n-                for (int i = 0; i < listEvent.getActiveEvents(); i++) {\n-                    InEvent inEvent = (InEvent) listEvent.getEvent(i);\n-                    if (index < toFullQueueSize - 1) {\n-                        newEvents[index] = inEvent;\n-                        window.put(new RemoveEvent(inEvent, Long.MAX_VALUE));\n-                        index++;\n-                    } else if (index == toFullQueueSize - 1) {\n-                        newEvents[index] = inEvent;\n-                        window.put(new RemoveEvent(inEvent, Long.MAX_VALUE));\n-                        index++;\n-                        nextProcessor.process(new InListEvent(newEvents));\n-                    } else {\n-                        RemoveEvent removeEvent = (RemoveEvent) window.poll();\n-                        removeEvent.setExpiryTime(System.currentTimeMillis());\n-                        nextProcessor.process(removeEvent);\n-                        window.put(new RemoveEvent(inEvent, Long.MAX_VALUE));\n-                        nextProcessor.process(inEvent);\n-                    }\n-                }\n-            } else {\n-                for (int i = 0; i < listEvent.getActiveEvents(); i++) {\n-                    window.put(new RemoveEvent(listEvent.getEvent(i), Long.MAX_VALUE));\n-                }\n-                nextProcessor.process(listEvent);\n-            }\n-        } finally {\n-            releaseLock();\n+  }\n+\n+  @Override\n+  protected void processEvent(InListEvent listEvent) {\n+    acquireLock();\n+    try {\n+      int toFullQueueSize = (lengthToKeep - window.size());\n+      if (listEvent.getActiveEvents() > toFullQueueSize) {\n+        InEvent[] newEvents = new InEvent[toFullQueueSize];\n+        int index = 0;\n+        for (int i = 0; i < listEvent.getActiveEvents(); i++) {\n+          InEvent inEvent = (InEvent) listEvent.getEvent(i);\n+          if (index < toFullQueueSize - 1) {\n+            newEvents[index] = inEvent;\n+            window.put(new RemoveEvent(inEvent, Long.MAX_VALUE));\n+            index++;\n+          } else if (index == toFullQueueSize - 1) {\n+            newEvents[index] = inEvent;\n+            window.put(new RemoveEvent(inEvent, Long.MAX_VALUE));\n+            index++;\n+            nextProcessor.process(new InListEvent(newEvents));\n+          } else {\n+            RemoveEvent removeEvent = (RemoveEvent) window.poll();\n+            removeEvent.setExpiryTime(System.currentTimeMillis());\n+            nextProcessor.process(removeEvent);\n+            window.put(new RemoveEvent(inEvent, Long.MAX_VALUE));\n+            nextProcessor.process(inEvent);\n+          }\n         }\n-\n+      } else {\n+        for (int i = 0; i < listEvent.getActiveEvents(); i++) {\n+          window.put(new RemoveEvent(listEvent.getEvent(i), Long.MAX_VALUE));\n+        }\n+        nextProcessor.process(listEvent);\n+      }\n+    } finally {\n+      releaseLock();\n     }\n \n-    @Override\n-    public Iterator<StreamEvent> iterator() {\n-        return window.iterator();\n-    }\n+  }\n \n-    @Override\n-    public Iterator<StreamEvent> iterator(String predicate) {\n-        if (siddhiContext.isDistributedProcessingEnabled()) {\n-            return ((SiddhiQueueGrid<StreamEvent>) window).iterator(predicate);\n-        } else {\n-            return window.iterator();\n-        }\n-    }\n+  @Override\n+  public Iterator<StreamEvent> iterator() {\n+    return window.iterator();\n+  }\n \n-    @Override\n-    protected Object[] currentState() {\n-        return window.currentState();\n+  @Override\n+  public Iterator<StreamEvent> iterator(String predicate) {\n+    if (siddhiContext.isDistributedProcessingEnabled()) {\n+      return ((SiddhiQueueGrid<StreamEvent>) window).iterator(predicate);\n+    } else {\n+      return window.iterator();\n     }\n-\n-    @Override\n-    protected void restoreState(Object[] data) {\n-        window.restoreState(data);\n+  }\n+\n+  @Override\n+  protected Object[] currentState() {\n+    return window.currentState();\n+  }\n+\n+  @Override\n+  protected void restoreState(Object[] data) {\n+    window.restoreState(data);\n+  }\n+\n+  @Override\n+  protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor,\n+                      AbstractDefinition streamDefinition, String elementId, boolean async,\n+                      SiddhiContext siddhiContext) {\n+    lengthToKeep = ((IntConstant) parameters[0]).getValue();\n+\n+    if (this.siddhiContext.isDistributedProcessingEnabled()) {\n+      window = new SiddhiQueueGrid<StreamEvent>(elementId, this.siddhiContext, this.async);\n+    } else {\n+      window = new SiddhiQueue<StreamEvent>();\n     }\n \n-    @Override\n-    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor, AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n-        lengthToKeep = ((IntConstant) parameters[0]).getValue();\n+  }\n \n-        if (this.siddhiContext.isDistributedProcessingEnabled()) {\n-            window = new SiddhiQueueGrid<StreamEvent>(elementId, this.siddhiContext, this.async);\n-        } else {\n-            window = new SiddhiQueue<StreamEvent>();\n-        }\n+  @Override\n+  public void destroy() {\n \n-    }\n-\n-    @Override\n-    public void destroy(){\n-\n-    }\n+  }\n \n }\n",
            "diff_size": 130
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/536/LengthWindowProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/536/LengthWindowProcessor.java\nindex b43323c0926..9d4cdfa1cfd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/536/LengthWindowProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/536/LengthWindowProcessor.java\n@@ -129,8 +129,8 @@ public class LengthWindowProcessor extends WindowProcessor {\n     }\n \n     @Override\n-    public void destroy(){\n+    public void destroy() {\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/536/LengthWindowProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/536/LengthWindowProcessor.java\nindex b43323c0926..99c3466aaf4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/536/LengthWindowProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/536/LengthWindowProcessor.java\n@@ -117,8 +117,9 @@ public class LengthWindowProcessor extends WindowProcessor {\n     }\n \n     @Override\n-    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor, AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n-        lengthToKeep = ((IntConstant) parameters[0]).getValue();\n+    protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor,\n+    AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n+         lengthToKeep = ((IntConstant) parameters[0]).getValue();\n \n         if (this.siddhiContext.isDistributedProcessingEnabled()) {\n             window = new SiddhiQueueGrid<StreamEvent>(elementId, this.siddhiContext, this.async);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}