{
    "project_name": "Activiti-Activiti",
    "error_id": "157",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "87",
                "severity": "error",
                "message": "',' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "\n            if ((flowElement instanceof FlowNode) && ((FlowNode) flowElement).isAsynchronous()) {\n                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process , flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n            }\n\n            if ((flowElement instanceof Event)) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/157/AsyncPropertyValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/157/AsyncPropertyValidator.java\nindex 38ff76ae0c9..3096cac6187 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/157/AsyncPropertyValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/157/AsyncPropertyValidator.java\n@@ -29,7 +29,7 @@ public class AsyncPropertyValidator extends ProcessLevelValidator {\n             }\n \n             if ((flowElement instanceof FlowNode) && ((FlowNode) flowElement).isAsynchronous()) {\n-                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process , flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n+                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process, flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n             }\n \n             if ((flowElement instanceof Event)) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/157/AsyncPropertyValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/157/AsyncPropertyValidator.java\nindex 38ff76ae0c9..c8ff3affd88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/157/AsyncPropertyValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/157/AsyncPropertyValidator.java\n@@ -29,14 +29,14 @@ public class AsyncPropertyValidator extends ProcessLevelValidator {\n             }\n \n             if ((flowElement instanceof FlowNode) && ((FlowNode) flowElement).isAsynchronous()) {\n-                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process , flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n+                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process, flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n             }\n \n             if ((flowElement instanceof Event)) {\n                 ((Event) flowElement).getEventDefinitions().stream().forEach(event -> {\n                     if (event instanceof TimerEventDefinition) {\n                         addWarning(errors, Problems.EVENT_TIMER_ASYNC_NOT_AVAILABLE, process, flowElement, \"Timer event is not available when asyncExecutor is disabled.\");\n-                    } else if ((event instanceof SignalEventDefinition) && ((SignalEventDefinition) event).isAsync() ) {\n+                    } else if ((event instanceof SignalEventDefinition) && ((SignalEventDefinition) event).isAsync()) {\n                         addWarning(errors, Problems.SIGNAL_ASYNC_NOT_AVAILABLE, process, flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n                     }\n                 });\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/157/AsyncPropertyValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/157/AsyncPropertyValidator.java\nindex 38ff76ae0c9..c7466474909 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/157/AsyncPropertyValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/157/AsyncPropertyValidator.java\n@@ -1,7 +1,6 @@\n package org.activiti.spring.boot.process.validation;\n \n import java.util.List;\n-\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.bpmn.model.Event;\n import org.activiti.bpmn.model.FlowElement;\n@@ -14,33 +13,32 @@ import org.activiti.validation.ValidationError;\n import org.activiti.validation.validator.Problems;\n import org.activiti.validation.validator.ProcessLevelValidator;\n \n-public class AsyncPropertyValidator extends ProcessLevelValidator {\n \n-    @Override\n-    protected void executeValidation(BpmnModel bpmnModel, Process process, List<ValidationError> errors) {\n-        validateFlowElementsInContainer(process, errors, process);\n-    }\n-\n-    protected void validateFlowElementsInContainer(FlowElementsContainer container, List<ValidationError> errors, Process process) {\n-        for (FlowElement flowElement : container.getFlowElements()) {\n-            if (flowElement instanceof FlowElementsContainer) {\n-                FlowElementsContainer subProcess = (FlowElementsContainer) flowElement;\n-                validateFlowElementsInContainer(subProcess, errors, process);\n-            }\n+public class AsyncPropertyValidator extends ProcessLevelValidator {\n \n-            if ((flowElement instanceof FlowNode) && ((FlowNode) flowElement).isAsynchronous()) {\n-                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process , flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n-            }\n+  @Override\n+  protected void executeValidation(BpmnModel bpmnModel, Process process, List<ValidationError> errors) {\n+    validateFlowElementsInContainer(process, errors, process);\n+  }\n \n-            if ((flowElement instanceof Event)) {\n-                ((Event) flowElement).getEventDefinitions().stream().forEach(event -> {\n-                    if (event instanceof TimerEventDefinition) {\n-                        addWarning(errors, Problems.EVENT_TIMER_ASYNC_NOT_AVAILABLE, process, flowElement, \"Timer event is not available when asyncExecutor is disabled.\");\n-                    } else if ((event instanceof SignalEventDefinition) && ((SignalEventDefinition) event).isAsync() ) {\n-                        addWarning(errors, Problems.SIGNAL_ASYNC_NOT_AVAILABLE, process, flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n-                    }\n-                });\n-            }\n-        }\n+  protected void validateFlowElementsInContainer(FlowElementsContainer container, List<ValidationError> errors, Process process) {\n+    for (FlowElement flowElement : container.getFlowElements()) {\n+      if (flowElement instanceof FlowElementsContainer) {\n+        FlowElementsContainer subProcess = (FlowElementsContainer) flowElement;\n+        validateFlowElementsInContainer(subProcess, errors, process);\n+      }\n+      if ((flowElement instanceof FlowNode) && ((FlowNode) flowElement).isAsynchronous()) {\n+        addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process, flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n+      }\n+      if ((flowElement instanceof Event)) {\n+        ((Event) flowElement).getEventDefinitions().stream().forEach(event -> {\n+          if (event instanceof TimerEventDefinition) {\n+            addWarning(errors, Problems.EVENT_TIMER_ASYNC_NOT_AVAILABLE, process, flowElement, \"Timer event is not available when asyncExecutor is disabled.\");\n+          } else if ((event instanceof SignalEventDefinition) && ((SignalEventDefinition) event).isAsync()) {\n+            addWarning(errors, Problems.SIGNAL_ASYNC_NOT_AVAILABLE, process, flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n+          }\n+                                                            });\n+      }\n     }\n-}\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/157/AsyncPropertyValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/157/AsyncPropertyValidator.java\nindex 38ff76ae0c9..3096cac6187 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/157/AsyncPropertyValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/157/AsyncPropertyValidator.java\n@@ -29,7 +29,7 @@ public class AsyncPropertyValidator extends ProcessLevelValidator {\n             }\n \n             if ((flowElement instanceof FlowNode) && ((FlowNode) flowElement).isAsynchronous()) {\n-                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process , flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n+                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process, flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n             }\n \n             if ((flowElement instanceof Event)) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/157/AsyncPropertyValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/157/AsyncPropertyValidator.java\nindex 38ff76ae0c9..3096cac6187 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/157/AsyncPropertyValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/157/AsyncPropertyValidator.java\n@@ -29,7 +29,7 @@ public class AsyncPropertyValidator extends ProcessLevelValidator {\n             }\n \n             if ((flowElement instanceof FlowNode) && ((FlowNode) flowElement).isAsynchronous()) {\n-                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process , flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n+                addWarning(errors, Problems.FLOW_ELEMENT_ASYNC_NOT_AVAILABLE, process, flowElement, \"Async property is not available when asyncExecutor is disabled.\");\n             }\n \n             if ((flowElement instanceof Event)) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}