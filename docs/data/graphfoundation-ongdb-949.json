{
    "project_name": "graphfoundation-ongdb",
    "error_id": "949",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/949/SchemaRuleSerialization.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/949/SchemaRuleSerialization.java\nindex 3c922ca000f..f1c52304c2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/949/SchemaRuleSerialization.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/949/SchemaRuleSerialization.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.record;\n \n import java.nio.ByteBuffer;\n@@ -43,374 +44,379 @@ import static org.neo4j.string.UTF8.getDecodedStringFrom;\n \n public class SchemaRuleSerialization\n {\n-    // Schema rule type\n-    // Legacy schema store reserves 1,2,3,4 and 5\n-    private static final byte INDEX_RULE = 11;\n-    private static final byte CONSTRAINT_RULE = 12;\n-\n-    // Index type\n-    private static final byte GENERAL_INDEX = 31;\n-    private static final byte UNIQUE_INDEX = 32;\n-\n-    // Constraint type\n-    private static final byte EXISTS_CONSTRAINT = 61;\n-    private static final byte UNIQUE_CONSTRAINT = 62;\n-    private static final byte UNIQUE_EXISTS_CONSTRAINT = 63;\n-\n-    // Schema type\n-    private static final byte SIMPLE_LABEL = 91;\n-    private static final byte SIMPLE_REL_TYPE = 92;\n-\n-    private static final long NO_OWNING_CONSTRAINT_YET = -1;\n-    private static final int LEGACY_LABEL_OR_REL_TYPE_ID = -1;\n-\n-    private SchemaRuleSerialization()\n+  // Schema rule type\n+  // Legacy schema store reserves 1,2,3,4 and 5\n+  private static final byte INDEX_RULE = 11;\n+  private static final byte CONSTRAINT_RULE = 12;\n+\n+  // Index type\n+  private static final byte GENERAL_INDEX = 31;\n+  private static final byte UNIQUE_INDEX = 32;\n+\n+  // Constraint type\n+  private static final byte EXISTS_CONSTRAINT = 61;\n+  private static final byte UNIQUE_CONSTRAINT = 62;\n+  private static final byte UNIQUE_EXISTS_CONSTRAINT = 63;\n+\n+  // Schema type\n+  private static final byte SIMPLE_LABEL = 91;\n+  private static final byte SIMPLE_REL_TYPE = 92;\n+\n+  private static final long NO_OWNING_CONSTRAINT_YET = -1;\n+  private static final int LEGACY_LABEL_OR_REL_TYPE_ID = -1;\n+\n+  private SchemaRuleSerialization()\n+  {\n+  }\n+\n+  // PUBLIC\n+\n+  /**\n+   * Parse a SchemaRule from the provided buffer.\n+   *\n+   * @param id     the id to give the returned Schema Rule\n+   * @param source the buffer to parse from\n+   * @return a SchemaRule\n+   * @throws MalformedSchemaRuleException if bytes in the buffer do encode a valid SchemaRule\n+   */\n+  public static SchemaRule deserialize(long id, ByteBuffer source) throws MalformedSchemaRuleException\n+  {\n+    int legacyLabelOrRelTypeId = source.getInt();\n+    byte schemaRuleType = source.get();\n+\n+    switch (schemaRuleType)\n     {\n-    }\n-\n-    // PUBLIC\n-\n-    /**\n-     * Parse a SchemaRule from the provided buffer.\n-     * @param id the id to give the returned Schema Rule\n-     * @param source the buffer to parse from\n-     * @return a SchemaRule\n-     * @throws MalformedSchemaRuleException if bytes in the buffer do encode a valid SchemaRule\n-     */\n-    public static SchemaRule deserialize( long id, ByteBuffer source ) throws MalformedSchemaRuleException\n-    {\n-        int legacyLabelOrRelTypeId = source.getInt();\n-        byte schemaRuleType = source.get();\n-\n-        switch ( schemaRuleType )\n+      case INDEX_RULE:\n+        return readIndexRule(id, source);\n+      case CONSTRAINT_RULE:\n+        return readConstraintRule(id, source);\n+      default:\n+        if (SchemaRuleDeserializer2_0to3_1.isLegacySchemaRule(schemaRuleType))\n         {\n-        case INDEX_RULE:\n-            return readIndexRule( id, source );\n-        case CONSTRAINT_RULE:\n-            return readConstraintRule( id, source );\n-        default:\n-            if ( SchemaRuleDeserializer2_0to3_1.isLegacySchemaRule( schemaRuleType ) )\n-            {\n-                return SchemaRuleDeserializer2_0to3_1.deserialize( id, legacyLabelOrRelTypeId, schemaRuleType, source );\n-            }\n-            throw new MalformedSchemaRuleException( format( \"Got unknown schema rule type '%d'.\", schemaRuleType ) );\n+          return SchemaRuleDeserializer2_0to3_1.deserialize(id, legacyLabelOrRelTypeId, schemaRuleType, source);\n         }\n+        throw new MalformedSchemaRuleException(format(\"Got unknown schema rule type '%d'.\", schemaRuleType));\n     }\n-\n-    /**\n-     * Serialize the provided IndexRule onto the target buffer\n-     * @param indexRule the IndexRule to serialize\n-     * @throws IllegalStateException if the IndexRule is of type unique, but the owning constrain has not been set\n-     */\n-    public static byte[] serialize( IndexRule indexRule )\n+  }\n+\n+  /**\n+   * Serialize the provided IndexRule onto the target buffer\n+   *\n+   * @param indexRule the IndexRule to serialize\n+   * @throws IllegalStateException if the IndexRule is of type unique, but the owning constrain has not been set\n+   */\n+  public static byte[] serialize(IndexRule indexRule)\n+  {\n+    ByteBuffer target = ByteBuffer.allocate(lengthOf(indexRule));\n+    target.putInt(LEGACY_LABEL_OR_REL_TYPE_ID);\n+    target.put(INDEX_RULE);\n+\n+    IndexProvider.Descriptor providerDescriptor = indexRule.getProviderDescriptor();\n+    UTF8.putEncodedStringInto(providerDescriptor.getKey(), target);\n+    UTF8.putEncodedStringInto(providerDescriptor.getVersion(), target);\n+\n+    SchemaIndexDescriptor schemaIndexDescriptor = indexRule.getIndexDescriptor();\n+    switch (schemaIndexDescriptor.type())\n     {\n-        ByteBuffer target = ByteBuffer.allocate( lengthOf( indexRule ) );\n-        target.putInt( LEGACY_LABEL_OR_REL_TYPE_ID );\n-        target.put( INDEX_RULE );\n-\n-        IndexProvider.Descriptor providerDescriptor = indexRule.getProviderDescriptor();\n-        UTF8.putEncodedStringInto( providerDescriptor.getKey(), target );\n-        UTF8.putEncodedStringInto( providerDescriptor.getVersion(), target );\n+      case GENERAL:\n+        target.put(GENERAL_INDEX);\n+        break;\n \n-        SchemaIndexDescriptor schemaIndexDescriptor = indexRule.getIndexDescriptor();\n-        switch ( schemaIndexDescriptor.type() )\n-        {\n-        case GENERAL:\n-            target.put( GENERAL_INDEX );\n-            break;\n-\n-        case UNIQUE:\n-            target.put( UNIQUE_INDEX );\n+      case UNIQUE:\n+        target.put(UNIQUE_INDEX);\n \n-            // The owning constraint can be null. See IndexRule.getOwningConstraint()\n-            Long owningConstraint = indexRule.getOwningConstraint();\n-            target.putLong( owningConstraint == null ? NO_OWNING_CONSTRAINT_YET : owningConstraint );\n-            break;\n-\n-        default:\n-            throw new UnsupportedOperationException( format( \"Got unknown index descriptor type '%s'.\",\n-                    schemaIndexDescriptor.type() ) );\n-        }\n+        // The owning constraint can be null. See IndexRule.getOwningConstraint()\n+        Long owningConstraint = indexRule.getOwningConstraint();\n+        target.putLong(owningConstraint == null ? NO_OWNING_CONSTRAINT_YET : owningConstraint);\n+        break;\n \n-        schemaIndexDescriptor.schema().processWith( new SchemaDescriptorSerializer( target ) );\n-        UTF8.putEncodedStringInto( indexRule.getName(), target );\n-        return target.array();\n+      default:\n+        throw new UnsupportedOperationException(format(\"Got unknown index descriptor type '%s'.\",\n+            schemaIndexDescriptor.type()));\n     }\n \n-    /**\n-     * Serialize the provided ConstraintRule onto the target buffer\n-     * @param constraintRule the ConstraintRule to serialize\n-     * @throws IllegalStateException if the ConstraintRule is of type unique, but the owned index has not been set\n-     */\n-    public static byte[] serialize( ConstraintRule constraintRule )\n+    schemaIndexDescriptor.schema().processWith(new SchemaDescriptorSerializer(target));\n+    UTF8.putEncodedStringInto(indexRule.getName(), target);\n+    return target.array();\n+  }\n+\n+  /**\n+   * Serialize the provided ConstraintRule onto the target buffer\n+   *\n+   * @param constraintRule the ConstraintRule to serialize\n+   * @throws IllegalStateException if the ConstraintRule is of type unique, but the owned index has not been set\n+   */\n+  public static byte[] serialize(ConstraintRule constraintRule)\n+  {\n+    ByteBuffer target = ByteBuffer.allocate(lengthOf(constraintRule));\n+    target.putInt(LEGACY_LABEL_OR_REL_TYPE_ID);\n+    target.put(CONSTRAINT_RULE);\n+\n+    ConstraintDescriptor constraintDescriptor = constraintRule.getConstraintDescriptor();\n+    switch (constraintDescriptor.type())\n     {\n-        ByteBuffer target = ByteBuffer.allocate( lengthOf( constraintRule ) );\n-        target.putInt( LEGACY_LABEL_OR_REL_TYPE_ID );\n-        target.put( CONSTRAINT_RULE );\n-\n-        ConstraintDescriptor constraintDescriptor = constraintRule.getConstraintDescriptor();\n-        switch ( constraintDescriptor.type() )\n-        {\n-        case EXISTS:\n-            target.put( EXISTS_CONSTRAINT );\n-            break;\n-\n-        case UNIQUE:\n-            target.put( UNIQUE_CONSTRAINT );\n-            target.putLong( constraintRule.getOwnedIndex() );\n-            break;\n-\n-        case UNIQUE_EXISTS:\n-            target.put( UNIQUE_EXISTS_CONSTRAINT );\n-            target.putLong( constraintRule.getOwnedIndex() );\n-            break;\n-\n-        default:\n-            throw new UnsupportedOperationException( format( \"Got unknown index descriptor type '%s'.\",\n-                    constraintDescriptor.type() ) );\n-        }\n-\n-        constraintDescriptor.schema().processWith( new SchemaDescriptorSerializer( target ) );\n-        UTF8.putEncodedStringInto( constraintRule.getName(), target );\n-        return target.array();\n+      case EXISTS:\n+        target.put(EXISTS_CONSTRAINT);\n+        break;\n+\n+      case UNIQUE:\n+        target.put(UNIQUE_CONSTRAINT);\n+        target.putLong(constraintRule.getOwnedIndex());\n+        break;\n+\n+      case UNIQUE_EXISTS:\n+        target.put(UNIQUE_EXISTS_CONSTRAINT);\n+        target.putLong(constraintRule.getOwnedIndex());\n+        break;\n+\n+      default:\n+        throw new UnsupportedOperationException(format(\"Got unknown index descriptor type '%s'.\",\n+            constraintDescriptor.type()));\n     }\n \n-    /**\n-     * Compute the byte size needed to serialize the provided IndexRule using serialize.\n-     * @param indexRule the IndexRule\n-     * @return the byte size of indexRule\n-     */\n-    public static int lengthOf( IndexRule indexRule )\n+    constraintDescriptor.schema().processWith(new SchemaDescriptorSerializer(target));\n+    UTF8.putEncodedStringInto(constraintRule.getName(), target);\n+    return target.array();\n+  }\n+\n+  /**\n+   * Compute the byte size needed to serialize the provided IndexRule using serialize.\n+   *\n+   * @param indexRule the IndexRule\n+   * @return the byte size of indexRule\n+   */\n+  public static int lengthOf(IndexRule indexRule)\n+  {\n+    int length = 4; // legacy label or relType id\n+    length += 1;    // schema rule type\n+\n+    IndexProvider.Descriptor providerDescriptor = indexRule.getProviderDescriptor();\n+    length += UTF8.computeRequiredByteBufferSize(providerDescriptor.getKey());\n+    length += UTF8.computeRequiredByteBufferSize(providerDescriptor.getVersion());\n+\n+    length += 1; // index type\n+    SchemaIndexDescriptor schemaIndexDescriptor = indexRule.getIndexDescriptor();\n+    if (schemaIndexDescriptor.type() == SchemaIndexDescriptor.Type.UNIQUE)\n     {\n-        int length = 4; // legacy label or relType id\n-        length += 1;    // schema rule type\n-\n-        IndexProvider.Descriptor providerDescriptor = indexRule.getProviderDescriptor();\n-        length += UTF8.computeRequiredByteBufferSize( providerDescriptor.getKey() );\n-        length += UTF8.computeRequiredByteBufferSize( providerDescriptor.getVersion() );\n-\n-        length += 1; // index type\n-        SchemaIndexDescriptor schemaIndexDescriptor = indexRule.getIndexDescriptor();\n-        if ( schemaIndexDescriptor.type() == SchemaIndexDescriptor.Type.UNIQUE )\n-        {\n-            length += 8; // owning constraint id\n-        }\n-\n-        length += schemaIndexDescriptor.schema().computeWith( schemaSizeComputer );\n-        length += UTF8.computeRequiredByteBufferSize( indexRule.getName() );\n-        return length;\n+      length += 8; // owning constraint id\n     }\n \n-    /**\n-     * Compute the byte size needed to serialize the provided ConstraintRule using serialize.\n-     * @param constraintRule the ConstraintRule\n-     * @return the byte size of ConstraintRule\n-     */\n-    public static int lengthOf( ConstraintRule constraintRule )\n+    length += schemaIndexDescriptor.schema().computeWith(schemaSizeComputer);\n+    length += UTF8.computeRequiredByteBufferSize(indexRule.getName());\n+    return length;\n+  }\n+\n+  /**\n+   * Compute the byte size needed to serialize the provided ConstraintRule using serialize.\n+   *\n+   * @param constraintRule the ConstraintRule\n+   * @return the byte size of ConstraintRule\n+   */\n+  public static int lengthOf(ConstraintRule constraintRule)\n+  {\n+    int length = 4; // legacy label or relType id\n+    length += 1; // schema rule type\n+\n+    length += 1; // constraint type\n+    ConstraintDescriptor constraintDescriptor = constraintRule.getConstraintDescriptor();\n+    if (constraintDescriptor.enforcesUniqueness())\n     {\n-        int length = 4; // legacy label or relType id\n-        length += 1; // schema rule type\n-\n-        length += 1; // constraint type\n-        ConstraintDescriptor constraintDescriptor = constraintRule.getConstraintDescriptor();\n-        if ( constraintDescriptor.enforcesUniqueness() )\n-        {\n-            length += 8; // owned index id\n-        }\n-\n-        length += constraintDescriptor.schema().computeWith( schemaSizeComputer );\n-        length += UTF8.computeRequiredByteBufferSize( constraintRule.getName() );\n-        return length;\n+      length += 8; // owned index id\n     }\n \n-    // PRIVATE\n+    length += constraintDescriptor.schema().computeWith(schemaSizeComputer);\n+    length += UTF8.computeRequiredByteBufferSize(constraintRule.getName());\n+    return length;\n+  }\n \n-    // READ INDEX\n+  // PRIVATE\n \n-    private static IndexRule readIndexRule( long id, ByteBuffer source ) throws MalformedSchemaRuleException\n+  // READ INDEX\n+\n+  private static IndexRule readIndexRule(long id, ByteBuffer source) throws MalformedSchemaRuleException\n+  {\n+    IndexProvider.Descriptor indexProvider = readIndexProviderDescriptor(source);\n+    LabelSchemaDescriptor schema;\n+    byte indexRuleType = source.get();\n+    String name;\n+    switch (indexRuleType)\n     {\n-        IndexProvider.Descriptor indexProvider = readIndexProviderDescriptor( source );\n-        LabelSchemaDescriptor schema;\n-        byte indexRuleType = source.get();\n-        String name;\n-        switch ( indexRuleType )\n-        {\n-        case GENERAL_INDEX:\n-            schema = readLabelSchema( source );\n-            name = readRuleName( id, IndexRule.class, source );\n-            return IndexRule.indexRule( id, SchemaIndexDescriptorFactory.forSchema( schema ), indexProvider, name );\n-\n-        case UNIQUE_INDEX:\n-            long owningConstraint = source.getLong();\n-            schema = readLabelSchema( source );\n-            SchemaIndexDescriptor descriptor = SchemaIndexDescriptorFactory.uniqueForSchema( schema );\n-            name = readRuleName( id, IndexRule.class, source );\n-            return IndexRule.constraintIndexRule( id, descriptor, indexProvider,\n-                    owningConstraint == NO_OWNING_CONSTRAINT_YET ? null : owningConstraint, name );\n-\n-        default:\n-            throw new MalformedSchemaRuleException( format( \"Got unknown index rule type '%d'.\", indexRuleType ) );\n-        }\n+      case GENERAL_INDEX:\n+        schema = readLabelSchema(source);\n+        name = readRuleName(id, IndexRule.class, source);\n+        return IndexRule.indexRule(id, SchemaIndexDescriptorFactory.forSchema(schema), indexProvider, name);\n+\n+      case UNIQUE_INDEX:\n+        long owningConstraint = source.getLong();\n+        schema = readLabelSchema(source);\n+        SchemaIndexDescriptor descriptor = SchemaIndexDescriptorFactory.uniqueForSchema(schema);\n+        name = readRuleName(id, IndexRule.class, source);\n+        return IndexRule.constraintIndexRule(id, descriptor, indexProvider,\n+            owningConstraint == NO_OWNING_CONSTRAINT_YET ? null : owningConstraint, name);\n+\n+      default:\n+        throw new MalformedSchemaRuleException(format(\"Got unknown index rule type '%d'.\", indexRuleType));\n     }\n+  }\n \n-    private static LabelSchemaDescriptor readLabelSchema( ByteBuffer source ) throws MalformedSchemaRuleException\n+  private static LabelSchemaDescriptor readLabelSchema(ByteBuffer source) throws MalformedSchemaRuleException\n+  {\n+    SchemaDescriptor schemaDescriptor = readSchema(source);\n+    if (!(schemaDescriptor instanceof LabelSchemaDescriptor))\n     {\n-        SchemaDescriptor schemaDescriptor = readSchema( source );\n-        if ( !(schemaDescriptor instanceof LabelSchemaDescriptor) )\n-        {\n-            throw new MalformedSchemaRuleException( \"IndexRules must have LabelSchemaDescriptors, got \" +\n-                    schemaDescriptor.getClass().getSimpleName() );\n-        }\n-        return (LabelSchemaDescriptor)schemaDescriptor;\n+      throw new MalformedSchemaRuleException(\"IndexRules must have LabelSchemaDescriptors, got \" +\n+          schemaDescriptor.getClass().getSimpleName());\n     }\n-\n-    private static IndexProvider.Descriptor readIndexProviderDescriptor( ByteBuffer source )\n+    return (LabelSchemaDescriptor) schemaDescriptor;\n+  }\n+\n+  private static IndexProvider.Descriptor readIndexProviderDescriptor(ByteBuffer source)\n+  {\n+    String providerKey = getDecodedStringFrom(source);\n+    String providerVersion = getDecodedStringFrom(source);\n+    return new IndexProvider.Descriptor(providerKey, providerVersion);\n+  }\n+\n+  // READ CONSTRAINT\n+\n+  private static ConstraintRule readConstraintRule(long id, ByteBuffer source) throws MalformedSchemaRuleException\n+  {\n+    SchemaDescriptor schema;\n+    byte constraintRuleType = source.get();\n+    String name;\n+    switch (constraintRuleType)\n     {\n-        String providerKey = getDecodedStringFrom( source );\n-        String providerVersion = getDecodedStringFrom( source );\n-        return new IndexProvider.Descriptor( providerKey, providerVersion );\n+      case EXISTS_CONSTRAINT:\n+        schema = readSchema(source);\n+        name = readRuleName(id, ConstraintRule.class, source);\n+        return ConstraintRule.constraintRule(id, ConstraintDescriptorFactory.existsForSchema(schema), name);\n+\n+      case UNIQUE_CONSTRAINT:\n+        long ownedUniqueIndex = source.getLong();\n+        schema = readSchema(source);\n+        UniquenessConstraintDescriptor descriptor = ConstraintDescriptorFactory.uniqueForSchema(schema);\n+        name = readRuleName(id, ConstraintRule.class, source);\n+        return ConstraintRule.constraintRule(id, descriptor, ownedUniqueIndex, name);\n+\n+      case UNIQUE_EXISTS_CONSTRAINT:\n+        long ownedNodeKeyIndex = source.getLong();\n+        schema = readSchema(source);\n+        NodeKeyConstraintDescriptor nodeKeyConstraintDescriptor = ConstraintDescriptorFactory.nodeKeyForSchema(schema);\n+        name = readRuleName(id, ConstraintRule.class, source);\n+        return ConstraintRule.constraintRule(id, nodeKeyConstraintDescriptor, ownedNodeKeyIndex, name);\n+\n+      default:\n+        throw new MalformedSchemaRuleException(format(\"Got unknown constraint rule type '%d'.\", constraintRuleType));\n     }\n+  }\n \n-    // READ CONSTRAINT\n-\n-    private static ConstraintRule readConstraintRule( long id, ByteBuffer source ) throws MalformedSchemaRuleException\n+  private static String readRuleName(long id, Class<? extends SchemaRule> type, ByteBuffer source)\n+  {\n+    String ruleName = null;\n+    if (source.remaining() >= UTF8.MINIMUM_SERIALISED_LENGTH_BYTES)\n     {\n-        SchemaDescriptor schema;\n-        byte constraintRuleType = source.get();\n-        String name;\n-        switch ( constraintRuleType )\n-        {\n-        case EXISTS_CONSTRAINT:\n-            schema = readSchema( source );\n-            name = readRuleName( id, ConstraintRule.class, source );\n-            return ConstraintRule.constraintRule( id, ConstraintDescriptorFactory.existsForSchema( schema ), name );\n-\n-        case UNIQUE_CONSTRAINT:\n-            long ownedUniqueIndex = source.getLong();\n-            schema = readSchema( source );\n-            UniquenessConstraintDescriptor descriptor = ConstraintDescriptorFactory.uniqueForSchema( schema );\n-            name = readRuleName( id, ConstraintRule.class, source );\n-            return ConstraintRule.constraintRule( id, descriptor, ownedUniqueIndex, name );\n-\n-        case UNIQUE_EXISTS_CONSTRAINT:\n-            long ownedNodeKeyIndex = source.getLong();\n-            schema = readSchema( source );\n-            NodeKeyConstraintDescriptor nodeKeyConstraintDescriptor = ConstraintDescriptorFactory.nodeKeyForSchema( schema );\n-            name = readRuleName( id, ConstraintRule.class, source );\n-            return ConstraintRule.constraintRule( id, nodeKeyConstraintDescriptor, ownedNodeKeyIndex, name );\n-\n-        default:\n-            throw new MalformedSchemaRuleException( format( \"Got unknown constraint rule type '%d'.\", constraintRuleType ) );\n-        }\n+      ruleName = UTF8.getDecodedStringFrom(source);\n     }\n-\n-    private static String readRuleName( long id, Class<? extends SchemaRule> type, ByteBuffer source )\n+    if (ruleName == null || ruleName.isEmpty())\n     {\n-        String ruleName = null;\n-        if ( source.remaining() >= UTF8.MINIMUM_SERIALISED_LENGTH_BYTES )\n-        {\n-            ruleName = UTF8.getDecodedStringFrom( source );\n-        }\n-        if ( ruleName == null || ruleName.isEmpty() )\n-        {\n-            ruleName = SchemaRule.generateName( id, type );\n-        }\n-        return ruleName;\n+      ruleName = SchemaRule.generateName(id, type);\n     }\n+    return ruleName;\n+  }\n \n-    // READ HELP\n+  // READ HELP\n \n-    private static SchemaDescriptor readSchema( ByteBuffer source ) throws MalformedSchemaRuleException\n+  private static SchemaDescriptor readSchema(ByteBuffer source) throws MalformedSchemaRuleException\n+  {\n+    int[] propertyIds;\n+    byte schemaDescriptorType = source.get();\n+    switch (schemaDescriptorType)\n     {\n-        int[] propertyIds;\n-        byte schemaDescriptorType = source.get();\n-        switch ( schemaDescriptorType )\n-        {\n-        case SIMPLE_LABEL:\n-            int labelId = source.getInt();\n-            propertyIds = readPropertyIds( source );\n-            return SchemaDescriptorFactory.forLabel( labelId, propertyIds );\n-        case SIMPLE_REL_TYPE:\n-            int relTypeId = source.getInt();\n-            propertyIds = readPropertyIds( source );\n-            return SchemaDescriptorFactory.forRelType( relTypeId, propertyIds );\n-        default:\n-            throw new MalformedSchemaRuleException( format( \"Got unknown schema descriptor type '%d'.\",\n-                    schemaDescriptorType ) );\n-        }\n+      case SIMPLE_LABEL:\n+        int labelId = source.getInt();\n+        propertyIds = readPropertyIds(source);\n+        return SchemaDescriptorFactory.forLabel(labelId, propertyIds);\n+      case SIMPLE_REL_TYPE:\n+        int relTypeId = source.getInt();\n+        propertyIds = readPropertyIds(source);\n+        return SchemaDescriptorFactory.forRelType(relTypeId, propertyIds);\n+      default:\n+        throw new MalformedSchemaRuleException(format(\"Got unknown schema descriptor type '%d'.\",\n+            schemaDescriptorType));\n     }\n+  }\n \n-    private static int[] readPropertyIds( ByteBuffer source )\n+  private static int[] readPropertyIds(ByteBuffer source)\n+  {\n+    short numProperties = source.getShort();\n+    int[] propertyIds = new int[numProperties];\n+    for (int i = 0; i < numProperties; i++)\n     {\n-        short numProperties = source.getShort();\n-        int[] propertyIds = new int[numProperties];\n-        for ( int i = 0; i < numProperties; i++ )\n-        {\n-            propertyIds[i] = source.getInt();\n-        }\n-        return propertyIds;\n+      propertyIds[i] = source.getInt();\n     }\n+    return propertyIds;\n+  }\n \n-    // WRITE\n+  // WRITE\n \n-    private static class SchemaDescriptorSerializer implements SchemaProcessor\n-    {\n-        private final ByteBuffer target;\n+  private static class SchemaDescriptorSerializer implements SchemaProcessor\n+  {\n+    private final ByteBuffer target;\n \n-        SchemaDescriptorSerializer( ByteBuffer target )\n-        {\n-            this.target = target;\n-        }\n+    SchemaDescriptorSerializer(ByteBuffer target)\n+    {\n+      this.target = target;\n+    }\n \n-        @Override\n-        public void processSpecific( LabelSchemaDescriptor schema )\n-        {\n-            target.put( SIMPLE_LABEL );\n-            target.putInt( schema.getLabelId() );\n-\n-            int[] propertyIds = schema.getPropertyIds();\n-            target.putShort( (short)propertyIds.length );\n-            for ( int propertyId : propertyIds )\n-            {\n-                target.putInt( propertyId );\n-            }\n-        }\n+    @Override\n+    public void processSpecific(LabelSchemaDescriptor schema)\n+    {\n+      target.put(SIMPLE_LABEL);\n+      target.putInt(schema.getLabelId());\n+\n+      int[] propertyIds = schema.getPropertyIds();\n+      target.putShort((short) propertyIds.length);\n+      for (int propertyId : propertyIds)\n+      {\n+        target.putInt(propertyId);\n+      }\n+    }\n \n-        @Override\n-        public void processSpecific( RelationTypeSchemaDescriptor schema )\n-        {\n-            target.put( SIMPLE_REL_TYPE );\n-            target.putInt( schema.getRelTypeId() );\n-\n-            int[] propertyIds = schema.getPropertyIds();\n-            target.putShort( (short)propertyIds.length );\n-            for ( int propertyId : propertyIds )\n-            {\n-                target.putInt( propertyId );\n-            }\n-        }\n+    @Override\n+    public void processSpecific(RelationTypeSchemaDescriptor schema)\n+    {\n+      target.put(SIMPLE_REL_TYPE);\n+      target.putInt(schema.getRelTypeId());\n+\n+      int[] propertyIds = schema.getPropertyIds();\n+      target.putShort((short) propertyIds.length);\n+      for (int propertyId : propertyIds)\n+      {\n+        target.putInt(propertyId);\n+      }\n     }\n+  }\n \n-    // LENGTH OF\n+  // LENGTH OF\n \n-    private static SchemaComputer<Integer> schemaSizeComputer = new SchemaComputer<Integer>()\n+  private static SchemaComputer<Integer> schemaSizeComputer = new SchemaComputer<Integer>()\n+  {\n+    @Override\n+    public Integer computeSpecific(LabelSchemaDescriptor schema)\n     {\n-        @Override\n-        public Integer computeSpecific( LabelSchemaDescriptor schema )\n-        {\n-            return     1 // schema descriptor type\n-                     + 4 // label id\n-                     + 2 // property id count\n-                     + 4 * schema.getPropertyIds().length; // the actual property ids\n-        }\n+      return 1 // schema descriptor type\n+          + 4 // label id\n+          + 2 // property id count\n+          + 4 * schema.getPropertyIds().length; // the actual property ids\n+    }\n \n-        @Override\n-        public Integer computeSpecific( RelationTypeSchemaDescriptor schema )\n-        {\n-            return    1 // schema descriptor type\n-                    + 4 // rel type id\n-                    + 2 // property id count\n-                    + 4 * schema.getPropertyIds().length; // the actual property ids\n-        }\n-    };\n+    @Override\n+    public Integer computeSpecific(RelationTypeSchemaDescriptor schema)\n+    {\n+      return 1 // schema descriptor type\n+          + 4 // rel type id\n+          + 2 // property id count\n+          + 4 * schema.getPropertyIds().length; // the actual property ids\n+    }\n+  };\n }\n",
            "diff_size": 465
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}