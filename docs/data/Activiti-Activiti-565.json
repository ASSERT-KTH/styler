{
    "project_name": "Activiti-Activiti",
    "error_id": "565",
    "information": {
        "errors": [
            {
                "line": "31",
                "column": "1",
                "severity": "error",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n/**\n * Abstract job entity class.\n *\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/565/AbstractJobEntityImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/565/AbstractJobEntityImpl.java\nindex 24e61dbd848..a3ad5fa1355 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/565/AbstractJobEntityImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/565/AbstractJobEntityImpl.java\n@@ -27,7 +27,6 @@ import org.activiti.engine.ProcessEngineConfiguration;\n import org.activiti.engine.impl.db.BulkDeleteable;\n import org.apache.commons.lang3.StringUtils;\n \n-\n /**\n  * Abstract job entity class.\n  *\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/565/AbstractJobEntityImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/565/AbstractJobEntityImpl.java\nindex 24e61dbd848..560157cd194 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/565/AbstractJobEntityImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/565/AbstractJobEntityImpl.java\n@@ -30,211 +30,209 @@ import org.apache.commons.lang3.StringUtils;\n \n /**\n  * Abstract job entity class.\n- *\n-\n  */\n public abstract class AbstractJobEntityImpl extends AbstractEntity implements AbstractJobEntity, BulkDeleteable, Serializable {\n \n-  private static final long serialVersionUID = 1L;\n-\n-  protected Date duedate;\n+    private static final long serialVersionUID = 1L;\n \n-  protected String executionId;\n-  protected String processInstanceId;\n-  protected String processDefinitionId;\n+    protected Date duedate;\n \n-  protected boolean isExclusive = DEFAULT_EXCLUSIVE;\n+    protected String executionId;\n+    protected String processInstanceId;\n+    protected String processDefinitionId;\n \n-  protected int retries;\n+    protected boolean isExclusive = DEFAULT_EXCLUSIVE;\n \n-  protected int maxIterations;\n-  protected String repeat;\n-  protected Date endDate;\n+    protected int retries;\n \n-  protected String jobHandlerType;\n-  protected String jobHandlerConfiguration;\n+    protected int maxIterations;\n+    protected String repeat;\n+    protected Date endDate;\n \n-  protected ByteArrayRef exceptionByteArrayRef;\n-  protected String exceptionMessage;\n+    protected String jobHandlerType;\n+    protected String jobHandlerConfiguration;\n \n-  protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;\n-  protected String jobType;\n+    protected ByteArrayRef exceptionByteArrayRef;\n+    protected String exceptionMessage;\n \n-  public Object getPersistentState() {\n-    Map<String, Object> persistentState = new HashMap<String, Object>();\n-    persistentState.put(\"retries\", retries);\n-    persistentState.put(\"duedate\", duedate);\n-    persistentState.put(\"exceptionMessage\", exceptionMessage);\n-\n-    if (exceptionByteArrayRef != null) {\n-      persistentState.put(\"exceptionByteArrayId\", exceptionByteArrayRef.getId());\n-    }\n+    protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;\n+    protected String jobType;\n \n-    return persistentState;\n-  }\n+    public Object getPersistentState() {\n+        Map<String, Object> persistentState = new HashMap<String, Object>();\n+        persistentState.put(\"retries\", retries);\n+        persistentState.put(\"duedate\", duedate);\n+        persistentState.put(\"exceptionMessage\", exceptionMessage);\n \n-  // getters and setters ////////////////////////////////////////////////////////\n+        if (exceptionByteArrayRef != null) {\n+            persistentState.put(\"exceptionByteArrayId\", exceptionByteArrayRef.getId());\n+        }\n \n-  public void setExecution(ExecutionEntity execution) {\n-    executionId = execution.getId();\n-    processInstanceId = execution.getProcessInstanceId();\n-    processDefinitionId = execution.getProcessDefinitionId();\n-  }\n-\n-  public Date getDuedate() {\n-    return duedate;\n-  }\n+        return persistentState;\n+    }\n \n-  public void setDuedate(Date duedate) {\n-    this.duedate = duedate;\n-  }\n+    // getters and setters ////////////////////////////////////////////////////////\n \n-  public String getExecutionId() {\n-    return executionId;\n-  }\n+    public void setExecution(ExecutionEntity execution) {\n+        executionId = execution.getId();\n+        processInstanceId = execution.getProcessInstanceId();\n+        processDefinitionId = execution.getProcessDefinitionId();\n+    }\n \n-  public void setExecutionId(String executionId) {\n-    this.executionId = executionId;\n-  }\n+    public Date getDuedate() {\n+        return duedate;\n+    }\n \n-  public int getRetries() {\n-    return retries;\n-  }\n+    public void setDuedate(Date duedate) {\n+        this.duedate = duedate;\n+    }\n \n-  public void setRetries(int retries) {\n-    this.retries = retries;\n-  }\n+    public String getExecutionId() {\n+        return executionId;\n+    }\n \n-  public String getProcessInstanceId() {\n-    return processInstanceId;\n-  }\n+    public void setExecutionId(String executionId) {\n+        this.executionId = executionId;\n+    }\n \n-  public void setProcessInstanceId(String processInstanceId) {\n-    this.processInstanceId = processInstanceId;\n-  }\n+    public int getRetries() {\n+        return retries;\n+    }\n \n-  public boolean isExclusive() {\n-    return isExclusive;\n-  }\n+    public void setRetries(int retries) {\n+        this.retries = retries;\n+    }\n \n-  public void setExclusive(boolean isExclusive) {\n-    this.isExclusive = isExclusive;\n-  }\n+    public String getProcessInstanceId() {\n+        return processInstanceId;\n+    }\n \n-  public String getProcessDefinitionId() {\n-    return processDefinitionId;\n-  }\n+    public void setProcessInstanceId(String processInstanceId) {\n+        this.processInstanceId = processInstanceId;\n+    }\n \n-  public void setProcessDefinitionId(String processDefinitionId) {\n-    this.processDefinitionId = processDefinitionId;\n-  }\n+    public boolean isExclusive() {\n+        return isExclusive;\n+    }\n \n-  public String getRepeat() {\n-    return repeat;\n-  }\n+    public void setExclusive(boolean isExclusive) {\n+        this.isExclusive = isExclusive;\n+    }\n \n-  public void setRepeat(String repeat) {\n-    this.repeat = repeat;\n-  }\n+    public String getProcessDefinitionId() {\n+        return processDefinitionId;\n+    }\n \n-  public Date getEndDate() {\n-    return endDate;\n-  }\n+    public void setProcessDefinitionId(String processDefinitionId) {\n+        this.processDefinitionId = processDefinitionId;\n+    }\n \n-  public void setEndDate(Date endDate) {\n-    this.endDate = endDate;\n-  }\n+    public String getRepeat() {\n+        return repeat;\n+    }\n \n-  public int getMaxIterations() {\n-    return maxIterations;\n-  }\n+    public void setRepeat(String repeat) {\n+        this.repeat = repeat;\n+    }\n \n-  public void setMaxIterations(int maxIterations) {\n-    this.maxIterations = maxIterations;\n-  }\n+    public Date getEndDate() {\n+        return endDate;\n+    }\n \n-  public String getJobHandlerType() {\n-    return jobHandlerType;\n-  }\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate;\n+    }\n \n-  public void setJobHandlerType(String jobHandlerType) {\n-    this.jobHandlerType = jobHandlerType;\n-  }\n+    public int getMaxIterations() {\n+        return maxIterations;\n+    }\n \n-  public String getJobHandlerConfiguration() {\n-    return jobHandlerConfiguration;\n-  }\n+    public void setMaxIterations(int maxIterations) {\n+        this.maxIterations = maxIterations;\n+    }\n \n-  public void setJobHandlerConfiguration(String jobHandlerConfiguration) {\n-    this.jobHandlerConfiguration = jobHandlerConfiguration;\n-  }\n+    public String getJobHandlerType() {\n+        return jobHandlerType;\n+    }\n \n-  public String getJobType() {\n-    return jobType;\n-  }\n+    public void setJobHandlerType(String jobHandlerType) {\n+        this.jobHandlerType = jobHandlerType;\n+    }\n \n-  public void setJobType(String jobType) {\n-    this.jobType = jobType;\n-  }\n+    public String getJobHandlerConfiguration() {\n+        return jobHandlerConfiguration;\n+    }\n \n-  public String getTenantId() {\n-    return tenantId;\n-  }\n+    public void setJobHandlerConfiguration(String jobHandlerConfiguration) {\n+        this.jobHandlerConfiguration = jobHandlerConfiguration;\n+    }\n \n-  public void setTenantId(String tenantId) {\n-    this.tenantId = tenantId;\n-  }\n+    public String getJobType() {\n+        return jobType;\n+    }\n \n-  public String getExceptionStacktrace() {\n-    if (exceptionByteArrayRef == null) {\n-      return null;\n+    public void setJobType(String jobType) {\n+        this.jobType = jobType;\n     }\n \n-    byte[] bytes = exceptionByteArrayRef.getBytes();\n-    if (bytes == null) {\n-      return null;\n+    public String getTenantId() {\n+        return tenantId;\n     }\n \n-    try {\n-      return new String(bytes, \"UTF-8\");\n-    } catch (UnsupportedEncodingException e) {\n-      throw new ActivitiException(\"UTF-8 is not a supported encoding\");\n+    public void setTenantId(String tenantId) {\n+        this.tenantId = tenantId;\n     }\n-  }\n \n-  public void setExceptionStacktrace(String exception) {\n-    if (exceptionByteArrayRef == null) {\n-      exceptionByteArrayRef = new ByteArrayRef();\n+    public String getExceptionStacktrace() {\n+        if (exceptionByteArrayRef == null) {\n+            return null;\n+        }\n+\n+        byte[] bytes = exceptionByteArrayRef.getBytes();\n+        if (bytes == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return new String(bytes, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new ActivitiException(\"UTF-8 is not a supported encoding\");\n+        }\n     }\n-    exceptionByteArrayRef.setValue(\"stacktrace\", getUtf8Bytes(exception));\n-  }\n \n-  public String getExceptionMessage() {\n-    return exceptionMessage;\n-  }\n+    public void setExceptionStacktrace(String exception) {\n+        if (exceptionByteArrayRef == null) {\n+            exceptionByteArrayRef = new ByteArrayRef();\n+        }\n+        exceptionByteArrayRef.setValue(\"stacktrace\", getUtf8Bytes(exception));\n+    }\n \n-  public void setExceptionMessage(String exceptionMessage) {\n-    this.exceptionMessage = StringUtils.abbreviate(exceptionMessage, MAX_EXCEPTION_MESSAGE_LENGTH);\n-  }\n+    public String getExceptionMessage() {\n+        return exceptionMessage;\n+    }\n \n-  public ByteArrayRef getExceptionByteArrayRef() {\n-    return exceptionByteArrayRef;\n-  }\n+    public void setExceptionMessage(String exceptionMessage) {\n+        this.exceptionMessage = StringUtils.abbreviate(exceptionMessage, MAX_EXCEPTION_MESSAGE_LENGTH);\n+    }\n \n-  protected byte[] getUtf8Bytes(String str) {\n-    if (str == null) {\n-      return null;\n+    public ByteArrayRef getExceptionByteArrayRef() {\n+        return exceptionByteArrayRef;\n     }\n-    try {\n-      return str.getBytes(\"UTF-8\");\n-    } catch (UnsupportedEncodingException e) {\n-      throw new ActivitiException(\"UTF-8 is not a supported encoding\");\n+\n+    protected byte[] getUtf8Bytes(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        try {\n+            return str.getBytes(\"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new ActivitiException(\"UTF-8 is not a supported encoding\");\n+        }\n     }\n-  }\n \n-  @Override\n-  public String toString() {\n-    return getClass().getName() + \" [id=\" + id + \"]\";\n-  }\n+    @Override\n+    public String toString() {\n+        return getClass().getName() + \" [id=\" + id + \"]\";\n+    }\n \n }\n",
            "diff_size": 183
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/565/AbstractJobEntityImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/565/AbstractJobEntityImpl.java\nindex 24e61dbd848..27ef317f525 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/565/AbstractJobEntityImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/565/AbstractJobEntityImpl.java\n@@ -21,7 +21,6 @@ import java.io.UnsupportedEncodingException;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.Map;\n-\n import org.activiti.engine.ActivitiException;\n import org.activiti.engine.ProcessEngineConfiguration;\n import org.activiti.engine.impl.db.BulkDeleteable;\n@@ -33,43 +32,37 @@ import org.apache.commons.lang3.StringUtils;\n  *\n \n  */\n-public abstract class AbstractJobEntityImpl extends AbstractEntity implements AbstractJobEntity, BulkDeleteable, Serializable {\n \n-  private static final long serialVersionUID = 1L;\n \n-  protected Date duedate;\n+public abstract class AbstractJobEntityImpl extends AbstractEntity implements AbstractJobEntity,\n+                                                                              BulkDeleteable,\n+                                                                              Serializable {\n \n+  private static final long serialVersionUID = 1L;\n+  protected Date duedate;\n   protected String executionId;\n   protected String processInstanceId;\n   protected String processDefinitionId;\n-\n   protected boolean isExclusive = DEFAULT_EXCLUSIVE;\n-\n   protected int retries;\n-\n   protected int maxIterations;\n   protected String repeat;\n   protected Date endDate;\n-\n   protected String jobHandlerType;\n   protected String jobHandlerConfiguration;\n-\n   protected ByteArrayRef exceptionByteArrayRef;\n   protected String exceptionMessage;\n-\n   protected String tenantId = ProcessEngineConfiguration.NO_TENANT_ID;\n   protected String jobType;\n-\n   public Object getPersistentState() {\n     Map<String, Object> persistentState = new HashMap<String, Object>();\n     persistentState.put(\"retries\", retries);\n     persistentState.put(\"duedate\", duedate);\n     persistentState.put(\"exceptionMessage\", exceptionMessage);\n-\n     if (exceptionByteArrayRef != null) {\n-      persistentState.put(\"exceptionByteArrayId\", exceptionByteArrayRef.getId());\n+      persistentState.put(\"exceptionByteArrayId\",\n+                          exceptionByteArrayRef.getId());\n     }\n-\n     return persistentState;\n   }\n \n@@ -214,7 +207,8 @@ public abstract class AbstractJobEntityImpl extends AbstractEntity implements Ab\n   }\n \n   public void setExceptionMessage(String exceptionMessage) {\n-    this.exceptionMessage = StringUtils.abbreviate(exceptionMessage, MAX_EXCEPTION_MESSAGE_LENGTH);\n+    this.exceptionMessage = StringUtils.abbreviate(exceptionMessage,\n+                                                   MAX_EXCEPTION_MESSAGE_LENGTH);\n   }\n \n   public ByteArrayRef getExceptionByteArrayRef() {\n@@ -225,6 +219,7 @@ public abstract class AbstractJobEntityImpl extends AbstractEntity implements Ab\n     if (str == null) {\n       return null;\n     }\n+\n     try {\n       return str.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n@@ -236,5 +231,4 @@ public abstract class AbstractJobEntityImpl extends AbstractEntity implements Ab\n   public String toString() {\n     return getClass().getName() + \" [id=\" + id + \"]\";\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/565/AbstractJobEntityImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/565/AbstractJobEntityImpl.java\nindex 24e61dbd848..a3ad5fa1355 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/565/AbstractJobEntityImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/565/AbstractJobEntityImpl.java\n@@ -27,7 +27,6 @@ import org.activiti.engine.ProcessEngineConfiguration;\n import org.activiti.engine.impl.db.BulkDeleteable;\n import org.apache.commons.lang3.StringUtils;\n \n-\n /**\n  * Abstract job entity class.\n  *\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/565/AbstractJobEntityImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/565/AbstractJobEntityImpl.java\nindex 24e61dbd848..a3ad5fa1355 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/565/AbstractJobEntityImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/565/AbstractJobEntityImpl.java\n@@ -27,7 +27,6 @@ import org.activiti.engine.ProcessEngineConfiguration;\n import org.activiti.engine.impl.db.BulkDeleteable;\n import org.apache.commons.lang3.StringUtils;\n \n-\n /**\n  * Abstract job entity class.\n  *\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}