{
    "project_name": "neo4j-neo4j",
    "error_id": "3161",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3161/CountsKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3161/CountsKey.java\nindex dd98892651b..0925067dcad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3161/CountsKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3161/CountsKey.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.counts;\n \n import java.util.Objects;\n@@ -32,8 +33,8 @@ import static java.lang.String.format;\n public class CountsKey\n {\n     static final int SIZE = Byte.BYTES +    // type\n-                            Long.BYTES +    // long for main data\n-                            Integer.BYTES;  // int for additional data\n+      Long.BYTES +    // long for main data\n+      Integer.BYTES;  // int for additional data\n \n     /**\n      * Key data layout for this type:\n@@ -63,10 +64,10 @@ public class CountsKey\n     private static final byte TYPE_RELATIONSHIP = 2;\n \n     // Commonly used keys\n-    static final CountsKey MIN_COUNT = new CountsKey( TYPE_NODE, Long.MIN_VALUE, Integer.MIN_VALUE );\n-    static final CountsKey MAX_COUNT = new CountsKey( TYPE_RELATIONSHIP, Long.MAX_VALUE, Integer.MAX_VALUE );\n-    static final CountsKey MIN_STRAY_TX_ID = strayTxId( Long.MIN_VALUE );\n-    static final CountsKey MAX_STRAY_TX_ID = strayTxId( Long.MAX_VALUE );\n+    static final CountsKey MIN_COUNT = new CountsKey(TYPE_NODE, Long.MIN_VALUE, Integer.MIN_VALUE);\n+    static final CountsKey MAX_COUNT = new CountsKey(TYPE_RELATIONSHIP, Long.MAX_VALUE, Integer.MAX_VALUE);\n+    static final CountsKey MIN_STRAY_TX_ID = strayTxId(Long.MIN_VALUE);\n+    static final CountsKey MAX_STRAY_TX_ID = strayTxId(Long.MAX_VALUE);\n \n     /**\n      * Type of key, as defined by \"TYPE_\" constants in this class.\n@@ -88,12 +89,12 @@ public class CountsKey\n     {\n     }\n \n-    CountsKey( byte type, long keyFirst, int keySecond )\n+    CountsKey(byte type, long keyFirst, int keySecond)\n     {\n-        initialize( type, keyFirst, keySecond );\n+        initialize(type, keyFirst, keySecond);\n     }\n \n-    void initialize( byte type, long keyFirst, int keySecond )\n+    void initialize(byte type, long keyFirst, int keySecond)\n     {\n         this.type = type;\n         this.first = keyFirst;\n@@ -102,42 +103,44 @@ public class CountsKey\n \n     /**\n      * Public utility method for instantiating a {@link CountsKey} for a node label id.\n+     *\n      * @param labelId id of the label.\n      * @return a {@link CountsKey for the node label id. The returned key can be put into {@link Map maps} and similar.\n      */\n-    public static CountsKey nodeKey( long labelId )\n+    public static CountsKey nodeKey(long labelId)\n     {\n-        return new CountsKey( TYPE_NODE, labelId, 0 );\n+        return new CountsKey(TYPE_NODE, labelId, 0);\n     }\n \n     /**\n      * Public utility method for instantiating a {@link CountsKey} for a node start/end label and relationship type id.\n+     *\n      * @param startLabelId id of the label of start node.\n-     * @param typeId id of the relationship type.\n-     * @param endLabelId id of the label of end node.\n+     * @param typeId       id of the relationship type.\n+     * @param endLabelId   id of the label of end node.\n      * @return a {@link CountsKey for the node start/end label and relationship type id. The returned key can be put into {@link Map maps} and similar.\n      */\n-    public static CountsKey relationshipKey( long startLabelId, long typeId, long endLabelId )\n+    public static CountsKey relationshipKey(long startLabelId, long typeId, long endLabelId)\n     {\n-        return new CountsKey( TYPE_RELATIONSHIP, (startLabelId << Integer.SIZE) | (typeId & 0xFFFFFFFFL), (int) endLabelId );\n+        return new CountsKey(TYPE_RELATIONSHIP, (startLabelId << Integer.SIZE) | (typeId & 0xFFFFFFFFL), (int) endLabelId);\n     }\n \n-    static CountsKey strayTxId( long txId )\n+    static CountsKey strayTxId(long txId)\n     {\n-        return new CountsKey( TYPE_STRAY_TX_ID, txId, 0 );\n+        return new CountsKey(TYPE_STRAY_TX_ID, txId, 0);\n     }\n \n     // Implements hashCode/equals so that these instances can be keys in a map\n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash( type, first, second );\n+        return Objects.hash(type, first, second);\n     }\n \n     @Override\n-    public boolean equals( Object obj )\n+    public boolean equals(Object obj)\n     {\n-        if ( !(obj instanceof CountsKey) )\n+        if (!(obj instanceof CountsKey))\n         {\n             return false;\n         }\n@@ -145,18 +148,18 @@ public class CountsKey\n         return type == other.type && first == other.first && second == other.second;\n     }\n \n-    void accept( CountsVisitor visitor, long count )\n+    void accept(CountsVisitor visitor, long count)\n     {\n-        switch ( type )\n+        switch (type)\n         {\n-        case TYPE_NODE:\n-            visitor.visitNodeCount( (int) first, count );\n-            break;\n-        case TYPE_RELATIONSHIP:\n-            visitor.visitRelationshipCount( extractStartLabelId(), (int) first, second, count );\n-            break;\n-        default:\n-            throw new IllegalArgumentException( \"Unknown key type \" + type );\n+            case TYPE_NODE:\n+                visitor.visitNodeCount((int) first, count);\n+                break;\n+            case TYPE_RELATIONSHIP:\n+                visitor.visitRelationshipCount(extractStartLabelId(), (int) first, second, count);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown key type \" + type);\n         }\n     }\n \n@@ -168,16 +171,16 @@ public class CountsKey\n     @Override\n     public String toString()\n     {\n-        switch ( type )\n+        switch (type)\n         {\n-        case TYPE_NODE:\n-            return format( \"Node[label:%d]\", first );\n-        case TYPE_RELATIONSHIP:\n-            return format( \"Relationship[startLabel:%d, type:%d, endLabel:%d]\", extractStartLabelId(), (int) first, second );\n-        case TYPE_STRAY_TX_ID:\n-            return format( \"Stray tx id:%d\", first );\n-        default:\n-            return format( \"Unknown key type:%d, first:%d, second:%d\", type, first, second );\n+            case TYPE_NODE:\n+                return format(\"Node[label:%d]\", first);\n+            case TYPE_RELATIONSHIP:\n+                return format(\"Relationship[startLabel:%d, type:%d, endLabel:%d]\", extractStartLabelId(), (int) first, second);\n+            case TYPE_STRAY_TX_ID:\n+                return format(\"Stray tx id:%d\", first);\n+            default:\n+                return format(\"Unknown key type:%d, first:%d, second:%d\", type, first, second);\n         }\n     }\n }\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}