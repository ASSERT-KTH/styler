{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4455",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4455/RecordFieldTypeVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4455/RecordFieldTypeVisitor.java\nindex 3e57e743f7d..c9fa880b487 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4455/RecordFieldTypeVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4455/RecordFieldTypeVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tooling.procedure.visitors;\n \n import java.util.function.Predicate;\n@@ -29,26 +30,26 @@ import javax.lang.model.util.Types;\n import org.neo4j.tooling.procedure.compilerutils.TypeMirrorUtils;\n import org.neo4j.tooling.procedure.validators.AllowedTypesValidator;\n \n-class RecordFieldTypeVisitor extends SimpleTypeVisitor8<Boolean,Void>\n+class RecordFieldTypeVisitor extends SimpleTypeVisitor8<Boolean, Void>\n {\n \n-    private final Predicate<TypeMirror> allowedTypesValidator;\n-\n-    RecordFieldTypeVisitor( Types typeUtils, TypeMirrorUtils typeMirrors )\n-    {\n-        allowedTypesValidator = new AllowedTypesValidator( typeMirrors, typeUtils );\n-    }\n-\n-    @Override\n-    public Boolean visitDeclared( DeclaredType declaredType, Void ignored )\n-    {\n-        return allowedTypesValidator.test( declaredType ) &&\n-                declaredType.getTypeArguments().stream().map( this::visit ).reduce( ( a, b ) -> a && b ).orElse( Boolean.TRUE );\n-    }\n-\n-    @Override\n-    public Boolean visitPrimitive( PrimitiveType primitiveType, Void ignored )\n-    {\n-        return allowedTypesValidator.test( primitiveType );\n-    }\n+  private final Predicate<TypeMirror> allowedTypesValidator;\n+\n+  RecordFieldTypeVisitor(Types typeUtils, TypeMirrorUtils typeMirrors)\n+  {\n+    allowedTypesValidator = new AllowedTypesValidator(typeMirrors, typeUtils);\n+  }\n+\n+  @Override\n+  public Boolean visitDeclared(DeclaredType declaredType, Void ignored)\n+  {\n+    return allowedTypesValidator.test(declaredType) &&\n+        declaredType.getTypeArguments().stream().map(this::visit).reduce((a, b) -> a && b).orElse(Boolean.TRUE);\n+  }\n+\n+  @Override\n+  public Boolean visitPrimitive(PrimitiveType primitiveType, Void ignored)\n+  {\n+    return allowedTypesValidator.test(primitiveType);\n+  }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "column": "59",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4455/RecordFieldTypeVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4455/RecordFieldTypeVisitor.java\nindex 3e57e743f7d..d7afad36fee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4455/RecordFieldTypeVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4455/RecordFieldTypeVisitor.java\n@@ -31,7 +31,6 @@ import org.neo4j.tooling.procedure.validators.AllowedTypesValidator;\n \n class RecordFieldTypeVisitor extends SimpleTypeVisitor8<Boolean,Void>\n {\n-\n     private final Predicate<TypeMirror> allowedTypesValidator;\n \n     RecordFieldTypeVisitor( Types typeUtils, TypeMirrorUtils typeMirrors )\n@@ -42,8 +41,7 @@ class RecordFieldTypeVisitor extends SimpleTypeVisitor8<Boolean,Void>\n     @Override\n     public Boolean visitDeclared( DeclaredType declaredType, Void ignored )\n     {\n-        return allowedTypesValidator.test( declaredType ) &&\n-                declaredType.getTypeArguments().stream().map( this::visit ).reduce( ( a, b ) -> a && b ).orElse( Boolean.TRUE );\n+        return allowedTypesValidator.test( declaredType ) &&declaredType.getTypeArguments().stream().map( this::visit ).reduce( ( a, b ) -> a && b ).orElse( Boolean.TRUE );\n     }\n \n     @Override\n@@ -51,4 +49,4 @@ class RecordFieldTypeVisitor extends SimpleTypeVisitor8<Boolean,Void>\n     {\n         return allowedTypesValidator.test( primitiveType );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}