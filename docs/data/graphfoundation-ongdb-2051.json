{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2051",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "84",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "92",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "104",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "116",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "161",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2051/Start.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2051/Start.java\nindex 798a463cf40..77d16ef2e07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2051/Start.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2051/Start.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.kernel.apps.cypher;\n \n import java.io.PrintWriter;\n@@ -49,163 +50,158 @@ import org.neo4j.shell.ShellException;\n import org.neo4j.shell.kernel.apps.NodeOrRelationship;\n import org.neo4j.shell.kernel.apps.TransactionProvidingApp;\n \n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class Start extends TransactionProvidingApp\n {\n-    private QueryExecutionEngine engine;\n-\n-    @Override\n-    public String getDescription()\n-    {\n-        String className = this.getClass().getSimpleName().toUpperCase();\n-        return MessageFormat.format( \"Executes a Cypher query. Usage: {0} <rest of query>;\\nExample: MATCH \" +\n-                                     \"(me)-[:KNOWS]->(you) RETURN you.name;\\nwhere '{'self'}' will be replaced with \" +\n-                                     \"the current location in the graph.Please, note that the query must end with a \" +\n-                                     \"semicolon. Other parameters are\\ntaken from shell variables, \" +\n-                                     \"see ''help export''.\", className );\n-    }\n-\n-    @Override\n-    public Continuation execute( AppCommandParser parser, Session session, Output out ) throws Exception\n-    {\n-\n-        String query = parser.getLine().trim();\n-\n-        if ( isComplete( query ) )\n-        {\n-            if ( getEngine().isPeriodicCommit( query ) )\n-            {\n-                return exec( parser, session, out );\n-            }\n-            else\n-            {\n-                return super.execute( parser, session, out );\n-            }\n-        }\n-        else\n-        {\n-            return Continuation.INPUT_INCOMPLETE;\n-        }\n-\n-    }\n-\n-    @Override\n-    protected Continuation exec( AppCommandParser parser, Session session, Output out )\n-            throws RemoteException\n-    {\n-        String query = parser.getLine().trim();\n-\n-        if ( isComplete( query ) )\n-        {\n-            final long startTime = System.currentTimeMillis();\n-            try\n-            {\n-                Result result = getResult( trimQuery( query ), session );\n-                handleResult( out, result, startTime );\n-            }\n-            catch ( QueryExecutionKernelException e )\n-            {\n-                handleException( out, e, startTime );\n-                return Continuation.EXCEPTION_CAUGHT;\n-            }\n-            return Continuation.INPUT_COMPLETE;\n-        }\n-        else\n-        {\n-            return Continuation.INPUT_INCOMPLETE;\n-        }\n-    }\n-\n-    private Result getResult( String query, Session session )\n-            throws QueryExecutionKernelException\n-    {\n-        Map<String,Object> parameters = getParameters( session );\n-        TransactionalContext tc = createTransactionContext( query, parameters, session );\n-        return getEngine().executeQuery( query, parameters, tc );\n-    }\n-\n-    private String trimQuery( String query )\n+  private QueryExecutionEngine engine;\n+\n+  @Override\n+  public String getDescription()\n+  {\n+    String className = this.getClass().getSimpleName().toUpperCase();\n+    return MessageFormat.format(\"Executes a Cypher query. Usage: {0} <rest of query>;\\nExample: MATCH \" +\n+        \"(me)-[:KNOWS]->(you) RETURN you.name;\\nwhere '{'self'}' will be replaced with \" +\n+        \"the current location in the graph.Please, note that the query must end with a \" +\n+        \"semicolon. Other parameters are\\ntaken from shell variables, \" +\n+        \"see ''help export''.\", className);\n+  }\n+\n+  @Override\n+  public Continuation execute(AppCommandParser parser, Session session, Output out) throws Exception\n+  {\n+\n+    String query = parser.getLine().trim();\n+\n+    if (isComplete(query))\n     {\n-        return query.substring( 0, query.lastIndexOf( ';' ) );\n-    }\n-\n-    protected void handleResult( Output out, Result result, long startTime )\n-            throws RemoteException\n+      if (getEngine().isPeriodicCommit(query))\n+      {\n+        return exec(parser, session, out);\n+      } else\n+      {\n+        return super.execute(parser, session, out);\n+      }\n+    } else\n     {\n-        printResult( out, result, startTime );\n-        result.close();\n+      return Continuation.INPUT_INCOMPLETE;\n     }\n \n-    private void printResult( Output out, Result result, long startTime ) throws RemoteException\n-    {\n-        result.writeAsStringTo( new PrintWriter( new OutputAsWriter( out ) ) );\n-        out.println( (now() - startTime) + \" ms\" );\n-        if ( result.getQueryExecutionType().requestedExecutionPlanDescription() )\n-        {\n-            out.println();\n-            out.println( result.getExecutionPlanDescription().toString() );\n-        }\n-    }\n+  }\n \n-    private void handleException( Output out, QueryExecutionKernelException exception, long startTime )\n-            throws RemoteException\n-    {\n-        out.println( (now() - startTime) + \" ms\" );\n-        out.println();\n-        out.println( \"WARNING: \" + exception.getMessage() );\n-    }\n+  @Override\n+  protected Continuation exec(AppCommandParser parser, Session session, Output out)\n+      throws RemoteException\n+  {\n+    String query = parser.getLine().trim();\n \n-    private Map<String,Object> getParameters( Session session )\n+    if (isComplete(query))\n     {\n-        try\n-        {\n-            NodeOrRelationship self = getCurrent( session );\n-            session.set( \"self\", self.isNode() ? self.asNode() : self.asRelationship() );\n-        }\n-        catch ( ShellException e )\n-        { // OK, current didn't exist\n-        }\n-        return session.asMap();\n-    }\n-\n-    private boolean isComplete( String query )\n+      final long startTime = System.currentTimeMillis();\n+      try\n+      {\n+        Result result = getResult(trimQuery(query), session);\n+        handleResult(out, result, startTime);\n+      } catch (QueryExecutionKernelException e)\n+      {\n+        handleException(out, e, startTime);\n+        return Continuation.EXCEPTION_CAUGHT;\n+      }\n+      return Continuation.INPUT_COMPLETE;\n+    } else\n     {\n-        return query.endsWith( \";\" );\n+      return Continuation.INPUT_INCOMPLETE;\n     }\n-\n-    protected QueryExecutionEngine getEngine()\n+  }\n+\n+  private Result getResult(String query, Session session)\n+      throws QueryExecutionKernelException\n+  {\n+    Map<String, Object> parameters = getParameters(session);\n+    TransactionalContext tc = createTransactionContext(query, parameters, session);\n+    return getEngine().executeQuery(query, parameters, tc);\n+  }\n+\n+  private String trimQuery(String query)\n+  {\n+    return query.substring(0, query.lastIndexOf(';'));\n+  }\n+\n+  protected void handleResult(Output out, Result result, long startTime)\n+      throws RemoteException\n+  {\n+    printResult(out, result, startTime);\n+    result.close();\n+  }\n+\n+  private void printResult(Output out, Result result, long startTime) throws RemoteException\n+  {\n+    result.writeAsStringTo(new PrintWriter(new OutputAsWriter(out)));\n+    out.println((now() - startTime) + \" ms\");\n+    if (result.getQueryExecutionType().requestedExecutionPlanDescription())\n     {\n-        if ( this.engine == null )\n-        {\n-            this.engine = getDependencyResolver().resolveDependency( QueryExecutionEngine.class );\n-        }\n-        return this.engine;\n+      out.println();\n+      out.println(result.getExecutionPlanDescription().toString());\n     }\n-\n-    private DependencyResolver getDependencyResolver()\n+  }\n+\n+  private void handleException(Output out, QueryExecutionKernelException exception, long startTime)\n+      throws RemoteException\n+  {\n+    out.println((now() - startTime) + \" ms\");\n+    out.println();\n+    out.println(\"WARNING: \" + exception.getMessage());\n+  }\n+\n+  private Map<String, Object> getParameters(Session session)\n+  {\n+    try\n     {\n-        return getServer().getDb().getDependencyResolver();\n+      NodeOrRelationship self = getCurrent(session);\n+      session.set(\"self\", self.isNode() ? self.asNode() : self.asRelationship());\n+    } catch (ShellException e)\n+    { // OK, current didn't exist\n     }\n+    return session.asMap();\n+  }\n \n-    protected long now()\n-    {\n-        return System.currentTimeMillis();\n-    }\n+  private boolean isComplete(String query)\n+  {\n+    return query.endsWith(\";\");\n+  }\n \n-    private TransactionalContext createTransactionContext( String queryText, Map<String,Object> queryParameters,\n-            Session session )\n+  protected QueryExecutionEngine getEngine()\n+  {\n+    if (this.engine == null)\n     {\n-        DependencyResolver dependencyResolver = getDependencyResolver();\n-        GraphDatabaseQueryService graph = dependencyResolver.resolveDependency( GraphDatabaseQueryService.class );\n-        TransactionalContextFactory contextFactory =\n-            Neo4jTransactionalContextFactory.create( graph, new PropertyContainerLocker() );\n-        InternalTransaction transaction =\n-            graph.beginTransaction( KernelTransaction.Type.implicit, LoginContext.AUTH_DISABLED );\n-        return contextFactory.newContext(\n-                new ShellConnectionInfo( session.getId() ),\n-                transaction,\n-                queryText,\n-                ValueUtils.asParameterMapValue( queryParameters )\n-        );\n+      this.engine = getDependencyResolver().resolveDependency(QueryExecutionEngine.class);\n     }\n+    return this.engine;\n+  }\n+\n+  private DependencyResolver getDependencyResolver()\n+  {\n+    return getServer().getDb().getDependencyResolver();\n+  }\n+\n+  protected long now()\n+  {\n+    return System.currentTimeMillis();\n+  }\n+\n+  private TransactionalContext createTransactionContext(String queryText, Map<String, Object> queryParameters,\n+                                                        Session session)\n+  {\n+    DependencyResolver dependencyResolver = getDependencyResolver();\n+    GraphDatabaseQueryService graph = dependencyResolver.resolveDependency(GraphDatabaseQueryService.class);\n+    TransactionalContextFactory contextFactory =\n+        Neo4jTransactionalContextFactory.create(graph, new PropertyContainerLocker());\n+    InternalTransaction transaction =\n+        graph.beginTransaction(KernelTransaction.Type.implicit, LoginContext.AUTH_DISABLED);\n+    return contextFactory.newContext(\n+        new ShellConnectionInfo(session.getId()),\n+        transaction,\n+        queryText,\n+        ValueUtils.asParameterMapValue(queryParameters)\n+    );\n+  }\n }\n",
            "diff_size": 215
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 379).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2051/Start.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2051/Start.java\nindex 798a463cf40..8d668549a7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2051/Start.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2051/Start.java\n@@ -58,20 +58,14 @@ public class Start extends TransactionProvidingApp\n     public String getDescription()\n     {\n         String className = this.getClass().getSimpleName().toUpperCase();\n-        return MessageFormat.format( \"Executes a Cypher query. Usage: {0} <rest of query>;\\nExample: MATCH \" +\n-                                     \"(me)-[:KNOWS]->(you) RETURN you.name;\\nwhere '{'self'}' will be replaced with \" +\n-                                     \"the current location in the graph.Please, note that the query must end with a \" +\n-                                     \"semicolon. Other parameters are\\ntaken from shell variables, \" +\n-                                     \"see ''help export''.\", className );\n+        return MessageFormat.format( \"Executes a Cypher query. Usage: {0} <rest of query>;\\nExample: MATCH \" + \"(me)-[:KNOWS]->(you) RETURN you.name;\\nwhere '{'self'}' will be replaced with \" + \"the current location in the graph.Please, note that the query must end with a \" + \"semicolon. Other parameters are\\ntaken from shell variables, \" + \"see ''help export''.\", className );\n     }\n \n     @Override\n     public Continuation execute( AppCommandParser parser, Session session, Output out ) throws Exception\n     {\n-\n-        String query = parser.getLine().trim();\n-\n-        if ( isComplete( query ) )\n+    String query = parser.getLine().trim();\n+if ( isComplete( query ) )\n         {\n             if ( getEngine().isPeriodicCommit( query ) )\n             {\n@@ -86,16 +80,13 @@ public class Start extends TransactionProvidingApp\n         {\n             return Continuation.INPUT_INCOMPLETE;\n         }\n-\n     }\n \n     @Override\n-    protected Continuation exec( AppCommandParser parser, Session session, Output out )\n-            throws RemoteException\n-    {\n+    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws RemoteException\n+{\n         String query = parser.getLine().trim();\n-\n-        if ( isComplete( query ) )\n+if ( isComplete( query ) )\n         {\n             final long startTime = System.currentTimeMillis();\n             try\n@@ -108,7 +99,8 @@ public class Start extends TransactionProvidingApp\n                 handleException( out, e, startTime );\n                 return Continuation.EXCEPTION_CAUGHT;\n             }\n-            return Continuation.INPUT_COMPLETE;\n+\n+return Continuation.INPUT_COMPLETE;\n         }\n         else\n         {\n@@ -116,9 +108,8 @@ public class Start extends TransactionProvidingApp\n         }\n     }\n \n-    private Result getResult( String query, Session session )\n-            throws QueryExecutionKernelException\n-    {\n+    private Result getResult( String query, Session session ) throws QueryExecutionKernelException\n+{\n         Map<String,Object> parameters = getParameters( session );\n         TransactionalContext tc = createTransactionContext( query, parameters, session );\n         return getEngine().executeQuery( query, parameters, tc );\n@@ -129,9 +120,8 @@ public class Start extends TransactionProvidingApp\n         return query.substring( 0, query.lastIndexOf( ';' ) );\n     }\n \n-    protected void handleResult( Output out, Result result, long startTime )\n-            throws RemoteException\n-    {\n+    protected void handleResult( Output out, Result result, long startTime ) throws RemoteException\n+{\n         printResult( out, result, startTime );\n         result.close();\n     }\n@@ -147,9 +137,8 @@ public class Start extends TransactionProvidingApp\n         }\n     }\n \n-    private void handleException( Output out, QueryExecutionKernelException exception, long startTime )\n-            throws RemoteException\n-    {\n+    private void handleException( Output out, QueryExecutionKernelException exception, long startTime ) throws RemoteException\n+{\n         out.println( (now() - startTime) + \" ms\" );\n         out.println();\n         out.println( \"WARNING: \" + exception.getMessage() );\n@@ -197,15 +186,9 @@ public class Start extends TransactionProvidingApp\n     {\n         DependencyResolver dependencyResolver = getDependencyResolver();\n         GraphDatabaseQueryService graph = dependencyResolver.resolveDependency( GraphDatabaseQueryService.class );\n-        TransactionalContextFactory contextFactory =\n-            Neo4jTransactionalContextFactory.create( graph, new PropertyContainerLocker() );\n-        InternalTransaction transaction =\n-            graph.beginTransaction( KernelTransaction.Type.implicit, LoginContext.AUTH_DISABLED );\n-        return contextFactory.newContext(\n-                new ShellConnectionInfo( session.getId() ),\n-                transaction,\n-                queryText,\n-                ValueUtils.asParameterMapValue( queryParameters )\n-        );\n+        TransactionalContextFactory contextFactory = Neo4jTransactionalContextFactory.create( graph, new PropertyContainerLocker() );\n+InternalTransaction transaction = graph.beginTransaction( KernelTransaction.Type.implicit, LoginContext.AUTH_DISABLED );\n+return contextFactory.newContext( new ShellConnectionInfo( session.getId() ), transaction, queryText,\n+                ValueUtils.asParameterMapValue( queryParameters ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}