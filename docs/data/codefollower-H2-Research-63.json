{
    "project_name": "codefollower-H2-Research",
    "error_id": "63",
    "information": {
        "errors": [
            {
                "line": "241",
                "column": "78",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "            files = files(\"src/test\");\n            files.addAll(files(\"src/tools\"));\n            files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\"); //we don't use Junit for this test framework\n            args = args(\"-Xlint:unchecked\", \"-Xlint:deprecation\",\n                    \"-d\", \"temp\", \"-sourcepath\", \"src/test\" + File.pathSeparator + \"src/tools\",\n                    \"-classpath\", classpath);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/63/Build.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/63/Build.java\nindex f780d0f4e00..074c53fcd59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/63/Build.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/63/Build.java\n@@ -238,8 +238,9 @@ public class Build extends BuildBase {\n         if (!clientOnly) {\n             files = files(\"src/test\");\n             files.addAll(files(\"src/tools\"));\n-            files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\"); //we don't use Junit for this test framework\n-            args = args(\"-Xlint:unchecked\", \"-Xlint:deprecation\",\n+            files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\");\n+            //we don't use Junit for this test framework\n+             args = args(\"-Xlint:unchecked\", \"-Xlint:deprecation\",\n                     \"-d\", \"temp\", \"-sourcepath\", \"src/test\" + File.pathSeparator + \"src/tools\",\n                     \"-classpath\", classpath);\n             if (version != null) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "242",
                    "column": "72",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                },
                {
                    "line": "1106",
                    "column": "41",
                    "severity": "warning",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/63/Build.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/63/Build.java\nindex f780d0f4e00..61df8711e02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/63/Build.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/63/Build.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.build;\n \n import java.io.File;\n@@ -23,1104 +24,1104 @@ import org.h2.build.doc.XMLParser;\n  */\n public class Build extends BuildBase {\n \n-    private boolean filesMissing;\n+  private boolean filesMissing;\n \n-    /**\n-     * Run the build.\n-     *\n-     * @param args the command line arguments\n-     */\n-    public static void main(String... args) {\n-        new Build().run(args);\n-    }\n+  /**\n+   * Run the build.\n+   *\n+   * @param args the command line arguments\n+   */\n+  public static void main(String... args) {\n+    new Build().run(args);\n+  }\n \n-    /**\n-     * Run the benchmarks.\n-     */\n-    @Description(summary = \"Run the benchmarks.\")\n-    public void benchmark() {\n-        downloadUsingMaven(\"ext/hsqldb-2.3.2.jar\",\n-                \"org/hsqldb\", \"hsqldb\", \"2.3.2\",\n-                \"970fd7b8f635e2c19305160459649569655b843c\");\n-        downloadUsingMaven(\"ext/derby-10.10.1.1.jar\",\n-                \"org/apache/derby\", \"derby\", \"10.10.1.1\",\n-                \"09f6f910f0373adc1b23c10f9b4bb151b7e7449f\");\n-        downloadUsingMaven(\"ext/derbyclient-10.10.1.1.jar\",\n-                \"org/apache/derby\", \"derbyclient\", \"10.10.1.1\",\n-                \"42d5293b4ac5c5f082583c3564c10f78bd34a4cb\");\n-        downloadUsingMaven(\"ext/derbynet-10.10.1.1.jar\",\n-                \"org/apache/derby\", \"derbynet\", \"10.10.1.1\",\n-                \"912b08dca73663d4665e09cd317be1218412d93e\");\n-        downloadUsingMaven(\"ext/postgresql-8.3-603.jdbc3.jar\",\n-                \"postgresql\", \"postgresql\", \"8.3-603.jdbc3\",\n-                \"33d531c3c53055ddcbea3d88bfa093466ffef924\");\n-        downloadUsingMaven(\"ext/mysql-connector-java-5.1.6.jar\",\n-                \"mysql\", \"mysql-connector-java\", \"5.1.6\",\n-                \"380ef5226de2c85ff3b38cbfefeea881c5fce09d\");\n-        compile();\n-\n-        String cp = \"temp\" +\n-                File.pathSeparator + \"bin/h2\" + getJarSuffix() +\n-                File.pathSeparator + \"ext/hsqldb.jar\" +\n-                File.pathSeparator + \"ext/hsqldb-2.3.2.jar\" +\n-                File.pathSeparator + \"ext/derby-10.10.1.1.jar\" +\n-                File.pathSeparator + \"ext/derbyclient-10.10.1.1.jar\" +\n-                File.pathSeparator + \"ext/derbynet-10.10.1.1.jar\" +\n-                File.pathSeparator + \"ext/postgresql-8.3-603.jdbc3.jar\" +\n-                File.pathSeparator + \"ext/mysql-connector-java-5.1.6.jar\";\n-        StringList args = args(\"-Xmx128m\",\n-                \"-cp\", cp, \"org.h2.test.bench.TestPerformance\");\n-        execJava(args.plus(\"-init\", \"-db\", \"1\"));\n-        execJava(args.plus(\"-db\", \"2\"));\n-        execJava(args.plus(\"-db\", \"3\", \"-out\", \"pe.html\"));\n-        execJava(args.plus(\"-init\", \"-db\", \"4\"));\n-        execJava(args.plus(\"-db\", \"5\", \"-exit\"));\n-        execJava(args.plus(\"-db\", \"6\"));\n-        execJava(args.plus(\"-db\", \"7\"));\n-        execJava(args.plus(\"-db\", \"8\", \"-out\", \"ps.html\"));\n-    }\n+  /**\n+   * Run the benchmarks.\n+   */\n+  @Description(summary = \"Run the benchmarks.\")\n+  public void benchmark() {\n+    downloadUsingMaven(\"ext/hsqldb-2.3.2.jar\",\n+        \"org/hsqldb\", \"hsqldb\", \"2.3.2\",\n+        \"970fd7b8f635e2c19305160459649569655b843c\");\n+    downloadUsingMaven(\"ext/derby-10.10.1.1.jar\",\n+        \"org/apache/derby\", \"derby\", \"10.10.1.1\",\n+        \"09f6f910f0373adc1b23c10f9b4bb151b7e7449f\");\n+    downloadUsingMaven(\"ext/derbyclient-10.10.1.1.jar\",\n+        \"org/apache/derby\", \"derbyclient\", \"10.10.1.1\",\n+        \"42d5293b4ac5c5f082583c3564c10f78bd34a4cb\");\n+    downloadUsingMaven(\"ext/derbynet-10.10.1.1.jar\",\n+        \"org/apache/derby\", \"derbynet\", \"10.10.1.1\",\n+        \"912b08dca73663d4665e09cd317be1218412d93e\");\n+    downloadUsingMaven(\"ext/postgresql-8.3-603.jdbc3.jar\",\n+        \"postgresql\", \"postgresql\", \"8.3-603.jdbc3\",\n+        \"33d531c3c53055ddcbea3d88bfa093466ffef924\");\n+    downloadUsingMaven(\"ext/mysql-connector-java-5.1.6.jar\",\n+        \"mysql\", \"mysql-connector-java\", \"5.1.6\",\n+        \"380ef5226de2c85ff3b38cbfefeea881c5fce09d\");\n+    compile();\n \n-    /**\n-     * Clean all jar files, classes, and generated documentation.\n-     */\n-    @Description(summary = \"Clean all jar files, classes, and generated documentation.\")\n-    public void clean() {\n-        delete(\"temp\");\n-        delete(\"docs\");\n-        mkdir(\"docs\");\n-        mkdir(\"bin\");\n-        delete(files(\".\").keep(\"*/Thumbs.db\"));\n-    }\n+    String cp = \"temp\" +\n+        File.pathSeparator + \"bin/h2\" + getJarSuffix() +\n+        File.pathSeparator + \"ext/hsqldb.jar\" +\n+        File.pathSeparator + \"ext/hsqldb-2.3.2.jar\" +\n+        File.pathSeparator + \"ext/derby-10.10.1.1.jar\" +\n+        File.pathSeparator + \"ext/derbyclient-10.10.1.1.jar\" +\n+        File.pathSeparator + \"ext/derbynet-10.10.1.1.jar\" +\n+        File.pathSeparator + \"ext/postgresql-8.3-603.jdbc3.jar\" +\n+        File.pathSeparator + \"ext/mysql-connector-java-5.1.6.jar\";\n+    StringList args = args(\"-Xmx128m\",\n+        \"-cp\", cp, \"org.h2.test.bench.TestPerformance\");\n+    execJava(args.plus(\"-init\", \"-db\", \"1\"));\n+    execJava(args.plus(\"-db\", \"2\"));\n+    execJava(args.plus(\"-db\", \"3\", \"-out\", \"pe.html\"));\n+    execJava(args.plus(\"-init\", \"-db\", \"4\"));\n+    execJava(args.plus(\"-db\", \"5\", \"-exit\"));\n+    execJava(args.plus(\"-db\", \"6\"));\n+    execJava(args.plus(\"-db\", \"7\"));\n+    execJava(args.plus(\"-db\", \"8\", \"-out\", \"ps.html\"));\n+  }\n \n-    /**\n-     * Compile all classes.\n-     */\n-    @Description(summary = \"Compile all classes.\")\n-    public void compile() {\n-        compile(true, false, false);\n-    }\n+  /**\n+   * Clean all jar files, classes, and generated documentation.\n+   */\n+  @Description(summary = \"Clean all jar files, classes, and generated documentation.\")\n+  public void clean() {\n+    delete(\"temp\");\n+    delete(\"docs\");\n+    mkdir(\"docs\");\n+    mkdir(\"bin\");\n+    delete(files(\".\").keep(\"*/Thumbs.db\"));\n+  }\n \n-    private void compileTools() {\n-        mkdir(\"temp\");\n-        FileList files = files(\"src/tools\").keep(\"src/tools/org/h2/build/*\");\n-        StringList args = args(\"-d\", \"temp\", \"-sourcepath\", \"src/tools\" +\n-                File.pathSeparator + \"src/test\" +\n-                File.pathSeparator + \"src/main\");\n-        String version = getTargetJavaVersion();\n-        if (version != null) {\n-            args = args.plus(\"-target\", version, \"-source\", version);\n-        }\n-        javac(args, files);\n-    }\n+  /**\n+   * Compile all classes.\n+   */\n+  @Description(summary = \"Compile all classes.\")\n+  public void compile() {\n+    compile(true, false, false);\n+  }\n \n-    /**\n-     * Run the Emma code coverage.\n-     */\n-    @Description(summary = \"Run the Emma code coverage.\")\n-    public void coverage() {\n-        downloadTest();\n-        downloadUsingMaven(\"ext/emma-2.0.5312.jar\",\n-                \"emma\", \"emma\", \"2.0.5312\",\n-                \"30a40933caf67d88d9e75957950ccf353b181ab7\");\n-        String cp = \"temp\" + File.pathSeparator + \"bin\" +\n-            File.pathSeparator + \"ext/emma-2.0.5312.jar\" +\n-            File.pathSeparator + \"ext/postgresql-8.3-603.jdbc3.jar\" +\n-            File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n-            File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n-            File.pathSeparator + \"ext/h2mig_pagestore_addon.jar\" +\n-            File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n-            File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n-            File.pathSeparator + \"ext/jts-core-1.14.0.jar\" +\n-            File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n-            File.pathSeparator + \"ext/slf4j-nop-1.6.0.jar\" +\n-            File.pathSeparator + javaToolsJar;\n-        // -XX:-UseSplitVerifier is for Java 7 compatibility\n-        execJava(args(\n-                \"-Xmx128m\",\n-                \"-XX:-UseSplitVerifier\",\n-                \"-cp\", cp, \"emma\", \"run\",\n-                \"-cp\", \"temp\",\n-                \"-sp\", \"src/main\",\n-                \"-r\", \"html,txt\",\n-                \"-ix\", \"-org.h2.test.*,-org.h2.dev.*,\" +\n-                \"-org.h2.jaqu.*,-org.h2.mode.*,-org.h2.server.pg.*\",\n-                \"org.h2.test.TestAll\"));\n+  private void compileTools() {\n+    mkdir(\"temp\");\n+    FileList files = files(\"src/tools\").keep(\"src/tools/org/h2/build/*\");\n+    StringList args = args(\"-d\", \"temp\", \"-sourcepath\", \"src/tools\" +\n+        File.pathSeparator + \"src/test\" +\n+        File.pathSeparator + \"src/main\");\n+    String version = getTargetJavaVersion();\n+    if (version != null) {\n+      args = args.plus(\"-target\", version, \"-source\", version);\n     }\n+    javac(args, files);\n+  }\n \n-    /**\n-     * Switch the source code to the current JDK.\n-     */\n-    @Description(summary = \"Switch the source code to match the current JDK.\")\n-    public void switchSource() {\n-        switchSource(true);\n-    }\n+  /**\n+   * Run the Emma code coverage.\n+   */\n+  @Description(summary = \"Run the Emma code coverage.\")\n+  public void coverage() {\n+    downloadTest();\n+    downloadUsingMaven(\"ext/emma-2.0.5312.jar\",\n+        \"emma\", \"emma\", \"2.0.5312\",\n+        \"30a40933caf67d88d9e75957950ccf353b181ab7\");\n+    String cp = \"temp\" + File.pathSeparator + \"bin\" +\n+        File.pathSeparator + \"ext/emma-2.0.5312.jar\" +\n+        File.pathSeparator + \"ext/postgresql-8.3-603.jdbc3.jar\" +\n+        File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n+        File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n+        File.pathSeparator + \"ext/h2mig_pagestore_addon.jar\" +\n+        File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n+        File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n+        File.pathSeparator + \"ext/jts-core-1.14.0.jar\" +\n+        File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n+        File.pathSeparator + \"ext/slf4j-nop-1.6.0.jar\" +\n+        File.pathSeparator + javaToolsJar;\n+    // -XX:-UseSplitVerifier is for Java 7 compatibility\n+    execJava(args(\n+        \"-Xmx128m\",\n+        \"-XX:-UseSplitVerifier\",\n+        \"-cp\", cp, \"emma\", \"run\",\n+        \"-cp\", \"temp\",\n+        \"-sp\", \"src/main\",\n+        \"-r\", \"html,txt\",\n+        \"-ix\", \"-org.h2.test.*,-org.h2.dev.*,\" +\n+            \"-org.h2.jaqu.*,-org.h2.mode.*,-org.h2.server.pg.*\",\n+        \"org.h2.test.TestAll\"));\n+  }\n \n-    private static String getTargetJavaVersion() {\n-        return System.getProperty(\"version\");\n-    }\n+  /**\n+   * Switch the source code to the current JDK.\n+   */\n+  @Description(summary = \"Switch the source code to match the current JDK.\")\n+  public void switchSource() {\n+    switchSource(true);\n+  }\n \n-    private static void switchSource(boolean enableCheck) {\n-        try {\n-            String version = getTargetJavaVersion();\n-            String check = enableCheck ? \"+CHECK\" : \"-CHECK\";\n-            if (version == null) {\n-                SwitchSource.main(\"-dir\", \"src\", \"-auto\", check);\n-            } else {\n-                SwitchSource.main(\"-dir\", \"src\", \"-version\", version, check);\n-            }\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n+  private static String getTargetJavaVersion() {\n+    return System.getProperty(\"version\");\n+  }\n \n-    private void compileMVStore(boolean debugInfo) {\n-        switchSource(debugInfo);\n-        clean();\n-        mkdir(\"temp\");\n-        String classpath = \"temp\";\n-        FileList files;\n-        files = files(\"src/main/org/h2/mvstore\").\n-                exclude(\"src/main/org/h2/mvstore/db/*\");\n-        StringList args = args();\n-        if (debugInfo) {\n-            args = args.plus(\"-Xlint:unchecked\", \"-d\", \"temp\", \"-sourcepath\",\n-                    \"src/main\", \"-classpath\", classpath);\n-        } else {\n-            args = args.plus(\"-Xlint:unchecked\", \"-g:none\", \"-d\", \"temp\",\n-                    \"-sourcepath\", \"src/main\", \"-classpath\", classpath);\n-        }\n-        String version = getTargetJavaVersion();\n-        if (version != null) {\n-            args = args.plus(\"-target\", version, \"-source\", version);\n-        }\n-        javac(args, files);\n+  private static void switchSource(boolean enableCheck) {\n+    try {\n+      String version = getTargetJavaVersion();\n+      String check = enableCheck ? \"+CHECK\" : \"-CHECK\";\n+      if (version == null) {\n+        SwitchSource.main(\"-dir\", \"src\", \"-auto\", check);\n+      } else {\n+        SwitchSource.main(\"-dir\", \"src\", \"-version\", version, check);\n+      }\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    private void compile(boolean debugInfo, boolean clientOnly,\n-            boolean basicResourcesOnly) {\n-        switchSource(debugInfo);\n-        clean();\n-        mkdir(\"temp\");\n-        download();\n-        String classpath = \"temp\" +\n-                File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n-                File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n-                File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n-                File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n-                File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n-                File.pathSeparator + \"ext/jts-core-1.14.0.jar\" +\n-                File.pathSeparator + javaToolsJar;\n-        FileList files;\n-        if (clientOnly) {\n-            files = files(\"src/main/org/h2/Driver.java\");\n-            files.addAll(files(\"src/main/org/h2/jdbc\"));\n-            files.addAll(files(\"src/main/org/h2/jdbcx\"));\n-        } else {\n-            files = files(\"src/main\");\n-        }\n-        StringList args = args();\n-        if (debugInfo) {\n-            args = args.plus(\"-Xlint:unchecked\",\n-                    \"-d\", \"temp\", \"-sourcepath\", \"src/main\", \"-classpath\", classpath);\n-        } else {\n-            args = args.plus(\"-Xlint:unchecked\", \"-g:none\",\n-                    \"-d\", \"temp\", \"-sourcepath\", \"src/main\", \"-classpath\", classpath);\n-        }\n-        String version = getTargetJavaVersion();\n-        if (version != null) {\n-            args = args.plus(\"-target\", version, \"-source\", version);\n-        }\n-        javac(args, files);\n-\n-        files = files(\"src/main/META-INF/services\");\n-        copy(\"temp\", files, \"src/main\");\n-\n-        if (!clientOnly) {\n-            files = files(\"src/test\");\n-            files.addAll(files(\"src/tools\"));\n-            files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\"); //we don't use Junit for this test framework\n-            args = args(\"-Xlint:unchecked\", \"-Xlint:deprecation\",\n-                    \"-d\", \"temp\", \"-sourcepath\", \"src/test\" + File.pathSeparator + \"src/tools\",\n-                    \"-classpath\", classpath);\n-            if (version != null) {\n-                args = args.plus(\"-target\", version, \"-source\", version);\n-            }\n-            javac(args, files);\n-            files = files(\"src/test\").\n-                exclude(\"*.java\").\n-                exclude(\"*/package.html\");\n-            copy(\"temp\", files, \"src/test\");\n-        }\n-        resources(clientOnly, basicResourcesOnly);\n+  private void compileMVStore(boolean debugInfo) {\n+    switchSource(debugInfo);\n+    clean();\n+    mkdir(\"temp\");\n+    String classpath = \"temp\";\n+    FileList files;\n+    files = files(\"src/main/org/h2/mvstore\").\n+        exclude(\"src/main/org/h2/mvstore/db/*\");\n+    StringList args = args();\n+    if (debugInfo) {\n+      args = args.plus(\"-Xlint:unchecked\", \"-d\", \"temp\", \"-sourcepath\",\n+          \"src/main\", \"-classpath\", classpath);\n+    } else {\n+      args = args.plus(\"-Xlint:unchecked\", \"-g:none\", \"-d\", \"temp\",\n+          \"-sourcepath\", \"src/main\", \"-classpath\", classpath);\n     }\n-\n-    private static void filter(String source, String target, String old,\n-            String replacement) {\n-        String text = new String(readFile(new File(source)));\n-        text = replaceAll(text, old, replacement);\n-        writeFile(new File(target), text.getBytes());\n+    String version = getTargetJavaVersion();\n+    if (version != null) {\n+      args = args.plus(\"-target\", version, \"-source\", version);\n     }\n+    javac(args, files);\n+  }\n \n-    /**\n-     * Create the documentation from the documentation sources. API Javadocs are\n-     * created as well.\n-     */\n-    @Description(summary = \"Create the documentation from sources (incl. API Javadocs).\")\n-    public void docs() {\n-        javadoc();\n-        copy(\"docs\", files(\"src/docsrc/index.html\"), \"src/docsrc\");\n-        java(\"org.h2.build.doc.XMLChecker\", null);\n-        java(\"org.h2.build.code.CheckJavadoc\", null);\n-        java(\"org.h2.build.code.CheckTextFiles\", null);\n-        java(\"org.h2.build.doc.GenerateDoc\", null);\n-        java(\"org.h2.build.doc.GenerateHelp\", null);\n-        java(\"org.h2.build.i18n.PrepareTranslation\", null);\n-        java(\"org.h2.build.indexer.Indexer\", null);\n-        java(\"org.h2.build.doc.MergeDocs\", null);\n-        java(\"org.h2.build.doc.WebSite\", null);\n-        java(\"org.h2.build.doc.LinkChecker\", null);\n-        java(\"org.h2.build.doc.XMLChecker\", null);\n-        java(\"org.h2.build.doc.SpellChecker\", null);\n-        java(\"org.h2.build.code.CheckTextFiles\", null);\n-        beep();\n+  private void compile(boolean debugInfo, boolean clientOnly,\n+                       boolean basicResourcesOnly) {\n+    switchSource(debugInfo);\n+    clean();\n+    mkdir(\"temp\");\n+    download();\n+    String classpath = \"temp\" +\n+        File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n+        File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n+        File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n+        File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n+        File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n+        File.pathSeparator + \"ext/jts-core-1.14.0.jar\" +\n+        File.pathSeparator + javaToolsJar;\n+    FileList files;\n+    if (clientOnly) {\n+      files = files(\"src/main/org/h2/Driver.java\");\n+      files.addAll(files(\"src/main/org/h2/jdbc\"));\n+      files.addAll(files(\"src/main/org/h2/jdbcx\"));\n+    } else {\n+      files = files(\"src/main\");\n     }\n-\n-    /**\n-     * Download all required jar files. Actually those are only compile time\n-     * dependencies. The database can be used without any dependencies.\n-     */\n-    @Description(summary = \"Download all required jar files.\")\n-    public void download() {\n-        downloadOrVerify(false);\n+    StringList args = args();\n+    if (debugInfo) {\n+      args = args.plus(\"-Xlint:unchecked\",\n+          \"-d\", \"temp\", \"-sourcepath\", \"src/main\", \"-classpath\", classpath);\n+    } else {\n+      args = args.plus(\"-Xlint:unchecked\", \"-g:none\",\n+          \"-d\", \"temp\", \"-sourcepath\", \"src/main\", \"-classpath\", classpath);\n     }\n-\n-    private void downloadOrVerify(boolean offline) {\n-        downloadOrVerify(\"ext/servlet-api-3.0.1.jar\",\n-                \"javax/servlet\", \"javax.servlet-api\", \"3.0.1\",\n-                \"6bf0ebb7efd993e222fc1112377b5e92a13b38dd\", offline);\n-        downloadOrVerify(\"ext/lucene-core-3.6.2.jar\",\n-                \"org/apache/lucene\", \"lucene-core\", \"3.6.2\",\n-                \"9ec77e2507f9cc01756964c71d91efd8154a8c47\", offline);\n-        downloadOrVerify(\"ext/slf4j-api-1.6.0.jar\",\n-                \"org/slf4j\", \"slf4j-api\", \"1.6.0\",\n-                \"b353147a7d51fcfcd818d8aa6784839783db0915\", offline);\n-        downloadOrVerify(\"ext/org.osgi.core-4.2.0.jar\",\n-                \"org/osgi\", \"org.osgi.core\", \"4.2.0\",\n-                \"66ab449ff3aa5c4adfc82c89025cc983b422eb95\", offline);\n-        downloadOrVerify(\"ext/org.osgi.enterprise-4.2.0.jar\",\n-                \"org/osgi\", \"org.osgi.enterprise\", \"4.2.0\",\n-                \"8634dcb0fc62196e820ed0f1062993c377f74972\", offline);\n-        downloadOrVerify(\"ext/jts-core-1.14.0.jar\",\n-                \"com/vividsolutions\", \"jts-core\", \"1.14.0\",\n-                \"ff63492fba33a395f0da17720dd1716aba0d8c84\", offline);\n+    String version = getTargetJavaVersion();\n+    if (version != null) {\n+      args = args.plus(\"-target\", version, \"-source\", version);\n     }\n+    javac(args, files);\n \n-    private void downloadOrVerify(String target, String group, String artifact,\n-            String version, String sha1Checksum, boolean offline) {\n-        if (offline) {\n-            File targetFile = new File(target);\n-            if (targetFile.exists()) {\n-                return;\n-            }\n-            println(\"Missing file: \" + target);\n-            filesMissing = true;\n-        } else {\n-            downloadUsingMaven(target, group, artifact, version, sha1Checksum);\n-        }\n-    }\n+    files = files(\"src/main/META-INF/services\");\n+    copy(\"temp\", files, \"src/main\");\n \n-    private void downloadTest() {\n-        // for TestUpgrade\n-        download(\"ext/h2mig_pagestore_addon.jar\",\n-                \"http://h2database.com/h2mig_pagestore_addon.jar\",\n-                \"6dfafe1b86959c3ba4f7cf03e99535e8b9719965\");\n-        // for TestOldVersion\n-        downloadUsingMaven(\"ext/h2-1.2.127.jar\",\n-                \"com/h2database\", \"h2\", \"1.2.127\",\n-                \"056e784c7cf009483366ab9cd8d21d02fe47031a\");\n-        // for TestPgServer\n-\n-        downloadUsingMaven(\"ext/postgresql-8.3-603.jdbc3.jar\",\n-                \"postgresql\", \"postgresql\", \"8.3-603.jdbc3\",\n-                \"33d531c3c53055ddcbea3d88bfa093466ffef924\");\n-        // for TestTraceSystem\n-        downloadUsingMaven(\"ext/slf4j-nop-1.6.0.jar\",\n-                \"org/slf4j\", \"slf4j-nop\", \"1.6.0\",\n-                \"4da67bb4a6eea5dc273f99c50ad2333eadb46f86\");\n+    if (!clientOnly) {\n+      files = files(\"src/test\");\n+      files.addAll(files(\"src/tools\"));\n+      files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\"); //we don't use Junit for this test framework\n+      args = args(\"-Xlint:unchecked\", \"-Xlint:deprecation\",\n+          \"-d\", \"temp\", \"-sourcepath\", \"src/test\" + File.pathSeparator + \"src/tools\",\n+          \"-classpath\", classpath);\n+      if (version != null) {\n+        args = args.plus(\"-target\", version, \"-source\", version);\n+      }\n+      javac(args, files);\n+      files = files(\"src/test\").\n+          exclude(\"*.java\").\n+          exclude(\"*/package.html\");\n+      copy(\"temp\", files, \"src/test\");\n     }\n+    resources(clientOnly, basicResourcesOnly);\n+  }\n \n-    private static String getVersion() {\n-        return getStaticValue(\"org.h2.engine.Constants\", \"getVersion\");\n-    }\n+  private static void filter(String source, String target, String old,\n+                             String replacement) {\n+    String text = new String(readFile(new File(source)));\n+    text = replaceAll(text, old, replacement);\n+    writeFile(new File(target), text.getBytes());\n+  }\n \n-    private static String getJarSuffix() {\n-        return \"-\" + getVersion() + \".jar\";\n-    }\n+  /**\n+   * Create the documentation from the documentation sources. API Javadocs are\n+   * created as well.\n+   */\n+  @Description(summary = \"Create the documentation from sources (incl. API Javadocs).\")\n+  public void docs() {\n+    javadoc();\n+    copy(\"docs\", files(\"src/docsrc/index.html\"), \"src/docsrc\");\n+    java(\"org.h2.build.doc.XMLChecker\", null);\n+    java(\"org.h2.build.code.CheckJavadoc\", null);\n+    java(\"org.h2.build.code.CheckTextFiles\", null);\n+    java(\"org.h2.build.doc.GenerateDoc\", null);\n+    java(\"org.h2.build.doc.GenerateHelp\", null);\n+    java(\"org.h2.build.i18n.PrepareTranslation\", null);\n+    java(\"org.h2.build.indexer.Indexer\", null);\n+    java(\"org.h2.build.doc.MergeDocs\", null);\n+    java(\"org.h2.build.doc.WebSite\", null);\n+    java(\"org.h2.build.doc.LinkChecker\", null);\n+    java(\"org.h2.build.doc.XMLChecker\", null);\n+    java(\"org.h2.build.doc.SpellChecker\", null);\n+    java(\"org.h2.build.code.CheckTextFiles\", null);\n+    beep();\n+  }\n \n-    /**\n-     * Create the h2.zip file and the Windows installer.\n-     */\n-    @Description(summary = \"Create the h2.zip file and the Windows installer.\")\n-    public void installer() {\n-        delete(files(\"bin\").keep(\"*.jar\"));\n-        jar();\n-        docs();\n-        try {\n-            exec(\"soffice\", args(\"-invisible\", \"macro:///Standard.Module1.H2Pdf\"));\n-            copy(\"docs\", files(\"../h2web/h2.pdf\"), \"../h2web\");\n-        } catch (Exception e) {\n-            print(\"OpenOffice is not available: \" + e);\n-        }\n-        delete(\"docs/html/onePage.html\");\n-        FileList files = files(\"../h2\").keep(\"../h2/build.*\");\n-        files.addAll(files(\"../h2/bin\").keep(\"../h2/bin/h2*\"));\n-        files.addAll(files(\"../h2/docs\").exclude(\"*.jar\"));\n-        files.addAll(files(\"../h2/service\"));\n-        files.addAll(files(\"../h2/src\"));\n-        zip(\"../h2web/h2.zip\", files, \"../\", false, false);\n-        boolean installer = false;\n-        try {\n-            exec(\"makensis\", args(\"/v2\", \"src/installer/h2.nsi\"));\n-            installer = true;\n-        } catch (Exception e) {\n-            print(\"NSIS is not available: \" + e);\n-        }\n-        String buildDate = getStaticField(\"org.h2.engine.Constants\", \"BUILD_DATE\");\n-        byte[] data = readFile(new File(\"../h2web/h2.zip\"));\n-        String sha1Zip = getSHA1(data), sha1Exe = null;\n-        writeFile(new File(\"../h2web/h2-\" + buildDate + \".zip\"), data);\n-        if (installer) {\n-            data = readFile(new File(\"../h2web/h2-setup.exe\"));\n-            sha1Exe = getSHA1(data);\n-            writeFile(new File(\"../h2web/h2-setup-\" + buildDate + \".exe\"), data);\n-        }\n-        updateChecksum(\"../h2web/html/download.html\", sha1Zip, sha1Exe);\n-    }\n+  /**\n+   * Download all required jar files. Actually those are only compile time\n+   * dependencies. The database can be used without any dependencies.\n+   */\n+  @Description(summary = \"Download all required jar files.\")\n+  public void download() {\n+    downloadOrVerify(false);\n+  }\n \n-    private static void updateChecksum(String fileName, String sha1Zip,\n-            String sha1Exe) {\n-        String checksums = new String(readFile(new File(fileName)));\n-        checksums = replaceAll(checksums, \"<!-- sha1Zip -->\",\n-                \"(SHA1 checksum: \" + sha1Zip + \")\");\n-        if (sha1Exe != null) {\n-            checksums = replaceAll(checksums, \"<!-- sha1Exe -->\",\n-                    \"(SHA1 checksum: \" + sha1Exe + \")\");\n-        }\n-        writeFile(new File(fileName), checksums.getBytes());\n-    }\n+  private void downloadOrVerify(boolean offline) {\n+    downloadOrVerify(\"ext/servlet-api-3.0.1.jar\",\n+        \"javax/servlet\", \"javax.servlet-api\", \"3.0.1\",\n+        \"6bf0ebb7efd993e222fc1112377b5e92a13b38dd\", offline);\n+    downloadOrVerify(\"ext/lucene-core-3.6.2.jar\",\n+        \"org/apache/lucene\", \"lucene-core\", \"3.6.2\",\n+        \"9ec77e2507f9cc01756964c71d91efd8154a8c47\", offline);\n+    downloadOrVerify(\"ext/slf4j-api-1.6.0.jar\",\n+        \"org/slf4j\", \"slf4j-api\", \"1.6.0\",\n+        \"b353147a7d51fcfcd818d8aa6784839783db0915\", offline);\n+    downloadOrVerify(\"ext/org.osgi.core-4.2.0.jar\",\n+        \"org/osgi\", \"org.osgi.core\", \"4.2.0\",\n+        \"66ab449ff3aa5c4adfc82c89025cc983b422eb95\", offline);\n+    downloadOrVerify(\"ext/org.osgi.enterprise-4.2.0.jar\",\n+        \"org/osgi\", \"org.osgi.enterprise\", \"4.2.0\",\n+        \"8634dcb0fc62196e820ed0f1062993c377f74972\", offline);\n+    downloadOrVerify(\"ext/jts-core-1.14.0.jar\",\n+        \"com/vividsolutions\", \"jts-core\", \"1.14.0\",\n+        \"ff63492fba33a395f0da17720dd1716aba0d8c84\", offline);\n+  }\n \n-    private static String canonicalPath(File file) {\n-        try {\n-            return file.getCanonicalPath();\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n+  private void downloadOrVerify(String target, String group, String artifact,\n+                                String version, String sha1Checksum, boolean offline) {\n+    if (offline) {\n+      File targetFile = new File(target);\n+      if (targetFile.exists()) {\n+        return;\n+      }\n+      println(\"Missing file: \" + target);\n+      filesMissing = true;\n+    } else {\n+      downloadUsingMaven(target, group, artifact, version, sha1Checksum);\n     }\n+  }\n \n-    private FileList excludeTestMetaInfFiles(FileList files) {\n-        FileList testMetaInfFiles = files(\"src/test/META-INF\");\n-        int basePathLength = canonicalPath(new File(\"src/test\")).length();\n-        for (File file : testMetaInfFiles) {\n-            files = files.exclude(canonicalPath(file).substring(basePathLength + 1));\n-        }\n-        return files;\n-    }\n+  private void downloadTest() {\n+    // for TestUpgrade\n+    download(\"ext/h2mig_pagestore_addon.jar\",\n+        \"http://h2database.com/h2mig_pagestore_addon.jar\",\n+        \"6dfafe1b86959c3ba4f7cf03e99535e8b9719965\");\n+    // for TestOldVersion\n+    downloadUsingMaven(\"ext/h2-1.2.127.jar\",\n+        \"com/h2database\", \"h2\", \"1.2.127\",\n+        \"056e784c7cf009483366ab9cd8d21d02fe47031a\");\n+    // for TestPgServer\n \n-    /**\n-     * Create the regular h2.jar file.\n-     */\n-    @Description(summary = \"Create the regular h2.jar file.\")\n-    public void jar() {\n-        compile();\n-        manifest(\"H2 Database Engine\", \"org.h2.tools.Console\");\n-        FileList files = files(\"temp\").\n-            exclude(\"temp/android/*\").\n-            exclude(\"temp/org/h2/android/*\").\n-            exclude(\"temp/org/h2/build/*\").\n-            exclude(\"temp/org/h2/dev/*\").\n-            exclude(\"temp/org/h2/jcr/*\").\n-            exclude(\"temp/org/h2/jaqu/*\").\n-            exclude(\"temp/org/h2/java/*\").\n-            exclude(\"temp/org/h2/jcr/*\").\n-            exclude(\"temp/org/h2/mode/*\").\n-            exclude(\"temp/org/h2/samples/*\").\n-            exclude(\"temp/org/h2/server/ftp/*\").\n-            exclude(\"temp/org/h2/test/*\").\n-            exclude(\"*.bat\").\n-            exclude(\"*.sh\").\n-            exclude(\"*.txt\").\n-            exclude(\"*.DS_Store\");\n-        files = excludeTestMetaInfFiles(files);\n-        jar(\"bin/h2\" + getJarSuffix(), files, \"temp\");\n-        filter(\"src/installer/h2.sh\", \"bin/h2.sh\", \"h2.jar\", \"h2\" + getJarSuffix());\n-        filter(\"src/installer/h2.bat\", \"bin/h2.bat\", \"h2.jar\", \"h2\" + getJarSuffix());\n-        filter(\"src/installer/h2w.bat\", \"bin/h2w.bat\", \"h2.jar\", \"h2\" + getJarSuffix());\n-    }\n+    downloadUsingMaven(\"ext/postgresql-8.3-603.jdbc3.jar\",\n+        \"postgresql\", \"postgresql\", \"8.3-603.jdbc3\",\n+        \"33d531c3c53055ddcbea3d88bfa093466ffef924\");\n+    // for TestTraceSystem\n+    downloadUsingMaven(\"ext/slf4j-nop-1.6.0.jar\",\n+        \"org/slf4j\", \"slf4j-nop\", \"1.6.0\",\n+        \"4da67bb4a6eea5dc273f99c50ad2333eadb46f86\");\n+  }\n \n-    /**\n-     * Create the file h2android.jar. This only contains the embedded database,\n-     * plus the H2 Android API. Debug information is disabled.\n-     */\n-    @Description(summary = \"Create h2android.jar with only the embedded DB and H2 Android API.\")\n-    public void jarAndroid() {\n-        compile(false, false, true);\n-        FileList files = files(\"temp\").\n-            exclude(\"temp/org/h2/bnf/*\").\n-            exclude(\"temp/org/h2/build/*\").\n-            exclude(\"temp/org/h2/dev/*\").\n-            exclude(\"temp/org/h2/fulltext/*\").\n-            exclude(\"temp/org/h2/jaqu/*\").\n-            exclude(\"temp/org/h2/java/*\").\n-            exclude(\"temp/org/h2/jdbcx/*\").\n-            exclude(\"temp/org/h2/jcr/*\").\n-            exclude(\"temp/org/h2/jmx/*\").\n-            exclude(\"temp/org/h2/mode/*\").\n-            exclude(\"temp/org/h2/samples/*\").\n-            exclude(\"temp/org/h2/server/*\").\n-            exclude(\"temp/org/h2/test/*\").\n-            exclude(\"temp/org/h2/tools/*\").\n-            exclude(\"*.bat\").\n-            exclude(\"*.sh\").\n-            exclude(\"*.txt\").\n-            exclude(\"*.DS_Store\");\n-        files = excludeTestMetaInfFiles(files);\n-        files.add(new File(\"temp/org/h2/tools/DeleteDbFiles.class\"));\n-        files.add(new File(\"temp/org/h2/tools/CompressTool.class\"));\n-        jar(\"bin/h2android\" + getJarSuffix(), files, \"temp\");\n-    }\n+  private static String getVersion() {\n+    return getStaticValue(\"org.h2.engine.Constants\", \"getVersion\");\n+  }\n \n-    /**\n-     * Create the h2client.jar. This only contains the remote JDBC\n-     * implementation.\n-     */\n-    @Description(summary = \"Create h2client.jar with only the remote JDBC implementation.\")\n-    public void jarClient() {\n-        compile(true, true, false);\n-        FileList files = files(\"temp\").\n-            exclude(\"temp/org/h2/build/*\").\n-            exclude(\"temp/org/h2/dev/*\").\n-            exclude(\"temp/org/h2/jaqu/*\").\n-            exclude(\"temp/org/h2/java/*\").\n-            exclude(\"temp/org/h2/jcr/*\").\n-            exclude(\"temp/org/h2/mode/*\").\n-            exclude(\"temp/org/h2/samples/*\").\n-            exclude(\"temp/org/h2/test/*\").\n-            exclude(\"*.bat\").\n-            exclude(\"*.sh\").\n-            exclude(\"*.txt\").\n-            exclude(\"*.DS_Store\");\n-        files = excludeTestMetaInfFiles(files);\n-        long kb = jar(\"bin/h2-client\" + getJarSuffix(), files, \"temp\");\n-        if (kb < 350 || kb > 450) {\n-            throw new RuntimeException(\"Expected file size 350 - 450 KB, got: \" + kb);\n-        }\n-    }\n+  private static String getJarSuffix() {\n+    return \"-\" + getVersion() + \".jar\";\n+  }\n \n-    /**\n-     * Create the file h2mvstore.jar. This only contains the MVStore.\n-     */\n-    @Description(summary = \"Create h2mvstore.jar containing only the MVStore.\")\n-    public void jarMVStore() {\n-        compileMVStore(true);\n-        manifestMVStore();\n-        FileList files = files(\"temp\");\n-        files.exclude(\"*.DS_Store\");\n-        files = excludeTestMetaInfFiles(files);\n-        jar(\"bin/h2-mvstore\" + getJarSuffix(), files, \"temp\");\n+  /**\n+   * Create the h2.zip file and the Windows installer.\n+   */\n+  @Description(summary = \"Create the h2.zip file and the Windows installer.\")\n+  public void installer() {\n+    delete(files(\"bin\").keep(\"*.jar\"));\n+    jar();\n+    docs();\n+    try {\n+      exec(\"soffice\", args(\"-invisible\", \"macro:///Standard.Module1.H2Pdf\"));\n+      copy(\"docs\", files(\"../h2web/h2.pdf\"), \"../h2web\");\n+    } catch (Exception e) {\n+      print(\"OpenOffice is not available: \" + e);\n     }\n-\n-    /**\n-     * Create the file h2small.jar. This only contains the embedded database.\n-     * Debug information is disabled.\n-     */\n-    @Description(summary = \"Create h2small.jar containing only the embedded database.\")\n-    public void jarSmall() {\n-        compile(false, false, true);\n-        FileList files = files(\"temp\").\n-            exclude(\"temp/android/*\").\n-            exclude(\"temp/org/h2/android/*\").\n-            exclude(\"temp/org/h2/build/*\").\n-            exclude(\"temp/org/h2/dev/*\").\n-            exclude(\"temp/org/h2/jcr/*\").\n-            exclude(\"temp/org/h2/jaqu/*\").\n-            exclude(\"temp/org/h2/java/*\").\n-            exclude(\"temp/org/h2/jcr/*\").\n-            exclude(\"temp/org/h2/mode/*\").\n-            exclude(\"temp/org/h2/samples/*\").\n-            exclude(\"temp/org/h2/server/ftp/*\").\n-            exclude(\"temp/org/h2/test/*\").\n-            exclude(\"temp/org/h2/bnf/*\").\n-            exclude(\"temp/org/h2/fulltext/*\").\n-            exclude(\"temp/org/h2/jdbcx/*\").\n-            exclude(\"temp/org/h2/jmx/*\").\n-            exclude(\"temp/org/h2/server/*\").\n-            exclude(\"temp/org/h2/tools/*\").\n-            exclude(\"*.bat\").\n-            exclude(\"*.sh\").\n-            exclude(\"*.txt\").\n-            exclude(\"*.DS_Store\");\n-        files = excludeTestMetaInfFiles(files);\n-        files.add(new File(\"temp/org/h2/tools/DeleteDbFiles.class\"));\n-        files.add(new File(\"temp/org/h2/tools/CompressTool.class\"));\n-        jar(\"bin/h2small\" + getJarSuffix(), files, \"temp\");\n+    delete(\"docs/html/onePage.html\");\n+    FileList files = files(\"../h2\").keep(\"../h2/build.*\");\n+    files.addAll(files(\"../h2/bin\").keep(\"../h2/bin/h2*\"));\n+    files.addAll(files(\"../h2/docs\").exclude(\"*.jar\"));\n+    files.addAll(files(\"../h2/service\"));\n+    files.addAll(files(\"../h2/src\"));\n+    zip(\"../h2web/h2.zip\", files, \"../\", false, false);\n+    boolean installer = false;\n+    try {\n+      exec(\"makensis\", args(\"/v2\", \"src/installer/h2.nsi\"));\n+      installer = true;\n+    } catch (Exception e) {\n+      print(\"NSIS is not available: \" + e);\n     }\n-\n-    /**\n-     * Create the file h2jaqu.jar. This only contains the JaQu (Java Query)\n-     * implementation. All other jar files do not include JaQu.\n-     */\n-    @Description(summary = \"Create jaqu.jar with only the Java Query implementation.\")\n-    public void jarJaqu() {\n-        compile(true, false, true);\n-        manifest(\"H2 JaQu\", \"\");\n-        FileList files = files(\"temp/org/h2/jaqu\");\n-        files.addAll(files(\"temp/META-INF/MANIFEST.MF\"));\n-        files.exclude(\"*.DS_Store\");\n-        files = excludeTestMetaInfFiles(files);\n-        jar(\"bin/h2jaqu\" + getJarSuffix(), files, \"temp\");\n+    String buildDate = getStaticField(\"org.h2.engine.Constants\", \"BUILD_DATE\");\n+    byte[] data = readFile(new File(\"../h2web/h2.zip\"));\n+    String sha1Zip = getSHA1(data), sha1Exe = null;\n+    writeFile(new File(\"../h2web/h2-\" + buildDate + \".zip\"), data);\n+    if (installer) {\n+      data = readFile(new File(\"../h2web/h2-setup.exe\"));\n+      sha1Exe = getSHA1(data);\n+      writeFile(new File(\"../h2web/h2-setup-\" + buildDate + \".exe\"), data);\n     }\n+    updateChecksum(\"../h2web/html/download.html\", sha1Zip, sha1Exe);\n+  }\n \n-    /**\n-     * Create the Javadocs of the API (incl. the JDBC API) and tools.\n-     */\n-    @Description(summary = \"Create the API Javadocs (incl. JDBC API and tools).\")\n-    public void javadoc() {\n-        compileTools();\n-        delete(\"docs\");\n-        mkdir(\"docs/javadoc\");\n-        javadoc(\"-sourcepath\", \"src/main\", \"org.h2.jdbc\", \"org.h2.jdbcx\",\n-                \"org.h2.tools\", \"org.h2.api\", \"org.h2.engine\", \"org.h2.fulltext\",\n-                \"-classpath\",\n-                \"ext/lucene-core-3.6.2.jar\" +\n-                File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n-                \"-docletpath\", \"bin\" + File.pathSeparator + \"temp\",\n-                \"-doclet\", \"org.h2.build.doclet.Doclet\");\n-        copy(\"docs/javadoc\", files(\"src/docsrc/javadoc\"), \"src/docsrc/javadoc\");\n+  private static void updateChecksum(String fileName, String sha1Zip,\n+                                     String sha1Exe) {\n+    String checksums = new String(readFile(new File(fileName)));\n+    checksums = replaceAll(checksums, \"<!-- sha1Zip -->\",\n+        \"(SHA1 checksum: \" + sha1Zip + \")\");\n+    if (sha1Exe != null) {\n+      checksums = replaceAll(checksums, \"<!-- sha1Exe -->\",\n+          \"(SHA1 checksum: \" + sha1Exe + \")\");\n     }\n+    writeFile(new File(fileName), checksums.getBytes());\n+  }\n \n-    /**\n-     * Create the Javadocs of the implementation.\n-     */\n-    @Description(summary = \"Create the Javadocs of the implementation.\")\n-    public void javadocImpl() {\n-        compileTools();\n-        mkdir(\"docs/javadocImpl2\");\n-        javadoc(\"-sourcepath\", \"src/main\" +\n-                File.pathSeparator + \"src/test\" +\n-                File.pathSeparator + \"src/tools\",\n-                \"-noindex\",\n-                \"-tag\", \"h2.resource\",\n-                \"-d\", \"docs/javadocImpl2\",\n-                \"-classpath\", javaToolsJar +\n-                File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n-                File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n-                File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n-                File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n-                File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n-                File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n-                \"-subpackages\", \"org.h2\",\n-                \"-exclude\", \"org.h2.test.jaqu:org.h2.jaqu\");\n-\n-        mkdir(\"docs/javadocImpl3\");\n-        javadoc(\"-sourcepath\", \"src/main\",\n-                \"-noindex\",\n-                \"-tag\", \"h2.resource\",\n-                \"-d\", \"docs/javadocImpl3\",\n-                \"-classpath\", javaToolsJar +\n-                File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n-                File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n-                File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n-                File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n-                File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n-                File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n-                \"-subpackages\", \"org.h2.mvstore\",\n-                \"-exclude\", \"org.h2.mvstore.db\");\n-\n-        System.setProperty(\"h2.interfacesOnly\", \"false\");\n-        System.setProperty(\"h2.javadocDestDir\", \"docs/javadocImpl\");\n-        javadoc(\"-sourcepath\", \"src/main\" +\n-                File.pathSeparator + \"src/test\" +\n-                File.pathSeparator + \"src/tools\",\n-                \"-classpath\", javaToolsJar +\n-                File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n-                File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n-                File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n-                File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n-                File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n-                File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n-                \"-subpackages\", \"org.h2\",\n-                \"-exclude\", \"org.h2.test.jaqu:org.h2.jaqu\",\n-                \"-package\",\n-                \"-docletpath\", \"bin\" + File.pathSeparator + \"temp\",\n-                \"-doclet\", \"org.h2.build.doclet.Doclet\");\n-        copy(\"docs/javadocImpl\", files(\"src/docsrc/javadoc\"), \"src/docsrc/javadoc\");\n+  private static String canonicalPath(File file) {\n+    try {\n+      return file.getCanonicalPath();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    private static void manifest(String title, String mainClassName) {\n-        String manifest = new String(readFile(new File(\n-                \"src/main/META-INF/MANIFEST.MF\")));\n-        manifest = replaceAll(manifest, \"${title}\", title);\n-        manifest = replaceAll(manifest, \"${version}\", getVersion());\n-        manifest = replaceAll(manifest, \"${buildJdk}\", getJavaSpecVersion());\n-        String createdBy = System.getProperty(\"java.runtime.version\") +\n-            \" (\" + System.getProperty(\"java.vm.vendor\") + \")\";\n-        manifest = replaceAll(manifest, \"${createdBy}\", createdBy);\n-        String mainClassTag = manifest == null ? \"\" : \"Main-Class: \" + mainClassName;\n-        manifest = replaceAll(manifest, \"${mainClassTag}\", mainClassTag);\n-        writeFile(new File(\"temp/META-INF/MANIFEST.MF\"), manifest.getBytes());\n+  private FileList excludeTestMetaInfFiles(FileList files) {\n+    FileList testMetaInfFiles = files(\"src/test/META-INF\");\n+    int basePathLength = canonicalPath(new File(\"src/test\")).length();\n+    for (File file : testMetaInfFiles) {\n+      files = files.exclude(canonicalPath(file).substring(basePathLength + 1));\n     }\n+    return files;\n+  }\n \n-    private static void manifestMVStore() {\n-        String manifest = new String(readFile(new File(\n-                \"src/installer/mvstore/MANIFEST.MF\")));\n-        manifest = replaceAll(manifest, \"${version}\", getVersion());\n-        manifest = replaceAll(manifest, \"${buildJdk}\", getJavaSpecVersion());\n-        String createdBy = System.getProperty(\"java.runtime.version\") +\n-            \" (\" + System.getProperty(\"java.vm.vendor\") + \")\";\n-        manifest = replaceAll(manifest, \"${createdBy}\", createdBy);\n-        mkdir(\"temp/META-INF\");\n-        writeFile(new File(\"temp/META-INF/MANIFEST.MF\"), manifest.getBytes());\n-    }\n+  /**\n+   * Create the regular h2.jar file.\n+   */\n+  @Description(summary = \"Create the regular h2.jar file.\")\n+  public void jar() {\n+    compile();\n+    manifest(\"H2 Database Engine\", \"org.h2.tools.Console\");\n+    FileList files = files(\"temp\").\n+        exclude(\"temp/android/*\").\n+        exclude(\"temp/org/h2/android/*\").\n+        exclude(\"temp/org/h2/build/*\").\n+        exclude(\"temp/org/h2/dev/*\").\n+        exclude(\"temp/org/h2/jcr/*\").\n+        exclude(\"temp/org/h2/jaqu/*\").\n+        exclude(\"temp/org/h2/java/*\").\n+        exclude(\"temp/org/h2/jcr/*\").\n+        exclude(\"temp/org/h2/mode/*\").\n+        exclude(\"temp/org/h2/samples/*\").\n+        exclude(\"temp/org/h2/server/ftp/*\").\n+        exclude(\"temp/org/h2/test/*\").\n+        exclude(\"*.bat\").\n+        exclude(\"*.sh\").\n+        exclude(\"*.txt\").\n+        exclude(\"*.DS_Store\");\n+    files = excludeTestMetaInfFiles(files);\n+    jar(\"bin/h2\" + getJarSuffix(), files, \"temp\");\n+    filter(\"src/installer/h2.sh\", \"bin/h2.sh\", \"h2.jar\", \"h2\" + getJarSuffix());\n+    filter(\"src/installer/h2.bat\", \"bin/h2.bat\", \"h2.jar\", \"h2\" + getJarSuffix());\n+    filter(\"src/installer/h2w.bat\", \"bin/h2w.bat\", \"h2.jar\", \"h2\" + getJarSuffix());\n+  }\n \n-    /**\n-     * This will build a release of the H2 .jar files and upload it to\n-     * file:///data/h2database/m2-repo. This is only required when\n-     * a new H2 version is made.\n-     */\n-    @Description(summary = \"Build H2 release jars and upload to file:///data/h2database/m2-repo.\")\n-    public void mavenDeployCentral() {\n-        // generate and deploy h2*-sources.jar file\n-        FileList files = files(\"src/main\");\n-        copy(\"docs\", files, \"src/main\");\n-        files = files(\"docs\").keep(\"docs/org/*\").keep(\"*.java\");\n-        files.addAll(files(\"docs\").keep(\"docs/META-INF/*\"));\n-        String manifest = new String(readFile(new File(\n-                \"src/installer/source-manifest.mf\")));\n-        manifest = replaceAll(manifest, \"${version}\", getVersion());\n-        writeFile(new File(\"docs/META-INF/MANIFEST.MF\"), manifest.getBytes());\n-        jar(\"docs/h2-\" + getVersion() + \"-sources.jar\", files, \"docs\");\n-        delete(\"docs/org\");\n-        delete(\"docs/META-INF\");\n-        // the option -DgeneratePom=false doesn't work with some versions of\n-        // Maven because of bug http://jira.codehaus.org/browse/MDEPLOY-84\n-        // as a workaround we generate the pom, but overwrite it later on\n-        // (that's why the regular jar is created at the very end)\n-        execScript(\"mvn\", args(\n-                \"deploy:deploy-file\",\n-                \"-Dfile=docs/h2-\" + getVersion() + \"-sources.jar\",\n-                \"-Durl=file:///data/h2database/m2-repo\",\n-                \"-Dpackaging=jar\",\n-                \"-Dclassifier=sources\",\n-                \"-Dversion=\" + getVersion(),\n-                \"-DartifactId=h2\",\n-                \"-DgroupId=com.h2database\"\n-                // ,\"-DgeneratePom=false\"\n-                ));\n-\n-        // generate and deploy the h2*-javadoc.jar file\n-        javadocImpl();\n-        files = files(\"docs/javadocImpl2\");\n-        jar(\"docs/h2-\" + getVersion() + \"-javadoc.jar\", files, \"docs/javadocImpl2\");\n-        execScript(\"mvn\", args(\n-                \"deploy:deploy-file\",\n-                \"-Dfile=docs/h2-\" + getVersion() + \"-javadoc.jar\",\n-                \"-Durl=file:///data/h2database/m2-repo\",\n-                \"-Dpackaging=jar\",\n-                \"-Dclassifier=javadoc\",\n-                \"-Dversion=\" + getVersion(),\n-                \"-DartifactId=h2\",\n-                \"-DgroupId=com.h2database\"\n-                // ,\"-DgeneratePom=false\"\n-                ));\n-\n-        // generate and deploy the h2*.jar file\n-        jar();\n-        String pom = new String(readFile(new File(\"src/installer/pom-template.xml\")));\n-        pom = replaceAll(pom, \"@version@\", getVersion());\n-        writeFile(new File(\"bin/pom.xml\"), pom.getBytes());\n-        execScript(\"mvn\", args(\n-                \"deploy:deploy-file\",\n-                \"-Dfile=bin/h2\" + getJarSuffix(),\n-                \"-Durl=file:///data/h2database/m2-repo\",\n-                \"-Dpackaging=jar\",\n-                \"-Dversion=\" + getVersion(),\n-                \"-DpomFile=bin/pom.xml\",\n-                \"-DartifactId=h2\",\n-                \"-DgroupId=com.h2database\"));\n-\n-        // generate the h2-mvstore-*-sources.jar file\n-        files = files(\"src/main\");\n-        copy(\"docs\", files, \"src/main\");\n-        files = files(\"docs\").keep(\"docs/org/h2/mvstore/*\").\n-                exclude(\"docs/org/h2/mvstore/db/*\").\n-                keep(\"*.java\");\n-        files.addAll(files(\"docs\").keep(\"docs/META-INF/*\"));\n-        manifest = new String(readFile(new File(\n-                \"src/installer/source-manifest.mf\")));\n-        manifest = replaceAll(manifest, \"${version}\", getVersion());\n-        writeFile(new File(\"docs/META-INF/MANIFEST.MF\"), manifest.getBytes());\n-        jar(\"docs/h2-mvstore-\" + getVersion() + \"-sources.jar\", files, \"docs\");\n-        delete(\"docs/org\");\n-        delete(\"docs/META-INF\");\n-\n-        // deploy the h2-mvstore-*-source.jar file\n-        execScript(\"mvn\", args(\n-                \"deploy:deploy-file\",\n-                \"-Dfile=docs/h2-mvstore-\" + getVersion() + \"-sources.jar\",\n-                \"-Durl=file:///data/h2database/m2-repo\",\n-                \"-Dpackaging=jar\",\n-                \"-Dclassifier=sources\",\n-                \"-Dversion=\" + getVersion(),\n-                \"-DartifactId=h2-mvstore\",\n-                \"-DgroupId=com.h2database\"\n-                // ,\"-DgeneratePom=false\"\n-                ));\n-\n-        // generate and deploy the h2-mvstore-*-javadoc.jar file\n-        javadocImpl();\n-        files = files(\"docs/javadocImpl3\");\n-        jar(\"docs/h2-mvstore-\" + getVersion() + \"-javadoc.jar\", files, \"docs/javadocImpl3\");\n-        execScript(\"mvn\", args(\n-                \"deploy:deploy-file\",\n-                \"-Dfile=docs/h2-mvstore-\" + getVersion() + \"-javadoc.jar\",\n-                \"-Durl=file:///data/h2database/m2-repo\",\n-                \"-Dpackaging=jar\",\n-                \"-Dclassifier=javadoc\",\n-                \"-Dversion=\" + getVersion(),\n-                \"-DartifactId=h2-mvstore\",\n-                \"-DgroupId=com.h2database\"\n-                // ,\"-DgeneratePom=false\"\n-                ));\n-\n-        // generate and deploy the h2-mvstore-*.jar file\n-        jarMVStore();\n-        pom = new String(readFile(new File(\"src/installer/pom-mvstore-template.xml\")));\n-        pom = replaceAll(pom, \"@version@\", getVersion());\n-        writeFile(new File(\"bin/pom.xml\"), pom.getBytes());\n-        execScript(\"mvn\", args(\n-                \"deploy:deploy-file\",\n-                \"-Dfile=bin/h2-mvstore\" + getJarSuffix(),\n-                \"-Durl=file:///data/h2database/m2-repo\",\n-                \"-Dpackaging=jar\",\n-                \"-Dversion=\" + getVersion(),\n-                \"-DpomFile=bin/pom.xml\",\n-                \"-DartifactId=h2-mvstore\",\n-                \"-DgroupId=com.h2database\"));\n-    }\n+  /**\n+   * Create the file h2android.jar. This only contains the embedded database,\n+   * plus the H2 Android API. Debug information is disabled.\n+   */\n+  @Description(summary = \"Create h2android.jar with only the embedded DB and H2 Android API.\")\n+  public void jarAndroid() {\n+    compile(false, false, true);\n+    FileList files = files(\"temp\").\n+        exclude(\"temp/org/h2/bnf/*\").\n+        exclude(\"temp/org/h2/build/*\").\n+        exclude(\"temp/org/h2/dev/*\").\n+        exclude(\"temp/org/h2/fulltext/*\").\n+        exclude(\"temp/org/h2/jaqu/*\").\n+        exclude(\"temp/org/h2/java/*\").\n+        exclude(\"temp/org/h2/jdbcx/*\").\n+        exclude(\"temp/org/h2/jcr/*\").\n+        exclude(\"temp/org/h2/jmx/*\").\n+        exclude(\"temp/org/h2/mode/*\").\n+        exclude(\"temp/org/h2/samples/*\").\n+        exclude(\"temp/org/h2/server/*\").\n+        exclude(\"temp/org/h2/test/*\").\n+        exclude(\"temp/org/h2/tools/*\").\n+        exclude(\"*.bat\").\n+        exclude(\"*.sh\").\n+        exclude(\"*.txt\").\n+        exclude(\"*.DS_Store\");\n+    files = excludeTestMetaInfFiles(files);\n+    files.add(new File(\"temp/org/h2/tools/DeleteDbFiles.class\"));\n+    files.add(new File(\"temp/org/h2/tools/CompressTool.class\"));\n+    jar(\"bin/h2android\" + getJarSuffix(), files, \"temp\");\n+  }\n \n-    /**\n-     * This will build a 'snapshot' H2 .jar file and upload it to the local\n-     * Maven 2 repository.\n-     */\n-    @Description(summary = \"Build a snapshot H2 jar and upload to local Maven 2 repo.\")\n-    public void mavenInstallLocal() {\n-        // MVStore\n-        jarMVStore();\n-        String pom = new String(readFile(new File(\"src/installer/pom-mvstore-template.xml\")));\n-        pom = replaceAll(pom, \"@version@\", \"1.0-SNAPSHOT\");\n-        writeFile(new File(\"bin/pom.xml\"), pom.getBytes());\n-        execScript(\"mvn\", args(\n-                \"install:install-file\",\n-                \"-Dversion=1.0-SNAPSHOT\",\n-                \"-Dfile=bin/h2-mvstore\" + getJarSuffix(),\n-                \"-Dpackaging=jar\",\n-                \"-DpomFile=bin/pom.xml\",\n-                \"-DartifactId=h2-mvstore\",\n-                \"-DgroupId=com.h2database\"));\n-        // database\n-        jar();\n-        pom = new String(readFile(new File(\"src/installer/pom-template.xml\")));\n-        pom = replaceAll(pom, \"@version@\", \"1.0-SNAPSHOT\");\n-        writeFile(new File(\"bin/pom.xml\"), pom.getBytes());\n-        execScript(\"mvn\", args(\n-                \"install:install-file\",\n-                \"-Dversion=1.0-SNAPSHOT\",\n-                \"-Dfile=bin/h2\" + getJarSuffix(),\n-                \"-Dpackaging=jar\",\n-                \"-DpomFile=bin/pom.xml\",\n-                \"-DartifactId=h2\",\n-                \"-DgroupId=com.h2database\"));\n+  /**\n+   * Create the h2client.jar. This only contains the remote JDBC\n+   * implementation.\n+   */\n+  @Description(summary = \"Create h2client.jar with only the remote JDBC implementation.\")\n+  public void jarClient() {\n+    compile(true, true, false);\n+    FileList files = files(\"temp\").\n+        exclude(\"temp/org/h2/build/*\").\n+        exclude(\"temp/org/h2/dev/*\").\n+        exclude(\"temp/org/h2/jaqu/*\").\n+        exclude(\"temp/org/h2/java/*\").\n+        exclude(\"temp/org/h2/jcr/*\").\n+        exclude(\"temp/org/h2/mode/*\").\n+        exclude(\"temp/org/h2/samples/*\").\n+        exclude(\"temp/org/h2/test/*\").\n+        exclude(\"*.bat\").\n+        exclude(\"*.sh\").\n+        exclude(\"*.txt\").\n+        exclude(\"*.DS_Store\");\n+    files = excludeTestMetaInfFiles(files);\n+    long kb = jar(\"bin/h2-client\" + getJarSuffix(), files, \"temp\");\n+    if (kb < 350 || kb > 450) {\n+      throw new RuntimeException(\"Expected file size 350 - 450 KB, got: \" + kb);\n     }\n+  }\n \n-    /**\n-     * Build the jar file without downloading any files over the network. If the\n-     * required files are missing, they are are listed, and the jar file is not\n-     * built.\n-     */\n-    @Description(summary = \"Build H2 jar avoiding downloads (list missing files).\")\n-    public void offline() {\n-        downloadOrVerify(true);\n-        if (filesMissing) {\n-            println(\"Required files are missing\");\n-            println(\"Both Lucene 2 and 3 are supported using -Dlucene=x (x=2 or 3)\");\n-        } else {\n-            jar();\n-        }\n-    }\n+  /**\n+   * Create the file h2mvstore.jar. This only contains the MVStore.\n+   */\n+  @Description(summary = \"Create h2mvstore.jar containing only the MVStore.\")\n+  public void jarMVStore() {\n+    compileMVStore(true);\n+    manifestMVStore();\n+    FileList files = files(\"temp\");\n+    files.exclude(\"*.DS_Store\");\n+    files = excludeTestMetaInfFiles(files);\n+    jar(\"bin/h2-mvstore\" + getJarSuffix(), files, \"temp\");\n+  }\n \n-    private void resources(boolean clientOnly, boolean basicOnly) {\n-        if (!clientOnly) {\n-            java(\"org.h2.build.doc.GenerateHelp\", null);\n-            javadoc(\"-sourcepath\", \"src/main\", \"org.h2.tools\", \"org.h2.jmx\",\n-                    \"-classpath\",\n-                    \"ext/lucene-core-3.6.2.jar\" +\n-                    File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n-                    \"-docletpath\", \"bin\" + File.pathSeparator + \"temp\",\n-                    \"-doclet\", \"org.h2.build.doclet.ResourceDoclet\");\n-        }\n-        FileList files = files(\"src/main\").\n-            exclude(\"*.MF\").\n-            exclude(\"*.java\").\n-            exclude(\"*/package.html\").\n-            exclude(\"*/java.sql.Driver\").\n-            exclude(\"*.DS_Store\");\n-        if (basicOnly) {\n-            files = files.keep(\"src/main/org/h2/res/_messages_en.*\");\n-        }\n-        if (clientOnly) {\n-            files = files.exclude(\"src/main/org/h2/res/javadoc.properties\");\n-            files = files.exclude(\"src/main/org/h2/server/*\");\n-        }\n-        zip(\"temp/org/h2/util/data.zip\", files, \"src/main\", true, false);\n-    }\n+  /**\n+   * Create the file h2small.jar. This only contains the embedded database.\n+   * Debug information is disabled.\n+   */\n+  @Description(summary = \"Create h2small.jar containing only the embedded database.\")\n+  public void jarSmall() {\n+    compile(false, false, true);\n+    FileList files = files(\"temp\").\n+        exclude(\"temp/android/*\").\n+        exclude(\"temp/org/h2/android/*\").\n+        exclude(\"temp/org/h2/build/*\").\n+        exclude(\"temp/org/h2/dev/*\").\n+        exclude(\"temp/org/h2/jcr/*\").\n+        exclude(\"temp/org/h2/jaqu/*\").\n+        exclude(\"temp/org/h2/java/*\").\n+        exclude(\"temp/org/h2/jcr/*\").\n+        exclude(\"temp/org/h2/mode/*\").\n+        exclude(\"temp/org/h2/samples/*\").\n+        exclude(\"temp/org/h2/server/ftp/*\").\n+        exclude(\"temp/org/h2/test/*\").\n+        exclude(\"temp/org/h2/bnf/*\").\n+        exclude(\"temp/org/h2/fulltext/*\").\n+        exclude(\"temp/org/h2/jdbcx/*\").\n+        exclude(\"temp/org/h2/jmx/*\").\n+        exclude(\"temp/org/h2/server/*\").\n+        exclude(\"temp/org/h2/tools/*\").\n+        exclude(\"*.bat\").\n+        exclude(\"*.sh\").\n+        exclude(\"*.txt\").\n+        exclude(\"*.DS_Store\");\n+    files = excludeTestMetaInfFiles(files);\n+    files.add(new File(\"temp/org/h2/tools/DeleteDbFiles.class\"));\n+    files.add(new File(\"temp/org/h2/tools/CompressTool.class\"));\n+    jar(\"bin/h2small\" + getJarSuffix(), files, \"temp\");\n+  }\n \n-    /**\n-     * Just run the spellchecker.\n-     */\n-    @Description(summary = \"Run the spellchecker.\")\n-    public void spellcheck() {\n-        java(\"org.h2.build.doc.SpellChecker\", null);\n-    }\n+  /**\n+   * Create the file h2jaqu.jar. This only contains the JaQu (Java Query)\n+   * implementation. All other jar files do not include JaQu.\n+   */\n+  @Description(summary = \"Create jaqu.jar with only the Java Query implementation.\")\n+  public void jarJaqu() {\n+    compile(true, false, true);\n+    manifest(\"H2 JaQu\", \"\");\n+    FileList files = files(\"temp/org/h2/jaqu\");\n+    files.addAll(files(\"temp/META-INF/MANIFEST.MF\"));\n+    files.exclude(\"*.DS_Store\");\n+    files = excludeTestMetaInfFiles(files);\n+    jar(\"bin/h2jaqu\" + getJarSuffix(), files, \"temp\");\n+  }\n+\n+  /**\n+   * Create the Javadocs of the API (incl. the JDBC API) and tools.\n+   */\n+  @Description(summary = \"Create the API Javadocs (incl. JDBC API and tools).\")\n+  public void javadoc() {\n+    compileTools();\n+    delete(\"docs\");\n+    mkdir(\"docs/javadoc\");\n+    javadoc(\"-sourcepath\", \"src/main\", \"org.h2.jdbc\", \"org.h2.jdbcx\",\n+        \"org.h2.tools\", \"org.h2.api\", \"org.h2.engine\", \"org.h2.fulltext\",\n+        \"-classpath\",\n+        \"ext/lucene-core-3.6.2.jar\" +\n+            File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n+        \"-docletpath\", \"bin\" + File.pathSeparator + \"temp\",\n+        \"-doclet\", \"org.h2.build.doclet.Doclet\");\n+    copy(\"docs/javadoc\", files(\"src/docsrc/javadoc\"), \"src/docsrc/javadoc\");\n+  }\n+\n+  /**\n+   * Create the Javadocs of the implementation.\n+   */\n+  @Description(summary = \"Create the Javadocs of the implementation.\")\n+  public void javadocImpl() {\n+    compileTools();\n+    mkdir(\"docs/javadocImpl2\");\n+    javadoc(\"-sourcepath\", \"src/main\" +\n+            File.pathSeparator + \"src/test\" +\n+            File.pathSeparator + \"src/tools\",\n+        \"-noindex\",\n+        \"-tag\", \"h2.resource\",\n+        \"-d\", \"docs/javadocImpl2\",\n+        \"-classpath\", javaToolsJar +\n+            File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n+            File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n+            File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n+            File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n+            File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n+            File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n+        \"-subpackages\", \"org.h2\",\n+        \"-exclude\", \"org.h2.test.jaqu:org.h2.jaqu\");\n+\n+    mkdir(\"docs/javadocImpl3\");\n+    javadoc(\"-sourcepath\", \"src/main\",\n+        \"-noindex\",\n+        \"-tag\", \"h2.resource\",\n+        \"-d\", \"docs/javadocImpl3\",\n+        \"-classpath\", javaToolsJar +\n+            File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n+            File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n+            File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n+            File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n+            File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n+            File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n+        \"-subpackages\", \"org.h2.mvstore\",\n+        \"-exclude\", \"org.h2.mvstore.db\");\n+\n+    System.setProperty(\"h2.interfacesOnly\", \"false\");\n+    System.setProperty(\"h2.javadocDestDir\", \"docs/javadocImpl\");\n+    javadoc(\"-sourcepath\", \"src/main\" +\n+            File.pathSeparator + \"src/test\" +\n+            File.pathSeparator + \"src/tools\",\n+        \"-classpath\", javaToolsJar +\n+            File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n+            File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n+            File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n+            File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n+            File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n+            File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n+        \"-subpackages\", \"org.h2\",\n+        \"-exclude\", \"org.h2.test.jaqu:org.h2.jaqu\",\n+        \"-package\",\n+        \"-docletpath\", \"bin\" + File.pathSeparator + \"temp\",\n+        \"-doclet\", \"org.h2.build.doclet.Doclet\");\n+    copy(\"docs/javadocImpl\", files(\"src/docsrc/javadoc\"), \"src/docsrc/javadoc\");\n+  }\n+\n+  private static void manifest(String title, String mainClassName) {\n+    String manifest = new String(readFile(new File(\n+        \"src/main/META-INF/MANIFEST.MF\")));\n+    manifest = replaceAll(manifest, \"${title}\", title);\n+    manifest = replaceAll(manifest, \"${version}\", getVersion());\n+    manifest = replaceAll(manifest, \"${buildJdk}\", getJavaSpecVersion());\n+    String createdBy = System.getProperty(\"java.runtime.version\") +\n+        \" (\" + System.getProperty(\"java.vm.vendor\") + \")\";\n+    manifest = replaceAll(manifest, \"${createdBy}\", createdBy);\n+    String mainClassTag = manifest == null ? \"\" : \"Main-Class: \" + mainClassName;\n+    manifest = replaceAll(manifest, \"${mainClassTag}\", mainClassTag);\n+    writeFile(new File(\"temp/META-INF/MANIFEST.MF\"), manifest.getBytes());\n+  }\n+\n+  private static void manifestMVStore() {\n+    String manifest = new String(readFile(new File(\n+        \"src/installer/mvstore/MANIFEST.MF\")));\n+    manifest = replaceAll(manifest, \"${version}\", getVersion());\n+    manifest = replaceAll(manifest, \"${buildJdk}\", getJavaSpecVersion());\n+    String createdBy = System.getProperty(\"java.runtime.version\") +\n+        \" (\" + System.getProperty(\"java.vm.vendor\") + \")\";\n+    manifest = replaceAll(manifest, \"${createdBy}\", createdBy);\n+    mkdir(\"temp/META-INF\");\n+    writeFile(new File(\"temp/META-INF/MANIFEST.MF\"), manifest.getBytes());\n+  }\n+\n+  /**\n+   * This will build a release of the H2 .jar files and upload it to\n+   * file:///data/h2database/m2-repo. This is only required when\n+   * a new H2 version is made.\n+   */\n+  @Description(summary = \"Build H2 release jars and upload to file:///data/h2database/m2-repo.\")\n+  public void mavenDeployCentral() {\n+    // generate and deploy h2*-sources.jar file\n+    FileList files = files(\"src/main\");\n+    copy(\"docs\", files, \"src/main\");\n+    files = files(\"docs\").keep(\"docs/org/*\").keep(\"*.java\");\n+    files.addAll(files(\"docs\").keep(\"docs/META-INF/*\"));\n+    String manifest = new String(readFile(new File(\n+        \"src/installer/source-manifest.mf\")));\n+    manifest = replaceAll(manifest, \"${version}\", getVersion());\n+    writeFile(new File(\"docs/META-INF/MANIFEST.MF\"), manifest.getBytes());\n+    jar(\"docs/h2-\" + getVersion() + \"-sources.jar\", files, \"docs\");\n+    delete(\"docs/org\");\n+    delete(\"docs/META-INF\");\n+    // the option -DgeneratePom=false doesn't work with some versions of\n+    // Maven because of bug http://jira.codehaus.org/browse/MDEPLOY-84\n+    // as a workaround we generate the pom, but overwrite it later on\n+    // (that's why the regular jar is created at the very end)\n+    execScript(\"mvn\", args(\n+        \"deploy:deploy-file\",\n+        \"-Dfile=docs/h2-\" + getVersion() + \"-sources.jar\",\n+        \"-Durl=file:///data/h2database/m2-repo\",\n+        \"-Dpackaging=jar\",\n+        \"-Dclassifier=sources\",\n+        \"-Dversion=\" + getVersion(),\n+        \"-DartifactId=h2\",\n+        \"-DgroupId=com.h2database\"\n+        // ,\"-DgeneratePom=false\"\n+    ));\n+\n+    // generate and deploy the h2*-javadoc.jar file\n+    javadocImpl();\n+    files = files(\"docs/javadocImpl2\");\n+    jar(\"docs/h2-\" + getVersion() + \"-javadoc.jar\", files, \"docs/javadocImpl2\");\n+    execScript(\"mvn\", args(\n+        \"deploy:deploy-file\",\n+        \"-Dfile=docs/h2-\" + getVersion() + \"-javadoc.jar\",\n+        \"-Durl=file:///data/h2database/m2-repo\",\n+        \"-Dpackaging=jar\",\n+        \"-Dclassifier=javadoc\",\n+        \"-Dversion=\" + getVersion(),\n+        \"-DartifactId=h2\",\n+        \"-DgroupId=com.h2database\"\n+        // ,\"-DgeneratePom=false\"\n+    ));\n+\n+    // generate and deploy the h2*.jar file\n+    jar();\n+    String pom = new String(readFile(new File(\"src/installer/pom-template.xml\")));\n+    pom = replaceAll(pom, \"@version@\", getVersion());\n+    writeFile(new File(\"bin/pom.xml\"), pom.getBytes());\n+    execScript(\"mvn\", args(\n+        \"deploy:deploy-file\",\n+        \"-Dfile=bin/h2\" + getJarSuffix(),\n+        \"-Durl=file:///data/h2database/m2-repo\",\n+        \"-Dpackaging=jar\",\n+        \"-Dversion=\" + getVersion(),\n+        \"-DpomFile=bin/pom.xml\",\n+        \"-DartifactId=h2\",\n+        \"-DgroupId=com.h2database\"));\n+\n+    // generate the h2-mvstore-*-sources.jar file\n+    files = files(\"src/main\");\n+    copy(\"docs\", files, \"src/main\");\n+    files = files(\"docs\").keep(\"docs/org/h2/mvstore/*\").\n+        exclude(\"docs/org/h2/mvstore/db/*\").\n+        keep(\"*.java\");\n+    files.addAll(files(\"docs\").keep(\"docs/META-INF/*\"));\n+    manifest = new String(readFile(new File(\n+        \"src/installer/source-manifest.mf\")));\n+    manifest = replaceAll(manifest, \"${version}\", getVersion());\n+    writeFile(new File(\"docs/META-INF/MANIFEST.MF\"), manifest.getBytes());\n+    jar(\"docs/h2-mvstore-\" + getVersion() + \"-sources.jar\", files, \"docs\");\n+    delete(\"docs/org\");\n+    delete(\"docs/META-INF\");\n+\n+    // deploy the h2-mvstore-*-source.jar file\n+    execScript(\"mvn\", args(\n+        \"deploy:deploy-file\",\n+        \"-Dfile=docs/h2-mvstore-\" + getVersion() + \"-sources.jar\",\n+        \"-Durl=file:///data/h2database/m2-repo\",\n+        \"-Dpackaging=jar\",\n+        \"-Dclassifier=sources\",\n+        \"-Dversion=\" + getVersion(),\n+        \"-DartifactId=h2-mvstore\",\n+        \"-DgroupId=com.h2database\"\n+        // ,\"-DgeneratePom=false\"\n+    ));\n+\n+    // generate and deploy the h2-mvstore-*-javadoc.jar file\n+    javadocImpl();\n+    files = files(\"docs/javadocImpl3\");\n+    jar(\"docs/h2-mvstore-\" + getVersion() + \"-javadoc.jar\", files, \"docs/javadocImpl3\");\n+    execScript(\"mvn\", args(\n+        \"deploy:deploy-file\",\n+        \"-Dfile=docs/h2-mvstore-\" + getVersion() + \"-javadoc.jar\",\n+        \"-Durl=file:///data/h2database/m2-repo\",\n+        \"-Dpackaging=jar\",\n+        \"-Dclassifier=javadoc\",\n+        \"-Dversion=\" + getVersion(),\n+        \"-DartifactId=h2-mvstore\",\n+        \"-DgroupId=com.h2database\"\n+        // ,\"-DgeneratePom=false\"\n+    ));\n \n-    /**\n-     * Compile and run all tests. This does not include the compile step.\n-     */\n-    @Description(summary = \"Compile and run all tests (excluding the compile step).\")\n-    public void test() {\n-        test(false);\n+    // generate and deploy the h2-mvstore-*.jar file\n+    jarMVStore();\n+    pom = new String(readFile(new File(\"src/installer/pom-mvstore-template.xml\")));\n+    pom = replaceAll(pom, \"@version@\", getVersion());\n+    writeFile(new File(\"bin/pom.xml\"), pom.getBytes());\n+    execScript(\"mvn\", args(\n+        \"deploy:deploy-file\",\n+        \"-Dfile=bin/h2-mvstore\" + getJarSuffix(),\n+        \"-Durl=file:///data/h2database/m2-repo\",\n+        \"-Dpackaging=jar\",\n+        \"-Dversion=\" + getVersion(),\n+        \"-DpomFile=bin/pom.xml\",\n+        \"-DartifactId=h2-mvstore\",\n+        \"-DgroupId=com.h2database\"));\n+  }\n+\n+  /**\n+   * This will build a 'snapshot' H2 .jar file and upload it to the local\n+   * Maven 2 repository.\n+   */\n+  @Description(summary = \"Build a snapshot H2 jar and upload to local Maven 2 repo.\")\n+  public void mavenInstallLocal() {\n+    // MVStore\n+    jarMVStore();\n+    String pom = new String(readFile(new File(\"src/installer/pom-mvstore-template.xml\")));\n+    pom = replaceAll(pom, \"@version@\", \"1.0-SNAPSHOT\");\n+    writeFile(new File(\"bin/pom.xml\"), pom.getBytes());\n+    execScript(\"mvn\", args(\n+        \"install:install-file\",\n+        \"-Dversion=1.0-SNAPSHOT\",\n+        \"-Dfile=bin/h2-mvstore\" + getJarSuffix(),\n+        \"-Dpackaging=jar\",\n+        \"-DpomFile=bin/pom.xml\",\n+        \"-DartifactId=h2-mvstore\",\n+        \"-DgroupId=com.h2database\"));\n+    // database\n+    jar();\n+    pom = new String(readFile(new File(\"src/installer/pom-template.xml\")));\n+    pom = replaceAll(pom, \"@version@\", \"1.0-SNAPSHOT\");\n+    writeFile(new File(\"bin/pom.xml\"), pom.getBytes());\n+    execScript(\"mvn\", args(\n+        \"install:install-file\",\n+        \"-Dversion=1.0-SNAPSHOT\",\n+        \"-Dfile=bin/h2\" + getJarSuffix(),\n+        \"-Dpackaging=jar\",\n+        \"-DpomFile=bin/pom.xml\",\n+        \"-DartifactId=h2\",\n+        \"-DgroupId=com.h2database\"));\n+  }\n+\n+  /**\n+   * Build the jar file without downloading any files over the network. If the\n+   * required files are missing, they are are listed, and the jar file is not\n+   * built.\n+   */\n+  @Description(summary = \"Build H2 jar avoiding downloads (list missing files).\")\n+  public void offline() {\n+    downloadOrVerify(true);\n+    if (filesMissing) {\n+      println(\"Required files are missing\");\n+      println(\"Both Lucene 2 and 3 are supported using -Dlucene=x (x=2 or 3)\");\n+    } else {\n+      jar();\n     }\n+  }\n \n-    /**\n-     * Compile and run all fast tests. This does not include the compile step.\n-     */\n-    @Description(summary = \"Compile and run all fast tests (excl. the compile step).\")\n-    public void testFast() {\n-        test(true);\n+  private void resources(boolean clientOnly, boolean basicOnly) {\n+    if (!clientOnly) {\n+      java(\"org.h2.build.doc.GenerateHelp\", null);\n+      javadoc(\"-sourcepath\", \"src/main\", \"org.h2.tools\", \"org.h2.jmx\",\n+          \"-classpath\",\n+          \"ext/lucene-core-3.6.2.jar\" +\n+              File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n+          \"-docletpath\", \"bin\" + File.pathSeparator + \"temp\",\n+          \"-doclet\", \"org.h2.build.doclet.ResourceDoclet\");\n+    }\n+    FileList files = files(\"src/main\").\n+        exclude(\"*.MF\").\n+        exclude(\"*.java\").\n+        exclude(\"*/package.html\").\n+        exclude(\"*/java.sql.Driver\").\n+        exclude(\"*.DS_Store\");\n+    if (basicOnly) {\n+      files = files.keep(\"src/main/org/h2/res/_messages_en.*\");\n+    }\n+    if (clientOnly) {\n+      files = files.exclude(\"src/main/org/h2/res/javadoc.properties\");\n+      files = files.exclude(\"src/main/org/h2/server/*\");\n     }\n+    zip(\"temp/org/h2/util/data.zip\", files, \"src/main\", true, false);\n+  }\n \n-    private void test(boolean fast) {\n-        downloadTest();\n-        String cp = \"temp\" + File.pathSeparator + \"bin\" +\n-                File.pathSeparator + \"ext/postgresql-8.3-603.jdbc3.jar\" +\n-                File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n-                File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n-                File.pathSeparator + \"ext/h2mig_pagestore_addon.jar\" +\n-                File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n-                File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n-                File.pathSeparator + \"ext/jts-core-1.14.0.jar\" +\n-                File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n-                File.pathSeparator + \"ext/slf4j-nop-1.6.0.jar\" +\n-                File.pathSeparator + javaToolsJar;\n-        if (fast) {\n-            execJava(args(\n-                    \"-Xmx128m\",\n-                    \"-cp\", cp,\n-                    \"org.h2.test.TestAll\", \"fast\"));\n-        } else {\n-            execJava(args(\n-                    \"-Xmx128m\",\n-                    \"-cp\", cp,\n-                    \"org.h2.test.TestAll\"));\n-        }\n+  /**\n+   * Just run the spellchecker.\n+   */\n+  @Description(summary = \"Run the spellchecker.\")\n+  public void spellcheck() {\n+    java(\"org.h2.build.doc.SpellChecker\", null);\n+  }\n+\n+  /**\n+   * Compile and run all tests. This does not include the compile step.\n+   */\n+  @Description(summary = \"Compile and run all tests (excluding the compile step).\")\n+  public void test() {\n+    test(false);\n+  }\n+\n+  /**\n+   * Compile and run all fast tests. This does not include the compile step.\n+   */\n+  @Description(summary = \"Compile and run all fast tests (excl. the compile step).\")\n+  public void testFast() {\n+    test(true);\n+  }\n+\n+  private void test(boolean fast) {\n+    downloadTest();\n+    String cp = \"temp\" + File.pathSeparator + \"bin\" +\n+        File.pathSeparator + \"ext/postgresql-8.3-603.jdbc3.jar\" +\n+        File.pathSeparator + \"ext/servlet-api-3.0.1.jar\" +\n+        File.pathSeparator + \"ext/lucene-core-3.6.2.jar\" +\n+        File.pathSeparator + \"ext/h2mig_pagestore_addon.jar\" +\n+        File.pathSeparator + \"ext/org.osgi.core-4.2.0.jar\" +\n+        File.pathSeparator + \"ext/org.osgi.enterprise-4.2.0.jar\" +\n+        File.pathSeparator + \"ext/jts-core-1.14.0.jar\" +\n+        File.pathSeparator + \"ext/slf4j-api-1.6.0.jar\" +\n+        File.pathSeparator + \"ext/slf4j-nop-1.6.0.jar\" +\n+        File.pathSeparator + javaToolsJar;\n+    if (fast) {\n+      execJava(args(\n+          \"-Xmx128m\",\n+          \"-cp\", cp,\n+          \"org.h2.test.TestAll\", \"fast\"));\n+    } else {\n+      execJava(args(\n+          \"-Xmx128m\",\n+          \"-cp\", cp,\n+          \"org.h2.test.TestAll\"));\n     }\n+  }\n \n-    /**\n-     * Print the system properties.\n-     */\n-    @Description(summary = \"Print the system properties.\")\n-    public void testSysProperties() {\n-        System.out.println(\"environment settings:\");\n-        for (Entry<Object, Object> e : new TreeMap<Object, Object>(\n-                System.getProperties()).entrySet()) {\n-            System.out.println(e);\n-        }\n+  /**\n+   * Print the system properties.\n+   */\n+  @Description(summary = \"Print the system properties.\")\n+  public void testSysProperties() {\n+    System.out.println(\"environment settings:\");\n+    for (Entry<Object, Object> e : new TreeMap<Object, Object>(\n+        System.getProperties()).entrySet()) {\n+      System.out.println(e);\n     }\n+  }\n \n-    /**\n-     * Test the local network of this machine.\n-     */\n-    @Description(summary = \"Test the local network of this machine.\")\n-    public void testNetwork() {\n-        try {\n-            long start = System.currentTimeMillis();\n-            System.out.println(\"localhost:\");\n-            System.out.println(\"  \" + InetAddress.getByName(\"localhost\"));\n-            for (InetAddress address : InetAddress.getAllByName(\"localhost\")) {\n-                System.out.println(\"  \" + address);\n-            }\n-            InetAddress localhost = InetAddress.getLocalHost();\n-            System.out.println(\"getLocalHost:\" + localhost);\n-            for (InetAddress address : InetAddress.getAllByName(localhost\n-                    .getHostAddress())) {\n-                System.out.println(\"  \" + address);\n-            }\n-            InetAddress address = InetAddress.getByName(localhost.getHostAddress());\n-            System.out.println(\"byName:\" + address);\n-            ServerSocket serverSocket;\n-            try {\n-                serverSocket = new ServerSocket(0);\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-                serverSocket = new ServerSocket(0);\n-            }\n-            System.out.println(serverSocket);\n-            int port = serverSocket.getLocalPort();\n-            final ServerSocket accept = serverSocket;\n-            start = System.currentTimeMillis();\n-            Thread thread = new Thread() {\n-                @Override\n-                public void run() {\n-                    try {\n-                        System.out.println(\"server accepting\");\n-                        Socket s = accept.accept();\n-                        Thread.sleep(100);\n-                        System.out.println(\"server accepted:\" + s);\n-                        System.out.println(\"server read:\" + s.getInputStream().read());\n-                        Thread.sleep(200);\n-                        s.getOutputStream().write(234);\n-                        Thread.sleep(100);\n-                        System.out.println(\"server closing\");\n-                        s.close();\n-                        System.out.println(\"server done\");\n-                    } catch (Throwable t) {\n-                        t.printStackTrace();\n-                    }\n-                }\n-            };\n-            thread.start();\n-            System.out.println(\"time: \" + (System.currentTimeMillis() - start));\n-            Thread.sleep(1000);\n-            start = System.currentTimeMillis();\n-            final Socket socket = new Socket();\n-            socket.setSoTimeout(2000);\n-            final InetSocketAddress socketAddress = new InetSocketAddress(address, port);\n-            System.out.println(\"client:\" + socketAddress);\n+  /**\n+   * Test the local network of this machine.\n+   */\n+  @Description(summary = \"Test the local network of this machine.\")\n+  public void testNetwork() {\n+    try {\n+      long start = System.currentTimeMillis();\n+      System.out.println(\"localhost:\");\n+      System.out.println(\"  \" + InetAddress.getByName(\"localhost\"));\n+      for (InetAddress address : InetAddress.getAllByName(\"localhost\")) {\n+        System.out.println(\"  \" + address);\n+      }\n+      InetAddress localhost = InetAddress.getLocalHost();\n+      System.out.println(\"getLocalHost:\" + localhost);\n+      for (InetAddress address : InetAddress.getAllByName(localhost\n+          .getHostAddress())) {\n+        System.out.println(\"  \" + address);\n+      }\n+      InetAddress address = InetAddress.getByName(localhost.getHostAddress());\n+      System.out.println(\"byName:\" + address);\n+      ServerSocket serverSocket;\n+      try {\n+        serverSocket = new ServerSocket(0);\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+        serverSocket = new ServerSocket(0);\n+      }\n+      System.out.println(serverSocket);\n+      int port = serverSocket.getLocalPort();\n+      final ServerSocket accept = serverSocket;\n+      start = System.currentTimeMillis();\n+      Thread thread = new Thread() {\n+        @Override\n+        public void run() {\n+          try {\n+            System.out.println(\"server accepting\");\n+            Socket s = accept.accept();\n+            Thread.sleep(100);\n+            System.out.println(\"server accepted:\" + s);\n+            System.out.println(\"server read:\" + s.getInputStream().read());\n+            Thread.sleep(200);\n+            s.getOutputStream().write(234);\n+            Thread.sleep(100);\n+            System.out.println(\"server closing\");\n+            s.close();\n+            System.out.println(\"server done\");\n+          } catch (Throwable t) {\n+            t.printStackTrace();\n+          }\n+        }\n+      };\n+      thread.start();\n+      System.out.println(\"time: \" + (System.currentTimeMillis() - start));\n+      Thread.sleep(1000);\n+      start = System.currentTimeMillis();\n+      final Socket socket = new Socket();\n+      socket.setSoTimeout(2000);\n+      final InetSocketAddress socketAddress = new InetSocketAddress(address, port);\n+      System.out.println(\"client:\" + socketAddress);\n+      try {\n+        Thread t = new Thread() {\n+          @Override\n+          public void run() {\n             try {\n-                Thread t = new Thread() {\n-                    @Override\n-                    public void run() {\n-                        try {\n-                            socket.connect(socketAddress, 2000);\n-                        } catch (IOException e) {\n-                            e.printStackTrace();\n-                        }\n-                    }\n-                };\n-                t.start();\n-                t.join(5000);\n-                if (!socket.isConnected()) {\n-                    final InetSocketAddress localhostAddress = new InetSocketAddress(\n-                            \"localhost\", port);\n-                    System.out.println(\"not connected, trying localhost:\"\n-                            + socketAddress);\n-                    socket.connect(localhostAddress, 2000);\n-                }\n-                System.out.println(\"time: \" + (System.currentTimeMillis() - start));\n-                Thread.sleep(200);\n-                start = System.currentTimeMillis();\n-                System.out.println(\"client:\" + socket.toString());\n-                socket.getOutputStream().write(123);\n-                System.out.println(\"time: \" + (System.currentTimeMillis() - start));\n-                Thread.sleep(100);\n-                start = System.currentTimeMillis();\n-                System.out.println(\"client read:\" + socket.getInputStream().read());\n-                socket.close();\n-            } catch (Throwable t) {\n-                t.printStackTrace();\n+              socket.connect(socketAddress, 2000);\n+            } catch (IOException e) {\n+              e.printStackTrace();\n             }\n-            thread.join(5000);\n-            System.out.println(\"time: \" + (System.currentTimeMillis() - start));\n-            if (thread.isAlive()) {\n-                System.out.println(\"thread is still alive, interrupting\");\n-                thread.interrupt();\n-            }\n-            Thread.sleep(100);\n-            System.out.println(\"done\");\n-        } catch (Exception e) {\n-            e.printStackTrace();\n+          }\n+        };\n+        t.start();\n+        t.join(5000);\n+        if (!socket.isConnected()) {\n+          final InetSocketAddress localhostAddress = new InetSocketAddress(\n+              \"localhost\", port);\n+          System.out.println(\"not connected, trying localhost:\"\n+              + socketAddress);\n+          socket.connect(localhostAddress, 2000);\n         }\n+        System.out.println(\"time: \" + (System.currentTimeMillis() - start));\n+        Thread.sleep(200);\n+        start = System.currentTimeMillis();\n+        System.out.println(\"client:\" + socket.toString());\n+        socket.getOutputStream().write(123);\n+        System.out.println(\"time: \" + (System.currentTimeMillis() - start));\n+        Thread.sleep(100);\n+        start = System.currentTimeMillis();\n+        System.out.println(\"client read:\" + socket.getInputStream().read());\n+        socket.close();\n+      } catch (Throwable t) {\n+        t.printStackTrace();\n+      }\n+      thread.join(5000);\n+      System.out.println(\"time: \" + (System.currentTimeMillis() - start));\n+      if (thread.isAlive()) {\n+        System.out.println(\"thread is still alive, interrupting\");\n+        thread.interrupt();\n+      }\n+      Thread.sleep(100);\n+      System.out.println(\"done\");\n+    } catch (Exception e) {\n+      e.printStackTrace();\n     }\n+  }\n \n-    /**\n-     * This build target is used for the automated build. It copies the result\n-     * of the automated build (including test results, newsfeed, code coverage)\n-     * to the public web site.\n-     */\n-    @Description(summary = \"Upload all build results to the public website.\")\n-    public void uploadBuild() {\n-        String password = System.getProperty(\"h2.ftpPassword\");\n-        if (password == null) {\n-            throw new RuntimeException(\"h2.ftpPassword not set\");\n-        }\n-        downloadTest();\n-        mkdir(\"temp\");\n-        FileList files = files(\"src/tools\").keep(\"*/UploadBuild.java\");\n-        StringList args = args(\"-d\", \"temp\", \"-sourcepath\", \"src/tools\" +\n-                File.pathSeparator + \"src/test\" + File.pathSeparator + \"src/main\");\n-        String version = getTargetJavaVersion();\n-        if (version != null) {\n-            args = args.plus(\"-target\", version, \"-source\", version);\n-        }\n-        javac(args, files);\n-        String cp = \"bin\" + File.pathSeparator + \"temp\" +\n-                File.pathSeparator + \"ext/h2mig_pagestore_addon.jar\";\n-        execJava(args(\"-Xmx512m\", \"-cp\", cp,\n-                \"-Dh2.ftpPassword=\" + password,\n-                \"org.h2.build.doc.UploadBuild\"));\n+  /**\n+   * This build target is used for the automated build. It copies the result\n+   * of the automated build (including test results, newsfeed, code coverage)\n+   * to the public web site.\n+   */\n+  @Description(summary = \"Upload all build results to the public website.\")\n+  public void uploadBuild() {\n+    String password = System.getProperty(\"h2.ftpPassword\");\n+    if (password == null) {\n+      throw new RuntimeException(\"h2.ftpPassword not set\");\n     }\n-\n-    /**\n-     * Build the h2console.war file.\n-     */\n-    @Description(summary = \"Build the h2console.war file.\")\n-    public void warConsole() {\n-        jar();\n-        copy(\"temp/WEB-INF\", files(\"src/tools/WEB-INF/web.xml\"), \"src/tools/WEB-INF\");\n-        copy(\"temp\", files(\"src/tools/WEB-INF/console.html\"), \"src/tools/WEB-INF\");\n-        copy(\"temp/WEB-INF/lib\", files(\"bin/h2\" + getJarSuffix()), \"bin\");\n-        FileList files = files(\"temp\").exclude(\"temp/org*\").exclude(\"temp/META-INF*\");\n-        files.exclude(\"*.DS_Store\");\n-        jar(\"bin/h2console.war\", files, \"temp\");\n+    downloadTest();\n+    mkdir(\"temp\");\n+    FileList files = files(\"src/tools\").keep(\"*/UploadBuild.java\");\n+    StringList args = args(\"-d\", \"temp\", \"-sourcepath\", \"src/tools\" +\n+        File.pathSeparator + \"src/test\" + File.pathSeparator + \"src/main\");\n+    String version = getTargetJavaVersion();\n+    if (version != null) {\n+      args = args.plus(\"-target\", version, \"-source\", version);\n     }\n+    javac(args, files);\n+    String cp = \"bin\" + File.pathSeparator + \"temp\" +\n+        File.pathSeparator + \"ext/h2mig_pagestore_addon.jar\";\n+    execJava(args(\"-Xmx512m\", \"-cp\", cp,\n+        \"-Dh2.ftpPassword=\" + password,\n+        \"org.h2.build.doc.UploadBuild\"));\n+  }\n \n-    @Override\n-    protected String getLocalMavenDir() {\n-        String userHome = System.getProperty(\"user.home\", \"\");\n-        File file = new File(userHome, \".m2/settings.xml\");\n-        if (!file.exists()) {\n-            return super.getLocalMavenDir();\n-        }\n-        XMLParser p = new XMLParser(new String(BuildBase.readFile(file)));\n-        HashMap<String, String> prop = new HashMap<String, String>();\n-        for (String name = \"\"; p.hasNext();) {\n-            int event = p.next();\n-            if (event == XMLParser.START_ELEMENT) {\n-                name += \"/\" + p.getName();\n-            } else if (event == XMLParser.END_ELEMENT) {\n-                name = name.substring(0, name.lastIndexOf('/'));\n-            } else if (event == XMLParser.CHARACTERS) {\n-                String text = p.getText().trim();\n-                if (text.length() > 0) {\n-                    prop.put(name, text);\n-                }\n-            }\n-        }\n-        String local = prop.get(\"/settings/localRepository\");\n-        if (local == null) {\n-            local = \"${user.home}/.m2/repository\";\n+  /**\n+   * Build the h2console.war file.\n+   */\n+  @Description(summary = \"Build the h2console.war file.\")\n+  public void warConsole() {\n+    jar();\n+    copy(\"temp/WEB-INF\", files(\"src/tools/WEB-INF/web.xml\"), \"src/tools/WEB-INF\");\n+    copy(\"temp\", files(\"src/tools/WEB-INF/console.html\"), \"src/tools/WEB-INF\");\n+    copy(\"temp/WEB-INF/lib\", files(\"bin/h2\" + getJarSuffix()), \"bin\");\n+    FileList files = files(\"temp\").exclude(\"temp/org*\").exclude(\"temp/META-INF*\");\n+    files.exclude(\"*.DS_Store\");\n+    jar(\"bin/h2console.war\", files, \"temp\");\n+  }\n+\n+  @Override\n+  protected String getLocalMavenDir() {\n+    String userHome = System.getProperty(\"user.home\", \"\");\n+    File file = new File(userHome, \".m2/settings.xml\");\n+    if (!file.exists()) {\n+      return super.getLocalMavenDir();\n+    }\n+    XMLParser p = new XMLParser(new String(BuildBase.readFile(file)));\n+    HashMap<String, String> prop = new HashMap<String, String>();\n+    for (String name = \"\"; p.hasNext(); ) {\n+      int event = p.next();\n+      if (event == XMLParser.START_ELEMENT) {\n+        name += \"/\" + p.getName();\n+      } else if (event == XMLParser.END_ELEMENT) {\n+        name = name.substring(0, name.lastIndexOf('/'));\n+      } else if (event == XMLParser.CHARACTERS) {\n+        String text = p.getText().trim();\n+        if (text.length() > 0) {\n+          prop.put(name, text);\n         }\n-        local = replaceAll(local, \"${user.home}\", userHome);\n-        return local;\n+      }\n+    }\n+    String local = prop.get(\"/settings/localRepository\");\n+    if (local == null) {\n+      local = \"${user.home}/.m2/repository\";\n     }\n+    local = replaceAll(local, \"${user.home}\", userHome);\n+    return local;\n+  }\n \n }\n",
            "diff_size": 1531
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/63/Build.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/63/Build.java\nindex f780d0f4e00..01b33ee0cd7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/63/Build.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/63/Build.java\n@@ -238,7 +238,8 @@ public class Build extends BuildBase {\n         if (!clientOnly) {\n             files = files(\"src/test\");\n             files.addAll(files(\"src/tools\"));\n-            files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\"); //we don't use Junit for this test framework\n+            files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\");\n+//we don't use Junit for this test framework\n             args = args(\"-Xlint:unchecked\", \"-Xlint:deprecation\",\n                     \"-d\", \"temp\", \"-sourcepath\", \"src/test\" + File.pathSeparator + \"src/tools\",\n                     \"-classpath\", classpath);\n@@ -635,8 +636,7 @@ public class Build extends BuildBase {\n                 File.pathSeparator + \"ext/jts-core-1.14.0.jar\",\n                 \"-subpackages\", \"org.h2.mvstore\",\n                 \"-exclude\", \"org.h2.mvstore.db\");\n-\n-        System.setProperty(\"h2.interfacesOnly\", \"false\");\n+System.setProperty(\"h2.interfacesOnly\", \"false\");\n         System.setProperty(\"h2.javadocDestDir\", \"docs/javadocImpl\");\n         javadoc(\"-sourcepath\", \"src/main\" +\n                 File.pathSeparator + \"src/test\" +\n@@ -1123,4 +1123,4 @@ public class Build extends BuildBase {\n         return local;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/63/Build.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/63/Build.java\nindex f780d0f4e00..074c53fcd59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/63/Build.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/63/Build.java\n@@ -238,8 +238,9 @@ public class Build extends BuildBase {\n         if (!clientOnly) {\n             files = files(\"src/test\");\n             files.addAll(files(\"src/tools\"));\n-            files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\"); //we don't use Junit for this test framework\n-            args = args(\"-Xlint:unchecked\", \"-Xlint:deprecation\",\n+            files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\");\n+            //we don't use Junit for this test framework\n+             args = args(\"-Xlint:unchecked\", \"-Xlint:deprecation\",\n                     \"-d\", \"temp\", \"-sourcepath\", \"src/test\" + File.pathSeparator + \"src/tools\",\n                     \"-classpath\", classpath);\n             if (version != null) {\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/63/Build.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/63/Build.java\nindex f780d0f4e00..074c53fcd59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/63/Build.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/63/Build.java\n@@ -238,8 +238,9 @@ public class Build extends BuildBase {\n         if (!clientOnly) {\n             files = files(\"src/test\");\n             files.addAll(files(\"src/tools\"));\n-            files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\"); //we don't use Junit for this test framework\n-            args = args(\"-Xlint:unchecked\", \"-Xlint:deprecation\",\n+            files = files.exclude(\"src/test/org/h2/test/TestAllJunit.java\");\n+            //we don't use Junit for this test framework\n+             args = args(\"-Xlint:unchecked\", \"-Xlint:deprecation\",\n                     \"-d\", \"temp\", \"-sourcepath\", \"src/test\" + File.pathSeparator + \"src/tools\",\n                     \"-classpath\", classpath);\n             if (version != null) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}