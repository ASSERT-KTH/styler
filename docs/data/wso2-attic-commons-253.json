{
    "project_name": "wso2-attic-commons",
    "error_id": "253",
    "information": {
        "errors": [
            {
                "line": "240",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        Query q = getSession().createFilter(_scope.getVariables(), \"where this.scope=?\");\n        q.setEntity(0, _scope);\n        return CollectionsX.transform(new LinkedList<XmlDataDAO>(), (Collection<HXmlData>)q.list(), new UnaryFunction<HXmlData,XmlDataDAO>() {\n            public XmlDataDAO apply(HXmlData x) {\n                return new XmlDataDaoImpl(_sm,x);\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/253/ScopeDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/253/ScopeDaoImpl.java\nindex df63239d4da..08929fc5286 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/253/ScopeDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/253/ScopeDaoImpl.java\n@@ -237,7 +237,8 @@ public class ScopeDaoImpl extends HibernateDao implements ScopeDAO {\n         entering(\"ScopeDaoImpl.getVariables\");\n         Query q = getSession().createFilter(_scope.getVariables(), \"where this.scope=?\");\n         q.setEntity(0, _scope);\n-        return CollectionsX.transform(new LinkedList<XmlDataDAO>(), (Collection<HXmlData>)q.list(), new UnaryFunction<HXmlData,XmlDataDAO>() {\n+        return CollectionsX.transform(new LinkedList<XmlDataDAO>(), (Collection<HXmlData>)\n+            q.list(), new UnaryFunction<HXmlData,XmlDataDAO>() {\n             public XmlDataDAO apply(HXmlData x) {\n                 return new XmlDataDaoImpl(_sm,x);\n             }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/253/ScopeDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/253/ScopeDaoImpl.java\nindex df63239d4da..78c04bf4d6b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/253/ScopeDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/253/ScopeDaoImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.daohib.bpel;\n \n import java.util.ArrayList;\n@@ -53,219 +54,229 @@ import org.hibernate.criterion.Restrictions;\n public class ScopeDaoImpl extends HibernateDao implements ScopeDAO {\n \n \n-    private static final String QRY_VARIABLE = \"from \" + HXmlData.class.getName() +\n-            \" as x where x.name = ? and x.scope.id = ?\";\n+  private static final String QRY_VARIABLE = \"from \" + HXmlData.class.getName() +\n+    \" as x where x.name = ? and x.scope.id = ?\";\n \n-    private static final String QRY_CSET = \"from \" + HCorrelationSet.class.getName() +\n-            \" as c where c.name = ? and c.scope.id = ?\";\n+  private static final String QRY_CSET = \"from \" + HCorrelationSet.class.getName() +\n+    \" as c where c.name = ? and c.scope.id = ?\";\n \n-    private static final String QRY_SCOPE_EPR = \"from \" + HPartnerLink.class.getName() +\n-            \" as e where e.modelId = ? and e.scope = ?\";\n+  private static final String QRY_SCOPE_EPR = \"from \" + HPartnerLink.class.getName() +\n+    \" as e where e.modelId = ? and e.scope = ?\";\n \n-    private HScope _scope;\n+  private HScope _scope;\n \n-    private HashMap<String,XmlDataDAO> _variables = new HashMap<String,XmlDataDAO>();\n+  private HashMap<String, XmlDataDAO> _variables = new HashMap<String, XmlDataDAO>();\n \n-    public ScopeDaoImpl(SessionManager sm, HScope scope) {\n-        super(sm, scope);\n-        entering(\"ScopeDaoImpl.ScopeDaoImpl\");\n-        _scope = scope;\n-    }\n+  public ScopeDaoImpl(SessionManager sm, HScope scope) {\n+    super(sm, scope);\n+    entering(\"ScopeDaoImpl.ScopeDaoImpl\");\n+    _scope = scope;\n+  }\n \n-    /**\n-     * @see org.apache.ode.bpel.dao.ScopeDAO#getCorrelationSet(java.lang.String)\n-     */\n-    public CorrelationSetDAO getCorrelationSet(String corrSetName) {\n-        entering(\"ScopeDaoImpl.getCorrelationSet\");\n-        Query qry = getSession().createQuery(QRY_CSET);\n-        qry.setString(0,corrSetName);\n-        qry.setLong(1,_scope.getId());\n-        HCorrelationSet cs;\n-        List res = qry.list();\n-\n-        if(res.size() == 0){\n-            // if it doesn't exist, we make it\n-            cs = new HCorrelationSet(_scope, corrSetName);\n+  /**\n+   * @see org.apache.ode.bpel.dao.ScopeDAO#getCorrelationSet(java.lang.String)\n+   */\n+  public CorrelationSetDAO getCorrelationSet(String corrSetName) {\n+    entering(\"ScopeDaoImpl.getCorrelationSet\");\n+    Query qry = getSession().createQuery(QRY_CSET);\n+    qry.setString(0, corrSetName);\n+    qry.setLong(1, _scope.getId());\n+    HCorrelationSet cs;\n+    List res = qry.list();\n+\n+    if (res.size() == 0) {\n+      // if it doesn't exist, we make it\n+      cs = new HCorrelationSet(_scope, corrSetName);\n //            _scope.addCorrelationSet(cs);\n-            getSession().save(cs);\n-        } else {\n-            cs = (HCorrelationSet)res.get(0);\n-        }\n-        return new CorrelationSetDaoImpl(_sm, cs);\n+      getSession().save(cs);\n+    } else {\n+      cs = (HCorrelationSet) res.get(0);\n     }\n-    /**\n-     * @see org.apache.ode.bpel.dao.ScopeDAO#getParentScope()\n-     */\n-    public ScopeDAO getParentScope() {\n-        entering(\"ScopeDaoImpl.getParentScope\");\n-        return _scope.getParentScope() != null\n-                ? new ScopeDaoImpl(_sm, _scope.getParentScope())\n-                : null;\n-    }\n-    /**\n-     * @see org.apache.ode.bpel.dao.ScopeDAO#getProcessInstance()\n-     */\n-    public ProcessInstanceDAO getProcessInstance() {\n-        entering(\"ScopeDaoImpl.getProcessInstance\");\n-        return new ProcessInstanceDaoImpl(_sm, _scope.getInstance());\n-    }\n-    /**\n-     * @see org.apache.ode.bpel.dao.ScopeDAO#setState(org.apache.ode.bpel.dao.ScopeStateEnum)\n-     */\n-    public void setState(ScopeStateEnum state) {\n-        entering(\"ScopeDaoImpl.setState\");\n-        _scope.setState(state.toString());\n-        getSession().update(_scope);\n+    return new CorrelationSetDaoImpl(_sm, cs);\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.ScopeDAO#getParentScope()\n+   */\n+  public ScopeDAO getParentScope() {\n+    entering(\"ScopeDaoImpl.getParentScope\");\n+    return _scope.getParentScope() != null\n+      ? new ScopeDaoImpl(_sm, _scope.getParentScope())\n+      : null;\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.ScopeDAO#getProcessInstance()\n+   */\n+  public ProcessInstanceDAO getProcessInstance() {\n+    entering(\"ScopeDaoImpl.getProcessInstance\");\n+    return new ProcessInstanceDaoImpl(_sm, _scope.getInstance());\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.ScopeDAO#setState(org.apache.ode.bpel.dao.ScopeStateEnum)\n+   */\n+  public void setState(ScopeStateEnum state) {\n+    entering(\"ScopeDaoImpl.setState\");\n+    _scope.setState(state.toString());\n+    getSession().update(_scope);\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.ScopeDAO#getState()\n+   */\n+  public ScopeStateEnum getState() {\n+    return ScopeStateEnum.valueOf(_scope.getState());\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.ScopeDAO#getName()\n+   */\n+  public String getName() {\n+    return _scope.getName();\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.ScopeDAO#getVariable(java.lang.String)\n+   */\n+  public XmlDataDAO getVariable(String varName) {\n+    entering(\"ScopeDaoImpl.getVariable\");\n+    XmlDataDAO cached = _variables.get(varName);\n+    if (cached != null) {\n+      return _variables.get(varName);\n     }\n-    /**\n-     * @see org.apache.ode.bpel.dao.ScopeDAO#getState()\n-     */\n-    public ScopeStateEnum getState() {\n-        return ScopeStateEnum.valueOf(_scope.getState());\n+\n+    HXmlData data = null;\n+    for (HXmlData e : _scope.getVariables()) {\n+      if (e.getName().equals(varName) && e.getScope().getId().equals(_scope.getId())) {\n+        data = e;\n+      }\n     }\n-    /**\n-     * @see org.apache.ode.bpel.dao.ScopeDAO#getName()\n-     */\n-    public String getName() {\n-        return _scope.getName();\n+    if (data == null) {\n+      data = new HXmlData();\n+      data.setName(varName);\n+      data.setScope(_scope);\n+      _scope.getVariables().add(data);\n     }\n-    /**\n-     * @see org.apache.ode.bpel.dao.ScopeDAO#getVariable(java.lang.String)\n-     */\n-    public XmlDataDAO getVariable(String varName) {\n-        entering(\"ScopeDaoImpl.getVariable\");\n-        XmlDataDAO cached = _variables.get(varName);\n-        if (cached != null) return _variables.get(varName);\n-\n-        HXmlData data = null;\n-        for (HXmlData e : _scope.getVariables()) {\n-            if (e.getName().equals(varName) && e.getScope().getId().equals(_scope.getId())) {\n-                data = e;\n-            }\n-        }\n-        if (data == null) {\n-            data = new HXmlData();\n-            data.setName(varName);\n-            data.setScope(_scope);\n-            _scope.getVariables().add(data);\n-        }\n \n-        XmlDataDaoImpl varDao = new XmlDataDaoImpl(_sm, data);\n-        _variables.put(varName, varDao);\n-        return varDao;\n-    }\n+    XmlDataDaoImpl varDao = new XmlDataDaoImpl(_sm, data);\n+    _variables.put(varName, varDao);\n+    return varDao;\n+  }\n \n-    public PartnerLinkDAO createPartnerLink(int modelId, String pLinkName, String myRole, String partnerRole) {\n-        entering(\"ScopeDaoImpl.createPartnerLink\");\n-        HPartnerLink epr = new HPartnerLink();\n-        epr.setModelId(modelId);\n-        epr.setLinkName(pLinkName);\n-        epr.setMyRole(myRole);\n-        epr.setPartnerRole(partnerRole);\n-        epr.setScope(_scope);\n+  public PartnerLinkDAO createPartnerLink(int modelId, String pLinkName, String myRole, String partnerRole) {\n+    entering(\"ScopeDaoImpl.createPartnerLink\");\n+    HPartnerLink epr = new HPartnerLink();\n+    epr.setModelId(modelId);\n+    epr.setLinkName(pLinkName);\n+    epr.setMyRole(myRole);\n+    epr.setPartnerRole(partnerRole);\n+    epr.setScope(_scope);\n //        _scope.addPartnerLink(epr);\n-        try {\n-            getSession().save(epr);\n-        } catch (Exception e) {\n-            super.logDao.error(\"Error while saving Partner Link : \" + epr.toString());\n-            throw new RuntimeException(e);\n-        }\n-        PartnerLinkDAOImpl eprDao = new PartnerLinkDAOImpl(_sm, epr);\n-        return eprDao;\n+    try {\n+      getSession().save(epr);\n+    } catch (Exception e) {\n+      super.logDao.error(\"Error while saving Partner Link : \" + epr.toString());\n+      throw new RuntimeException(e);\n     }\n+    PartnerLinkDAOImpl eprDao = new PartnerLinkDAOImpl(_sm, epr);\n+    return eprDao;\n+  }\n \n-    public PartnerLinkDAO getPartnerLink(int plinkId) {\n-        entering(\"ScopeDaoImpl.getPartnerLink\");\n-        Query qry = getSession().createQuery(QRY_SCOPE_EPR);\n-        qry.setInteger(0,plinkId);\n-        qry.setEntity(1,_scope);\n-        HPartnerLink hpl = (HPartnerLink) qry.uniqueResult();\n-        if (hpl == null)\n-            return null;\n-        return new PartnerLinkDAOImpl(_sm, hpl);\n+  public PartnerLinkDAO getPartnerLink(int plinkId) {\n+    entering(\"ScopeDaoImpl.getPartnerLink\");\n+    Query qry = getSession().createQuery(QRY_SCOPE_EPR);\n+    qry.setInteger(0, plinkId);\n+    qry.setEntity(1, _scope);\n+    HPartnerLink hpl = (HPartnerLink) qry.uniqueResult();\n+    if (hpl == null) {\n+      return null;\n     }\n+    return new PartnerLinkDAOImpl(_sm, hpl);\n+  }\n \n-    public Collection<PartnerLinkDAO> getPartnerLinks() {\n-        entering(\"ScopeDaoImpl.getPartnerLinks\");\n-        ArrayList<PartnerLinkDAO> plinks = new ArrayList<PartnerLinkDAO>();\n-        for (HPartnerLink hPartnerLink : _scope.getPartnerLinks()) {\n-            plinks.add(new PartnerLinkDAOImpl(_sm, hPartnerLink));\n-        }\n-        return plinks;\n+  public Collection<PartnerLinkDAO> getPartnerLinks() {\n+    entering(\"ScopeDaoImpl.getPartnerLinks\");\n+    ArrayList<PartnerLinkDAO> plinks = new ArrayList<PartnerLinkDAO>();\n+    for (HPartnerLink hPartnerLink : _scope.getPartnerLinks()) {\n+      plinks.add(new PartnerLinkDAOImpl(_sm, hPartnerLink));\n     }\n+    return plinks;\n+  }\n \n-    /**\n-     * @see org.apache.ode.bpel.dao.ScopeDAO#getScopeInstanceId()\n-     */\n-    public Long getScopeInstanceId() {\n-        return _scope.getId();\n-    }\n+  /**\n+   * @see org.apache.ode.bpel.dao.ScopeDAO#getScopeInstanceId()\n+   */\n+  public Long getScopeInstanceId() {\n+    return _scope.getId();\n+  }\n \n-    /**\n-     * @see org.apache.ode.bpel.dao.ScopeDAO#getModelId()\n-     */\n-    public int getModelId() {\n-        return _scope.getScopeModelId();\n-    }\n+  /**\n+   * @see org.apache.ode.bpel.dao.ScopeDAO#getModelId()\n+   */\n+  public int getModelId() {\n+    return _scope.getScopeModelId();\n+  }\n \n-    public Set<CorrelationSetDAO> getCorrelationSets() {\n-        entering(\"ScopeDaoImpl.getCorrelationSets\");\n-        Set<CorrelationSetDAO> results = new HashSet<CorrelationSetDAO>();\n-        for (HCorrelationSet hCorrelationSet : _scope.getCorrelationSets()) {\n-            results.add(new CorrelationSetDaoImpl(_sm, hCorrelationSet));\n-        }\n-        return results;\n+  public Set<CorrelationSetDAO> getCorrelationSets() {\n+    entering(\"ScopeDaoImpl.getCorrelationSets\");\n+    Set<CorrelationSetDAO> results = new HashSet<CorrelationSetDAO>();\n+    for (HCorrelationSet hCorrelationSet : _scope.getCorrelationSets()) {\n+      results.add(new CorrelationSetDaoImpl(_sm, hCorrelationSet));\n     }\n+    return results;\n+  }\n \n \n-    @SuppressWarnings(\"unchecked\")\n-    public Collection<ScopeDAO> getChildScopes() {\n-        entering(\"ScopeDaoImpl.getChildScopes\");\n-        Query q = getSession().createQuery(\"from \" + HScope.class.getName() + \" as x where x.parentScope=?\");\n-        q.setEntity(0, _scope);\n-        Collection<HScope> hscopes = q.list();\n-        return CollectionsX.transform(new LinkedList<ScopeDAO>(), hscopes, new UnaryFunction<HScope,ScopeDAO>() {\n-            public ScopeDAO apply(HScope x) {\n-                return new ScopeDaoImpl(_sm,x);\n-            }\n+  @SuppressWarnings(\"unchecked\")\n+  public Collection<ScopeDAO> getChildScopes() {\n+    entering(\"ScopeDaoImpl.getChildScopes\");\n+    Query q = getSession().createQuery(\"from \" + HScope.class.getName() + \" as x where x.parentScope=?\");\n+    q.setEntity(0, _scope);\n+    Collection<HScope> hscopes = q.list();\n+    return CollectionsX.transform(new LinkedList<ScopeDAO>(), hscopes, new UnaryFunction<HScope, ScopeDAO>() {\n+      public ScopeDAO apply(HScope x) {\n+        return new ScopeDaoImpl(_sm, x);\n+      }\n \n-        });\n-    }\n+    });\n+  }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public Collection<XmlDataDAO> getVariables() {\n-        entering(\"ScopeDaoImpl.getVariables\");\n-        Query q = getSession().createFilter(_scope.getVariables(), \"where this.scope=?\");\n-        q.setEntity(0, _scope);\n-        return CollectionsX.transform(new LinkedList<XmlDataDAO>(), (Collection<HXmlData>)q.list(), new UnaryFunction<HXmlData,XmlDataDAO>() {\n-            public XmlDataDAO apply(HXmlData x) {\n-                return new XmlDataDaoImpl(_sm,x);\n-            }\n-\n-        });\n-    }\n+  @SuppressWarnings(\"unchecked\")\n+  public Collection<XmlDataDAO> getVariables() {\n+    entering(\"ScopeDaoImpl.getVariables\");\n+    Query q = getSession().createFilter(_scope.getVariables(), \"where this.scope=?\");\n+    q.setEntity(0, _scope);\n+    return CollectionsX.transform(new LinkedList<XmlDataDAO>(), (Collection<HXmlData>) q.list(),\n+      new UnaryFunction<HXmlData, XmlDataDAO>() {\n+        public XmlDataDAO apply(HXmlData x) {\n+          return new XmlDataDaoImpl(_sm, x);\n+        }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public List<BpelEvent> listEvents() {\n-        entering(\"ScopeDaoImpl.listEvents\");\n+      });\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public List<BpelEvent> listEvents() {\n+    entering(\"ScopeDaoImpl.listEvents\");\n //        CriteriaBuilder cb = new CriteriaBuilder();\n-        Criteria crit = _sm.getSession().createCriteria(HBpelEvent.class);\n+    Criteria crit = _sm.getSession().createCriteria(HBpelEvent.class);\n //        if (efilter != null)\n //            cb.buildCriteria(crit, efilter);\n-        crit.add(Restrictions.eq(\"scopeId\",_scope.getId()));\n-\n-        List<HBpelEvent> hevents = crit.list();\n-        List<BpelEvent> ret = new ArrayList<BpelEvent>(hevents.size());\n-        try {\n-            CollectionsX.transformEx(ret,hevents,new UnaryFunctionEx<HBpelEvent,BpelEvent>() {\n-                public BpelEvent apply(HBpelEvent x) throws Exception{\n-                    return (BpelEvent) SerializableUtils.toObject(x.getData(),BpelEvent.class.getClassLoader());\n-                }\n-\n-            });\n-        }catch (Exception ex) {\n-            throw new RuntimeException(ex);\n+    crit.add(Restrictions.eq(\"scopeId\", _scope.getId()));\n+\n+    List<HBpelEvent> hevents = crit.list();\n+    List<BpelEvent> ret = new ArrayList<BpelEvent>(hevents.size());\n+    try {\n+      CollectionsX.transformEx(ret, hevents, new UnaryFunctionEx<HBpelEvent, BpelEvent>() {\n+        public BpelEvent apply(HBpelEvent x) throws Exception {\n+          return (BpelEvent) SerializableUtils.toObject(x.getData(), BpelEvent.class.getClassLoader());\n         }\n-        return ret;\n+\n+      });\n+    } catch (Exception ex) {\n+      throw new RuntimeException(ex);\n     }\n+    return ret;\n+  }\n }\n",
            "diff_size": 230
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "240",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/253/ScopeDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/253/ScopeDaoImpl.java\nindex df63239d4da..08929fc5286 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/253/ScopeDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/253/ScopeDaoImpl.java\n@@ -237,7 +237,8 @@ public class ScopeDaoImpl extends HibernateDao implements ScopeDAO {\n         entering(\"ScopeDaoImpl.getVariables\");\n         Query q = getSession().createFilter(_scope.getVariables(), \"where this.scope=?\");\n         q.setEntity(0, _scope);\n-        return CollectionsX.transform(new LinkedList<XmlDataDAO>(), (Collection<HXmlData>)q.list(), new UnaryFunction<HXmlData,XmlDataDAO>() {\n+        return CollectionsX.transform(new LinkedList<XmlDataDAO>(), (Collection<HXmlData>)\n+            q.list(), new UnaryFunction<HXmlData,XmlDataDAO>() {\n             public XmlDataDAO apply(HXmlData x) {\n                 return new XmlDataDaoImpl(_sm,x);\n             }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}