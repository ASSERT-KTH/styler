{
    "project_name": "wso2-attic-commons",
    "error_id": "418",
    "information": {
        "errors": [
            {
                "line": "62",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 209).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n        return (WhereCondition) new AndCondition(((WhereCondition)leftCondition).getNewInstance(referenceConversion),((WhereCondition)rightCondition).getNewInstance(referenceConversion)).within(getLifeTime());\n\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/418/AndCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/418/AndCondition.java\nindex 36ebc12bb44..6c7609db804 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/418/AndCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/418/AndCondition.java\n@@ -59,7 +59,10 @@ public class AndCondition extends ExpirableCondition implements WhereCondition {\n \n     @Override\n     public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n-        return (WhereCondition) new AndCondition(((WhereCondition)leftCondition).getNewInstance(referenceConversion),((WhereCondition)rightCondition).getNewInstance(referenceConversion)).within(getLifeTime());\n+        return (WhereCondition) new AndCondition(((WhereCondition)leftCondition).getNewInstance(referenceConversion),\n+                ((WhereCondition)rightCondition).getNewInstance(referenceConversion)).within(\n+    getLifeTime\n+    ());\n \n     }\n }\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/418/AndCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/418/AndCondition.java\nindex 36ebc12bb44..9439f38f4dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/418/AndCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/418/AndCondition.java\n@@ -2,9 +2,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -12,6 +12,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.wso2.siddhi.api.condition.where.logical;\n \n import org.wso2.siddhi.api.condition.ExpirableCondition;\n@@ -21,45 +22,46 @@ import org.wso2.siddhi.api.condition.Condition;\n import java.util.Map;\n \n /**\n- * \n+ *\n  * AndCondition has two conditions which performs logical AND operation\n  */\n \n public class AndCondition extends ExpirableCondition implements WhereCondition {\n-    private Condition leftCondition;\n-    private Condition rightCondition;\n+  private Condition leftCondition;\n+  private Condition rightCondition;\n \n-    /**\n-     * @param leftCondition  One of the conditions to be evaluated\n-     * @param rightCondition One of the conditions to be evaluated\n-     */\n-    public AndCondition(Condition leftCondition, Condition rightCondition) {\n-        this.leftCondition = leftCondition;\n-        this.rightCondition = rightCondition;\n-    }\n+  /**\n+   * @param leftCondition  One of the conditions to be evaluated\n+   * @param rightCondition One of the conditions to be evaluated\n+   */\n+  public AndCondition(Condition leftCondition, Condition rightCondition) {\n+    this.leftCondition = leftCondition;\n+    this.rightCondition = rightCondition;\n+  }\n \n-    /**\n-     * get the left condition\n-     *\n-     * @return Left condition\n-     */\n-    public Condition getLeftCondition() {\n-        return leftCondition;\n-    }\n+  /**\n+   * get the left condition\n+   *\n+   * @return Left condition\n+   */\n+  public Condition getLeftCondition() {\n+    return leftCondition;\n+  }\n \n \n-    /**\n-     * get the right condition\n-     *\n-     * @return Right Condition\n-     */\n-    public Condition getRightCondition() {\n-        return rightCondition;\n-    }\n+  /**\n+   * get the right condition\n+   *\n+   * @return Right Condition\n+   */\n+  public Condition getRightCondition() {\n+    return rightCondition;\n+  }\n \n-    @Override\n-    public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n-        return (WhereCondition) new AndCondition(((WhereCondition)leftCondition).getNewInstance(referenceConversion),((WhereCondition)rightCondition).getNewInstance(referenceConversion)).within(getLifeTime());\n+  @Override\n+  public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n+    return (WhereCondition) new AndCondition(((WhereCondition) leftCondition).getNewInstance(referenceConversion),\n+      ((WhereCondition) rightCondition).getNewInstance(referenceConversion)).within(getLifeTime());\n \n-    }\n+  }\n }\n",
            "diff_size": 35
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/418/AndCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/418/AndCondition.java\nindex 36ebc12bb44..251d68f76a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/418/AndCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/418/AndCondition.java\n@@ -62,4 +62,4 @@ public class AndCondition extends ExpirableCondition implements WhereCondition {\n         return (WhereCondition) new AndCondition(((WhereCondition)leftCondition).getNewInstance(referenceConversion),((WhereCondition)rightCondition).getNewInstance(referenceConversion)).within(getLifeTime());\n \n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/418/AndCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/418/AndCondition.java\nindex 36ebc12bb44..63ac45ff0a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/418/AndCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/418/AndCondition.java\n@@ -60,6 +60,5 @@ public class AndCondition extends ExpirableCondition implements WhereCondition {\n     @Override\n     public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n         return (WhereCondition) new AndCondition(((WhereCondition)leftCondition).getNewInstance(referenceConversion),((WhereCondition)rightCondition).getNewInstance(referenceConversion)).within(getLifeTime());\n-\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/418/AndCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/418/AndCondition.java\nindex 36ebc12bb44..6c7609db804 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/418/AndCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/418/AndCondition.java\n@@ -59,7 +59,10 @@ public class AndCondition extends ExpirableCondition implements WhereCondition {\n \n     @Override\n     public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n-        return (WhereCondition) new AndCondition(((WhereCondition)leftCondition).getNewInstance(referenceConversion),((WhereCondition)rightCondition).getNewInstance(referenceConversion)).within(getLifeTime());\n+        return (WhereCondition) new AndCondition(((WhereCondition)leftCondition).getNewInstance(referenceConversion),\n+                ((WhereCondition)rightCondition).getNewInstance(referenceConversion)).within(\n+    getLifeTime\n+    ());\n \n     }\n }\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}