{
    "project_name": "wso2-attic-commons",
    "error_id": "254",
    "information": {
        "errors": [
            {
                "line": "85",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t\tOMElement result = null;\n\n\t\tString body =\"<p:hello xmlns:p=\\\"http://ode/bpel/unit-test.wsdl\\\"> <TestPart>Wso2</TestPart> </p:hello>\";\n\n\t\tclient = new ServiceClient(ctx, null);\n\t\tclient.engageModule(\"rampart\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/254/Client.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/254/Client.java\nindex d0d458afa95..1ed51de308e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/254/Client.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/254/Client.java\n@@ -81,9 +81,7 @@ public class Client {\n \t\tstore.add(responseToken);\r\n \r\n \t\tOMElement result = null;\r\n-\r\n-\t\tString body =\"<p:hello xmlns:p=\\\"http://ode/bpel/unit-test.wsdl\\\"> <TestPart>Wso2</TestPart> </p:hello>\";\r\n-\r\n+String body =\"<p:hello xmlns:p=\\\"http://ode/bpel/unit-test.wsdl\\\"> <TestPart>Wso2</TestPart> </p:hello>\";\r\n \t\tclient = new ServiceClient(ctx, null);\r\n \t\tclient.engageModule(\"rampart\");\r\n \t\tclient.engageModule(\"addressing\");\r\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/254/Client.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/254/Client.java\nindex d0d458afa95..9fb3b205565 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/254/Client.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/254/Client.java\n@@ -34,139 +34,139 @@ import java.io.File;\n public class Client {\r\n \r\n \r\n-\tfinal static String SERVICE_EPR = \"http://localhost:9763/services/HelloService\";\r\n-        final static String STS_EPR = \"http://localhost:9763/services/wso2carbon-sts\";\r\n-\r\n-        private static final String wso2wsasHome = System.getProperty(\"wso2wsas.home\");\r\n-\r\n-\tpublic static void main(String[] args) throws Exception {\r\n-\t\tServiceClient client = null;\r\n-\t\tOptions options = null;\r\n-\t\tConfigurationContext ctx = null;\r\n-\t\tPolicy stsPolicy = null;\r\n-\t\tSTSClient stsClient = null;\r\n-\t\tPolicy servicePolicy = null;\r\n-\t\tToken responseToken = null;\r\n-\t\tTokenStorage store = null;\r\n-                String serviceEpr = null;\r\n-                String stsEpr = null;\r\n-\r\n-                if (args.length > 1) {\r\n-                   stsEpr = args[0];\r\n-                   serviceEpr = args[1];\r\n-                } else {\r\n-                   stsEpr = STS_EPR ;\r\n-                   serviceEpr = SERVICE_EPR ;\r\n-                }\r\n-\r\n-\t\tctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(\"repository\");\r\n+  final static String SERVICE_EPR = \"http://localhost:9763/services/HelloService\";\r\n+  final static String STS_EPR = \"http://localhost:9763/services/wso2carbon-sts\";\r\n+\r\n+  private static final String wso2wsasHome = System.getProperty(\"wso2wsas.home\");\r\n+\r\n+  public static void main(String[] args) throws Exception {\r\n+    ServiceClient client = null;\r\n+    Options options = null;\r\n+    ConfigurationContext ctx = null;\r\n+    Policy stsPolicy = null;\r\n+    STSClient stsClient = null;\r\n+    Policy servicePolicy = null;\r\n+    Token responseToken = null;\r\n+    TokenStorage store = null;\r\n+    String serviceEpr = null;\r\n+    String stsEpr = null;\r\n+\r\n+    if (args.length > 1) {\r\n+      stsEpr = args[0];\r\n+      serviceEpr = args[1];\r\n+    } else {\r\n+      stsEpr = STS_EPR;\r\n+      serviceEpr = SERVICE_EPR;\r\n+    }\r\n+\r\n+    ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(\"repository\");\r\n \r\n-\t\tstsClient = new STSClient(ctx);\r\n-\r\n-\t\tstsClient.setRstTemplate(getRSTTemplate());\r\n-\t\tstsClient.setAction(RahasConstants.WST_NS_05_02 + RahasConstants.RST_ACTION_SCT);\r\n-\r\n-\t\tstsPolicy = loadPolicy(wso2wsasHome + \"/samples/sts-sample/conf/sts.policy.xml\");\r\n-\r\n-\t\tservicePolicy = loadPolicy(wso2wsasHome + \"/samples/sts-sample/conf/service.policy.xml\");\t\r\n-\r\n-\t\tresponseToken = stsClient.requestSecurityToken(servicePolicy, stsEpr, stsPolicy,\r\n-\t\t\t\tserviceEpr);\r\n-\r\n-\t\tSystem.out.println(\"RECEIVED SECRET: \" + Base64.encode(responseToken.getSecret()) + \"\\n\");\r\n-\t\tSystem.out.println(\"RECEIVED TOKEN: \" + responseToken.getToken() + \"\\n\");\r\n-\r\n-\t\t// Store token\r\n-\t\tstore = TrustUtil.getTokenStore(ctx);\r\n-\t\tstore.add(responseToken);\r\n-\r\n-\t\tOMElement result = null;\r\n-\r\n-\t\tString body =\"<p:hello xmlns:p=\\\"http://ode/bpel/unit-test.wsdl\\\"> <TestPart>Wso2</TestPart> </p:hello>\";\r\n-\r\n-\t\tclient = new ServiceClient(ctx, null);\r\n-\t\tclient.engageModule(\"rampart\");\r\n-\t\tclient.engageModule(\"addressing\");\r\n-\t\toptions = new Options();\r\n-\t\toptions.setAction(\"urn:hello\");\r\n-\t\toptions.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);\r\n-\t\toptions.setProperty(RampartMessageData.KEY_RAMPART_POLICY, servicePolicy);\r\n-\t\toptions.setProperty(RampartMessageData.SCT_ID, responseToken.getId());\r\n-\t\toptions.setTo(new EndpointReference(serviceEpr ));\r\n-\t\tclient.setOptions(options);\r\n-\t\tresult = client.sendReceive(AXIOMUtil.stringToOM(body));\r\n-\t\t//System.out.println(client.sendReceive(getPayload(\"Hello\")));\r\n-\t\tSystem.out.println(result.getFirstElement());\r\n-\r\n-\t}\r\n-\r\n-\tprivate static OMElement getPayload(String value) {\r\n-\t\tOMFactory factory = null;\r\n-\t\tOMNamespace ns = null;\r\n-\t\tOMElement elem = null;\r\n-\t\tOMElement childElem = null;\r\n-\r\n-\t\tfactory = OMAbstractFactory.getOMFactory();\r\n-\t\tns = factory.createOMNamespace(\"http://www.wso2.org/types\", \"ns1\");\r\n-\t\telem = factory.createOMElement(\"hello\", ns);\r\n-\t\tchildElem = factory.createOMElement(\"name\", null);\r\n-\t\tchildElem.setText(value);\r\n-\t\telem.addChild(childElem);\r\n-\r\n-\t\treturn elem;\r\n-\t}\r\n-\r\n-\tprivate static Policy loadPolicy(String xmlPath) throws Exception {\r\n-\r\n-\t\tStAXOMBuilder builder = null;\r\n-\t\tPolicy policy = null;\r\n-\t\tRampartConfig rc = null;\r\n-\t\tCryptoConfig sigCryptoConfig = null;\r\n-\t\tString keystore = null;\r\n-\t\tProperties merlinProp = null;\r\n-\t\tCryptoConfig encrCryptoConfig = null;\r\n-\r\n-\t\tbuilder = new StAXOMBuilder(xmlPath);\r\n-\t\tpolicy = PolicyEngine.getPolicy(builder.getDocumentElement());\r\n-\r\n-\t\trc = new RampartConfig();\r\n-\r\n-\t\trc.setUser(\"client\");\r\n-\t\trc.setEncryptionUser(\"wso2carbon\");\r\n-\t\trc.setPwCbClass(PWCBHandler.class.getName());\r\n-\r\n-\t\tkeystore = wso2wsasHome + File.separator + \"samples\" +\r\n-                               File.separator + \"sts-sample\" + File.separator +\r\n-                               \"conf\" + File.separator + \"client-truststore.jks\";\r\n-\r\n-\t\tmerlinProp = new Properties();\r\n-\t\tmerlinProp.put(\"org.apache.ws.security.crypto.merlin.keystore.type\", \"JKS\");\r\n-\t\tmerlinProp.put(\"org.apache.ws.security.crypto.merlin.file\", keystore);\r\n-\t\tmerlinProp.put(\"org.apache.ws.security.crypto.merlin.keystore.password\", \"wso2wsas\");\r\n-\r\n-\t\tsigCryptoConfig = new CryptoConfig();\r\n-\t\tsigCryptoConfig.setProvider(\"org.apache.ws.security.components.crypto.Merlin\");\r\n-\t\tsigCryptoConfig.setProp(merlinProp);\r\n-\r\n-\t\tencrCryptoConfig = new CryptoConfig();\r\n-\t\tencrCryptoConfig.setProvider(\"org.apache.ws.security.components.crypto.Merlin\");\r\n-\t\tencrCryptoConfig.setProp(merlinProp);\r\n-\r\n-\t\trc.setSigCryptoConfig(sigCryptoConfig);\r\n-\t\trc.setEncrCryptoConfig(encrCryptoConfig);\r\n+    stsClient = new STSClient(ctx);\r\n+\r\n+    stsClient.setRstTemplate(getRSTTemplate());\r\n+    stsClient.setAction(RahasConstants.WST_NS_05_02 + RahasConstants.RST_ACTION_SCT);\r\n+\r\n+    stsPolicy = loadPolicy(wso2wsasHome + \"/samples/sts-sample/conf/sts.policy.xml\");\r\n+\r\n+    servicePolicy = loadPolicy(wso2wsasHome + \"/samples/sts-sample/conf/service.policy.xml\");\r\n+\r\n+    responseToken = stsClient.requestSecurityToken(servicePolicy, stsEpr, stsPolicy,\r\n+      serviceEpr);\r\n+\r\n+    System.out.println(\"RECEIVED SECRET: \" + Base64.encode(responseToken.getSecret()) + \"\\n\");\r\n+    System.out.println(\"RECEIVED TOKEN: \" + responseToken.getToken() + \"\\n\");\r\n+\r\n+    // Store token\r\n+    store = TrustUtil.getTokenStore(ctx);\r\n+    store.add(responseToken);\r\n+\r\n+    OMElement result = null;\r\n+\r\n+    String body = \"<p:hello xmlns:p=\\\"http://ode/bpel/unit-test.wsdl\\\"> <TestPart>Wso2</TestPart> </p:hello>\";\r\n+\r\n+    client = new ServiceClient(ctx, null);\r\n+    client.engageModule(\"rampart\");\r\n+    client.engageModule(\"addressing\");\r\n+    options = new Options();\r\n+    options.setAction(\"urn:hello\");\r\n+    options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);\r\n+    options.setProperty(RampartMessageData.KEY_RAMPART_POLICY, servicePolicy);\r\n+    options.setProperty(RampartMessageData.SCT_ID, responseToken.getId());\r\n+    options.setTo(new EndpointReference(serviceEpr));\r\n+    client.setOptions(options);\r\n+    result = client.sendReceive(AXIOMUtil.stringToOM(body));\r\n+    //System.out.println(client.sendReceive(getPayload(\"Hello\")));\r\n+    System.out.println(result.getFirstElement());\r\n+\r\n+  }\r\n+\r\n+  private static OMElement getPayload(String value) {\r\n+    OMFactory factory = null;\r\n+    OMNamespace ns = null;\r\n+    OMElement elem = null;\r\n+    OMElement childElem = null;\r\n+\r\n+    factory = OMAbstractFactory.getOMFactory();\r\n+    ns = factory.createOMNamespace(\"http://www.wso2.org/types\", \"ns1\");\r\n+    elem = factory.createOMElement(\"hello\", ns);\r\n+    childElem = factory.createOMElement(\"name\", null);\r\n+    childElem.setText(value);\r\n+    elem.addChild(childElem);\r\n+\r\n+    return elem;\r\n+  }\r\n+\r\n+  private static Policy loadPolicy(String xmlPath) throws Exception {\r\n+\r\n+    StAXOMBuilder builder = null;\r\n+    Policy policy = null;\r\n+    RampartConfig rc = null;\r\n+    CryptoConfig sigCryptoConfig = null;\r\n+    String keystore = null;\r\n+    Properties merlinProp = null;\r\n+    CryptoConfig encrCryptoConfig = null;\r\n+\r\n+    builder = new StAXOMBuilder(xmlPath);\r\n+    policy = PolicyEngine.getPolicy(builder.getDocumentElement());\r\n+\r\n+    rc = new RampartConfig();\r\n+\r\n+    rc.setUser(\"client\");\r\n+    rc.setEncryptionUser(\"wso2carbon\");\r\n+    rc.setPwCbClass(PWCBHandler.class.getName());\r\n+\r\n+    keystore = wso2wsasHome + File.separator + \"samples\" +\r\n+      File.separator + \"sts-sample\" + File.separator +\r\n+      \"conf\" + File.separator + \"client-truststore.jks\";\r\n+\r\n+    merlinProp = new Properties();\r\n+    merlinProp.put(\"org.apache.ws.security.crypto.merlin.keystore.type\", \"JKS\");\r\n+    merlinProp.put(\"org.apache.ws.security.crypto.merlin.file\", keystore);\r\n+    merlinProp.put(\"org.apache.ws.security.crypto.merlin.keystore.password\", \"wso2wsas\");\r\n+\r\n+    sigCryptoConfig = new CryptoConfig();\r\n+    sigCryptoConfig.setProvider(\"org.apache.ws.security.components.crypto.Merlin\");\r\n+    sigCryptoConfig.setProp(merlinProp);\r\n+\r\n+    encrCryptoConfig = new CryptoConfig();\r\n+    encrCryptoConfig.setProvider(\"org.apache.ws.security.components.crypto.Merlin\");\r\n+    encrCryptoConfig.setProp(merlinProp);\r\n+\r\n+    rc.setSigCryptoConfig(sigCryptoConfig);\r\n+    rc.setEncrCryptoConfig(encrCryptoConfig);\r\n \r\n-\t\tpolicy.addAssertion(rc);\r\n+    policy.addAssertion(rc);\r\n \r\n-\t\treturn policy;\r\n-\t}\r\n+    return policy;\r\n+  }\r\n \r\n-\tprivate static OMElement getRSTTemplate() throws Exception {\r\n-\t\tOMFactory fac = OMAbstractFactory.getOMFactory();\r\n-\t\tOMElement elem = fac.createOMElement(Constants.RST_TEMPLATE);\r\n-\t\tTrustUtil.createTokenTypeElement(RahasConstants.VERSION_05_02, elem).setText(XML.SAML_NS);\r\n-\t\tTrustUtil.createKeyTypeElement(RahasConstants.VERSION_05_02, elem,\r\n-\t\t\t\tRahasConstants.KEY_TYPE_SYMM_KEY);\r\n-\t\tTrustUtil.createKeySizeElement(RahasConstants.VERSION_05_02, elem, 256);\r\n-\t\treturn elem;\r\n-\t}\r\n+  private static OMElement getRSTTemplate() throws Exception {\r\n+    OMFactory fac = OMAbstractFactory.getOMFactory();\r\n+    OMElement elem = fac.createOMElement(Constants.RST_TEMPLATE);\r\n+    TrustUtil.createTokenTypeElement(RahasConstants.VERSION_05_02, elem).setText(XML.SAML_NS);\r\n+    TrustUtil.createKeyTypeElement(RahasConstants.VERSION_05_02, elem,\r\n+      RahasConstants.KEY_TYPE_SYMM_KEY);\r\n+    TrustUtil.createKeySizeElement(RahasConstants.VERSION_05_02, elem, 256);\r\n+    return elem;\r\n+  }\r\n }\r\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/254/Client.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/254/Client.java\nindex d0d458afa95..871b89921bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/254/Client.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/254/Client.java\n@@ -31,15 +31,12 @@ import org.apache.ws.secpolicy.Constants;\n import org.opensaml.XML;\r\n import java.io.File;\r\n \r\n-public class Client {\r\n+public class Client {\n+final static String SERVICE_EPR = \"http://localhost:9763/services/HelloService\";\n+final static String STS_EPR = \"http://localhost:9763/services/wso2carbon-sts\";\r\n \r\n-\r\n-\tfinal static String SERVICE_EPR = \"http://localhost:9763/services/HelloService\";\r\n-        final static String STS_EPR = \"http://localhost:9763/services/wso2carbon-sts\";\r\n-\r\n-        private static final String wso2wsasHome = System.getProperty(\"wso2wsas.home\");\r\n-\r\n-\tpublic static void main(String[] args) throws Exception {\r\n+        private static final String wso2wsasHome = System.getProperty(\"wso2wsas.home\");\n+public static void main(String[] args) throws Exception {\r\n \t\tServiceClient client = null;\r\n \t\tOptions options = null;\r\n \t\tConfigurationContext ctx = null;\r\n@@ -47,19 +44,18 @@ public class Client {\n \t\tSTSClient stsClient = null;\r\n \t\tPolicy servicePolicy = null;\r\n \t\tToken responseToken = null;\r\n-\t\tTokenStorage store = null;\r\n-                String serviceEpr = null;\r\n+\t\tTokenStorage store = null;\n+String serviceEpr = null;\r\n                 String stsEpr = null;\r\n \r\n                 if (args.length > 1) {\r\n                    stsEpr = args[0];\r\n                    serviceEpr = args[1];\r\n                 } else {\r\n-                   stsEpr = STS_EPR ;\r\n-                   serviceEpr = SERVICE_EPR ;\r\n-                }\r\n-\r\n-\t\tctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(\"repository\");\r\n+                   stsEpr = STS_EPR;\r\n+                   serviceEpr = SERVICE_EPR;\n+    }\n+ ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(\"repository\");\r\n \r\n \t\tstsClient = new STSClient(ctx);\r\n \r\n@@ -68,12 +64,9 @@ public class Client {\n \r\n \t\tstsPolicy = loadPolicy(wso2wsasHome + \"/samples/sts-sample/conf/sts.policy.xml\");\r\n \r\n-\t\tservicePolicy = loadPolicy(wso2wsasHome + \"/samples/sts-sample/conf/service.policy.xml\");\t\r\n-\r\n-\t\tresponseToken = stsClient.requestSecurityToken(servicePolicy, stsEpr, stsPolicy,\r\n-\t\t\t\tserviceEpr);\r\n-\r\n-\t\tSystem.out.println(\"RECEIVED SECRET: \" + Base64.encode(responseToken.getSecret()) + \"\\n\");\r\n+\t\tservicePolicy = loadPolicy(wso2wsasHome + \"/samples/sts-sample/conf/service.policy.xml\");\n+responseToken = stsClient.requestSecurityToken(servicePolicy, stsEpr, stsPolicy, serviceEpr);\n+System.out.println(\"RECEIVED SECRET: \" + Base64.encode(responseToken.getSecret()) + \"\\n\");\r\n \t\tSystem.out.println(\"RECEIVED TOKEN: \" + responseToken.getToken() + \"\\n\");\r\n \r\n \t\t// Store token\r\n@@ -82,7 +75,7 @@ public class Client {\n \r\n \t\tOMElement result = null;\r\n \r\n-\t\tString body =\"<p:hello xmlns:p=\\\"http://ode/bpel/unit-test.wsdl\\\"> <TestPart>Wso2</TestPart> </p:hello>\";\r\n+\t\tString body = \"<p:hello xmlns:p=\\\"http://ode/bpel/unit-test.wsdl\\\"> <TestPart>Wso2</TestPart> </p:hello>\";\r\n \r\n \t\tclient = new ServiceClient(ctx, null);\r\n \t\tclient.engageModule(\"rampart\");\r\n@@ -92,13 +85,12 @@ public class Client {\n \t\toptions.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);\r\n \t\toptions.setProperty(RampartMessageData.KEY_RAMPART_POLICY, servicePolicy);\r\n \t\toptions.setProperty(RampartMessageData.SCT_ID, responseToken.getId());\r\n-\t\toptions.setTo(new EndpointReference(serviceEpr ));\r\n+\t\toptions.setTo(new EndpointReference(serviceEpr));\r\n \t\tclient.setOptions(options);\r\n \t\tresult = client.sendReceive(AXIOMUtil.stringToOM(body));\r\n \t\t//System.out.println(client.sendReceive(getPayload(\"Hello\")));\r\n-\t\tSystem.out.println(result.getFirstElement());\r\n-\r\n-\t}\r\n+\t\tSystem.out.println(result.getFirstElement());\n+    }\r\n \r\n \tprivate static OMElement getPayload(String value) {\r\n \t\tOMFactory factory = null;\r\n@@ -116,9 +108,8 @@ public class Client {\n \t\treturn elem;\r\n \t}\r\n \r\n-\tprivate static Policy loadPolicy(String xmlPath) throws Exception {\r\n-\r\n-\t\tStAXOMBuilder builder = null;\r\n+\tprivate static Policy loadPolicy(String xmlPath) throws Exception {\n+StAXOMBuilder builder = null;\r\n \t\tPolicy policy = null;\r\n \t\tRampartConfig rc = null;\r\n \t\tCryptoConfig sigCryptoConfig = null;\r\n@@ -135,11 +126,9 @@ public class Client {\n \t\trc.setEncryptionUser(\"wso2carbon\");\r\n \t\trc.setPwCbClass(PWCBHandler.class.getName());\r\n \r\n-\t\tkeystore = wso2wsasHome + File.separator + \"samples\" +\r\n-                               File.separator + \"sts-sample\" + File.separator +\r\n-                               \"conf\" + File.separator + \"client-truststore.jks\";\r\n-\r\n-\t\tmerlinProp = new Properties();\r\n+\t\tkeystore = wso2wsasHome + File.separator + \"samples\" + File.separator + \"sts-sample\" + File.separator +\r\n+                               \"conf\" + File.separator + \"client-truststore.jks\";\n+merlinProp = new Properties();\r\n \t\tmerlinProp.put(\"org.apache.ws.security.crypto.merlin.keystore.type\", \"JKS\");\r\n \t\tmerlinProp.put(\"org.apache.ws.security.crypto.merlin.file\", keystore);\r\n \t\tmerlinProp.put(\"org.apache.ws.security.crypto.merlin.keystore.password\", \"wso2wsas\");\r\n@@ -169,4 +158,4 @@ public class Client {\n \t\tTrustUtil.createKeySizeElement(RahasConstants.VERSION_05_02, elem, 256);\r\n \t\treturn elem;\r\n \t}\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/254/Client.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/254/Client.java\nindex d0d458afa95..1ed51de308e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/254/Client.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/254/Client.java\n@@ -81,9 +81,7 @@ public class Client {\n \t\tstore.add(responseToken);\r\n \r\n \t\tOMElement result = null;\r\n-\r\n-\t\tString body =\"<p:hello xmlns:p=\\\"http://ode/bpel/unit-test.wsdl\\\"> <TestPart>Wso2</TestPart> </p:hello>\";\r\n-\r\n+String body =\"<p:hello xmlns:p=\\\"http://ode/bpel/unit-test.wsdl\\\"> <TestPart>Wso2</TestPart> </p:hello>\";\r\n \t\tclient = new ServiceClient(ctx, null);\r\n \t\tclient.engageModule(\"rampart\");\r\n \t\tclient.engageModule(\"addressing\");\r\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}