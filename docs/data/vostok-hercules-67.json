{
    "project_name": "vostok-hercules",
    "error_id": "67",
    "information": {
        "errors": [
            {
                "line": "174",
                "severity": "warning",
                "message": "Line is longer than 160 characters (found 196).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    HttpStatusCodes.BAD_REQUEST,\n                    MimeTypes.TEXT_PLAIN,\n                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n            return;\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/67/ReadTimelineHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/67/ReadTimelineHandler.java\nindex 62e9c0ada5d..b86f36ec124 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/67/ReadTimelineHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/67/ReadTimelineHandler.java\n@@ -32,174 +32,175 @@ import java.util.Optional;\n  */\n public class ReadTimelineHandler implements HttpHandler {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(ReadTimelineHandler.class);\n-\n-    private static final TimelineStateReader STATE_READER = new TimelineStateReader();\n-    private static final TimelineByteContentWriter CONTENT_WRITER = new TimelineByteContentWriter();\n-\n-    private static final String REASON_MISSING_PARAM = \"Missing required parameter \";\n-\n-    private static final String PARAM_TIMELINE = \"timeline\";\n-    private static final String PARAM_SHARD_INDEX = \"shardIndex\";\n-    private static final String PARAM_SHARD_COUNT = \"shardCount\";\n-    private static final String PARAM_TAKE = \"take\";\n-    private static final String PARAM_FROM = \"from\";\n-    private static final String PARAM_TO = \"to\";\n-\n-    private final TimelineRepository timelineRepository;\n-    private final TimelineReader timelineReader;\n-    private final AuthManager authManager;\n-    private final int timetrapCountLimit;\n-\n-    public ReadTimelineHandler(TimelineRepository timelineRepository, TimelineReader timelineReader, AuthManager authManager) {\n-        this.timelineRepository = timelineRepository;\n-        this.timelineReader = timelineReader;\n-        this.authManager = authManager;\n-        this.timetrapCountLimit = timelineReader.getTimetrapCountLimit();\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ReadTimelineHandler.class);\n+\n+  private static final TimelineStateReader STATE_READER = new TimelineStateReader();\n+  private static final TimelineByteContentWriter CONTENT_WRITER = new TimelineByteContentWriter();\n+\n+  private static final String REASON_MISSING_PARAM = \"Missing required parameter \";\n+\n+  private static final String PARAM_TIMELINE = \"timeline\";\n+  private static final String PARAM_SHARD_INDEX = \"shardIndex\";\n+  private static final String PARAM_SHARD_COUNT = \"shardCount\";\n+  private static final String PARAM_TAKE = \"take\";\n+  private static final String PARAM_FROM = \"from\";\n+  private static final String PARAM_TO = \"to\";\n+\n+  private final TimelineRepository timelineRepository;\n+  private final TimelineReader timelineReader;\n+  private final AuthManager authManager;\n+  private final int timetrapCountLimit;\n+\n+  public ReadTimelineHandler(TimelineRepository timelineRepository, TimelineReader timelineReader, AuthManager authManager) {\n+    this.timelineRepository = timelineRepository;\n+    this.timelineReader = timelineReader;\n+    this.authManager = authManager;\n+    this.timetrapCountLimit = timelineReader.getTimetrapCountLimit();\n+  }\n+\n+  public static boolean isTimetrapCountLimitExceeded(long from, long to, long timetrapSize, int timetrapCountLimit) {\n+    return (to - from) >= TimeUtil.millisToTicks(timetrapCountLimit * timetrapSize);\n+  }\n+\n+  @Override\n+  public void handle(HttpServerRequest request) {\n+    Optional<Integer> optionalContentLength = request.getContentLength();\n+    if (!optionalContentLength.isPresent()) {\n+      request.complete(HttpStatusCodes.LENGTH_REQUIRED);\n+      return;\n     }\n \n-    public static boolean isTimetrapCountLimitExceeded(long from, long to, long timetrapSize, int timetrapCountLimit) {\n-        return (to - from) >= TimeUtil.millisToTicks(timetrapCountLimit * timetrapSize);\n+    String apiKey = request.getHeader(\"apiKey\");\n+    if (StringUtil.isNullOrEmpty(apiKey)) {\n+      request.complete(HttpStatusCodes.UNAUTHORIZED);\n+      return;\n     }\n \n-    @Override\n-    public void handle(HttpServerRequest request) {\n-        Optional<Integer> optionalContentLength = request.getContentLength();\n-        if (!optionalContentLength.isPresent()) {\n-            request.complete(HttpStatusCodes.LENGTH_REQUIRED);\n-            return;\n-        }\n+    ParameterValue<String> timelineName = QueryUtil.get(QueryParameters.TIMELINE, request);\n+    if (!timelineName.isOk()) {\n+      request.complete(\n+        HttpStatusCodes.BAD_REQUEST,\n+        MimeTypes.TEXT_PLAIN,\n+        \"Parameter \" + QueryParameters.TIMELINE.name() + \" error: \" + timelineName.result().error());\n+      return;\n+    }\n \n-        String apiKey = request.getHeader(\"apiKey\");\n-        if (StringUtil.isNullOrEmpty(apiKey)) {\n-            request.complete(HttpStatusCodes.UNAUTHORIZED);\n-            return;\n-        }\n+    AuthResult authResult = authManager.authRead(apiKey, timelineName.get());\n \n-        ParameterValue<String> timelineName = QueryUtil.get(QueryParameters.TIMELINE, request);\n-        if (!timelineName.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TIMELINE.name() + \" error: \" + timelineName.result().error());\n-            return;\n-        }\n+    if (!authResult.isSuccess()) {\n+      if (authResult.isUnknown()) {\n+        request.complete(HttpStatusCodes.UNAUTHORIZED);\n+        return;\n+      }\n+      request.complete(HttpStatusCodes.FORBIDDEN);\n+      return;\n+    }\n \n-        AuthResult authResult = authManager.authRead(apiKey, timelineName.get());\n+    ParameterValue<Integer> shardIndex = QueryUtil.get(QueryParameters.SHARD_INDEX, request);\n+    if (!shardIndex.isOk()) {\n+      request.complete(\n+        HttpStatusCodes.BAD_REQUEST,\n+        MimeTypes.TEXT_PLAIN,\n+        \"Parameter \" + QueryParameters.SHARD_INDEX.name() + \" error: \" + shardIndex.result().error());\n+      return;\n+    }\n \n-        if (!authResult.isSuccess()) {\n-            if (authResult.isUnknown()) {\n-                request.complete(HttpStatusCodes.UNAUTHORIZED);\n-                return;\n-            }\n-            request.complete(HttpStatusCodes.FORBIDDEN);\n-            return;\n-        }\n+    ParameterValue<Integer> shardCount = QueryUtil.get(QueryParameters.SHARD_COUNT, request);\n+    if (!shardCount.isOk()) {\n+      request.complete(\n+        HttpStatusCodes.BAD_REQUEST,\n+        MimeTypes.TEXT_PLAIN,\n+        \"Parameter \" + QueryParameters.SHARD_COUNT.name() + \" error: \" + shardCount.result().error());\n+      return;\n+    }\n \n-        ParameterValue<Integer> shardIndex = QueryUtil.get(QueryParameters.SHARD_INDEX, request);\n-        if (!shardIndex.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.SHARD_INDEX.name() + \" error: \" + shardIndex.result().error());\n-            return;\n-        }\n+    if (shardCount.get() <= shardIndex.get()) {\n+      request.complete(\n+        HttpStatusCodes.BAD_REQUEST,\n+        MimeTypes.TEXT_PLAIN,\n+        \"Invalid parameters: \" + QueryParameters.SHARD_COUNT.name() + \" must be > \" + QueryParameters.SHARD_INDEX.name());\n+      return;\n+    }\n \n-        ParameterValue<Integer> shardCount = QueryUtil.get(QueryParameters.SHARD_COUNT, request);\n-        if (!shardCount.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.SHARD_COUNT.name() + \" error: \" + shardCount.result().error());\n-            return;\n-        }\n+    ParameterValue<Integer> take = QueryUtil.get(QueryParameters.TAKE, request);\n+    if (!take.isOk()) {\n+      request.complete(\n+        HttpStatusCodes.BAD_REQUEST,\n+        MimeTypes.TEXT_PLAIN,\n+        \"Parameter \" + QueryParameters.TAKE.name() + \" error: \" + take.result().error());\n+      return;\n+    }\n \n-        if (shardCount.get() <= shardIndex.get()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Invalid parameters: \" + QueryParameters.SHARD_COUNT.name() + \" must be > \" + QueryParameters.SHARD_INDEX.name());\n-            return;\n-        }\n+    ParameterValue<Long> from = QueryUtil.get(QueryParameters.FROM, request);\n+    if (!from.isOk()) {\n+      request.complete(\n+        HttpStatusCodes.BAD_REQUEST,\n+        MimeTypes.TEXT_PLAIN,\n+        \"Parameter \" + QueryParameters.FROM.name() + \" error: \" + from.result().error());\n+      return;\n+    }\n \n-        ParameterValue<Integer> take = QueryUtil.get(QueryParameters.TAKE, request);\n-        if (!take.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TAKE.name() + \" error: \" + take.result().error());\n-            return;\n-        }\n+    ParameterValue<Long> to = QueryUtil.get(QueryParameters.TO, request);\n+    if (!to.isOk()) {\n+      request.complete(\n+        HttpStatusCodes.BAD_REQUEST,\n+        MimeTypes.TEXT_PLAIN,\n+        \"Parameter \" + QueryParameters.TO.name() + \" error: \" + to.result().error());\n+      return;\n+    }\n \n-        ParameterValue<Long> from = QueryUtil.get(QueryParameters.FROM, request);\n-        if (!from.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.FROM.name() + \" error: \" + from.result().error());\n-            return;\n-        }\n+    Timeline timeline;\n+    try {\n+      Optional<Timeline> optionalTimeline = timelineRepository.read(timelineName.get());\n+      if (!optionalTimeline.isPresent()) {\n+        request.complete(HttpStatusCodes.NOT_FOUND);\n+        return;\n+      }\n+      timeline = optionalTimeline.get();\n+    } catch (CuratorException ex) {\n+      LOGGER.error(\"Curator exception when read Stream\", ex);\n+      request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n+      return;\n+    } catch (DeserializationException ex) {\n+      LOGGER.error(\"Deserialization exception of Stream\", ex);\n+      request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n+      return;\n+    }\n \n-        ParameterValue<Long> to = QueryUtil.get(QueryParameters.TO, request);\n-        if (!to.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TO.name() + \" error: \" + to.result().error());\n-            return;\n-        }\n+    if (isTimetrapCountLimitExceeded(from.get(), to.get(), timeline.getTimetrapSize(), timetrapCountLimit)) {\n+      request.complete(\n+        HttpStatusCodes.BAD_REQUEST,\n+        MimeTypes.TEXT_PLAIN,\n+        \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" +\n+          (to.get() - from.get()) + \" ticks\");\n+      return;\n+    }\n \n-        Timeline timeline;\n+    request.readBodyAsync((r, bytes) -> request.dispatchAsync(\n+      () -> {\n         try {\n-            Optional<Timeline> optionalTimeline = timelineRepository.read(timelineName.get());\n-            if (!optionalTimeline.isPresent()) {\n-                request.complete(HttpStatusCodes.NOT_FOUND);\n-                return;\n-            }\n-            timeline = optionalTimeline.get();\n-        } catch (CuratorException ex) {\n-            LOGGER.error(\"Curator exception when read Stream\", ex);\n-            request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n-            return;\n-        } catch (DeserializationException ex) {\n-            LOGGER.error(\"Deserialization exception of Stream\", ex);\n-            request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n-            return;\n-        }\n-\n-        if (isTimetrapCountLimitExceeded(from.get(), to.get(), timeline.getTimetrapSize(), timetrapCountLimit)) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n-            return;\n+          TimelineState readState = STATE_READER.read(new Decoder(bytes));\n+\n+          TimelineByteContent byteContent = timelineReader.readTimeline(\n+            timeline,\n+            readState,\n+            shardIndex.get(),\n+            shardCount.get(),\n+            take.get(),\n+            from.get(),\n+            to.get());\n+\n+          ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+          Encoder encoder = new Encoder(stream);\n+          CONTENT_WRITER.write(encoder, byteContent);\n+\n+          request.getResponse().send(ByteBuffer.wrap(stream.toByteArray()));\n+        } catch (Exception e) {\n+          LOGGER.error(\"Error on processing request\", e);\n+          request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n         }\n-\n-        request.readBodyAsync((r, bytes) -> request.dispatchAsync(\n-                () -> {\n-                    try {\n-                        TimelineState readState = STATE_READER.read(new Decoder(bytes));\n-\n-                        TimelineByteContent byteContent = timelineReader.readTimeline(\n-                                timeline,\n-                                readState,\n-                                shardIndex.get(),\n-                                shardCount.get(),\n-                                take.get(),\n-                                from.get(),\n-                                to.get());\n-\n-                        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n-                        Encoder encoder = new Encoder(stream);\n-                        CONTENT_WRITER.write(encoder, byteContent);\n-\n-                        request.getResponse().send(ByteBuffer.wrap(stream.toByteArray()));\n-                    } catch (Exception e) {\n-                        LOGGER.error(\"Error on processing request\", e);\n-                        request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n-                    }\n-                }));\n-    }\n+      }));\n+  }\n \n \n }\n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/67/ReadTimelineHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/67/ReadTimelineHandler.java\nindex 62e9c0ada5d..f8889a40efe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/67/ReadTimelineHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/67/ReadTimelineHandler.java\n@@ -200,6 +200,4 @@ public class ReadTimelineHandler implements HttpHandler {\n                     }\n                 }));\n     }\n-\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/67/ReadTimelineHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/67/ReadTimelineHandler.java\nindex 62e9c0ada5d..b3468a1eb75 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/67/ReadTimelineHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/67/ReadTimelineHandler.java\n@@ -22,7 +22,6 @@ import ru.kontur.vostok.hercules.protocol.encoder.TimelineByteContentWriter;\n import ru.kontur.vostok.hercules.util.parameter.ParameterValue;\n import ru.kontur.vostok.hercules.util.text.StringUtil;\n import ru.kontur.vostok.hercules.util.time.TimeUtil;\n-\n import java.io.ByteArrayOutputStream;\n import java.nio.ByteBuffer;\n import java.util.Optional;\n@@ -30,28 +29,29 @@ import java.util.Optional;\n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class ReadTimelineHandler implements HttpHandler {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ReadTimelineHandler.class);\n-\n     private static final TimelineStateReader STATE_READER = new TimelineStateReader();\n     private static final TimelineByteContentWriter CONTENT_WRITER = new TimelineByteContentWriter();\n-\n     private static final String REASON_MISSING_PARAM = \"Missing required parameter \";\n-\n     private static final String PARAM_TIMELINE = \"timeline\";\n     private static final String PARAM_SHARD_INDEX = \"shardIndex\";\n     private static final String PARAM_SHARD_COUNT = \"shardCount\";\n     private static final String PARAM_TAKE = \"take\";\n     private static final String PARAM_FROM = \"from\";\n     private static final String PARAM_TO = \"to\";\n-\n     private final TimelineRepository timelineRepository;\n     private final TimelineReader timelineReader;\n     private final AuthManager authManager;\n     private final int timetrapCountLimit;\n \n-    public ReadTimelineHandler(TimelineRepository timelineRepository, TimelineReader timelineReader, AuthManager authManager) {\n+    public ReadTimelineHandler(\n+        TimelineRepository timelineRepository,\n+        TimelineReader timelineReader, AuthManager authManager\n+    ) {\n         this.timelineRepository = timelineRepository;\n         this.timelineReader = timelineReader;\n         this.authManager = authManager;\n@@ -78,74 +78,58 @@ public class ReadTimelineHandler implements HttpHandler {\n \n         ParameterValue<String> timelineName = QueryUtil.get(QueryParameters.TIMELINE, request);\n         if (!timelineName.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TIMELINE.name() + \" error: \" + timelineName.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.TIMELINE.name() + \" error: \" + timelineName.result()\n+            .error());\n             return;\n         }\n \n         AuthResult authResult = authManager.authRead(apiKey, timelineName.get());\n-\n         if (!authResult.isSuccess()) {\n             if (authResult.isUnknown()) {\n                 request.complete(HttpStatusCodes.UNAUTHORIZED);\n                 return;\n             }\n+\n             request.complete(HttpStatusCodes.FORBIDDEN);\n             return;\n         }\n \n         ParameterValue<Integer> shardIndex = QueryUtil.get(QueryParameters.SHARD_INDEX, request);\n         if (!shardIndex.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.SHARD_INDEX.name() + \" error: \" + shardIndex.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.SHARD_INDEX.name() + \" error: \" + shardIndex.result()\n+            .error());\n             return;\n         }\n \n         ParameterValue<Integer> shardCount = QueryUtil.get(QueryParameters.SHARD_COUNT, request);\n         if (!shardCount.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.SHARD_COUNT.name() + \" error: \" + shardCount.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.SHARD_COUNT.name() + \" error: \" + shardCount.result()\n+            .error());\n             return;\n         }\n-\n         if (shardCount.get() <= shardIndex.get()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Invalid parameters: \" + QueryParameters.SHARD_COUNT.name() + \" must be > \" + QueryParameters.SHARD_INDEX.name());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Invalid parameters: \" + QueryParameters.SHARD_COUNT.name() + \" must be > \" + QueryParameters.SHARD_INDEX.name());\n             return;\n         }\n \n         ParameterValue<Integer> take = QueryUtil.get(QueryParameters.TAKE, request);\n         if (!take.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TAKE.name() + \" error: \" + take.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.TAKE.name() + \" error: \" + take.result()\n+            .error());\n             return;\n         }\n \n         ParameterValue<Long> from = QueryUtil.get(QueryParameters.FROM, request);\n         if (!from.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.FROM.name() + \" error: \" + from.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.FROM.name() + \" error: \" + from.result()\n+            .error());\n             return;\n         }\n \n         ParameterValue<Long> to = QueryUtil.get(QueryParameters.TO, request);\n         if (!to.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TO.name() + \" error: \" + to.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.TO.name() + \" error: \" + to.result()\n+            .error());\n             return;\n         }\n \n@@ -156,6 +140,7 @@ public class ReadTimelineHandler implements HttpHandler {\n                 request.complete(HttpStatusCodes.NOT_FOUND);\n                 return;\n             }\n+\n             timeline = optionalTimeline.get();\n         } catch (CuratorException ex) {\n             LOGGER.error(\"Curator exception when read Stream\", ex);\n@@ -166,40 +151,32 @@ public class ReadTimelineHandler implements HttpHandler {\n             request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n             return;\n         }\n-\n         if (isTimetrapCountLimitExceeded(from.get(), to.get(), timeline.getTimetrapSize(), timetrapCountLimit)) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \"\n+            + (to.get() - from.get()) + \" ticks\");\n             return;\n         }\n \n-        request.readBodyAsync((r, bytes) -> request.dispatchAsync(\n-                () -> {\n-                    try {\n-                        TimelineState readState = STATE_READER.read(new Decoder(bytes));\n-\n-                        TimelineByteContent byteContent = timelineReader.readTimeline(\n-                                timeline,\n-                                readState,\n-                                shardIndex.get(),\n-                                shardCount.get(),\n-                                take.get(),\n-                                from.get(),\n-                                to.get());\n-\n-                        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n-                        Encoder encoder = new Encoder(stream);\n-                        CONTENT_WRITER.write(encoder, byteContent);\n-\n-                        request.getResponse().send(ByteBuffer.wrap(stream.toByteArray()));\n-                    } catch (Exception e) {\n-                        LOGGER.error(\"Error on processing request\", e);\n-                        request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n-                    }\n-                }));\n+        request.readBodyAsync((r, bytes) -> request.dispatchAsync(() -> {\n+                                                try {\n+                                                    TimelineState readState = STATE_READER.read(new Decoder(bytes));\n+                                                    TimelineByteContent byteContent = timelineReader.readTimeline(\n+                                                        timeline,\n+                                                        readState,\n+                                                        shardIndex.get(),\n+                                                        shardCount.get(),\n+                                                        take.get(),\n+                                                        from.get(),\n+                                                        to.get()\n+                                            );\n+                                                    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+                                                    Encoder encoder = new Encoder(stream);\n+                                                    CONTENT_WRITER.write(encoder, byteContent);\n+                                                    request.getResponse().send(ByteBuffer.wrap(stream.toByteArray()));\n+                                                } catch (Exception e) {\n+                                                    LOGGER.error(\"Error on processing request\", e);\n+                                                    request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n+                                                }\n+                                            }));\n     }\n-\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 75
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "174",
                    "column": "62",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "174",
                    "column": "105",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "174",
                    "column": "161",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "174",
                    "column": "171",
                    "severity": "warning",
                    "message": "'-' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "174",
                    "column": "171",
                    "severity": "warning",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "174",
                    "column": "183",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "174",
                    "column": "183",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "174",
                    "column": "194",
                    "severity": "warning",
                    "message": "'return' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/67/ReadTimelineHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/67/ReadTimelineHandler.java\nindex 62e9c0ada5d..ae53114a1e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/67/ReadTimelineHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/67/ReadTimelineHandler.java\n@@ -171,8 +171,7 @@ public class ReadTimelineHandler implements HttpHandler {\n             request.complete(\n                     HttpStatusCodes.BAD_REQUEST,\n                     MimeTypes.TEXT_PLAIN,\n-                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n-            return;\n+                        \"Time interval should not exceeded \" +TimeUtil.millisToTicks(timetrapCountLimit *timeline.getTimetrapSize()) + \" ticks, but requested \" +(to.get()-from.get())+\" ticks\");return;\n         }\n \n         request.readBodyAsync((r, bytes) -> request.dispatchAsync(\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}