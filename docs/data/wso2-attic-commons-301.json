{
    "project_name": "wso2-attic-commons",
    "error_id": "301",
    "information": {
        "errors": [
            {
                "line": "76",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     */\n    private boolean checkCondition() throws FaultException {\n        return getBpelRuntime().getExpLangRuntime().evaluateAsBoolean(getORepeatUntil().untilCondition,getEvaluationContext());\n    }\n\n    private class WAITER extends BpelJacobRunnable {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/301/REPEATUNTIL.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/301/REPEATUNTIL.java\nindex cf516ca01a1..191a3b04c6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/301/REPEATUNTIL.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/301/REPEATUNTIL.java\n@@ -73,8 +73,8 @@ public class REPEATUNTIL extends ACTIVITY {\n      * @throws FaultException in case of standard expression fault (e.g. selection failure)\n      */\n     private boolean checkCondition() throws FaultException {\n-        return getBpelRuntime().getExpLangRuntime().evaluateAsBoolean(getORepeatUntil().untilCondition,getEvaluationContext());\n-    }\n+return getBpelRuntime().getExpLangRuntime().evaluateAsBoolean(getORepeatUntil().untilCondition,getEvaluationContext());\n+}\n \n     private class WAITER extends BpelJacobRunnable {\n         private static final long serialVersionUID = -7645042174027252066L;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/301/REPEATUNTIL.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/301/REPEATUNTIL.java\nindex cf516ca01a1..f0704488b28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/301/REPEATUNTIL.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/301/REPEATUNTIL.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.rtrep.v1;\n \n import java.util.HashSet;\n@@ -33,101 +34,108 @@ import org.apache.ode.jacob.SynchChannel;\n import org.w3c.dom.Element;\n \n public class REPEATUNTIL extends ACTIVITY {\n-    private static final long serialVersionUID = 1L;\n-\n-    private static final Log __log = LogFactory.getLog(WHILE.class);\n-\n-    private Set<CompensationHandler> _compHandlers = new HashSet<CompensationHandler>();\n-\n-    public REPEATUNTIL(ActivityInfo self, ScopeFrame scopeFrame, LinkFrame linkFrame) {\n-        super(self, scopeFrame, linkFrame);\n+  private static final long serialVersionUID = 1L;\n+\n+  private static final Log __log = LogFactory.getLog(WHILE.class);\n+\n+  private Set<CompensationHandler> _compHandlers = new HashSet<CompensationHandler>();\n+\n+  public REPEATUNTIL(ActivityInfo self, ScopeFrame scopeFrame, LinkFrame linkFrame) {\n+    super(self, scopeFrame, linkFrame);\n+  }\n+\n+  public void run() {\n+    ActivityInfo child = new ActivityInfo(genMonotonic(),\n+      getORepeatUntil().activity,\n+      newChannel(TerminationChannel.class), newChannel(ParentScopeChannel.class));\n+    instance(createChild(child, _scopeFrame, _linkFrame));\n+    instance(new WAITER(child));\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see java.lang.Object#toString()\n+   */\n+  public String toString() {\n+    return \"<T:Act:RepeatUntil:\" + _self.o + \">\";\n+  }\n+\n+  protected Log log() {\n+    return __log;\n+  }\n+\n+  private ORepeatUntil getORepeatUntil() {\n+    return (ORepeatUntil) _self.o;\n+  }\n+\n+  /**\n+   * Evaluates the while condition.\n+   *\n+   * @return <code>true</code> if the while condition is satisfied, <code>false</code> otherwise.\n+   * @throws FaultException in case of standard expression fault (e.g. selection failure)\n+   */\n+  private boolean checkCondition() throws FaultException {\n+    return getBpelRuntime().getExpLangRuntime()\n+      .evaluateAsBoolean(getORepeatUntil().untilCondition, getEvaluationContext());\n+  }\n+\n+  private class WAITER extends BpelJacobRunnable {\n+    private static final long serialVersionUID = -7645042174027252066L;\n+    private ActivityInfo _child;\n+    private boolean _terminated;\n+\n+    WAITER(ActivityInfo child) {\n+      _child = child;\n     }\n \n     public void run() {\n-        ActivityInfo child = new ActivityInfo(genMonotonic(),\n-                getORepeatUntil().activity,\n-                newChannel(TerminationChannel.class), newChannel(ParentScopeChannel.class));\n-        instance(createChild(child, _scopeFrame, _linkFrame));  \n-        instance(new WAITER(child));\n-    }\n-\n-    /* (non-Javadoc)\n-    * @see java.lang.Object#toString()\n-    */\n-    public String toString() {\n-        return \"<T:Act:RepeatUntil:\" + _self.o + \">\";\n-    }\n+      object(false, new TerminationChannelListener(_self.self) {\n+        private static final long serialVersionUID = -5471984635653784051L;\n \n-    protected Log log() {\n-        return __log;\n-    }\n-\n-    private ORepeatUntil getORepeatUntil() {\n-        return (ORepeatUntil)_self.o;\n-    }\n+        public void terminate() {\n+          _terminated = true;\n+          replication(_child.self).terminate();\n+          instance(WAITER.this);\n+        }\n+      }.or(new ParentScopeChannelListener(_child.parent) {\n+        private static final long serialVersionUID = 3907167240907524405L;\n \n-    /**\n-     * Evaluates the while condition.\n-     *\n-     * @return <code>true</code> if the while condition is satisfied, <code>false</code> otherwise.\n-     * @throws FaultException in case of standard expression fault (e.g. selection failure)\n-     */\n-    private boolean checkCondition() throws FaultException {\n-        return getBpelRuntime().getExpLangRuntime().evaluateAsBoolean(getORepeatUntil().untilCondition,getEvaluationContext());\n-    }\n+        public void compensate(OScope scope, SynchChannel ret) {\n+          _self.parent.compensate(scope, ret);\n+          instance(WAITER.this);\n+        }\n \n-    private class WAITER extends BpelJacobRunnable {\n-        private static final long serialVersionUID = -7645042174027252066L;\n-        private ActivityInfo _child;\n-        private boolean _terminated;\n+        public void completed(FaultData faultData, Set<CompensationHandler> compensations) {\n+          _compHandlers.addAll(compensations);\n+          if (_terminated || faultData != null) {\n+            _self.parent.completed(faultData, _compHandlers);\n+          } else {\n+\n+            boolean condResult = false;\n+\n+            try {\n+              condResult = checkCondition();\n+            } catch (FaultException fe) {\n+              __log.error(fe);\n+              _self.parent.completed(createFault(fe.getQName(), _self.o), _compHandlers);\n+              return;\n+            }\n+            if (!condResult) {\n+              instance(REPEATUNTIL.this);\n+            } else {\n+              _self.parent.completed(null, _compHandlers);\n+            }\n+          }\n+        }\n \n-        WAITER(ActivityInfo child) {\n-            _child = child;\n+        public void cancelled() {\n+          completed(null, CompensationHandler.emptySet());\n         }\n \n-        public void run() {\n-            object(false, new TerminationChannelListener(_self.self) {\n-                private static final long serialVersionUID = -5471984635653784051L;\n-\n-                public void terminate() {\n-                    _terminated = true;\n-                    replication(_child.self).terminate();\n-                    instance(WAITER.this);\n-                }\n-            }.or(new ParentScopeChannelListener(_child.parent) {\n-                private static final long serialVersionUID = 3907167240907524405L;\n-\n-                public void compensate(OScope scope, SynchChannel ret) {\n-                    _self.parent.compensate(scope,ret);\n-                    instance(WAITER.this);\n-                }\n-\n-                public void completed(FaultData faultData, Set<CompensationHandler> compensations) {\n-                    _compHandlers.addAll(compensations);\n-                    if (_terminated || faultData != null)\n-                        _self.parent.completed(faultData, _compHandlers);\n-                    else {\n-\n-                        boolean condResult = false;\n-\n-                        try {\n-                            condResult = checkCondition();\n-                        } catch (FaultException fe) {\n-                            __log.error(fe);\n-                            _self.parent.completed(createFault(fe.getQName(), _self.o),_compHandlers);\n-                            return;\n-                        }\n-                        if (!condResult)\n-                            instance(REPEATUNTIL.this);\n-                        else\n-                            _self.parent.completed(null,_compHandlers);\n-                    }\n-                }\n-\n-                public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n-                public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n-            }));\n+        public void failure(String reason, Element data) {\n+          completed(null, CompensationHandler.emptySet());\n         }\n+      }));\n     }\n+  }\n \n }\n",
            "diff_size": 149
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/301/REPEATUNTIL.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/301/REPEATUNTIL.java\nindex cf516ca01a1..91a123edb53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/301/REPEATUNTIL.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/301/REPEATUNTIL.java\n@@ -47,8 +47,8 @@ public class REPEATUNTIL extends ACTIVITY {\n         ActivityInfo child = new ActivityInfo(genMonotonic(),\n                 getORepeatUntil().activity,\n                 newChannel(TerminationChannel.class), newChannel(ParentScopeChannel.class));\n-        instance(createChild(child, _scopeFrame, _linkFrame));  \n-        instance(new WAITER(child));\n+        instance(createChild(child, _scopeFrame, _linkFrame));\n+instance(new WAITER(child));\n     }\n \n     /* (non-Javadoc)\n@@ -124,10 +124,12 @@ public class REPEATUNTIL extends ACTIVITY {\n                     }\n                 }\n \n-                public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n-                public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n+                public void cancelled() {\n+    completed(null, CompensationHandler.emptySet()); }\n+                public void failure(String reason, Element data) {\n+    completed(null, CompensationHandler.emptySet()); }\n             }));\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/301/REPEATUNTIL.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/301/REPEATUNTIL.java\nindex cf516ca01a1..191a3b04c6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/301/REPEATUNTIL.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/301/REPEATUNTIL.java\n@@ -73,8 +73,8 @@ public class REPEATUNTIL extends ACTIVITY {\n      * @throws FaultException in case of standard expression fault (e.g. selection failure)\n      */\n     private boolean checkCondition() throws FaultException {\n-        return getBpelRuntime().getExpLangRuntime().evaluateAsBoolean(getORepeatUntil().untilCondition,getEvaluationContext());\n-    }\n+return getBpelRuntime().getExpLangRuntime().evaluateAsBoolean(getORepeatUntil().untilCondition,getEvaluationContext());\n+}\n \n     private class WAITER extends BpelJacobRunnable {\n         private static final long serialVersionUID = -7645042174027252066L;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/301/REPEATUNTIL.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/301/REPEATUNTIL.java\nindex cf516ca01a1..050aaf41cdc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/301/REPEATUNTIL.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/301/REPEATUNTIL.java\n@@ -73,7 +73,8 @@ public class REPEATUNTIL extends ACTIVITY {\n      * @throws FaultException in case of standard expression fault (e.g. selection failure)\n      */\n     private boolean checkCondition() throws FaultException {\n-        return getBpelRuntime().getExpLangRuntime().evaluateAsBoolean(getORepeatUntil().untilCondition,getEvaluationContext());\n+        return getBpelRuntime().getExpLangRuntime().evaluateAsBoolean(\n+            getORepeatUntil().untilCondition,getEvaluationContext());\n     }\n \n     private class WAITER extends BpelJacobRunnable {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}