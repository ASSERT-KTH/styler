{
    "project_name": "Angel-ML-angel",
    "error_id": "1215",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1215/RowsUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1215/RowsUpdateSplit.java\nindex c836694a5ec..dbd5e90b88c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1215/RowsUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1215/RowsUpdateSplit.java\n@@ -28,11 +28,11 @@ import it.unimi.dsi.fastutil.longs.Long2FloatOpenHashMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n \n public class RowsUpdateSplit implements Serialize {\n-  private final TVector [] rows;\n+  private final TVector[] rows;\n   private final int startPos;\n   private final int endPos;\n \n-  public RowsUpdateSplit(TVector [] rows, int startPos, int endPos) {\n+  public RowsUpdateSplit(TVector[] rows, int startPos, int endPos) {\n     this.rows = rows;\n     this.startPos = startPos;\n     this.endPos = endPos;\n@@ -42,7 +42,7 @@ public class RowsUpdateSplit implements Serialize {\n     this(null, 0, 0);\n   }\n \n-  public TVector [] getRows() {\n+  public TVector[] getRows() {\n     return rows;\n   }\n \n@@ -57,7 +57,7 @@ public class RowsUpdateSplit implements Serialize {\n   @Override\n   public void serialize(ByteBuf buf) {\n     buf.writeInt(endPos - startPos);\n-    for(int i = startPos; i < endPos; i++) {\n+    for (int i = startPos; i < endPos; i++) {\n       serializeRow(buf, rows[i]);\n     }\n   }\n@@ -67,9 +67,9 @@ public class RowsUpdateSplit implements Serialize {\n     buf.writeInt(row.getType().getNumber());\n     switch (row.getType()) {\n       case T_DOUBLE_DENSE: {\n-        double [] values = ((DenseDoubleVector) row).getValues();\n+        double[] values = ((DenseDoubleVector) row).getValues();\n         buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n+        for (int i = 0; i < values.length; i++) {\n           buf.writeDouble(values[i]);\n         }\n         break;\n@@ -80,7 +80,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Int2DoubleMap.Entry> iter = data.int2DoubleEntrySet().fastIterator();\n         Int2DoubleMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeInt(entry.getIntKey());\n           buf.writeDouble(entry.getDoubleValue());\n@@ -93,7 +93,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Long2DoubleMap.Entry> iter = data.long2DoubleEntrySet().fastIterator();\n         Long2DoubleMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeLong(entry.getLongKey());\n           buf.writeDouble(entry.getDoubleValue());\n@@ -102,9 +102,9 @@ public class RowsUpdateSplit implements Serialize {\n       }\n \n       case T_FLOAT_DENSE: {\n-        float [] values = ((DenseFloatVector) row).getValues();\n+        float[] values = ((DenseFloatVector) row).getValues();\n         buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n+        for (int i = 0; i < values.length; i++) {\n           buf.writeFloat(values[i]);\n         }\n         break;\n@@ -115,7 +115,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Int2FloatMap.Entry> iter = data.int2FloatEntrySet().fastIterator();\n         Int2FloatMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeInt(entry.getIntKey());\n           buf.writeFloat(entry.getFloatValue());\n@@ -128,7 +128,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Long2FloatMap.Entry> iter = data.long2FloatEntrySet().fastIterator();\n         Long2FloatMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeLong(entry.getLongKey());\n           buf.writeFloat(entry.getFloatValue());\n@@ -137,9 +137,9 @@ public class RowsUpdateSplit implements Serialize {\n       }\n \n       case T_INT_DENSE: {\n-        int [] values = ((DenseIntVector) row).getValues();\n+        int[] values = ((DenseIntVector) row).getValues();\n         buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n+        for (int i = 0; i < values.length; i++) {\n           buf.writeInt(values[i]);\n         }\n         break;\n@@ -150,7 +150,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Int2IntMap.Entry> iter = data.int2IntEntrySet().fastIterator();\n         Int2IntMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeInt(entry.getIntKey());\n           buf.writeInt(entry.getIntValue());\n@@ -171,7 +171,7 @@ public class RowsUpdateSplit implements Serialize {\n   @Override\n   public int bufferLen() {\n     int len = 4;\n-    for(int i = startPos; i < endPos; i++) {\n+    for (int i = startPos; i < endPos; i++) {\n       len += rowBufferLen(rows[i]);\n     }\n     return len;\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1215/RowsUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1215/RowsUpdateSplit.java\nindex c836694a5ec..dc09798330f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1215/RowsUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1215/RowsUpdateSplit.java\n@@ -28,11 +28,11 @@ import it.unimi.dsi.fastutil.longs.Long2FloatOpenHashMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n \n public class RowsUpdateSplit implements Serialize {\n-  private final TVector [] rows;\n+  private final TVector[] rows;\n   private final int startPos;\n   private final int endPos;\n \n-  public RowsUpdateSplit(TVector [] rows, int startPos, int endPos) {\n+  public RowsUpdateSplit(TVector[] rows, int startPos, int endPos) {\n     this.rows = rows;\n     this.startPos = startPos;\n     this.endPos = endPos;\n@@ -42,7 +42,7 @@ public class RowsUpdateSplit implements Serialize {\n     this(null, 0, 0);\n   }\n \n-  public TVector [] getRows() {\n+  public TVector[] getRows() {\n     return rows;\n   }\n \n@@ -57,7 +57,7 @@ public class RowsUpdateSplit implements Serialize {\n   @Override\n   public void serialize(ByteBuf buf) {\n     buf.writeInt(endPos - startPos);\n-    for(int i = startPos; i < endPos; i++) {\n+    for (int i = startPos; i < endPos; i++) {\n       serializeRow(buf, rows[i]);\n     }\n   }\n@@ -69,7 +69,7 @@ public class RowsUpdateSplit implements Serialize {\n       case T_DOUBLE_DENSE: {\n         double [] values = ((DenseDoubleVector) row).getValues();\n         buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n+        for (int i = 0; i < values.length; i++) {\n           buf.writeDouble(values[i]);\n         }\n         break;\n@@ -80,7 +80,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Int2DoubleMap.Entry> iter = data.int2DoubleEntrySet().fastIterator();\n         Int2DoubleMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeInt(entry.getIntKey());\n           buf.writeDouble(entry.getDoubleValue());\n@@ -93,7 +93,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Long2DoubleMap.Entry> iter = data.long2DoubleEntrySet().fastIterator();\n         Long2DoubleMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeLong(entry.getLongKey());\n           buf.writeDouble(entry.getDoubleValue());\n@@ -102,9 +102,9 @@ public class RowsUpdateSplit implements Serialize {\n       }\n \n       case T_FLOAT_DENSE: {\n-        float [] values = ((DenseFloatVector) row).getValues();\n+        float[] values = ((DenseFloatVector) row).getValues();\n         buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n+        for (int i = 0; i < values.length; i++) {\n           buf.writeFloat(values[i]);\n         }\n         break;\n@@ -115,7 +115,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Int2FloatMap.Entry> iter = data.int2FloatEntrySet().fastIterator();\n         Int2FloatMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeInt(entry.getIntKey());\n           buf.writeFloat(entry.getFloatValue());\n@@ -128,7 +128,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Long2FloatMap.Entry> iter = data.long2FloatEntrySet().fastIterator();\n         Long2FloatMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeLong(entry.getLongKey());\n           buf.writeFloat(entry.getFloatValue());\n@@ -137,9 +137,9 @@ public class RowsUpdateSplit implements Serialize {\n       }\n \n       case T_INT_DENSE: {\n-        int [] values = ((DenseIntVector) row).getValues();\n+        int[] values = ((DenseIntVector) row).getValues();\n         buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n+        for (int i = 0; i < values.length; i++) {\n           buf.writeInt(values[i]);\n         }\n         break;\n@@ -150,7 +150,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Int2IntMap.Entry> iter = data.int2IntEntrySet().fastIterator();\n         Int2IntMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeInt(entry.getIntKey());\n           buf.writeInt(entry.getIntValue());\n@@ -171,7 +171,7 @@ public class RowsUpdateSplit implements Serialize {\n   @Override\n   public int bufferLen() {\n     int len = 4;\n-    for(int i = startPos; i < endPos; i++) {\n+    for (int i = startPos; i < endPos; i++) {\n       len += rowBufferLen(rows[i]);\n     }\n     return len;\n@@ -183,32 +183,26 @@ public class RowsUpdateSplit implements Serialize {\n       case T_DOUBLE_DENSE:\n         len += 8 * row.size();\n         break;\n-\n-      case T_DOUBLE_SPARSE:\n+  case T_DOUBLE_SPARSE:\n         len += 12 * row.size();\n         break;\n-\n-      case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n       case T_INT_DENSE:\n         len += 4 * row.size();\n         break;\n-\n-      case T_FLOAT_SPARSE:\n+  case T_FLOAT_SPARSE:\n       case T_INT_SPARSE:\n         len += 8 * row.size();\n         break;\n-\n-      case T_DOUBLE_SPARSE_LONGKEY:\n+  case T_DOUBLE_SPARSE_LONGKEY:\n         len += 16 * row.size();\n         break;\n-\n-      case T_FLOAT_SPARSE_LONGKEY:\n+  case T_FLOAT_SPARSE_LONGKEY:\n         len += 12 * row.size();\n         break;\n-\n-      default:\n+  default:\n         throw new UnsupportedOperationException(\"Unsupport row type \" + row.getType());\n-    }\n+  }\n \n     return len;\n   }\n@@ -216,4 +210,4 @@ public class RowsUpdateSplit implements Serialize {\n   public int size() {\n     return endPos - startPos;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}