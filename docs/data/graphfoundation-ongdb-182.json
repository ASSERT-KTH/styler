{
    "project_name": "graphfoundation-ongdb",
    "error_id": "182",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "147",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "160",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "205",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/182/NodeRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/182/NodeRecordCheck.java\nindex 4cad0caa88f..cd14804959c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/182/NodeRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/182/NodeRecordCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import org.neo4j.consistency.report.ConsistencyReport;\n@@ -39,245 +40,240 @@ import static org.neo4j.helpers.ArrayUtil.union;\n \n public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport>\n {\n-    @SafeVarargs\n-    static NodeRecordCheck forSparseNodes( RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>... additional )\n-    {\n-        RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>[] basic =\n-                ArrayUtil.<RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>>array( LabelsField.LABELS );\n-        return new NodeRecordCheck( union( basic, additional ) );\n-    }\n+  @SafeVarargs\n+  static NodeRecordCheck forSparseNodes(RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>... additional)\n+  {\n+    RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>[] basic =\n+        ArrayUtil.<RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>>array(LabelsField.LABELS);\n+    return new NodeRecordCheck(union(basic, additional));\n+  }\n \n-    @SafeVarargs\n-    static NodeRecordCheck forDenseNodes( RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>... additional )\n-    {\n-        RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>[] basic =\n-                ArrayUtil.<RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>>array(\n-                        RelationshipGroupField.NEXT_GROUP, LabelsField.LABELS );\n-        return new NodeRecordCheck( union( basic, additional ) );\n-    }\n+  @SafeVarargs\n+  static NodeRecordCheck forDenseNodes(RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>... additional)\n+  {\n+    RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>[] basic =\n+        ArrayUtil.<RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>>array(\n+            RelationshipGroupField.NEXT_GROUP, LabelsField.LABELS);\n+    return new NodeRecordCheck(union(basic, additional));\n+  }\n \n-    public static NodeRecordCheck toCheckNextRel()\n-    {\n-        return new NodeRecordCheck( RelationshipField.NEXT_REL );\n-    }\n+  public static NodeRecordCheck toCheckNextRel()\n+  {\n+    return new NodeRecordCheck(RelationshipField.NEXT_REL);\n+  }\n \n-    public static NodeRecordCheck toCheckNextRelationshipGroup()\n-    {\n-        return new NodeRecordCheck( RelationshipGroupField.NEXT_GROUP );\n-    }\n+  public static NodeRecordCheck toCheckNextRelationshipGroup()\n+  {\n+    return new NodeRecordCheck(RelationshipGroupField.NEXT_GROUP);\n+  }\n \n-    @SafeVarargs\n-    NodeRecordCheck( RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>... fields )\n-    {\n-        super( fields );\n-    }\n+  @SafeVarargs\n+  NodeRecordCheck(RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>... fields)\n+  {\n+    super(fields);\n+  }\n \n-    public NodeRecordCheck()\n-    {\n-        this( RelationshipField.NEXT_REL, LabelsField.LABELS );\n-    }\n+  public NodeRecordCheck()\n+  {\n+    this(RelationshipField.NEXT_REL, LabelsField.LABELS);\n+  }\n \n-    enum RelationshipGroupField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>,\n-            ComparativeRecordChecker<NodeRecord, RelationshipGroupRecord, ConsistencyReport.NodeConsistencyReport>\n-    {\n-        NEXT_GROUP\n+  enum RelationshipGroupField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>,\n+      ComparativeRecordChecker<NodeRecord, RelationshipGroupRecord, ConsistencyReport.NodeConsistencyReport>\n+  {\n+    NEXT_GROUP\n         {\n-            @Override\n-            public void checkConsistency( NodeRecord node, CheckerEngine<NodeRecord, NodeConsistencyReport> engine,\n-                    RecordAccess records )\n+          @Override\n+          public void checkConsistency(NodeRecord node, CheckerEngine<NodeRecord, NodeConsistencyReport> engine,\n+                                       RecordAccess records)\n+          {\n+            if (!Record.NO_NEXT_RELATIONSHIP.is(node.getNextRel()))\n             {\n-                if ( !Record.NO_NEXT_RELATIONSHIP.is( node.getNextRel() ) )\n-                {\n-                    engine.comparativeCheck( records.relationshipGroup( node.getNextRel() ), this );\n-                }\n+              engine.comparativeCheck(records.relationshipGroup(node.getNextRel()), this);\n             }\n+          }\n \n-            @Override\n-            public long valueFrom( NodeRecord node )\n+          @Override\n+          public long valueFrom(NodeRecord node)\n+          {\n+            return node.getNextRel();\n+          }\n+\n+          @Override\n+          public void checkReference(NodeRecord record, RelationshipGroupRecord group,\n+                                     CheckerEngine<NodeRecord, NodeConsistencyReport> engine, RecordAccess records)\n+          {\n+            if (!group.inUse())\n             {\n-                return node.getNextRel();\n+              engine.report().relationshipGroupNotInUse(group);\n+            } else\n+            {\n+              if (group.getOwningNode() != record.getId())\n+              {\n+                engine.report().relationshipGroupHasOtherOwner(group);\n+              }\n             }\n+          }\n+        }\n+  }\n \n-            @Override\n-            public void checkReference( NodeRecord record, RelationshipGroupRecord group,\n-                    CheckerEngine<NodeRecord, NodeConsistencyReport> engine, RecordAccess records )\n+  enum RelationshipField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>,\n+      ComparativeRecordChecker<NodeRecord, RelationshipRecord, ConsistencyReport.NodeConsistencyReport>\n+  {\n+    NEXT_REL\n+        {\n+          @Override\n+          public void checkConsistency(NodeRecord node,\n+                                       CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+                                       RecordAccess records)\n+          {\n+            if (!Record.NO_NEXT_RELATIONSHIP.is(node.getNextRel()))\n             {\n-                if ( !group.inUse() )\n+              engine.comparativeCheck(records.relationship(node.getNextRel()), this);\n+            }\n+          }\n+\n+          @Override\n+          public void checkReference(NodeRecord node, RelationshipRecord relationship,\n+                                     CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+                                     RecordAccess records)\n+          {\n+            if (!relationship.inUse())\n+            {\n+              engine.report().relationshipNotInUse(relationship);\n+            } else\n+            {\n+              NodeField selectedField = NodeField.select(relationship, node);\n+              if (selectedField == null)\n+              {\n+                engine.report().relationshipForOtherNode(relationship);\n+              } else\n+              {\n+                NodeField[] fields;\n+                if (relationship.getFirstNode() == relationship.getSecondNode())\n+                { // this relationship is a loop, report both inconsistencies\n+                  fields = NodeField.values();\n+                } else\n                 {\n-                    engine.report().relationshipGroupNotInUse( group );\n+                  fields = new NodeField[] {selectedField};\n                 }\n-                else\n+                for (NodeField field : fields)\n                 {\n-                    if ( group.getOwningNode() != record.getId() )\n-                    {\n-                        engine.report().relationshipGroupHasOtherOwner( group );\n-                    }\n+                  if (!field.isFirst(relationship))\n+                  {\n+                    field.notFirstInChain(engine.report(), relationship);\n+                  }\n+                  // TODO we should check that the number of relationships in the chain match\n+                  // the value in the \"prev\" field.\n                 }\n+              }\n             }\n+          }\n+\n+          @Override\n+          public long valueFrom(NodeRecord record)\n+          {\n+            return record.getNextRel();\n+          }\n         }\n-    }\n+  }\n \n-    enum RelationshipField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>,\n-            ComparativeRecordChecker<NodeRecord, RelationshipRecord, ConsistencyReport.NodeConsistencyReport>\n-    {\n-        NEXT_REL\n+  enum LabelsField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>,\n+      ComparativeRecordChecker<NodeRecord, LabelTokenRecord, ConsistencyReport.NodeConsistencyReport>\n+  {\n+    LABELS\n         {\n-            @Override\n-            public void checkConsistency( NodeRecord node,\n-                                          CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n-                                          RecordAccess records )\n+          @Override\n+          public void checkConsistency(NodeRecord node,\n+                                       CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+                                       RecordAccess records)\n+          {\n+            NodeLabels nodeLabels = NodeLabelsField.parseLabelsField(node);\n+            if (nodeLabels instanceof DynamicNodeLabels)\n             {\n-                if ( !Record.NO_NEXT_RELATIONSHIP.is( node.getNextRel() ) )\n-                {\n-                    engine.comparativeCheck( records.relationship( node.getNextRel() ), this );\n-                }\n+              DynamicNodeLabels dynamicNodeLabels = (DynamicNodeLabels) nodeLabels;\n+              long firstRecordId = dynamicNodeLabels.getFirstDynamicRecordId();\n+              RecordReference<DynamicRecord> firstRecordReference = records.nodeLabels(firstRecordId);\n+              engine.comparativeCheck(firstRecordReference,\n+                  new LabelChainWalker<>(new NodeLabelsComparativeRecordChecker()));\n+            } else\n+            {\n+              validateLabelIds(nodeLabels.get(null), engine, records);\n             }\n+          }\n \n-            @Override\n-            public void checkReference( NodeRecord node, RelationshipRecord relationship,\n+          private void validateLabelIds(long[] labelIds,\n                                         CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n-                                        RecordAccess records )\n+                                        RecordAccess records)\n+          {\n+            for (long labelId : labelIds)\n             {\n-                if ( !relationship.inUse() )\n-                {\n-                    engine.report().relationshipNotInUse( relationship );\n-                }\n-                else\n-                {\n-                    NodeField selectedField = NodeField.select( relationship, node );\n-                    if ( selectedField == null )\n-                    {\n-                        engine.report().relationshipForOtherNode( relationship );\n-                    }\n-                    else\n-                    {\n-                        NodeField[] fields;\n-                        if ( relationship.getFirstNode() == relationship.getSecondNode() )\n-                        { // this relationship is a loop, report both inconsistencies\n-                            fields = NodeField.values();\n-                        }\n-                        else\n-                        {\n-                            fields = new NodeField[]{selectedField};\n-                        }\n-                        for ( NodeField field : fields )\n-                        {\n-                            if ( !field.isFirst( relationship ) )\n-                            {\n-                                field.notFirstInChain( engine.report(), relationship );\n-                            }\n-                            // TODO we should check that the number of relationships in the chain match\n-                            // the value in the \"prev\" field.\n-                        }\n-                    }\n-                }\n+              engine.comparativeCheck(records.label((int) labelId), this);\n             }\n-\n-            @Override\n-            public long valueFrom( NodeRecord record )\n+            // This first loop, before sorting happens, verifies that labels are ordered like they are supposed to\n+            boolean outOfOrder = false;\n+            for (int i = 1; i < labelIds.length; i++)\n             {\n-                return record.getNextRel();\n+              if (labelIds[i - 1] > labelIds[i])\n+              {\n+                engine.report().labelsOutOfOrder(labelIds[i - 1], labelIds[i]);\n+                outOfOrder = true;\n+              }\n             }\n-        }\n-    }\n-\n-    enum LabelsField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>,\n-            ComparativeRecordChecker<NodeRecord, LabelTokenRecord, ConsistencyReport.NodeConsistencyReport>\n-    {\n-        LABELS\n-        {\n-            @Override\n-            public void checkConsistency( NodeRecord node,\n-                                          CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n-                                          RecordAccess records )\n+            if (outOfOrder)\n             {\n-                NodeLabels nodeLabels = NodeLabelsField.parseLabelsField( node );\n-                if ( nodeLabels instanceof DynamicNodeLabels )\n-                {\n-                    DynamicNodeLabels dynamicNodeLabels = (DynamicNodeLabels) nodeLabels;\n-                    long firstRecordId = dynamicNodeLabels.getFirstDynamicRecordId();\n-                    RecordReference<DynamicRecord> firstRecordReference = records.nodeLabels( firstRecordId );\n-                    engine.comparativeCheck( firstRecordReference,\n-                            new LabelChainWalker<>( new NodeLabelsComparativeRecordChecker() ) );\n-                }\n-                else\n-                {\n-                    validateLabelIds( nodeLabels.get( null ), engine, records );\n-                }\n+              sort(labelIds);\n+            }\n+            for (int i = 1; i < labelIds.length; i++)\n+            {\n+              if (labelIds[i - 1] == labelIds[i])\n+              {\n+                engine.report().labelDuplicate(labelIds[i]);\n+              }\n             }\n+          }\n \n-            private void validateLabelIds( long[] labelIds,\n-                                           CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n-                                           RecordAccess records )\n+          @Override\n+          public void checkReference(NodeRecord node, LabelTokenRecord labelTokenRecord,\n+                                     CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+                                     RecordAccess records)\n+          {\n+            if (!labelTokenRecord.inUse())\n             {\n-                for ( long labelId : labelIds )\n-                {\n-                    engine.comparativeCheck( records.label( (int) labelId ), this );\n-                }\n-                // This first loop, before sorting happens, verifies that labels are ordered like they are supposed to\n-                boolean outOfOrder = false;\n-                for ( int i = 1; i < labelIds.length; i++ )\n-                {\n-                    if ( labelIds[i - 1] > labelIds[i] )\n-                    {\n-                        engine.report().labelsOutOfOrder( labelIds[i - 1], labelIds[i] );\n-                        outOfOrder = true;\n-                    }\n-                }\n-                if ( outOfOrder )\n-                {\n-                    sort( labelIds );\n-                }\n-                for ( int i = 1; i < labelIds.length; i++ )\n-                {\n-                    if ( labelIds[i - 1] == labelIds[i] )\n-                    {\n-                        engine.report().labelDuplicate( labelIds[i] );\n-                    }\n-                }\n+              engine.report().labelNotInUse(labelTokenRecord);\n             }\n+          }\n+\n+          @Override\n+          public long valueFrom(NodeRecord record)\n+          {\n+            return record.getLabelField();\n+          }\n \n+          class NodeLabelsComparativeRecordChecker implements\n+              LabelChainWalker.Validator<NodeRecord, ConsistencyReport.NodeConsistencyReport>\n+          {\n             @Override\n-            public void checkReference( NodeRecord node, LabelTokenRecord labelTokenRecord,\n-                                        CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n-                                        RecordAccess records )\n+            public void onRecordNotInUse(DynamicRecord dynamicRecord, CheckerEngine<NodeRecord,\n+                ConsistencyReport.NodeConsistencyReport> engine)\n             {\n-                if ( !labelTokenRecord.inUse() )\n-                {\n-                    engine.report().labelNotInUse( labelTokenRecord );\n-                }\n+              engine.report().dynamicLabelRecordNotInUse(dynamicRecord);\n             }\n \n             @Override\n-            public long valueFrom( NodeRecord record )\n+            public void onRecordChainCycle(DynamicRecord record, CheckerEngine<NodeRecord, ConsistencyReport\n+                .NodeConsistencyReport> engine)\n             {\n-                return record.getLabelField();\n+              engine.report().dynamicRecordChainCycle(record);\n             }\n \n-            class NodeLabelsComparativeRecordChecker implements\n-                    LabelChainWalker.Validator<NodeRecord, ConsistencyReport.NodeConsistencyReport>\n+            @Override\n+            public void onWellFormedChain(long[] labelIds,\n+                                          CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine, RecordAccess records)\n             {\n-                @Override\n-                public void onRecordNotInUse( DynamicRecord dynamicRecord, CheckerEngine<NodeRecord,\n-                        ConsistencyReport.NodeConsistencyReport> engine )\n-                {\n-                    engine.report().dynamicLabelRecordNotInUse( dynamicRecord );\n-                }\n-\n-                @Override\n-                public void onRecordChainCycle( DynamicRecord record, CheckerEngine<NodeRecord, ConsistencyReport\n-                        .NodeConsistencyReport> engine )\n-                {\n-                    engine.report().dynamicRecordChainCycle( record );\n-                }\n-\n-                @Override\n-                public void onWellFormedChain( long[] labelIds,\n-                        CheckerEngine<NodeRecord,ConsistencyReport.NodeConsistencyReport> engine, RecordAccess records )\n-                {\n-                    validateLabelIds( labelIds, engine, records );\n-                }\n+              validateLabelIds(labelIds, engine, records);\n             }\n+          }\n         }\n-    }\n+  }\n }\n",
            "diff_size": 289
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 220).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 211).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "203",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "229",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/182/NodeRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/182/NodeRecordCheck.java\nindex 4cad0caa88f..b2de3788a78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/182/NodeRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/182/NodeRecordCheck.java\n@@ -42,18 +42,15 @@ public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, Consistenc\n     @SafeVarargs\n     static NodeRecordCheck forSparseNodes( RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>... additional )\n     {\n-        RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>[] basic =\n-                ArrayUtil.<RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>>array( LabelsField.LABELS );\n-        return new NodeRecordCheck( union( basic, additional ) );\n+        RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>[] basic = ArrayUtil.<RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>>array( LabelsField.LABELS );\n+return new NodeRecordCheck( union( basic, additional ) );\n     }\n \n     @SafeVarargs\n     static NodeRecordCheck forDenseNodes( RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>... additional )\n     {\n-        RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>[] basic =\n-                ArrayUtil.<RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>>array(\n-                        RelationshipGroupField.NEXT_GROUP, LabelsField.LABELS );\n-        return new NodeRecordCheck( union( basic, additional ) );\n+        RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>[] basic = ArrayUtil.<RecordField<NodeRecord,ConsistencyReport.NodeConsistencyReport>>array( RelationshipGroupField.NEXT_GROUP, LabelsField.LABELS );\n+return new NodeRecordCheck( union( basic, additional ) );\n     }\n \n     public static NodeRecordCheck toCheckNextRel()\n@@ -77,13 +74,12 @@ public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, Consistenc\n         this( RelationshipField.NEXT_REL, LabelsField.LABELS );\n     }\n \n-    enum RelationshipGroupField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>,\n-            ComparativeRecordChecker<NodeRecord, RelationshipGroupRecord, ConsistencyReport.NodeConsistencyReport>\n+    enum RelationshipGroupField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>, ComparativeRecordChecker<NodeRecord, RelationshipGroupRecord, ConsistencyReport.NodeConsistencyReport>\n     {\n         NEXT_GROUP\n         {\n             @Override\n-            public void checkConsistency( NodeRecord node, CheckerEngine<NodeRecord, NodeConsistencyReport> engine,\n+            public void checkConsistency( NodeRecord node, CheckerEngine<NodeRecord,NodeConsistencyReport> engine,\n                     RecordAccess records )\n             {\n                 if ( !Record.NO_NEXT_RELATIONSHIP.is( node.getNextRel() ) )\n@@ -99,8 +95,7 @@ public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, Consistenc\n             }\n \n             @Override\n-            public void checkReference( NodeRecord record, RelationshipGroupRecord group,\n-                    CheckerEngine<NodeRecord, NodeConsistencyReport> engine, RecordAccess records )\n+            public void checkReference( NodeRecord record, RelationshipGroupRecord group, CheckerEngine<NodeRecord,NodeConsistencyReport> engine, RecordAccess records )\n             {\n                 if ( !group.inUse() )\n                 {\n@@ -117,16 +112,14 @@ public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, Consistenc\n         }\n     }\n \n-    enum RelationshipField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>,\n-            ComparativeRecordChecker<NodeRecord, RelationshipRecord, ConsistencyReport.NodeConsistencyReport>\n+    enum RelationshipField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>, ComparativeRecordChecker<NodeRecord, RelationshipRecord, ConsistencyReport.NodeConsistencyReport>\n     {\n         NEXT_REL\n         {\n             @Override\n-            public void checkConsistency( NodeRecord node,\n-                                          CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+            public void checkConsistency( NodeRecord node, CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n                                           RecordAccess records )\n-            {\n+{\n                 if ( !Record.NO_NEXT_RELATIONSHIP.is( node.getNextRel() ) )\n                 {\n                     engine.comparativeCheck( records.relationship( node.getNextRel() ), this );\n@@ -134,10 +127,9 @@ public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, Consistenc\n             }\n \n             @Override\n-            public void checkReference( NodeRecord node, RelationshipRecord relationship,\n-                                        CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+            public void checkReference( NodeRecord node, RelationshipRecord relationship, CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n                                         RecordAccess records )\n-            {\n+{\n                 if ( !relationship.inUse() )\n                 {\n                     engine.report().relationshipNotInUse( relationship );\n@@ -181,24 +173,21 @@ public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, Consistenc\n         }\n     }\n \n-    enum LabelsField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>,\n-            ComparativeRecordChecker<NodeRecord, LabelTokenRecord, ConsistencyReport.NodeConsistencyReport>\n+    enum LabelsField implements RecordField<NodeRecord, ConsistencyReport.NodeConsistencyReport>, ComparativeRecordChecker<NodeRecord, LabelTokenRecord, ConsistencyReport.NodeConsistencyReport>\n     {\n         LABELS\n         {\n             @Override\n-            public void checkConsistency( NodeRecord node,\n-                                          CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+            public void checkConsistency( NodeRecord node, CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n                                           RecordAccess records )\n-            {\n+{\n                 NodeLabels nodeLabels = NodeLabelsField.parseLabelsField( node );\n                 if ( nodeLabels instanceof DynamicNodeLabels )\n                 {\n                     DynamicNodeLabels dynamicNodeLabels = (DynamicNodeLabels) nodeLabels;\n                     long firstRecordId = dynamicNodeLabels.getFirstDynamicRecordId();\n                     RecordReference<DynamicRecord> firstRecordReference = records.nodeLabels( firstRecordId );\n-                    engine.comparativeCheck( firstRecordReference,\n-                            new LabelChainWalker<>( new NodeLabelsComparativeRecordChecker() ) );\n+                    engine.comparativeCheck( firstRecordReference, new LabelChainWalker<>( new NodeLabelsComparativeRecordChecker() ) );\n                 }\n                 else\n                 {\n@@ -206,13 +195,12 @@ public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, Consistenc\n                 }\n             }\n \n-            private void validateLabelIds( long[] labelIds,\n-                                           CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+            private void validateLabelIds( long[] labelIds, CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n                                            RecordAccess records )\n-            {\n+{\n                 for ( long labelId : labelIds )\n                 {\n-                    engine.comparativeCheck( records.label( (int) labelId ), this );\n+                    engine.comparativeCheck( records.label( ( int) labelId ), this );\n                 }\n                 // This first loop, before sorting happens, verifies that labels are ordered like they are supposed to\n                 boolean outOfOrder = false;\n@@ -238,10 +226,9 @@ public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, Consistenc\n             }\n \n             @Override\n-            public void checkReference( NodeRecord node, LabelTokenRecord labelTokenRecord,\n-                                        CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+            public void checkReference( NodeRecord node, LabelTokenRecord labelTokenRecord, CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n                                         RecordAccess records )\n-            {\n+{\n                 if ( !labelTokenRecord.inUse() )\n                 {\n                     engine.report().labelNotInUse( labelTokenRecord );\n@@ -254,8 +241,7 @@ public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, Consistenc\n                 return record.getLabelField();\n             }\n \n-            class NodeLabelsComparativeRecordChecker implements\n-                    LabelChainWalker.Validator<NodeRecord, ConsistencyReport.NodeConsistencyReport>\n+            class NodeLabelsComparativeRecordChecker implements LabelChainWalker.Validator<NodeRecord, ConsistencyReport.NodeConsistencyReport>\n             {\n                 @Override\n                 public void onRecordNotInUse( DynamicRecord dynamicRecord, CheckerEngine<NodeRecord,\n@@ -265,19 +251,17 @@ public class NodeRecordCheck extends PrimitiveRecordCheck<NodeRecord, Consistenc\n                 }\n \n                 @Override\n-                public void onRecordChainCycle( DynamicRecord record, CheckerEngine<NodeRecord, ConsistencyReport\n-                        .NodeConsistencyReport> engine )\n+                public void onRecordChainCycle( DynamicRecord record, CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine )\n                 {\n                     engine.report().dynamicRecordChainCycle( record );\n                 }\n \n                 @Override\n-                public void onWellFormedChain( long[] labelIds,\n-                        CheckerEngine<NodeRecord,ConsistencyReport.NodeConsistencyReport> engine, RecordAccess records )\n+                public void onWellFormedChain( long[] labelIds, CheckerEngine<NodeRecord,ConsistencyReport.NodeConsistencyReport> engine, RecordAccess records )\n                 {\n                     validateLabelIds( labelIds, engine, records );\n                 }\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}