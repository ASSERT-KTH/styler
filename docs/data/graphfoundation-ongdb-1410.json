{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1410",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1410/ConfigurableIOLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1410/ConfigurableIOLimiter.java\nindex 0286cfd2124..7e47a7b83b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1410/ConfigurableIOLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1410/ConfigurableIOLimiter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.enterprise.transaction.log.checkpoint;\n \n import java.io.Flushable;\n@@ -32,161 +33,160 @@ import org.neo4j.kernel.configuration.Config;\n \n public class ConfigurableIOLimiter implements IOLimiter\n {\n-    private static final AtomicLongFieldUpdater<ConfigurableIOLimiter> stateUpdater =\n-            AtomicLongFieldUpdater.newUpdater( ConfigurableIOLimiter.class, \"state\" );\n-\n-    private static final int NO_LIMIT = 0;\n-    private static final int QUANTUM_MILLIS = 100;\n-    private static final int TIME_BITS = 32;\n-    private static final long TIME_MASK = (1L << TIME_BITS) - 1;\n-    private static final int QUANTUMS_PER_SECOND = (int) (TimeUnit.SECONDS.toMillis( 1 ) / QUANTUM_MILLIS);\n-\n-    private final ObjLongConsumer<Object> pauseNanos;\n-\n-    /**\n-     * Upper 32 bits is the \"disabled counter\", lower 32 bits is the \"IOs per quantum\" field.\n-     * The \"disabled counter\" is modified online in 2-increments, leaving the lowest bit for signalling when\n-     * the limiter disabled by configuration.\n-     */\n-    @SuppressWarnings( \"unused\" ) // Updated via stateUpdater\n-    private volatile long state;\n-\n-    public ConfigurableIOLimiter( Config config )\n+  private static final AtomicLongFieldUpdater<ConfigurableIOLimiter> stateUpdater =\n+      AtomicLongFieldUpdater.newUpdater(ConfigurableIOLimiter.class, \"state\");\n+\n+  private static final int NO_LIMIT = 0;\n+  private static final int QUANTUM_MILLIS = 100;\n+  private static final int TIME_BITS = 32;\n+  private static final long TIME_MASK = (1L << TIME_BITS) - 1;\n+  private static final int QUANTUMS_PER_SECOND = (int) (TimeUnit.SECONDS.toMillis(1) / QUANTUM_MILLIS);\n+\n+  private final ObjLongConsumer<Object> pauseNanos;\n+\n+  /**\n+   * Upper 32 bits is the \"disabled counter\", lower 32 bits is the \"IOs per quantum\" field.\n+   * The \"disabled counter\" is modified online in 2-increments, leaving the lowest bit for signalling when\n+   * the limiter disabled by configuration.\n+   */\n+  @SuppressWarnings(\"unused\") // Updated via stateUpdater\n+  private volatile long state;\n+\n+  public ConfigurableIOLimiter(Config config)\n+  {\n+    this(config, LockSupport::parkNanos);\n+  }\n+\n+  // Only visible for testing.\n+  ConfigurableIOLimiter(Config config, ObjLongConsumer<Object> pauseNanos)\n+  {\n+    this.pauseNanos = pauseNanos;\n+    Integer iops = config.get(GraphDatabaseSettings.check_point_iops_limit);\n+    updateConfiguration(iops);\n+    config.registerDynamicUpdateListener(GraphDatabaseSettings.check_point_iops_limit,\n+        (prev, update) -> updateConfiguration(update));\n+  }\n+\n+  private void updateConfiguration(Integer iops)\n+  {\n+    long oldState;\n+    long newState;\n+    if (iops == null || iops < 1)\n     {\n-        this( config, LockSupport::parkNanos );\n-    }\n-\n-    // Only visible for testing.\n-    ConfigurableIOLimiter( Config config, ObjLongConsumer<Object> pauseNanos )\n+      do\n+      {\n+        oldState = stateUpdater.get(this);\n+        int disabledCounter = getDisabledCounter(oldState);\n+        disabledCounter |= 1; // Raise the \"permanently disabled\" bit.\n+        newState = composeState(disabledCounter, NO_LIMIT);\n+      }\n+      while (!stateUpdater.compareAndSet(this, oldState, newState));\n+    } else\n     {\n-        this.pauseNanos = pauseNanos;\n-        Integer iops = config.get( GraphDatabaseSettings.check_point_iops_limit );\n-        updateConfiguration( iops );\n-        config.registerDynamicUpdateListener( GraphDatabaseSettings.check_point_iops_limit,\n-                ( prev, update ) -> updateConfiguration( update ) );\n+      do\n+      {\n+        oldState = stateUpdater.get(this);\n+        int disabledCounter = getDisabledCounter(oldState);\n+        disabledCounter &= 0xFFFFFFFE; // Mask off \"permanently disabled\" bit.\n+        int iopq = iops / QUANTUMS_PER_SECOND;\n+        newState = composeState(disabledCounter, iopq);\n+      }\n+      while (!stateUpdater.compareAndSet(this, oldState, newState));\n     }\n-\n-    private void updateConfiguration( Integer iops )\n+  }\n+\n+  private long composeState(int disabledCounter, int iopq)\n+  {\n+    return ((long) disabledCounter) << 32 | iopq;\n+  }\n+\n+  private int getIOPQ(long state)\n+  {\n+    return (int) (state & 0x00000000_FFFFFFFFL);\n+  }\n+\n+  private int getDisabledCounter(long state)\n+  {\n+    return (int) (state >>> 32);\n+  }\n+\n+  // The stamp is in two 32-bit parts:\n+  // The high bits are the number of IOs performed since the last pause.\n+  // The low bits is the 32-bit timestamp in milliseconds (~25 day range) since the last pause.\n+  // We keep adding summing up the IOs until either a quantum elapses, or we've exhausted the IOs we're allowed in\n+  // this quantum. If we've exhausted our IOs, we pause for the rest of the quantum.\n+  // We don't make use of the Flushable at this point, because IOs from fsyncs have a high priority, so they\n+  // might jump the IO queue and cause delays for transaction log IOs. Further, fsync on some file systems also\n+  // flush the entire IO queue, which can cause delays on IO rate limited cloud machines.\n+  // We need the Flushable to be implemented in terms of sync_file_range before we can make use of it.\n+  // NOTE: The check-pointer IOPS setting is documented as being a \"best effort\" hint. We are making use of that\n+  // wording here, and not compensating for over-counted IOs. For instance, if we receive 2 quantums worth of IOs\n+  // in one quantum, we are not going to sleep for two quantums. The reason is that such compensation algorithms\n+  // can easily over-compensate, and end up sleeping a lot more than what makes sense for other rate limiting factors\n+  // in the system, thus wasting IO bandwidth. No, \"best effort\" here means that likely end up doing a little bit\n+  // more IO than what we've been configured to allow, but that's okay. If it's a problem, people can just reduce\n+  // their IOPS limit setting a bit more.\n+\n+  @Override\n+  public long maybeLimitIO(long previousStamp, int recentlyCompletedIOs, Flushable flushable)\n+  {\n+    long state = stateUpdater.get(this);\n+    if (getDisabledCounter(state) > 0)\n     {\n-        long oldState;\n-        long newState;\n-        if ( iops == null || iops < 1 )\n-        {\n-            do\n-            {\n-                oldState = stateUpdater.get( this );\n-                int disabledCounter = getDisabledCounter( oldState );\n-                disabledCounter |= 1; // Raise the \"permanently disabled\" bit.\n-                newState = composeState( disabledCounter, NO_LIMIT );\n-            }\n-            while ( !stateUpdater.compareAndSet( this, oldState, newState ) );\n-        }\n-        else\n-        {\n-            do\n-            {\n-                oldState = stateUpdater.get( this );\n-                int disabledCounter = getDisabledCounter( oldState );\n-                disabledCounter &= 0xFFFFFFFE; // Mask off \"permanently disabled\" bit.\n-                int iopq = iops / QUANTUMS_PER_SECOND;\n-                newState = composeState( disabledCounter, iopq );\n-            }\n-            while ( !stateUpdater.compareAndSet( this, oldState, newState ) );\n-        }\n+      return INITIAL_STAMP;\n     }\n \n-    private long composeState( int disabledCounter, int iopq )\n-    {\n-        return ((long) disabledCounter) << 32 | iopq;\n-    }\n+    long now = currentTimeMillis() & TIME_MASK;\n+    long then = previousStamp & TIME_MASK;\n \n-    private int getIOPQ( long state )\n+    if (now - then > QUANTUM_MILLIS)\n     {\n-        return (int) (state & 0x00000000_FFFFFFFFL);\n+      return now + (((long) recentlyCompletedIOs) << TIME_BITS);\n     }\n \n-    private int getDisabledCounter( long state )\n+    long ioSum = (previousStamp >> TIME_BITS) + recentlyCompletedIOs;\n+    if (ioSum >= getIOPQ(state))\n     {\n-        return (int) (state >>> 32);\n+      long millisLeftInQuantum = QUANTUM_MILLIS - (now - then);\n+      pauseNanos.accept(this, TimeUnit.MILLISECONDS.toNanos(millisLeftInQuantum));\n+      return currentTimeMillis() & TIME_MASK;\n     }\n \n-    // The stamp is in two 32-bit parts:\n-    // The high bits are the number of IOs performed since the last pause.\n-    // The low bits is the 32-bit timestamp in milliseconds (~25 day range) since the last pause.\n-    // We keep adding summing up the IOs until either a quantum elapses, or we've exhausted the IOs we're allowed in\n-    // this quantum. If we've exhausted our IOs, we pause for the rest of the quantum.\n-    // We don't make use of the Flushable at this point, because IOs from fsyncs have a high priority, so they\n-    // might jump the IO queue and cause delays for transaction log IOs. Further, fsync on some file systems also\n-    // flush the entire IO queue, which can cause delays on IO rate limited cloud machines.\n-    // We need the Flushable to be implemented in terms of sync_file_range before we can make use of it.\n-    // NOTE: The check-pointer IOPS setting is documented as being a \"best effort\" hint. We are making use of that\n-    // wording here, and not compensating for over-counted IOs. For instance, if we receive 2 quantums worth of IOs\n-    // in one quantum, we are not going to sleep for two quantums. The reason is that such compensation algorithms\n-    // can easily over-compensate, and end up sleeping a lot more than what makes sense for other rate limiting factors\n-    // in the system, thus wasting IO bandwidth. No, \"best effort\" here means that likely end up doing a little bit\n-    // more IO than what we've been configured to allow, but that's okay. If it's a problem, people can just reduce\n-    // their IOPS limit setting a bit more.\n-\n-    @Override\n-    public long maybeLimitIO( long previousStamp, int recentlyCompletedIOs, Flushable flushable )\n-    {\n-        long state = stateUpdater.get( this );\n-        if ( getDisabledCounter( state ) > 0 )\n-        {\n-            return INITIAL_STAMP;\n-        }\n-\n-        long now = currentTimeMillis() & TIME_MASK;\n-        long then = previousStamp & TIME_MASK;\n-\n-        if ( now - then > QUANTUM_MILLIS )\n-        {\n-            return now + (((long) recentlyCompletedIOs) << TIME_BITS);\n-        }\n-\n-        long ioSum = (previousStamp >> TIME_BITS) + recentlyCompletedIOs;\n-        if ( ioSum >= getIOPQ( state ) )\n-        {\n-            long millisLeftInQuantum = QUANTUM_MILLIS - (now - then);\n-            pauseNanos.accept( this, TimeUnit.MILLISECONDS.toNanos( millisLeftInQuantum ) );\n-            return currentTimeMillis() & TIME_MASK;\n-        }\n-\n-        return then + (ioSum << TIME_BITS);\n-    }\n+    return then + (ioSum << TIME_BITS);\n+  }\n \n-    @Override\n-    public void disableLimit()\n+  @Override\n+  public void disableLimit()\n+  {\n+    long currentState;\n+    long newState;\n+    do\n     {\n-        long currentState;\n-        long newState;\n-        do\n-        {\n-            currentState = stateUpdater.get( this );\n-            // Increment by two to leave \"permanently disabled bit\" alone.\n-            int disabledCounter = getDisabledCounter( currentState ) + 2;\n-            newState = composeState( disabledCounter, getIOPQ( currentState ) );\n-        }\n-        while ( !stateUpdater.compareAndSet( this, currentState, newState ) );\n+      currentState = stateUpdater.get(this);\n+      // Increment by two to leave \"permanently disabled bit\" alone.\n+      int disabledCounter = getDisabledCounter(currentState) + 2;\n+      newState = composeState(disabledCounter, getIOPQ(currentState));\n     }\n-\n-    @Override\n-    public void enableLimit()\n+    while (!stateUpdater.compareAndSet(this, currentState, newState));\n+  }\n+\n+  @Override\n+  public void enableLimit()\n+  {\n+    long currentState;\n+    long newState;\n+    do\n     {\n-        long currentState;\n-        long newState;\n-        do\n-        {\n-            currentState = stateUpdater.get( this );\n-            // Decrement by two to leave \"permanently disabled bit\" alone.\n-            int disabledCounter = getDisabledCounter( currentState ) - 2;\n-            newState = composeState( disabledCounter, getIOPQ( currentState ) );\n-        }\n-        while ( !stateUpdater.compareAndSet( this, currentState, newState ) );\n+      currentState = stateUpdater.get(this);\n+      // Decrement by two to leave \"permanently disabled bit\" alone.\n+      int disabledCounter = getDisabledCounter(currentState) - 2;\n+      newState = composeState(disabledCounter, getIOPQ(currentState));\n     }\n+    while (!stateUpdater.compareAndSet(this, currentState, newState));\n+  }\n \n-    private long currentTimeMillis()\n-    {\n-        return System.currentTimeMillis();\n-    }\n+  private long currentTimeMillis()\n+  {\n+    return System.currentTimeMillis();\n+  }\n }\n",
            "diff_size": 218
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "24",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1410/ConfigurableIOLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1410/ConfigurableIOLimiter.java\nindex 0286cfd2124..eb7303dd594 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1410/ConfigurableIOLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1410/ConfigurableIOLimiter.java\n@@ -32,14 +32,13 @@ import org.neo4j.kernel.configuration.Config;\n \n public class ConfigurableIOLimiter implements IOLimiter\n {\n-    private static final AtomicLongFieldUpdater<ConfigurableIOLimiter> stateUpdater =\n-            AtomicLongFieldUpdater.newUpdater( ConfigurableIOLimiter.class, \"state\" );\n+    private static final AtomicLongFieldUpdater<ConfigurableIOLimiter> stateUpdater = AtomicLongFieldUpdater.newUpdater( ConfigurableIOLimiter.class, \"state\" );\n \n-    private static final int NO_LIMIT = 0;\n+private static final int NO_LIMIT = 0;\n     private static final int QUANTUM_MILLIS = 100;\n     private static final int TIME_BITS = 32;\n-    private static final long TIME_MASK = (1L << TIME_BITS) - 1;\n-    private static final int QUANTUMS_PER_SECOND = (int) (TimeUnit.SECONDS.toMillis( 1 ) / QUANTUM_MILLIS);\n+    private static final long TIME_MASK = ( 1L << TIME_BITS) - 1;\n+    private static final int QUANTUMS_PER_SECOND = ( int) (TimeUnit.SECONDS.toMillis( 1 ) / QUANTUM_MILLIS);\n \n     private final ObjLongConsumer<Object> pauseNanos;\n \n@@ -62,8 +61,7 @@ public class ConfigurableIOLimiter implements IOLimiter\n         this.pauseNanos = pauseNanos;\n         Integer iops = config.get( GraphDatabaseSettings.check_point_iops_limit );\n         updateConfiguration( iops );\n-        config.registerDynamicUpdateListener( GraphDatabaseSettings.check_point_iops_limit,\n-                ( prev, update ) -> updateConfiguration( update ) );\n+        config.registerDynamicUpdateListener( GraphDatabaseSettings.check_point_iops_limit,( prev, update ) -> updateConfiguration( update ) );\n     }\n \n     private void updateConfiguration( Integer iops )\n@@ -102,12 +100,12 @@ public class ConfigurableIOLimiter implements IOLimiter\n \n     private int getIOPQ( long state )\n     {\n-        return (int) (state & 0x00000000_FFFFFFFFL);\n+        return ( int) ( state & 0x00000000_FFFFFFFFL);\n     }\n \n     private int getDisabledCounter( long state )\n     {\n-        return (int) (state >>> 32);\n+        return ( int) ( state >>> 32 );\n     }\n \n     // The stamp is in two 32-bit parts:\n@@ -139,7 +137,7 @@ public class ConfigurableIOLimiter implements IOLimiter\n         long now = currentTimeMillis() & TIME_MASK;\n         long then = previousStamp & TIME_MASK;\n \n-        if ( now - then > QUANTUM_MILLIS )\n+        if ( now - then> QUANTUM_MILLIS )\n         {\n             return now + (((long) recentlyCompletedIOs) << TIME_BITS);\n         }\n@@ -147,12 +145,12 @@ public class ConfigurableIOLimiter implements IOLimiter\n         long ioSum = (previousStamp >> TIME_BITS) + recentlyCompletedIOs;\n         if ( ioSum >= getIOPQ( state ) )\n         {\n-            long millisLeftInQuantum = QUANTUM_MILLIS - (now - then);\n+            long millisLeftInQuantum = QUANTUM_MILLIS - ( now - then);\n             pauseNanos.accept( this, TimeUnit.MILLISECONDS.toNanos( millisLeftInQuantum ) );\n             return currentTimeMillis() & TIME_MASK;\n         }\n \n-        return then + (ioSum << TIME_BITS);\n+        return then + ( ioSum << TIME_BITS);\n     }\n \n     @Override\n@@ -189,4 +187,4 @@ public class ConfigurableIOLimiter implements IOLimiter\n     {\n         return System.currentTimeMillis();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}