{
    "project_name": "couchbase-couchbase-jvm-core",
    "error_id": "88",
    "information": {
        "errors": [
            {
                "line": "46",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    public void shouldQueryNonExistentView() {\n        ViewQueryResponse single = cluster()\n            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n            .toBlocking()\n            .single();\n        assertEquals(ResponseStatus.NOT_EXISTS, single.status());",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "47",
                    "column": "17",
                    "severity": "warning",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler/88/ViewMessageTest.java\nindex 8b06dd565c8..e93471b5ce5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler/88/ViewMessageTest.java\n@@ -43,7 +43,8 @@ public class ViewMessageTest extends ClusterDependentTest {\n     @Test\n     public void shouldQueryNonExistentView() {\n         ViewQueryResponse single = cluster()\n-            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n+            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\"\n+                , false, \"debug=true\", bucket(), password()))\n             .toBlocking()\n             .single();\n         assertEquals(ResponseStatus.NOT_EXISTS, single.status());\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/88/ViewMessageTest.java\nindex 8b06dd565c8..016179d368b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/88/ViewMessageTest.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.core.cluster;\n \n import com.couchbase.client.core.message.ResponseStatus;\n@@ -43,7 +44,8 @@ public class ViewMessageTest extends ClusterDependentTest {\n     @Test\n     public void shouldQueryNonExistentView() {\n         ViewQueryResponse single = cluster()\n-            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n+            .<ViewQueryResponse>send(\n+                new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n             .toBlocking()\n             .single();\n         assertEquals(ResponseStatus.NOT_EXISTS, single.status());\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/88/ViewMessageTest.java\nindex 8b06dd565c8..49c230841e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/88/ViewMessageTest.java\n@@ -61,4 +61,4 @@ public class ViewMessageTest extends ClusterDependentTest {\n         });\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/88/ViewMessageTest.java\nindex 8b06dd565c8..96c900a9ee5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/88/ViewMessageTest.java\n@@ -29,7 +29,6 @@ import io.netty.buffer.ByteBuf;\n import io.netty.util.ReferenceCountUtil;\n import org.junit.Test;\n import rx.functions.Action1;\n-\n import static org.junit.Assert.assertEquals;\n \n /**\n@@ -38,14 +37,11 @@ import static org.junit.Assert.assertEquals;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n-public class ViewMessageTest extends ClusterDependentTest {\n \n+public class ViewMessageTest extends ClusterDependentTest {\n     @Test\n     public void shouldQueryNonExistentView() {\n-        ViewQueryResponse single = cluster()\n-            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n-            .toBlocking()\n-            .single();\n+        ViewQueryResponse single = cluster().<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password())).toBlocking().single();\n         assertEquals(ResponseStatus.NOT_EXISTS, single.status());\n         single.info().toBlocking().forEach(new Action1<ByteBuf>() {\n             @Override\n@@ -60,5 +56,4 @@ public class ViewMessageTest extends ClusterDependentTest {\n             }\n         });\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_random/88/ViewMessageTest.java\nindex 8b06dd565c8..4cbdd2a0dec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_random/88/ViewMessageTest.java\n@@ -42,9 +42,7 @@ public class ViewMessageTest extends ClusterDependentTest {\n \n     @Test\n     public void shouldQueryNonExistentView() {\n-        ViewQueryResponse single = cluster()\n-            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n-            .toBlocking()\n+        ViewQueryResponse single = cluster().<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\" ,\"foobar\" ,false,\"debug=true\",bucket(),password())).toBlocking()\n             .single();\n         assertEquals(ResponseStatus.NOT_EXISTS, single.status());\n         single.info().toBlocking().forEach(new Action1<ByteBuf>() {\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "47",
                    "column": "17",
                    "severity": "warning",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_three_grams/88/ViewMessageTest.java\nindex 8b06dd565c8..e93471b5ce5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/88/ViewMessageTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_three_grams/88/ViewMessageTest.java\n@@ -43,7 +43,8 @@ public class ViewMessageTest extends ClusterDependentTest {\n     @Test\n     public void shouldQueryNonExistentView() {\n         ViewQueryResponse single = cluster()\n-            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n+            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\"\n+                , false, \"debug=true\", bucket(), password()))\n             .toBlocking()\n             .single();\n         assertEquals(ResponseStatus.NOT_EXISTS, single.status());\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}