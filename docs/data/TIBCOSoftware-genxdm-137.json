{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "137",
    "information": {
        "errors": [
            {
                "line": "42",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    public XdmContentValidatorImpl(final VxValidator<A> kernel, final AtomBridge<A> atomBridge)\n    {\n\t\tthis.kernel = kernel;\n\t\tthis.atomBridge = atomBridge;\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/137/XdmContentValidatorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/137/XdmContentValidatorImpl.java\nindex c2a94c5adeb..94e855039ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/137/XdmContentValidatorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/137/XdmContentValidatorImpl.java\n@@ -39,7 +39,7 @@ final class XdmContentValidatorImpl<A> implements ValidationHandler<A>\n {\n     public XdmContentValidatorImpl(final VxValidator<A> kernel, final AtomBridge<A> atomBridge)\n     {\n-\t\tthis.kernel = kernel;\n+        this.kernel = kernel;\n \t\tthis.atomBridge = atomBridge;\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/137/XdmContentValidatorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/137/XdmContentValidatorImpl.java\nindex c2a94c5adeb..31a48337084 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/137/XdmContentValidatorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/137/XdmContentValidatorImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation;\n \n import java.io.IOException;\n@@ -35,78 +36,65 @@ import org.genxdm.xs.exceptions.AbortException;\n import org.genxdm.xs.exceptions.SchemaExceptionHandler;\n \n \n-final class XdmContentValidatorImpl<A> implements ValidationHandler<A>\n-{\n-    public XdmContentValidatorImpl(final VxValidator<A> kernel, final AtomBridge<A> atomBridge)\n-    {\n-\t\tthis.kernel = kernel;\n-\t\tthis.atomBridge = atomBridge;\n-\t}\n-\n-    @Override\n-\tpublic void attribute(final String namespaceURI, final String localName, final String prefix, final List<? extends A> data, final QName ignoreMe) throws GenXDMException\n-\t{\n-\t\t// TODO: We don't want to throw the value away.\n-\t\tfinal String strval = Emulation.C14N.atomsToString(data, atomBridge);\n-\t\tm_attributes.add(new VxMapping<QName, String>(new QName(namespaceURI, localName, prefix), strval));\n-\t}\n-\t\n-    @Override\n-\tpublic void attribute(final String namespaceURI, final String localName, final String prefix, final String untypedAtomic, final DtdAttributeKind type) throws GenXDMException\n-\t{\n-\t\tm_attributes.add(new VxMapping<QName, String>(new QName(namespaceURI, localName, prefix), untypedAtomic));\n-\t}\n-\n-    @Override\n-\tpublic void close() throws IOException\n-\t{\n-\t}\n-\n-    @Override\n-\tpublic void comment(final String value) throws GenXDMException\n-\t{\n-\t\t// Ignore. Comments must not interfere with validation.\n-\t}\n-\n-    @Override\n-\tpublic void endDocument() throws GenXDMException\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tkernel.endDocument();\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t}\n-\n-    @Override\n-\tpublic void endElement() throws GenXDMException\n-\t{\n-\t\tflush();\n-\t\ttry\n-\t\t{\n-\t\t\tkernel.endElement();\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t}\n-\n-    @Override\n-\tpublic void flush()\n-\t{\n-        if (m_elementName != null)\n-        {\n-            try\n-            {\n+final class XdmContentValidatorImpl<A> implements ValidationHandler<A> {\n+    public XdmContentValidatorImpl(final VxValidator<A> kernel, final AtomBridge<A> atomBridge) {\n+        this.kernel = kernel;\n+        this.atomBridge = atomBridge;\n+    }\n+\n+    @Override\n+    public void attribute(final String namespaceURI, final String localName, final String prefix,\n+                          final List<? extends A> data, final QName ignoreMe)\n+        throws GenXDMException {\n+        // TODO: We don't want to throw the value away.\n+        final String strval = Emulation.C14N.atomsToString(data, atomBridge);\n+        m_attributes\n+            .add(new VxMapping<QName, String>(new QName(namespaceURI, localName, prefix), strval));\n+    }\n+\n+    @Override\n+    public void attribute(final String namespaceURI, final String localName, final String prefix,\n+                          final String untypedAtomic, final DtdAttributeKind type)\n+        throws GenXDMException {\n+        m_attributes.add(new VxMapping<QName, String>(new QName(namespaceURI, localName, prefix),\n+            untypedAtomic));\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+    }\n+\n+    @Override\n+    public void comment(final String value) throws GenXDMException {\n+        // Ignore. Comments must not interfere with validation.\n+    }\n+\n+    @Override\n+    public void endDocument() throws GenXDMException {\n+        try {\n+            kernel.endDocument();\n+        } catch (final Exception e) {\n+            throw new GenXDMException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void endElement() throws GenXDMException {\n+        flush();\n+        try {\n+            kernel.endElement();\n+        } catch (final Exception e) {\n+            throw new GenXDMException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void flush() {\n+        if (m_elementName != null) {\n+            try {\n                 // if m_elementType is non-null, do an ignore-the-element-name validation\n                 kernel.startElement(m_elementName, m_namespaces, m_attributes, m_elementType);\n-            }\n-            catch (final Exception e)\n-            {\n+            } catch (final Exception e) {\n                 throw new GenXDMException(e);\n             }\n             m_elementType = null; // usually null anyway\n@@ -115,136 +103,119 @@ final class XdmContentValidatorImpl<A> implements ValidationHandler<A>\n             m_attributes.clear(); // done with these, too\n         }\n         // if we have an element without a name, we should prolly become quite angry\n-\t}\n+    }\n \n     @Override\n-\tpublic void namespace(final String prefix, final String namespaceURI) throws GenXDMException\n-\t{\n-\t\tm_namespaces.add(new VxMapping<String, String>(prefix, namespaceURI));\n-\t}\n+    public void namespace(final String prefix, final String namespaceURI) throws GenXDMException {\n+        m_namespaces.add(new VxMapping<String, String>(prefix, namespaceURI));\n+    }\n \n     @Override\n-\tpublic void processingInstruction(final String target, final String data) throws GenXDMException\n-\t{\n-\t\t// Ignore. Processing instructions must not interfere with validation.\n-\t}\n+    public void processingInstruction(final String target, final String data)\n+        throws GenXDMException {\n+        // Ignore. Processing instructions must not interfere with validation.\n+    }\n \n     @Override\n-\tpublic void reset()\n-\t{\n-\t\tkernel.reset();\n-\t}\n+    public void reset() {\n+        kernel.reset();\n+    }\n \n     @Override\n-\tpublic void startDocument(final URI documentURI, final String docTypeDecl) \n-\t    throws GenXDMException\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tkernel.startDocument(documentURI);\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t}\n+    public void startDocument(final URI documentURI, final String docTypeDecl)\n+        throws GenXDMException {\n+        try {\n+            kernel.startDocument(documentURI);\n+        } catch (final Exception e) {\n+            throw new GenXDMException(e);\n+        }\n+    }\n \n     @Override\n-\tpublic void startElement(final String namespaceURI, final String localName, final String prefix, final QName ignoreMe) throws GenXDMException\n-\t{\n-\t    startElement(namespaceURI, localName, prefix);\n-\t}\n+    public void startElement(final String namespaceURI, final String localName, final String prefix,\n+                             final QName ignoreMe) throws GenXDMException {\n+        startElement(namespaceURI, localName, prefix);\n+    }\n \n     @Override\n-    public void startElement(final String namespaceURI, final String localName, final String prefix) throws GenXDMException\n-    {\n+    public void startElement(final String namespaceURI, final String localName, final String prefix)\n+        throws GenXDMException {\n         flush();\n         m_elementName = new QName(namespaceURI, localName, prefix);\n     }\n \n     @Override\n-\tpublic void text(final List<? extends A> value) throws GenXDMException\n-\t{\n-\t\tflush();\n-\t\ttry\n-\t\t{\n-\t\t\tkernel.text(value);\n-\t\t}\n-\t\tcatch (final IOException e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t\tcatch (final AbortException e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t}\n-\n-    @Override\n-\tpublic void text(final String untypedAtomic) throws GenXDMException\n-\t{\n-\t\tflush();\n-\t\ttry\n-\t\t{\n-\t\t\tkernel.characters(untypedAtomic.toCharArray(), 0, untypedAtomic.length());\n-\t\t}\n-\t\tcatch (final IOException e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t\tcatch (final AbortException e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t}\n-\n-    @Override\n-    public SchemaExceptionHandler getSchemaExceptionHandler()\n-    {\n+    public void text(final List<? extends A> value) throws GenXDMException {\n+        flush();\n+        try {\n+            kernel.text(value);\n+        } catch (final IOException e) {\n+            throw new GenXDMException(e);\n+        } catch (final AbortException e) {\n+            throw new GenXDMException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void text(final String untypedAtomic) throws GenXDMException {\n+        flush();\n+        try {\n+            kernel.characters(untypedAtomic.toCharArray(), 0, untypedAtomic.length());\n+        } catch (final IOException e) {\n+            throw new GenXDMException(e);\n+        } catch (final AbortException e) {\n+            throw new GenXDMException(e);\n+        }\n+    }\n+\n+    @Override\n+    public SchemaExceptionHandler getSchemaExceptionHandler() {\n         return errors;\n     }\n-    \n+\n     @Override\n-    public void setIgnores(Iterable<QName> elementNames)\n-    {\n+    public void setIgnores(Iterable<QName> elementNames) {\n         kernel.setIgnoredElements(elementNames);\n     }\n \n     @Override\n-    public void setSchema(SchemaComponentCache cache)\n-    {\n+    public void setSchema(SchemaComponentCache cache) {\n         kernel.setComponentProvider(cache.getComponentProvider());\n     }\n \n     @Override\n-    public void setSchemaExceptionHandler(SchemaExceptionHandler errors)\n-    {\n+    public void setSchemaExceptionHandler(SchemaExceptionHandler errors) {\n         this.errors = errors;\n         kernel.setExceptionHandler(errors);\n     }\n \n     @Override\n-    public void setSequenceHandler(SequenceHandler<A> handler)\n-    {\n+    public void setSequenceHandler(SequenceHandler<A> handler) {\n         kernel.setOutputHandler(new OutputAdapter<A>(handler));\n     }\n-    \n+\n     @Override\n-    public void setInitialElementType(QName name)\n-    {\n+    public void setInitialElementType(QName name) {\n         m_elementType = name;\n     }\n \n \n     private SchemaExceptionHandler errors;\n+\n     private VxValidator<A> kernel;\n \n     private final AtomBridge<A> atomBridge;\n-    private final LinkedList<VxMapping<QName, String>> m_attributes = new LinkedList<VxMapping<QName, String>>();\n+\n+    private final LinkedList<VxMapping<QName, String>> m_attributes =\n+        new LinkedList<VxMapping<QName, String>>();\n+\n     // The name of the element that has yet to be passed to the validation kernel\n     // because we are buffering namespace and attribute events.\n     private QName m_elementName = null;\n+\n     private QName m_elementType = null; // only used once!\n-    private final LinkedList<VxMapping<String, String>> m_namespaces = new LinkedList<VxMapping<String, String>>();\n+\n+    private final LinkedList<VxMapping<String, String>> m_namespaces =\n+        new LinkedList<VxMapping<String, String>>();\n \n }\n",
            "diff_size": 161
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/137/XdmContentValidatorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/137/XdmContentValidatorImpl.java\nindex c2a94c5adeb..b95293c9aca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/137/XdmContentValidatorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/137/XdmContentValidatorImpl.java\n@@ -19,9 +19,7 @@ import java.io.IOException;\n import java.net.URI;\n import java.util.LinkedList;\n import java.util.List;\n-\n import javax.xml.namespace.QName;\n-\n import org.genxdm.exceptions.GenXDMException;\n import org.genxdm.io.DtdAttributeKind;\n import org.genxdm.processor.w3c.xs.validation.api.VxMapping;\n@@ -34,70 +32,79 @@ import org.genxdm.xs.SchemaComponentCache;\n import org.genxdm.xs.exceptions.AbortException;\n import org.genxdm.xs.exceptions.SchemaExceptionHandler;\n \n-\n final class XdmContentValidatorImpl<A> implements ValidationHandler<A>\n {\n     public XdmContentValidatorImpl(final VxValidator<A> kernel, final AtomBridge<A> atomBridge)\n     {\n-\t\tthis.kernel = kernel;\n-\t\tthis.atomBridge = atomBridge;\n-\t}\n-\n-    @Override\n-\tpublic void attribute(final String namespaceURI, final String localName, final String prefix, final List<? extends A> data, final QName ignoreMe) throws GenXDMException\n-\t{\n-\t\t// TODO: We don't want to throw the value away.\n-\t\tfinal String strval = Emulation.C14N.atomsToString(data, atomBridge);\n-\t\tm_attributes.add(new VxMapping<QName, String>(new QName(namespaceURI, localName, prefix), strval));\n-\t}\n-\t\n-    @Override\n-\tpublic void attribute(final String namespaceURI, final String localName, final String prefix, final String untypedAtomic, final DtdAttributeKind type) throws GenXDMException\n-\t{\n-\t\tm_attributes.add(new VxMapping<QName, String>(new QName(namespaceURI, localName, prefix), untypedAtomic));\n-\t}\n-\n-    @Override\n-\tpublic void close() throws IOException\n-\t{\n-\t}\n-\n-    @Override\n-\tpublic void comment(final String value) throws GenXDMException\n-\t{\n-\t\t// Ignore. Comments must not interfere with validation.\n-\t}\n-\n-    @Override\n-\tpublic void endDocument() throws GenXDMException\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tkernel.endDocument();\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t}\n-\n-    @Override\n-\tpublic void endElement() throws GenXDMException\n-\t{\n-\t\tflush();\n-\t\ttry\n-\t\t{\n-\t\t\tkernel.endElement();\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t}\n-\n-    @Override\n-\tpublic void flush()\n-\t{\n+        this.kernel = kernel;\n+        this.atomBridge = atomBridge;\n+    }\n+\n+    @Override\n+    public void attribute(final String namespaceURI, final String localName, final String prefix, final List<? extends A> data, final QName ignoreMe)\n+        throws GenXDMException\n+    {\n+        // TODO: We don't want to throw the value away.\n+        final String strval = Emulation.C14N.atomsToString(data, atomBridge);\n+        m_attributes.add(new VxMapping<QName, String>(new QName(namespaceURI, localName, prefix), strval));\n+    }\n+\n+    @Override\n+    public void attribute(final String namespaceURI, final String localName, final String prefix, final String untypedAtomic, final DtdAttributeKind type)\n+        throws GenXDMException\n+    {\n+        m_attributes.add(new VxMapping<QName, String>(new QName(namespaceURI, localName, prefix), untypedAtomic));\n+    }\n+\n+    @Override\n+    public void close()\n+        throws IOException\n+    {\n+\n+\n+    }\n+\n+    @Override\n+    public void comment(final String value)\n+        throws GenXDMException\n+    {\n+        // Ignore. Comments must not interfere with validation.\n+\n+\n+    }\n+\n+    @Override\n+    public void endDocument()\n+        throws GenXDMException\n+    {\n+        try\n+        {\n+            kernel.endDocument();\n+        }\n+        catch (final Exception e)\n+        {\n+            throw new GenXDMException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void endElement()\n+        throws GenXDMException\n+    {\n+        flush();\n+        try\n+        {\n+            kernel.endElement();\n+        }\n+        catch (final Exception e)\n+        {\n+            throw new GenXDMException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void flush()\n+    {\n         if (m_elementName != null)\n         {\n             try\n@@ -115,95 +122,103 @@ final class XdmContentValidatorImpl<A> implements ValidationHandler<A>\n             m_attributes.clear(); // done with these, too\n         }\n         // if we have an element without a name, we should prolly become quite angry\n-\t}\n+    }\n \n     @Override\n-\tpublic void namespace(final String prefix, final String namespaceURI) throws GenXDMException\n-\t{\n-\t\tm_namespaces.add(new VxMapping<String, String>(prefix, namespaceURI));\n-\t}\n+    public void namespace(final String prefix, final String namespaceURI)\n+        throws GenXDMException\n+    {\n+        m_namespaces.add(new VxMapping<String, String>(prefix, namespaceURI));\n+    }\n \n     @Override\n-\tpublic void processingInstruction(final String target, final String data) throws GenXDMException\n-\t{\n-\t\t// Ignore. Processing instructions must not interfere with validation.\n-\t}\n+    public void processingInstruction(final String target, final String data)\n+        throws GenXDMException\n+    {\n+        // Ignore. Processing instructions must not interfere with validation.\n+\n+\n+    }\n \n     @Override\n-\tpublic void reset()\n-\t{\n-\t\tkernel.reset();\n-\t}\n+    public void reset()\n+    {\n+        kernel.reset();\n+    }\n \n     @Override\n-\tpublic void startDocument(final URI documentURI, final String docTypeDecl) \n-\t    throws GenXDMException\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tkernel.startDocument(documentURI);\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t}\n+    public void startDocument(final URI documentURI, final String docTypeDecl)\n+        throws GenXDMException\n+    {\n+        try\n+        {\n+            kernel.startDocument(documentURI);\n+        }\n+        catch (final Exception e)\n+        {\n+            throw new GenXDMException(e);\n+        }\n+    }\n \n     @Override\n-\tpublic void startElement(final String namespaceURI, final String localName, final String prefix, final QName ignoreMe) throws GenXDMException\n-\t{\n-\t    startElement(namespaceURI, localName, prefix);\n-\t}\n+    public void startElement(final String namespaceURI, final String localName, final String prefix, final QName ignoreMe)\n+        throws GenXDMException\n+    {\n+        startElement(namespaceURI, localName, prefix);\n+    }\n \n     @Override\n-    public void startElement(final String namespaceURI, final String localName, final String prefix) throws GenXDMException\n+    public void startElement(final String namespaceURI, final String localName, final String prefix)\n+        throws GenXDMException\n     {\n         flush();\n         m_elementName = new QName(namespaceURI, localName, prefix);\n     }\n \n     @Override\n-\tpublic void text(final List<? extends A> value) throws GenXDMException\n-\t{\n-\t\tflush();\n-\t\ttry\n-\t\t{\n-\t\t\tkernel.text(value);\n-\t\t}\n-\t\tcatch (final IOException e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t\tcatch (final AbortException e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t}\n-\n-    @Override\n-\tpublic void text(final String untypedAtomic) throws GenXDMException\n-\t{\n-\t\tflush();\n-\t\ttry\n-\t\t{\n-\t\t\tkernel.characters(untypedAtomic.toCharArray(), 0, untypedAtomic.length());\n-\t\t}\n-\t\tcatch (final IOException e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t\tcatch (final AbortException e)\n-\t\t{\n-\t\t\tthrow new GenXDMException(e);\n-\t\t}\n-\t}\n+    public void text(final List<? extends A> value)\n+        throws GenXDMException\n+    {\n+        flush();\n+        try\n+        {\n+            kernel.text(value);\n+        }\n+        catch (final IOException e)\n+        {\n+            throw new GenXDMException(e);\n+        }\n+        catch (final AbortException e)\n+        {\n+            throw new GenXDMException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void text(final String untypedAtomic)\n+        throws GenXDMException\n+    {\n+        flush();\n+        try\n+        {\n+            kernel.characters(untypedAtomic.toCharArray(), 0, untypedAtomic.length());\n+        }\n+        catch (final IOException e)\n+        {\n+            throw new GenXDMException(e);\n+        }\n+        catch (final AbortException e)\n+        {\n+            throw new GenXDMException(e);\n+        }\n+    }\n \n     @Override\n     public SchemaExceptionHandler getSchemaExceptionHandler()\n     {\n         return errors;\n     }\n-    \n+\n     @Override\n     public void setIgnores(Iterable<QName> elementNames)\n     {\n@@ -228,17 +243,15 @@ final class XdmContentValidatorImpl<A> implements ValidationHandler<A>\n     {\n         kernel.setOutputHandler(new OutputAdapter<A>(handler));\n     }\n-    \n+\n     @Override\n     public void setInitialElementType(QName name)\n     {\n         m_elementType = name;\n     }\n \n-\n     private SchemaExceptionHandler errors;\n     private VxValidator<A> kernel;\n-\n     private final AtomBridge<A> atomBridge;\n     private final LinkedList<VxMapping<QName, String>> m_attributes = new LinkedList<VxMapping<QName, String>>();\n     // The name of the element that has yet to be passed to the validation kernel\n@@ -246,5 +259,4 @@ final class XdmContentValidatorImpl<A> implements ValidationHandler<A>\n     private QName m_elementName = null;\n     private QName m_elementType = null; // only used once!\n     private final LinkedList<VxMapping<String, String>> m_namespaces = new LinkedList<VxMapping<String, String>>();\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 150
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/137/XdmContentValidatorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/137/XdmContentValidatorImpl.java\nindex c2a94c5adeb..94e855039ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/137/XdmContentValidatorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/137/XdmContentValidatorImpl.java\n@@ -39,7 +39,7 @@ final class XdmContentValidatorImpl<A> implements ValidationHandler<A>\n {\n     public XdmContentValidatorImpl(final VxValidator<A> kernel, final AtomBridge<A> atomBridge)\n     {\n-\t\tthis.kernel = kernel;\n+        this.kernel = kernel;\n \t\tthis.atomBridge = atomBridge;\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/137/XdmContentValidatorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/137/XdmContentValidatorImpl.java\nindex c2a94c5adeb..94e855039ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/137/XdmContentValidatorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/137/XdmContentValidatorImpl.java\n@@ -39,7 +39,7 @@ final class XdmContentValidatorImpl<A> implements ValidationHandler<A>\n {\n     public XdmContentValidatorImpl(final VxValidator<A> kernel, final AtomBridge<A> atomBridge)\n     {\n-\t\tthis.kernel = kernel;\n+        this.kernel = kernel;\n \t\tthis.atomBridge = atomBridge;\n \t}\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}