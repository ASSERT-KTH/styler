{
    "project_name": "neo4j-neo4j",
    "error_id": "2824",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "147",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2824/StatementResults.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2824/StatementResults.java\nindex 06901329cb5..bdffe5bfb12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2824/StatementResults.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2824/StatementResults.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.fabric.stream;\n \n import reactor.core.publisher.Flux;\n@@ -38,73 +39,71 @@ public final class StatementResults\n     {\n     }\n \n-    public static StatementResult map( StatementResult statementResult, UnaryOperator<Flux<Record>> func )\n+    public static StatementResult map(StatementResult statementResult, UnaryOperator<Flux<Record>> func)\n     {\n-        return new BasicStatementResult( statementResult.columns(),\n-                                         func.apply( statementResult.records() ),\n-                                         statementResult.summary(),\n-                                         statementResult.executionType() );\n+        return new BasicStatementResult(statementResult.columns(),\n+          func.apply(statementResult.records()),\n+          statementResult.summary(),\n+          statementResult.executionType());\n     }\n \n     public static StatementResult initial()\n     {\n-        return new BasicStatementResult( Flux.empty(), Flux.just( Records.empty() ), Mono.empty(), Mono.empty() );\n+        return new BasicStatementResult(Flux.empty(), Flux.just(Records.empty()), Mono.empty(), Mono.empty());\n     }\n \n-    public static StatementResult connectVia( SubscribableExecution execution, QuerySubject subject )\n+    public static StatementResult connectVia(SubscribableExecution execution, QuerySubject subject)\n     {\n-        QueryExecution queryExecution = execution.subscribe( subject );\n-        subject.setQueryExecution( queryExecution );\n+        QueryExecution queryExecution = execution.subscribe(subject);\n+        subject.setQueryExecution(queryExecution);\n         return create(\n-                Flux.fromArray( queryExecution.fieldNames() ),\n-                Flux.from( subject ),\n-                subject.getSummary(),\n-                Mono.just( queryExecution.executionType() )\n+          Flux.fromArray(queryExecution.fieldNames()),\n+          Flux.from(subject),\n+          subject.getSummary(),\n+          Mono.just(queryExecution.executionType())\n         );\n     }\n \n-    public static StatementResult create( Flux<String> columns, Flux<Record> records, Mono<Summary> summary, Mono<QueryExecutionType> executionType )\n+    public static StatementResult create(Flux<String> columns, Flux<Record> records, Mono<Summary> summary, Mono<QueryExecutionType> executionType)\n     {\n-        return new BasicStatementResult( columns, records, summary, executionType );\n+        return new BasicStatementResult(columns, records, summary, executionType);\n     }\n \n-    public static <E extends Throwable> StatementResult withErrorMapping( StatementResult statementResult, Class<E> type,\n-            Function<? super E,? extends Throwable> mapper )\n+    public static <E extends Throwable> StatementResult withErrorMapping(StatementResult statementResult, Class<E> type,\n+                                                                         Function<? super E, ? extends Throwable> mapper)\n     {\n-        var columns = statementResult.columns().onErrorMap( type, mapper );\n-        var records = statementResult.records().onErrorMap( type, mapper );\n-        var summary = statementResult.summary().onErrorMap( type, mapper );\n-        var executionType = statementResult.executionType().onErrorMap( type, mapper );\n+        var columns = statementResult.columns().onErrorMap(type, mapper);\n+        var records = statementResult.records().onErrorMap(type, mapper);\n+        var summary = statementResult.summary().onErrorMap(type, mapper);\n+        var executionType = statementResult.executionType().onErrorMap(type, mapper);\n \n-        return create( columns, records, summary, executionType );\n+        return create(columns, records, summary, executionType);\n     }\n \n-    public static StatementResult error( Throwable err )\n+    public static StatementResult error(Throwable err)\n     {\n-        return new BasicStatementResult( Flux.error( err ), Flux.error( err ), Mono.error( err ), Mono.error( err ) );\n+        return new BasicStatementResult(Flux.error(err), Flux.error(err), Mono.error(err), Mono.error(err));\n     }\n \n-    public static StatementResult trace( StatementResult input )\n+    public static StatementResult trace(StatementResult input)\n     {\n         return new BasicStatementResult(\n-                input.columns(),\n-                input.records().doOnEach( signal ->\n-                {\n-                    if ( signal.hasValue() )\n-                    {\n-                        System.out.println( String.join( \", \", signal.getType().toString(), Records.show( signal.get() ) ) );\n-                    }\n-                    else if ( signal.hasError() )\n-                    {\n-                        System.out.println( String.join( \", \", signal.getType().toString(), signal.getThrowable().toString() ) );\n-                    }\n-                    else\n-                    {\n-                        System.out.println( String.join( \", \", signal.getType().toString() ) );\n-                    }\n-                } ),\n-                input.summary(),\n-                input.executionType() );\n+          input.columns(),\n+          input.records().doOnEach(signal ->\n+          {\n+              if (signal.hasValue())\n+              {\n+                  System.out.println(String.join(\", \", signal.getType().toString(), Records.show(signal.get())));\n+              } else if (signal.hasError())\n+              {\n+                  System.out.println(String.join(\", \", signal.getType().toString(), signal.getThrowable().toString()));\n+              } else\n+              {\n+                  System.out.println(String.join(\", \", signal.getType().toString()));\n+              }\n+          }),\n+          input.summary(),\n+          input.executionType());\n     }\n \n     private static class BasicStatementResult implements StatementResult\n@@ -114,8 +113,8 @@ public final class StatementResults\n         private final Mono<Summary> summary;\n         private final Mono<QueryExecutionType> executionType;\n \n-        BasicStatementResult( Flux<String> columns, Flux<Record> records, Mono<Summary> summary,\n-                              Mono<QueryExecutionType> executionType )\n+        BasicStatementResult(Flux<String> columns, Flux<Record> records, Mono<Summary> summary,\n+                             Mono<QueryExecutionType> executionType)\n         {\n             this.columns = columns;\n             this.records = records;\n@@ -151,6 +150,6 @@ public final class StatementResults\n     @FunctionalInterface\n     public interface SubscribableExecution\n     {\n-        QueryExecution subscribe( QuerySubscriber subscriber );\n+        QueryExecution subscribe(QuerySubscriber subscriber);\n     }\n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}