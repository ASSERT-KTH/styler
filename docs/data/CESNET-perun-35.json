{
    "project_name": "CESNET-perun",
    "error_id": "35",
    "information": {
        "errors": [
            {
                "line": "1583",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n\t                                                               List<String> data, String header, User sponsor,\n\t                                                               LocalDate validityTo, boolean sendActivationLink,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url, Validation validation);\n\n\t/**",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/35/MembersManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/35/MembersManagerBl.java\nindex 9a38bf30809..2fca0e30419 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/35/MembersManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/35/MembersManagerBl.java\n@@ -1580,8 +1580,7 @@ public interface MembersManagerBl {\n \t */\n \tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n \t                                                               List<String> data, String header, User sponsor,\n-\t                                                               LocalDate validityTo, boolean sendActivationLink,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url, Validation validation);\n+                                                                LocalDate validityTo, boolean sendActivationLink, String url, Validation validation);\n \n \t/**\n \t * Creates new sponsored members.\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/35/MembersManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/35/MembersManagerBl.java\nindex 9a38bf30809..55bba8d3149 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/35/MembersManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/35/MembersManagerBl.java\n@@ -59,1747 +59,1756 @@ import java.util.Map;\n  */\n public interface MembersManagerBl {\n \n-\t/**\n-\t *  Deletes only member data  appropriated by member id.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws MemberAlreadyRemovedException\n-\t */\n-\tvoid deleteMember(PerunSession sess, Member member) throws MemberAlreadyRemovedException;\n-\n-\t/**\n-\t * Delete given members. It is possible to delete members from multiple vos.\n-\t *\n-\t * @param sess session\n-\t * @param members members that will be deleted\n-\t * @throws InternalErrorException internal error\n-\t * @throws MemberAlreadyRemovedException if already removed\n-\t */\n-\tvoid deleteMembers(PerunSession sess, List<Member> members) throws MemberAlreadyRemovedException;\n-\n-\t/**\n-\t *  Deletes all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @throws InternalErrorException\n-\t * @throws MemberAlreadyRemovedException\n-\t */\n-\tvoid deleteAllMembers(PerunSession sess, Vo vo) throws MemberAlreadyRemovedException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating service user.\n-\t * In list specificUserOwners can't be service user, only normal users are allowed.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param owners list of users who own the service (can't be empty or contain specific user)\n-\t * @return newly created member (of service User)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createServiceMember(PerunSession sess, Vo vo, Candidate candidate, List<User> owners) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating service user.\n-\t * In list specificUserOwners can't be service user, only normal users are allowed.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param owners list of users who own the service user (can't be empty or contain service user)\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member (of specific User)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createServiceMember(PerunSession sess, Vo vo, Candidate candidate, List<User> owners, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * It can be called in synchronous or asynchronous mode\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongReferenceAttributeValueException, WrongAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * It can be called in synchronous or asynchronous mode\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws WrongReferenceAttributeValueException, WrongAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param specificUserType (Normal or service or sponsored)\n-\t *\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, Candidate)\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param specificUserType (Normal or service or sponsored)\n-\t * @param groups list of groups where member will be added too\n-\t * @param overwriteUserAttributes list of user attributes names which will be overwrite instead of merged\n-\t *\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, Candidate)\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Transform non-sponsored member to sponsored one with defined sponsor\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member who will be set as sponsored one\n-\t * @param sponsor new sponsor of this member\n-\t * @param validityTo the last day when the sponsorship is active\n-\t *\n-\t * @return sponsored member\n-\t *\n-\t * @throws AlreadySponsoredMemberException if member was already flagged as sponsored\n-\t * @throws UserNotInRoleException if sponsor has not right role in the member's VO\n-\t * @throws InternalErrorException if something unexpected happened\n-\t * @throws AlreadySponsorException sponsoredMember is already sponsored by User and his sponsorship is still active\n-\t */\n-\tMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException;\n-\n-\t/**\n-\t * Transform non-sponsored member to sponsored one with defined sponsor\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member who will be set as sponsored one\n-\t * @param sponsor new sponsor of this member\n-\t *\n-\t * @return sponsored member\n-\t *\n-\t * @throws AlreadySponsoredMemberException if member was already flagged as sponsored\n-\t * @throws UserNotInRoleException if sponsor has not right role in the member's VO\n-\t * @throws InternalErrorException if something unexpected happened\n-\t * @throws AlreadySponsorException sponsoredMember is already sponsored by User and his sponsorship is still active\n-\t */\n-\tMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor) throws AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException;\n-\n-\t/**\n-\t * Transform sponsored member to non-sponsored one. Delete all his sponsors.\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member which who be unset from sponsoring\n-\t *\n-\t * @return non-sponsored member\n-\t *\n-\t * @throws MemberNotSponsoredException If member was not set as sponsored before calling this method.\n-\t * @throws InternalErrorException if something unexpected happend\n-\t */\n-\tMember unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotSponsoredException;\n-\n-\t/**\n-\t * Creates member. Runs synchronously.\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n-\t */\n-\tMember createMemberSync(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates member. Runs synchronously. Add member also to all groups in list.\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n-\t */\n-\tMember createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates member. Runs synchronously. Add member also to all groups in list.\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n-\t */\n-\tMember createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Create new member from user by login and ExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param extSource\n-\t * @param login\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Update member in underlaying data source. Member is find by id. Other java attributes are updated.\n-\t *\n-\t * @param sess\n-\t * @param member member who have set new java attributes.\n-\t * @return updated member\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tMember updateMember(PerunSession sess, Member member) throws WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Find member of this Vo by his login in external source\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @param userExtSource\n-\t * @return selected user or throws  in case the requested member doesn't exists in this Vo\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tMember getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Get member by its external sources. If the given sources do not belong to a single member\n-\t * and exception is thrown.\n-\t *\n-\t * @param perunSession session\n-\t * @param vo vo\n-\t * @param userExtSources ues\n-\t * @return member\n-\t * @throws InternalErrorException internal error\n-\t * @throws MemberNotExistsException member does not exist\n-\t */\n-\tMember getMemberByUserExtSources(PerunSession perunSession, Vo vo, List<UserExtSource> userExtSources) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Returns member by his id.\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tMember getMemberById(PerunSession sess, int id) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Returns members by their ids.\n-\t *\n-\t * @param perunSession\n-\t * @param ids\n-\t * @return list of members with specified ids\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembersByIds(PerunSession perunSession, List<Integer> ids);\n-\n-\t/**\n-\t * Returns member by his user and vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tMember getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Return all VO Members of the User.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return List of Members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembersByUser(PerunSession sess, User user);\n-\n-\t/**\n-\t * Return all VO Members of the User, which have specified Status in their VO.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param status\n-\t * @return List of Members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembersByUserWithStatus(PerunSession sess, User user, Status status);\n-\n-\t/**\n-\t * Returns member by his userId.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param userId\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tMember getMemberByUserId(PerunSession sess, Vo vo, int userId) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Get all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Get all VO members who have the status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status. If status is null return all members.\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo, Status status);\n-\n-\t/**\n-\t * Get Member to RichMember with attributes.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tRichMember getRichMember(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Get Member to RichMember with attributes.\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tRichMember getRichMemberWithAttributes(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef);\n-\n-\t/**\n-\t * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param allowedStatuses\n-\t * @return list of rich members on specified page, empty list if there are no user in this group or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group);\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsNames for vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of RichMembers\n-\t * @throws AttributeNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrsNames from the vo.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrsNames from the vo and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrsNames from the group.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from group\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws AttributeNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrsNames from the group and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from group\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws AttributeNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrNames.\n-\t * Attributes are defined by member (user) and resource (facility) objects.\n-\t * It returns also user-facility (in userAttributes of RichMember) and\n-\t * member-resource (in memberAttributes of RichMember) attributes.\n-\t * Members are defined by group and are filtered by list of allowed statuses.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t * @throws GroupResourceMismatchException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupResourceMismatchException;\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attributes specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @param onlySponsored return only sponsored members\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString, boolean onlySponsored);\n-\n-\t/**\n-\t * Return list of richMembers by the searchString with attributes specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, String searchString);\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attributes specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString);\n-\n-\t/**\n-\t * Return list of richMembers by the searchString with attributes specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString);\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param lookingInParentGroup\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @param lookingInParentGroup\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of RichMembers\n-\t * @throws AttributeNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws AttributeNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t * Get also user-facility (as user attribute in rich member) and member-resource (as member attributes in rich member)\n-\t * attributes by resource.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of RichMembers\n-\t * @throws AttributeNotExistsException\n-\t * @throws InternalErrorException\n-\t * @throws GroupResourceMismatchException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, Resource resource, List<String> attrsNames) throws AttributeNotExistsException, GroupResourceMismatchException;\n-\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef);\n-\n-\t/**\n-\t * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @return list of rich members on specified page, empty list if there are no user in this Group or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Group group);\n-\n-\t/**\n-\t * Get rich members who have the status, for displaying on pages. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status. If status is null return all members.\n-\t * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status);\n-\n-\t/**\n-\t * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Get rich members who have the status, for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status. If status is null return all members.\n-\t * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status);\n-\n-\t/**\n-\t * Convert list of users' ids into the list of members.\n-\t *\n-\t * @param sess\n-\t * @param usersIds\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembersByUsersIds(PerunSession sess, List<Integer> usersIds, Vo vo);\n-\n-\t/**\n-\t * Convert list of users into the list of members.\n-\t *\n-\t * @param sess\n-\t * @param users\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembersByUsers(PerunSession sess, List<User> users, Vo vo);\n-\n-\n-\t/**\n-\t * Fill the RichMember object with data from Member and corresponding User.\n-\t *\n-\t * @param sess\n-\t * @param members\n-\t * @return list of richMembers\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> convertMembersToRichMembers(PerunSession sess, List<Member> members);\n-\n-\t/**\n-\t * Fill the RichMember object with data from Member and corresponding User and user/member attributes.\n-\t *\n-\t * @param sess\n-\t * @param richMembers\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers);\n-\n-\t/**\n-\t * Fill the RichMember object with data from Member and corresponding User and user/member attributes defined by list of attribute definition.\n-\t *\n-\t * @param sess\n-\t * @param richMembers\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, List<AttributeDefinition> attrsDef);\n-\n-\t/**\n-\t * Convert given User to the Sponsor object. For the sponsor object, there is loaded information\n-\t * about the sponsorship. Also, if the given user is a RichUser, all of its attributes and userExtSources\n-\t * are also set to the sponsor object.\n-\t *\n-\t * @param sess session\n-\t * @param user a User or a RichUser object\n-\t * @param sponsoredMember member, to which the sponsorship information is loaded\n-\t * @return Sponsor object created from given user object with addition info about sponsorship for the given member.\n-\t */\n-\tSponsor convertUserToSponsor(PerunSession sess, User user, Member sponsoredMember);\n-\n-\t/**\n-\t * Fill the RichMember object with data from Member and corresponding User, user/member, user-facility and member-resource attributes defined by list of attribute definition.\n-\t *\n-\t * @param sess\n-\t * @param richMembers\n-\t * @param resource\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws MemberResourceMismatchException\n-\t */\n-\tList<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, Resource resource, List<AttributeDefinition> attrsDef) throws MemberResourceMismatchException;\n-\n-\t/**\n-\t * Get the VO members count.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return count of VO members\n-\t * @throws InternalErrorException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Returns number of Vo members with defined status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status\n-\t * @return number of members\n-\t * @throws InternalErrorException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo, Status status);\n-\n-\t/**\n-\t * Get the member VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member's VO\n-\t * @throws InternalErrorException\n-\t */\n-\tVo getMemberVo(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Return list of members by theirs name.\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembersByName(PerunSession sess, String searchString);\n-\n-\t/**\n-\t * Return list of members by theirs name under defined VO.\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString);\n-\n-\t/**\n-\t * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembersInGroup(PerunSession sess, Group group, String searchString);\n-\n-\t/**\n-\t * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n-\t * If the group is top-level group, searching in \"members\" group of vo in which the group exists.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString);\n-\n-\t/**\n-\t * Return list of rich members with certain attributes by the searchString under defined Group. Search is done in name, email and login.\n-\t * @param sess session\n-\t * @param group group\n-\t * @param searchString search string\n-\t * @param attrsNames list of attributes that should be found\n-\t * @return list of rich members with certain attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString, List<String> attrsNames);\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString);\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under parent group of defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString);\n-\n-\t/**\n-\t * Return list of members by theirs name or login or email under defined VO.\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString);\n-\n-\t/**\n-\t * Return list of rich members by theirs name or login or email under defined VO.\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @param onlySponsored return only sponsored members\n-\t * @return list of rich members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString, boolean onlySponsored);\n-\n-\t/**\n-\t * Return list of rich members by theirs name or login or email\n-\t * @param sess\n-\t * @param searchString\n-\t * @param onlySponsored return only sponsored members\n-\t * @return list of rich members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembers(PerunSession sess, String searchString, boolean onlySponsored);\n-\n-\t/**\n-\t * Return list of rich members with certain attributes by theirs name or login or email defined VO.\n-\t * @param sess session\n-\t * @param vo vo\n-\t * @param searchString search string\n-\t * @param attrsNames list of attribute names that should be found\n-\t * @param onlySponsored return only sponsored members\n-\t * @return list of rich members with certain attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString, List<String> attrsNames, boolean onlySponsored);\n-\n-\t/**\n-\t * Return list of rich members with attributes by theirs name or login or email under defined VO.\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of rich members with attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString);\n-\n-\t/**\n-\t * Return list of rich members with certain attributes by theirs name or login or email.\n-\t * @param sess session\n-\t * @param searchString search string\n-\t * @param attrsNames list of attribute names that should be found\n-\t * @return list of rich members with certain attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString, List<String> attrsNames);\n-\n-\t/**\n-\t * Return list of rich members with attributes by theirs name or login or email\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of rich members with attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString);\n-\n-\tvoid checkMemberExists(PerunSession sess, Member member) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Set date to which will be member suspended in his VO.\n-\t *\n-\t * For almost unlimited time please use time in the far future.\n-\t *\n-\t * @param sess\n-\t * @param member member who will be suspended\n-\t * @param suspendedTo date to which will be member suspended (after this date, he will not be affected by suspension any more)\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid suspendMemberTo(PerunSession sess, Member member, Date suspendedTo);\n-\n-\t/**\n-\t * Remove suspend state from Member - remove date to which member should be considered as suspended in the VO.\n-\t *\n-\t * WARNING: this method will always succeed if member exists, because it will set date for suspension to null\n-\t *\n-\t * @param sess\n-\t * @param member member for which the suspend state will be removed\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid unsuspendMember(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Return false if member has status INVALID or DISABLED. True in other cases.\n-\t *\n-\t * @param sess\n-\t * @param member the member\n-\t * @return false if member has INVALID or DISABLED status, true in other cases\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isMemberAllowed(PerunSession sess, Member member);\n-\n-\t/**\n-\t *  Set status of the member to specified status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param status new status\n-\t * @return member with status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws MemberNotValidYetException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tMember setStatus(PerunSession sess, Member member, Status status) throws WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n-\n-\t/**\n-\t * Validate all atributes for member and set member's status to VALID.\n-\t * This method runs synchronously.\n-\t *\n-\t * Method runs in nested transaction.\n-\t * As side effect, on success will change status of the object member.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return membet with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tMember validateMember(PerunSession sess, Member member) throws WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Validate all attributes for member and then set member's status to VALID.\n-\t * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation sucessfuly finishes\n-\t * it switch member's status to VALID. If validation ends with error, member keeps his status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with original status\n-\t *\n-\t */\n-\tMember validateMemberAsync(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Set member status to invalid.\n-\t *\n-\t * As side effect it will change status of the object member.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tMember invalidateMember(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Set member's status to expired.\n-\t * All attributes are validated if was in INVALID or DISABLED state before.\n-\t * If validation ends with error, member keeps his old status.\n-\t *\n-\t * Method runs in nested transaction.\n-\t * As side effect, on success will change status of the object member.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tMember expireMember(PerunSession sess, Member member) throws WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Disable member.\n-\t *\n-\t * As side effect, on success will change status of the object member.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotValidYetException\n-\t */\n-\tMember disableMember(PerunSession sess, Member member) throws MemberNotValidYetException;\n-\n-\t/**\n-\t * Retain only members with specified status.\n-\t *\n-\t * @param sess\n-\t * @param members\n-\t * @param status\n-\t * @return\n-\t *\n-\t * @throws MemberNotValidYetException\n-\t */\n-\tList<Member> retainMembersWithStatus(PerunSession sess, List<Member> members, Status status);\n-\n-\t/**\n-\t * Return true if member have specified status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param status\n-\t * @return true if member have the specified status\n-\t *         false otherwise\n-\t */\n-\tboolean haveStatus(PerunSession sess, Member member, Status status);\n-\n-\t/**\n-\t * Extend member membership using membershipExpirationRules attribute defined at VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tvoid extendMembership(PerunSession sess, Member member) throws ExtendMembershipException;\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean canExtendMembership(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception with reason\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tboolean canExtendMembershipWithReason(PerunSession sess, Member member) throws ExtendMembershipException;\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean canBeMember(PerunSession sess, Vo vo, User user, String loa);\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO, exception with reason otherwise\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tboolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws ExtendMembershipException;\n-\n-\t/**\n-\t * Get member by extSourceName, extSourceLogin and Vo\n-\t *\n-\t * @param sess\n-\t * @param extSourceName name of extSource\n-\t * @param extLogin login of user in extSource\n-\t * @param vo Vo where we are looking for member\n-\t * @return member\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws UserExtSourceNotExistsException\n-\t * @throws MemberNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tMember getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns the date to which will be extended member's expiration time.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return date\n-\t * @throws InternalErrorException\n-\t */\n-\tDate getNewExtendMembership(PerunSession sess, Member member);\n-\n-\t/**\n-   * Returns the date to which will be extended potential member of the VO.\n-   *\n-   * @param sess\n-   * @param vo\n-   * @param loa\n-   * @return date\n-   * @throws InternalErrorException\n-   * @throws ExtendMembershipException\n-   */\n-  Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws ExtendMembershipException;\n-\n-\t/**\n-\t * For richMember filter all his user and member attributes and remove all which principal has no access to.\n-\t *\n-\t * @param sess\n-\t * @param richMember\n-\t * @return richMember with only allowed attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tRichMember filterOnlyAllowedAttributes(PerunSession sess, RichMember richMember);\n-\n-\t/**\n-\t * For list of richMembers filter all their user and member attributes and remove all which principal has no access to.\n-\t *\n-\t * @param sess\n-\t * @param richMembers\n-\t * @return list of richMembers with only allowed attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers);\n-\n-\t/**\n-\t * For list of richMembers filter all their user and member attributes and remove all which principal has no access to.\n-\t *\n-\t * Context means that voId for all members is same (rules can be same for all members in list)\n-\t *\n-\t * if useContext is true: every attribute is unique in context of friendlyName, which means more attributes for more members have same\n-\t * rules if friendly name is same for all of them (better performance, worse authorization check)\n-\t * if useContext is false: every attribute is unique in context of member, which means every attribute for more members need to be check separately,\n-\t * because for example members can be from different vos (better authorization check, worse performance)\n-\t *\n-\t * @param sess\n-\t * @param richMembers list of richMembers for which attributes need to be filtered\n-\t * @param group\n-\t * @param useContext true or false means using context or not using context (more above in javadoc)\n-\t *\n-\t * @return list of richMembers with only allowed attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers, Group group, boolean useContext);\n-\n-\t/**\n-\t * Send mail to user's preferred email address with link for non-authz password reset.\n-\t * Correct authz information is stored in link's URL.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get user to send link mail to\n-\t * @param namespace Namespace to reset password in (member must have login in)\n-\t * @param url base URL of Perun instance\n-\t * @param mailAddress mail address where email will be sent\n-\t * @param language language of the message\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAddress, String language);\n-\n-\t/**\n-\t * Send mail to user's preferred email address with link for non-authz account activation.\n-\t * Correct authz information is stored in link's URL.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get user to send link mail to\n-\t * @param namespace Namespace to activate account in (member must have login in)\n-\t * @param url base URL of Perun instance\n-\t * @param mailAddress mail address where email will be sent\n-\t * @param language language of the message\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAddress, String language);\n-\n-\t/**\n-\t * Creates a new sponsored member.\n-\t *\n-\t * @param session perun session\n-\t * @param vo virtual organization\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param name a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n-\t * @param password password, if the password is empty, and the `sendActivationLink` is set to true, this method will\n-\t *                 generate a random password for the created user\n-\t * @param email (optional) preferred email that will be set to the created user. If no email\n-\t *              is provided, \"no-reply@muni.cz\" is used.\n-\t * @param sponsor sponsoring user\n-\t * @param sendActivationLink if true link for manual activation of account will be send to the email\n-\t *                           be careful when using with empty (no-reply) email\n-\t * @param validation Type of validation, when using Validation.ASYNC do not call this method in a cycle!\n-\t * @param url base URL of Perun Instance\n-\t * @return created member\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyMemberException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws ExtendMembershipException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws UserNotInRoleException if the member is not in required role\n-\t * @throws AlreadySponsorException\n-\t */\n-\tMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, boolean sendActivationLink, String url, Validation validation) throws AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates a new sponsored member.\n-\t *\n-\t * @param session perun session\n-\t * @param vo virtual organization\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param name a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n-\t * @param password password, if the password is empty, and the `sendActivationLink` is set to true, this method will\n-\t *                 generate a random password for the created user\n-\t * @param email (optional) preferred email that will be set to the created user. If no email\n-\t *              is provided, \"no-reply@muni.cz\" is used.\n-\t * @param sponsor sponsoring user\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t * @param sendActivationLink if true link for manual activation of account will be send to the email\n-\t *                           be careful when using with empty (no-reply) email\n-\t * @param url base URL of Perun Instance\n-\t * @param validation Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n-\t * @return created member\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyMemberException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws ExtendMembershipException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws UserNotInRoleException if the member is not in required role\n-\t * @throws AlreadySponsorException\n-\t */\n-\tMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url, Validation validation) throws AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates a sponsored membership for the given user.\n-\t *\n-\t * @param session perun session\n-\t * @param vo virtual organization\n-\t * @param userToBeSponsored user, that will be sponsored by sponsor\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param password password\n-\t * @param sponsor sponsoring user\n-\t * @param validation Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n-\t * @return sponsored member\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws UserNotInRoleException\n-\t * @throws PasswordStrengthException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws InvalidLoginException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws AlreadySponsorException\n-\t */\n-\tMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, LocalDate validityTo, Validation validation) throws AlreadyMemberException, ExtendMembershipException, UserNotInRoleException, PasswordStrengthException, WrongAttributeValueException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, InvalidLoginException, ExtSourceNotExistsException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates a sponsored membership for the given user.\n-\t *\n-\t * @param session perun session\n-\t * @param vo virtual organization\n-\t * @param userToBeSponsored user, that will be sponsored by sponsor\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param password password\n-\t * @param sponsor sponsoring user\n-\t * @param validation Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n-\t * @return sponsored member\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws UserNotInRoleException\n-\t * @throws PasswordStrengthException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws InvalidLoginException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws AlreadySponsorException\n-\t */\n-\tMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, Validation validation) throws AlreadyMemberException, ExtendMembershipException, UserNotInRoleException, PasswordStrengthException, WrongAttributeValueException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, InvalidLoginException, ExtSourceNotExistsException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates new sponsored members.\n-\t *\n-\t * Since there may be error while creating some of the members and we cannot simply rollback the transaction and\n-\t * start over, exceptions during member creation are not thrown and the returned map has this structure:\n-\t *\n-\t * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n-\t *\n-\t * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n-\t * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n-\t * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo virtual organization to created sponsored members in\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param data csv file values separated by semicolon ';' characters\n-\t * @param header header to the given csv data, it should represent columns for the given data.\n-\t *               Required values are - firstname, lastname, urn:perun:user:attribute-def:def:preferredMail\n-\t *               Optional values are - urn:perun:user:attribute-def:def:note\n-\t *               The order of the items doesn't matter.\n-\t * @param sponsor sponsoring user\n-\t * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n-\t *                           to email which was set for him, be careful when using no-reply emails\n-\t * @param url base URL of Perun Instance\n-\t * @param validation Type of members validation, when ASYNC do not call this method in a cycle!\n-\t * @return map of names to map of status, login, password, user and member\n-\t */\n-\tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n-\t                                                               List<String> data, String header, User sponsor,\n-\t                                                               LocalDate validityTo, boolean sendActivationLink,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url, Validation validation);\n-\n-\t/**\n-\t * Creates new sponsored members.\n-\t *\n-\t * Since there may be error while creating some of the members and we cannot simply rollback the transaction and start over,\n-\t * exceptions during member creation are not thrown and the returned map has this structure:\n-\t *\n-\t * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n-\t *\n-\t * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n-\t * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n-\t * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n-\t *\n-\t * @param session perun session\n-\t * @param vo virtual organization to created sponsored members in\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param names names of members to create, single name should have the format {firstName};{lastName} to be\n-\t *              parsed well\n-\t * @param email (optional) preferred email that will be set to the created user. If no email\n-\t *              is provided, \"no-reply@muni.cz\" is used.\n-\t * @param sponsor sponsoring user\n-\t * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n-\t *                           to the email, be careful when using with empty (no-reply) email\n-\t * @param url base URL of Perun Instance\n-\t * @param validation Type of members validation, when ASYNC do not call this method in a cycle!\n-\t * @return map of names to map of status, login, password\n-\t */\n-\tMap<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url, Validation validation);\n-\n-\t/**\n-\t * Links sponsored member and sponsoring user.\n-\t * @param session perun session\n-\t * @param sponsoredMember member which is sponsored\n-\t * @param sponsor sponsoring user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotSponsoredException\n-\t * @throws AlreadySponsorException\n-\t * @throws UserNotInRoleException\n-\t */\n-\tMember sponsorMember(PerunSession session, Member sponsoredMember, User sponsor) throws MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n-\n-\t/**\n-\t * Links sponsored member and sponsoring user.\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member which is sponsored\n-\t * @param sponsor sponsoring user\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t *\n-\t * @return member\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotSponsoredException\n-\t * @throws AlreadySponsorException\n-\t * @throws UserNotInRoleException\n-\t */\n-\tMember sponsorMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n-\n-\t/**\n-\t * For the given member and user returns their sponsorship relation object. If there is no\n-\t * such relation, the SponsorshipDoesNotExistException is thrown.\n-\t *\n-\t * @param sess session\n-\t * @param sponsoredMember sponsored member\n-\t * @param sponsor sponsor\n-\t * @return Sponsorship object\n-\t * @throws SponsorshipDoesNotExistException if there is no sponsorship relation between the given member and user\n-\t */\n-\tSponsorship getSponsorship(PerunSession sess, Member sponsoredMember, User sponsor) throws SponsorshipDoesNotExistException;\n-\t/**\n-\t * Gets list of members that are sponsored by the user in the vo.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo virtual organization\n-\t * @param user user sponsoring members\n-\t * @return list of members sponsored by the user in VO\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t */\n-\tList<Member> getSponsoredMembers(PerunSession sess, Vo vo, User user);\n-\n-\t/**\n-\t * Gets list of members that are sponsored by the user in all vos.\n-\t *\n-\t * @param sess perun session\n-\t * @param user user sponsoring members\n-\t * @return list of members sponsored by the user in VO\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t */\n-\tList<Member> getSponsoredMembers(PerunSession sess, User user);\n-\n-\t/**\n-\t * Gets list of sponsored members of a VO.\n-\t * @param sess session\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @return list of members from given vo who are sponsored\n-\t */\n-\tList<Member> getSponsoredMembers(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Removes a sponsor.\n-\t * @param sess perun session\n-\t * @param sponsoredMember member which is sponsored\n-\t * @param sponsor sponsoring user\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t */\n-\tvoid removeSponsor(PerunSession sess, Member sponsoredMember, User sponsor);\n-\n-\t/**\n-\t * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n-\t *\n-\t * @param sess perun session\n-\t * @param sponsoredMember member which is sponsored\n-\t * @param sponsorUser sponsoring user or null for the caller\n-\t * @return new expiration date\n-\t * @throws InternalErrorException\n-\t */\n-\tString extendExpirationForSponsoredMember(PerunSession sess, Member sponsoredMember, User sponsorUser);\n-\n-\t/**\n-\t * Returns unified result of MemberGroupStatus for specified member and resource.\n-\t *\n-\t * If member is VALID in at least one group assigned to the resource, result is VALID.\n-\t * If member is not VALID in any of groups assigned to the resource, result is EXPIRED.\n-\t * If member is not assigned to the resource at all, result is NULL.\n-\t *\n-\t * MemberGroupStatus is never related to the members status in a VO as a whole!\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get unified MemberGroupStatus\n-\t * @param resource Resource to get unified MemberGroupStatus\n-\t * @return MemberGroupStatus for member unified through all his groups assigned to the resource.\n-\t */\n-\tMemberGroupStatus getUnifiedMemberGroupStatus(PerunSession sess, Member member, Resource resource);\n-\n-\t/**\n-\t * Returns unified result of MemberGroupStatus for specified user and facility.\n-\t *\n-\t * If user is VALID in at least one group assigned to at least one resource on facility, result is VALID.\n-\t * If user is not VALID in any of groups assigned to any of resources, result is EXPIRED.\n-\t * If user is not assigned to the resource at all, result is NULL.\n-\t *\n-\t * MemberGroupStatus is never related to the members status in any VO!\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to get unified MemberGroupStatus\n-\t * @param facility Facility to get unified MemberGroupStatus\n-\t * @return MemberGroupStatus for user unified throught all his groups assigned to any of resources of facility.\n-\t */\n-\tMemberGroupStatus getUnifiedMemberGroupStatus(PerunSession sess, User user, Facility facility);\n-\n-\t/**\n-\t * Return list of members VO by specific string.\n-\t * All searches are case insensitive.\n-\t * Looking for searchString in member mail, user preferredMail, logins, name and IDs (user and member).\n-\t * If parameter onlySponsored is true, it will return only sponsored members by searchString.\n-\t * If vo is null, looking for any members in whole Perun. If vo is not null, looking only in specific VO.<\n-\t *\n-\t * @param sess\n-\t * @param vo for which searching will be filtered, if null there is no filter for vo\n-\t * @param searchString it will be looking for this search string in the specific parameters in DB\n-\t * @param onlySponsored it will return only sponsored members in vo\n-\t * @return all members from specific VO by specific string\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembers(PerunSession sess, Vo vo, String searchString, boolean onlySponsored);\n-\n-\t/**\n-\t * Update the sponsorship of given member for given sponsor.\n-\t *\n-\t * @param sess session\n-\t * @param sponsoredMember sponsored member\n-\t * @param sponsor sponsor\n-\t * @param newValidity new validity, can be set to null never expire\n-\t * @throws SponsorshipDoesNotExistException if the given user is not sponsor of the given member\n-\t */\n-\tvoid updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor, LocalDate newValidity) throws SponsorshipDoesNotExistException;\n-\n-\t/**\n-\t * Returns sponsorship, which have validityTo in range [from, to).\n-\t * (from is inclusive, to is exclusive).\n-\t *\n-\t * @param sess session\n-\t * @param from lower validityTo bound (inclusive), use LocalDate.MIN if you don't want to specify the lower bound\n-\t * @param to upper validityTo bound (exclusive), use LocalDate.MAX, if you don't want to specify the upper bound\n-\t * @return list of sponsorships which have validityTo set in the given range\n-\t */\n-\tList<Sponsorship> getSponsorshipsExpiringInRange(PerunSession sess, LocalDate from, LocalDate to);\n-\n-\t/**\n-\t * Moves membership in VO from source user to target user - moves the source user's\n-\t * memberships in non-synchronized groups, member related attributes, bans and\n-\t * sponsorships in the VO. Removes the source user's member object.\n-\t *\n-\t * @param sess session\n-\t * @param vo the VO in which the membership should be moved\n-\t * @param sourceUser the user to move membership from\n-\t * @param targetUser the user to move membership to\n-\t * @throws MemberNotExistsException when sourceUser is not member of the VO\n-\t * @throws AlreadyMemberException when targetUser is already member of the VO\n-\t * @throws ExtendMembershipException when the targetUser doesn't have required LOA for the VO\n-\t */\n-\tvoid moveMembership(PerunSession sess, Vo vo, User sourceUser, User targetUser) throws MemberNotExistsException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Return all loaded namespaces rules.\n-\t *\n-\t * @return all namespaces rules\n-\t */\n-\tList<NamespaceRules> getAllNamespacesRules();\n-\n-\t/**\n-\t * Get NamespaceRules for the namespace from the SponsoredAccountsConfigContainer\n-\t *\n-\t * @param namespace for which will be the rules fetched\n-\t * @return NamespaceRules for the namespace\n-\t * @throws NamespaceRulesNotExistsException if there are no rules for the namespace\n-\t */\n-\tNamespaceRules getNamespaceRules(String namespace) throws NamespaceRulesNotExistsException;\n+    /**\n+     * Deletes only member data  appropriated by member id.\n+     *\n+     * @param sess\n+     * @param member\n+     * @throws InternalErrorException\n+     * @throws MemberAlreadyRemovedException\n+     */\n+    void deleteMember(PerunSession sess, Member member) throws MemberAlreadyRemovedException;\n+\n+    /**\n+     * Delete given members. It is possible to delete members from multiple vos.\n+     *\n+     * @param sess    session\n+     * @param members members that will be deleted\n+     * @throws InternalErrorException        internal error\n+     * @throws MemberAlreadyRemovedException if already removed\n+     */\n+    void deleteMembers(PerunSession sess, List<Member> members) throws MemberAlreadyRemovedException;\n+\n+    /**\n+     * Deletes all VO members.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @throws InternalErrorException\n+     * @throws MemberAlreadyRemovedException\n+     */\n+    void deleteAllMembers(PerunSession sess, Vo vo) throws MemberAlreadyRemovedException;\n+\n+    /**\n+     * Creates a new member from candidate which is prepared for creating service user.\n+     * In list specificUserOwners can't be service user, only normal users are allowed.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate prepared future specificUser\n+     * @param owners    list of users who own the service (can't be empty or contain specific user)\n+     * @return newly created member (of service User)\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     */\n+    Member createServiceMember(PerunSession sess, Vo vo, Candidate candidate, List<User> owners) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member from candidate which is prepared for creating service user.\n+     * In list specificUserOwners can't be service user, only normal users are allowed.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate prepared future specificUser\n+     * @param owners    list of users who own the service user (can't be empty or contain service user)\n+     * @param groups    list of groups where member will be added too\n+     * @return newly created member (of specific User)\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     */\n+    Member createServiceMember(PerunSession sess, Vo vo, Candidate candidate, List<User> owners, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * It can be called in synchronous or asynchronous mode\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param login         user's login within extSource\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongReferenceAttributeValueException, WrongAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * It can be called in synchronous or asynchronous mode\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param login         user's login within extSource\n+     * @param groups        list of groups where member will be added too\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws WrongReferenceAttributeValueException, WrongAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param extSourceLoa  level of assurance\n+     * @param login         user's login within extSource\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param extSourceLoa  level of assurance\n+     * @param login         user's login within extSource\n+     * @param groups        list of groups where member will be added too\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @return newly created members\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n+     */\n+    Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param groups    list of groups where member will be added too\n+     * @return newly created members\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n+     */\n+    Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param specificUserType (Normal or service or sponsored)\n+     * @return newly created members\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, Candidate)\n+     */\n+    Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param specificUserType        (Normal or service or sponsored)\n+     * @param groups                  list of groups where member will be added too\n+     * @param overwriteUserAttributes list of user attributes names which will be overwrite instead of merged\n+     * @return newly created members\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, Candidate)\n+     */\n+    Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Transform non-sponsored member to sponsored one with defined sponsor\n+     *\n+     * @param session         perun session\n+     * @param sponsoredMember member who will be set as sponsored one\n+     * @param sponsor         new sponsor of this member\n+     * @param validityTo      the last day when the sponsorship is active\n+     * @return sponsored member\n+     * @throws AlreadySponsoredMemberException if member was already flagged as sponsored\n+     * @throws UserNotInRoleException          if sponsor has not right role in the member's VO\n+     * @throws InternalErrorException          if something unexpected happened\n+     * @throws AlreadySponsorException         sponsoredMember is already sponsored by User and his sponsorship is still active\n+     */\n+    Member setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException;\n+\n+    /**\n+     * Transform non-sponsored member to sponsored one with defined sponsor\n+     *\n+     * @param session         perun session\n+     * @param sponsoredMember member who will be set as sponsored one\n+     * @param sponsor         new sponsor of this member\n+     * @return sponsored member\n+     * @throws AlreadySponsoredMemberException if member was already flagged as sponsored\n+     * @throws UserNotInRoleException          if sponsor has not right role in the member's VO\n+     * @throws InternalErrorException          if something unexpected happened\n+     * @throws AlreadySponsorException         sponsoredMember is already sponsored by User and his sponsorship is still active\n+     */\n+    Member setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor) throws AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException;\n+\n+    /**\n+     * Transform sponsored member to non-sponsored one. Delete all his sponsors.\n+     *\n+     * @param session         perun session\n+     * @param sponsoredMember member which who be unset from sponsoring\n+     * @return non-sponsored member\n+     * @throws MemberNotSponsoredException If member was not set as sponsored before calling this method.\n+     * @throws InternalErrorException      if something unexpected happend\n+     */\n+    Member unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotSponsoredException;\n+\n+    /**\n+     * Creates member. Runs synchronously.\n+     *\n+     * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n+     */\n+    Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates member. Runs synchronously. Add member also to all groups in list.\n+     *\n+     * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n+     */\n+    Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates member. Runs synchronously. Add member also to all groups in list.\n+     *\n+     * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n+     */\n+    Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member from user.\n+     * <strong>This method runs asynchronously</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, User user) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Creates a new member from user.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs asynchronously</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @param groups list of groups where member will be added too\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Create new member from user by login and ExtSource.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs asynchronously</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param extSource\n+     * @param login\n+     * @param groups    list of groups where member will be added too\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Update member in underlaying data source. Member is find by id. Other java attributes are updated.\n+     *\n+     * @param sess\n+     * @param member member who have set new java attributes.\n+     * @return updated member\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    Member updateMember(PerunSession sess, Member member) throws WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+    /**\n+     * Find member of this Vo by his login in external source\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @param userExtSource\n+     * @return selected user or throws  in case the requested member doesn't exists in this Vo\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     */\n+    Member getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws MemberNotExistsException;\n+\n+    /**\n+     * Get member by its external sources. If the given sources do not belong to a single member\n+     * and exception is thrown.\n+     *\n+     * @param perunSession   session\n+     * @param vo             vo\n+     * @param userExtSources ues\n+     * @return member\n+     * @throws InternalErrorException   internal error\n+     * @throws MemberNotExistsException member does not exist\n+     */\n+    Member getMemberByUserExtSources(PerunSession perunSession, Vo vo, List<UserExtSource> userExtSources) throws MemberNotExistsException;\n+\n+    /**\n+     * Returns member by his id.\n+     *\n+     * @param sess\n+     * @param id\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     */\n+    Member getMemberById(PerunSession sess, int id) throws MemberNotExistsException;\n+\n+    /**\n+     * Returns members by their ids.\n+     *\n+     * @param perunSession\n+     * @param ids\n+     * @return list of members with specified ids\n+     * @throws InternalErrorException\n+     */\n+    List<Member> getMembersByIds(PerunSession perunSession, List<Integer> ids);\n+\n+    /**\n+     * Returns member by his user and vo.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     */\n+    Member getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException;\n+\n+    /**\n+     * Return all VO Members of the User.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return List of Members\n+     * @throws InternalErrorException\n+     */\n+    List<Member> getMembersByUser(PerunSession sess, User user);\n+\n+    /**\n+     * Return all VO Members of the User, which have specified Status in their VO.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param status\n+     * @return List of Members\n+     * @throws InternalErrorException\n+     */\n+    List<Member> getMembersByUserWithStatus(PerunSession sess, User user, Status status);\n+\n+    /**\n+     * Returns member by his userId.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param userId\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     */\n+    Member getMemberByUserId(PerunSession sess, Vo vo, int userId) throws MemberNotExistsException;\n+\n+    /**\n+     * Get all VO members.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return all members of the VO\n+     * @throws InternalErrorException\n+     */\n+    List<Member> getMembers(PerunSession sess, Vo vo);\n+\n+    /**\n+     * Get all VO members who have the status.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status get only members who have this status. If status is null return all members.\n+     * @return all members of the VO\n+     * @throws InternalErrorException\n+     */\n+    List<Member> getMembers(PerunSession sess, Vo vo, Status status);\n+\n+    /**\n+     * Get Member to RichMember with attributes.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    RichMember getRichMember(PerunSession sess, Member member);\n+\n+    /**\n+     * Get Member to RichMember with attributes.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    RichMember getRichMemberWithAttributes(PerunSession sess, Member member);\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsDef\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef);\n+\n+    /**\n+     * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param allowedStatuses\n+     * @return list of rich members on specified page, empty list if there are no user in this group or in this page\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group);\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsNames for vo.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames list of attrNames for selected attributes\n+     * @return list of RichMembers\n+     * @throws AttributeNotExistsException\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws AttributeNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attributes specific for list of attrsNames from the vo.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @return list of richMembers with specific attributes from Vo\n+     * @throws InternalErrorException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws AttributeNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attributes specific for list of attrsNames from the vo and have only\n+     * status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @return list of richMembers with specific attributes from Vo\n+     * @throws InternalErrorException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attributes specific for list of attrsNames from the group.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * <p>\n+     * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so get richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param lookingInParentGroup\n+     * @return list of richMembers with specific attributes from group\n+     * @throws InternalErrorException\n+     * @throws AttributeNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws AttributeNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attributes specific for list of attrsNames from the group and have only\n+     * status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     * <p>\n+     * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so get richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param lookingInParentGroup\n+     * @return list of richMembers with specific attributes from group\n+     * @throws InternalErrorException\n+     * @throws AttributeNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws AttributeNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attributes specific for list of attrNames.\n+     * Attributes are defined by member (user) and resource (facility) objects.\n+     * It returns also user-facility (in userAttributes of RichMember) and\n+     * member-resource (in memberAttributes of RichMember) attributes.\n+     * Members are defined by group and are filtered by list of allowed statuses.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param resource\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @return list of richMembers with specific attributes\n+     * @throws InternalErrorException\n+     * @throws AttributeNotExistsException\n+     * @throws GroupResourceMismatchException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupResourceMismatchException;\n+\n+    /**\n+     * Return list of richMembers for specific vo by the searchString with attributes specific for list of attrsNames.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @param searchString\n+     * @param onlySponsored return only sponsored members\n+     * @return list of founded richMembers with specific attributes from Vo for searchString\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString, boolean onlySponsored);\n+\n+    /**\n+     * Return list of richMembers by the searchString with attributes specific for list of attrsNames.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     *\n+     * @param sess\n+     * @param attrsNames\n+     * @param searchString\n+     * @return list of founded richMembers with specific attributes from Vo for searchString\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, String searchString);\n+\n+    /**\n+     * Return list of richMembers for specific vo by the searchString with attributes specific for list of attrsNames\n+     * and who have only status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param searchString\n+     * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString);\n+\n+    /**\n+     * Return list of richMembers by the searchString with attributes specific for list of attrsNames\n+     * and who have only status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     *\n+     * @param sess\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param searchString\n+     * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString);\n+\n+    /**\n+     * Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * <p>\n+     * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so find richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param lookingInParentGroup\n+     * @param searchString\n+     * @return list of founded richMembers with specific attributes from Group for searchString\n+     * @throws InternalErrorException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws ParentGroupNotExistsException;\n+\n+    /**\n+     * Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+     * and who have only status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     * <p>\n+     * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so find richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param searchString\n+     * @param lookingInParentGroup\n+     * @return list of founded richMembers with specific attributes from Group for searchString\n+     * @throws InternalErrorException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws ParentGroupNotExistsException;\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames list of attrNames for selected attributes\n+     * @return list of RichMembers\n+     * @throws AttributeNotExistsException\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws AttributeNotExistsException;\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+     * Get also user-facility (as user attribute in rich member) and member-resource (as member attributes in rich member)\n+     * attributes by resource.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param resource\n+     * @param attrsNames list of attrNames for selected attributes\n+     * @return list of RichMembers\n+     * @throws AttributeNotExistsException\n+     * @throws InternalErrorException\n+     * @throws GroupResourceMismatchException\n+     */\n+    List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, Resource resource, List<String> attrsNames) throws AttributeNotExistsException, GroupResourceMismatchException;\n+\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsDef\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef);\n+\n+    /**\n+     * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getRichMembers(PerunSession sess, Vo vo);\n+\n+    /**\n+     * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources.\n+     *\n+     * @param sess\n+     * @param group\n+     * @return list of rich members on specified page, empty list if there are no user in this Group or in this page\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getRichMembers(PerunSession sess, Group group);\n+\n+    /**\n+     * Get rich members who have the status, for displaying on pages. Rich member object contains user, member, userExtSources.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status get only members who have this status. If status is null return all members.\n+     * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status);\n+\n+    /**\n+     * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo);\n+\n+    /**\n+     * Get rich members who have the status, for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status get only members who have this status. If status is null return all members.\n+     * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status);\n+\n+    /**\n+     * Convert list of users' ids into the list of members.\n+     *\n+     * @param sess\n+     * @param usersIds\n+     * @param vo\n+     * @return list of members\n+     * @throws InternalErrorException\n+     */\n+    List<Member> getMembersByUsersIds(PerunSession sess, List<Integer> usersIds, Vo vo);\n+\n+    /**\n+     * Convert list of users into the list of members.\n+     *\n+     * @param sess\n+     * @param users\n+     * @param vo\n+     * @return list of members\n+     * @throws InternalErrorException\n+     */\n+    List<Member> getMembersByUsers(PerunSession sess, List<User> users, Vo vo);\n+\n+\n+    /**\n+     * Fill the RichMember object with data from Member and corresponding User.\n+     *\n+     * @param sess\n+     * @param members\n+     * @return list of richMembers\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> convertMembersToRichMembers(PerunSession sess, List<Member> members);\n+\n+    /**\n+     * Fill the RichMember object with data from Member and corresponding User and user/member attributes.\n+     *\n+     * @param sess\n+     * @param richMembers\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers);\n+\n+    /**\n+     * Fill the RichMember object with data from Member and corresponding User and user/member attributes defined by list of attribute definition.\n+     *\n+     * @param sess\n+     * @param richMembers\n+     * @param attrsDef\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, List<AttributeDefinition> attrsDef);\n+\n+    /**\n+     * Convert given User to the Sponsor object. For the sponsor object, there is loaded information\n+     * about the sponsorship. Also, if the given user is a RichUser, all of its attributes and userExtSources\n+     * are also set to the sponsor object.\n+     *\n+     * @param sess            session\n+     * @param user            a User or a RichUser object\n+     * @param sponsoredMember member, to which the sponsorship information is loaded\n+     * @return Sponsor object created from given user object with addition info about sponsorship for the given member.\n+     */\n+    Sponsor convertUserToSponsor(PerunSession sess, User user, Member sponsoredMember);\n+\n+    /**\n+     * Fill the RichMember object with data from Member and corresponding User, user/member, user-facility and member-resource attributes defined by list of attribute definition.\n+     *\n+     * @param sess\n+     * @param richMembers\n+     * @param resource\n+     * @param attrsDef\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws MemberResourceMismatchException\n+     */\n+    List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, Resource resource, List<AttributeDefinition> attrsDef) throws MemberResourceMismatchException;\n+\n+    /**\n+     * Get the VO members count.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return count of VO members\n+     * @throws InternalErrorException\n+     */\n+    int getMembersCount(PerunSession sess, Vo vo);\n+\n+    /**\n+     * Returns number of Vo members with defined status.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status\n+     * @return number of members\n+     * @throws InternalErrorException\n+     */\n+    int getMembersCount(PerunSession sess, Vo vo, Status status);\n+\n+    /**\n+     * Get the member VO.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return member's VO\n+     * @throws InternalErrorException\n+     */\n+    Vo getMemberVo(PerunSession sess, Member member);\n+\n+    /**\n+     * Return list of members by theirs name.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of members\n+     * @throws InternalErrorException\n+     */\n+    List<Member> findMembersByName(PerunSession sess, String searchString);\n+\n+    /**\n+     * Return list of members by theirs name under defined VO.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of members\n+     * @throws InternalErrorException\n+     */\n+    List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString);\n+\n+    /**\n+     * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param searchString\n+     * @return list of members\n+     * @throws InternalErrorException\n+     */\n+    List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString);\n+\n+    /**\n+     * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n+     * If the group is top-level group, searching in \"members\" group of vo in which the group exists.\n+     *\n+     * @param sess\n+     * @param group        this group is used to get parent group, we are searching members of the parent group\n+     * @param searchString\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString);\n+\n+    /**\n+     * Return list of rich members with certain attributes by the searchString under defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess         session\n+     * @param group        group\n+     * @param searchString search string\n+     * @param attrsNames   list of attributes that should be found\n+     * @return list of rich members with certain attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString, List<String> attrsNames);\n+\n+    /**\n+     * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param searchString\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString);\n+\n+    /**\n+     * Return list of rich members with attributes by the searchString under parent group of defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group        this group is used to get parent group, we are searching members of the parent group\n+     * @param searchString\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString);\n+\n+    /**\n+     * Return list of members by theirs name or login or email under defined VO.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of members\n+     * @throws InternalErrorException\n+     */\n+    List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString);\n+\n+    /**\n+     * Return list of rich members by theirs name or login or email under defined VO.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @param onlySponsored return only sponsored members\n+     * @return list of rich members\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString, boolean onlySponsored);\n+\n+    /**\n+     * Return list of rich members by theirs name or login or email\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param onlySponsored return only sponsored members\n+     * @return list of rich members\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findRichMembers(PerunSession sess, String searchString, boolean onlySponsored);\n+\n+    /**\n+     * Return list of rich members with certain attributes by theirs name or login or email defined VO.\n+     *\n+     * @param sess          session\n+     * @param vo            vo\n+     * @param searchString  search string\n+     * @param attrsNames    list of attribute names that should be found\n+     * @param onlySponsored return only sponsored members\n+     * @return list of rich members with certain attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString, List<String> attrsNames, boolean onlySponsored);\n+\n+    /**\n+     * Return list of rich members with attributes by theirs name or login or email under defined VO.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of rich members with attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString);\n+\n+    /**\n+     * Return list of rich members with certain attributes by theirs name or login or email.\n+     *\n+     * @param sess         session\n+     * @param searchString search string\n+     * @param attrsNames   list of attribute names that should be found\n+     * @return list of rich members with certain attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString, List<String> attrsNames);\n+\n+    /**\n+     * Return list of rich members with attributes by theirs name or login or email\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of rich members with attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString);\n+\n+    void checkMemberExists(PerunSession sess, Member member) throws MemberNotExistsException;\n+\n+    /**\n+     * Set date to which will be member suspended in his VO.\n+     * <p>\n+     * For almost unlimited time please use time in the far future.\n+     *\n+     * @param sess\n+     * @param member      member who will be suspended\n+     * @param suspendedTo date to which will be member suspended (after this date, he will not be affected by suspension any more)\n+     * @throws InternalErrorException\n+     */\n+    void suspendMemberTo(PerunSession sess, Member member, Date suspendedTo);\n+\n+    /**\n+     * Remove suspend state from Member - remove date to which member should be considered as suspended in the VO.\n+     * <p>\n+     * WARNING: this method will always succeed if member exists, because it will set date for suspension to null\n+     *\n+     * @param sess\n+     * @param member member for which the suspend state will be removed\n+     * @throws InternalErrorException\n+     */\n+    void unsuspendMember(PerunSession sess, Member member);\n+\n+    /**\n+     * Return false if member has status INVALID or DISABLED. True in other cases.\n+     *\n+     * @param sess\n+     * @param member the member\n+     * @return false if member has INVALID or DISABLED status, true in other cases\n+     * @throws InternalErrorException\n+     */\n+    boolean isMemberAllowed(PerunSession sess, Member member);\n+\n+    /**\n+     * Set status of the member to specified status.\n+     *\n+     * @param sess\n+     * @param member\n+     * @param status new status\n+     * @return member with status set\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws MemberNotValidYetException\n+     * @throws WrongAttributeValueException\n+     */\n+    Member setStatus(PerunSession sess, Member member, Status status) throws WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n+\n+    /**\n+     * Validate all atributes for member and set member's status to VALID.\n+     * This method runs synchronously.\n+     * <p>\n+     * Method runs in nested transaction.\n+     * As side effect, on success will change status of the object member.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return membet with new status set\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    Member validateMember(PerunSession sess, Member member) throws WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Validate all attributes for member and then set member's status to VALID.\n+     * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation sucessfuly finishes\n+     * it switch member's status to VALID. If validation ends with error, member keeps his status.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return member with original status\n+     */\n+    Member validateMemberAsync(PerunSession sess, Member member);\n+\n+    /**\n+     * Set member status to invalid.\n+     * <p>\n+     * As side effect it will change status of the object member.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return member with new status set\n+     * @throws InternalErrorException\n+     */\n+    Member invalidateMember(PerunSession sess, Member member);\n+\n+    /**\n+     * Set member's status to expired.\n+     * All attributes are validated if was in INVALID or DISABLED state before.\n+     * If validation ends with error, member keeps his old status.\n+     * <p>\n+     * Method runs in nested transaction.\n+     * As side effect, on success will change status of the object member.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return member with new status set\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    Member expireMember(PerunSession sess, Member member) throws WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+    /**\n+     * Disable member.\n+     * <p>\n+     * As side effect, on success will change status of the object member.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return member with new status set\n+     * @throws InternalErrorException\n+     * @throws MemberNotValidYetException\n+     */\n+    Member disableMember(PerunSession sess, Member member) throws MemberNotValidYetException;\n+\n+    /**\n+     * Retain only members with specified status.\n+     *\n+     * @param sess\n+     * @param members\n+     * @param status\n+     * @return\n+     * @throws MemberNotValidYetException\n+     */\n+    List<Member> retainMembersWithStatus(PerunSession sess, List<Member> members, Status status);\n+\n+    /**\n+     * Return true if member have specified status.\n+     *\n+     * @param sess\n+     * @param member\n+     * @param status\n+     * @return true if member have the specified status\n+     * false otherwise\n+     */\n+    boolean haveStatus(PerunSession sess, Member member, Status status);\n+\n+    /**\n+     * Extend member membership using membershipExpirationRules attribute defined at VO.\n+     *\n+     * @param sess\n+     * @param member\n+     * @throws InternalErrorException\n+     * @throws ExtendMembershipException\n+     */\n+    void extendMembership(PerunSession sess, Member member) throws ExtendMembershipException;\n+\n+    /**\n+     * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n+     * @throws InternalErrorException\n+     */\n+    boolean canExtendMembership(PerunSession sess, Member member);\n+\n+    /**\n+     * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception with reason\n+     * @throws InternalErrorException\n+     * @throws ExtendMembershipException\n+     */\n+    boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws ExtendMembershipException;\n+\n+    /**\n+     * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @param loa\n+     * @return true if user can be apply for membership to the VO\n+     * @throws InternalErrorException\n+     */\n+    boolean canBeMember(PerunSession sess, Vo vo, User user, String loa);\n+\n+    /**\n+     * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @param loa\n+     * @return true if user can be apply for membership to the VO, exception with reason otherwise\n+     * @throws InternalErrorException\n+     * @throws ExtendMembershipException\n+     */\n+    boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws ExtendMembershipException;\n+\n+    /**\n+     * Get member by extSourceName, extSourceLogin and Vo\n+     *\n+     * @param sess\n+     * @param extSourceName name of extSource\n+     * @param extLogin      login of user in extSource\n+     * @param vo            Vo where we are looking for member\n+     * @return member\n+     * @throws ExtSourceNotExistsException\n+     * @throws UserExtSourceNotExistsException\n+     * @throws MemberNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws InternalErrorException\n+     */\n+    Member getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException;\n+\n+    /**\n+     * Returns the date to which will be extended member's expiration time.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return date\n+     * @throws InternalErrorException\n+     */\n+    Date getNewExtendMembership(PerunSession sess, Member member);\n+\n+    /**\n+     * Returns the date to which will be extended potential member of the VO.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param loa\n+     * @return date\n+     * @throws InternalErrorException\n+     * @throws ExtendMembershipException\n+     */\n+    Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws ExtendMembershipException;\n+\n+    /**\n+     * For richMember filter all his user and member attributes and remove all which principal has no access to.\n+     *\n+     * @param sess\n+     * @param richMember\n+     * @return richMember with only allowed attributes\n+     * @throws InternalErrorException\n+     */\n+    RichMember filterOnlyAllowedAttributes(PerunSession sess, RichMember richMember);\n+\n+    /**\n+     * For list of richMembers filter all their user and member attributes and remove all which principal has no access to.\n+     *\n+     * @param sess\n+     * @param richMembers\n+     * @return list of richMembers with only allowed attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers);\n+\n+    /**\n+     * For list of richMembers filter all their user and member attributes and remove all which principal has no access to.\n+     * <p>\n+     * Context means that voId for all members is same (rules can be same for all members in list)\n+     * <p>\n+     * if useContext is true: every attribute is unique in context of friendlyName, which means more attributes for more members have same\n+     * rules if friendly name is same for all of them (better performance, worse authorization check)\n+     * if useContext is false: every attribute is unique in context of member, which means every attribute for more members need to be check separately,\n+     * because for example members can be from different vos (better authorization check, worse performance)\n+     *\n+     * @param sess\n+     * @param richMembers list of richMembers for which attributes need to be filtered\n+     * @param group\n+     * @param useContext  true or false means using context or not using context (more above in javadoc)\n+     * @return list of richMembers with only allowed attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers, Group group, boolean useContext);\n+\n+    /**\n+     * Send mail to user's preferred email address with link for non-authz password reset.\n+     * Correct authz information is stored in link's URL.\n+     *\n+     * @param sess        PerunSession\n+     * @param member      Member to get user to send link mail to\n+     * @param namespace   Namespace to reset password in (member must have login in)\n+     * @param url         base URL of Perun instance\n+     * @param mailAddress mail address where email will be sent\n+     * @param language    language of the message\n+     * @throws InternalErrorException\n+     */\n+    void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAddress, String language);\n+\n+    /**\n+     * Send mail to user's preferred email address with link for non-authz account activation.\n+     * Correct authz information is stored in link's URL.\n+     *\n+     * @param sess        PerunSession\n+     * @param member      Member to get user to send link mail to\n+     * @param namespace   Namespace to activate account in (member must have login in)\n+     * @param url         base URL of Perun instance\n+     * @param mailAddress mail address where email will be sent\n+     * @param language    language of the message\n+     * @throws InternalErrorException\n+     */\n+    void sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAddress, String language);\n+\n+    /**\n+     * Creates a new sponsored member.\n+     *\n+     * @param session            perun session\n+     * @param vo                 virtual organization\n+     * @param namespace          used for selecting external system in which guest user account will be created\n+     * @param name               a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n+     * @param password           password, if the password is empty, and the `sendActivationLink` is set to true, this method will\n+     *                           generate a random password for the created user\n+     * @param email              (optional) preferred email that will be set to the created user. If no email\n+     *                           is provided, \"no-reply@muni.cz\" is used.\n+     * @param sponsor            sponsoring user\n+     * @param sendActivationLink if true link for manual activation of account will be send to the email\n+     *                           be careful when using with empty (no-reply) email\n+     * @param validation         Type of validation, when using Validation.ASYNC do not call this method in a cycle!\n+     * @param url                base URL of Perun Instance\n+     * @return created member\n+     * @throws InternalErrorException\n+     * @throws AlreadyMemberException\n+     * @throws LoginNotExistsException\n+     * @throws PasswordCreationFailedException\n+     * @throws ExtendMembershipException\n+     * @throws WrongAttributeValueException\n+     * @throws ExtSourceNotExistsException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws UserNotInRoleException                if the member is not in required role\n+     * @throws AlreadySponsorException\n+     */\n+    Member createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, boolean sendActivationLink, String url, Validation validation)\n+            throws AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException,\n+            AlreadySponsorException;\n+\n+    /**\n+     * Creates a new sponsored member.\n+     *\n+     * @param session            perun session\n+     * @param vo                 virtual organization\n+     * @param namespace          used for selecting external system in which guest user account will be created\n+     * @param name               a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n+     * @param password           password, if the password is empty, and the `sendActivationLink` is set to true, this method will\n+     *                           generate a random password for the created user\n+     * @param email              (optional) preferred email that will be set to the created user. If no email\n+     *                           is provided, \"no-reply@muni.cz\" is used.\n+     * @param sponsor            sponsoring user\n+     * @param validityTo         last day when the sponsorship is active (null means the sponsorship will last forever)\n+     * @param sendActivationLink if true link for manual activation of account will be send to the email\n+     *                           be careful when using with empty (no-reply) email\n+     * @param url                base URL of Perun Instance\n+     * @param validation         Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n+     * @return created member\n+     * @throws InternalErrorException\n+     * @throws AlreadyMemberException\n+     * @throws LoginNotExistsException\n+     * @throws PasswordCreationFailedException\n+     * @throws ExtendMembershipException\n+     * @throws WrongAttributeValueException\n+     * @throws ExtSourceNotExistsException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws UserNotInRoleException                if the member is not in required role\n+     * @throws AlreadySponsorException\n+     */\n+    Member createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url, Validation validation)\n+            throws AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException,\n+            AlreadySponsorException;\n+\n+    /**\n+     * Creates a sponsored membership for the given user.\n+     *\n+     * @param session           perun session\n+     * @param vo                virtual organization\n+     * @param userToBeSponsored user, that will be sponsored by sponsor\n+     * @param namespace         used for selecting external system in which guest user account will be created\n+     * @param password          password\n+     * @param sponsor           sponsoring user\n+     * @param validation        Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n+     * @return sponsored member\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     * @throws UserNotInRoleException\n+     * @throws PasswordStrengthException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws LoginNotExistsException\n+     * @throws PasswordCreationFailedException\n+     * @throws InvalidLoginException\n+     * @throws ExtSourceNotExistsException\n+     * @throws AlreadySponsorException\n+     */\n+    Member setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, LocalDate validityTo, Validation validation)\n+            throws AlreadyMemberException, ExtendMembershipException, UserNotInRoleException, PasswordStrengthException, WrongAttributeValueException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, InvalidLoginException, ExtSourceNotExistsException,\n+            AlreadySponsorException;\n+\n+    /**\n+     * Creates a sponsored membership for the given user.\n+     *\n+     * @param session           perun session\n+     * @param vo                virtual organization\n+     * @param userToBeSponsored user, that will be sponsored by sponsor\n+     * @param namespace         used for selecting external system in which guest user account will be created\n+     * @param password          password\n+     * @param sponsor           sponsoring user\n+     * @param validation        Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n+     * @return sponsored member\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     * @throws UserNotInRoleException\n+     * @throws PasswordStrengthException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws LoginNotExistsException\n+     * @throws PasswordCreationFailedException\n+     * @throws InvalidLoginException\n+     * @throws ExtSourceNotExistsException\n+     * @throws AlreadySponsorException\n+     */\n+    Member setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, Validation validation)\n+            throws AlreadyMemberException, ExtendMembershipException, UserNotInRoleException, PasswordStrengthException, WrongAttributeValueException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, InvalidLoginException, ExtSourceNotExistsException,\n+            AlreadySponsorException;\n+\n+    /**\n+     * Creates new sponsored members.\n+     * <p>\n+     * Since there may be error while creating some of the members and we cannot simply rollback the transaction and\n+     * start over, exceptions during member creation are not thrown and the returned map has this structure:\n+     * <p>\n+     * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n+     * <p>\n+     * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n+     * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n+     * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n+     *\n+     * @param sess               perun session\n+     * @param vo                 virtual organization to created sponsored members in\n+     * @param namespace          used for selecting external system in which guest user account will be created\n+     * @param data               csv file values separated by semicolon ';' characters\n+     * @param header             header to the given csv data, it should represent columns for the given data.\n+     *                           Required values are - firstname, lastname, urn:perun:user:attribute-def:def:preferredMail\n+     *                           Optional values are - urn:perun:user:attribute-def:def:note\n+     *                           The order of the items doesn't matter.\n+     * @param sponsor            sponsoring user\n+     * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n+     *                           to email which was set for him, be careful when using no-reply emails\n+     * @param url                base URL of Perun Instance\n+     * @param validation         Type of members validation, when ASYNC do not call this method in a cycle!\n+     * @return map of names to map of status, login, password, user and member\n+     */\n+    Map<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n+                                                                   List<String> data, String header, User sponsor,\n+                                                                   LocalDate validityTo, boolean sendActivationLink,\n+                                                                   String url, Validation validation);\n+\n+    /**\n+     * Creates new sponsored members.\n+     * <p>\n+     * Since there may be error while creating some of the members and we cannot simply rollback the transaction and start over,\n+     * exceptions during member creation are not thrown and the returned map has this structure:\n+     * <p>\n+     * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n+     * <p>\n+     * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n+     * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n+     * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n+     *\n+     * @param session            perun session\n+     * @param vo                 virtual organization to created sponsored members in\n+     * @param namespace          used for selecting external system in which guest user account will be created\n+     * @param names              names of members to create, single name should have the format {firstName};{lastName} to be\n+     *                           parsed well\n+     * @param email              (optional) preferred email that will be set to the created user. If no email\n+     *                           is provided, \"no-reply@muni.cz\" is used.\n+     * @param sponsor            sponsoring user\n+     * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n+     *                           to the email, be careful when using with empty (no-reply) email\n+     * @param url                base URL of Perun Instance\n+     * @param validation         Type of members validation, when ASYNC do not call this method in a cycle!\n+     * @return map of names to map of status, login, password\n+     */\n+    Map<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url, Validation validation);\n+\n+    /**\n+     * Links sponsored member and sponsoring user.\n+     *\n+     * @param session         perun session\n+     * @param sponsoredMember member which is sponsored\n+     * @param sponsor         sponsoring user\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws MemberNotSponsoredException\n+     * @throws AlreadySponsorException\n+     * @throws UserNotInRoleException\n+     */\n+    Member sponsorMember(PerunSession session, Member sponsoredMember, User sponsor) throws MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n+\n+    /**\n+     * Links sponsored member and sponsoring user.\n+     *\n+     * @param session         perun session\n+     * @param sponsoredMember member which is sponsored\n+     * @param sponsor         sponsoring user\n+     * @param validityTo      last day when the sponsorship is active (null means the sponsorship will last forever)\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws MemberNotSponsoredException\n+     * @throws AlreadySponsorException\n+     * @throws UserNotInRoleException\n+     */\n+    Member sponsorMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n+\n+    /**\n+     * For the given member and user returns their sponsorship relation object. If there is no\n+     * such relation, the SponsorshipDoesNotExistException is thrown.\n+     *\n+     * @param sess            session\n+     * @param sponsoredMember sponsored member\n+     * @param sponsor         sponsor\n+     * @return Sponsorship object\n+     * @throws SponsorshipDoesNotExistException if there is no sponsorship relation between the given member and user\n+     */\n+    Sponsorship getSponsorship(PerunSession sess, Member sponsoredMember, User sponsor) throws SponsorshipDoesNotExistException;\n+\n+    /**\n+     * Gets list of members that are sponsored by the user in the vo.\n+     *\n+     * @param sess perun session\n+     * @param vo   virtual organization\n+     * @param user user sponsoring members\n+     * @return list of members sponsored by the user in VO\n+     * @throws InternalErrorException if given parameters are invalid\n+     */\n+    List<Member> getSponsoredMembers(PerunSession sess, Vo vo, User user);\n+\n+    /**\n+     * Gets list of members that are sponsored by the user in all vos.\n+     *\n+     * @param sess perun session\n+     * @param user user sponsoring members\n+     * @return list of members sponsored by the user in VO\n+     * @throws InternalErrorException if given parameters are invalid\n+     */\n+    List<Member> getSponsoredMembers(PerunSession sess, User user);\n+\n+    /**\n+     * Gets list of sponsored members of a VO.\n+     *\n+     * @param sess session\n+     * @param vo   virtual organization from which are the sponsored members chosen\n+     * @return list of members from given vo who are sponsored\n+     * @throws InternalErrorException if given parameters are invalid\n+     */\n+    List<Member> getSponsoredMembers(PerunSession sess, Vo vo);\n+\n+    /**\n+     * Removes a sponsor.\n+     *\n+     * @param sess            perun session\n+     * @param sponsoredMember member which is sponsored\n+     * @param sponsor         sponsoring user\n+     * @throws InternalErrorException if given parameters are invalid\n+     */\n+    void removeSponsor(PerunSession sess, Member sponsoredMember, User sponsor);\n+\n+    /**\n+     * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n+     *\n+     * @param sess            perun session\n+     * @param sponsoredMember member which is sponsored\n+     * @param sponsorUser     sponsoring user or null for the caller\n+     * @return new expiration date\n+     * @throws InternalErrorException\n+     */\n+    String extendExpirationForSponsoredMember(PerunSession sess, Member sponsoredMember, User sponsorUser);\n+\n+    /**\n+     * Returns unified result of MemberGroupStatus for specified member and resource.\n+     * <p>\n+     * If member is VALID in at least one group assigned to the resource, result is VALID.\n+     * If member is not VALID in any of groups assigned to the resource, result is EXPIRED.\n+     * If member is not assigned to the resource at all, result is NULL.\n+     * <p>\n+     * MemberGroupStatus is never related to the members status in a VO as a whole!\n+     *\n+     * @param sess     PerunSession\n+     * @param member   Member to get unified MemberGroupStatus\n+     * @param resource Resource to get unified MemberGroupStatus\n+     * @return MemberGroupStatus for member unified through all his groups assigned to the resource.\n+     */\n+    MemberGroupStatus getUnifiedMemberGroupStatus(PerunSession sess, Member member, Resource resource);\n+\n+    /**\n+     * Returns unified result of MemberGroupStatus for specified user and facility.\n+     * <p>\n+     * If user is VALID in at least one group assigned to at least one resource on facility, result is VALID.\n+     * If user is not VALID in any of groups assigned to any of resources, result is EXPIRED.\n+     * If user is not assigned to the resource at all, result is NULL.\n+     * <p>\n+     * MemberGroupStatus is never related to the members status in any VO!\n+     *\n+     * @param sess     PerunSession\n+     * @param user     User to get unified MemberGroupStatus\n+     * @param facility Facility to get unified MemberGroupStatus\n+     * @return MemberGroupStatus for user unified throught all his groups assigned to any of resources of facility.\n+     */\n+    MemberGroupStatus getUnifiedMemberGroupStatus(PerunSession sess, User user, Facility facility);\n+\n+    /**\n+     * Return list of members VO by specific string.\n+     * All searches are case insensitive.\n+     * Looking for searchString in member mail, user preferredMail, logins, name and IDs (user and member).\n+     * If parameter onlySponsored is true, it will return only sponsored members by searchString.\n+     * If vo is null, looking for any members in whole Perun. If vo is not null, looking only in specific VO.<\n+     *\n+     * @param sess\n+     * @param vo            for which searching will be filtered, if null there is no filter for vo\n+     * @param searchString  it will be looking for this search string in the specific parameters in DB\n+     * @param onlySponsored it will return only sponsored members in vo\n+     * @return all members from specific VO by specific string\n+     * @throws InternalErrorException\n+     */\n+    List<Member> findMembers(PerunSession sess, Vo vo, String searchString, boolean onlySponsored);\n+\n+    /**\n+     * Update the sponsorship of given member for given sponsor.\n+     *\n+     * @param sess            session\n+     * @param sponsoredMember sponsored member\n+     * @param sponsor         sponsor\n+     * @param newValidity     new validity, can be set to null never expire\n+     * @throws SponsorshipDoesNotExistException if the given user is not sponsor of the given member\n+     */\n+    void updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor, LocalDate newValidity) throws SponsorshipDoesNotExistException;\n+\n+    /**\n+     * Returns sponsorship, which have validityTo in range [from, to).\n+     * (from is inclusive, to is exclusive).\n+     *\n+     * @param sess session\n+     * @param from lower validityTo bound (inclusive), use LocalDate.MIN if you don't want to specify the lower bound\n+     * @param to   upper validityTo bound (exclusive), use LocalDate.MAX, if you don't want to specify the upper bound\n+     * @return list of sponsorships which have validityTo set in the given range\n+     */\n+    List<Sponsorship> getSponsorshipsExpiringInRange(PerunSession sess, LocalDate from, LocalDate to);\n+\n+    /**\n+     * Moves membership in VO from source user to target user - moves the source user's\n+     * memberships in non-synchronized groups, member related attributes, bans and\n+     * sponsorships in the VO. Removes the source user's member object.\n+     *\n+     * @param sess       session\n+     * @param vo         the VO in which the membership should be moved\n+     * @param sourceUser the user to move membership from\n+     * @param targetUser the user to move membership to\n+     * @throws MemberNotExistsException  when sourceUser is not member of the VO\n+     * @throws AlreadyMemberException    when targetUser is already member of the VO\n+     * @throws ExtendMembershipException when the targetUser doesn't have required LOA for the VO\n+     */\n+    void moveMembership(PerunSession sess, Vo vo, User sourceUser, User targetUser) throws MemberNotExistsException, AlreadyMemberException, ExtendMembershipException;\n+\n+    /**\n+     * Return all loaded namespaces rules.\n+     *\n+     * @return all namespaces rules\n+     */\n+    List<NamespaceRules> getAllNamespacesRules();\n+\n+    /**\n+     * Get NamespaceRules for the namespace from the SponsoredAccountsConfigContainer\n+     *\n+     * @param namespace for which will be the rules fetched\n+     * @return NamespaceRules for the namespace\n+     * @throws NamespaceRulesNotExistsException if there are no rules for the namespace\n+     */\n+    NamespaceRules getNamespaceRules(String namespace) throws NamespaceRulesNotExistsException;\n }\n",
            "diff_size": 1752
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/35/MembersManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/35/MembersManagerBl.java\nindex 9a38bf30809..5a5ab96ab1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/35/MembersManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/35/MembersManagerBl.java\n@@ -44,7 +44,6 @@ import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.UserNotInRoleException;\n import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n-\n import java.time.LocalDate;\n import java.util.Date;\n import java.util.List;\n@@ -57,1310 +56,1519 @@ import java.util.Map;\n  * @author Slavek Licehammer\n  * @author Zora Sebestianova\n  */\n+\n+\n public interface MembersManagerBl {\n \n-\t/**\n-\t *  Deletes only member data  appropriated by member id.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws MemberAlreadyRemovedException\n-\t */\n-\tvoid deleteMember(PerunSession sess, Member member) throws MemberAlreadyRemovedException;\n-\n-\t/**\n-\t * Delete given members. It is possible to delete members from multiple vos.\n-\t *\n-\t * @param sess session\n-\t * @param members members that will be deleted\n-\t * @throws InternalErrorException internal error\n-\t * @throws MemberAlreadyRemovedException if already removed\n-\t */\n-\tvoid deleteMembers(PerunSession sess, List<Member> members) throws MemberAlreadyRemovedException;\n-\n-\t/**\n-\t *  Deletes all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @throws InternalErrorException\n-\t * @throws MemberAlreadyRemovedException\n-\t */\n-\tvoid deleteAllMembers(PerunSession sess, Vo vo) throws MemberAlreadyRemovedException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating service user.\n-\t * In list specificUserOwners can't be service user, only normal users are allowed.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param owners list of users who own the service (can't be empty or contain specific user)\n-\t * @return newly created member (of service User)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createServiceMember(PerunSession sess, Vo vo, Candidate candidate, List<User> owners) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating service user.\n-\t * In list specificUserOwners can't be service user, only normal users are allowed.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param owners list of users who own the service user (can't be empty or contain service user)\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member (of specific User)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createServiceMember(PerunSession sess, Vo vo, Candidate candidate, List<User> owners, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * It can be called in synchronous or asynchronous mode\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongReferenceAttributeValueException, WrongAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * It can be called in synchronous or asynchronous mode\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws WrongReferenceAttributeValueException, WrongAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param specificUserType (Normal or service or sponsored)\n-\t *\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, Candidate)\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param specificUserType (Normal or service or sponsored)\n-\t * @param groups list of groups where member will be added too\n-\t * @param overwriteUserAttributes list of user attributes names which will be overwrite instead of merged\n-\t *\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, Candidate)\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Transform non-sponsored member to sponsored one with defined sponsor\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member who will be set as sponsored one\n-\t * @param sponsor new sponsor of this member\n-\t * @param validityTo the last day when the sponsorship is active\n-\t *\n-\t * @return sponsored member\n-\t *\n-\t * @throws AlreadySponsoredMemberException if member was already flagged as sponsored\n-\t * @throws UserNotInRoleException if sponsor has not right role in the member's VO\n-\t * @throws InternalErrorException if something unexpected happened\n-\t * @throws AlreadySponsorException sponsoredMember is already sponsored by User and his sponsorship is still active\n-\t */\n-\tMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException;\n-\n-\t/**\n-\t * Transform non-sponsored member to sponsored one with defined sponsor\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member who will be set as sponsored one\n-\t * @param sponsor new sponsor of this member\n-\t *\n-\t * @return sponsored member\n-\t *\n-\t * @throws AlreadySponsoredMemberException if member was already flagged as sponsored\n-\t * @throws UserNotInRoleException if sponsor has not right role in the member's VO\n-\t * @throws InternalErrorException if something unexpected happened\n-\t * @throws AlreadySponsorException sponsoredMember is already sponsored by User and his sponsorship is still active\n-\t */\n-\tMember setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor) throws AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException;\n-\n-\t/**\n-\t * Transform sponsored member to non-sponsored one. Delete all his sponsors.\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member which who be unset from sponsoring\n-\t *\n-\t * @return non-sponsored member\n-\t *\n-\t * @throws MemberNotSponsoredException If member was not set as sponsored before calling this method.\n-\t * @throws InternalErrorException if something unexpected happend\n-\t */\n-\tMember unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotSponsoredException;\n-\n-\t/**\n-\t * Creates member. Runs synchronously.\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n-\t */\n-\tMember createMemberSync(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates member. Runs synchronously. Add member also to all groups in list.\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n-\t */\n-\tMember createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates member. Runs synchronously. Add member also to all groups in list.\n-\t * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n-\t */\n-\tMember createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Create new member from user by login and ExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param extSource\n-\t * @param login\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Update member in underlaying data source. Member is find by id. Other java attributes are updated.\n-\t *\n-\t * @param sess\n-\t * @param member member who have set new java attributes.\n-\t * @return updated member\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tMember updateMember(PerunSession sess, Member member) throws WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Find member of this Vo by his login in external source\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @param userExtSource\n-\t * @return selected user or throws  in case the requested member doesn't exists in this Vo\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tMember getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Get member by its external sources. If the given sources do not belong to a single member\n-\t * and exception is thrown.\n-\t *\n-\t * @param perunSession session\n-\t * @param vo vo\n-\t * @param userExtSources ues\n-\t * @return member\n-\t * @throws InternalErrorException internal error\n-\t * @throws MemberNotExistsException member does not exist\n-\t */\n-\tMember getMemberByUserExtSources(PerunSession perunSession, Vo vo, List<UserExtSource> userExtSources) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Returns member by his id.\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tMember getMemberById(PerunSession sess, int id) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Returns members by their ids.\n-\t *\n-\t * @param perunSession\n-\t * @param ids\n-\t * @return list of members with specified ids\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembersByIds(PerunSession perunSession, List<Integer> ids);\n-\n-\t/**\n-\t * Returns member by his user and vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tMember getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Return all VO Members of the User.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return List of Members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembersByUser(PerunSession sess, User user);\n-\n-\t/**\n-\t * Return all VO Members of the User, which have specified Status in their VO.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param status\n-\t * @return List of Members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembersByUserWithStatus(PerunSession sess, User user, Status status);\n-\n-\t/**\n-\t * Returns member by his userId.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param userId\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tMember getMemberByUserId(PerunSession sess, Vo vo, int userId) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Get all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Get all VO members who have the status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status. If status is null return all members.\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo, Status status);\n-\n-\t/**\n-\t * Get Member to RichMember with attributes.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tRichMember getRichMember(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Get Member to RichMember with attributes.\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tRichMember getRichMemberWithAttributes(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef);\n-\n-\t/**\n-\t * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param allowedStatuses\n-\t * @return list of rich members on specified page, empty list if there are no user in this group or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group);\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsNames for vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of RichMembers\n-\t * @throws AttributeNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrsNames from the vo.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrsNames from the vo and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrsNames from the group.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from group\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws AttributeNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrsNames from the group and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from group\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws AttributeNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrNames.\n-\t * Attributes are defined by member (user) and resource (facility) objects.\n-\t * It returns also user-facility (in userAttributes of RichMember) and\n-\t * member-resource (in memberAttributes of RichMember) attributes.\n-\t * Members are defined by group and are filtered by list of allowed statuses.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t * @throws GroupResourceMismatchException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupResourceMismatchException;\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attributes specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @param onlySponsored return only sponsored members\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString, boolean onlySponsored);\n-\n-\t/**\n-\t * Return list of richMembers by the searchString with attributes specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, String searchString);\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attributes specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString);\n-\n-\t/**\n-\t * Return list of richMembers by the searchString with attributes specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString);\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param lookingInParentGroup\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @param lookingInParentGroup\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of RichMembers\n-\t * @throws AttributeNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws AttributeNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t * Get also user-facility (as user attribute in rich member) and member-resource (as member attributes in rich member)\n-\t * attributes by resource.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of RichMembers\n-\t * @throws AttributeNotExistsException\n-\t * @throws InternalErrorException\n-\t * @throws GroupResourceMismatchException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, Resource resource, List<String> attrsNames) throws AttributeNotExistsException, GroupResourceMismatchException;\n-\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef);\n-\n-\t/**\n-\t * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @return list of rich members on specified page, empty list if there are no user in this Group or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Group group);\n-\n-\t/**\n-\t * Get rich members who have the status, for displaying on pages. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status. If status is null return all members.\n-\t * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status);\n-\n-\t/**\n-\t * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Get rich members who have the status, for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status. If status is null return all members.\n-\t * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status);\n-\n-\t/**\n-\t * Convert list of users' ids into the list of members.\n-\t *\n-\t * @param sess\n-\t * @param usersIds\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembersByUsersIds(PerunSession sess, List<Integer> usersIds, Vo vo);\n-\n-\t/**\n-\t * Convert list of users into the list of members.\n-\t *\n-\t * @param sess\n-\t * @param users\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getMembersByUsers(PerunSession sess, List<User> users, Vo vo);\n-\n-\n-\t/**\n-\t * Fill the RichMember object with data from Member and corresponding User.\n-\t *\n-\t * @param sess\n-\t * @param members\n-\t * @return list of richMembers\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> convertMembersToRichMembers(PerunSession sess, List<Member> members);\n-\n-\t/**\n-\t * Fill the RichMember object with data from Member and corresponding User and user/member attributes.\n-\t *\n-\t * @param sess\n-\t * @param richMembers\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers);\n-\n-\t/**\n-\t * Fill the RichMember object with data from Member and corresponding User and user/member attributes defined by list of attribute definition.\n-\t *\n-\t * @param sess\n-\t * @param richMembers\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, List<AttributeDefinition> attrsDef);\n-\n-\t/**\n-\t * Convert given User to the Sponsor object. For the sponsor object, there is loaded information\n-\t * about the sponsorship. Also, if the given user is a RichUser, all of its attributes and userExtSources\n-\t * are also set to the sponsor object.\n-\t *\n-\t * @param sess session\n-\t * @param user a User or a RichUser object\n-\t * @param sponsoredMember member, to which the sponsorship information is loaded\n-\t * @return Sponsor object created from given user object with addition info about sponsorship for the given member.\n-\t */\n-\tSponsor convertUserToSponsor(PerunSession sess, User user, Member sponsoredMember);\n-\n-\t/**\n-\t * Fill the RichMember object with data from Member and corresponding User, user/member, user-facility and member-resource attributes defined by list of attribute definition.\n-\t *\n-\t * @param sess\n-\t * @param richMembers\n-\t * @param resource\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws MemberResourceMismatchException\n-\t */\n-\tList<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, Resource resource, List<AttributeDefinition> attrsDef) throws MemberResourceMismatchException;\n-\n-\t/**\n-\t * Get the VO members count.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return count of VO members\n-\t * @throws InternalErrorException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Returns number of Vo members with defined status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status\n-\t * @return number of members\n-\t * @throws InternalErrorException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo, Status status);\n-\n-\t/**\n-\t * Get the member VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member's VO\n-\t * @throws InternalErrorException\n-\t */\n-\tVo getMemberVo(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Return list of members by theirs name.\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembersByName(PerunSession sess, String searchString);\n-\n-\t/**\n-\t * Return list of members by theirs name under defined VO.\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString);\n-\n-\t/**\n-\t * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembersInGroup(PerunSession sess, Group group, String searchString);\n-\n-\t/**\n-\t * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n-\t * If the group is top-level group, searching in \"members\" group of vo in which the group exists.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString);\n-\n-\t/**\n-\t * Return list of rich members with certain attributes by the searchString under defined Group. Search is done in name, email and login.\n-\t * @param sess session\n-\t * @param group group\n-\t * @param searchString search string\n-\t * @param attrsNames list of attributes that should be found\n-\t * @return list of rich members with certain attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString, List<String> attrsNames);\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString);\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under parent group of defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString);\n-\n-\t/**\n-\t * Return list of members by theirs name or login or email under defined VO.\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString);\n-\n-\t/**\n-\t * Return list of rich members by theirs name or login or email under defined VO.\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @param onlySponsored return only sponsored members\n-\t * @return list of rich members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString, boolean onlySponsored);\n-\n-\t/**\n-\t * Return list of rich members by theirs name or login or email\n-\t * @param sess\n-\t * @param searchString\n-\t * @param onlySponsored return only sponsored members\n-\t * @return list of rich members\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembers(PerunSession sess, String searchString, boolean onlySponsored);\n-\n-\t/**\n-\t * Return list of rich members with certain attributes by theirs name or login or email defined VO.\n-\t * @param sess session\n-\t * @param vo vo\n-\t * @param searchString search string\n-\t * @param attrsNames list of attribute names that should be found\n-\t * @param onlySponsored return only sponsored members\n-\t * @return list of rich members with certain attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString, List<String> attrsNames, boolean onlySponsored);\n-\n-\t/**\n-\t * Return list of rich members with attributes by theirs name or login or email under defined VO.\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of rich members with attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString);\n-\n-\t/**\n-\t * Return list of rich members with certain attributes by theirs name or login or email.\n-\t * @param sess session\n-\t * @param searchString search string\n-\t * @param attrsNames list of attribute names that should be found\n-\t * @return list of rich members with certain attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString, List<String> attrsNames);\n-\n-\t/**\n-\t * Return list of rich members with attributes by theirs name or login or email\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of rich members with attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString);\n-\n-\tvoid checkMemberExists(PerunSession sess, Member member) throws MemberNotExistsException;\n-\n-\t/**\n-\t * Set date to which will be member suspended in his VO.\n-\t *\n-\t * For almost unlimited time please use time in the far future.\n-\t *\n-\t * @param sess\n-\t * @param member member who will be suspended\n-\t * @param suspendedTo date to which will be member suspended (after this date, he will not be affected by suspension any more)\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid suspendMemberTo(PerunSession sess, Member member, Date suspendedTo);\n-\n-\t/**\n-\t * Remove suspend state from Member - remove date to which member should be considered as suspended in the VO.\n-\t *\n-\t * WARNING: this method will always succeed if member exists, because it will set date for suspension to null\n-\t *\n-\t * @param sess\n-\t * @param member member for which the suspend state will be removed\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid unsuspendMember(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Return false if member has status INVALID or DISABLED. True in other cases.\n-\t *\n-\t * @param sess\n-\t * @param member the member\n-\t * @return false if member has INVALID or DISABLED status, true in other cases\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isMemberAllowed(PerunSession sess, Member member);\n-\n-\t/**\n-\t *  Set status of the member to specified status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param status new status\n-\t * @return member with status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws MemberNotValidYetException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tMember setStatus(PerunSession sess, Member member, Status status) throws WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n-\n-\t/**\n-\t * Validate all atributes for member and set member's status to VALID.\n-\t * This method runs synchronously.\n-\t *\n-\t * Method runs in nested transaction.\n-\t * As side effect, on success will change status of the object member.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return membet with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tMember validateMember(PerunSession sess, Member member) throws WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Validate all attributes for member and then set member's status to VALID.\n-\t * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation sucessfuly finishes\n-\t * it switch member's status to VALID. If validation ends with error, member keeps his status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with original status\n-\t *\n-\t */\n-\tMember validateMemberAsync(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Set member status to invalid.\n-\t *\n-\t * As side effect it will change status of the object member.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tMember invalidateMember(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Set member's status to expired.\n-\t * All attributes are validated if was in INVALID or DISABLED state before.\n-\t * If validation ends with error, member keeps his old status.\n-\t *\n-\t * Method runs in nested transaction.\n-\t * As side effect, on success will change status of the object member.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tMember expireMember(PerunSession sess, Member member) throws WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Disable member.\n-\t *\n-\t * As side effect, on success will change status of the object member.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotValidYetException\n-\t */\n-\tMember disableMember(PerunSession sess, Member member) throws MemberNotValidYetException;\n-\n-\t/**\n-\t * Retain only members with specified status.\n-\t *\n-\t * @param sess\n-\t * @param members\n-\t * @param status\n-\t * @return\n-\t *\n-\t * @throws MemberNotValidYetException\n-\t */\n-\tList<Member> retainMembersWithStatus(PerunSession sess, List<Member> members, Status status);\n-\n-\t/**\n-\t * Return true if member have specified status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param status\n-\t * @return true if member have the specified status\n-\t *         false otherwise\n-\t */\n-\tboolean haveStatus(PerunSession sess, Member member, Status status);\n-\n-\t/**\n-\t * Extend member membership using membershipExpirationRules attribute defined at VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tvoid extendMembership(PerunSession sess, Member member) throws ExtendMembershipException;\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean canExtendMembership(PerunSession sess, Member member);\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception with reason\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tboolean canExtendMembershipWithReason(PerunSession sess, Member member) throws ExtendMembershipException;\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean canBeMember(PerunSession sess, Vo vo, User user, String loa);\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO, exception with reason otherwise\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tboolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws ExtendMembershipException;\n-\n-\t/**\n-\t * Get member by extSourceName, extSourceLogin and Vo\n-\t *\n-\t * @param sess\n-\t * @param extSourceName name of extSource\n-\t * @param extLogin login of user in extSource\n-\t * @param vo Vo where we are looking for member\n-\t * @return member\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws UserExtSourceNotExistsException\n-\t * @throws MemberNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tMember getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns the date to which will be extended member's expiration time.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return date\n-\t * @throws InternalErrorException\n-\t */\n-\tDate getNewExtendMembership(PerunSession sess, Member member);\n-\n-\t/**\n+ /**\n+  *  Deletes only member data  appropriated by member id.\n+  *\n+  * @param sess\n+  * @param member\n+  * @throws InternalErrorException\n+  * @throws MemberAlreadyRemovedException\n+  */\n+\n+\n+ void deleteMember(PerunSession sess, Member member) throws MemberAlreadyRemovedException;\n+\n+ /**\n+  * Delete given members. It is possible to delete members from multiple vos.\n+  *\n+  * @param sess session\n+  * @param members members that will be deleted\n+  * @throws InternalErrorException internal error\n+  * @throws MemberAlreadyRemovedException if already removed\n+  */\n+\n+\n+ void deleteMembers(PerunSession sess, List<Member> members) throws MemberAlreadyRemovedException;\n+\n+ /**\n+  *  Deletes all VO members.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @throws InternalErrorException\n+  * @throws MemberAlreadyRemovedException\n+  */\n+\n+\n+ void deleteAllMembers(PerunSession sess, Vo vo) throws MemberAlreadyRemovedException;\n+\n+ /**\n+  * Creates a new member from candidate which is prepared for creating service user.\n+  * In list specificUserOwners can't be service user, only normal users are allowed.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate prepared future specificUser\n+  * @param owners list of users who own the service (can't be empty or contain specific user)\n+  * @return newly created member (of service User)\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ Member createServiceMember(PerunSession sess, Vo vo, Candidate candidate, List<User> owners) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member from candidate which is prepared for creating service user.\n+  * In list specificUserOwners can't be service user, only normal users are allowed.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate prepared future specificUser\n+  * @param owners list of users who own the service user (can't be empty or contain service user)\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member (of specific User)\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ Member createServiceMember(PerunSession sess, Vo vo, Candidate candidate, List<User> owners, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * It can be called in synchronous or asynchronous mode\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param login user's login within extSource\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws WrongReferenceAttributeValueException, WrongAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * It can be called in synchronous or asynchronous mode\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param login user's login within extSource\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws WrongReferenceAttributeValueException, WrongAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param extSourceLoa level of assurance\n+  * @param login user's login within extSource\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param extSourceLoa level of assurance\n+  * @param login user's login within extSource\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @return newly created members\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param groups list of groups where member will be added too\n+  * @return newly created members\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param specificUserType (Normal or service or sponsored)\n+  *\n+  * @return newly created members\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, Candidate)\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param specificUserType (Normal or service or sponsored)\n+  * @param groups list of groups where member will be added too\n+  * @param overwriteUserAttributes list of user attributes names which will be overwrite instead of merged\n+  *\n+  * @return newly created members\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, Candidate)\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Transform non-sponsored member to sponsored one with defined sponsor\n+  *\n+  * @param session perun session\n+  * @param sponsoredMember member who will be set as sponsored one\n+  * @param sponsor new sponsor of this member\n+  * @param validityTo the last day when the sponsorship is active\n+  *\n+  * @return sponsored member\n+  *\n+  * @throws AlreadySponsoredMemberException if member was already flagged as sponsored\n+  * @throws UserNotInRoleException if sponsor has not right role in the member's VO\n+  * @throws InternalErrorException if something unexpected happened\n+  * @throws AlreadySponsorException sponsoredMember is already sponsored by User and his sponsorship is still active\n+  */\n+\n+\n+ Member setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException;\n+\n+ /**\n+  * Transform non-sponsored member to sponsored one with defined sponsor\n+  *\n+  * @param session perun session\n+  * @param sponsoredMember member who will be set as sponsored one\n+  * @param sponsor new sponsor of this member\n+  *\n+  * @return sponsored member\n+  *\n+  * @throws AlreadySponsoredMemberException if member was already flagged as sponsored\n+  * @throws UserNotInRoleException if sponsor has not right role in the member's VO\n+  * @throws InternalErrorException if something unexpected happened\n+  * @throws AlreadySponsorException sponsoredMember is already sponsored by User and his sponsorship is still active\n+  */\n+\n+\n+ Member setSponsorshipForMember(PerunSession session, Member sponsoredMember, User sponsor) throws AlreadySponsoredMemberException, UserNotInRoleException, AlreadySponsorException;\n+\n+ /**\n+  * Transform sponsored member to non-sponsored one. Delete all his sponsors.\n+  *\n+  * @param session perun session\n+  * @param sponsoredMember member which who be unset from sponsoring\n+  *\n+  * @return non-sponsored member\n+  *\n+  * @throws MemberNotSponsoredException If member was not set as sponsored before calling this method.\n+  * @throws InternalErrorException if something unexpected happend\n+  */\n+\n+\n+ Member unsetSponsorshipForMember(PerunSession session, Member sponsoredMember) throws MemberNotSponsoredException;\n+\n+ /**\n+  * Creates member. Runs synchronously.\n+  * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n+  */\n+\n+\n+ Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates member. Runs synchronously. Add member also to all groups in list.\n+  * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n+  */\n+\n+\n+ Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates member. Runs synchronously. Add member also to all groups in list.\n+  * @see cz.metacentrum.perun.core.bl.MembersManagerBl#createMember(PerunSession, Vo, boolean, Candidate)\n+  */\n+\n+\n+ Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member from user.\n+  * <strong>This method runs asynchronously</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, User user) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Creates a new member from user.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs asynchronously</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Create new member from user by login and ExtSource.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs asynchronously</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param extSource\n+  * @param login\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Update member in underlaying data source. Member is find by id. Other java attributes are updated.\n+  *\n+  * @param sess\n+  * @param member member who have set new java attributes.\n+  * @return updated member\n+  *\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ Member updateMember(PerunSession sess, Member member) throws WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+ /**\n+  * Find member of this Vo by his login in external source\n+  *\n+  * @param perunSession\n+  * @param vo\n+  * @param userExtSource\n+  * @return selected user or throws  in case the requested member doesn't exists in this Vo\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ Member getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws MemberNotExistsException;\n+\n+ /**\n+  * Get member by its external sources. If the given sources do not belong to a single member\n+  * and exception is thrown.\n+  *\n+  * @param perunSession session\n+  * @param vo vo\n+  * @param userExtSources ues\n+  * @return member\n+  * @throws InternalErrorException internal error\n+  * @throws MemberNotExistsException member does not exist\n+  */\n+\n+\n+ Member getMemberByUserExtSources(PerunSession perunSession, Vo vo, List<UserExtSource> userExtSources) throws MemberNotExistsException;\n+\n+ /**\n+  * Returns member by his id.\n+  *\n+  * @param sess\n+  * @param id\n+  * @return member\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ Member getMemberById(PerunSession sess, int id) throws MemberNotExistsException;\n+\n+ /**\n+  * Returns members by their ids.\n+  *\n+  * @param perunSession\n+  * @param ids\n+  * @return list of members with specified ids\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> getMembersByIds(PerunSession perunSession, List<Integer> ids);\n+\n+ /**\n+  * Returns member by his user and vo.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @return member\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ Member getMemberByUser(PerunSession sess, Vo vo, User user) throws MemberNotExistsException;\n+\n+ /**\n+  * Return all VO Members of the User.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return List of Members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> getMembersByUser(PerunSession sess, User user);\n+\n+ /**\n+  * Return all VO Members of the User, which have specified Status in their VO.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param status\n+  * @return List of Members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> getMembersByUserWithStatus(PerunSession sess, User user, Status status);\n+\n+ /**\n+  * Returns member by his userId.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param userId\n+  * @return member\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ Member getMemberByUserId(PerunSession sess, Vo vo, int userId) throws MemberNotExistsException;\n+\n+ /**\n+  * Get all VO members.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return all members of the VO\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> getMembers(PerunSession sess, Vo vo);\n+\n+ /**\n+  * Get all VO members who have the status.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status get only members who have this status. If status is null return all members.\n+  * @return all members of the VO\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> getMembers(PerunSession sess, Vo vo, Status status);\n+\n+ /**\n+  * Get Member to RichMember with attributes.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ RichMember getRichMember(PerunSession sess, Member member);\n+\n+ /**\n+  * Get Member to RichMember with attributes.\n+  * @param sess\n+  * @param member\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ RichMember getRichMemberWithAttributes(PerunSession sess, Member member);\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsDef\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef);\n+\n+ /**\n+  * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param allowedStatuses\n+  * @return list of rich members on specified page, empty list if there are no user in this group or in this page\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group);\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsNames for vo.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames list of attrNames for selected attributes\n+  * @return list of RichMembers\n+  * @throws AttributeNotExistsException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws AttributeNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attributes specific for list of attrsNames from the vo.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @return list of richMembers with specific attributes from Vo\n+  * @throws InternalErrorException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws AttributeNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attributes specific for list of attrsNames from the vo and have only\n+  * status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @return list of richMembers with specific attributes from Vo\n+  * @throws InternalErrorException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attributes specific for list of attrsNames from the group.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so get richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param lookingInParentGroup\n+  * @return list of richMembers with specific attributes from group\n+  * @throws InternalErrorException\n+  * @throws AttributeNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws AttributeNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attributes specific for list of attrsNames from the group and have only\n+  * status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so get richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param lookingInParentGroup\n+  * @return list of richMembers with specific attributes from group\n+  * @throws InternalErrorException\n+  * @throws AttributeNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws AttributeNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attributes specific for list of attrNames.\n+  * Attributes are defined by member (user) and resource (facility) objects.\n+  * It returns also user-facility (in userAttributes of RichMember) and\n+  * member-resource (in memberAttributes of RichMember) attributes.\n+  * Members are defined by group and are filtered by list of allowed statuses.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param resource\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @return list of richMembers with specific attributes\n+  * @throws InternalErrorException\n+  * @throws AttributeNotExistsException\n+  * @throws GroupResourceMismatchException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws AttributeNotExistsException, GroupResourceMismatchException;\n+\n+ /**\n+  * Return list of richMembers for specific vo by the searchString with attributes specific for list of attrsNames.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @param searchString\n+  * @param onlySponsored return only sponsored members\n+  * @return list of founded richMembers with specific attributes from Vo for searchString\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess,\n+                                          Vo vo,\n+                                          List<String> attrsNames,\n+                                          String searchString, boolean onlySponsored);\n+\n+ /**\n+  * Return list of richMembers by the searchString with attributes specific for list of attrsNames.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * @param sess\n+  * @param attrsNames\n+  * @param searchString\n+  * @return list of founded richMembers with specific attributes from Vo for searchString\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, String searchString);\n+\n+ /**\n+  * Return list of richMembers for specific vo by the searchString with attributes specific for list of attrsNames\n+  * and who have only status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param searchString\n+  * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString);\n+\n+ /**\n+  * Return list of richMembers by the searchString with attributes specific for list of attrsNames\n+  * and who have only status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * @param sess\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param searchString\n+  * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString);\n+\n+ /**\n+  * Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+\n+  * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so find richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param lookingInParentGroup\n+  * @param searchString\n+  * @return list of founded richMembers with specific attributes from Group for searchString\n+  * @throws InternalErrorException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws ParentGroupNotExistsException;\n+\n+ /**\n+  * Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+  * and who have only status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so find richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param searchString\n+  * @param lookingInParentGroup\n+  * @return list of founded richMembers with specific attributes from Group for searchString\n+  * @throws InternalErrorException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws ParentGroupNotExistsException;\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames list of attrNames for selected attributes\n+  * @return list of RichMembers\n+  * @throws AttributeNotExistsException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws AttributeNotExistsException;\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+  * Get also user-facility (as user attribute in rich member) and member-resource (as member attributes in rich member)\n+  * attributes by resource.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param resource\n+  * @param attrsNames list of attrNames for selected attributes\n+  * @return list of RichMembers\n+  * @throws AttributeNotExistsException\n+  * @throws InternalErrorException\n+  * @throws GroupResourceMismatchException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, Resource resource, List<String> attrsNames) throws AttributeNotExistsException, GroupResourceMismatchException;\n+\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsDef\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef);\n+\n+ /**\n+  * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getRichMembers(PerunSession sess, Vo vo);\n+\n+ /**\n+  * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources.\n+  *\n+  * @param sess\n+  * @param group\n+  * @return list of rich members on specified page, empty list if there are no user in this Group or in this page\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getRichMembers(PerunSession sess, Group group);\n+\n+ /**\n+  * Get rich members who have the status, for displaying on pages. Rich member object contains user, member, userExtSources.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status get only members who have this status. If status is null return all members.\n+  * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status);\n+\n+ /**\n+  * Get rich members for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo);\n+\n+ /**\n+  * Get rich members who have the status, for displaying on pages. Rich member object contains user, member, userExtSources, userAttributes, memberAttributes.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status get only members who have this status. If status is null return all members.\n+  * @return list of rich members on specified page, empty list if there are no user in this VO or in this page\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status);\n+\n+ /**\n+  * Convert list of users' ids into the list of members.\n+  *\n+  * @param sess\n+  * @param usersIds\n+  * @param vo\n+  * @return list of members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> getMembersByUsersIds(PerunSession sess, List<Integer> usersIds, Vo vo);\n+\n+ /**\n+  * Convert list of users into the list of members.\n+  *\n+  * @param sess\n+  * @param users\n+  * @param vo\n+  * @return list of members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> getMembersByUsers(PerunSession sess, List<User> users, Vo vo);\n+\n+\n+ /**\n+  * Fill the RichMember object with data from Member and corresponding User.\n+  *\n+  * @param sess\n+  * @param members\n+  * @return list of richMembers\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> convertMembersToRichMembers(PerunSession sess, List<Member> members);\n+\n+ /**\n+  * Fill the RichMember object with data from Member and corresponding User and user/member attributes.\n+  *\n+  * @param sess\n+  * @param richMembers\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers);\n+\n+ /**\n+  * Fill the RichMember object with data from Member and corresponding User and user/member attributes defined by list of attribute definition.\n+  *\n+  * @param sess\n+  * @param richMembers\n+  * @param attrsDef\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, List<AttributeDefinition> attrsDef);\n+\n+ /**\n+  * Convert given User to the Sponsor object. For the sponsor object, there is loaded information\n+  * about the sponsorship. Also, if the given user is a RichUser, all of its attributes and userExtSources\n+  * are also set to the sponsor object.\n+  *\n+  * @param sess session\n+  * @param user a User or a RichUser object\n+  * @param sponsoredMember member, to which the sponsorship information is loaded\n+  * @return Sponsor object created from given user object with addition info about sponsorship for the given member.\n+  */\n+\n+\n+ Sponsor convertUserToSponsor(PerunSession sess, User user, Member sponsoredMember);\n+\n+ /**\n+  * Fill the RichMember object with data from Member and corresponding User, user/member, user-facility and member-resource attributes defined by list of attribute definition.\n+  *\n+  * @param sess\n+  * @param richMembers\n+  * @param resource\n+  * @param attrsDef\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws MemberResourceMismatchException\n+  */\n+\n+\n+ List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess,\n+                                                            List<RichMember> richMembers,\n+                                                            Resource resource, List<AttributeDefinition> attrsDef) throws MemberResourceMismatchException;\n+\n+ /**\n+  * Get the VO members count.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return count of VO members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ int getMembersCount(PerunSession sess, Vo vo);\n+\n+ /**\n+  * Returns number of Vo members with defined status.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status\n+  * @return number of members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ int getMembersCount(PerunSession sess, Vo vo, Status status);\n+\n+ /**\n+  * Get the member VO.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return member's VO\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Vo getMemberVo(PerunSession sess, Member member);\n+\n+ /**\n+  * Return list of members by theirs name.\n+  * @param sess\n+  * @param searchString\n+  * @return list of members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> findMembersByName(PerunSession sess, String searchString);\n+\n+ /**\n+  * Return list of members by theirs name under defined VO.\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString);\n+\n+ /**\n+  * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param searchString\n+  * @return list of members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString);\n+\n+ /**\n+  * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n+  * If the group is top-level group, searching in \"members\" group of vo in which the group exists.\n+  *\n+  * @param sess\n+  * @param group this group is used to get parent group, we are searching members of the parent group\n+  * @param searchString\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString);\n+\n+ /**\n+  * Return list of rich members with certain attributes by the searchString under defined Group. Search is done in name, email and login.\n+  * @param sess session\n+  * @param group group\n+  * @param searchString search string\n+  * @param attrsNames list of attributes that should be found\n+  * @return list of rich members with certain attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString, List<String> attrsNames);\n+\n+ /**\n+  * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param searchString\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString);\n+\n+ /**\n+  * Return list of rich members with attributes by the searchString under parent group of defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group this group is used to get parent group, we are searching members of the parent group\n+  * @param searchString\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString);\n+\n+ /**\n+  * Return list of members by theirs name or login or email under defined VO.\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString);\n+\n+ /**\n+  * Return list of rich members by theirs name or login or email under defined VO.\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @param onlySponsored return only sponsored members\n+  * @return list of rich members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString, boolean onlySponsored);\n+\n+ /**\n+  * Return list of rich members by theirs name or login or email\n+  * @param sess\n+  * @param searchString\n+  * @param onlySponsored return only sponsored members\n+  * @return list of rich members\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findRichMembers(PerunSession sess, String searchString, boolean onlySponsored);\n+\n+ /**\n+  * Return list of rich members with certain attributes by theirs name or login or email defined VO.\n+  * @param sess session\n+  * @param vo vo\n+  * @param searchString search string\n+  * @param attrsNames list of attribute names that should be found\n+  * @param onlySponsored return only sponsored members\n+  * @return list of rich members with certain attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess,\n+                                                    Vo vo,\n+                                                    String searchString,\n+                                                    List<String> attrsNames, boolean onlySponsored);\n+\n+ /**\n+  * Return list of rich members with attributes by theirs name or login or email under defined VO.\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of rich members with attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString);\n+\n+ /**\n+  * Return list of rich members with certain attributes by theirs name or login or email.\n+  * @param sess session\n+  * @param searchString search string\n+  * @param attrsNames list of attribute names that should be found\n+  * @return list of rich members with certain attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString, List<String> attrsNames);\n+\n+ /**\n+  * Return list of rich members with attributes by theirs name or login or email\n+  * @param sess\n+  * @param searchString\n+  * @return list of rich members with attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString);\n+\n+\n+ void checkMemberExists(PerunSession sess, Member member) throws MemberNotExistsException;\n+\n+ /**\n+  * Set date to which will be member suspended in his VO.\n+  *\n+  * For almost unlimited time please use time in the far future.\n+  *\n+  * @param sess\n+  * @param member member who will be suspended\n+  * @param suspendedTo date to which will be member suspended (after this date, he will not be affected by suspension any more)\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void suspendMemberTo(PerunSession sess, Member member, Date suspendedTo);\n+\n+ /**\n+  * Remove suspend state from Member - remove date to which member should be considered as suspended in the VO.\n+  *\n+  * WARNING: this method will always succeed if member exists, because it will set date for suspension to null\n+  *\n+  * @param sess\n+  * @param member member for which the suspend state will be removed\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void unsuspendMember(PerunSession sess, Member member);\n+\n+ /**\n+  * Return false if member has status INVALID or DISABLED. True in other cases.\n+  *\n+  * @param sess\n+  * @param member the member\n+  * @return false if member has INVALID or DISABLED status, true in other cases\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isMemberAllowed(PerunSession sess, Member member);\n+\n+ /**\n+  *  Set status of the member to specified status.\n+  *\n+  * @param sess\n+  * @param member\n+  * @param status new status\n+  * @return member with status set\n+  *\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws MemberNotValidYetException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ Member setStatus(PerunSession sess, Member member, Status status) throws WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n+\n+ /**\n+  * Validate all atributes for member and set member's status to VALID.\n+  * This method runs synchronously.\n+  *\n+  * Method runs in nested transaction.\n+  * As side effect, on success will change status of the object member.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return membet with new status set\n+  *\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ Member validateMember(PerunSession sess, Member member) throws WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Validate all attributes for member and then set member's status to VALID.\n+  * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation sucessfuly finishes\n+  * it switch member's status to VALID. If validation ends with error, member keeps his status.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return member with original status\n+  *\n+  */\n+\n+\n+ Member validateMemberAsync(PerunSession sess, Member member);\n+\n+ /**\n+  * Set member status to invalid.\n+  *\n+  * As side effect it will change status of the object member.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return member with new status set\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Member invalidateMember(PerunSession sess, Member member);\n+\n+ /**\n+  * Set member's status to expired.\n+  * All attributes are validated if was in INVALID or DISABLED state before.\n+  * If validation ends with error, member keeps his old status.\n+  *\n+  * Method runs in nested transaction.\n+  * As side effect, on success will change status of the object member.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return member with new status set\n+  *\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ Member expireMember(PerunSession sess, Member member) throws WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+ /**\n+  * Disable member.\n+  *\n+  * As side effect, on success will change status of the object member.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return member with new status set\n+  *\n+  * @throws InternalErrorException\n+  * @throws MemberNotValidYetException\n+  */\n+\n+\n+ Member disableMember(PerunSession sess, Member member) throws MemberNotValidYetException;\n+\n+ /**\n+  * Retain only members with specified status.\n+  *\n+  * @param sess\n+  * @param members\n+  * @param status\n+  * @return\n+  *\n+  * @throws MemberNotValidYetException\n+  */\n+\n+\n+ List<Member> retainMembersWithStatus(PerunSession sess, List<Member> members, Status status);\n+\n+ /**\n+  * Return true if member have specified status.\n+  *\n+  * @param sess\n+  * @param member\n+  * @param status\n+  * @return true if member have the specified status\n+  *         false otherwise\n+  */\n+\n+\n+ boolean haveStatus(PerunSession sess, Member member, Status status);\n+\n+ /**\n+  * Extend member membership using membershipExpirationRules attribute defined at VO.\n+  *\n+  * @param sess\n+  * @param member\n+  * @throws InternalErrorException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ void extendMembership(PerunSession sess, Member member) throws ExtendMembershipException;\n+\n+ /**\n+  * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean canExtendMembership(PerunSession sess, Member member);\n+\n+ /**\n+  * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception with reason\n+  * @throws InternalErrorException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws ExtendMembershipException;\n+\n+ /**\n+  * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @param loa\n+  * @return true if user can be apply for membership to the VO\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean canBeMember(PerunSession sess, Vo vo, User user, String loa);\n+\n+ /**\n+  * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @param loa\n+  * @return true if user can be apply for membership to the VO, exception with reason otherwise\n+  * @throws InternalErrorException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws ExtendMembershipException;\n+\n+ /**\n+  * Get member by extSourceName, extSourceLogin and Vo\n+  *\n+  * @param sess\n+  * @param extSourceName name of extSource\n+  * @param extLogin login of user in extSource\n+  * @param vo Vo where we are looking for member\n+  * @return member\n+  * @throws ExtSourceNotExistsException\n+  * @throws UserExtSourceNotExistsException\n+  * @throws MemberNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Member getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException;\n+\n+ /**\n+  * Returns the date to which will be extended member's expiration time.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return date\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Date getNewExtendMembership(PerunSession sess, Member member);\n+\n+ /**\n    * Returns the date to which will be extended potential member of the VO.\n    *\n    * @param sess\n@@ -1370,436 +1578,490 @@ public interface MembersManagerBl {\n    * @throws InternalErrorException\n    * @throws ExtendMembershipException\n    */\n-  Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws ExtendMembershipException;\n-\n-\t/**\n-\t * For richMember filter all his user and member attributes and remove all which principal has no access to.\n-\t *\n-\t * @param sess\n-\t * @param richMember\n-\t * @return richMember with only allowed attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tRichMember filterOnlyAllowedAttributes(PerunSession sess, RichMember richMember);\n-\n-\t/**\n-\t * For list of richMembers filter all their user and member attributes and remove all which principal has no access to.\n-\t *\n-\t * @param sess\n-\t * @param richMembers\n-\t * @return list of richMembers with only allowed attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers);\n-\n-\t/**\n-\t * For list of richMembers filter all their user and member attributes and remove all which principal has no access to.\n-\t *\n-\t * Context means that voId for all members is same (rules can be same for all members in list)\n-\t *\n-\t * if useContext is true: every attribute is unique in context of friendlyName, which means more attributes for more members have same\n-\t * rules if friendly name is same for all of them (better performance, worse authorization check)\n-\t * if useContext is false: every attribute is unique in context of member, which means every attribute for more members need to be check separately,\n-\t * because for example members can be from different vos (better authorization check, worse performance)\n-\t *\n-\t * @param sess\n-\t * @param richMembers list of richMembers for which attributes need to be filtered\n-\t * @param group\n-\t * @param useContext true or false means using context or not using context (more above in javadoc)\n-\t *\n-\t * @return list of richMembers with only allowed attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers, Group group, boolean useContext);\n-\n-\t/**\n-\t * Send mail to user's preferred email address with link for non-authz password reset.\n-\t * Correct authz information is stored in link's URL.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get user to send link mail to\n-\t * @param namespace Namespace to reset password in (member must have login in)\n-\t * @param url base URL of Perun instance\n-\t * @param mailAddress mail address where email will be sent\n-\t * @param language language of the message\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAddress, String language);\n-\n-\t/**\n-\t * Send mail to user's preferred email address with link for non-authz account activation.\n-\t * Correct authz information is stored in link's URL.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get user to send link mail to\n-\t * @param namespace Namespace to activate account in (member must have login in)\n-\t * @param url base URL of Perun instance\n-\t * @param mailAddress mail address where email will be sent\n-\t * @param language language of the message\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAddress, String language);\n-\n-\t/**\n-\t * Creates a new sponsored member.\n-\t *\n-\t * @param session perun session\n-\t * @param vo virtual organization\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param name a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n-\t * @param password password, if the password is empty, and the `sendActivationLink` is set to true, this method will\n-\t *                 generate a random password for the created user\n-\t * @param email (optional) preferred email that will be set to the created user. If no email\n-\t *              is provided, \"no-reply@muni.cz\" is used.\n-\t * @param sponsor sponsoring user\n-\t * @param sendActivationLink if true link for manual activation of account will be send to the email\n-\t *                           be careful when using with empty (no-reply) email\n-\t * @param validation Type of validation, when using Validation.ASYNC do not call this method in a cycle!\n-\t * @param url base URL of Perun Instance\n-\t * @return created member\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyMemberException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws ExtendMembershipException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws UserNotInRoleException if the member is not in required role\n-\t * @throws AlreadySponsorException\n-\t */\n-\tMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, boolean sendActivationLink, String url, Validation validation) throws AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates a new sponsored member.\n-\t *\n-\t * @param session perun session\n-\t * @param vo virtual organization\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param name a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n-\t * @param password password, if the password is empty, and the `sendActivationLink` is set to true, this method will\n-\t *                 generate a random password for the created user\n-\t * @param email (optional) preferred email that will be set to the created user. If no email\n-\t *              is provided, \"no-reply@muni.cz\" is used.\n-\t * @param sponsor sponsoring user\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t * @param sendActivationLink if true link for manual activation of account will be send to the email\n-\t *                           be careful when using with empty (no-reply) email\n-\t * @param url base URL of Perun Instance\n-\t * @param validation Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n-\t * @return created member\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyMemberException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws ExtendMembershipException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws UserNotInRoleException if the member is not in required role\n-\t * @throws AlreadySponsorException\n-\t */\n-\tMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url, Validation validation) throws AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates a sponsored membership for the given user.\n-\t *\n-\t * @param session perun session\n-\t * @param vo virtual organization\n-\t * @param userToBeSponsored user, that will be sponsored by sponsor\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param password password\n-\t * @param sponsor sponsoring user\n-\t * @param validation Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n-\t * @return sponsored member\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws UserNotInRoleException\n-\t * @throws PasswordStrengthException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws InvalidLoginException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws AlreadySponsorException\n-\t */\n-\tMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, LocalDate validityTo, Validation validation) throws AlreadyMemberException, ExtendMembershipException, UserNotInRoleException, PasswordStrengthException, WrongAttributeValueException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, InvalidLoginException, ExtSourceNotExistsException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates a sponsored membership for the given user.\n-\t *\n-\t * @param session perun session\n-\t * @param vo virtual organization\n-\t * @param userToBeSponsored user, that will be sponsored by sponsor\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param password password\n-\t * @param sponsor sponsoring user\n-\t * @param validation Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n-\t * @return sponsored member\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws UserNotInRoleException\n-\t * @throws PasswordStrengthException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws InvalidLoginException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws AlreadySponsorException\n-\t */\n-\tMember setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, Validation validation) throws AlreadyMemberException, ExtendMembershipException, UserNotInRoleException, PasswordStrengthException, WrongAttributeValueException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, InvalidLoginException, ExtSourceNotExistsException, AlreadySponsorException;\n-\n-\t/**\n-\t * Creates new sponsored members.\n-\t *\n-\t * Since there may be error while creating some of the members and we cannot simply rollback the transaction and\n-\t * start over, exceptions during member creation are not thrown and the returned map has this structure:\n-\t *\n-\t * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n-\t *\n-\t * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n-\t * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n-\t * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo virtual organization to created sponsored members in\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param data csv file values separated by semicolon ';' characters\n-\t * @param header header to the given csv data, it should represent columns for the given data.\n-\t *               Required values are - firstname, lastname, urn:perun:user:attribute-def:def:preferredMail\n-\t *               Optional values are - urn:perun:user:attribute-def:def:note\n-\t *               The order of the items doesn't matter.\n-\t * @param sponsor sponsoring user\n-\t * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n-\t *                           to email which was set for him, be careful when using no-reply emails\n-\t * @param url base URL of Perun Instance\n-\t * @param validation Type of members validation, when ASYNC do not call this method in a cycle!\n-\t * @return map of names to map of status, login, password, user and member\n-\t */\n-\tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n-\t                                                               List<String> data, String header, User sponsor,\n-\t                                                               LocalDate validityTo, boolean sendActivationLink,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url, Validation validation);\n-\n-\t/**\n-\t * Creates new sponsored members.\n-\t *\n-\t * Since there may be error while creating some of the members and we cannot simply rollback the transaction and start over,\n-\t * exceptions during member creation are not thrown and the returned map has this structure:\n-\t *\n-\t * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n-\t *\n-\t * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n-\t * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n-\t * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n-\t *\n-\t * @param session perun session\n-\t * @param vo virtual organization to created sponsored members in\n-\t * @param namespace used for selecting external system in which guest user account will be created\n-\t * @param names names of members to create, single name should have the format {firstName};{lastName} to be\n-\t *              parsed well\n-\t * @param email (optional) preferred email that will be set to the created user. If no email\n-\t *              is provided, \"no-reply@muni.cz\" is used.\n-\t * @param sponsor sponsoring user\n-\t * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n-\t *                           to the email, be careful when using with empty (no-reply) email\n-\t * @param url base URL of Perun Instance\n-\t * @param validation Type of members validation, when ASYNC do not call this method in a cycle!\n-\t * @return map of names to map of status, login, password\n-\t */\n-\tMap<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url, Validation validation);\n-\n-\t/**\n-\t * Links sponsored member and sponsoring user.\n-\t * @param session perun session\n-\t * @param sponsoredMember member which is sponsored\n-\t * @param sponsor sponsoring user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotSponsoredException\n-\t * @throws AlreadySponsorException\n-\t * @throws UserNotInRoleException\n-\t */\n-\tMember sponsorMember(PerunSession session, Member sponsoredMember, User sponsor) throws MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n-\n-\t/**\n-\t * Links sponsored member and sponsoring user.\n-\t *\n-\t * @param session perun session\n-\t * @param sponsoredMember member which is sponsored\n-\t * @param sponsor sponsoring user\n-\t * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n-\t *\n-\t * @return member\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotSponsoredException\n-\t * @throws AlreadySponsorException\n-\t * @throws UserNotInRoleException\n-\t */\n-\tMember sponsorMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n-\n-\t/**\n-\t * For the given member and user returns their sponsorship relation object. If there is no\n-\t * such relation, the SponsorshipDoesNotExistException is thrown.\n-\t *\n-\t * @param sess session\n-\t * @param sponsoredMember sponsored member\n-\t * @param sponsor sponsor\n-\t * @return Sponsorship object\n-\t * @throws SponsorshipDoesNotExistException if there is no sponsorship relation between the given member and user\n-\t */\n-\tSponsorship getSponsorship(PerunSession sess, Member sponsoredMember, User sponsor) throws SponsorshipDoesNotExistException;\n-\t/**\n-\t * Gets list of members that are sponsored by the user in the vo.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo virtual organization\n-\t * @param user user sponsoring members\n-\t * @return list of members sponsored by the user in VO\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t */\n-\tList<Member> getSponsoredMembers(PerunSession sess, Vo vo, User user);\n-\n-\t/**\n-\t * Gets list of members that are sponsored by the user in all vos.\n-\t *\n-\t * @param sess perun session\n-\t * @param user user sponsoring members\n-\t * @return list of members sponsored by the user in VO\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t */\n-\tList<Member> getSponsoredMembers(PerunSession sess, User user);\n-\n-\t/**\n-\t * Gets list of sponsored members of a VO.\n-\t * @param sess session\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @return list of members from given vo who are sponsored\n-\t */\n-\tList<Member> getSponsoredMembers(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Removes a sponsor.\n-\t * @param sess perun session\n-\t * @param sponsoredMember member which is sponsored\n-\t * @param sponsor sponsoring user\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t */\n-\tvoid removeSponsor(PerunSession sess, Member sponsoredMember, User sponsor);\n-\n-\t/**\n-\t * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n-\t *\n-\t * @param sess perun session\n-\t * @param sponsoredMember member which is sponsored\n-\t * @param sponsorUser sponsoring user or null for the caller\n-\t * @return new expiration date\n-\t * @throws InternalErrorException\n-\t */\n-\tString extendExpirationForSponsoredMember(PerunSession sess, Member sponsoredMember, User sponsorUser);\n-\n-\t/**\n-\t * Returns unified result of MemberGroupStatus for specified member and resource.\n-\t *\n-\t * If member is VALID in at least one group assigned to the resource, result is VALID.\n-\t * If member is not VALID in any of groups assigned to the resource, result is EXPIRED.\n-\t * If member is not assigned to the resource at all, result is NULL.\n-\t *\n-\t * MemberGroupStatus is never related to the members status in a VO as a whole!\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get unified MemberGroupStatus\n-\t * @param resource Resource to get unified MemberGroupStatus\n-\t * @return MemberGroupStatus for member unified through all his groups assigned to the resource.\n-\t */\n-\tMemberGroupStatus getUnifiedMemberGroupStatus(PerunSession sess, Member member, Resource resource);\n-\n-\t/**\n-\t * Returns unified result of MemberGroupStatus for specified user and facility.\n-\t *\n-\t * If user is VALID in at least one group assigned to at least one resource on facility, result is VALID.\n-\t * If user is not VALID in any of groups assigned to any of resources, result is EXPIRED.\n-\t * If user is not assigned to the resource at all, result is NULL.\n-\t *\n-\t * MemberGroupStatus is never related to the members status in any VO!\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to get unified MemberGroupStatus\n-\t * @param facility Facility to get unified MemberGroupStatus\n-\t * @return MemberGroupStatus for user unified throught all his groups assigned to any of resources of facility.\n-\t */\n-\tMemberGroupStatus getUnifiedMemberGroupStatus(PerunSession sess, User user, Facility facility);\n-\n-\t/**\n-\t * Return list of members VO by specific string.\n-\t * All searches are case insensitive.\n-\t * Looking for searchString in member mail, user preferredMail, logins, name and IDs (user and member).\n-\t * If parameter onlySponsored is true, it will return only sponsored members by searchString.\n-\t * If vo is null, looking for any members in whole Perun. If vo is not null, looking only in specific VO.<\n-\t *\n-\t * @param sess\n-\t * @param vo for which searching will be filtered, if null there is no filter for vo\n-\t * @param searchString it will be looking for this search string in the specific parameters in DB\n-\t * @param onlySponsored it will return only sponsored members in vo\n-\t * @return all members from specific VO by specific string\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> findMembers(PerunSession sess, Vo vo, String searchString, boolean onlySponsored);\n-\n-\t/**\n-\t * Update the sponsorship of given member for given sponsor.\n-\t *\n-\t * @param sess session\n-\t * @param sponsoredMember sponsored member\n-\t * @param sponsor sponsor\n-\t * @param newValidity new validity, can be set to null never expire\n-\t * @throws SponsorshipDoesNotExistException if the given user is not sponsor of the given member\n-\t */\n-\tvoid updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor, LocalDate newValidity) throws SponsorshipDoesNotExistException;\n-\n-\t/**\n-\t * Returns sponsorship, which have validityTo in range [from, to).\n-\t * (from is inclusive, to is exclusive).\n-\t *\n-\t * @param sess session\n-\t * @param from lower validityTo bound (inclusive), use LocalDate.MIN if you don't want to specify the lower bound\n-\t * @param to upper validityTo bound (exclusive), use LocalDate.MAX, if you don't want to specify the upper bound\n-\t * @return list of sponsorships which have validityTo set in the given range\n-\t */\n-\tList<Sponsorship> getSponsorshipsExpiringInRange(PerunSession sess, LocalDate from, LocalDate to);\n-\n-\t/**\n-\t * Moves membership in VO from source user to target user - moves the source user's\n-\t * memberships in non-synchronized groups, member related attributes, bans and\n-\t * sponsorships in the VO. Removes the source user's member object.\n-\t *\n-\t * @param sess session\n-\t * @param vo the VO in which the membership should be moved\n-\t * @param sourceUser the user to move membership from\n-\t * @param targetUser the user to move membership to\n-\t * @throws MemberNotExistsException when sourceUser is not member of the VO\n-\t * @throws AlreadyMemberException when targetUser is already member of the VO\n-\t * @throws ExtendMembershipException when the targetUser doesn't have required LOA for the VO\n-\t */\n-\tvoid moveMembership(PerunSession sess, Vo vo, User sourceUser, User targetUser) throws MemberNotExistsException, AlreadyMemberException, ExtendMembershipException;\n-\n-\t/**\n-\t * Return all loaded namespaces rules.\n-\t *\n-\t * @return all namespaces rules\n-\t */\n-\tList<NamespaceRules> getAllNamespacesRules();\n-\n-\t/**\n-\t * Get NamespaceRules for the namespace from the SponsoredAccountsConfigContainer\n-\t *\n-\t * @param namespace for which will be the rules fetched\n-\t * @return NamespaceRules for the namespace\n-\t * @throws NamespaceRulesNotExistsException if there are no rules for the namespace\n-\t */\n-\tNamespaceRules getNamespaceRules(String namespace) throws NamespaceRulesNotExistsException;\n-}\n+\n+\n+ Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws ExtendMembershipException;\n+\n+ /**\n+  * For richMember filter all his user and member attributes and remove all which principal has no access to.\n+  *\n+  * @param sess\n+  * @param richMember\n+  * @return richMember with only allowed attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ RichMember filterOnlyAllowedAttributes(PerunSession sess, RichMember richMember);\n+\n+ /**\n+  * For list of richMembers filter all their user and member attributes and remove all which principal has no access to.\n+  *\n+  * @param sess\n+  * @param richMembers\n+  * @return list of richMembers with only allowed attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers);\n+\n+ /**\n+  * For list of richMembers filter all their user and member attributes and remove all which principal has no access to.\n+  *\n+  * Context means that voId for all members is same (rules can be same for all members in list)\n+  *\n+  * if useContext is true: every attribute is unique in context of friendlyName, which means more attributes for more members have same\n+  * rules if friendly name is same for all of them (better performance, worse authorization check)\n+  * if useContext is false: every attribute is unique in context of member, which means every attribute for more members need to be check separately,\n+  * because for example members can be from different vos (better authorization check, worse performance)\n+  *\n+  * @param sess\n+  * @param richMembers list of richMembers for which attributes need to be filtered\n+  * @param group\n+  * @param useContext true or false means using context or not using context (more above in javadoc)\n+  *\n+  * @return list of richMembers with only allowed attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers, Group group, boolean useContext);\n+\n+ /**\n+  * Send mail to user's preferred email address with link for non-authz password reset.\n+  * Correct authz information is stored in link's URL.\n+  *\n+  * @param sess PerunSession\n+  * @param member Member to get user to send link mail to\n+  * @param namespace Namespace to reset password in (member must have login in)\n+  * @param url base URL of Perun instance\n+  * @param mailAddress mail address where email will be sent\n+  * @param language language of the message\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAddress, String language);\n+\n+ /**\n+  * Send mail to user's preferred email address with link for non-authz account activation.\n+  * Correct authz information is stored in link's URL.\n+  *\n+  * @param sess PerunSession\n+  * @param member Member to get user to send link mail to\n+  * @param namespace Namespace to activate account in (member must have login in)\n+  * @param url base URL of Perun instance\n+  * @param mailAddress mail address where email will be sent\n+  * @param language language of the message\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void sendAccountActivationLinkEmail(PerunSession sess, Member member, String namespace, String url, String mailAddress, String language);\n+\n+ /**\n+  * Creates a new sponsored member.\n+  *\n+  * @param session perun session\n+  * @param vo virtual organization\n+  * @param namespace used for selecting external system in which guest user account will be created\n+  * @param name a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n+  * @param password password, if the password is empty, and the `sendActivationLink` is set to true, this method will\n+  *                 generate a random password for the created user\n+  * @param email (optional) preferred email that will be set to the created user. If no email\n+  *              is provided, \"no-reply@muni.cz\" is used.\n+  * @param sponsor sponsoring user\n+  * @param sendActivationLink if true link for manual activation of account will be send to the email\n+  *                           be careful when using with empty (no-reply) email\n+  * @param validation Type of validation, when using Validation.ASYNC do not call this method in a cycle!\n+  * @param url base URL of Perun Instance\n+  * @return created member\n+  * @throws InternalErrorException\n+  * @throws AlreadyMemberException\n+  * @throws LoginNotExistsException\n+  * @throws PasswordCreationFailedException\n+  * @throws ExtendMembershipException\n+  * @throws WrongAttributeValueException\n+  * @throws ExtSourceNotExistsException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws UserNotInRoleException if the member is not in required role\n+  * @throws AlreadySponsorException\n+  */\n+\n+\n+ Member createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, boolean sendActivationLink, String url, Validation validation) throws AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n+\n+ /**\n+  * Creates a new sponsored member.\n+  *\n+  * @param session perun session\n+  * @param vo virtual organization\n+  * @param namespace used for selecting external system in which guest user account will be created\n+  * @param name a map containing the full name or its parts (mandatory: firstName, lastName; optionally: titleBefore, titleAfter)\n+  * @param password password, if the password is empty, and the `sendActivationLink` is set to true, this method will\n+  *                 generate a random password for the created user\n+  * @param email (optional) preferred email that will be set to the created user. If no email\n+  *              is provided, \"no-reply@muni.cz\" is used.\n+  * @param sponsor sponsoring user\n+  * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n+  * @param sendActivationLink if true link for manual activation of account will be send to the email\n+  *                           be careful when using with empty (no-reply) email\n+  * @param url base URL of Perun Instance\n+  * @param validation Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n+  * @return created member\n+  * @throws InternalErrorException\n+  * @throws AlreadyMemberException\n+  * @throws LoginNotExistsException\n+  * @throws PasswordCreationFailedException\n+  * @throws ExtendMembershipException\n+  * @throws WrongAttributeValueException\n+  * @throws ExtSourceNotExistsException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws UserNotInRoleException if the member is not in required role\n+  * @throws AlreadySponsorException\n+  */\n+\n+\n+ Member createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url, Validation validation) throws AlreadyMemberException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException, PasswordStrengthException, InvalidLoginException, AlreadySponsorException;\n+\n+ /**\n+  * Creates a sponsored membership for the given user.\n+  *\n+  * @param session perun session\n+  * @param vo virtual organization\n+  * @param userToBeSponsored user, that will be sponsored by sponsor\n+  * @param namespace used for selecting external system in which guest user account will be created\n+  * @param password password\n+  * @param sponsor sponsoring user\n+  * @param validation Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n+  * @return sponsored member\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  * @throws UserNotInRoleException\n+  * @throws PasswordStrengthException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws LoginNotExistsException\n+  * @throws PasswordCreationFailedException\n+  * @throws InvalidLoginException\n+  * @throws ExtSourceNotExistsException\n+  * @throws AlreadySponsorException\n+  */\n+\n+\n+ Member setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, LocalDate validityTo, Validation validation) throws AlreadyMemberException, ExtendMembershipException, UserNotInRoleException, PasswordStrengthException, WrongAttributeValueException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, InvalidLoginException, ExtSourceNotExistsException, AlreadySponsorException;\n+\n+ /**\n+  * Creates a sponsored membership for the given user.\n+  *\n+  * @param session perun session\n+  * @param vo virtual organization\n+  * @param userToBeSponsored user, that will be sponsored by sponsor\n+  * @param namespace used for selecting external system in which guest user account will be created\n+  * @param password password\n+  * @param sponsor sponsoring user\n+  * @param validation Type of members validation, when using Validation.ASYNC do not call this method in a cycle!\n+  * @return sponsored member\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  * @throws UserNotInRoleException\n+  * @throws PasswordStrengthException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws LoginNotExistsException\n+  * @throws PasswordCreationFailedException\n+  * @throws InvalidLoginException\n+  * @throws ExtSourceNotExistsException\n+  * @throws AlreadySponsorException\n+  */\n+\n+\n+ Member setSponsoredMember(PerunSession session, Vo vo, User userToBeSponsored, String namespace, String password, User sponsor, Validation validation) throws AlreadyMemberException, ExtendMembershipException, UserNotInRoleException, PasswordStrengthException, WrongAttributeValueException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, InvalidLoginException, ExtSourceNotExistsException, AlreadySponsorException;\n+\n+ /**\n+  * Creates new sponsored members.\n+  *\n+  * Since there may be error while creating some of the members and we cannot simply rollback the transaction and\n+  * start over, exceptions during member creation are not thrown and the returned map has this structure:\n+  *\n+  * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n+  *\n+  * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n+  * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n+  * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n+  *\n+  * @param sess perun session\n+  * @param vo virtual organization to created sponsored members in\n+  * @param namespace used for selecting external system in which guest user account will be created\n+  * @param data csv file values separated by semicolon ';' characters\n+  * @param header header to the given csv data, it should represent columns for the given data.\n+  *               Required values are - firstname, lastname, urn:perun:user:attribute-def:def:preferredMail\n+  *               Optional values are - urn:perun:user:attribute-def:def:note\n+  *               The order of the items doesn't matter.\n+  * @param sponsor sponsoring user\n+  * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n+  *                           to email which was set for him, be careful when using no-reply emails\n+  * @param url base URL of Perun Instance\n+  * @param validation Type of members validation, when ASYNC do not call this method in a cycle!\n+  * @return map of names to map of status, login, password, user and member\n+  */\n+\n+\n+ Map<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace, List<String> data, String header, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url, Validation validation);\n+\n+ /**\n+  * Creates new sponsored members.\n+  *\n+  * Since there may be error while creating some of the members and we cannot simply rollback the transaction and start over,\n+  * exceptions during member creation are not thrown and the returned map has this structure:\n+  *\n+  * name -> {\"status\" -> \"OK\" or \"Error...\", \"login\" -> login, \"password\" -> password}\n+  *\n+  * Keys are names given to this method and values are maps containing keys \"status\", \"login\" and \"password\".\n+  * \"status\" has as its value either \"OK\" or message of exception which was thrown during creation of the member.\n+  * \"login\" contains login (e.g. u\u010do) if status is OK, \"password\" contains password if status is OK.\n+  *\n+  * @param session perun session\n+  * @param vo virtual organization to created sponsored members in\n+  * @param namespace used for selecting external system in which guest user account will be created\n+  * @param names names of members to create, single name should have the format {firstName};{lastName} to be\n+  *              parsed well\n+  * @param email (optional) preferred email that will be set to the created user. If no email\n+  *              is provided, \"no-reply@muni.cz\" is used.\n+  * @param sponsor sponsoring user\n+  * @param sendActivationLink if true link for manual activation of every created sponsored member account will be send\n+  *                           to the email, be careful when using with empty (no-reply) email\n+  * @param url base URL of Perun Instance\n+  * @param validation Type of members validation, when ASYNC do not call this method in a cycle!\n+  * @return map of names to map of status, login, password\n+  */\n+\n+\n+ Map<String, Map<String, String>> createSponsoredMembers(PerunSession session, Vo vo, String namespace, List<String> names, String email, User sponsor, LocalDate validityTo, boolean sendActivationLink, String url, Validation validation);\n+\n+ /**\n+  * Links sponsored member and sponsoring user.\n+  * @param session perun session\n+  * @param sponsoredMember member which is sponsored\n+  * @param sponsor sponsoring user\n+  * @return member\n+  * @throws InternalErrorException\n+  * @throws MemberNotSponsoredException\n+  * @throws AlreadySponsorException\n+  * @throws UserNotInRoleException\n+  */\n+\n+\n+ Member sponsorMember(PerunSession session, Member sponsoredMember, User sponsor) throws MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n+\n+ /**\n+  * Links sponsored member and sponsoring user.\n+  *\n+  * @param session perun session\n+  * @param sponsoredMember member which is sponsored\n+  * @param sponsor sponsoring user\n+  * @param validityTo last day when the sponsorship is active (null means the sponsorship will last forever)\n+  *\n+  * @return member\n+  *\n+  * @throws InternalErrorException\n+  * @throws MemberNotSponsoredException\n+  * @throws AlreadySponsorException\n+  * @throws UserNotInRoleException\n+  */\n+\n+\n+ Member sponsorMember(PerunSession session, Member sponsoredMember, User sponsor, LocalDate validityTo) throws MemberNotSponsoredException, AlreadySponsorException, UserNotInRoleException;\n+\n+ /**\n+  * For the given member and user returns their sponsorship relation object. If there is no\n+  * such relation, the SponsorshipDoesNotExistException is thrown.\n+  *\n+  * @param sess session\n+  * @param sponsoredMember sponsored member\n+  * @param sponsor sponsor\n+  * @return Sponsorship object\n+  * @throws SponsorshipDoesNotExistException if there is no sponsorship relation between the given member and user\n+  */\n+\n+\n+ Sponsorship getSponsorship(PerunSession sess, Member sponsoredMember, User sponsor) throws SponsorshipDoesNotExistException;\n+ /**\n+  * Gets list of members that are sponsored by the user in the vo.\n+  *\n+  * @param sess perun session\n+  * @param vo virtual organization\n+  * @param user user sponsoring members\n+  * @return list of members sponsored by the user in VO\n+  * @throws InternalErrorException if given parameters are invalid\n+  */\n+\n+\n+ List<Member> getSponsoredMembers(PerunSession sess, Vo vo, User user);\n+\n+ /**\n+  * Gets list of members that are sponsored by the user in all vos.\n+  *\n+  * @param sess perun session\n+  * @param user user sponsoring members\n+  * @return list of members sponsored by the user in VO\n+  * @throws InternalErrorException if given parameters are invalid\n+  */\n+\n+\n+ List<Member> getSponsoredMembers(PerunSession sess, User user);\n+\n+ /**\n+  * Gets list of sponsored members of a VO.\n+  * @param sess session\n+  * @param vo virtual organization from which are the sponsored members chosen\n+  * @throws InternalErrorException if given parameters are invalid\n+  * @return list of members from given vo who are sponsored\n+  */\n+\n+\n+ List<Member> getSponsoredMembers(PerunSession sess, Vo vo);\n+\n+ /**\n+  * Removes a sponsor.\n+  * @param sess perun session\n+  * @param sponsoredMember member which is sponsored\n+  * @param sponsor sponsoring user\n+  * @throws InternalErrorException if given parameters are invalid\n+  */\n+\n+\n+ void removeSponsor(PerunSession sess, Member sponsoredMember, User sponsor);\n+\n+ /**\n+  * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n+  *\n+  * @param sess perun session\n+  * @param sponsoredMember member which is sponsored\n+  * @param sponsorUser sponsoring user or null for the caller\n+  * @return new expiration date\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ String extendExpirationForSponsoredMember(PerunSession sess, Member sponsoredMember, User sponsorUser);\n+\n+ /**\n+  * Returns unified result of MemberGroupStatus for specified member and resource.\n+  *\n+  * If member is VALID in at least one group assigned to the resource, result is VALID.\n+  * If member is not VALID in any of groups assigned to the resource, result is EXPIRED.\n+  * If member is not assigned to the resource at all, result is NULL.\n+  *\n+  * MemberGroupStatus is never related to the members status in a VO as a whole!\n+  *\n+  * @param sess PerunSession\n+  * @param member Member to get unified MemberGroupStatus\n+  * @param resource Resource to get unified MemberGroupStatus\n+  * @return MemberGroupStatus for member unified through all his groups assigned to the resource.\n+  */\n+\n+\n+ MemberGroupStatus getUnifiedMemberGroupStatus(PerunSession sess, Member member, Resource resource);\n+\n+ /**\n+  * Returns unified result of MemberGroupStatus for specified user and facility.\n+  *\n+  * If user is VALID in at least one group assigned to at least one resource on facility, result is VALID.\n+  * If user is not VALID in any of groups assigned to any of resources, result is EXPIRED.\n+  * If user is not assigned to the resource at all, result is NULL.\n+  *\n+  * MemberGroupStatus is never related to the members status in any VO!\n+  *\n+  * @param sess PerunSession\n+  * @param user User to get unified MemberGroupStatus\n+  * @param facility Facility to get unified MemberGroupStatus\n+  * @return MemberGroupStatus for user unified throught all his groups assigned to any of resources of facility.\n+  */\n+\n+\n+ MemberGroupStatus getUnifiedMemberGroupStatus(PerunSession sess, User user, Facility facility);\n+\n+ /**\n+  * Return list of members VO by specific string.\n+  * All searches are case insensitive.\n+  * Looking for searchString in member mail, user preferredMail, logins, name and IDs (user and member).\n+  * If parameter onlySponsored is true, it will return only sponsored members by searchString.\n+  * If vo is null, looking for any members in whole Perun. If vo is not null, looking only in specific VO.<\n+  *\n+  * @param sess\n+  * @param vo for which searching will be filtered, if null there is no filter for vo\n+  * @param searchString it will be looking for this search string in the specific parameters in DB\n+  * @param onlySponsored it will return only sponsored members in vo\n+  * @return all members from specific VO by specific string\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> findMembers(PerunSession sess, Vo vo, String searchString, boolean onlySponsored);\n+\n+ /**\n+  * Update the sponsorship of given member for given sponsor.\n+  *\n+  * @param sess session\n+  * @param sponsoredMember sponsored member\n+  * @param sponsor sponsor\n+  * @param newValidity new validity, can be set to null never expire\n+  * @throws SponsorshipDoesNotExistException if the given user is not sponsor of the given member\n+  */\n+\n+\n+ void updateSponsorshipValidity(PerunSession sess, Member sponsoredMember, User sponsor, LocalDate newValidity) throws SponsorshipDoesNotExistException;\n+\n+ /**\n+  * Returns sponsorship, which have validityTo in range [from, to).\n+  * (from is inclusive, to is exclusive).\n+  *\n+  * @param sess session\n+  * @param from lower validityTo bound (inclusive), use LocalDate.MIN if you don't want to specify the lower bound\n+  * @param to upper validityTo bound (exclusive), use LocalDate.MAX, if you don't want to specify the upper bound\n+  * @return list of sponsorships which have validityTo set in the given range\n+  */\n+\n+\n+ List<Sponsorship> getSponsorshipsExpiringInRange(PerunSession sess, LocalDate from, LocalDate to);\n+\n+ /**\n+  * Moves membership in VO from source user to target user - moves the source user's\n+  * memberships in non-synchronized groups, member related attributes, bans and\n+  * sponsorships in the VO. Removes the source user's member object.\n+  *\n+  * @param sess session\n+  * @param vo the VO in which the membership should be moved\n+  * @param sourceUser the user to move membership from\n+  * @param targetUser the user to move membership to\n+  * @throws MemberNotExistsException when sourceUser is not member of the VO\n+  * @throws AlreadyMemberException when targetUser is already member of the VO\n+  * @throws ExtendMembershipException when the targetUser doesn't have required LOA for the VO\n+  */\n+\n+\n+ void moveMembership(PerunSession sess, Vo vo, User sourceUser, User targetUser) throws MemberNotExistsException, AlreadyMemberException, ExtendMembershipException;\n+\n+ /**\n+  * Return all loaded namespaces rules.\n+  *\n+  * @return all namespaces rules\n+  */\n+\n+\n+ List<NamespaceRules> getAllNamespacesRules();\n+\n+ /**\n+  * Get NamespaceRules for the namespace from the SponsoredAccountsConfigContainer\n+  *\n+  * @param namespace for which will be the rules fetched\n+  * @return NamespaceRules for the namespace\n+  * @throws NamespaceRulesNotExistsException if there are no rules for the namespace\n+  */\n+\n+\n+ NamespaceRules getNamespaceRules(String namespace) throws NamespaceRulesNotExistsException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 1999
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/35/MembersManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/35/MembersManagerBl.java\nindex 9a38bf30809..2fca0e30419 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/35/MembersManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/35/MembersManagerBl.java\n@@ -1580,8 +1580,7 @@ public interface MembersManagerBl {\n \t */\n \tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n \t                                                               List<String> data, String header, User sponsor,\n-\t                                                               LocalDate validityTo, boolean sendActivationLink,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url, Validation validation);\n+                                                                LocalDate validityTo, boolean sendActivationLink, String url, Validation validation);\n \n \t/**\n \t * Creates new sponsored members.\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/35/MembersManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/35/MembersManagerBl.java\nindex 9a38bf30809..ef7f499c988 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/35/MembersManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/35/MembersManagerBl.java\n@@ -1580,8 +1580,7 @@ public interface MembersManagerBl {\n \t */\n \tMap<String, Map<String, String>> createSponsoredMembersFromCSV(PerunSession sess, Vo vo, String namespace,\n \t                                                               List<String> data, String header, User sponsor,\n-\t                                                               LocalDate validityTo, boolean sendActivationLink,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String url, Validation validation);\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDate validityTo, boolean sendActivationLink,String url, Validation validation);\n \n \t/**\n \t * Creates new sponsored members.\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}