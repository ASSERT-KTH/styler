{
    "project_name": "neo4j-neo4j",
    "error_id": "2902",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "53",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2902/RecoveryHelpers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2902/RecoveryHelpers.java\nindex ff894051c6b..0bebe3eb658 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2902/RecoveryHelpers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2902/RecoveryHelpers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.recovery;\n \n import java.io.IOException;\n@@ -34,34 +35,33 @@ import org.neo4j.storageengine.api.StorageEngineFactory;\n \n public final class RecoveryHelpers\n {\n-     private RecoveryHelpers()\n-     { // non-constructable\n-     }\n+    private RecoveryHelpers()\n+    { // non-constructable\n+    }\n \n-     public static void removeLastCheckpointRecordFromLastLogFile( DatabaseLayout dbLayout, FileSystemAbstraction fs ) throws IOException\n-     {\n-          LogFiles logFiles = buildLogFiles( dbLayout, fs );\n-          var checkpointFile = logFiles.getCheckpointFile();\n-          Optional<CheckpointInfo> latestCheckpoint = checkpointFile.findLatestCheckpoint();\n-          latestCheckpoint.ifPresent( checkpointInfo ->\n-              {\n-              LogPosition entryPosition = checkpointInfo.getCheckpointEntryPosition();\n-              try ( StoreChannel storeChannel = fs.write( checkpointFile.getCurrentFile() ) )\n-              {\n-                  storeChannel.truncate( entryPosition.getByteOffset() );\n-              }\n-              catch ( IOException e )\n-              {\n-                  throw new UncheckedIOException( e );\n-              }\n-          } );\n-     }\n+    public static void removeLastCheckpointRecordFromLastLogFile(DatabaseLayout dbLayout, FileSystemAbstraction fs) throws IOException\n+    {\n+        LogFiles logFiles = buildLogFiles(dbLayout, fs);\n+        var checkpointFile = logFiles.getCheckpointFile();\n+        Optional<CheckpointInfo> latestCheckpoint = checkpointFile.findLatestCheckpoint();\n+        latestCheckpoint.ifPresent(checkpointInfo ->\n+        {\n+            LogPosition entryPosition = checkpointInfo.getCheckpointEntryPosition();\n+            try (StoreChannel storeChannel = fs.write(checkpointFile.getCurrentFile()))\n+            {\n+                storeChannel.truncate(entryPosition.getByteOffset());\n+            } catch (IOException e)\n+            {\n+                throw new UncheckedIOException(e);\n+            }\n+        });\n+    }\n \n-     private static LogFiles buildLogFiles( DatabaseLayout dbLayout, FileSystemAbstraction fs ) throws IOException\n-     {\n-          return LogFilesBuilder\n-                  .logFilesBasedOnlyBuilder( dbLayout.getTransactionLogsDirectory(), fs )\n-                  .withCommandReaderFactory( StorageEngineFactory.selectStorageEngine().commandReaderFactory() )\n-                  .build();\n-     }\n+    private static LogFiles buildLogFiles(DatabaseLayout dbLayout, FileSystemAbstraction fs) throws IOException\n+    {\n+        return LogFilesBuilder\n+          .logFilesBasedOnlyBuilder(dbLayout.getTransactionLogsDirectory(), fs)\n+          .withCommandReaderFactory(StorageEngineFactory.selectStorageEngine().commandReaderFactory())\n+          .build();\n+    }\n }\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}