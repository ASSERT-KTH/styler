{
    "project_name": "apache-ignite-3",
    "error_id": "57",
    "information": {
        "errors": [
            {
                "line": "49",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n    private final ParameterizedType type;\n    private final Map<String, Object> values = new LinkedHashMap<>();\n\n    public AnnotationDefinition(Class<?> type) {\n        this.type = type(type);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/57/AnnotationDefinition.java\nindex 4d35fc51530..69fb3d1733d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/57/AnnotationDefinition.java\n@@ -46,6 +46,7 @@ public class AnnotationDefinition {\n         Enum.class);\n \n     private final ParameterizedType type;\n+\n     private final Map<String, Object> values = new LinkedHashMap<>();\n \n     public AnnotationDefinition(Class<?> type) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/57/AnnotationDefinition.java\nindex 4d35fc51530..bace5e7a510 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/57/AnnotationDefinition.java\n@@ -11,6 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.facebook.presto.bytecode;\n \n import java.util.Collections;\n@@ -30,182 +31,177 @@ import static com.facebook.presto.bytecode.ParameterizedType.type;\n import static java.util.Objects.requireNonNull;\n \n public class AnnotationDefinition {\n-    private static final Set<Class<?>> ALLOWED_TYPES = Set.of(\n-        Byte.class,\n-        Character.class,\n-        Double.class,\n-        Float.class,\n-        Integer.class,\n-        Long.class,\n-        Short.class,\n-        Void.class,\n-        String.class,\n-        Class.class,\n-        ParameterizedType.class,\n-        AnnotationDefinition.class,\n-        Enum.class);\n-\n-    private final ParameterizedType type;\n-    private final Map<String, Object> values = new LinkedHashMap<>();\n-\n-    public AnnotationDefinition(Class<?> type) {\n-        this.type = type(type);\n-    }\n-\n-    public AnnotationDefinition(ParameterizedType type) {\n-        this.type = type;\n-    }\n-\n-    public AnnotationDefinition setValue(String name, Byte value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, Boolean value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, Character value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, Short value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, Integer value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, Long value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, Float value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, Double value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, String value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, Class<?> value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, ParameterizedType value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, AnnotationDefinition value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, Enum<?> value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    public AnnotationDefinition setValue(String name, List<?> value) {\n-        return setValueInternal(name, value);\n-    }\n-\n-    private AnnotationDefinition setValueInternal(String name, Object value) {\n-        requireNonNull(name, \"name is null\");\n-        requireNonNull(value, \"value is null\");\n-\n-        isValidType(value);\n-\n-        values.put(name, value);\n-        return this;\n-    }\n-\n-    public ParameterizedType getType() {\n-        return type;\n-    }\n-\n-    public Map<String, Object> getValues() {\n-        return Collections.unmodifiableMap(values);\n-    }\n-\n-    @SuppressWarnings(\"OverlyStrongTypeCast\")\n-    private static void isValidType(Object value) {\n-        if (value instanceof List) {\n-            // todo verify list contains single type\n-            for (Object v : (List<Object>)value) {\n-                checkArgument(ALLOWED_TYPES.contains(v.getClass()), \"List contains invalid type %s\", v.getClass());\n-                if (v instanceof List) {\n-                    isValidType(value);\n-                }\n-            }\n+  private static final Set<Class<?>> ALLOWED_TYPES = Set.of(\n+      Byte.class,\n+      Character.class,\n+      Double.class,\n+      Float.class,\n+      Integer.class,\n+      Long.class,\n+      Short.class,\n+      Void.class,\n+      String.class,\n+      Class.class,\n+      ParameterizedType.class,\n+      AnnotationDefinition.class,\n+      Enum.class);\n+\n+  private final ParameterizedType type;\n+\n+  private final Map<String, Object> values = new LinkedHashMap<>();\n+\n+  public AnnotationDefinition(Class<?> type) {\n+    this.type = type(type);\n+  }\n+\n+  public AnnotationDefinition(ParameterizedType type) {\n+    this.type = type;\n+  }\n+\n+  public AnnotationDefinition setValue(String name, Byte value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, Boolean value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, Character value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, Short value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, Integer value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, Long value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, Float value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, Double value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, String value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, Class<?> value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, ParameterizedType value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, AnnotationDefinition value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, Enum<?> value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  public AnnotationDefinition setValue(String name, List<?> value) {\n+    return setValueInternal(name, value);\n+  }\n+\n+  private AnnotationDefinition setValueInternal(String name, Object value) {\n+    requireNonNull(name, \"name is null\");\n+    requireNonNull(value, \"value is null\");\n+\n+    isValidType(value);\n+\n+    values.put(name, value);\n+    return this;\n+  }\n+\n+  public ParameterizedType getType() {\n+    return type;\n+  }\n+\n+  public Map<String, Object> getValues() {\n+    return Collections.unmodifiableMap(values);\n+  }\n+\n+  @SuppressWarnings(\"OverlyStrongTypeCast\")\n+  private static void isValidType(Object value) {\n+    if (value instanceof List) {\n+      // todo verify list contains single type\n+      for (Object v : (List<Object>) value) {\n+        checkArgument(ALLOWED_TYPES.contains(v.getClass()), \"List contains invalid type %s\", v.getClass());\n+        if (v instanceof List) {\n+          isValidType(value);\n         }\n-        else {\n-            checkArgument(ALLOWED_TYPES.contains(value.getClass()), \"Invalid value type %s\", value.getClass());\n-        }\n-    }\n-\n-    public void visitClassAnnotation(ClassVisitor visitor) {\n-        AnnotationVisitor annotationVisitor = visitor.visitAnnotation(type.getType(), true);\n-        visit(annotationVisitor);\n-        annotationVisitor.visitEnd();\n-    }\n-\n-    public void visitFieldAnnotation(FieldVisitor visitor) {\n-        AnnotationVisitor annotationVisitor = visitor.visitAnnotation(type.getType(), true);\n-        visit(annotationVisitor);\n-        annotationVisitor.visitEnd();\n-    }\n-\n-    public void visitMethodAnnotation(MethodVisitor visitor) {\n-        AnnotationVisitor annotationVisitor = visitor.visitAnnotation(type.getType(), true);\n-        visit(annotationVisitor);\n-        annotationVisitor.visitEnd();\n-    }\n-\n-    public void visitParameterAnnotation(int parameterIndex, MethodVisitor visitor) {\n-        AnnotationVisitor annotationVisitor = visitor.visitParameterAnnotation(parameterIndex, type.getType(), true);\n-        visit(annotationVisitor);\n-        annotationVisitor.visitEnd();\n-    }\n-\n-    private void visit(AnnotationVisitor visitor) {\n-        for (Entry<String, Object> entry : values.entrySet()) {\n-            String name = entry.getKey();\n-            Object value = entry.getValue();\n-            visit(visitor, name, value);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"OverlyStrongTypeCast\")\n-    private static void visit(AnnotationVisitor visitor, String name, Object value) {\n-        if (value instanceof AnnotationDefinition) {\n-            AnnotationDefinition annotation = (AnnotationDefinition)value;\n-            AnnotationVisitor annotationVisitor = visitor.visitAnnotation(name, annotation.type.getType());\n-            annotation.visit(annotationVisitor);\n-        }\n-        else if (value instanceof Enum) {\n-            Enum<?> enumConstant = (Enum<?>)value;\n-            visitor.visitEnum(name, type(enumConstant.getDeclaringClass()).getClassName(), enumConstant.name());\n-        }\n-        else if (value instanceof ParameterizedType) {\n-            ParameterizedType parameterizedType = (ParameterizedType)value;\n-            visitor.visit(name, Type.getType(parameterizedType.getType()));\n-        }\n-        else if (value instanceof Class) {\n-            Class<?> clazz = (Class<?>)value;\n-            visitor.visit(name, Type.getType(clazz));\n-        }\n-        else if (value instanceof List) {\n-            AnnotationVisitor arrayVisitor = visitor.visitArray(name);\n-            for (Object element : (List<?>)value) {\n-                visit(arrayVisitor, null, element);\n-            }\n-            arrayVisitor.visitEnd();\n-        }\n-        else {\n-            visitor.visit(name, value);\n-        }\n-    }\n+      }\n+    } else {\n+      checkArgument(ALLOWED_TYPES.contains(value.getClass()), \"Invalid value type %s\", value.getClass());\n+    }\n+  }\n+\n+  public void visitClassAnnotation(ClassVisitor visitor) {\n+    AnnotationVisitor annotationVisitor = visitor.visitAnnotation(type.getType(), true);\n+    visit(annotationVisitor);\n+    annotationVisitor.visitEnd();\n+  }\n+\n+  public void visitFieldAnnotation(FieldVisitor visitor) {\n+    AnnotationVisitor annotationVisitor = visitor.visitAnnotation(type.getType(), true);\n+    visit(annotationVisitor);\n+    annotationVisitor.visitEnd();\n+  }\n+\n+  public void visitMethodAnnotation(MethodVisitor visitor) {\n+    AnnotationVisitor annotationVisitor = visitor.visitAnnotation(type.getType(), true);\n+    visit(annotationVisitor);\n+    annotationVisitor.visitEnd();\n+  }\n+\n+  public void visitParameterAnnotation(int parameterIndex, MethodVisitor visitor) {\n+    AnnotationVisitor annotationVisitor = visitor.visitParameterAnnotation(parameterIndex, type.getType(), true);\n+    visit(annotationVisitor);\n+    annotationVisitor.visitEnd();\n+  }\n+\n+  private void visit(AnnotationVisitor visitor) {\n+    for (Entry<String, Object> entry : values.entrySet()) {\n+      String name = entry.getKey();\n+      Object value = entry.getValue();\n+      visit(visitor, name, value);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"OverlyStrongTypeCast\")\n+  private static void visit(AnnotationVisitor visitor, String name, Object value) {\n+    if (value instanceof AnnotationDefinition) {\n+      AnnotationDefinition annotation = (AnnotationDefinition) value;\n+      AnnotationVisitor annotationVisitor = visitor.visitAnnotation(name, annotation.type.getType());\n+      annotation.visit(annotationVisitor);\n+    } else if (value instanceof Enum) {\n+      Enum<?> enumConstant = (Enum<?>) value;\n+      visitor.visitEnum(name, type(enumConstant.getDeclaringClass()).getClassName(), enumConstant.name());\n+    } else if (value instanceof ParameterizedType) {\n+      ParameterizedType parameterizedType = (ParameterizedType) value;\n+      visitor.visit(name, Type.getType(parameterizedType.getType()));\n+    } else if (value instanceof Class) {\n+      Class<?> clazz = (Class<?>) value;\n+      visitor.visit(name, Type.getType(clazz));\n+    } else if (value instanceof List) {\n+      AnnotationVisitor arrayVisitor = visitor.visitArray(name);\n+      for (Object element : (List<?>) value) {\n+        visit(arrayVisitor, null, element);\n+      }\n+      arrayVisitor.visitEnd();\n+    } else {\n+      visitor.visit(name, value);\n+    }\n+  }\n }\n",
            "diff_size": 178
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "49",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/57/AnnotationDefinition.java\nindex 4d35fc51530..474549be352 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/57/AnnotationDefinition.java\n@@ -45,7 +45,7 @@ public class AnnotationDefinition {\n         AnnotationDefinition.class,\n         Enum.class);\n \n-    private final ParameterizedType type;\n+private final ParameterizedType type;\n     private final Map<String, Object> values = new LinkedHashMap<>();\n \n     public AnnotationDefinition(Class<?> type) {\n@@ -208,4 +208,4 @@ public class AnnotationDefinition {\n             visitor.visit(name, value);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "38",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "41",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "44",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "49",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "54",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "111",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "132",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "181",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "192",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/57/AnnotationDefinition.java\nindex 4d35fc51530..054263a0478 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/57/AnnotationDefinition.java\n@@ -29,33 +29,28 @@ import static com.facebook.presto.bytecode.BytecodeUtils.checkArgument;\n import static com.facebook.presto.bytecode.ParameterizedType.type;\n import static java.util.Objects.requireNonNull;\n \n+\n public class AnnotationDefinition {\n-    private static final Set<Class<?>> ALLOWED_TYPES = Set.of(\n-        Byte.class,\n-        Character.class,\n-        Double.class,\n-        Float.class,\n-        Integer.class,\n-        Long.class,\n-        Short.class,\n-        Void.class,\n-        String.class,\n-        Class.class,\n-        ParameterizedType.class,\n-        AnnotationDefinition.class,\n-        Enum.class);\n+\n+    private static final Set<Class<?>> ALLOWED_TYPES = Set.of(Byte.class, Character.class, Double.class, Float.class, Integer.class, Long.class, Short.class, Void.class, String.class, Class.class, ParameterizedType.class, AnnotationDefinition.class, Enum.class);\n+\n \n     private final ParameterizedType type;\n+\n+\n     private final Map<String, Object> values = new LinkedHashMap<>();\n \n+\n     public AnnotationDefinition(Class<?> type) {\n         this.type = type(type);\n     }\n \n+\n     public AnnotationDefinition(ParameterizedType type) {\n         this.type = type;\n     }\n \n+\n     public AnnotationDefinition setValue(String name, Byte value) {\n         return setValueInternal(name, value);\n     }\n@@ -112,13 +107,16 @@ public class AnnotationDefinition {\n         return setValueInternal(name, value);\n     }\n \n+\n     private AnnotationDefinition setValueInternal(String name, Object value) {\n         requireNonNull(name, \"name is null\");\n+\n         requireNonNull(value, \"value is null\");\n \n         isValidType(value);\n \n         values.put(name, value);\n+\n         return this;\n     }\n \n@@ -130,12 +128,13 @@ public class AnnotationDefinition {\n         return Collections.unmodifiableMap(values);\n     }\n \n-    @SuppressWarnings(\"OverlyStrongTypeCast\")\n-    private static void isValidType(Object value) {\n+\n+    @SuppressWarnings(\"OverlyStrongTypeCast\") private static void isValidType(Object value) {\n         if (value instanceof List) {\n             // todo verify list contains single type\n             for (Object v : (List<Object>)value) {\n                 checkArgument(ALLOWED_TYPES.contains(v.getClass()), \"List contains invalid type %s\", v.getClass());\n+\n                 if (v instanceof List) {\n                     isValidType(value);\n                 }\n@@ -148,64 +147,82 @@ public class AnnotationDefinition {\n \n     public void visitClassAnnotation(ClassVisitor visitor) {\n         AnnotationVisitor annotationVisitor = visitor.visitAnnotation(type.getType(), true);\n+\n         visit(annotationVisitor);\n+\n         annotationVisitor.visitEnd();\n     }\n \n     public void visitFieldAnnotation(FieldVisitor visitor) {\n         AnnotationVisitor annotationVisitor = visitor.visitAnnotation(type.getType(), true);\n+\n         visit(annotationVisitor);\n+\n         annotationVisitor.visitEnd();\n     }\n \n     public void visitMethodAnnotation(MethodVisitor visitor) {\n         AnnotationVisitor annotationVisitor = visitor.visitAnnotation(type.getType(), true);\n+\n         visit(annotationVisitor);\n+\n         annotationVisitor.visitEnd();\n     }\n \n     public void visitParameterAnnotation(int parameterIndex, MethodVisitor visitor) {\n         AnnotationVisitor annotationVisitor = visitor.visitParameterAnnotation(parameterIndex, type.getType(), true);\n+\n         visit(annotationVisitor);\n+\n         annotationVisitor.visitEnd();\n     }\n \n+\n     private void visit(AnnotationVisitor visitor) {\n         for (Entry<String, Object> entry : values.entrySet()) {\n             String name = entry.getKey();\n+\n             Object value = entry.getValue();\n+\n             visit(visitor, name, value);\n         }\n     }\n \n-    @SuppressWarnings(\"OverlyStrongTypeCast\")\n-    private static void visit(AnnotationVisitor visitor, String name, Object value) {\n+\n+    @SuppressWarnings(\"OverlyStrongTypeCast\") private static void visit(AnnotationVisitor visitor, String name, Object value) {\n         if (value instanceof AnnotationDefinition) {\n             AnnotationDefinition annotation = (AnnotationDefinition)value;\n+\n             AnnotationVisitor annotationVisitor = visitor.visitAnnotation(name, annotation.type.getType());\n+\n             annotation.visit(annotationVisitor);\n         }\n         else if (value instanceof Enum) {\n             Enum<?> enumConstant = (Enum<?>)value;\n+\n             visitor.visitEnum(name, type(enumConstant.getDeclaringClass()).getClassName(), enumConstant.name());\n         }\n         else if (value instanceof ParameterizedType) {\n-            ParameterizedType parameterizedType = (ParameterizedType)value;\n-            visitor.visit(name, Type.getType(parameterizedType.getType()));\n-        }\n+                 ParameterizedType parameterizedType = (ParameterizedType)value;\n+\n+                 visitor.visit(name, Type.getType(parameterizedType.getType()));\n+             }\n         else if (value instanceof Class) {\n-            Class<?> clazz = (Class<?>)value;\n-            visitor.visit(name, Type.getType(clazz));\n-        }\n+                 Class<?> clazz = (Class<?>)value;\n+\n+                 visitor.visit(name, Type.getType(clazz));\n+             }\n         else if (value instanceof List) {\n-            AnnotationVisitor arrayVisitor = visitor.visitArray(name);\n-            for (Object element : (List<?>)value) {\n-                visit(arrayVisitor, null, element);\n-            }\n-            arrayVisitor.visitEnd();\n-        }\n+                 AnnotationVisitor arrayVisitor = visitor.visitArray(name);\n+\n+                 for (Object element : (List<?>)value) {\n+                     visit(arrayVisitor, null, element);\n+                 }\n+\n+                 arrayVisitor.visitEnd();\n+             }\n         else {\n             visitor.visit(name, value);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/57/AnnotationDefinition.java\nindex 4d35fc51530..69fb3d1733d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/57/AnnotationDefinition.java\n@@ -46,6 +46,7 @@ public class AnnotationDefinition {\n         Enum.class);\n \n     private final ParameterizedType type;\n+\n     private final Map<String, Object> values = new LinkedHashMap<>();\n \n     public AnnotationDefinition(Class<?> type) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/57/AnnotationDefinition.java\nindex 4d35fc51530..69fb3d1733d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/57/AnnotationDefinition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/57/AnnotationDefinition.java\n@@ -46,6 +46,7 @@ public class AnnotationDefinition {\n         Enum.class);\n \n     private final ParameterizedType type;\n+\n     private final Map<String, Object> values = new LinkedHashMap<>();\n \n     public AnnotationDefinition(Class<?> type) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}