{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1546",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "86",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "266",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "309",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "377",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "392",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "543",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "550",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "580",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "580",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "589",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "662",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "680",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "680",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "691",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "691",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "697",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "697",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "748",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "748",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "756",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "756",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "772",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "772",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "775",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "781",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "781",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "788",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "788",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "792",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "792",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "794",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "794",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "796",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "800",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "814",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "814",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "816",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "816",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "829",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "829",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "839",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "846",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "846",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "849",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "849",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "858",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "858",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "867",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "873",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "873",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "882",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "882",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "885",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "885",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "887",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "887",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "903",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "903",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "906",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "906",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "916",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "916",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "952",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "952",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "963",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "963",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "966",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "966",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "969",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "971",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "971",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "976",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "976",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "985",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "985",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "987",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "987",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1001",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1001",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1004",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1004",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1006",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1006",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1007",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1016",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1016",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1021",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1546/MuninnPageCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1546/MuninnPageCursor.java\nindex 526f96093f0..adaac26a9d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1546/MuninnPageCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1546/MuninnPageCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache.impl.muninn;\n \n import java.io.File;\n@@ -44,999 +45,988 @@ import static org.neo4j.util.FeatureToggles.flag;\n \n abstract class MuninnPageCursor extends PageCursor\n {\n-    private static final boolean usePreciseCursorErrorStackTraces =\n-            flag( MuninnPageCursor.class, \"usePreciseCursorErrorStackTraces\", false );\n-\n-    private static final boolean boundsCheck = flag( MuninnPageCursor.class, \"boundsCheck\", true );\n-\n-    // Size of the respective primitive types in bytes.\n-    private static final int SIZE_OF_BYTE = Byte.BYTES;\n-    private static final int SIZE_OF_SHORT = Short.BYTES;\n-    private static final int SIZE_OF_INT = Integer.BYTES;\n-    private static final int SIZE_OF_LONG = Long.BYTES;\n-\n-    private final long victimPage;\n-    private final PageCursorTracer tracer;\n-    protected MuninnPagedFile pagedFile;\n-    protected PageSwapper swapper;\n-    protected int swapperId;\n-    protected long pinnedPageRef;\n-    protected PinEvent pinEvent;\n-    protected long pageId;\n-    protected int pf_flags;\n-    protected boolean eagerFlush;\n-    protected boolean noFault;\n-    protected boolean noGrow;\n-    protected long currentPageId;\n-    protected long nextPageId;\n-    protected MuninnPageCursor linkedCursor;\n-    private long pointer;\n-    private int pageSize;\n-    private int filePageSize;\n-    protected final VersionContextSupplier versionContextSupplier;\n-    private int offset;\n-    private boolean outOfBounds;\n-    private boolean isLinkedCursor;\n-    // This is a String with the exception message if usePreciseCursorErrorStackTraces is false, otherwise it is a\n-    // CursorExceptionWithPreciseStackTrace with the message and stack trace pointing more or less directly at the\n-    // offending code.\n-    private Object cursorException;\n-\n-    MuninnPageCursor( long victimPage, PageCursorTracer tracer, VersionContextSupplier versionContextSupplier )\n-    {\n-        this.victimPage = victimPage;\n-        this.pointer = victimPage;\n-        this.tracer = tracer;\n-        this.versionContextSupplier = versionContextSupplier;\n-    }\n-\n-    final void initialise( MuninnPagedFile pagedFile, long pageId, int pf_flags )\n-    {\n-        this.swapper = pagedFile.swapper;\n-        this.swapperId = pagedFile.swapperId;\n-        this.filePageSize = pagedFile.filePageSize;\n-        this.pagedFile = pagedFile;\n-        this.pageId = pageId;\n-        this.pf_flags = pf_flags;\n-        this.eagerFlush = isFlagRaised( pf_flags, PF_EAGER_FLUSH );\n-        this.noFault = isFlagRaised( pf_flags, PF_NO_FAULT );\n-        this.noGrow = noFault | isFlagRaised( pf_flags, PagedFile.PF_NO_GROW );\n-    }\n-\n-    private boolean isFlagRaised( int flagSet, int flag )\n-    {\n-        return (flagSet & flag) == flag;\n-    }\n-\n-    @Override\n-    public final void rewind()\n-    {\n-        nextPageId = pageId;\n-        currentPageId = UNBOUND_PAGE_ID;\n-    }\n-\n-    public final void reset( long pageRef )\n-    {\n-        this.pinnedPageRef = pageRef;\n-        this.offset = 0;\n-        this.pointer = pagedFile.getAddress( pageRef );\n-        this.pageSize = filePageSize;\n-        pinEvent.setCachePageId( pagedFile.toId( pageRef ) );\n-    }\n-\n-    @Override\n-    public final boolean next( long pageId ) throws IOException\n-    {\n-        if ( currentPageId == pageId )\n-        {\n-            verifyContext();\n-            return true;\n-        }\n-        nextPageId = pageId;\n-        return next();\n-    }\n-\n-    void verifyContext()\n-    {\n-        VersionContext versionContext = versionContextSupplier.getVersionContext();\n-        long lastClosedTransactionId = versionContext.lastClosedTransactionId();\n-        if ( lastClosedTransactionId == Long.MAX_VALUE )\n-        {\n-            return;\n-        }\n-        if ( isPotentiallyReadingDirtyData( lastClosedTransactionId ) )\n-        {\n-            versionContext.markAsDirty();\n-        }\n-    }\n-\n-    /**\n-     * We reading potentially dirty data in case if our page last modification version is higher then\n-     * requested lastClosedTransactionId; or for this page file we already evict some page with version that is higher\n-     * then requested lastClosedTransactionId. In this case we can't be sure that data of current page satisfying\n-     * visibility requirements and we pessimistically will assume that we reading dirty data.\n-     * @param lastClosedTransactionId last closed transaction id\n-     * @return true in case if we reading potentially dirty data for requested lastClosedTransactionId.\n-     */\n-    private boolean isPotentiallyReadingDirtyData( long lastClosedTransactionId )\n-    {\n-        return pagedFile.getLastModifiedTxId( pinnedPageRef ) > lastClosedTransactionId ||\n-                pagedFile.getHighestEvictedTransactionId() > lastClosedTransactionId;\n-    }\n-\n-    @Override\n-    public final void close()\n-    {\n-        if ( pagedFile == null )\n-        {\n-            return; // already closed\n-        }\n-        closeLinks( this );\n-    }\n-\n-    private void closeLinks( MuninnPageCursor cursor )\n-    {\n-        while ( cursor != null && cursor.pagedFile != null )\n-        {\n-            cursor.unpinCurrentPage();\n-            // We null out the pagedFile field to allow it and its (potentially big) translation table to be garbage\n-            // collected when the file is unmapped, since the cursors can stick around in thread local caches, etc.\n-            cursor.pagedFile = null;\n-            cursor = cursor.linkedCursor;\n-        }\n-    }\n-\n-    private void closeLinkedCursorIfAny()\n-    {\n-        if ( linkedCursor != null )\n-        {\n-            closeLinks( linkedCursor );\n-        }\n-    }\n-\n-    @Override\n-    public PageCursor openLinkedCursor( long pageId )\n-    {\n-        closeLinkedCursorIfAny();\n-        MuninnPagedFile pf = pagedFile;\n-        if ( pf == null )\n-        {\n-            // This cursor has been closed\n-            throw new IllegalStateException( \"Cannot open linked cursor on closed page cursor\" );\n-        }\n-        if ( linkedCursor != null )\n-        {\n-            linkedCursor.initialise( pf, pageId, pf_flags );\n-            linkedCursor.rewind();\n-        }\n-        else\n-        {\n-            linkedCursor = (MuninnPageCursor) pf.io( pageId, pf_flags );\n-            linkedCursor.isLinkedCursor = true;\n-        }\n-        return linkedCursor;\n-    }\n-\n-    /**\n-     * Must be called by {@link #unpinCurrentPage()}.\n-     */\n-    void clearPageCursorState()\n-    {\n-        // We don't need to clear the pointer field, because setting the page size to 0 will make all future accesses\n-        // go out of bounds, which in turn imply that they will always end up accessing the victim page anyway.\n-        clearPageReference();\n-        currentPageId = UNBOUND_PAGE_ID;\n-        cursorException = null;\n-    }\n-\n-    void clearPageReference()\n-    {\n-        // Make all future bounds checks fail, and send future accesses to the victim page.\n-        pageSize = 0;\n-        // Decouple us from the memory page, so we avoid messing with the page meta-data.\n-        pinnedPageRef = 0;\n-    }\n-\n-    @Override\n-    public final long getCurrentPageId()\n-    {\n-        return currentPageId;\n-    }\n-\n-    @Override\n-    public final int getCurrentPageSize()\n-    {\n-        return currentPageId == UNBOUND_PAGE_ID ? UNBOUND_PAGE_SIZE : pagedFile.pageSize();\n-    }\n-\n-    @Override\n-    public final File getCurrentFile()\n-    {\n-        return currentPageId == UNBOUND_PAGE_ID ? null : pagedFile.file();\n-    }\n-\n-    /**\n-     * Pin the desired file page to this cursor, page faulting it into memory if it isn't there already.\n-     * @param filePageId The file page id we want to pin this cursor to.\n-     * @param writeLock 'true' if we will be taking a write lock on the page as part of the pin.\n-     * @throws IOException if anything goes wrong with the pin, most likely during a page fault.\n-     */\n-    protected void pin( long filePageId, boolean writeLock ) throws IOException\n-    {\n-        pinEvent = tracer.beginPin( writeLock, filePageId, swapper );\n-        int chunkId = MuninnPagedFile.computeChunkId( filePageId );\n-        // The chunkOffset is the addressing offset into the chunk array object for the relevant array slot. Using\n-        // this, we can access the array slot with Unsafe.\n-        long chunkOffset = MuninnPagedFile.computeChunkOffset( filePageId );\n-        int[][] tt = pagedFile.translationTable;\n-        if ( tt.length <= chunkId )\n-        {\n-            tt = expandTranslationTableCapacity( chunkId );\n-        }\n-        int[] chunk = tt[chunkId];\n-\n-        // Now, if the reference in the chunk slot is a latch, we wait on it and look up again (in a loop, since the\n-        // page might get evicted right after the page fault completes). If we find a page, we lock it and check its\n-        // binding (since it might get evicted and faulted into something else in the time between our look up and\n-        // our locking of the page). If the reference is null or it referred to a page that had wrong bindings, we CAS\n-        // in a latch. If that CAS succeeds, we page fault, set the slot to the faulted in page and open the latch.\n-        // If the CAS failed, we retry the look up and start over from the top.\n-        for (;;)\n-        {\n-            int mappedPageId = UnsafeUtil.getIntVolatile( chunk, chunkOffset );\n-            if ( mappedPageId != UNMAPPED_TTE )\n-            {\n-                // We got *a* page, but we might be racing with eviction. To cope with that, we have to take some\n-                // kind of lock on the page, and check that it is indeed bound to what we expect. If not, then it has\n-                // been evicted, and possibly even page faulted into something else. In this case, we discard the\n-                // item and try again, as the eviction thread would have set the chunk array slot to null.\n-                long pageRef = pagedFile.deref( mappedPageId );\n-                boolean locked = tryLockPage( pageRef );\n-                if ( locked & pagedFile.isBoundTo( pageRef, swapperId, filePageId ) )\n-                {\n-                    pinCursorToPage( pageRef, filePageId, swapper );\n-                    pinEvent.hit();\n-                    return;\n-                }\n-                if ( locked )\n-                {\n-                    unlockPage( pageRef );\n-                }\n-            }\n-            else\n-            {\n-                if ( uncommonPin( filePageId, chunkOffset, chunk ) )\n-                {\n-                    return;\n-                }\n-            }\n-        }\n-    }\n-\n-    private int[][] expandTranslationTableCapacity( int chunkId )\n-    {\n-        return pagedFile.expandCapacity( chunkId );\n-    }\n-\n-    private boolean uncommonPin( long filePageId, long chunkOffset, int[] chunk ) throws IOException\n-    {\n-        if ( noFault )\n-        {\n-            // The only page state that needs to be cleared is the currentPageId, since it was set prior to pin.\n-            currentPageId = UNBOUND_PAGE_ID;\n-            return true;\n-        }\n-        // Looks like there's no mapping, so we'd like to do a page fault.\n-        LatchMap.Latch latch = pagedFile.pageFaultLatches.takeOrAwaitLatch( filePageId );\n-        if ( latch != null )\n-        {\n-            // We managed to inject our latch, so we now own the right to perform the page fault. We also\n-            // have a duty to eventually release and remove the latch, no matter what happens now.\n-            // However, we first have to double-check that a page fault did not complete in-between our initial\n-            // check in the translation table, and us getting a latch.\n-            if ( UnsafeUtil.getIntVolatile( chunk, chunkOffset ) == UNMAPPED_TTE )\n-            {\n-                // Sweet, we didn't race with any other fault on this translation table entry.\n-                long pageRef = pageFault( filePageId, swapper, chunkOffset, chunk, latch );\n-                pinCursorToPage( pageRef, filePageId, swapper );\n-                return true;\n-            }\n-            // Oops, looks like we raced with another page fault on this file page.\n-            // Let's release our latch and retry the pin.\n-            latch.release();\n-        }\n-        // We found a latch, so someone else is already doing a page fault for this page.\n-        // The `takeOrAwaitLatch` already waited for this latch to be released on our behalf,\n-        // so now we just have to do another iteration of the loop to see what's in the translation table now.\n-        return false;\n-    }\n-\n-    private long pageFault(\n-            long filePageId, PageSwapper swapper, long chunkOffset, int[] chunk, LatchMap.Latch latch )\n-            throws IOException\n-    {\n-        // We are page faulting. This is a critical time, because we currently have the given latch in the chunk array\n-        // slot that we are faulting into. We MUST make sure to release that latch, and remove it from the chunk, no\n-        // matter what happens. Otherwise other threads will get stuck waiting forever for our page fault to finish.\n-        // If we manage to get a free page to fault into, then we will also be taking a write lock on that page, to\n-        // protect it against concurrent eviction as we assigning a binding to the page. If anything goes wrong, then\n-        // we must make sure to release that write lock as well.\n-        PageFaultEvent faultEvent = pinEvent.beginPageFault();\n-        long pageRef;\n-        try\n-        {\n-            // The grabFreePage method might throw.\n-            pageRef = pagedFile.grabFreeAndExclusivelyLockedPage( faultEvent );\n-\n-            // We got a free page, and we know that we have race-free access to it. Well, it's not entirely race\n-            // free, because other paged files might have it in their translation tables (or rather, their reads of\n-            // their translation tables might race with eviction) and try to pin it.\n-            // However, they will all fail because when they try to pin, because the page will be exclusively locked\n-            // and possibly bound to our page.\n-        }\n-        catch ( Throwable throwable )\n+  private static final boolean usePreciseCursorErrorStackTraces =\n+      flag(MuninnPageCursor.class, \"usePreciseCursorErrorStackTraces\", false);\n+\n+  private static final boolean boundsCheck = flag(MuninnPageCursor.class, \"boundsCheck\", true);\n+\n+  // Size of the respective primitive types in bytes.\n+  private static final int SIZE_OF_BYTE = Byte.BYTES;\n+  private static final int SIZE_OF_SHORT = Short.BYTES;\n+  private static final int SIZE_OF_INT = Integer.BYTES;\n+  private static final int SIZE_OF_LONG = Long.BYTES;\n+\n+  private final long victimPage;\n+  private final PageCursorTracer tracer;\n+  protected MuninnPagedFile pagedFile;\n+  protected PageSwapper swapper;\n+  protected int swapperId;\n+  protected long pinnedPageRef;\n+  protected PinEvent pinEvent;\n+  protected long pageId;\n+  protected int pf_flags;\n+  protected boolean eagerFlush;\n+  protected boolean noFault;\n+  protected boolean noGrow;\n+  protected long currentPageId;\n+  protected long nextPageId;\n+  protected MuninnPageCursor linkedCursor;\n+  private long pointer;\n+  private int pageSize;\n+  private int filePageSize;\n+  protected final VersionContextSupplier versionContextSupplier;\n+  private int offset;\n+  private boolean outOfBounds;\n+  private boolean isLinkedCursor;\n+  // This is a String with the exception message if usePreciseCursorErrorStackTraces is false, otherwise it is a\n+  // CursorExceptionWithPreciseStackTrace with the message and stack trace pointing more or less directly at the\n+  // offending code.\n+  private Object cursorException;\n+\n+  MuninnPageCursor(long victimPage, PageCursorTracer tracer, VersionContextSupplier versionContextSupplier)\n+  {\n+    this.victimPage = victimPage;\n+    this.pointer = victimPage;\n+    this.tracer = tracer;\n+    this.versionContextSupplier = versionContextSupplier;\n+  }\n+\n+  final void initialise(MuninnPagedFile pagedFile, long pageId, int pf_flags)\n+  {\n+    this.swapper = pagedFile.swapper;\n+    this.swapperId = pagedFile.swapperId;\n+    this.filePageSize = pagedFile.filePageSize;\n+    this.pagedFile = pagedFile;\n+    this.pageId = pageId;\n+    this.pf_flags = pf_flags;\n+    this.eagerFlush = isFlagRaised(pf_flags, PF_EAGER_FLUSH);\n+    this.noFault = isFlagRaised(pf_flags, PF_NO_FAULT);\n+    this.noGrow = noFault | isFlagRaised(pf_flags, PagedFile.PF_NO_GROW);\n+  }\n+\n+  private boolean isFlagRaised(int flagSet, int flag)\n+  {\n+    return (flagSet & flag) == flag;\n+  }\n+\n+  @Override\n+  public final void rewind()\n+  {\n+    nextPageId = pageId;\n+    currentPageId = UNBOUND_PAGE_ID;\n+  }\n+\n+  public final void reset(long pageRef)\n+  {\n+    this.pinnedPageRef = pageRef;\n+    this.offset = 0;\n+    this.pointer = pagedFile.getAddress(pageRef);\n+    this.pageSize = filePageSize;\n+    pinEvent.setCachePageId(pagedFile.toId(pageRef));\n+  }\n+\n+  @Override\n+  public final boolean next(long pageId) throws IOException\n+  {\n+    if (currentPageId == pageId)\n+    {\n+      verifyContext();\n+      return true;\n+    }\n+    nextPageId = pageId;\n+    return next();\n+  }\n+\n+  void verifyContext()\n+  {\n+    VersionContext versionContext = versionContextSupplier.getVersionContext();\n+    long lastClosedTransactionId = versionContext.lastClosedTransactionId();\n+    if (lastClosedTransactionId == Long.MAX_VALUE)\n+    {\n+      return;\n+    }\n+    if (isPotentiallyReadingDirtyData(lastClosedTransactionId))\n+    {\n+      versionContext.markAsDirty();\n+    }\n+  }\n+\n+  /**\n+   * We reading potentially dirty data in case if our page last modification version is higher then\n+   * requested lastClosedTransactionId; or for this page file we already evict some page with version that is higher\n+   * then requested lastClosedTransactionId. In this case we can't be sure that data of current page satisfying\n+   * visibility requirements and we pessimistically will assume that we reading dirty data.\n+   *\n+   * @param lastClosedTransactionId last closed transaction id\n+   * @return true in case if we reading potentially dirty data for requested lastClosedTransactionId.\n+   */\n+  private boolean isPotentiallyReadingDirtyData(long lastClosedTransactionId)\n+  {\n+    return pagedFile.getLastModifiedTxId(pinnedPageRef) > lastClosedTransactionId ||\n+        pagedFile.getHighestEvictedTransactionId() > lastClosedTransactionId;\n+  }\n+\n+  @Override\n+  public final void close()\n+  {\n+    if (pagedFile == null)\n+    {\n+      return; // already closed\n+    }\n+    closeLinks(this);\n+  }\n+\n+  private void closeLinks(MuninnPageCursor cursor)\n+  {\n+    while (cursor != null && cursor.pagedFile != null)\n+    {\n+      cursor.unpinCurrentPage();\n+      // We null out the pagedFile field to allow it and its (potentially big) translation table to be garbage\n+      // collected when the file is unmapped, since the cursors can stick around in thread local caches, etc.\n+      cursor.pagedFile = null;\n+      cursor = cursor.linkedCursor;\n+    }\n+  }\n+\n+  private void closeLinkedCursorIfAny()\n+  {\n+    if (linkedCursor != null)\n+    {\n+      closeLinks(linkedCursor);\n+    }\n+  }\n+\n+  @Override\n+  public PageCursor openLinkedCursor(long pageId)\n+  {\n+    closeLinkedCursorIfAny();\n+    MuninnPagedFile pf = pagedFile;\n+    if (pf == null)\n+    {\n+      // This cursor has been closed\n+      throw new IllegalStateException(\"Cannot open linked cursor on closed page cursor\");\n+    }\n+    if (linkedCursor != null)\n+    {\n+      linkedCursor.initialise(pf, pageId, pf_flags);\n+      linkedCursor.rewind();\n+    } else\n+    {\n+      linkedCursor = (MuninnPageCursor) pf.io(pageId, pf_flags);\n+      linkedCursor.isLinkedCursor = true;\n+    }\n+    return linkedCursor;\n+  }\n+\n+  /**\n+   * Must be called by {@link #unpinCurrentPage()}.\n+   */\n+  void clearPageCursorState()\n+  {\n+    // We don't need to clear the pointer field, because setting the page size to 0 will make all future accesses\n+    // go out of bounds, which in turn imply that they will always end up accessing the victim page anyway.\n+    clearPageReference();\n+    currentPageId = UNBOUND_PAGE_ID;\n+    cursorException = null;\n+  }\n+\n+  void clearPageReference()\n+  {\n+    // Make all future bounds checks fail, and send future accesses to the victim page.\n+    pageSize = 0;\n+    // Decouple us from the memory page, so we avoid messing with the page meta-data.\n+    pinnedPageRef = 0;\n+  }\n+\n+  @Override\n+  public final long getCurrentPageId()\n+  {\n+    return currentPageId;\n+  }\n+\n+  @Override\n+  public final int getCurrentPageSize()\n+  {\n+    return currentPageId == UNBOUND_PAGE_ID ? UNBOUND_PAGE_SIZE : pagedFile.pageSize();\n+  }\n+\n+  @Override\n+  public final File getCurrentFile()\n+  {\n+    return currentPageId == UNBOUND_PAGE_ID ? null : pagedFile.file();\n+  }\n+\n+  /**\n+   * Pin the desired file page to this cursor, page faulting it into memory if it isn't there already.\n+   *\n+   * @param filePageId The file page id we want to pin this cursor to.\n+   * @param writeLock  'true' if we will be taking a write lock on the page as part of the pin.\n+   * @throws IOException if anything goes wrong with the pin, most likely during a page fault.\n+   */\n+  protected void pin(long filePageId, boolean writeLock) throws IOException\n+  {\n+    pinEvent = tracer.beginPin(writeLock, filePageId, swapper);\n+    int chunkId = MuninnPagedFile.computeChunkId(filePageId);\n+    // The chunkOffset is the addressing offset into the chunk array object for the relevant array slot. Using\n+    // this, we can access the array slot with Unsafe.\n+    long chunkOffset = MuninnPagedFile.computeChunkOffset(filePageId);\n+    int[][] tt = pagedFile.translationTable;\n+    if (tt.length <= chunkId)\n+    {\n+      tt = expandTranslationTableCapacity(chunkId);\n+    }\n+    int[] chunk = tt[chunkId];\n+\n+    // Now, if the reference in the chunk slot is a latch, we wait on it and look up again (in a loop, since the\n+    // page might get evicted right after the page fault completes). If we find a page, we lock it and check its\n+    // binding (since it might get evicted and faulted into something else in the time between our look up and\n+    // our locking of the page). If the reference is null or it referred to a page that had wrong bindings, we CAS\n+    // in a latch. If that CAS succeeds, we page fault, set the slot to the faulted in page and open the latch.\n+    // If the CAS failed, we retry the look up and start over from the top.\n+    for (; ; )\n+    {\n+      int mappedPageId = UnsafeUtil.getIntVolatile(chunk, chunkOffset);\n+      if (mappedPageId != UNMAPPED_TTE)\n+      {\n+        // We got *a* page, but we might be racing with eviction. To cope with that, we have to take some\n+        // kind of lock on the page, and check that it is indeed bound to what we expect. If not, then it has\n+        // been evicted, and possibly even page faulted into something else. In this case, we discard the\n+        // item and try again, as the eviction thread would have set the chunk array slot to null.\n+        long pageRef = pagedFile.deref(mappedPageId);\n+        boolean locked = tryLockPage(pageRef);\n+        if (locked & pagedFile.isBoundTo(pageRef, swapperId, filePageId))\n         {\n-            // Make sure to unstuck the page fault latch.\n-            abortPageFault( throwable, chunk, chunkOffset, latch, faultEvent );\n-            throw throwable;\n+          pinCursorToPage(pageRef, filePageId, swapper);\n+          pinEvent.hit();\n+          return;\n         }\n-        try\n+        if (locked)\n         {\n-            // Check if we're racing with unmapping. We have the page lock\n-            // here, so the unmapping would have already happened. We do this\n-            // check before page.fault(), because that would otherwise reopen\n-            // the file channel.\n-            assertPagedFileStillMappedAndGetIdOfLastPage();\n-            pagedFile.initBuffer( pageRef );\n-            pagedFile.fault( pageRef, swapper, pagedFile.swapperId, filePageId, faultEvent );\n+          unlockPage(pageRef);\n         }\n-        catch ( Throwable throwable )\n+      } else\n+      {\n+        if (uncommonPin(filePageId, chunkOffset, chunk))\n         {\n-            // Make sure to unlock the page, so the eviction thread can pick up our trash.\n-            pagedFile.unlockExclusive( pageRef );\n-            // Make sure to unstuck the page fault latch.\n-            abortPageFault( throwable, chunk, chunkOffset, latch, faultEvent );\n-            throw throwable;\n-        }\n-        // Put the page in the translation table before we undo the exclusive lock, as we could otherwise race with\n-        // eviction, and the onEvict callback expects to find a MuninnPage object in the table.\n-        UnsafeUtil.putIntVolatile( chunk, chunkOffset, pagedFile.toId( pageRef ) );\n-        // Once we page has been published to the translation table, we can convert our exclusive lock to whatever we\n-        // need for the page cursor.\n-        convertPageFaultLock( pageRef );\n-        latch.release();\n-        faultEvent.done();\n-        return pageRef;\n-    }\n-\n-    private void abortPageFault( Throwable throwable, int[] chunk, long chunkOffset,\n-                                 LatchMap.Latch latch,\n-                                 PageFaultEvent faultEvent )\n-    {\n-        UnsafeUtil.putIntVolatile( chunk, chunkOffset, UNMAPPED_TTE );\n-        latch.release();\n-        faultEvent.done( throwable );\n-        pinEvent.done();\n-    }\n-\n-    long assertPagedFileStillMappedAndGetIdOfLastPage() throws FileIsNotMappedException\n-    {\n-        return pagedFile.getLastPageId();\n-    }\n-\n-    protected abstract void unpinCurrentPage();\n-\n-    protected abstract void convertPageFaultLock( long pageRef );\n-\n-    protected abstract void pinCursorToPage( long pageRef, long filePageId, PageSwapper swapper )\n-            throws FileIsNotMappedException;\n-\n-    protected abstract boolean tryLockPage( long pageRef );\n-\n-    protected abstract void unlockPage( long pageRef );\n-\n-    // --- IO methods:\n-\n-    /**\n-     * Compute a pointer that guarantees (assuming {@code size} is less than or equal to {@link #pageSize}) that the\n-     * page access will be within the bounds of the page.\n-     * This might mean that the pointer won't point to where one might naively expect, but will instead be\n-     * truncated to point within the page. In this case, an overflow has happened and the {@link #outOfBounds}\n-     * flag will be raised.\n-     */\n-    private long getBoundedPointer( int offset, int size )\n-    {\n-        long p = pointer;\n-        long can = p + offset;\n-        if ( boundsCheck )\n-        {\n-            if ( can + size > p + pageSize || can < p )\n-            {\n-                outOfBounds = true;\n-                // Return the victim page when we are out of bounds, since at this point we can't tell if the pointer\n-                // will be used for reading or writing.\n-                return victimPage;\n-            }\n-        }\n-        return can;\n-    }\n-\n-    /**\n-     * Compute a pointer that guarantees (assuming {@code size} is less than or equal to {@link #pageSize}) that the\n-     * page access will be within the bounds of the page.\n-     * This works just like {@link #getBoundedPointer(int, int)}, except in terms of the current {@link #offset}.\n-     * This version is faster when applicable, because it can ignore the <em>page underflow</em> case.\n-     */\n-    private long nextBoundedPointer( int size )\n-    {\n-        int offset = this.offset;\n-        long can = pointer + offset;\n-        if ( boundsCheck )\n-        {\n-            if ( offset + size > pageSize )\n-            {\n-                outOfBounds = true;\n-                // Return the victim page when we are out of bounds, since at this point we can't tell if the pointer\n-                // will be used for reading or writing.\n-                return victimPage;\n-            }\n-        }\n-        return can;\n-    }\n-\n-    @Override\n-    public final byte getByte()\n-    {\n-        long p = nextBoundedPointer( SIZE_OF_BYTE );\n-        byte b = UnsafeUtil.getByte( p );\n-        offset++;\n-        return b;\n-    }\n-\n-    @Override\n-    public byte getByte( int offset )\n-    {\n-        long p = getBoundedPointer( offset, SIZE_OF_BYTE );\n-        return UnsafeUtil.getByte( p );\n-    }\n-\n-    @Override\n-    public void putByte( byte value )\n-    {\n-        long p = nextBoundedPointer( SIZE_OF_BYTE );\n-        UnsafeUtil.putByte( p, value );\n-        offset++;\n-    }\n-\n-    @Override\n-    public void putByte( int offset, byte value )\n-    {\n-        long p = getBoundedPointer( offset, SIZE_OF_BYTE );\n-        UnsafeUtil.putByte( p, value );\n-    }\n-\n-    @Override\n-    public long getLong()\n-    {\n-        long p = nextBoundedPointer( SIZE_OF_LONG );\n-        long value = getLongAt( p );\n-        offset += SIZE_OF_LONG;\n-        return value;\n-    }\n-\n-    @Override\n-    public long getLong( int offset )\n-    {\n-        long p = getBoundedPointer( offset, SIZE_OF_LONG );\n-        return getLongAt( p );\n-    }\n-\n-    private long getLongAt( long p )\n-    {\n-        long value;\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess )\n-        {\n-            value = UnsafeUtil.getLong( p );\n-            if ( !UnsafeUtil.storeByteOrderIsNative )\n-            {\n-                value = Long.reverseBytes( value );\n-            }\n-        }\n-        else\n-        {\n-            value = getLongBigEndian( p );\n-        }\n-        return value;\n-    }\n-\n-    private long getLongBigEndian( long p )\n-    {\n-        long a = UnsafeUtil.getByte( p     ) & 0xFF;\n-        long b = UnsafeUtil.getByte( p + 1 ) & 0xFF;\n-        long c = UnsafeUtil.getByte( p + 2 ) & 0xFF;\n-        long d = UnsafeUtil.getByte( p + 3 ) & 0xFF;\n-        long e = UnsafeUtil.getByte( p + 4 ) & 0xFF;\n-        long f = UnsafeUtil.getByte( p + 5 ) & 0xFF;\n-        long g = UnsafeUtil.getByte( p + 6 ) & 0xFF;\n-        long h = UnsafeUtil.getByte( p + 7 ) & 0xFF;\n-        return (a << 56) | (b << 48) | (c << 40) | (d << 32) | (e << 24) | (f << 16) | (g << 8) | h;\n-    }\n-\n-    @Override\n-    public void putLong( long value )\n-    {\n-        long p = nextBoundedPointer( SIZE_OF_LONG );\n-        putLongAt( p, value );\n-        offset += SIZE_OF_LONG;\n-    }\n-\n-    @Override\n-    public void putLong( int offset, long value )\n-    {\n-        long p = getBoundedPointer( offset, SIZE_OF_LONG );\n-        putLongAt( p, value );\n-    }\n-\n-    private void putLongAt( long p, long value )\n-    {\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess )\n-        {\n-            UnsafeUtil.putLong( p, UnsafeUtil.storeByteOrderIsNative ? value : Long.reverseBytes( value ) );\n-        }\n-        else\n-        {\n-            putLongBigEndian( value, p );\n-        }\n-    }\n-\n-    private void putLongBigEndian( long value, long p )\n-    {\n-        UnsafeUtil.putByte( p    , (byte)( value >> 56 ) );\n-        UnsafeUtil.putByte( p + 1, (byte)( value >> 48 ) );\n-        UnsafeUtil.putByte( p + 2, (byte)( value >> 40 ) );\n-        UnsafeUtil.putByte( p + 3, (byte)( value >> 32 ) );\n-        UnsafeUtil.putByte( p + 4, (byte)( value >> 24 ) );\n-        UnsafeUtil.putByte( p + 5, (byte)( value >> 16 ) );\n-        UnsafeUtil.putByte( p + 6, (byte)( value >> 8  ) );\n-        UnsafeUtil.putByte( p + 7, (byte) value );\n-    }\n-\n-    @Override\n-    public int getInt()\n-    {\n-        long p = nextBoundedPointer( SIZE_OF_INT );\n-        int i = getIntAt( p );\n-        offset += SIZE_OF_INT;\n-        return i;\n-    }\n-\n-    @Override\n-    public int getInt( int offset )\n-    {\n-        long p = getBoundedPointer( offset, SIZE_OF_INT );\n-        return getIntAt( p );\n-    }\n-\n-    private int getIntAt( long p )\n-    {\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess )\n-        {\n-            int x = UnsafeUtil.getInt( p );\n-            return UnsafeUtil.storeByteOrderIsNative ? x : Integer.reverseBytes( x );\n-        }\n-        return getIntBigEndian( p );\n-    }\n-\n-    private int getIntBigEndian( long p )\n-    {\n-        int a = UnsafeUtil.getByte( p     ) & 0xFF;\n-        int b = UnsafeUtil.getByte( p + 1 ) & 0xFF;\n-        int c = UnsafeUtil.getByte( p + 2 ) & 0xFF;\n-        int d = UnsafeUtil.getByte( p + 3 ) & 0xFF;\n-        return (a << 24) | (b << 16) | (c << 8) | d;\n-    }\n-\n-    @Override\n-    public void putInt( int value )\n-    {\n-        long p = nextBoundedPointer( SIZE_OF_INT );\n-        putIntAt( p, value );\n-        offset += SIZE_OF_INT;\n-    }\n-\n-    @Override\n-    public void putInt( int offset, int value )\n-    {\n-        long p = getBoundedPointer( offset, SIZE_OF_INT );\n-        putIntAt( p, value );\n-    }\n-\n-    private void putIntAt( long p, int value )\n-    {\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess )\n-        {\n-            UnsafeUtil.putInt( p, UnsafeUtil.storeByteOrderIsNative ? value : Integer.reverseBytes( value ) );\n-        }\n-        else\n-        {\n-            putIntBigEndian( value, p );\n-        }\n-    }\n-\n-    private void putIntBigEndian( int value, long p )\n-    {\n-        UnsafeUtil.putByte( p    , (byte)( value >> 24 ) );\n-        UnsafeUtil.putByte( p + 1, (byte)( value >> 16 ) );\n-        UnsafeUtil.putByte( p + 2, (byte)( value >> 8  ) );\n-        UnsafeUtil.putByte( p + 3, (byte) value );\n-    }\n-\n-    @Override\n-    public void getBytes( byte[] data )\n-    {\n-        getBytes( data, 0, data.length );\n-    }\n-\n-    @Override\n-    public void getBytes( byte[] data, int arrayOffset, int length )\n-    {\n-        long p = getBoundedPointer( offset, length );\n-        if ( !outOfBounds )\n-        {\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                data[arrayOffset + i] = UnsafeUtil.getByte( p + i );\n-            }\n-        }\n-        offset += length;\n-    }\n-\n-    @Override\n-    public final void putBytes( byte[] data )\n-    {\n-        putBytes( data, 0, data.length );\n-    }\n-\n-    @Override\n-    public void putBytes( byte[] data, int arrayOffset, int length )\n-    {\n-        long p = getBoundedPointer( offset, length );\n-        if ( !outOfBounds )\n-        {\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                byte b = data[arrayOffset + i];\n-                UnsafeUtil.putByte( p + i, b );\n-            }\n-        }\n-        offset += length;\n-    }\n-\n-    @Override\n-    public void putBytes( int bytes, byte value )\n-    {\n-        long p = getBoundedPointer( offset, bytes );\n-        if ( !outOfBounds )\n-        {\n-            UnsafeUtil.setMemory( p, bytes, value );\n-        }\n-        offset += bytes;\n-    }\n-\n-    @Override\n-    public final short getShort()\n-    {\n-        long p = nextBoundedPointer( SIZE_OF_SHORT );\n-        short s = getShortAt( p );\n-        offset += SIZE_OF_SHORT;\n-        return s;\n-    }\n-\n-    @Override\n-    public short getShort( int offset )\n-    {\n-        long p = getBoundedPointer( offset, SIZE_OF_SHORT );\n-        return getShortAt( p );\n-    }\n-\n-    private short getShortAt( long p )\n-    {\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess )\n-        {\n-            short x = UnsafeUtil.getShort( p );\n-            return UnsafeUtil.storeByteOrderIsNative ? x : Short.reverseBytes( x );\n-        }\n-        return getShortBigEndian( p );\n-    }\n-\n-    private short getShortBigEndian( long p )\n-    {\n-        short a = (short) (UnsafeUtil.getByte( p     ) & 0xFF);\n-        short b = (short) (UnsafeUtil.getByte( p + 1 ) & 0xFF);\n-        return (short) ((a << 8) | b);\n-    }\n-\n-    @Override\n-    public void putShort( short value )\n-    {\n-        long p = nextBoundedPointer( SIZE_OF_SHORT );\n-        putShortAt( p, value );\n-        offset += SIZE_OF_SHORT;\n-    }\n-\n-    @Override\n-    public void putShort( int offset, short value )\n-    {\n-        long p = getBoundedPointer( offset, SIZE_OF_SHORT );\n-        putShortAt( p, value );\n-    }\n-\n-    private void putShortAt( long p, short value )\n-    {\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess )\n-        {\n-            UnsafeUtil.putShort( p, UnsafeUtil.storeByteOrderIsNative ? value : Short.reverseBytes( value ) );\n-        }\n-        else\n-        {\n-            putShortBigEndian( value, p );\n-        }\n-    }\n-\n-    private void putShortBigEndian( short value, long p )\n-    {\n-        UnsafeUtil.putByte( p    , (byte)( value >> 8 ) );\n-        UnsafeUtil.putByte( p + 1, (byte) value );\n-    }\n-\n-    @Override\n-    public int copyTo( int sourceOffset, PageCursor targetCursor, int targetOffset, int lengthInBytes )\n-    {\n-        int sourcePageSize = getCurrentPageSize();\n-        int targetPageSize = targetCursor.getCurrentPageSize();\n-        if ( targetCursor.getClass() != MuninnWritePageCursor.class )\n-        {\n-            throw new IllegalArgumentException( \"Target cursor must be writable\" );\n-        }\n-        if ( sourceOffset >= 0\n-             & targetOffset >= 0\n-             & sourceOffset < sourcePageSize\n-             & targetOffset < targetPageSize\n-             & lengthInBytes >= 0 )\n-        {\n-            MuninnPageCursor cursor = (MuninnPageCursor) targetCursor;\n-            int remainingSource = sourcePageSize - sourceOffset;\n-            int remainingTarget = targetPageSize - targetOffset;\n-            int bytes = Math.min( lengthInBytes, Math.min( remainingSource, remainingTarget ) );\n-            UnsafeUtil.copyMemory( pointer + sourceOffset, cursor.pointer + targetOffset, bytes );\n-            return bytes;\n+          return;\n         }\n+      }\n+    }\n+  }\n+\n+  private int[][] expandTranslationTableCapacity(int chunkId)\n+  {\n+    return pagedFile.expandCapacity(chunkId);\n+  }\n+\n+  private boolean uncommonPin(long filePageId, long chunkOffset, int[] chunk) throws IOException\n+  {\n+    if (noFault)\n+    {\n+      // The only page state that needs to be cleared is the currentPageId, since it was set prior to pin.\n+      currentPageId = UNBOUND_PAGE_ID;\n+      return true;\n+    }\n+    // Looks like there's no mapping, so we'd like to do a page fault.\n+    LatchMap.Latch latch = pagedFile.pageFaultLatches.takeOrAwaitLatch(filePageId);\n+    if (latch != null)\n+    {\n+      // We managed to inject our latch, so we now own the right to perform the page fault. We also\n+      // have a duty to eventually release and remove the latch, no matter what happens now.\n+      // However, we first have to double-check that a page fault did not complete in-between our initial\n+      // check in the translation table, and us getting a latch.\n+      if (UnsafeUtil.getIntVolatile(chunk, chunkOffset) == UNMAPPED_TTE)\n+      {\n+        // Sweet, we didn't race with any other fault on this translation table entry.\n+        long pageRef = pageFault(filePageId, swapper, chunkOffset, chunk, latch);\n+        pinCursorToPage(pageRef, filePageId, swapper);\n+        return true;\n+      }\n+      // Oops, looks like we raced with another page fault on this file page.\n+      // Let's release our latch and retry the pin.\n+      latch.release();\n+    }\n+    // We found a latch, so someone else is already doing a page fault for this page.\n+    // The `takeOrAwaitLatch` already waited for this latch to be released on our behalf,\n+    // so now we just have to do another iteration of the loop to see what's in the translation table now.\n+    return false;\n+  }\n+\n+  private long pageFault(\n+      long filePageId, PageSwapper swapper, long chunkOffset, int[] chunk, LatchMap.Latch latch)\n+      throws IOException\n+  {\n+    // We are page faulting. This is a critical time, because we currently have the given latch in the chunk array\n+    // slot that we are faulting into. We MUST make sure to release that latch, and remove it from the chunk, no\n+    // matter what happens. Otherwise other threads will get stuck waiting forever for our page fault to finish.\n+    // If we manage to get a free page to fault into, then we will also be taking a write lock on that page, to\n+    // protect it against concurrent eviction as we assigning a binding to the page. If anything goes wrong, then\n+    // we must make sure to release that write lock as well.\n+    PageFaultEvent faultEvent = pinEvent.beginPageFault();\n+    long pageRef;\n+    try\n+    {\n+      // The grabFreePage method might throw.\n+      pageRef = pagedFile.grabFreeAndExclusivelyLockedPage(faultEvent);\n+\n+      // We got a free page, and we know that we have race-free access to it. Well, it's not entirely race\n+      // free, because other paged files might have it in their translation tables (or rather, their reads of\n+      // their translation tables might race with eviction) and try to pin it.\n+      // However, they will all fail because when they try to pin, because the page will be exclusively locked\n+      // and possibly bound to our page.\n+    } catch (Throwable throwable)\n+    {\n+      // Make sure to unstuck the page fault latch.\n+      abortPageFault(throwable, chunk, chunkOffset, latch, faultEvent);\n+      throw throwable;\n+    }\n+    try\n+    {\n+      // Check if we're racing with unmapping. We have the page lock\n+      // here, so the unmapping would have already happened. We do this\n+      // check before page.fault(), because that would otherwise reopen\n+      // the file channel.\n+      assertPagedFileStillMappedAndGetIdOfLastPage();\n+      pagedFile.initBuffer(pageRef);\n+      pagedFile.fault(pageRef, swapper, pagedFile.swapperId, filePageId, faultEvent);\n+    } catch (Throwable throwable)\n+    {\n+      // Make sure to unlock the page, so the eviction thread can pick up our trash.\n+      pagedFile.unlockExclusive(pageRef);\n+      // Make sure to unstuck the page fault latch.\n+      abortPageFault(throwable, chunk, chunkOffset, latch, faultEvent);\n+      throw throwable;\n+    }\n+    // Put the page in the translation table before we undo the exclusive lock, as we could otherwise race with\n+    // eviction, and the onEvict callback expects to find a MuninnPage object in the table.\n+    UnsafeUtil.putIntVolatile(chunk, chunkOffset, pagedFile.toId(pageRef));\n+    // Once we page has been published to the translation table, we can convert our exclusive lock to whatever we\n+    // need for the page cursor.\n+    convertPageFaultLock(pageRef);\n+    latch.release();\n+    faultEvent.done();\n+    return pageRef;\n+  }\n+\n+  private void abortPageFault(Throwable throwable, int[] chunk, long chunkOffset,\n+                              LatchMap.Latch latch,\n+                              PageFaultEvent faultEvent)\n+  {\n+    UnsafeUtil.putIntVolatile(chunk, chunkOffset, UNMAPPED_TTE);\n+    latch.release();\n+    faultEvent.done(throwable);\n+    pinEvent.done();\n+  }\n+\n+  long assertPagedFileStillMappedAndGetIdOfLastPage() throws FileIsNotMappedException\n+  {\n+    return pagedFile.getLastPageId();\n+  }\n+\n+  protected abstract void unpinCurrentPage();\n+\n+  protected abstract void convertPageFaultLock(long pageRef);\n+\n+  protected abstract void pinCursorToPage(long pageRef, long filePageId, PageSwapper swapper)\n+      throws FileIsNotMappedException;\n+\n+  protected abstract boolean tryLockPage(long pageRef);\n+\n+  protected abstract void unlockPage(long pageRef);\n+\n+  // --- IO methods:\n+\n+  /**\n+   * Compute a pointer that guarantees (assuming {@code size} is less than or equal to {@link #pageSize}) that the\n+   * page access will be within the bounds of the page.\n+   * This might mean that the pointer won't point to where one might naively expect, but will instead be\n+   * truncated to point within the page. In this case, an overflow has happened and the {@link #outOfBounds}\n+   * flag will be raised.\n+   */\n+  private long getBoundedPointer(int offset, int size)\n+  {\n+    long p = pointer;\n+    long can = p + offset;\n+    if (boundsCheck)\n+    {\n+      if (can + size > p + pageSize || can < p)\n+      {\n         outOfBounds = true;\n-        return 0;\n-    }\n-\n-    @Override\n-    public int copyTo( int sourceOffset, ByteBuffer buf )\n-    {\n-        if ( buf.getClass() == UnsafeUtil.directByteBufferClass && buf.isDirect() && !buf.isReadOnly() )\n-        {\n-            // We expect that the mutable direct byte buffer is implemented with a class that is distinct from the\n-            // non-mutable (read-only) and non-direct (on-heap) byte buffers. By comparing class object instances,\n-            // we also implicitly assume that the classes are loaded by the same class loader, which should be\n-            // trivially true in almost all practical cases.\n-            // If our expectations are not met, then the additional isDirect and !isReadOnly checks will send all\n-            // calls to the byte-wise-copy fallback.\n-            return copyToDirectByteBuffer( sourceOffset, buf );\n-        }\n-        return copyToByteBufferByteWise( sourceOffset, buf );\n-    }\n-\n-    private int copyToDirectByteBuffer( int sourceOffset, ByteBuffer buf )\n+        // Return the victim page when we are out of bounds, since at this point we can't tell if the pointer\n+        // will be used for reading or writing.\n+        return victimPage;\n+      }\n+    }\n+    return can;\n+  }\n+\n+  /**\n+   * Compute a pointer that guarantees (assuming {@code size} is less than or equal to {@link #pageSize}) that the\n+   * page access will be within the bounds of the page.\n+   * This works just like {@link #getBoundedPointer(int, int)}, except in terms of the current {@link #offset}.\n+   * This version is faster when applicable, because it can ignore the <em>page underflow</em> case.\n+   */\n+  private long nextBoundedPointer(int size)\n+  {\n+    int offset = this.offset;\n+    long can = pointer + offset;\n+    if (boundsCheck)\n+    {\n+      if (offset + size > pageSize)\n+      {\n+        outOfBounds = true;\n+        // Return the victim page when we are out of bounds, since at this point we can't tell if the pointer\n+        // will be used for reading or writing.\n+        return victimPage;\n+      }\n+    }\n+    return can;\n+  }\n+\n+  @Override\n+  public final byte getByte()\n+  {\n+    long p = nextBoundedPointer(SIZE_OF_BYTE);\n+    byte b = UnsafeUtil.getByte(p);\n+    offset++;\n+    return b;\n+  }\n+\n+  @Override\n+  public byte getByte(int offset)\n+  {\n+    long p = getBoundedPointer(offset, SIZE_OF_BYTE);\n+    return UnsafeUtil.getByte(p);\n+  }\n+\n+  @Override\n+  public void putByte(byte value)\n+  {\n+    long p = nextBoundedPointer(SIZE_OF_BYTE);\n+    UnsafeUtil.putByte(p, value);\n+    offset++;\n+  }\n+\n+  @Override\n+  public void putByte(int offset, byte value)\n+  {\n+    long p = getBoundedPointer(offset, SIZE_OF_BYTE);\n+    UnsafeUtil.putByte(p, value);\n+  }\n+\n+  @Override\n+  public long getLong()\n+  {\n+    long p = nextBoundedPointer(SIZE_OF_LONG);\n+    long value = getLongAt(p);\n+    offset += SIZE_OF_LONG;\n+    return value;\n+  }\n+\n+  @Override\n+  public long getLong(int offset)\n+  {\n+    long p = getBoundedPointer(offset, SIZE_OF_LONG);\n+    return getLongAt(p);\n+  }\n+\n+  private long getLongAt(long p)\n+  {\n+    long value;\n+    if (UnsafeUtil.allowUnalignedMemoryAccess)\n+    {\n+      value = UnsafeUtil.getLong(p);\n+      if (!UnsafeUtil.storeByteOrderIsNative)\n+      {\n+        value = Long.reverseBytes(value);\n+      }\n+    } else\n+    {\n+      value = getLongBigEndian(p);\n+    }\n+    return value;\n+  }\n+\n+  private long getLongBigEndian(long p)\n+  {\n+    long a = UnsafeUtil.getByte(p) & 0xFF;\n+    long b = UnsafeUtil.getByte(p + 1) & 0xFF;\n+    long c = UnsafeUtil.getByte(p + 2) & 0xFF;\n+    long d = UnsafeUtil.getByte(p + 3) & 0xFF;\n+    long e = UnsafeUtil.getByte(p + 4) & 0xFF;\n+    long f = UnsafeUtil.getByte(p + 5) & 0xFF;\n+    long g = UnsafeUtil.getByte(p + 6) & 0xFF;\n+    long h = UnsafeUtil.getByte(p + 7) & 0xFF;\n+    return (a << 56) | (b << 48) | (c << 40) | (d << 32) | (e << 24) | (f << 16) | (g << 8) | h;\n+  }\n+\n+  @Override\n+  public void putLong(long value)\n+  {\n+    long p = nextBoundedPointer(SIZE_OF_LONG);\n+    putLongAt(p, value);\n+    offset += SIZE_OF_LONG;\n+  }\n+\n+  @Override\n+  public void putLong(int offset, long value)\n+  {\n+    long p = getBoundedPointer(offset, SIZE_OF_LONG);\n+    putLongAt(p, value);\n+  }\n+\n+  private void putLongAt(long p, long value)\n+  {\n+    if (UnsafeUtil.allowUnalignedMemoryAccess)\n+    {\n+      UnsafeUtil.putLong(p, UnsafeUtil.storeByteOrderIsNative ? value : Long.reverseBytes(value));\n+    } else\n+    {\n+      putLongBigEndian(value, p);\n+    }\n+  }\n+\n+  private void putLongBigEndian(long value, long p)\n+  {\n+    UnsafeUtil.putByte(p, (byte) (value >> 56));\n+    UnsafeUtil.putByte(p + 1, (byte) (value >> 48));\n+    UnsafeUtil.putByte(p + 2, (byte) (value >> 40));\n+    UnsafeUtil.putByte(p + 3, (byte) (value >> 32));\n+    UnsafeUtil.putByte(p + 4, (byte) (value >> 24));\n+    UnsafeUtil.putByte(p + 5, (byte) (value >> 16));\n+    UnsafeUtil.putByte(p + 6, (byte) (value >> 8));\n+    UnsafeUtil.putByte(p + 7, (byte) value);\n+  }\n+\n+  @Override\n+  public int getInt()\n+  {\n+    long p = nextBoundedPointer(SIZE_OF_INT);\n+    int i = getIntAt(p);\n+    offset += SIZE_OF_INT;\n+    return i;\n+  }\n+\n+  @Override\n+  public int getInt(int offset)\n+  {\n+    long p = getBoundedPointer(offset, SIZE_OF_INT);\n+    return getIntAt(p);\n+  }\n+\n+  private int getIntAt(long p)\n+  {\n+    if (UnsafeUtil.allowUnalignedMemoryAccess)\n+    {\n+      int x = UnsafeUtil.getInt(p);\n+      return UnsafeUtil.storeByteOrderIsNative ? x : Integer.reverseBytes(x);\n+    }\n+    return getIntBigEndian(p);\n+  }\n+\n+  private int getIntBigEndian(long p)\n+  {\n+    int a = UnsafeUtil.getByte(p) & 0xFF;\n+    int b = UnsafeUtil.getByte(p + 1) & 0xFF;\n+    int c = UnsafeUtil.getByte(p + 2) & 0xFF;\n+    int d = UnsafeUtil.getByte(p + 3) & 0xFF;\n+    return (a << 24) | (b << 16) | (c << 8) | d;\n+  }\n+\n+  @Override\n+  public void putInt(int value)\n+  {\n+    long p = nextBoundedPointer(SIZE_OF_INT);\n+    putIntAt(p, value);\n+    offset += SIZE_OF_INT;\n+  }\n+\n+  @Override\n+  public void putInt(int offset, int value)\n+  {\n+    long p = getBoundedPointer(offset, SIZE_OF_INT);\n+    putIntAt(p, value);\n+  }\n+\n+  private void putIntAt(long p, int value)\n+  {\n+    if (UnsafeUtil.allowUnalignedMemoryAccess)\n+    {\n+      UnsafeUtil.putInt(p, UnsafeUtil.storeByteOrderIsNative ? value : Integer.reverseBytes(value));\n+    } else\n+    {\n+      putIntBigEndian(value, p);\n+    }\n+  }\n+\n+  private void putIntBigEndian(int value, long p)\n+  {\n+    UnsafeUtil.putByte(p, (byte) (value >> 24));\n+    UnsafeUtil.putByte(p + 1, (byte) (value >> 16));\n+    UnsafeUtil.putByte(p + 2, (byte) (value >> 8));\n+    UnsafeUtil.putByte(p + 3, (byte) value);\n+  }\n+\n+  @Override\n+  public void getBytes(byte[] data)\n+  {\n+    getBytes(data, 0, data.length);\n+  }\n+\n+  @Override\n+  public void getBytes(byte[] data, int arrayOffset, int length)\n+  {\n+    long p = getBoundedPointer(offset, length);\n+    if (!outOfBounds)\n+    {\n+      for (int i = 0; i < length; i++)\n+      {\n+        data[arrayOffset + i] = UnsafeUtil.getByte(p + i);\n+      }\n+    }\n+    offset += length;\n+  }\n+\n+  @Override\n+  public final void putBytes(byte[] data)\n+  {\n+    putBytes(data, 0, data.length);\n+  }\n+\n+  @Override\n+  public void putBytes(byte[] data, int arrayOffset, int length)\n+  {\n+    long p = getBoundedPointer(offset, length);\n+    if (!outOfBounds)\n+    {\n+      for (int i = 0; i < length; i++)\n+      {\n+        byte b = data[arrayOffset + i];\n+        UnsafeUtil.putByte(p + i, b);\n+      }\n+    }\n+    offset += length;\n+  }\n+\n+  @Override\n+  public void putBytes(int bytes, byte value)\n+  {\n+    long p = getBoundedPointer(offset, bytes);\n+    if (!outOfBounds)\n+    {\n+      UnsafeUtil.setMemory(p, bytes, value);\n+    }\n+    offset += bytes;\n+  }\n+\n+  @Override\n+  public final short getShort()\n+  {\n+    long p = nextBoundedPointer(SIZE_OF_SHORT);\n+    short s = getShortAt(p);\n+    offset += SIZE_OF_SHORT;\n+    return s;\n+  }\n+\n+  @Override\n+  public short getShort(int offset)\n+  {\n+    long p = getBoundedPointer(offset, SIZE_OF_SHORT);\n+    return getShortAt(p);\n+  }\n+\n+  private short getShortAt(long p)\n+  {\n+    if (UnsafeUtil.allowUnalignedMemoryAccess)\n+    {\n+      short x = UnsafeUtil.getShort(p);\n+      return UnsafeUtil.storeByteOrderIsNative ? x : Short.reverseBytes(x);\n+    }\n+    return getShortBigEndian(p);\n+  }\n+\n+  private short getShortBigEndian(long p)\n+  {\n+    short a = (short) (UnsafeUtil.getByte(p) & 0xFF);\n+    short b = (short) (UnsafeUtil.getByte(p + 1) & 0xFF);\n+    return (short) ((a << 8) | b);\n+  }\n+\n+  @Override\n+  public void putShort(short value)\n+  {\n+    long p = nextBoundedPointer(SIZE_OF_SHORT);\n+    putShortAt(p, value);\n+    offset += SIZE_OF_SHORT;\n+  }\n+\n+  @Override\n+  public void putShort(int offset, short value)\n+  {\n+    long p = getBoundedPointer(offset, SIZE_OF_SHORT);\n+    putShortAt(p, value);\n+  }\n+\n+  private void putShortAt(long p, short value)\n+  {\n+    if (UnsafeUtil.allowUnalignedMemoryAccess)\n+    {\n+      UnsafeUtil.putShort(p, UnsafeUtil.storeByteOrderIsNative ? value : Short.reverseBytes(value));\n+    } else\n+    {\n+      putShortBigEndian(value, p);\n+    }\n+  }\n+\n+  private void putShortBigEndian(short value, long p)\n+  {\n+    UnsafeUtil.putByte(p, (byte) (value >> 8));\n+    UnsafeUtil.putByte(p + 1, (byte) value);\n+  }\n+\n+  @Override\n+  public int copyTo(int sourceOffset, PageCursor targetCursor, int targetOffset, int lengthInBytes)\n+  {\n+    int sourcePageSize = getCurrentPageSize();\n+    int targetPageSize = targetCursor.getCurrentPageSize();\n+    if (targetCursor.getClass() != MuninnWritePageCursor.class)\n+    {\n+      throw new IllegalArgumentException(\"Target cursor must be writable\");\n+    }\n+    if (sourceOffset >= 0\n+        & targetOffset >= 0\n+        & sourceOffset < sourcePageSize\n+        & targetOffset < targetPageSize\n+        & lengthInBytes >= 0)\n+    {\n+      MuninnPageCursor cursor = (MuninnPageCursor) targetCursor;\n+      int remainingSource = sourcePageSize - sourceOffset;\n+      int remainingTarget = targetPageSize - targetOffset;\n+      int bytes = Math.min(lengthInBytes, Math.min(remainingSource, remainingTarget));\n+      UnsafeUtil.copyMemory(pointer + sourceOffset, cursor.pointer + targetOffset, bytes);\n+      return bytes;\n+    }\n+    outOfBounds = true;\n+    return 0;\n+  }\n+\n+  @Override\n+  public int copyTo(int sourceOffset, ByteBuffer buf)\n+  {\n+    if (buf.getClass() == UnsafeUtil.directByteBufferClass && buf.isDirect() && !buf.isReadOnly())\n+    {\n+      // We expect that the mutable direct byte buffer is implemented with a class that is distinct from the\n+      // non-mutable (read-only) and non-direct (on-heap) byte buffers. By comparing class object instances,\n+      // we also implicitly assume that the classes are loaded by the same class loader, which should be\n+      // trivially true in almost all practical cases.\n+      // If our expectations are not met, then the additional isDirect and !isReadOnly checks will send all\n+      // calls to the byte-wise-copy fallback.\n+      return copyToDirectByteBuffer(sourceOffset, buf);\n+    }\n+    return copyToByteBufferByteWise(sourceOffset, buf);\n+  }\n+\n+  private int copyToDirectByteBuffer(int sourceOffset, ByteBuffer buf)\n+  {\n+    int pos = buf.position();\n+    int bytesToCopy = Math.min(buf.limit() - pos, pageSize - sourceOffset);\n+    long source = pointer + sourceOffset;\n+    if (sourceOffset < getCurrentPageSize() & sourceOffset >= 0)\n+    {\n+      long target = UnsafeUtil.getDirectByteBufferAddress(buf);\n+      UnsafeUtil.copyMemory(source, target + pos, bytesToCopy);\n+      buf.position(pos + bytesToCopy);\n+    } else\n+    {\n+      outOfBounds = true;\n+    }\n+    return bytesToCopy;\n+  }\n+\n+  private int copyToByteBufferByteWise(int sourceOffset, ByteBuffer buf)\n+  {\n+    int bytesToCopy = Math.min(buf.limit() - buf.position(), pageSize - sourceOffset);\n+    for (int i = 0; i < bytesToCopy; i++)\n+    {\n+      byte b = getByte(sourceOffset + i);\n+      buf.put(b);\n+    }\n+    return bytesToCopy;\n+  }\n+\n+  @Override\n+  public void shiftBytes(int sourceStart, int length, int shift)\n+  {\n+    int sourceEnd = sourceStart + length;\n+    int targetStart = sourceStart + shift;\n+    int targetEnd = sourceStart + length + shift;\n+    if (sourceStart < 0\n+        | sourceEnd > filePageSize\n+        | targetStart < 0\n+        | targetEnd > filePageSize\n+        | length < 0)\n+    {\n+      outOfBounds = true;\n+      return;\n+    }\n+\n+    if (shift < 0)\n+    {\n+      unsafeShiftLeft(sourceStart, sourceEnd, length, shift);\n+    } else\n+    {\n+      unsafeShiftRight(sourceEnd, sourceStart, length, shift);\n+    }\n+  }\n+\n+  private void unsafeShiftLeft(int fromPos, int toPos, int length, int shift)\n+  {\n+    int longSteps = length >> 3;\n+    if (UnsafeUtil.allowUnalignedMemoryAccess && longSteps > 0)\n+    {\n+      for (int i = 0; i < longSteps; i++)\n+      {\n+        long x = UnsafeUtil.getLong(pointer + fromPos);\n+        UnsafeUtil.putLong(pointer + fromPos + shift, x);\n+        fromPos += Long.BYTES;\n+      }\n+    }\n+\n+    while (fromPos < toPos)\n+    {\n+      byte b = UnsafeUtil.getByte(pointer + fromPos);\n+      UnsafeUtil.putByte(pointer + fromPos + shift, b);\n+      fromPos++;\n+    }\n+  }\n+\n+  private void unsafeShiftRight(int fromPos, int toPos, int length, int shift)\n+  {\n+    int longSteps = length >> 3;\n+    if (UnsafeUtil.allowUnalignedMemoryAccess && longSteps > 0)\n+    {\n+      for (int i = 0; i < longSteps; i++)\n+      {\n+        fromPos -= Long.BYTES;\n+        long x = UnsafeUtil.getLong(pointer + fromPos);\n+        UnsafeUtil.putLong(pointer + fromPos + shift, x);\n+      }\n+    }\n+\n+    while (fromPos > toPos)\n     {\n-        int pos = buf.position();\n-        int bytesToCopy = Math.min( buf.limit() - pos, pageSize - sourceOffset );\n-        long source = pointer + sourceOffset;\n-        if ( sourceOffset < getCurrentPageSize() & sourceOffset >= 0 )\n-        {\n-            long target = UnsafeUtil.getDirectByteBufferAddress( buf );\n-            UnsafeUtil.copyMemory( source, target + pos, bytesToCopy );\n-            buf.position( pos + bytesToCopy );\n-        }\n-        else\n-        {\n-            outOfBounds = true;\n-        }\n-        return bytesToCopy;\n+      fromPos--;\n+      byte b = UnsafeUtil.getByte(pointer + fromPos);\n+      UnsafeUtil.putByte(pointer + fromPos + shift, b);\n     }\n+  }\n \n-    private int copyToByteBufferByteWise( int sourceOffset, ByteBuffer buf )\n+  @Override\n+  public void setOffset(int offset)\n+  {\n+    this.offset = offset;\n+    if (offset < 0 | offset > filePageSize)\n     {\n-        int bytesToCopy = Math.min( buf.limit() - buf.position(), pageSize - sourceOffset );\n-        for ( int i = 0; i < bytesToCopy; i++ )\n-        {\n-            byte b = getByte( sourceOffset + i );\n-            buf.put( b );\n-        }\n-        return bytesToCopy;\n+      this.offset = 0;\n+      outOfBounds = true;\n     }\n+  }\n \n-    @Override\n-    public void shiftBytes( int sourceStart, int length, int shift )\n-    {\n-        int sourceEnd = sourceStart + length;\n-        int targetStart = sourceStart + shift;\n-        int targetEnd = sourceStart + length + shift;\n-        if ( sourceStart < 0\n-                | sourceEnd > filePageSize\n-                | targetStart < 0\n-                | targetEnd > filePageSize\n-                | length < 0 )\n-        {\n-            outOfBounds = true;\n-            return;\n-        }\n+  @Override\n+  public final int getOffset()\n+  {\n+    return offset;\n+  }\n \n-        if ( shift < 0 )\n-        {\n-            unsafeShiftLeft( sourceStart, sourceEnd, length, shift );\n-        }\n-        else\n-        {\n-            unsafeShiftRight( sourceEnd, sourceStart, length, shift );\n-        }\n-    }\n-\n-    private void unsafeShiftLeft( int fromPos, int toPos, int length, int shift )\n+  @Override\n+  public boolean checkAndClearBoundsFlag()\n+  {\n+    MuninnPageCursor cursor = this;\n+    boolean result = false;\n+    do\n     {\n-        int longSteps = length >> 3;\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess && longSteps > 0 )\n-        {\n-            for ( int i = 0; i < longSteps; i++ )\n-            {\n-                long x = UnsafeUtil.getLong( pointer + fromPos );\n-                UnsafeUtil.putLong( pointer + fromPos + shift, x );\n-                fromPos += Long.BYTES;\n-            }\n-        }\n-\n-        while ( fromPos < toPos )\n-        {\n-            byte b = UnsafeUtil.getByte( pointer + fromPos );\n-            UnsafeUtil.putByte( pointer + fromPos + shift, b );\n-            fromPos++;\n-        }\n+      result |= cursor.outOfBounds;\n+      cursor.outOfBounds = false;\n+      cursor = cursor.linkedCursor;\n     }\n+    while (cursor != null);\n+    return result;\n+  }\n \n-    private void unsafeShiftRight( int fromPos, int toPos, int length, int shift )\n+  @Override\n+  public void checkAndClearCursorException() throws CursorException\n+  {\n+    MuninnPageCursor cursor = this;\n+    do\n     {\n-        int longSteps = length >> 3;\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess && longSteps > 0 )\n+      Object error = cursor.cursorException;\n+      if (error != null)\n+      {\n+        clearCursorError(cursor);\n+        if (usePreciseCursorErrorStackTraces)\n         {\n-            for ( int i = 0; i < longSteps; i++ )\n-            {\n-                fromPos -= Long.BYTES;\n-                long x = UnsafeUtil.getLong( pointer + fromPos );\n-                UnsafeUtil.putLong( pointer + fromPos + shift, x );\n-            }\n-        }\n-\n-        while ( fromPos > toPos )\n+          throw (CursorExceptionWithPreciseStackTrace) error;\n+        } else\n         {\n-            fromPos--;\n-            byte b = UnsafeUtil.getByte( pointer + fromPos );\n-            UnsafeUtil.putByte( pointer + fromPos + shift, b );\n+          throw new CursorException((String) error);\n         }\n+      }\n+      cursor = cursor.linkedCursor;\n     }\n+    while (cursor != null);\n+  }\n \n-    @Override\n-    public void setOffset( int offset )\n-    {\n-        this.offset = offset;\n-        if ( offset < 0 | offset > filePageSize )\n-        {\n-            this.offset = 0;\n-            outOfBounds = true;\n-        }\n-    }\n+  @Override\n+  public void clearCursorException()\n+  {\n+    clearCursorError(this);\n+  }\n \n-    @Override\n-    public final int getOffset()\n+  private void clearCursorError(MuninnPageCursor cursor)\n+  {\n+    while (cursor != null)\n     {\n-        return offset;\n-    }\n-\n-    @Override\n-    public boolean checkAndClearBoundsFlag()\n-    {\n-        MuninnPageCursor cursor = this;\n-        boolean result = false;\n-        do\n-        {\n-            result |= cursor.outOfBounds;\n-            cursor.outOfBounds = false;\n-            cursor = cursor.linkedCursor;\n-        }\n-        while ( cursor != null );\n-        return result;\n-    }\n-\n-    @Override\n-    public void checkAndClearCursorException() throws CursorException\n-    {\n-        MuninnPageCursor cursor = this;\n-        do\n-        {\n-            Object error = cursor.cursorException;\n-            if ( error != null )\n-            {\n-                clearCursorError( cursor );\n-                if ( usePreciseCursorErrorStackTraces )\n-                {\n-                    throw (CursorExceptionWithPreciseStackTrace) error;\n-                }\n-                else\n-                {\n-                    throw new CursorException( (String) error );\n-                }\n-            }\n-            cursor = cursor.linkedCursor;\n-        }\n-        while ( cursor != null );\n+      cursor.cursorException = null;\n+      cursor = cursor.linkedCursor;\n     }\n+  }\n \n-    @Override\n-    public void clearCursorException()\n-    {\n-        clearCursorError( this );\n-    }\n+  @Override\n+  public void raiseOutOfBounds()\n+  {\n+    outOfBounds = true;\n+  }\n \n-    private void clearCursorError( MuninnPageCursor cursor )\n+  @Override\n+  public void setCursorException(String message)\n+  {\n+    Objects.requireNonNull(message);\n+    if (usePreciseCursorErrorStackTraces)\n     {\n-        while ( cursor != null )\n-        {\n-            cursor.cursorException = null;\n-            cursor = cursor.linkedCursor;\n-        }\n-    }\n-\n-    @Override\n-    public void raiseOutOfBounds()\n+      this.cursorException = new CursorExceptionWithPreciseStackTrace(message);\n+    } else\n     {\n-        outOfBounds = true;\n+      this.cursorException = message;\n     }\n+  }\n \n-    @Override\n-    public void setCursorException( String message )\n+  @Override\n+  public void zapPage()\n+  {\n+    if (pageSize == 0)\n     {\n-        Objects.requireNonNull( message );\n-        if ( usePreciseCursorErrorStackTraces )\n-        {\n-            this.cursorException = new CursorExceptionWithPreciseStackTrace( message );\n-        }\n-        else\n-        {\n-            this.cursorException = message;\n-        }\n-    }\n-\n-    @Override\n-    public void zapPage()\n+      // if this page has been closed then pageSize == 0 and we must adhere to making writes\n+      // trigger outOfBounds when closed\n+      outOfBounds = true;\n+    } else\n     {\n-        if ( pageSize == 0 )\n-        {\n-            // if this page has been closed then pageSize == 0 and we must adhere to making writes\n-            // trigger outOfBounds when closed\n-            outOfBounds = true;\n-        }\n-        else\n-        {\n-            UnsafeUtil.setMemory( pointer, pageSize, (byte) 0 );\n-        }\n+      UnsafeUtil.setMemory(pointer, pageSize, (byte) 0);\n     }\n+  }\n \n-    @Override\n-    public boolean isWriteLocked()\n-    {\n-        return isFlagRaised( pf_flags, PF_SHARED_WRITE_LOCK );\n-    }\n+  @Override\n+  public boolean isWriteLocked()\n+  {\n+    return isFlagRaised(pf_flags, PF_SHARED_WRITE_LOCK);\n+  }\n }\n",
            "diff_size": 1575
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "102",
                    "column": "30",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "107",
                    "column": "25",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "165",
                    "column": "88",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "181",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "181",
                    "column": "30",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "302",
                    "column": "28",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "467",
                    "column": "43",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "572",
                    "column": "41",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "573",
                    "column": "45",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "574",
                    "column": "45",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "575",
                    "column": "45",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "576",
                    "column": "45",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "577",
                    "column": "45",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "578",
                    "column": "45",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "579",
                    "column": "45",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "19",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "19",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "24",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "29",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "29",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "34",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "39",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "39",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "44",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "49",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "49",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "54",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "59",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "59",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "64",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "69",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "69",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "74",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "79",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "79",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "580",
                    "column": "83",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "612",
                    "column": "46",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "613",
                    "column": "50",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "614",
                    "column": "50",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "615",
                    "column": "50",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "616",
                    "column": "50",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "617",
                    "column": "50",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "618",
                    "column": "50",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "651",
                    "column": "40",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "652",
                    "column": "44",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "653",
                    "column": "44",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "654",
                    "column": "44",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "655",
                    "column": "19",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "655",
                    "column": "19",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "655",
                    "column": "24",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "655",
                    "column": "29",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "655",
                    "column": "29",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "655",
                    "column": "34",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "655",
                    "column": "39",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "655",
                    "column": "39",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "655",
                    "column": "43",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "687",
                    "column": "46",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "688",
                    "column": "50",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "689",
                    "column": "50",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "777",
                    "column": "52",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "778",
                    "column": "56",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "779",
                    "column": "28",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "779",
                    "column": "28",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "779",
                    "column": "32",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "811",
                    "column": "46",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "825",
                    "column": "31",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "825",
                    "column": "50",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "825",
                    "column": "81",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "825",
                    "column": "112",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "842",
                    "column": "64",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "842",
                    "column": "81",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "861",
                    "column": "49",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "893",
                    "column": "29",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "893",
                    "column": "55",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "893",
                    "column": "72",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "893",
                    "column": "98",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "911",
                    "column": "31",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "912",
                    "column": "51",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "922",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "922",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "932",
                    "column": "31",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "933",
                    "column": "51",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "943",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "943",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "955",
                    "column": "24",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "980",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "1007",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "1018",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1546/MuninnPageCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1546/MuninnPageCursor.java\nindex 526f96093f0..5237b4fe2d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1546/MuninnPageCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1546/MuninnPageCursor.java\n@@ -23,7 +23,6 @@ import java.io.File;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.Objects;\n-\n import org.neo4j.io.pagecache.CursorException;\n import org.neo4j.io.pagecache.PageCursor;\n import org.neo4j.io.pagecache.PageSwapper;\n@@ -35,18 +34,19 @@ import org.neo4j.io.pagecache.tracing.cursor.PageCursorTracer;\n import org.neo4j.io.pagecache.tracing.cursor.context.VersionContext;\n import org.neo4j.io.pagecache.tracing.cursor.context.VersionContextSupplier;\n import org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil;\n-\n import static org.neo4j.io.pagecache.PagedFile.PF_EAGER_FLUSH;\n+\n import static org.neo4j.io.pagecache.PagedFile.PF_NO_FAULT;\n+\n import static org.neo4j.io.pagecache.PagedFile.PF_SHARED_WRITE_LOCK;\n+\n import static org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.UNMAPPED_TTE;\n+\n import static org.neo4j.util.FeatureToggles.flag;\n \n abstract class MuninnPageCursor extends PageCursor\n {\n-    private static final boolean usePreciseCursorErrorStackTraces =\n-            flag( MuninnPageCursor.class, \"usePreciseCursorErrorStackTraces\", false );\n-\n+    private static final boolean usePreciseCursorErrorStackTraces = flag( MuninnPageCursor.class, \"usePreciseCursorErrorStackTraces\", false );\n     private static final boolean boundsCheck = flag( MuninnPageCursor.class, \"boundsCheck\", true );\n \n     // Size of the respective primitive types in bytes.\n@@ -54,7 +54,6 @@ abstract class MuninnPageCursor extends PageCursor\n     private static final int SIZE_OF_SHORT = Short.BYTES;\n     private static final int SIZE_OF_INT = Integer.BYTES;\n     private static final int SIZE_OF_LONG = Long.BYTES;\n-\n     private final long victimPage;\n     private final PageCursorTracer tracer;\n     protected MuninnPagedFile pagedFile;\n@@ -100,12 +99,12 @@ abstract class MuninnPageCursor extends PageCursor\n         this.pf_flags = pf_flags;\n         this.eagerFlush = isFlagRaised( pf_flags, PF_EAGER_FLUSH );\n         this.noFault = isFlagRaised( pf_flags, PF_NO_FAULT );\n-        this.noGrow = noFault | isFlagRaised( pf_flags, PagedFile.PF_NO_GROW );\n+        this.noGrow = noFault| isFlagRaised( pf_flags, PagedFile.PF_NO_GROW );\n     }\n \n     private boolean isFlagRaised( int flagSet, int flag )\n     {\n-        return (flagSet & flag) == flag;\n+        return ( flagSet& flag) == flag;\n     }\n \n     @Override\n@@ -132,6 +131,7 @@ abstract class MuninnPageCursor extends PageCursor\n             verifyContext();\n             return true;\n         }\n+\n         nextPageId = pageId;\n         return next();\n     }\n@@ -144,6 +144,7 @@ abstract class MuninnPageCursor extends PageCursor\n         {\n             return;\n         }\n+\n         if ( isPotentiallyReadingDirtyData( lastClosedTransactionId ) )\n         {\n             versionContext.markAsDirty();\n@@ -158,10 +159,10 @@ abstract class MuninnPageCursor extends PageCursor\n      * @param lastClosedTransactionId last closed transaction id\n      * @return true in case if we reading potentially dirty data for requested lastClosedTransactionId.\n      */\n+\n     private boolean isPotentiallyReadingDirtyData( long lastClosedTransactionId )\n     {\n-        return pagedFile.getLastModifiedTxId( pinnedPageRef ) > lastClosedTransactionId ||\n-                pagedFile.getHighestEvictedTransactionId() > lastClosedTransactionId;\n+        return pagedFile.getLastModifiedTxId( pinnedPageRef ) > lastClosedTransactionId|| pagedFile.getHighestEvictedTransactionId() > lastClosedTransactionId;\n     }\n \n     @Override\n@@ -171,12 +172,13 @@ abstract class MuninnPageCursor extends PageCursor\n         {\n             return; // already closed\n         }\n+\n         closeLinks( this );\n     }\n \n     private void closeLinks( MuninnPageCursor cursor )\n     {\n-        while ( cursor != null && cursor.pagedFile != null )\n+        while( cursor != null&& cursor.pagedFile != null )\n         {\n             cursor.unpinCurrentPage();\n             // We null out the pagedFile field to allow it and its (potentially big) translation table to be garbage\n@@ -204,6 +206,7 @@ abstract class MuninnPageCursor extends PageCursor\n             // This cursor has been closed\n             throw new IllegalStateException( \"Cannot open linked cursor on closed page cursor\" );\n         }\n+\n         if ( linkedCursor != null )\n         {\n             linkedCursor.initialise( pf, pageId, pf_flags );\n@@ -214,12 +217,14 @@ abstract class MuninnPageCursor extends PageCursor\n             linkedCursor = (MuninnPageCursor) pf.io( pageId, pf_flags );\n             linkedCursor.isLinkedCursor = true;\n         }\n+\n         return linkedCursor;\n     }\n \n     /**\n      * Must be called by {@link #unpinCurrentPage()}.\n      */\n+\n     void clearPageCursorState()\n     {\n         // We don't need to clear the pointer field, because setting the page size to 0 will make all future accesses\n@@ -261,6 +266,7 @@ abstract class MuninnPageCursor extends PageCursor\n      * @param writeLock 'true' if we will be taking a write lock on the page as part of the pin.\n      * @throws IOException if anything goes wrong with the pin, most likely during a page fault.\n      */\n+\n     protected void pin( long filePageId, boolean writeLock ) throws IOException\n     {\n         pinEvent = tracer.beginPin( writeLock, filePageId, swapper );\n@@ -273,7 +279,8 @@ abstract class MuninnPageCursor extends PageCursor\n         {\n             tt = expandTranslationTableCapacity( chunkId );\n         }\n-        int[] chunk = tt[chunkId];\n+\n+        int[] chunk = tt[ chunkId];\n \n         // Now, if the reference in the chunk slot is a latch, we wait on it and look up again (in a loop, since the\n         // page might get evicted right after the page fault completes). If we find a page, we lock it and check its\n@@ -292,12 +299,13 @@ abstract class MuninnPageCursor extends PageCursor\n                 // item and try again, as the eviction thread would have set the chunk array slot to null.\n                 long pageRef = pagedFile.deref( mappedPageId );\n                 boolean locked = tryLockPage( pageRef );\n-                if ( locked & pagedFile.isBoundTo( pageRef, swapperId, filePageId ) )\n+                if ( locked& pagedFile.isBoundTo( pageRef, swapperId, filePageId ) )\n                 {\n                     pinCursorToPage( pageRef, filePageId, swapper );\n                     pinEvent.hit();\n                     return;\n                 }\n+\n                 if ( locked )\n                 {\n                     unlockPage( pageRef );\n@@ -327,6 +335,7 @@ abstract class MuninnPageCursor extends PageCursor\n             return true;\n         }\n         // Looks like there's no mapping, so we'd like to do a page fault.\n+\n         LatchMap.Latch latch = pagedFile.pageFaultLatches.takeOrAwaitLatch( filePageId );\n         if ( latch != null )\n         {\n@@ -343,17 +352,17 @@ abstract class MuninnPageCursor extends PageCursor\n             }\n             // Oops, looks like we raced with another page fault on this file page.\n             // Let's release our latch and retry the pin.\n+\n             latch.release();\n         }\n         // We found a latch, so someone else is already doing a page fault for this page.\n         // The `takeOrAwaitLatch` already waited for this latch to be released on our behalf,\n         // so now we just have to do another iteration of the loop to see what's in the translation table now.\n+\n         return false;\n     }\n \n-    private long pageFault(\n-            long filePageId, PageSwapper swapper, long chunkOffset, int[] chunk, LatchMap.Latch latch )\n-            throws IOException\n+    private long pageFault( long filePageId, PageSwapper swapper, long chunkOffset, int[] chunk, LatchMap.Latch latch ) throws IOException\n     {\n         // We are page faulting. This is a critical time, because we currently have the given latch in the chunk array\n         // slot that we are faulting into. We MUST make sure to release that latch, and remove it from the chunk, no\n@@ -380,6 +389,7 @@ abstract class MuninnPageCursor extends PageCursor\n             abortPageFault( throwable, chunk, chunkOffset, latch, faultEvent );\n             throw throwable;\n         }\n+\n         try\n         {\n             // Check if we're racing with unmapping. We have the page lock\n@@ -400,6 +410,7 @@ abstract class MuninnPageCursor extends PageCursor\n         }\n         // Put the page in the translation table before we undo the exclusive lock, as we could otherwise race with\n         // eviction, and the onEvict callback expects to find a MuninnPage object in the table.\n+\n         UnsafeUtil.putIntVolatile( chunk, chunkOffset, pagedFile.toId( pageRef ) );\n         // Once we page has been published to the translation table, we can convert our exclusive lock to whatever we\n         // need for the page cursor.\n@@ -409,9 +420,7 @@ abstract class MuninnPageCursor extends PageCursor\n         return pageRef;\n     }\n \n-    private void abortPageFault( Throwable throwable, int[] chunk, long chunkOffset,\n-                                 LatchMap.Latch latch,\n-                                 PageFaultEvent faultEvent )\n+    private void abortPageFault( Throwable throwable, int[] chunk, long chunkOffset, LatchMap.Latch latch, PageFaultEvent faultEvent )\n     {\n         UnsafeUtil.putIntVolatile( chunk, chunkOffset, UNMAPPED_TTE );\n         latch.release();\n@@ -424,16 +433,20 @@ abstract class MuninnPageCursor extends PageCursor\n         return pagedFile.getLastPageId();\n     }\n \n-    protected abstract void unpinCurrentPage();\n+    protected abstract void unpinCurrentPage()\n+    ;\n \n-    protected abstract void convertPageFaultLock( long pageRef );\n+    protected abstract void convertPageFaultLock( long pageRef )\n+    ;\n \n-    protected abstract void pinCursorToPage( long pageRef, long filePageId, PageSwapper swapper )\n-            throws FileIsNotMappedException;\n+    protected abstract void pinCursorToPage( long pageRef, long filePageId, PageSwapper swapper ) throws FileIsNotMappedException\n+    ;\n \n-    protected abstract boolean tryLockPage( long pageRef );\n+    protected abstract boolean tryLockPage( long pageRef )\n+    ;\n \n-    protected abstract void unlockPage( long pageRef );\n+    protected abstract void unlockPage( long pageRef )\n+    ;\n \n     // --- IO methods:\n \n@@ -444,13 +457,14 @@ abstract class MuninnPageCursor extends PageCursor\n      * truncated to point within the page. In this case, an overflow has happened and the {@link #outOfBounds}\n      * flag will be raised.\n      */\n+\n     private long getBoundedPointer( int offset, int size )\n     {\n         long p = pointer;\n         long can = p + offset;\n         if ( boundsCheck )\n         {\n-            if ( can + size > p + pageSize || can < p )\n+            if ( can + size > p + pageSize|| can < p )\n             {\n                 outOfBounds = true;\n                 // Return the victim page when we are out of bounds, since at this point we can't tell if the pointer\n@@ -458,6 +472,7 @@ abstract class MuninnPageCursor extends PageCursor\n                 return victimPage;\n             }\n         }\n+\n         return can;\n     }\n \n@@ -467,6 +482,7 @@ abstract class MuninnPageCursor extends PageCursor\n      * This works just like {@link #getBoundedPointer(int, int)}, except in terms of the current {@link #offset}.\n      * This version is faster when applicable, because it can ignore the <em>page underflow</em> case.\n      */\n+\n     private long nextBoundedPointer( int size )\n     {\n         int offset = this.offset;\n@@ -481,6 +497,7 @@ abstract class MuninnPageCursor extends PageCursor\n                 return victimPage;\n             }\n         }\n+\n         return can;\n     }\n \n@@ -537,7 +554,7 @@ abstract class MuninnPageCursor extends PageCursor\n         if ( UnsafeUtil.allowUnalignedMemoryAccess )\n         {\n             value = UnsafeUtil.getLong( p );\n-            if ( !UnsafeUtil.storeByteOrderIsNative )\n+            if ( ! UnsafeUtil.storeByteOrderIsNative )\n             {\n                 value = Long.reverseBytes( value );\n             }\n@@ -546,20 +563,21 @@ abstract class MuninnPageCursor extends PageCursor\n         {\n             value = getLongBigEndian( p );\n         }\n+\n         return value;\n     }\n \n     private long getLongBigEndian( long p )\n     {\n-        long a = UnsafeUtil.getByte( p     ) & 0xFF;\n-        long b = UnsafeUtil.getByte( p + 1 ) & 0xFF;\n-        long c = UnsafeUtil.getByte( p + 2 ) & 0xFF;\n-        long d = UnsafeUtil.getByte( p + 3 ) & 0xFF;\n-        long e = UnsafeUtil.getByte( p + 4 ) & 0xFF;\n-        long f = UnsafeUtil.getByte( p + 5 ) & 0xFF;\n-        long g = UnsafeUtil.getByte( p + 6 ) & 0xFF;\n-        long h = UnsafeUtil.getByte( p + 7 ) & 0xFF;\n-        return (a << 56) | (b << 48) | (c << 40) | (d << 32) | (e << 24) | (f << 16) | (g << 8) | h;\n+        long a = UnsafeUtil.getByte( p )& 0xFF;\n+        long b = UnsafeUtil.getByte( p + 1 )& 0xFF;\n+        long c = UnsafeUtil.getByte( p + 2 )& 0xFF;\n+        long d = UnsafeUtil.getByte( p + 3 )& 0xFF;\n+        long e = UnsafeUtil.getByte( p + 4 )& 0xFF;\n+        long f = UnsafeUtil.getByte( p + 5 )& 0xFF;\n+        long g = UnsafeUtil.getByte( p + 6 )& 0xFF;\n+        long h = UnsafeUtil.getByte( p + 7 )& 0xFF;\n+        return ( a<<56)| ( b<<48)| ( c<<40)| ( d<<32)| ( e<<24)| ( f<<16)| ( g<<8)| h;\n     }\n \n     @Override\n@@ -591,13 +609,13 @@ abstract class MuninnPageCursor extends PageCursor\n \n     private void putLongBigEndian( long value, long p )\n     {\n-        UnsafeUtil.putByte( p    , (byte)( value >> 56 ) );\n-        UnsafeUtil.putByte( p + 1, (byte)( value >> 48 ) );\n-        UnsafeUtil.putByte( p + 2, (byte)( value >> 40 ) );\n-        UnsafeUtil.putByte( p + 3, (byte)( value >> 32 ) );\n-        UnsafeUtil.putByte( p + 4, (byte)( value >> 24 ) );\n-        UnsafeUtil.putByte( p + 5, (byte)( value >> 16 ) );\n-        UnsafeUtil.putByte( p + 6, (byte)( value >> 8  ) );\n+        UnsafeUtil.putByte( p, (byte) ( value>> 56) );\n+        UnsafeUtil.putByte( p + 1, (byte) ( value>> 48) );\n+        UnsafeUtil.putByte( p + 2, (byte) ( value>> 40) );\n+        UnsafeUtil.putByte( p + 3, (byte) ( value>> 32) );\n+        UnsafeUtil.putByte( p + 4, (byte) ( value>> 24) );\n+        UnsafeUtil.putByte( p + 5, (byte) ( value>> 16) );\n+        UnsafeUtil.putByte( p + 6, (byte) ( value>> 8) );\n         UnsafeUtil.putByte( p + 7, (byte) value );\n     }\n \n@@ -624,16 +642,17 @@ abstract class MuninnPageCursor extends PageCursor\n             int x = UnsafeUtil.getInt( p );\n             return UnsafeUtil.storeByteOrderIsNative ? x : Integer.reverseBytes( x );\n         }\n+\n         return getIntBigEndian( p );\n     }\n \n     private int getIntBigEndian( long p )\n     {\n-        int a = UnsafeUtil.getByte( p     ) & 0xFF;\n-        int b = UnsafeUtil.getByte( p + 1 ) & 0xFF;\n-        int c = UnsafeUtil.getByte( p + 2 ) & 0xFF;\n-        int d = UnsafeUtil.getByte( p + 3 ) & 0xFF;\n-        return (a << 24) | (b << 16) | (c << 8) | d;\n+        int a = UnsafeUtil.getByte( p )& 0xFF;\n+        int b = UnsafeUtil.getByte( p + 1 )& 0xFF;\n+        int c = UnsafeUtil.getByte( p + 2 )& 0xFF;\n+        int d = UnsafeUtil.getByte( p + 3 )& 0xFF;\n+        return ( a<<24)| ( b<<16)| ( c<<8)| d;\n     }\n \n     @Override\n@@ -665,9 +684,9 @@ abstract class MuninnPageCursor extends PageCursor\n \n     private void putIntBigEndian( int value, long p )\n     {\n-        UnsafeUtil.putByte( p    , (byte)( value >> 24 ) );\n-        UnsafeUtil.putByte( p + 1, (byte)( value >> 16 ) );\n-        UnsafeUtil.putByte( p + 2, (byte)( value >> 8  ) );\n+        UnsafeUtil.putByte( p, (byte) ( value>> 24) );\n+        UnsafeUtil.putByte( p + 1, (byte) ( value>> 16) );\n+        UnsafeUtil.putByte( p + 2, (byte) ( value>> 8) );\n         UnsafeUtil.putByte( p + 3, (byte) value );\n     }\n \n@@ -681,13 +700,14 @@ abstract class MuninnPageCursor extends PageCursor\n     public void getBytes( byte[] data, int arrayOffset, int length )\n     {\n         long p = getBoundedPointer( offset, length );\n-        if ( !outOfBounds )\n+        if ( ! outOfBounds )\n         {\n             for ( int i = 0; i < length; i++ )\n             {\n                 data[arrayOffset + i] = UnsafeUtil.getByte( p + i );\n             }\n         }\n+\n         offset += length;\n     }\n \n@@ -701,14 +721,15 @@ abstract class MuninnPageCursor extends PageCursor\n     public void putBytes( byte[] data, int arrayOffset, int length )\n     {\n         long p = getBoundedPointer( offset, length );\n-        if ( !outOfBounds )\n+        if ( ! outOfBounds )\n         {\n             for ( int i = 0; i < length; i++ )\n             {\n-                byte b = data[arrayOffset + i];\n+                byte b = data[ arrayOffset + i];\n                 UnsafeUtil.putByte( p + i, b );\n             }\n         }\n+\n         offset += length;\n     }\n \n@@ -716,10 +737,11 @@ abstract class MuninnPageCursor extends PageCursor\n     public void putBytes( int bytes, byte value )\n     {\n         long p = getBoundedPointer( offset, bytes );\n-        if ( !outOfBounds )\n+        if ( ! outOfBounds )\n         {\n             UnsafeUtil.setMemory( p, bytes, value );\n         }\n+\n         offset += bytes;\n     }\n \n@@ -746,14 +768,15 @@ abstract class MuninnPageCursor extends PageCursor\n             short x = UnsafeUtil.getShort( p );\n             return UnsafeUtil.storeByteOrderIsNative ? x : Short.reverseBytes( x );\n         }\n+\n         return getShortBigEndian( p );\n     }\n \n     private short getShortBigEndian( long p )\n     {\n-        short a = (short) (UnsafeUtil.getByte( p     ) & 0xFF);\n-        short b = (short) (UnsafeUtil.getByte( p + 1 ) & 0xFF);\n-        return (short) ((a << 8) | b);\n+        short a = (short) ( UnsafeUtil.getByte( p )& 0xFF);\n+        short b = (short) ( UnsafeUtil.getByte( p + 1 )& 0xFF);\n+        return (short) (( a<<8)| b);\n     }\n \n     @Override\n@@ -785,7 +808,7 @@ abstract class MuninnPageCursor extends PageCursor\n \n     private void putShortBigEndian( short value, long p )\n     {\n-        UnsafeUtil.putByte( p    , (byte)( value >> 8 ) );\n+        UnsafeUtil.putByte( p, (byte) ( value>> 8) );\n         UnsafeUtil.putByte( p + 1, (byte) value );\n     }\n \n@@ -798,11 +821,8 @@ abstract class MuninnPageCursor extends PageCursor\n         {\n             throw new IllegalArgumentException( \"Target cursor must be writable\" );\n         }\n-        if ( sourceOffset >= 0\n-             & targetOffset >= 0\n-             & sourceOffset < sourcePageSize\n-             & targetOffset < targetPageSize\n-             & lengthInBytes >= 0 )\n+\n+        if ( sourceOffset >= 0& targetOffset >= 0& sourceOffset < sourcePageSize& targetOffset < targetPageSize& lengthInBytes >= 0 )\n         {\n             MuninnPageCursor cursor = (MuninnPageCursor) targetCursor;\n             int remainingSource = sourcePageSize - sourceOffset;\n@@ -811,6 +831,7 @@ abstract class MuninnPageCursor extends PageCursor\n             UnsafeUtil.copyMemory( pointer + sourceOffset, cursor.pointer + targetOffset, bytes );\n             return bytes;\n         }\n+\n         outOfBounds = true;\n         return 0;\n     }\n@@ -818,7 +839,7 @@ abstract class MuninnPageCursor extends PageCursor\n     @Override\n     public int copyTo( int sourceOffset, ByteBuffer buf )\n     {\n-        if ( buf.getClass() == UnsafeUtil.directByteBufferClass && buf.isDirect() && !buf.isReadOnly() )\n+        if ( buf.getClass() == UnsafeUtil.directByteBufferClass&& buf.isDirect()&& ! buf.isReadOnly() )\n         {\n             // We expect that the mutable direct byte buffer is implemented with a class that is distinct from the\n             // non-mutable (read-only) and non-direct (on-heap) byte buffers. By comparing class object instances,\n@@ -828,6 +849,7 @@ abstract class MuninnPageCursor extends PageCursor\n             // calls to the byte-wise-copy fallback.\n             return copyToDirectByteBuffer( sourceOffset, buf );\n         }\n+\n         return copyToByteBufferByteWise( sourceOffset, buf );\n     }\n \n@@ -836,7 +858,7 @@ abstract class MuninnPageCursor extends PageCursor\n         int pos = buf.position();\n         int bytesToCopy = Math.min( buf.limit() - pos, pageSize - sourceOffset );\n         long source = pointer + sourceOffset;\n-        if ( sourceOffset < getCurrentPageSize() & sourceOffset >= 0 )\n+        if ( sourceOffset < getCurrentPageSize()& sourceOffset >= 0 )\n         {\n             long target = UnsafeUtil.getDirectByteBufferAddress( buf );\n             UnsafeUtil.copyMemory( source, target + pos, bytesToCopy );\n@@ -846,6 +868,7 @@ abstract class MuninnPageCursor extends PageCursor\n         {\n             outOfBounds = true;\n         }\n+\n         return bytesToCopy;\n     }\n \n@@ -857,6 +880,7 @@ abstract class MuninnPageCursor extends PageCursor\n             byte b = getByte( sourceOffset + i );\n             buf.put( b );\n         }\n+\n         return bytesToCopy;\n     }\n \n@@ -866,11 +890,7 @@ abstract class MuninnPageCursor extends PageCursor\n         int sourceEnd = sourceStart + length;\n         int targetStart = sourceStart + shift;\n         int targetEnd = sourceStart + length + shift;\n-        if ( sourceStart < 0\n-                | sourceEnd > filePageSize\n-                | targetStart < 0\n-                | targetEnd > filePageSize\n-                | length < 0 )\n+        if ( sourceStart < 0| sourceEnd > filePageSize| targetStart < 0| targetEnd > filePageSize| length < 0 )\n         {\n             outOfBounds = true;\n             return;\n@@ -888,8 +908,8 @@ abstract class MuninnPageCursor extends PageCursor\n \n     private void unsafeShiftLeft( int fromPos, int toPos, int length, int shift )\n     {\n-        int longSteps = length >> 3;\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess && longSteps > 0 )\n+        int longSteps = length>> 3;\n+        if ( UnsafeUtil.allowUnalignedMemoryAccess&& longSteps > 0 )\n         {\n             for ( int i = 0; i < longSteps; i++ )\n             {\n@@ -899,7 +919,7 @@ abstract class MuninnPageCursor extends PageCursor\n             }\n         }\n \n-        while ( fromPos < toPos )\n+        while( fromPos < toPos)\n         {\n             byte b = UnsafeUtil.getByte( pointer + fromPos );\n             UnsafeUtil.putByte( pointer + fromPos + shift, b );\n@@ -909,8 +929,8 @@ abstract class MuninnPageCursor extends PageCursor\n \n     private void unsafeShiftRight( int fromPos, int toPos, int length, int shift )\n     {\n-        int longSteps = length >> 3;\n-        if ( UnsafeUtil.allowUnalignedMemoryAccess && longSteps > 0 )\n+        int longSteps = length>> 3;\n+        if ( UnsafeUtil.allowUnalignedMemoryAccess&& longSteps > 0 )\n         {\n             for ( int i = 0; i < longSteps; i++ )\n             {\n@@ -920,7 +940,7 @@ abstract class MuninnPageCursor extends PageCursor\n             }\n         }\n \n-        while ( fromPos > toPos )\n+        while( fromPos > toPos)\n         {\n             fromPos--;\n             byte b = UnsafeUtil.getByte( pointer + fromPos );\n@@ -932,7 +952,7 @@ abstract class MuninnPageCursor extends PageCursor\n     public void setOffset( int offset )\n     {\n         this.offset = offset;\n-        if ( offset < 0 | offset > filePageSize )\n+        if ( offset < 0| offset > filePageSize )\n         {\n             this.offset = 0;\n             outOfBounds = true;\n@@ -956,7 +976,8 @@ abstract class MuninnPageCursor extends PageCursor\n             cursor.outOfBounds = false;\n             cursor = cursor.linkedCursor;\n         }\n-        while ( cursor != null );\n+\n+        while( cursor != null );\n         return result;\n     }\n \n@@ -979,9 +1000,11 @@ abstract class MuninnPageCursor extends PageCursor\n                     throw new CursorException( (String) error );\n                 }\n             }\n+\n             cursor = cursor.linkedCursor;\n         }\n-        while ( cursor != null );\n+\n+        while( cursor != null );\n     }\n \n     @Override\n@@ -992,7 +1015,7 @@ abstract class MuninnPageCursor extends PageCursor\n \n     private void clearCursorError( MuninnPageCursor cursor )\n     {\n-        while ( cursor != null )\n+        while( cursor != null )\n         {\n             cursor.cursorException = null;\n             cursor = cursor.linkedCursor;\n@@ -1039,4 +1062,4 @@ abstract class MuninnPageCursor extends PageCursor\n     {\n         return isFlagRaised( pf_flags, PF_SHARED_WRITE_LOCK );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 122
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}