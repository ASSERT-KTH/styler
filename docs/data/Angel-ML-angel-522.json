{
    "project_name": "Angel-ML-angel",
    "error_id": "522",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/522/ByteBufUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/522/ByteBufUtils.java\nindex 8e23b0d274a..50ab8abc1ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/522/ByteBufUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/522/ByteBufUtils.java\n@@ -83,9 +83,8 @@ public class ByteBufUtils {\n   public static ByteBuf allocResultBuf(int size, boolean useDirectorBuffer) {\r\n     ByteBuf buf;\r\n     if (size > 16 * 1024 * 1024) {\r\n-      LOG.warn(\r\n-          \"========================================Warning, allocate big buffer with size \" + size);\r\n-    }\r\n+      LOG.warn(\"========================================Warning, allocate big buffer with size \" + size);\n+  }\r\n     buf = ByteBufUtils.newByteBuf(size, useDirectorBuffer);\r\n     return buf;\r\n   }\r\n@@ -98,10 +97,8 @@ public class ByteBufUtils {\n     ResponseData data = response.getData();\r\n \r\n     // If is stream response, just return bytebuf\r\n-    if (data != null\r\n-        && (data instanceof IStreamResponse)\r\n-        && (((IStreamResponse) data).getOutputBuffer() != null)) {\r\n-      return ((IStreamResponse) data).getOutputBuffer();\r\n+    if (data != null && (data instanceof IStreamResponse) && (((IStreamResponse) data).getOutputBuffer() != null)) {\n+  return ((IStreamResponse) data).getOutputBuffer();\r\n     }\r\n \r\n     ByteBuf buf = null;\r\n@@ -130,4 +127,4 @@ public class ByteBufUtils {\n     return buf;\r\n   }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/522/ByteBufUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/522/ByteBufUtils.java\nindex 8e23b0d274a..05a4efb1aa1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/522/ByteBufUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/522/ByteBufUtils.java\n@@ -15,119 +15,116 @@\n  *\r\n  */\r\n \r\n-package com.tencent.angel.utils;\r\n-\r\n-import com.tencent.angel.ps.server.data.response.IStreamResponse;\r\n-import com.tencent.angel.ps.server.data.response.Response;\r\n-import com.tencent.angel.ps.server.data.response.ResponseData;\r\n-import com.tencent.angel.ps.server.data.response.ResponseType;\r\n-import io.netty.buffer.ByteBuf;\r\n-import io.netty.buffer.ByteBufAllocator;\r\n-import io.netty.buffer.PooledByteBufAllocator;\r\n-import io.netty.buffer.UnpooledByteBufAllocator;\r\n-import org.apache.commons.logging.Log;\r\n+package com.tencent.angel.utils;\n+\n+import com.tencent.angel.ps.server.data.response.IStreamResponse;\n+import com.tencent.angel.ps.server.data.response.Response;\n+import com.tencent.angel.ps.server.data.response.ResponseData;\n+import com.tencent.angel.ps.server.data.response.ResponseType;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\r\n \r\n /**\r\n  * Netty ByteBuf allocation utils.\r\n- */\r\n-public class ByteBufUtils {\r\n-\r\n-  private static final Log LOG = LogFactory.getLog(ByteBufUtils.class);\r\n-  private static volatile ByteBufAllocator allocator = null;\r\n-  public static volatile boolean useDirect = true;\r\n-  public static volatile boolean usePool = true;\r\n-\r\n-  private static ByteBufAllocator getBufferAllocator() {\r\n-    if (allocator == null) {\r\n-      if (usePool) {\r\n-        allocator = new PooledByteBufAllocator();\r\n-      } else {\r\n-        allocator = new UnpooledByteBufAllocator(true);\r\n-      }\r\n-    }\r\n-    return allocator;\r\n-  }\r\n-\r\n-  public static ByteBuf newHeapByteBuf(int estimizeSerilizeSize) {\r\n-    return getBufferAllocator().heapBuffer(estimizeSerilizeSize);\r\n-  }\r\n-\r\n-  public static ByteBuf newDirectByteBuf(int estimizeSerilizeSize) {\r\n-    return getBufferAllocator().directBuffer(estimizeSerilizeSize);\r\n-  }\r\n-\r\n-  public static ByteBuf newByteBuf(int estimizeSerilizeSize, boolean useDirect) {\r\n-    if (useDirect) {\r\n-      return newDirectByteBuf(estimizeSerilizeSize);\r\n-    } else {\r\n-      return newHeapByteBuf(estimizeSerilizeSize);\r\n-    }\r\n-  }\r\n-\r\n-  public static ByteBuf newByteBuf(int estimizeSerilizeSize) {\r\n-    if (useDirect) {\r\n-      return newDirectByteBuf(estimizeSerilizeSize);\r\n-    } else {\r\n-      return newHeapByteBuf(estimizeSerilizeSize);\r\n-    }\r\n-  }\r\n-\r\n+ */\n+\n+public class ByteBufUtils {\n+\n+  private static final Log LOG = LogFactory.getLog(ByteBufUtils.class);\n+  private static volatile ByteBufAllocator allocator = null;\n+\n+  public static volatile boolean useDirect = true;\n+\n+  public static volatile boolean usePool = true;\n+  private static ByteBufAllocator getBufferAllocator() {\n+    if (allocator == null) {\n+      if (usePool) {\n+        allocator = new PooledByteBufAllocator();\n+      } else {\n+        allocator = new UnpooledByteBufAllocator(true);\n+      }\n+    }\n+    return allocator;\n+  }\n+\n+  public static ByteBuf newHeapByteBuf(int estimizeSerilizeSize) {\n+    return getBufferAllocator().heapBuffer(estimizeSerilizeSize);\n+  }\n+\n+  public static ByteBuf newDirectByteBuf(int estimizeSerilizeSize) {\n+    return getBufferAllocator().directBuffer(estimizeSerilizeSize);\n+  }\n+\n+  public static ByteBuf newByteBuf(int estimizeSerilizeSize, boolean useDirect) {\n+    if (useDirect) {\n+      return newDirectByteBuf(estimizeSerilizeSize);\n+    } else {\n+      return newHeapByteBuf(estimizeSerilizeSize);\n+    }\n+  }\n+\n+  public static ByteBuf newByteBuf(int estimizeSerilizeSize) {\n+    if (useDirect) {\n+      return newDirectByteBuf(estimizeSerilizeSize);\n+    } else {\n+      return newHeapByteBuf(estimizeSerilizeSize);\n+    }\n+  }\n+\n   public static void releaseBuf(ByteBuf in) {\r\n-    // Release the input buffer\r\n-    if (in.refCnt() > 0) {\r\n-      in.release();\r\n-    }\r\n-  }\r\n-\r\n-  public static ByteBuf allocResultBuf(int size, boolean useDirectorBuffer) {\r\n-    ByteBuf buf;\r\n-    if (size > 16 * 1024 * 1024) {\r\n-      LOG.warn(\r\n-          \"========================================Warning, allocate big buffer with size \" + size);\r\n-    }\r\n-    buf = ByteBufUtils.newByteBuf(size, useDirectorBuffer);\r\n-    return buf;\r\n-  }\r\n-\r\n-  public static ByteBuf allocResultBuf(Response response, boolean useDirect) {\r\n-    return allocResultBuf(response.bufferLen(), useDirect);\r\n-  }\r\n-\r\n-  public static ByteBuf serializeResponse(Response response, boolean useDirectorBuffer) {\r\n+    // Release the input buffer\n+    if (in.refCnt() > 0) {\n+      in.release();\n+    }\n+  }\n+\n+  public static ByteBuf allocResultBuf(int size, boolean useDirectorBuffer) {\n+    ByteBuf buf;\n+    if (size > 16 * 1024 * 1024) {\n+      LOG.warn(\"========================================Warning, allocate big buffer with size \" + size);\n+    }\n+    buf = ByteBufUtils.newByteBuf(size, useDirectorBuffer);\n+    return buf;\n+  }\n+\n+  public static ByteBuf allocResultBuf(Response response, boolean useDirect) {\n+    return allocResultBuf(response.bufferLen(), useDirect);\n+  }\n+\n+  public static ByteBuf serializeResponse(Response response, boolean useDirectorBuffer) {\n     ResponseData data = response.getData();\r\n \r\n-    // If is stream response, just return bytebuf\r\n-    if (data != null\r\n-        && (data instanceof IStreamResponse)\r\n-        && (((IStreamResponse) data).getOutputBuffer() != null)) {\r\n-      return ((IStreamResponse) data).getOutputBuffer();\r\n-    }\r\n-\r\n-    ByteBuf buf = null;\r\n-    try {\r\n-      buf = allocResultBuf(response, useDirectorBuffer);\r\n-      response.serialize(buf);\r\n-    } catch (Throwable x) {\r\n-      LOG.error(\"serialize response failed \", x);\r\n-      if (buf != null) {\r\n-        buf.release();\r\n-      }\r\n-\r\n+    // If is stream response, just return bytebuf\n+    if (data != null && (data instanceof IStreamResponse) && (((IStreamResponse) data).getOutputBuffer() != null)) {\n+      return ((IStreamResponse) data).getOutputBuffer();\n+    }\n+\n+    ByteBuf buf = null;\n+    try {\n+      buf = allocResultBuf(response, useDirectorBuffer);\n+      response.serialize(buf);\n+    } catch (Throwable x) {\n+      LOG.error(\"serialize response failed \", x);\n+      if (buf != null) {\n+        buf.release();\n+      }\n+\n       if (response.getResponseType() == ResponseType.SUCCESS) {\r\n-        // Reset the response and allocate buffer again\r\n-        response.setResponseType(ResponseType.SERVER_IS_BUSY);\r\n+        // Reset the response and allocate buffer again\n+        response.setResponseType(ResponseType.SERVER_IS_BUSY);\n         response.setDetail(\"can not serialize the response\");\r\n-        // Release response data\r\n-        response.setData(null);\r\n-\r\n-        buf = allocResultBuf(response, useDirectorBuffer);\r\n-        response.serialize(buf);\r\n-      } else {\r\n-        throw x;\r\n-      }\r\n-    }\r\n-    return buf;\r\n-  }\r\n-\r\n-}\r\n+        // Release response data\n+        response.setData(null);\n+        buf = allocResultBuf(response, useDirectorBuffer);\n+        response.serialize(buf);\n+      } else {\n+        throw x;\n+      }\n+    }\n+    return buf;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 109
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}