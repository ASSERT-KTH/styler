{
    "project_name": "DSC-SPIDAL-harp",
    "error_id": "24",
    "information": {
        "errors": [
            {
                "line": "3",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright 2013-2017 Indiana University\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "3",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/errored/1/24/AvgDistArrCombiner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/intellij/24/AvgDistArrCombiner.java\nindex c501a2dc242..3fb0fcba0aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/errored/1/24/AvgDistArrCombiner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/intellij/24/AvgDistArrCombiner.java\n@@ -1,6 +1,6 @@\n /*\n  * Copyright 2013-2017 Indiana University\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n@@ -21,27 +21,27 @@ import edu.iu.harp.partition.PartitionStatus;\n import edu.iu.harp.resource.DoubleArray;\n \n public class AvgDistArrCombiner\n-  extends PartitionCombiner<DoubleArray> {\n+    extends PartitionCombiner<DoubleArray> {\n \n-  @Override\n-  public PartitionStatus combine(\n-    DoubleArray curPar, DoubleArray newPar) {\n-    double[] doubles1 = curPar.get();\n-    int start1 = curPar.start();\n-    int size1 = curPar.size();\n-    double[] doubles2 = newPar.get();\n-    int start2 = newPar.start();\n-    int size2 = newPar.size();\n-    if (size1 != 3 || size2 != 3 || start1 != 0\n-      || start2 != 0) {\n-      return PartitionStatus.COMBINE_FAILED;\n-    }\n-    for (int i = 0; i < 2; i++) {\n-      doubles1[i] = doubles1[i] + doubles2[i];\n-    }\n-    if (doubles1[2] < doubles2[2]) {\n-      doubles1[2] = doubles2[2];\n+    @Override\n+    public PartitionStatus combine(\n+        DoubleArray curPar, DoubleArray newPar) {\n+        double[] doubles1 = curPar.get();\n+        int start1 = curPar.start();\n+        int size1 = curPar.size();\n+        double[] doubles2 = newPar.get();\n+        int start2 = newPar.start();\n+        int size2 = newPar.size();\n+        if (size1 != 3 || size2 != 3 || start1 != 0\n+            || start2 != 0) {\n+            return PartitionStatus.COMBINE_FAILED;\n+        }\n+        for (int i = 0; i < 2; i++) {\n+            doubles1[i] = doubles1[i] + doubles2[i];\n+        }\n+        if (doubles1[2] < doubles2[2]) {\n+            doubles1[2] = doubles2[2];\n+        }\n+        return PartitionStatus.COMBINED;\n     }\n-    return PartitionStatus.COMBINED;\n-  }\n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "3",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/errored/1/24/AvgDistArrCombiner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/codebuff/24/AvgDistArrCombiner.java\nindex c501a2dc242..dbf19cf5541 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/errored/1/24/AvgDistArrCombiner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/codebuff/24/AvgDistArrCombiner.java\n@@ -20,28 +20,29 @@ import edu.iu.harp.partition.PartitionCombiner;\n import edu.iu.harp.partition.PartitionStatus;\n import edu.iu.harp.resource.DoubleArray;\n \n-public class AvgDistArrCombiner\n-  extends PartitionCombiner<DoubleArray> {\n+\n+public class AvgDistArrCombiner extends\n+  PartitionCombiner<DoubleArray> {\n \n   @Override\n-  public PartitionStatus combine(\n-    DoubleArray curPar, DoubleArray newPar) {\n-    double[] doubles1 = curPar.get();\n-    int start1 = curPar.start();\n-    int size1 = curPar.size();\n-    double[] doubles2 = newPar.get();\n-    int start2 = newPar.start();\n-    int size2 = newPar.size();\n-    if (size1 != 3 || size2 != 3 || start1 != 0\n-      || start2 != 0) {\n-      return PartitionStatus.COMBINE_FAILED;\n-    }\n-    for (int i = 0; i < 2; i++) {\n-      doubles1[i] = doubles1[i] + doubles2[i];\n-    }\n-    if (doubles1[2] < doubles2[2]) {\n-      doubles1[2] = doubles2[2];\n-    }\n-    return PartitionStatus.COMBINED;\n+  public PartitionStatus combine(DoubleArray curPar,\n+                                 DoubleArray newPar) {\n+                                 double[] doubles1 = curPar.get();\n+                                 int start1 = curPar.start();\n+                                 int size1 = curPar.size();\n+                                 double[] doubles2 = newPar.get();\n+                                 int start2 = newPar.start();\n+                                 int size2 = newPar.size();\n+                                 if (size1 != 3 || size2 != 3 || start1 != 0 || start2 != 0) {\n+                                   return PartitionStatus.COMBINE_FAILED;\n+                                 }\n+\n+                                 for (int i = 0; i < 2; i++) {\n+                                   doubles1[i] = doubles1[i] + doubles2[i];\n+                                 }\n+                                 if (doubles1[2] < doubles2[2]) {\n+                                   doubles1[2] = doubles2[2];\n+                                 }\n+                                 return PartitionStatus.COMBINED;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "3",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "3",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}