{
    "project_name": "intuit-Tank",
    "error_id": "129",
    "information": {
        "errors": [
            {
                "line": "42",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 135).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     */\n    public synchronized List<UserDetail> getSnapshot() {\n        return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n    }\n\n    /**",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "column": "9",
                    "severity": "warning",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "43",
                    "column": "24",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/129/UserTracker.java\nindex 7527dd92272..1a865356c03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/129/UserTracker.java\n@@ -39,9 +39,18 @@ public class UserTracker implements Serializable {\n      * @return\n      */\n     public synchronized List<UserDetail> getSnapshot() {\n-        return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n+        return userMap .entrySet().stream().map(entry->newUserDetail\n+        (entry.getKey(),entry.getValue())\n+\n+        )\n+\n+        .collect(Collectors.toList());\n     }\n \n+    /**\n+     * \n+     * @param script\n+     */\n     /**\n      * \n      * @param script\n",
            "diff_size": 10
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/129/UserTracker.java\nindex 7527dd92272..db6c1d81d88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/129/UserTracker.java\n@@ -22,49 +22,45 @@ import java.util.stream.Collectors;\n import com.intuit.tank.api.model.v1.cloud.UserDetail;\n \n /**\n- * \n  * UserTracker\n- * \n+ *\n  * @author dangleton\n- * \n  */\n public class UserTracker implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n+  private static final long serialVersionUID = 1L;\n \n-    private Map<String, Integer> userMap = new HashMap<String, Integer>();\n+  private Map<String, Integer> userMap = new HashMap<String, Integer>();\n \n-    /**\n-     * \n-     * @return\n-     */\n-    public synchronized List<UserDetail> getSnapshot() {\n-        return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n-    }\n+  /**\n+   * @return\n+   */\n+  public synchronized List<UserDetail> getSnapshot() {\n+    return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue()))\n+      .collect(Collectors.toList());\n+  }\n \n-    /**\n-     * \n-     * @param script\n-     */\n-    public synchronized void add(String script) {\n-        Integer i = userMap.get(script);\n-        if (i == null) {\n-            userMap.put(script, 1);\n-        } else {\n-            userMap.put(script, i + 1);\n-        }\n+  /**\n+   * @param script\n+   */\n+  public synchronized void add(String script) {\n+    Integer i = userMap.get(script);\n+    if (i == null) {\n+      userMap.put(script, 1);\n+    } else {\n+      userMap.put(script, i + 1);\n     }\n+  }\n \n-    /**\n-     * \n-     * @param script\n-     */\n-    public synchronized void remove(String script) {\n-        Integer i = userMap.get(script);\n-        if (i != null) {\n-            if (i > 0) {\n-                userMap.put(script, i - 1);\n-            }\n-        }\n+  /**\n+   * @param script\n+   */\n+  public synchronized void remove(String script) {\n+    Integer i = userMap.get(script);\n+    if (i != null) {\n+      if (i > 0) {\n+        userMap.put(script, i - 1);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/129/UserTracker.java\nindex 7527dd92272..67d9207c9f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/129/UserTracker.java\n@@ -67,4 +67,4 @@ public class UserTracker implements Serializable {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/129/UserTracker.java\nindex 7527dd92272..396973f9610 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/129/UserTracker.java\n@@ -13,12 +13,13 @@ package com.intuit.tank.harness;\n  * #L%\n  */\n \n+\n+\n import java.io.Serializable;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-\n import com.intuit.tank.api.model.v1.cloud.UserDetail;\n \n /**\n@@ -28,24 +29,29 @@ import com.intuit.tank.api.model.v1.cloud.UserDetail;\n  * @author dangleton\n  * \n  */\n+\n+\n public class UserTracker implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n-\n     private Map<String, Integer> userMap = new HashMap<String, Integer>();\n \n     /**\n      * \n      * @return\n      */\n+\n+\n     public synchronized List<UserDetail> getSnapshot() {\n-        return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n+        return userMap.entrySet().stream().map(entry-> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n     }\n \n     /**\n      * \n      * @param script\n      */\n+\n+\n     public synchronized void add(String script) {\n         Integer i = userMap.get(script);\n         if (i == null) {\n@@ -59,6 +65,8 @@ public class UserTracker implements Serializable {\n      * \n      * @param script\n      */\n+\n+\n     public synchronized void remove(String script) {\n         Integer i = userMap.get(script);\n         if (i != null) {\n@@ -67,4 +75,5 @@ public class UserTracker implements Serializable {\n             }\n         }\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "column": "71",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "42",
                    "column": "86",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "42",
                    "column": "103",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "42",
                    "column": "135",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/129/UserTracker.java\nindex 7527dd92272..01f5f564799 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/129/UserTracker.java\n@@ -39,10 +39,7 @@ public class UserTracker implements Serializable {\n      * @return\n      */\n     public synchronized List<UserDetail> getSnapshot() {\n-        return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n-    }\n-\n-    /**\n+        return userMap.entrySet().stream().map(entry ->new UserDetail (entry.getKey(),entry .getValue ())).collect(Collectors .toList ());}/**\n      * \n      * @param script\n      */\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "column": "9",
                    "severity": "warning",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "43",
                    "column": "24",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/129/UserTracker.java\nindex 7527dd92272..1a865356c03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/129/UserTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/129/UserTracker.java\n@@ -39,9 +39,18 @@ public class UserTracker implements Serializable {\n      * @return\n      */\n     public synchronized List<UserDetail> getSnapshot() {\n-        return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n+        return userMap .entrySet().stream().map(entry->newUserDetail\n+        (entry.getKey(),entry.getValue())\n+\n+        )\n+\n+        .collect(Collectors.toList());\n     }\n \n+    /**\n+     * \n+     * @param script\n+     */\n     /**\n      * \n      * @param script\n",
            "diff_size": 10
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}