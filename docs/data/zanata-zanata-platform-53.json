{
    "project_name": "zanata-zanata-platform",
    "error_id": "53",
    "information": {
        "errors": [
            {
                "line": "307",
                "column": "39",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    private String getExcludeSearchTerm(@Nonnull String term) {\n        if (isExcludeSearchTerm(term)) {\n            return term.substring(1); // remove '-' sign in front\n        }\n        return term;\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/53/FilterConstraintToQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/53/FilterConstraintToQuery.java\nindex 7a81aef3c4e..0619ceac3d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/53/FilterConstraintToQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/53/FilterConstraintToQuery.java\n@@ -304,8 +304,9 @@ public class FilterConstraintToQuery {\n \n     private String getExcludeSearchTerm(@Nonnull String term) {\n         if (isExcludeSearchTerm(term)) {\n-            return term.substring(1); // remove '-' sign in front\n-        }\n+            return term.substring(1);\n+            // remove '-' sign in front\n+         }\n         return term;\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "307",
                    "column": "33",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/53/FilterConstraintToQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/53/FilterConstraintToQuery.java\nindex 7a81aef3c4e..dd9f9b32a7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/53/FilterConstraintToQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/53/FilterConstraintToQuery.java\n@@ -27,376 +27,376 @@ import static org.zanata.util.QueryBuilder.and;\n \n /**\n  * @author Patrick Huang\n- *         <a href=\"mailto:pahuang@redhat.com\">pahuang@redhat.com</a>\n+ * <a href=\"mailto:pahuang@redhat.com\">pahuang@redhat.com</a>\n  */\n public class FilterConstraintToQuery {\n-    private final FilterConstraints constraints;\n-    private final boolean hasSearch;\n-    private String searchString;\n-    private DocumentId documentId;\n-    private Collection<Long> documentIds;\n-    private ContentCriterion contentCriterion = new ContentCriterion();\n-\n-    private FilterConstraintToQuery(FilterConstraints constraints,\n-            DocumentId documentId) {\n-        this(constraints);\n-        this.documentId = documentId;\n-    }\n-\n-    public FilterConstraintToQuery(FilterConstraints constraints,\n-            Collection<Long> documentIds) {\n-        this(constraints);\n-        this.documentIds = documentIds;\n-    }\n-\n-    private FilterConstraintToQuery(FilterConstraints constraints) {\n-        this.constraints = constraints;\n-        hasSearch = !Strings.isNullOrEmpty(constraints.getSearchString());\n-        if (hasSearch) {\n-            String term = constraints.isCaseSensitive()\n-                    ? constraints.getSearchString()\n-                    : constraints.getSearchString().toLowerCase();\n-            term = escapeWildcard(term);\n-            searchString = match(term, MatchMode.ANYWHERE);\n-        }\n-        contentCriterion = new ContentCriterion()\n-                .withCaseSensitive(constraints.isCaseSensitive());\n-    }\n-\n-    public static FilterConstraintToQuery filterInSingleDocument(\n-            FilterConstraints constraints, DocumentId documentId) {\n-        Preconditions.checkNotNull(documentId);\n-        return new FilterConstraintToQuery(constraints, documentId);\n-    }\n-\n-    public static FilterConstraintToQuery filterInMultipleDocuments(\n-            FilterConstraints constraints, Collection<Long> documentIds) {\n-        Preconditions.checkNotNull(documentIds);\n-        Preconditions.checkState(!documentIds.isEmpty());\n-        return new FilterConstraintToQuery(constraints, documentIds);\n-    }\n-\n-    /**\n-     * This builds a query for constructing TransUnit in editor. Executing the\n-     * query will returns a list of HTextFlow objects.\n-     *\n-     * @return the HQL query\n-     */\n-    public String toEntityQuery() {\n-        String docIdCondition;\n-        if (documentId != null) {\n-            docIdCondition =\n-                    eq(\"tf.document.id\", Parameters.DocumentId.placeHolder());\n-        } else {\n-            docIdCondition =\n-                    \"tf.document.id in (\" + DocumentIdList.placeHolder() + \")\";\n-        }\n-        return buildQuery(\"distinct tf\", docIdCondition);\n-    }\n-\n-    private String buildQuery(String selectStatement, String docIdCondition) {\n-        String obsoleteCondition = eq(\"tf.obsolete\", \"0\");\n-        String searchCondition = buildSearchCondition();\n-        String stateCondition = buildTargetCondition();\n-        String otherSourceCondition = buildSourceConditionsOtherThanSearch();\n-        String otherTargetCondition = buildTargetConditionsOtherThanSearch();\n-        QueryBuilder query = QueryBuilder.select(selectStatement)\n-                .from(\"HTextFlow tf\").leftJoin(\"tf.targets tfts\")\n-                .with(eq(\"tfts.index\", Locale.placeHolder()))\n-                .where(and(obsoleteCondition, docIdCondition, searchCondition,\n-                        stateCondition, otherSourceCondition,\n-                        otherTargetCondition))\n-                .orderBy(\"tf.pos\");\n-        return query.toQueryString();\n-    }\n-\n-    /**\n-     * This builds a query for editor modal navigation. It only select text flow\n-     * id and text flow target content state (text flow pos is also in select\n-     * but just for ordering).\n-     *\n-     * @return the HQL query\n-     */\n-    public String toModalNavigationQuery() {\n-        String docIdCondition =\n-                eq(\"tf.document.id\", Parameters.DocumentId.placeHolder());\n-        return buildQuery(\n-                \"distinct tf.id as id, (case when tfts is null then 0 else tfts.state end) as state, (tfts.sourceType) as sourceType, tf.pos as pos, tf.resId as resId\",\n-                docIdCondition);\n-    }\n-\n-    protected String buildSearchCondition() {\n-        if (!hasSearch) {\n-            return null;\n-        }\n-        String searchInSourceCondition = null;\n-        if (constraints.isSearchInSource()) {\n-            searchInSourceCondition = contentCriterion.withEntityAlias(\"tf\")\n-                    .contentsCriterionAsString();\n-        }\n-        String searchInTargetCondition = null;\n-        if (constraints.isSearchInTarget()) {\n-            List<String> targetConjunction = Lists.newArrayList();\n-            targetConjunction.add(contentCriterion.contentsCriterionAsString());\n-            targetConjunction.add(eq(\"textFlow\", \"tf\"));\n-            targetConjunction.add(eq(\"locale\", Locale.placeHolder()));\n-            searchInTargetCondition = QueryBuilder.exists()\n-                    .from(\"HTextFlowTarget\")\n-                    .where(QueryBuilder.and(targetConjunction)).toQueryString();\n-        }\n-        return QueryBuilder.or(searchInSourceCondition,\n-                searchInTargetCondition);\n-    }\n-\n-    protected boolean needToQueryNullTarget() {\n-        return isExcludeSearchTerm(constraints.getLastModifiedByUser());\n-    }\n-\n-    protected String buildSourceConditionsOtherThanSearch() {\n-        List<String> sourceConjunction = Lists.newArrayList();\n-        addToJunctionIfNotNull(sourceConjunction,\n-                buildSourceCommentCondition(constraints.getSourceComment()));\n-        addToJunctionIfNotNull(sourceConjunction, buildMsgContextCondition());\n-        addToJunctionIfNotNull(sourceConjunction, buildResourceIdCondition());\n-        if (sourceConjunction.isEmpty()) {\n-            return null;\n-        }\n-        return QueryBuilder.and(sourceConjunction);\n-    }\n-\n-    protected String buildTargetConditionsOtherThanSearch() {\n-        List<String> targetConjunction = Lists.newArrayList();\n-        addToJunctionIfNotNull(targetConjunction,\n-                buildLastModifiedByCondition());\n-        addToJunctionIfNotNull(targetConjunction,\n-                buildTargetCommentCondition(constraints.getTransComment()));\n-        addToJunctionIfNotNull(targetConjunction,\n-                buildLastModifiedDateCondition());\n-        if (targetConjunction.isEmpty()) {\n-            return null;\n-        }\n-        String textFlowTargetJoin = eq(\"tft.textFlow\", \"tf\");\n-        String localeJoin = eq(\"tft.locale\", Locale.placeHolder());\n-        targetConjunction.add(textFlowTargetJoin);\n-        targetConjunction.add(localeJoin);\n-        String existQuery = QueryBuilder.exists().from(\"HTextFlowTarget tft\")\n-                .leftJoin(\"tft.lastModifiedBy.account acc\")\n-                .where(and(targetConjunction)).toQueryString();\n-        if (!needToQueryNullTarget()) {\n-            return existQuery;\n-        }\n-        String notExistQuery = QueryBuilder.notExists()\n-                .from(\"HTextFlowTarget tft\")\n-                .leftJoin(\"tft.lastModifiedBy.account acc\")\n-                .where(and(textFlowTargetJoin, localeJoin)).toQueryString();\n-        return QueryBuilder.or(existQuery, notExistQuery);\n-    }\n-\n-    private static boolean addToJunctionIfNotNull(List<String> junction,\n-            String criterion) {\n-        if (criterion != null) {\n-            junction.add(criterion);\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    private String buildResourceIdCondition() {\n-        if (Strings.isNullOrEmpty(constraints.getResId())) {\n-            return null;\n-        }\n-        return eq(\"resId\", ResId.placeHolder());\n-    }\n-\n-    private String buildMsgContextCondition() {\n-        if (Strings.isNullOrEmpty(constraints.getMsgContext())) {\n-            return null;\n-        }\n-        return ilike(\"tf.potEntryData.context\", MsgContext.placeHolder());\n-    }\n-\n-    private String buildSourceCommentCondition(String commentToSearch) {\n-        if (Strings.isNullOrEmpty(commentToSearch)) {\n-            return null;\n-        }\n-        return ilike(\"tf.comment.comment\", SourceComment.placeHolder());\n-    }\n-\n-    private String buildTargetCommentCondition(String transComment) {\n-        if (Strings.isNullOrEmpty(transComment)) {\n-            return null;\n-        }\n-        return ilike(\"tft.comment.comment\", TargetComment.placeHolder());\n-    }\n-\n-    private String buildLastModifiedDateCondition() {\n-        DateTime changedBeforeTime = constraints.getChangedBefore();\n-        DateTime changedAfterTime = constraints.getChangedAfter();\n-        if (changedBeforeTime == null && changedAfterTime == null) {\n-            return null;\n-        }\n-        String changedAfter = null;\n-        String changedBefore = null;\n-        if (changedAfterTime != null) {\n-            changedAfter = HqlCriterion.gt(\"tft.lastChanged\",\n-                    LastChangedAfter.placeHolder());\n-        }\n-        if (changedBeforeTime != null) {\n-            changedBefore = HqlCriterion.lt(\"tft.lastChanged\",\n-                    LastChangedBefore.placeHolder());\n-        }\n-        return QueryBuilder.and(changedAfter, changedBefore);\n-    }\n-\n-    protected String buildTargetCondition() {\n-        if (constraints.getIncludedStates().hasAllStates() &&\n-            !constraints.isIncludedMT()) {\n-            return null;\n-        }\n-        List<String> conjunction = Lists.newArrayList();\n-        conjunction.add(eq(\"textFlow\", \"tf\"));\n-        conjunction.add(eq(\"locale\", Locale.placeHolder()));\n-        if (constraints.isIncludedMT()) {\n-            conjunction.add(eq(\"sourceType\", IncludeMT.placeHolder()));\n-        }\n-        String whereClause = and(conjunction);\n-        if (!constraints.getIncludedStates().hasAllStates()) {\n-            whereClause = and(whereClause,\n-                String.format(\"state in (%s)\", ContentStateList.placeHolder()));\n-        }\n-        String condition = QueryBuilder.exists().from(\"HTextFlowTarget\")\n-            .where(whereClause).toQueryString();\n-\n-        if (!constraints.getIncludedStates().hasAllStates() &&\n-            constraints.getIncludedStates().hasNew()) {\n-            String nullTargetCondition = String.format(\n-                \"%s not in indices(tf.targets)\", Locale.placeHolder());\n-            if (hasSearch && constraints.isSearchInSource()) {\n-                nullTargetCondition =\n-                    and(nullTargetCondition, contentCriterion\n-                        .withEntityAlias(\"tf\").contentsCriterionAsString());\n-            }\n-            return QueryBuilder.or(condition, nullTargetCondition);\n-        }\n-        return condition;\n-    }\n-\n-    protected String buildLastModifiedByCondition() {\n-        if (Strings.isNullOrEmpty(constraints.getLastModifiedByUser())) {\n-            return null;\n-        }\n-        if (!isExcludeSearchTerm(constraints.getLastModifiedByUser())) {\n-            return eq(\"acc.username\", LastModifiedBy.placeHolder());\n-        }\n-        String nullLastModifiedByCondition = isNull(\"tft.lastModifiedBy\");\n-        String excludeUsernameCondition =\n-                ne(\"acc.username\", LastModifiedBy.placeHolder());\n-        return QueryBuilder.or(nullLastModifiedByCondition,\n-                excludeUsernameCondition);\n-    }\n-    // check if the term have exclude sign '-'\n-\n-    private boolean isExcludeSearchTerm(@Nonnull String term) {\n-        return StringUtils.isEmpty(term) ? false\n-                : (term.startsWith(\"-\") && term.length() > 1);\n-    }\n-    // remove exclude sign '-' from term\n-\n-    private String getExcludeSearchTerm(@Nonnull String term) {\n-        if (isExcludeSearchTerm(term)) {\n-            return term.substring(1); // remove '-' sign in front\n-        }\n-        return term;\n-    }\n-\n-    public Query setQueryParameters(Query textFlowQuery, HLocale hLocale) {\n-        if (documentId != null) {\n-            textFlowQuery.setParameter(Parameters.DocumentId.namedParam(),\n-                    documentId.getId());\n-        } else {\n-            textFlowQuery.setParameterList(DocumentIdList.namedParam(),\n-                    documentIds);\n-        }\n-        textFlowQuery.setParameter(Locale.namedParam(), hLocale.getId());\n-        if (hasSearch) {\n-            textFlowQuery.setParameter(Parameters.SearchString.namedParam(),\n-                    searchString);\n-        }\n-        if (!constraints.getIncludedStates().hasAllStates()) {\n-            textFlowQuery.setParameterList(ContentStateList.namedParam(),\n-                    constraints.getIncludedStates().asList());\n-        }\n-        if (constraints.isIncludedMT()) {\n-            textFlowQuery.setParameter(IncludeMT.namedParam(),\n-                TranslationSourceType.MACHINE_TRANS);\n-        }\n-        addExactMatchParamIfPresent(textFlowQuery, constraints.getResId(),\n-                ResId);\n-        addWildcardSearchParamIfPresent(textFlowQuery,\n-                constraints.getMsgContext(), MsgContext);\n-        addWildcardSearchParamIfPresent(textFlowQuery,\n-                constraints.getSourceComment(), SourceComment);\n-        addWildcardSearchParamIfPresent(textFlowQuery,\n-                constraints.getTransComment(), TargetComment);\n-        String lastModifiedByUser =\n-                getExcludeSearchTerm(constraints.getLastModifiedByUser());\n-        addExactMatchParamIfPresent(textFlowQuery, lastModifiedByUser,\n-                LastModifiedBy);\n-        if (constraints.getChangedAfter() != null) {\n-            textFlowQuery.setParameter(LastChangedAfter.namedParam(),\n-                    constraints.getChangedAfter().toDate());\n-        }\n-        if (constraints.getChangedBefore() != null) {\n-            textFlowQuery.setParameter(LastChangedBefore.namedParam(),\n-                    constraints.getChangedBefore().toDate());\n-        }\n-        return textFlowQuery;\n-    }\n-\n-    private static void addExactMatchParamIfPresent(Query textFlowQuery,\n-            String filterProperty, Parameters filterParam) {\n-        if (!Strings.isNullOrEmpty(filterProperty)) {\n-            textFlowQuery.setParameter(filterParam.namedParam(),\n-                    filterProperty);\n-        }\n-    }\n-\n-    private static Query addWildcardSearchParamIfPresent(Query textFlowQuery,\n-            String filterProperty, Parameters filterParam) {\n-        if (!Strings.isNullOrEmpty(filterProperty)) {\n-            String escapedAndLowered =\n-                    HqlCriterion.escapeWildcard(filterProperty.toLowerCase());\n-            textFlowQuery.setParameter(filterParam.namedParam(),\n-                    HqlCriterion.match(escapedAndLowered, MatchMode.ANYWHERE));\n-        }\n-        return textFlowQuery;\n-    }\n-\n-    enum Parameters {\n-        SearchString,\n-        ContentStateList,\n-        IncludeMT,\n-        Locale,\n-        DocumentId,\n-        DocumentIdList,\n-        ResId,\n-        SourceComment,\n-        MsgContext,\n-        TargetComment,\n-        LastModifiedBy,\n-        LastChangedAfter,\n-        LastChangedBefore;\n-\n-        public String placeHolder() {\n-            return \":\" + name();\n-        }\n-\n-        public String namedParam() {\n-            return name();\n-        }\n-    }\n-\n-    void setContentCriterion(final ContentCriterion contentCriterion) {\n-        this.contentCriterion = contentCriterion;\n+  private final FilterConstraints constraints;\n+  private final boolean hasSearch;\n+  private String searchString;\n+  private DocumentId documentId;\n+  private Collection<Long> documentIds;\n+  private ContentCriterion contentCriterion = new ContentCriterion();\n+\n+  private FilterConstraintToQuery(FilterConstraints constraints,\n+                                  DocumentId documentId) {\n+    this(constraints);\n+    this.documentId = documentId;\n+  }\n+\n+  public FilterConstraintToQuery(FilterConstraints constraints,\n+                                 Collection<Long> documentIds) {\n+    this(constraints);\n+    this.documentIds = documentIds;\n+  }\n+\n+  private FilterConstraintToQuery(FilterConstraints constraints) {\n+    this.constraints = constraints;\n+    hasSearch = !Strings.isNullOrEmpty(constraints.getSearchString());\n+    if (hasSearch) {\n+      String term = constraints.isCaseSensitive()\n+        ? constraints.getSearchString()\n+        : constraints.getSearchString().toLowerCase();\n+      term = escapeWildcard(term);\n+      searchString = match(term, MatchMode.ANYWHERE);\n     }\n+    contentCriterion = new ContentCriterion()\n+      .withCaseSensitive(constraints.isCaseSensitive());\n+  }\n+\n+  public static FilterConstraintToQuery filterInSingleDocument(\n+    FilterConstraints constraints, DocumentId documentId) {\n+    Preconditions.checkNotNull(documentId);\n+    return new FilterConstraintToQuery(constraints, documentId);\n+  }\n+\n+  public static FilterConstraintToQuery filterInMultipleDocuments(\n+    FilterConstraints constraints, Collection<Long> documentIds) {\n+    Preconditions.checkNotNull(documentIds);\n+    Preconditions.checkState(!documentIds.isEmpty());\n+    return new FilterConstraintToQuery(constraints, documentIds);\n+  }\n+\n+  /**\n+   * This builds a query for constructing TransUnit in editor. Executing the\n+   * query will returns a list of HTextFlow objects.\n+   *\n+   * @return the HQL query\n+   */\n+  public String toEntityQuery() {\n+    String docIdCondition;\n+    if (documentId != null) {\n+      docIdCondition =\n+        eq(\"tf.document.id\", Parameters.DocumentId.placeHolder());\n+    } else {\n+      docIdCondition =\n+        \"tf.document.id in (\" + DocumentIdList.placeHolder() + \")\";\n+    }\n+    return buildQuery(\"distinct tf\", docIdCondition);\n+  }\n+\n+  private String buildQuery(String selectStatement, String docIdCondition) {\n+    String obsoleteCondition = eq(\"tf.obsolete\", \"0\");\n+    String searchCondition = buildSearchCondition();\n+    String stateCondition = buildTargetCondition();\n+    String otherSourceCondition = buildSourceConditionsOtherThanSearch();\n+    String otherTargetCondition = buildTargetConditionsOtherThanSearch();\n+    QueryBuilder query = QueryBuilder.select(selectStatement)\n+      .from(\"HTextFlow tf\").leftJoin(\"tf.targets tfts\")\n+      .with(eq(\"tfts.index\", Locale.placeHolder()))\n+      .where(and(obsoleteCondition, docIdCondition, searchCondition,\n+        stateCondition, otherSourceCondition,\n+        otherTargetCondition))\n+      .orderBy(\"tf.pos\");\n+    return query.toQueryString();\n+  }\n+\n+  /**\n+   * This builds a query for editor modal navigation. It only select text flow\n+   * id and text flow target content state (text flow pos is also in select\n+   * but just for ordering).\n+   *\n+   * @return the HQL query\n+   */\n+  public String toModalNavigationQuery() {\n+    String docIdCondition =\n+      eq(\"tf.document.id\", Parameters.DocumentId.placeHolder());\n+    return buildQuery(\n+      \"distinct tf.id as id, (case when tfts is null then 0 else tfts.state end) as state, (tfts.sourceType) as sourceType, tf.pos as pos, tf.resId as resId\",\n+      docIdCondition);\n+  }\n+\n+  protected String buildSearchCondition() {\n+    if (!hasSearch) {\n+      return null;\n+    }\n+    String searchInSourceCondition = null;\n+    if (constraints.isSearchInSource()) {\n+      searchInSourceCondition = contentCriterion.withEntityAlias(\"tf\")\n+        .contentsCriterionAsString();\n+    }\n+    String searchInTargetCondition = null;\n+    if (constraints.isSearchInTarget()) {\n+      List<String> targetConjunction = Lists.newArrayList();\n+      targetConjunction.add(contentCriterion.contentsCriterionAsString());\n+      targetConjunction.add(eq(\"textFlow\", \"tf\"));\n+      targetConjunction.add(eq(\"locale\", Locale.placeHolder()));\n+      searchInTargetCondition = QueryBuilder.exists()\n+        .from(\"HTextFlowTarget\")\n+        .where(QueryBuilder.and(targetConjunction)).toQueryString();\n+    }\n+    return QueryBuilder.or(searchInSourceCondition,\n+      searchInTargetCondition);\n+  }\n+\n+  protected boolean needToQueryNullTarget() {\n+    return isExcludeSearchTerm(constraints.getLastModifiedByUser());\n+  }\n+\n+  protected String buildSourceConditionsOtherThanSearch() {\n+    List<String> sourceConjunction = Lists.newArrayList();\n+    addToJunctionIfNotNull(sourceConjunction,\n+      buildSourceCommentCondition(constraints.getSourceComment()));\n+    addToJunctionIfNotNull(sourceConjunction, buildMsgContextCondition());\n+    addToJunctionIfNotNull(sourceConjunction, buildResourceIdCondition());\n+    if (sourceConjunction.isEmpty()) {\n+      return null;\n+    }\n+    return QueryBuilder.and(sourceConjunction);\n+  }\n+\n+  protected String buildTargetConditionsOtherThanSearch() {\n+    List<String> targetConjunction = Lists.newArrayList();\n+    addToJunctionIfNotNull(targetConjunction,\n+      buildLastModifiedByCondition());\n+    addToJunctionIfNotNull(targetConjunction,\n+      buildTargetCommentCondition(constraints.getTransComment()));\n+    addToJunctionIfNotNull(targetConjunction,\n+      buildLastModifiedDateCondition());\n+    if (targetConjunction.isEmpty()) {\n+      return null;\n+    }\n+    String textFlowTargetJoin = eq(\"tft.textFlow\", \"tf\");\n+    String localeJoin = eq(\"tft.locale\", Locale.placeHolder());\n+    targetConjunction.add(textFlowTargetJoin);\n+    targetConjunction.add(localeJoin);\n+    String existQuery = QueryBuilder.exists().from(\"HTextFlowTarget tft\")\n+      .leftJoin(\"tft.lastModifiedBy.account acc\")\n+      .where(and(targetConjunction)).toQueryString();\n+    if (!needToQueryNullTarget()) {\n+      return existQuery;\n+    }\n+    String notExistQuery = QueryBuilder.notExists()\n+      .from(\"HTextFlowTarget tft\")\n+      .leftJoin(\"tft.lastModifiedBy.account acc\")\n+      .where(and(textFlowTargetJoin, localeJoin)).toQueryString();\n+    return QueryBuilder.or(existQuery, notExistQuery);\n+  }\n+\n+  private static boolean addToJunctionIfNotNull(List<String> junction,\n+                                                String criterion) {\n+    if (criterion != null) {\n+      junction.add(criterion);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private String buildResourceIdCondition() {\n+    if (Strings.isNullOrEmpty(constraints.getResId())) {\n+      return null;\n+    }\n+    return eq(\"resId\", ResId.placeHolder());\n+  }\n+\n+  private String buildMsgContextCondition() {\n+    if (Strings.isNullOrEmpty(constraints.getMsgContext())) {\n+      return null;\n+    }\n+    return ilike(\"tf.potEntryData.context\", MsgContext.placeHolder());\n+  }\n+\n+  private String buildSourceCommentCondition(String commentToSearch) {\n+    if (Strings.isNullOrEmpty(commentToSearch)) {\n+      return null;\n+    }\n+    return ilike(\"tf.comment.comment\", SourceComment.placeHolder());\n+  }\n+\n+  private String buildTargetCommentCondition(String transComment) {\n+    if (Strings.isNullOrEmpty(transComment)) {\n+      return null;\n+    }\n+    return ilike(\"tft.comment.comment\", TargetComment.placeHolder());\n+  }\n+\n+  private String buildLastModifiedDateCondition() {\n+    DateTime changedBeforeTime = constraints.getChangedBefore();\n+    DateTime changedAfterTime = constraints.getChangedAfter();\n+    if (changedBeforeTime == null && changedAfterTime == null) {\n+      return null;\n+    }\n+    String changedAfter = null;\n+    String changedBefore = null;\n+    if (changedAfterTime != null) {\n+      changedAfter = HqlCriterion.gt(\"tft.lastChanged\",\n+        LastChangedAfter.placeHolder());\n+    }\n+    if (changedBeforeTime != null) {\n+      changedBefore = HqlCriterion.lt(\"tft.lastChanged\",\n+        LastChangedBefore.placeHolder());\n+    }\n+    return QueryBuilder.and(changedAfter, changedBefore);\n+  }\n+\n+  protected String buildTargetCondition() {\n+    if (constraints.getIncludedStates().hasAllStates() &&\n+      !constraints.isIncludedMT()) {\n+      return null;\n+    }\n+    List<String> conjunction = Lists.newArrayList();\n+    conjunction.add(eq(\"textFlow\", \"tf\"));\n+    conjunction.add(eq(\"locale\", Locale.placeHolder()));\n+    if (constraints.isIncludedMT()) {\n+      conjunction.add(eq(\"sourceType\", IncludeMT.placeHolder()));\n+    }\n+    String whereClause = and(conjunction);\n+    if (!constraints.getIncludedStates().hasAllStates()) {\n+      whereClause = and(whereClause,\n+        String.format(\"state in (%s)\", ContentStateList.placeHolder()));\n+    }\n+    String condition = QueryBuilder.exists().from(\"HTextFlowTarget\")\n+      .where(whereClause).toQueryString();\n+\n+    if (!constraints.getIncludedStates().hasAllStates() &&\n+      constraints.getIncludedStates().hasNew()) {\n+      String nullTargetCondition = String.format(\n+        \"%s not in indices(tf.targets)\", Locale.placeHolder());\n+      if (hasSearch && constraints.isSearchInSource()) {\n+        nullTargetCondition =\n+          and(nullTargetCondition, contentCriterion\n+            .withEntityAlias(\"tf\").contentsCriterionAsString());\n+      }\n+      return QueryBuilder.or(condition, nullTargetCondition);\n+    }\n+    return condition;\n+  }\n+\n+  protected String buildLastModifiedByCondition() {\n+    if (Strings.isNullOrEmpty(constraints.getLastModifiedByUser())) {\n+      return null;\n+    }\n+    if (!isExcludeSearchTerm(constraints.getLastModifiedByUser())) {\n+      return eq(\"acc.username\", LastModifiedBy.placeHolder());\n+    }\n+    String nullLastModifiedByCondition = isNull(\"tft.lastModifiedBy\");\n+    String excludeUsernameCondition =\n+      ne(\"acc.username\", LastModifiedBy.placeHolder());\n+    return QueryBuilder.or(nullLastModifiedByCondition,\n+      excludeUsernameCondition);\n+  }\n+  // check if the term have exclude sign '-'\n+\n+  private boolean isExcludeSearchTerm(@Nonnull String term) {\n+    return StringUtils.isEmpty(term) ? false\n+      : (term.startsWith(\"-\") && term.length() > 1);\n+  }\n+  // remove exclude sign '-' from term\n+\n+  private String getExcludeSearchTerm(@Nonnull String term) {\n+    if (isExcludeSearchTerm(term)) {\n+      return term.substring(1); // remove '-' sign in front\n+    }\n+    return term;\n+  }\n+\n+  public Query setQueryParameters(Query textFlowQuery, HLocale hLocale) {\n+    if (documentId != null) {\n+      textFlowQuery.setParameter(Parameters.DocumentId.namedParam(),\n+        documentId.getId());\n+    } else {\n+      textFlowQuery.setParameterList(DocumentIdList.namedParam(),\n+        documentIds);\n+    }\n+    textFlowQuery.setParameter(Locale.namedParam(), hLocale.getId());\n+    if (hasSearch) {\n+      textFlowQuery.setParameter(Parameters.SearchString.namedParam(),\n+        searchString);\n+    }\n+    if (!constraints.getIncludedStates().hasAllStates()) {\n+      textFlowQuery.setParameterList(ContentStateList.namedParam(),\n+        constraints.getIncludedStates().asList());\n+    }\n+    if (constraints.isIncludedMT()) {\n+      textFlowQuery.setParameter(IncludeMT.namedParam(),\n+        TranslationSourceType.MACHINE_TRANS);\n+    }\n+    addExactMatchParamIfPresent(textFlowQuery, constraints.getResId(),\n+      ResId);\n+    addWildcardSearchParamIfPresent(textFlowQuery,\n+      constraints.getMsgContext(), MsgContext);\n+    addWildcardSearchParamIfPresent(textFlowQuery,\n+      constraints.getSourceComment(), SourceComment);\n+    addWildcardSearchParamIfPresent(textFlowQuery,\n+      constraints.getTransComment(), TargetComment);\n+    String lastModifiedByUser =\n+      getExcludeSearchTerm(constraints.getLastModifiedByUser());\n+    addExactMatchParamIfPresent(textFlowQuery, lastModifiedByUser,\n+      LastModifiedBy);\n+    if (constraints.getChangedAfter() != null) {\n+      textFlowQuery.setParameter(LastChangedAfter.namedParam(),\n+        constraints.getChangedAfter().toDate());\n+    }\n+    if (constraints.getChangedBefore() != null) {\n+      textFlowQuery.setParameter(LastChangedBefore.namedParam(),\n+        constraints.getChangedBefore().toDate());\n+    }\n+    return textFlowQuery;\n+  }\n+\n+  private static void addExactMatchParamIfPresent(Query textFlowQuery,\n+                                                  String filterProperty, Parameters filterParam) {\n+    if (!Strings.isNullOrEmpty(filterProperty)) {\n+      textFlowQuery.setParameter(filterParam.namedParam(),\n+        filterProperty);\n+    }\n+  }\n+\n+  private static Query addWildcardSearchParamIfPresent(Query textFlowQuery,\n+                                                       String filterProperty, Parameters filterParam) {\n+    if (!Strings.isNullOrEmpty(filterProperty)) {\n+      String escapedAndLowered =\n+        HqlCriterion.escapeWildcard(filterProperty.toLowerCase());\n+      textFlowQuery.setParameter(filterParam.namedParam(),\n+        HqlCriterion.match(escapedAndLowered, MatchMode.ANYWHERE));\n+    }\n+    return textFlowQuery;\n+  }\n+\n+  enum Parameters {\n+    SearchString,\n+    ContentStateList,\n+    IncludeMT,\n+    Locale,\n+    DocumentId,\n+    DocumentIdList,\n+    ResId,\n+    SourceComment,\n+    MsgContext,\n+    TargetComment,\n+    LastModifiedBy,\n+    LastChangedAfter,\n+    LastChangedBefore;\n+\n+    public String placeHolder() {\n+      return \":\" + name();\n+    }\n+\n+    public String namedParam() {\n+      return name();\n+    }\n+  }\n+\n+  void setContentCriterion(final ContentCriterion contentCriterion) {\n+    this.contentCriterion = contentCriterion;\n+  }\n }\n",
            "diff_size": 709
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/53/FilterConstraintToQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/53/FilterConstraintToQuery.java\nindex 7a81aef3c4e..cdfebbea787 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/53/FilterConstraintToQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/53/FilterConstraintToQuery.java\n@@ -249,8 +249,7 @@ public class FilterConstraintToQuery {\n     }\n \n     protected String buildTargetCondition() {\n-        if (constraints.getIncludedStates().hasAllStates() &&\n-            !constraints.isIncludedMT()) {\n+        if (constraints.getIncludedStates().hasAllStates() && !constraints.isIncludedMT()) {\n             return null;\n         }\n         List<String> conjunction = Lists.newArrayList();\n@@ -267,14 +266,11 @@ public class FilterConstraintToQuery {\n         String condition = QueryBuilder.exists().from(\"HTextFlowTarget\")\n             .where(whereClause).toQueryString();\n \n-        if (!constraints.getIncludedStates().hasAllStates() &&\n-            constraints.getIncludedStates().hasNew()) {\n-            String nullTargetCondition = String.format(\n-                \"%s not in indices(tf.targets)\", Locale.placeHolder());\n+        if (!constraints.getIncludedStates().hasAllStates() && constraints.getIncludedStates().hasNew()) {\n+            String nullTargetCondition = String.format(\"%s not in indices(tf.targets)\", Locale.placeHolder());\n             if (hasSearch && constraints.isSearchInSource()) {\n                 nullTargetCondition =\n-                    and(nullTargetCondition, contentCriterion\n-                        .withEntityAlias(\"tf\").contentsCriterionAsString());\n+                    and(nullTargetCondition, contentCriterion.withEntityAlias(\"tf\").contentsCriterionAsString());\n             }\n             return QueryBuilder.or(condition, nullTargetCondition);\n         }\n@@ -297,14 +293,14 @@ public class FilterConstraintToQuery {\n     // check if the term have exclude sign '-'\n \n     private boolean isExcludeSearchTerm(@Nonnull String term) {\n-        return StringUtils.isEmpty(term) ? false\n-                : (term.startsWith(\"-\") && term.length() > 1);\n+        return StringUtils.isEmpty(term) ? false : (term.startsWith(\"-\") && term.length() > 1);\n     }\n     // remove exclude sign '-' from term\n \n     private String getExcludeSearchTerm(@Nonnull String term) {\n         if (isExcludeSearchTerm(term)) {\n-            return term.substring(1); // remove '-' sign in front\n+            return term.substring(1);\n+        // remove '-' sign in front\n         }\n         return term;\n     }\n@@ -399,4 +395,4 @@ public class FilterConstraintToQuery {\n     void setContentCriterion(final ContentCriterion contentCriterion) {\n         this.contentCriterion = contentCriterion;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "267",
                    "column": "39",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/53/FilterConstraintToQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/53/FilterConstraintToQuery.java\nindex 7a81aef3c4e..7975172ac64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/53/FilterConstraintToQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/53/FilterConstraintToQuery.java\n@@ -16,6 +16,7 @@ import org.zanata.webtrans.shared.search.FilterConstraints;\n import com.google.common.base.Preconditions;\n import com.google.common.base.Strings;\n import com.google.common.collect.Lists;\n+\n import static org.zanata.search.FilterConstraintToQuery.Parameters.*;\n import static org.zanata.util.HqlCriterion.eq;\n import static org.zanata.util.HqlCriterion.ne;\n@@ -29,6 +30,8 @@ import static org.zanata.util.QueryBuilder.and;\n  * @author Patrick Huang\n  *         <a href=\"mailto:pahuang@redhat.com\">pahuang@redhat.com</a>\n  */\n+\n+\n public class FilterConstraintToQuery {\n     private final FilterConstraints constraints;\n     private final boolean hasSearch;\n@@ -37,14 +40,12 @@ public class FilterConstraintToQuery {\n     private Collection<Long> documentIds;\n     private ContentCriterion contentCriterion = new ContentCriterion();\n \n-    private FilterConstraintToQuery(FilterConstraints constraints,\n-            DocumentId documentId) {\n+    private FilterConstraintToQuery(FilterConstraints constraints, DocumentId documentId) {\n         this(constraints);\n         this.documentId = documentId;\n     }\n \n-    public FilterConstraintToQuery(FilterConstraints constraints,\n-            Collection<Long> documentIds) {\n+    public FilterConstraintToQuery(FilterConstraints constraints, Collection<Long> documentIds) {\n         this(constraints);\n         this.documentIds = documentIds;\n     }\n@@ -53,24 +54,19 @@ public class FilterConstraintToQuery {\n         this.constraints = constraints;\n         hasSearch = !Strings.isNullOrEmpty(constraints.getSearchString());\n         if (hasSearch) {\n-            String term = constraints.isCaseSensitive()\n-                    ? constraints.getSearchString()\n-                    : constraints.getSearchString().toLowerCase();\n+            String term = constraints.isCaseSensitive() ? constraints.getSearchString() : constraints.getSearchString().toLowerCase();\n             term = escapeWildcard(term);\n             searchString = match(term, MatchMode.ANYWHERE);\n         }\n-        contentCriterion = new ContentCriterion()\n-                .withCaseSensitive(constraints.isCaseSensitive());\n+        contentCriterion = new ContentCriterion().withCaseSensitive(constraints.isCaseSensitive());\n     }\n \n-    public static FilterConstraintToQuery filterInSingleDocument(\n-            FilterConstraints constraints, DocumentId documentId) {\n+    public static FilterConstraintToQuery filterInSingleDocument(FilterConstraints constraints, DocumentId documentId) {\n         Preconditions.checkNotNull(documentId);\n         return new FilterConstraintToQuery(constraints, documentId);\n     }\n \n-    public static FilterConstraintToQuery filterInMultipleDocuments(\n-            FilterConstraints constraints, Collection<Long> documentIds) {\n+    public static FilterConstraintToQuery filterInMultipleDocuments(FilterConstraints constraints, Collection<Long> documentIds) {\n         Preconditions.checkNotNull(documentIds);\n         Preconditions.checkState(!documentIds.isEmpty());\n         return new FilterConstraintToQuery(constraints, documentIds);\n@@ -82,14 +78,13 @@ public class FilterConstraintToQuery {\n      *\n      * @return the HQL query\n      */\n+\n     public String toEntityQuery() {\n         String docIdCondition;\n         if (documentId != null) {\n-            docIdCondition =\n-                    eq(\"tf.document.id\", Parameters.DocumentId.placeHolder());\n+            docIdCondition = eq(\"tf.document.id\", Parameters.DocumentId.placeHolder());\n         } else {\n-            docIdCondition =\n-                    \"tf.document.id in (\" + DocumentIdList.placeHolder() + \")\";\n+            docIdCondition = \"tf.document.id in (\" + DocumentIdList.placeHolder() + \")\";\n         }\n         return buildQuery(\"distinct tf\", docIdCondition);\n     }\n@@ -100,13 +95,7 @@ public class FilterConstraintToQuery {\n         String stateCondition = buildTargetCondition();\n         String otherSourceCondition = buildSourceConditionsOtherThanSearch();\n         String otherTargetCondition = buildTargetConditionsOtherThanSearch();\n-        QueryBuilder query = QueryBuilder.select(selectStatement)\n-                .from(\"HTextFlow tf\").leftJoin(\"tf.targets tfts\")\n-                .with(eq(\"tfts.index\", Locale.placeHolder()))\n-                .where(and(obsoleteCondition, docIdCondition, searchCondition,\n-                        stateCondition, otherSourceCondition,\n-                        otherTargetCondition))\n-                .orderBy(\"tf.pos\");\n+        QueryBuilder query = QueryBuilder.select(selectStatement).from(\"HTextFlow tf\").leftJoin(\"tf.targets tfts\").with(eq(\"tfts.index\", Locale.placeHolder())).where(and(obsoleteCondition, docIdCondition, searchCondition, stateCondition, otherSourceCondition, otherTargetCondition)).orderBy(\"tf.pos\");\n         return query.toQueryString();\n     }\n \n@@ -117,12 +106,10 @@ public class FilterConstraintToQuery {\n      *\n      * @return the HQL query\n      */\n+\n     public String toModalNavigationQuery() {\n-        String docIdCondition =\n-                eq(\"tf.document.id\", Parameters.DocumentId.placeHolder());\n-        return buildQuery(\n-                \"distinct tf.id as id, (case when tfts is null then 0 else tfts.state end) as state, (tfts.sourceType) as sourceType, tf.pos as pos, tf.resId as resId\",\n-                docIdCondition);\n+        String docIdCondition = eq(\"tf.document.id\", Parameters.DocumentId.placeHolder());\n+        return buildQuery(\"distinct tf.id as id, (case when tfts is null then 0 else tfts.state end) as state, (tfts.sourceType) as sourceType, tf.pos as pos, tf.resId as resId\", docIdCondition);\n     }\n \n     protected String buildSearchCondition() {\n@@ -131,8 +118,7 @@ public class FilterConstraintToQuery {\n         }\n         String searchInSourceCondition = null;\n         if (constraints.isSearchInSource()) {\n-            searchInSourceCondition = contentCriterion.withEntityAlias(\"tf\")\n-                    .contentsCriterionAsString();\n+            searchInSourceCondition = contentCriterion.withEntityAlias(\"tf\").contentsCriterionAsString();\n         }\n         String searchInTargetCondition = null;\n         if (constraints.isSearchInTarget()) {\n@@ -140,12 +126,9 @@ public class FilterConstraintToQuery {\n             targetConjunction.add(contentCriterion.contentsCriterionAsString());\n             targetConjunction.add(eq(\"textFlow\", \"tf\"));\n             targetConjunction.add(eq(\"locale\", Locale.placeHolder()));\n-            searchInTargetCondition = QueryBuilder.exists()\n-                    .from(\"HTextFlowTarget\")\n-                    .where(QueryBuilder.and(targetConjunction)).toQueryString();\n+            searchInTargetCondition = QueryBuilder.exists().from(\"HTextFlowTarget\").where(QueryBuilder.and(targetConjunction)).toQueryString();\n         }\n-        return QueryBuilder.or(searchInSourceCondition,\n-                searchInTargetCondition);\n+        return QueryBuilder.or(searchInSourceCondition, searchInTargetCondition);\n     }\n \n     protected boolean needToQueryNullTarget() {\n@@ -154,8 +137,7 @@ public class FilterConstraintToQuery {\n \n     protected String buildSourceConditionsOtherThanSearch() {\n         List<String> sourceConjunction = Lists.newArrayList();\n-        addToJunctionIfNotNull(sourceConjunction,\n-                buildSourceCommentCondition(constraints.getSourceComment()));\n+        addToJunctionIfNotNull(sourceConjunction, buildSourceCommentCondition(constraints.getSourceComment()));\n         addToJunctionIfNotNull(sourceConjunction, buildMsgContextCondition());\n         addToJunctionIfNotNull(sourceConjunction, buildResourceIdCondition());\n         if (sourceConjunction.isEmpty()) {\n@@ -166,12 +148,9 @@ public class FilterConstraintToQuery {\n \n     protected String buildTargetConditionsOtherThanSearch() {\n         List<String> targetConjunction = Lists.newArrayList();\n-        addToJunctionIfNotNull(targetConjunction,\n-                buildLastModifiedByCondition());\n-        addToJunctionIfNotNull(targetConjunction,\n-                buildTargetCommentCondition(constraints.getTransComment()));\n-        addToJunctionIfNotNull(targetConjunction,\n-                buildLastModifiedDateCondition());\n+        addToJunctionIfNotNull(targetConjunction, buildLastModifiedByCondition());\n+        addToJunctionIfNotNull(targetConjunction, buildTargetCommentCondition(constraints.getTransComment()));\n+        addToJunctionIfNotNull(targetConjunction, buildLastModifiedDateCondition());\n         if (targetConjunction.isEmpty()) {\n             return null;\n         }\n@@ -179,21 +158,15 @@ public class FilterConstraintToQuery {\n         String localeJoin = eq(\"tft.locale\", Locale.placeHolder());\n         targetConjunction.add(textFlowTargetJoin);\n         targetConjunction.add(localeJoin);\n-        String existQuery = QueryBuilder.exists().from(\"HTextFlowTarget tft\")\n-                .leftJoin(\"tft.lastModifiedBy.account acc\")\n-                .where(and(targetConjunction)).toQueryString();\n+        String existQuery = QueryBuilder.exists().from(\"HTextFlowTarget tft\").leftJoin(\"tft.lastModifiedBy.account acc\").where(and(targetConjunction)).toQueryString();\n         if (!needToQueryNullTarget()) {\n             return existQuery;\n         }\n-        String notExistQuery = QueryBuilder.notExists()\n-                .from(\"HTextFlowTarget tft\")\n-                .leftJoin(\"tft.lastModifiedBy.account acc\")\n-                .where(and(textFlowTargetJoin, localeJoin)).toQueryString();\n+        String notExistQuery = QueryBuilder.notExists().from(\"HTextFlowTarget tft\").leftJoin(\"tft.lastModifiedBy.account acc\").where(and(textFlowTargetJoin, localeJoin)).toQueryString();\n         return QueryBuilder.or(existQuery, notExistQuery);\n     }\n \n-    private static boolean addToJunctionIfNotNull(List<String> junction,\n-            String criterion) {\n+    private static boolean addToJunctionIfNotNull(List<String> junction, String criterion) {\n         if (criterion != null) {\n             junction.add(criterion);\n             return true;\n@@ -238,19 +211,16 @@ public class FilterConstraintToQuery {\n         String changedAfter = null;\n         String changedBefore = null;\n         if (changedAfterTime != null) {\n-            changedAfter = HqlCriterion.gt(\"tft.lastChanged\",\n-                    LastChangedAfter.placeHolder());\n+            changedAfter = HqlCriterion.gt(\"tft.lastChanged\", LastChangedAfter.placeHolder());\n         }\n         if (changedBeforeTime != null) {\n-            changedBefore = HqlCriterion.lt(\"tft.lastChanged\",\n-                    LastChangedBefore.placeHolder());\n+            changedBefore = HqlCriterion.lt(\"tft.lastChanged\", LastChangedBefore.placeHolder());\n         }\n         return QueryBuilder.and(changedAfter, changedBefore);\n     }\n \n     protected String buildTargetCondition() {\n-        if (constraints.getIncludedStates().hasAllStates() &&\n-            !constraints.isIncludedMT()) {\n+        if (constraints.getIncludedStates().hasAllStates() && !constraints.isIncludedMT()) {\n             return null;\n         }\n         List<String> conjunction = Lists.newArrayList();\n@@ -261,20 +231,13 @@ public class FilterConstraintToQuery {\n         }\n         String whereClause = and(conjunction);\n         if (!constraints.getIncludedStates().hasAllStates()) {\n-            whereClause = and(whereClause,\n-                String.format(\"state in (%s)\", ContentStateList.placeHolder()));\n+            whereClause = and(whereClause, String.format(\"state in (%s)\", ContentStateList.placeHolder()));\n         }\n-        String condition = QueryBuilder.exists().from(\"HTextFlowTarget\")\n-            .where(whereClause).toQueryString();\n-\n-        if (!constraints.getIncludedStates().hasAllStates() &&\n-            constraints.getIncludedStates().hasNew()) {\n-            String nullTargetCondition = String.format(\n-                \"%s not in indices(tf.targets)\", Locale.placeHolder());\n+        String condition = QueryBuilder.exists().from(\"HTextFlowTarget\").where(whereClause).toQueryString();\n+        if (!constraints.getIncludedStates().hasAllStates() && constraints.getIncludedStates().hasNew()) {\n+            String nullTargetCondition = String.format(\"%s not in indices(tf.targets)\", Locale.placeHolder());\n             if (hasSearch && constraints.isSearchInSource()) {\n-                nullTargetCondition =\n-                    and(nullTargetCondition, contentCriterion\n-                        .withEntityAlias(\"tf\").contentsCriterionAsString());\n+                nullTargetCondition = and(nullTargetCondition, contentCriterion.withEntityAlias(\"tf\").contentsCriterionAsString());\n             }\n             return QueryBuilder.or(condition, nullTargetCondition);\n         }\n@@ -289,16 +252,13 @@ public class FilterConstraintToQuery {\n             return eq(\"acc.username\", LastModifiedBy.placeHolder());\n         }\n         String nullLastModifiedByCondition = isNull(\"tft.lastModifiedBy\");\n-        String excludeUsernameCondition =\n-                ne(\"acc.username\", LastModifiedBy.placeHolder());\n-        return QueryBuilder.or(nullLastModifiedByCondition,\n-                excludeUsernameCondition);\n+        String excludeUsernameCondition = ne(\"acc.username\", LastModifiedBy.placeHolder());\n+        return QueryBuilder.or(nullLastModifiedByCondition, excludeUsernameCondition);\n     }\n     // check if the term have exclude sign '-'\n \n     private boolean isExcludeSearchTerm(@Nonnull String term) {\n-        return StringUtils.isEmpty(term) ? false\n-                : (term.startsWith(\"-\") && term.length() > 1);\n+        return StringUtils.isEmpty(term) ? false : (term.startsWith(\"-\") && term.length() > 1);\n     }\n     // remove exclude sign '-' from term\n \n@@ -311,68 +271,51 @@ public class FilterConstraintToQuery {\n \n     public Query setQueryParameters(Query textFlowQuery, HLocale hLocale) {\n         if (documentId != null) {\n-            textFlowQuery.setParameter(Parameters.DocumentId.namedParam(),\n-                    documentId.getId());\n+            textFlowQuery.setParameter(Parameters.DocumentId.namedParam(), documentId.getId());\n         } else {\n-            textFlowQuery.setParameterList(DocumentIdList.namedParam(),\n-                    documentIds);\n+            textFlowQuery.setParameterList(DocumentIdList.namedParam(), documentIds);\n         }\n         textFlowQuery.setParameter(Locale.namedParam(), hLocale.getId());\n         if (hasSearch) {\n-            textFlowQuery.setParameter(Parameters.SearchString.namedParam(),\n-                    searchString);\n+            textFlowQuery.setParameter(Parameters.SearchString.namedParam(), searchString);\n         }\n         if (!constraints.getIncludedStates().hasAllStates()) {\n-            textFlowQuery.setParameterList(ContentStateList.namedParam(),\n-                    constraints.getIncludedStates().asList());\n+            textFlowQuery.setParameterList(ContentStateList.namedParam(), constraints.getIncludedStates().asList());\n         }\n         if (constraints.isIncludedMT()) {\n-            textFlowQuery.setParameter(IncludeMT.namedParam(),\n-                TranslationSourceType.MACHINE_TRANS);\n-        }\n-        addExactMatchParamIfPresent(textFlowQuery, constraints.getResId(),\n-                ResId);\n-        addWildcardSearchParamIfPresent(textFlowQuery,\n-                constraints.getMsgContext(), MsgContext);\n-        addWildcardSearchParamIfPresent(textFlowQuery,\n-                constraints.getSourceComment(), SourceComment);\n-        addWildcardSearchParamIfPresent(textFlowQuery,\n-                constraints.getTransComment(), TargetComment);\n-        String lastModifiedByUser =\n-                getExcludeSearchTerm(constraints.getLastModifiedByUser());\n-        addExactMatchParamIfPresent(textFlowQuery, lastModifiedByUser,\n-                LastModifiedBy);\n+            textFlowQuery.setParameter(IncludeMT.namedParam(), TranslationSourceType.MACHINE_TRANS);\n+        }\n+        addExactMatchParamIfPresent(textFlowQuery, constraints.getResId(), ResId);\n+        addWildcardSearchParamIfPresent(textFlowQuery, constraints.getMsgContext(), MsgContext);\n+        addWildcardSearchParamIfPresent(textFlowQuery, constraints.getSourceComment(), SourceComment);\n+        addWildcardSearchParamIfPresent(textFlowQuery, constraints.getTransComment(), TargetComment);\n+        String lastModifiedByUser = getExcludeSearchTerm(constraints.getLastModifiedByUser());\n+        addExactMatchParamIfPresent(textFlowQuery, lastModifiedByUser, LastModifiedBy);\n         if (constraints.getChangedAfter() != null) {\n-            textFlowQuery.setParameter(LastChangedAfter.namedParam(),\n-                    constraints.getChangedAfter().toDate());\n+            textFlowQuery.setParameter(LastChangedAfter.namedParam(), constraints.getChangedAfter().toDate());\n         }\n         if (constraints.getChangedBefore() != null) {\n-            textFlowQuery.setParameter(LastChangedBefore.namedParam(),\n-                    constraints.getChangedBefore().toDate());\n+            textFlowQuery.setParameter(LastChangedBefore.namedParam(), constraints.getChangedBefore().toDate());\n         }\n         return textFlowQuery;\n     }\n \n-    private static void addExactMatchParamIfPresent(Query textFlowQuery,\n-            String filterProperty, Parameters filterParam) {\n+    private static void addExactMatchParamIfPresent(Query textFlowQuery, String filterProperty, Parameters filterParam) {\n         if (!Strings.isNullOrEmpty(filterProperty)) {\n-            textFlowQuery.setParameter(filterParam.namedParam(),\n-                    filterProperty);\n+            textFlowQuery.setParameter(filterParam.namedParam(), filterProperty);\n         }\n     }\n \n-    private static Query addWildcardSearchParamIfPresent(Query textFlowQuery,\n-            String filterProperty, Parameters filterParam) {\n+    private static Query addWildcardSearchParamIfPresent(Query textFlowQuery, String filterProperty, Parameters filterParam) {\n         if (!Strings.isNullOrEmpty(filterProperty)) {\n-            String escapedAndLowered =\n-                    HqlCriterion.escapeWildcard(filterProperty.toLowerCase());\n-            textFlowQuery.setParameter(filterParam.namedParam(),\n-                    HqlCriterion.match(escapedAndLowered, MatchMode.ANYWHERE));\n+            String escapedAndLowered = HqlCriterion.escapeWildcard(filterProperty.toLowerCase());\n+            textFlowQuery.setParameter(filterParam.namedParam(), HqlCriterion.match(escapedAndLowered, MatchMode.ANYWHERE));\n         }\n         return textFlowQuery;\n     }\n \n     enum Parameters {\n+\n         SearchString,\n         ContentStateList,\n         IncludeMT,\n@@ -399,4 +342,4 @@ public class FilterConstraintToQuery {\n     void setContentCriterion(final ContentCriterion contentCriterion) {\n         this.contentCriterion = contentCriterion;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 121
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "307",
                    "column": "39",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/53/FilterConstraintToQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/53/FilterConstraintToQuery.java\nindex 7a81aef3c4e..0619ceac3d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/53/FilterConstraintToQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/53/FilterConstraintToQuery.java\n@@ -304,8 +304,9 @@ public class FilterConstraintToQuery {\n \n     private String getExcludeSearchTerm(@Nonnull String term) {\n         if (isExcludeSearchTerm(term)) {\n-            return term.substring(1); // remove '-' sign in front\n-        }\n+            return term.substring(1);\n+            // remove '-' sign in front\n+         }\n         return term;\n     }\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff",
        "styler_random"
    ]
}