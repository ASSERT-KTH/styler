{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3914",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3914/ShellServer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3914/ShellServer.java\nindex dd56e01dfb2..0b4984cb4ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3914/ShellServer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3914/ShellServer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell;\n \n import java.io.Serializable;\n@@ -30,114 +31,123 @@ import java.util.Map;\n  */\n public interface ShellServer extends Remote\n {\n-    /**\n-     * @return the name of this server.\n-     * @throws RemoteException RMI error.\n-     */\n-    String getName() throws RemoteException;\n+  /**\n+   * @return the name of this server.\n+   * @throws RemoteException RMI error.\n+   */\n+  String getName() throws RemoteException;\n \n-    /**\n-     * Receives a command line (probably from a {@link ShellClient}) and reacts\n-     * to it. Output is written to the {@link Output} object.\n-     * @param clientID identifying the client.\n-     * @param line the command line to react to.\n-     * @param out where output should go (like System.out).\n-     * @return some result from the execution, it's up to the client to\n-     * interpret the result, if any. F.ex. \"e\" could mean that the client\n-     * should exit, in response to a request \"exit\".\n-     * @throws ShellException if there was an error in the\n-     * interpretation/execution of the command line.\n-     * @throws RemoteException RMI error.\n-     */\n-    Response interpretLine( Serializable clientID, String line, Output out )\n-        throws ShellException, RemoteException;\n+  /**\n+   * Receives a command line (probably from a {@link ShellClient}) and reacts\n+   * to it. Output is written to the {@link Output} object.\n+   *\n+   * @param clientID identifying the client.\n+   * @param line     the command line to react to.\n+   * @param out      where output should go (like System.out).\n+   * @return some result from the execution, it's up to the client to\n+   * interpret the result, if any. F.ex. \"e\" could mean that the client\n+   * should exit, in response to a request \"exit\".\n+   * @throws ShellException  if there was an error in the\n+   *                         interpretation/execution of the command line.\n+   * @throws RemoteException RMI error.\n+   */\n+  Response interpretLine(Serializable clientID, String line, Output out)\n+      throws ShellException, RemoteException;\n \n-    /**\n-     * Interprets a variable from a client session and returns the\n-     * interpreted result.\n-     * @param clientID identifying the client.\n-     * @param key the variable key.\n-     * help the interpretation.\n-     * @return the interpreted value.\n-     * @throws ShellException if some error should occur.\n-     * @throws RemoteException RMI error.\n-     */\n-    Serializable interpretVariable( Serializable clientID, String key ) throws ShellException, RemoteException;\n+  /**\n+   * Interprets a variable from a client session and returns the\n+   * interpreted result.\n+   *\n+   * @param clientID identifying the client.\n+   * @param key      the variable key.\n+   *                 help the interpretation.\n+   * @return the interpreted value.\n+   * @throws ShellException  if some error should occur.\n+   * @throws RemoteException RMI error.\n+   */\n+  Serializable interpretVariable(Serializable clientID, String key) throws ShellException, RemoteException;\n \n-    /**\n-     * Marks the client's active transaction as terminated.\n-     * @param clientID identifying the client.\n-     * @throws RemoteException RMI error.\n-     */\n-    void terminate( Serializable clientID ) throws RemoteException;\n+  /**\n+   * Marks the client's active transaction as terminated.\n+   *\n+   * @param clientID identifying the client.\n+   * @throws RemoteException RMI error.\n+   */\n+  void terminate(Serializable clientID) throws RemoteException;\n \n-    /**\n-     * @param initialSession the initial session variables that the client would\n-     * like to override or add to any initial server session variables.\n-     * @return a nice welcome for a client. Typically a client connects and\n-     * asks for a greeting message to display to the user.\n-     * @throws RemoteException RMI error.\n-     * @throws ShellException wraps general errors\n-     */\n-    Welcome welcome( Map<String, Serializable> initialSession ) throws RemoteException, ShellException;\n+  /**\n+   * @param initialSession the initial session variables that the client would\n+   *                       like to override or add to any initial server session variables.\n+   * @return a nice welcome for a client. Typically a client connects and\n+   * asks for a greeting message to display to the user.\n+   * @throws RemoteException RMI error.\n+   * @throws ShellException  wraps general errors\n+   */\n+  Welcome welcome(Map<String, Serializable> initialSession) throws RemoteException, ShellException;\n \n-    /**\n-     * Notifies this server that the client identified by {@code clientID} is about to\n-     * leave, so any session associated with it will be removed.\n-     * @param clientID the ID which identifies the client which is leaving.\n-     * These IDs are handed out from {@link #welcome(Map)}.\n-     * @throws RemoteException RMI error.\n-     */\n-    void leave( Serializable clientID ) throws RemoteException;\n+  /**\n+   * Notifies this server that the client identified by {@code clientID} is about to\n+   * leave, so any session associated with it will be removed.\n+   *\n+   * @param clientID the ID which identifies the client which is leaving.\n+   *                 These IDs are handed out from {@link #welcome(Map)}.\n+   * @throws RemoteException RMI error.\n+   */\n+  void leave(Serializable clientID) throws RemoteException;\n \n-    /**\n-     * Shuts down the server.\n-     * @throws RemoteException RMI error.\n-     */\n-    void shutdown() throws RemoteException;\n+  /**\n+   * Shuts down the server.\n+   *\n+   * @throws RemoteException RMI error.\n+   */\n+  void shutdown() throws RemoteException;\n \n-    /**\n-     * Makes this server available at {@code localhost} for clients to connect to via RMI.\n-     * @param port the RMI port.\n-     * @param name the RMI name.\n-     * @throws RemoteException RMI error.\n-     */\n-    void makeRemotelyAvailable( int port, String name ) throws RemoteException;\n+  /**\n+   * Makes this server available at {@code localhost} for clients to connect to via RMI.\n+   *\n+   * @param port the RMI port.\n+   * @param name the RMI name.\n+   * @throws RemoteException RMI error.\n+   */\n+  void makeRemotelyAvailable(int port, String name) throws RemoteException;\n \n-    /**\n-     * Makes this server available at the specific {@code host} for clients to connect to via RMI.\n-     * @param host the host to make this server available at.\n-     * @param port the RMI port.\n-     * @param name the RMI name.\n-     * @throws RemoteException RMI error.\n-     */\n-    void makeRemotelyAvailable( String host, int port, String name ) throws RemoteException;\n+  /**\n+   * Makes this server available at the specific {@code host} for clients to connect to via RMI.\n+   *\n+   * @param host the host to make this server available at.\n+   * @param port the RMI port.\n+   * @param name the RMI name.\n+   * @throws RemoteException RMI error.\n+   */\n+  void makeRemotelyAvailable(String host, int port, String name) throws RemoteException;\n \n-    /**\n-     * @return all the available commands one can issue to this server.\n-     * @throws RemoteException RMI error.\n-     */\n-    String[] getAllAvailableCommands() throws RemoteException;\n+  /**\n+   * @return all the available commands one can issue to this server.\n+   * @throws RemoteException RMI error.\n+   */\n+  String[] getAllAvailableCommands() throws RemoteException;\n \n-    /**\n-     * Tries to complete a half-entered line and returns possible candidates,\n-     * in the form of a {@link TabCompletion}.\n-     * @param clientID identifying the client.\n-     * @param partOfLine the half-entered line to try to complete.\n-     * @return a {@link TabCompletion} containing the possible candidates for completion.\n-     * @throws ShellException if some error should occur.\n-     * @throws RemoteException RMI error.\n-     */\n-    TabCompletion tabComplete( Serializable clientID, String partOfLine )\n-            throws ShellException, RemoteException;\n+  /**\n+   * Tries to complete a half-entered line and returns possible candidates,\n+   * in the form of a {@link TabCompletion}.\n+   *\n+   * @param clientID   identifying the client.\n+   * @param partOfLine the half-entered line to try to complete.\n+   * @return a {@link TabCompletion} containing the possible candidates for completion.\n+   * @throws ShellException  if some error should occur.\n+   * @throws RemoteException RMI error.\n+   */\n+  TabCompletion tabComplete(Serializable clientID, String partOfLine)\n+      throws ShellException, RemoteException;\n \n-    /**\n-     * Sets a session property for the session identified by {@code clientID}.\n-     * @param clientID the client ID to identify the session.\n-     * @param key the property key.\n-     * @param value the property value.\n-     * @throws RemoteException RMI error.\n-     * @throws ShellException if an error occurs during initialization.\n-     */\n-    void setSessionVariable( Serializable clientID, String key, Object value ) throws RemoteException, ShellException;\n+  /**\n+   * Sets a session property for the session identified by {@code clientID}.\n+   *\n+   * @param clientID the client ID to identify the session.\n+   * @param key      the property key.\n+   * @param value    the property value.\n+   * @throws RemoteException RMI error.\n+   * @throws ShellException  if an error occurs during initialization.\n+   */\n+  void setSessionVariable(Serializable clientID, String key, Object value) throws RemoteException, ShellException;\n }\n",
            "diff_size": 109
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3914/ShellServer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3914/ShellServer.java\nindex dd56e01dfb2..1c11e4f8dff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3914/ShellServer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3914/ShellServer.java\n@@ -49,10 +49,9 @@ public interface ShellServer extends Remote\n      * interpretation/execution of the command line.\n      * @throws RemoteException RMI error.\n      */\n-    Response interpretLine( Serializable clientID, String line, Output out )\n-        throws ShellException, RemoteException;\n+    Response interpretLine( Serializable clientID, String line, Output out ) throws ShellException, RemoteException;\n \n-    /**\n+/**\n      * Interprets a variable from a client session and returns the\n      * interpreted result.\n      * @param clientID identifying the client.\n@@ -79,7 +78,7 @@ public interface ShellServer extends Remote\n      * @throws RemoteException RMI error.\n      * @throws ShellException wraps general errors\n      */\n-    Welcome welcome( Map<String, Serializable> initialSession ) throws RemoteException, ShellException;\n+    Welcome welcome( Map<String,Serializable> initialSession ) throws RemoteException, ShellException;\n \n     /**\n      * Notifies this server that the client identified by {@code clientID} is about to\n@@ -128,10 +127,9 @@ public interface ShellServer extends Remote\n      * @throws ShellException if some error should occur.\n      * @throws RemoteException RMI error.\n      */\n-    TabCompletion tabComplete( Serializable clientID, String partOfLine )\n-            throws ShellException, RemoteException;\n+    TabCompletion tabComplete( Serializable clientID, String partOfLine ) throws ShellException, RemoteException;\n \n-    /**\n+/**\n      * Sets a session property for the session identified by {@code clientID}.\n      * @param clientID the client ID to identify the session.\n      * @param key the property key.\n@@ -140,4 +138,4 @@ public interface ShellServer extends Remote\n      * @throws ShellException if an error occurs during initialization.\n      */\n     void setSessionVariable( Serializable clientID, String key, Object value ) throws RemoteException, ShellException;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}