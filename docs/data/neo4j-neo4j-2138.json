{
    "project_name": "neo4j-neo4j",
    "error_id": "2138",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "71",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2138/RelationshipValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2138/RelationshipValue.java\nindex b5eca743290..00f6c148cbb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2138/RelationshipValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2138/RelationshipValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.virtual;\n \n import org.neo4j.values.AnyValueWriter;\n@@ -30,28 +31,27 @@ public abstract class RelationshipValue extends VirtualRelationshipValue\n {\n     private final long id;\n \n-    protected RelationshipValue( long id )\n+    protected RelationshipValue(long id)\n     {\n         this.id = id;\n     }\n \n     @Override\n-    public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n+    public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n     {\n-        if ( writer.entityMode() == REFERENCE )\n+        if (writer.entityMode() == REFERENCE)\n         {\n-            writer.writeRelationshipReference( id );\n-        }\n-        else\n+            writer.writeRelationshipReference(id);\n+        } else\n         {\n-            writer.writeRelationship( id, startNode().id(), endNode().id(), type(), properties() );\n+            writer.writeRelationship(id, startNode().id(), endNode().id(), type(), properties());\n         }\n     }\n \n     @Override\n     public String toString()\n     {\n-        return format( \"-[%d]-\", id );\n+        return format(\"-[%d]-\", id);\n     }\n \n     public abstract NodeValue startNode();\n@@ -68,12 +68,12 @@ public abstract class RelationshipValue extends VirtualRelationshipValue\n \n     public abstract MapValue properties();\n \n-    public NodeValue otherNode( VirtualNodeValue node )\n+    public NodeValue otherNode(VirtualNodeValue node)\n     {\n-        return node.equals( startNode() ) ? endNode() : startNode();\n+        return node.equals(startNode()) ? endNode() : startNode();\n     }\n \n-    public long otherNodeId( long node )\n+    public long otherNodeId(long node)\n     {\n         return node == startNode().id() ? endNode().id() : startNode().id();\n     }\n@@ -84,7 +84,8 @@ public abstract class RelationshipValue extends VirtualRelationshipValue\n         return \"Relationship\";\n     }\n \n-    private static final long DIRECT_RELATIONSHIP_VALUE_SHALLOW_SIZE = shallowSizeOfInstance( DirectRelationshipValue.class );\n+    private static final long DIRECT_RELATIONSHIP_VALUE_SHALLOW_SIZE = shallowSizeOfInstance(DirectRelationshipValue.class);\n+\n     static class DirectRelationshipValue extends RelationshipValue\n     {\n         private final NodeValue startNode;\n@@ -92,9 +93,9 @@ public abstract class RelationshipValue extends VirtualRelationshipValue\n         private final TextValue type;\n         private final MapValue properties;\n \n-        DirectRelationshipValue( long id, NodeValue startNode, NodeValue endNode, TextValue type, MapValue properties )\n+        DirectRelationshipValue(long id, NodeValue startNode, NodeValue endNode, TextValue type, MapValue properties)\n         {\n-            super( id );\n+            super(id);\n             assert properties != null;\n \n             this.startNode = startNode;\n@@ -131,10 +132,10 @@ public abstract class RelationshipValue extends VirtualRelationshipValue\n         public long estimatedHeapUsage()\n         {\n             return DIRECT_RELATIONSHIP_VALUE_SHALLOW_SIZE +\n-                    startNode.estimatedHeapUsage() +\n-                    endNode.estimatedHeapUsage() +\n-                    type.estimatedHeapUsage() +\n-                    properties.estimatedHeapUsage();\n+              startNode.estimatedHeapUsage() +\n+              endNode.estimatedHeapUsage() +\n+              type.estimatedHeapUsage() +\n+              properties.estimatedHeapUsage();\n         }\n     }\n }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}