{
    "project_name": "neo4j-neo4j",
    "error_id": "394",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "133",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "155",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/394/SystemGraphCredential.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/394/SystemGraphCredential.java\nindex 17d6f294870..edf498dfc48 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/394/SystemGraphCredential.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/394/SystemGraphCredential.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cypher.internal.security;\n \n import org.apache.shiro.authc.AuthenticationToken;\n@@ -38,20 +39,20 @@ public class SystemGraphCredential implements Credential\n     private final SecureHasher secureHasher;\n     private final SimpleHash hashedCredentials;\n \n-    private SystemGraphCredential( SecureHasher secureHasher, SimpleHash hash )\n+    private SystemGraphCredential(SecureHasher secureHasher, SimpleHash hash)\n     {\n         this.secureHasher = secureHasher;\n         this.hashedCredentials = hash;\n     }\n \n     @Override\n-    public boolean matchesPassword( byte[] password )\n+    public boolean matchesPassword(byte[] password)\n     {\n         // TODO: Create a new CredentialMatcher class that extends HashedCredentialsMatcher\n         //       and adds a tailored match-method so we do not need to create these\n         //       virtual AuthenticationToken and AuthenticationInfo objects\n-        return secureHasher.getHashedCredentialsMatcherWithIterations( hashedCredentials.getIterations() ).doCredentialsMatch( new AuthenticationToken()\n-        // This is just password wrapped in an AuthenticationToken\n+        return secureHasher.getHashedCredentialsMatcherWithIterations(hashedCredentials.getIterations()).doCredentialsMatch(new AuthenticationToken()\n+          // This is just password wrapped in an AuthenticationToken\n         {\n             @Override\n             public Object getCredentials()\n@@ -65,7 +66,7 @@ public class SystemGraphCredential implements Credential\n                 return null;\n             }\n         }, new SaltedAuthenticationInfo()\n-        // This is just hashedCredentials wrapped in an AuthenticationInfo\n+          // This is just hashedCredentials wrapped in an AuthenticationInfo\n         {\n             @Override\n             public Object getCredentials()\n@@ -84,94 +85,92 @@ public class SystemGraphCredential implements Credential\n             {\n                 return null;\n             }\n-        } );\n+        });\n     }\n \n-    public static SystemGraphCredential createCredentialForPassword( byte[] password, SecureHasher secureHasher )\n+    public static SystemGraphCredential createCredentialForPassword(byte[] password, SecureHasher secureHasher)\n     {\n-        SimpleHash hash = secureHasher.hash( password );\n-        return new SystemGraphCredential( secureHasher, hash );\n+        SimpleHash hash = secureHasher.hash(password);\n+        return new SystemGraphCredential(secureHasher, hash);\n     }\n \n     @Override\n     public String serialize()\n     {\n-        return serialize( this );\n+        return serialize(this);\n     }\n \n-    public static String serialize( SystemGraphCredential credential )\n+    public static String serialize(SystemGraphCredential credential)\n     {\n         String algorithm = credential.hashedCredentials.getAlgorithmName();\n-        String iterations = Integer.toString( credential.hashedCredentials.getIterations() );\n+        String iterations = Integer.toString(credential.hashedCredentials.getIterations());\n         String encodedSalt = credential.hashedCredentials.getSalt().toHex();\n         String encodedPassword = credential.hashedCredentials.toHex();\n-        return String.join( CREDENTIAL_SEPARATOR, algorithm, encodedPassword, encodedSalt, iterations );\n+        return String.join(CREDENTIAL_SEPARATOR, algorithm, encodedPassword, encodedSalt, iterations);\n     }\n \n-    public static String serialize( byte[] encodedCredential ) throws InvalidArgumentsException\n+    public static String serialize(byte[] encodedCredential) throws InvalidArgumentsException\n     {\n-        Pattern validEncryptedPassword = Pattern.compile( String.join( CREDENTIAL_SEPARATOR, \"^([0-9])\", \"([A-Fa-f0-9]+)\", \"([A-Fa-f0-9]+)\" ) );\n-        String encryptedPasswordString = new String( encodedCredential, StandardCharsets.UTF_8 );\n+        Pattern validEncryptedPassword = Pattern.compile(String.join(CREDENTIAL_SEPARATOR, \"^([0-9])\", \"([A-Fa-f0-9]+)\", \"([A-Fa-f0-9]+)\"));\n+        String encryptedPasswordString = new String(encodedCredential, StandardCharsets.UTF_8);\n \n-        Matcher matcher = validEncryptedPassword.matcher( encryptedPasswordString );\n-        if ( matcher.matches() )\n+        Matcher matcher = validEncryptedPassword.matcher(encryptedPasswordString);\n+        if (matcher.matches())\n         {\n-            String version = matcher.group( 1 );\n-            String hash = matcher.group( 2 );\n-            String salt = matcher.group( 3 );\n-            SecureHasherConfiguration configuration = SecureHasherConfigurations.configurations.get( version );\n+            String version = matcher.group(1);\n+            String hash = matcher.group(2);\n+            String salt = matcher.group(3);\n+            SecureHasherConfiguration configuration = SecureHasherConfigurations.configurations.get(version);\n \n-            if ( configuration == null )\n+            if (configuration == null)\n             {\n-                throw new InvalidArgumentsException( \"The encryption version specified is not available.\" );\n+                throw new InvalidArgumentsException(\"The encryption version specified is not available.\");\n             }\n \n-            return String.join( CREDENTIAL_SEPARATOR, configuration.algorithm, hash, salt, String.valueOf( configuration.iterations ) );\n-        }\n-        else\n+            return String.join(CREDENTIAL_SEPARATOR, configuration.algorithm, hash, salt, String.valueOf(configuration.iterations));\n+        } else\n         {\n-            throw new InvalidArgumentsException( \"Incorrect format of encrypted password. Correct format is '<encryption-version>,<hash>,<salt>'.\" );\n+            throw new InvalidArgumentsException(\"Incorrect format of encrypted password. Correct format is '<encryption-version>,<hash>,<salt>'.\");\n         }\n     }\n \n-    public static String maskSerialized( String serialized ) throws InvalidArgumentsException\n+    public static String maskSerialized(String serialized) throws InvalidArgumentsException\n     {\n         Pattern validSerialized =\n-                Pattern.compile( String.join( CREDENTIAL_SEPARATOR, \"^([A-Za-z0-9\\\\-]+)\", \"([A-Fa-f0-9]+)\", \"([A-Fa-f0-9]+)\" ) + \"(?:,([0-9]+))?\" );\n+          Pattern.compile(String.join(CREDENTIAL_SEPARATOR, \"^([A-Za-z0-9\\\\-]+)\", \"([A-Fa-f0-9]+)\", \"([A-Fa-f0-9]+)\") + \"(?:,([0-9]+))?\");\n \n-        Matcher matcher = validSerialized.matcher( serialized );\n-        if ( matcher.matches() )\n+        Matcher matcher = validSerialized.matcher(serialized);\n+        if (matcher.matches())\n         {\n-            String algorithm = matcher.group( 1 );\n-            String hash = matcher.group( 2 );\n-            String salt = matcher.group( 3 );\n-            String iterationGroup = matcher.group( 4 );\n-            int iterations = iterationGroup != null ? Integer.parseInt( iterationGroup ) : 1;\n-            String version = SecureHasherConfigurations.getVersionForConfiguration( algorithm, iterations );\n-\n-            return String.join( CREDENTIAL_SEPARATOR, version, hash, salt );\n-        }\n-        else\n+            String algorithm = matcher.group(1);\n+            String hash = matcher.group(2);\n+            String salt = matcher.group(3);\n+            String iterationGroup = matcher.group(4);\n+            int iterations = iterationGroup != null ? Integer.parseInt(iterationGroup) : 1;\n+            String version = SecureHasherConfigurations.getVersionForConfiguration(algorithm, iterations);\n+\n+            return String.join(CREDENTIAL_SEPARATOR, version, hash, salt);\n+        } else\n         {\n-            throw new InvalidArgumentsException( \"Invalid serialized credential.\" );\n+            throw new InvalidArgumentsException(\"Invalid serialized credential.\");\n         }\n     }\n \n-    public static SystemGraphCredential deserialize( String part, SecureHasher secureHasher ) throws FormatException\n+    public static SystemGraphCredential deserialize(String part, SecureHasher secureHasher) throws FormatException\n     {\n-        String[] split = part.split( CREDENTIAL_SEPARATOR, -1 );\n-        if ( split.length < 3 || split.length > 4 )\n+        String[] split = part.split(CREDENTIAL_SEPARATOR, -1);\n+        if (split.length < 3 || split.length > 4)\n         {\n-            throw new FormatException( \"wrong number of credential fields\" );\n+            throw new FormatException(\"wrong number of credential fields\");\n         }\n         String algorithm = split[0];\n-        byte[] decodedPassword = Hex.decode( split[1] );\n-        byte[] decodedSalt = Hex.decode( split[2] );\n-        int iterations = split.length == 4 ? Integer.parseInt( split[3] ) : 1;\n-        SimpleHash hash = new SimpleHash( algorithm );\n-        hash.setBytes( decodedPassword );\n-        hash.setSalt( ByteSource.Util.bytes( decodedSalt ) );\n-        hash.setIterations( iterations );\n-        return new SystemGraphCredential( secureHasher, hash );\n+        byte[] decodedPassword = Hex.decode(split[1]);\n+        byte[] decodedSalt = Hex.decode(split[2]);\n+        int iterations = split.length == 4 ? Integer.parseInt(split[3]) : 1;\n+        SimpleHash hash = new SimpleHash(algorithm);\n+        hash.setBytes(decodedPassword);\n+        hash.setSalt(ByteSource.Util.bytes(decodedSalt));\n+        hash.setIterations(iterations);\n+        return new SystemGraphCredential(secureHasher, hash);\n     }\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/394/SystemGraphCredential.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/394/SystemGraphCredential.java\nindex 17d6f294870..736967a881c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/394/SystemGraphCredential.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/394/SystemGraphCredential.java\n@@ -174,4 +174,4 @@ public class SystemGraphCredential implements Credential\n         hash.setIterations( iterations );\n         return new SystemGraphCredential( secureHasher, hash );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}