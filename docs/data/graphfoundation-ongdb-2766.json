{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2766",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "170",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2766/EagerResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2766/EagerResult.java\nindex 52e36ed5981..e8554d7e11c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2766/EagerResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2766/EagerResult.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cypher.internal.javacompat;\n \n import java.io.PrintWriter;\n@@ -44,248 +45,247 @@ import static java.lang.System.lineSeparator;\n  */\n class EagerResult implements Result, QueryResultProvider\n {\n-    private static final String ITEM_SEPARATOR = \", \";\n-    private final Result originalResult;\n-    private final VersionContext versionContext;\n-    private final List<Map<String, Object>> queryResult = new ArrayList<>();\n-    private int cursor;\n-\n-    EagerResult( Result result, VersionContext versionContext )\n+  private static final String ITEM_SEPARATOR = \", \";\n+  private final Result originalResult;\n+  private final VersionContext versionContext;\n+  private final List<Map<String, Object>> queryResult = new ArrayList<>();\n+  private int cursor;\n+\n+  EagerResult(Result result, VersionContext versionContext)\n+  {\n+    this.originalResult = result;\n+    this.versionContext = versionContext;\n+  }\n+\n+  public void consume()\n+  {\n+    while (originalResult.hasNext())\n     {\n-        this.originalResult = result;\n-        this.versionContext = versionContext;\n+      queryResult.add(originalResult.next());\n     }\n-\n-    public void consume()\n+  }\n+\n+  @Override\n+  public QueryExecutionType getQueryExecutionType()\n+  {\n+    return originalResult.getQueryExecutionType();\n+  }\n+\n+  @Override\n+  public List<String> columns()\n+  {\n+    return originalResult.columns();\n+  }\n+\n+  @Override\n+  public <T> ResourceIterator<T> columnAs(String name)\n+  {\n+    return new EagerResultResourceIterator<>(name);\n+  }\n+\n+  @Override\n+  public boolean hasNext()\n+  {\n+    return cursor < queryResult.size();\n+  }\n+\n+  @Override\n+  public Map<String, Object> next()\n+  {\n+    return queryResult.get(cursor++);\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    // nothing to close. Original result is already closed at this point\n+  }\n+\n+  @Override\n+  public QueryStatistics getQueryStatistics()\n+  {\n+    return originalResult.getQueryStatistics();\n+  }\n+\n+  @Override\n+  public ExecutionPlanDescription getExecutionPlanDescription()\n+  {\n+    return originalResult.getExecutionPlanDescription();\n+  }\n+\n+  @Override\n+  public QueryResult queryResult()\n+  {\n+    return new EagerQueryResult();\n+  }\n+\n+  @Override\n+  public String resultAsString()\n+  {\n+    List<String> columns = originalResult.columns();\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(String.join(ITEM_SEPARATOR, columns));\n+    if (!queryResult.isEmpty())\n     {\n-        while ( originalResult.hasNext() )\n-        {\n-            queryResult.add( originalResult.next() );\n-        }\n+      builder.append(lineSeparator());\n+      int numberOfColumns = columns.size();\n+      for (Map<String, Object> row : queryResult)\n+      {\n+        writeRow(columns, builder, numberOfColumns, row);\n+        builder.append(lineSeparator());\n+      }\n     }\n+    return builder.toString();\n+  }\n+\n+  @Override\n+  public void writeAsStringTo(PrintWriter writer)\n+  {\n+    writer.print(resultAsString());\n+  }\n+\n+  @Override\n+  public void remove()\n+  {\n+    throw new UnsupportedOperationException(\"Not supported\");\n+  }\n+\n+  @Override\n+  public Iterable<Notification> getNotifications()\n+  {\n+    return originalResult.getNotifications();\n+  }\n+\n+  @Override\n+  public <VisitationException extends Exception> void accept(ResultVisitor<VisitationException> visitor)\n+      throws VisitationException\n+  {\n+    try\n+    {\n+      for (Map<String, Object> map : queryResult)\n+      {\n+        visitor.visit(new MapRow(map));\n+      }\n+      checkIfDirty();\n+    } catch (NotFoundException e)\n+    {\n+      checkIfDirty();\n+      throw e;\n+    }\n+  }\n \n-    @Override\n-    public QueryExecutionType getQueryExecutionType()\n+  private void checkIfDirty()\n+  {\n+    if (versionContext.isDirty())\n     {\n-        return originalResult.getQueryExecutionType();\n+      throw new QueryExecutionKernelException(\n+          new UnstableSnapshotException(\"Unable to get clean data snapshot for query serialisation.\"))\n+          .asUserException();\n     }\n+  }\n \n-    @Override\n-    public List<String> columns()\n+  private void writeRow(List<String> columns, StringBuilder builder, int numberOfColumns, Map<String, Object> row)\n+  {\n+    for (int i = 0; i < numberOfColumns; i++)\n     {\n-        return originalResult.columns();\n+      builder.append(row.get(columns.get(i)));\n+      if (i != numberOfColumns - 1)\n+      {\n+        builder.append(ITEM_SEPARATOR);\n+      }\n     }\n+  }\n \n-    @Override\n-    public <T> ResourceIterator<T> columnAs( String name )\n+  private class EagerResultResourceIterator<T> implements ResourceIterator<T>\n+  {\n+    private final String column;\n+    int cursor;\n+\n+    EagerResultResourceIterator(String column)\n     {\n-        return new EagerResultResourceIterator<>( name );\n+      this.column = column;\n     }\n \n     @Override\n     public boolean hasNext()\n     {\n-        return cursor < queryResult.size();\n+      return cursor < queryResult.size();\n     }\n \n     @Override\n-    public Map<String,Object> next()\n+    public T next()\n     {\n-        return queryResult.get( cursor++ );\n+      return (T) queryResult.get(cursor++).get(column);\n     }\n \n     @Override\n     public void close()\n     {\n-        // nothing to close. Original result is already closed at this point\n+      // Nothing to close.\n     }\n+  }\n \n-    @Override\n-    public QueryStatistics getQueryStatistics()\n-    {\n-        return originalResult.getQueryStatistics();\n-    }\n+  private class EagerQueryResult implements QueryResult\n+  {\n \n-    @Override\n-    public ExecutionPlanDescription getExecutionPlanDescription()\n+    private final String[] fields;\n+\n+    EagerQueryResult()\n     {\n-        return originalResult.getExecutionPlanDescription();\n+      fields = originalResult.columns().toArray(new String[0]);\n     }\n \n     @Override\n-    public QueryResult queryResult()\n+    public String[] fieldNames()\n     {\n-        return new EagerQueryResult();\n+      return fields;\n     }\n \n     @Override\n-    public String resultAsString()\n+    public <E extends Exception> void accept(QueryResultVisitor<E> visitor) throws E\n     {\n-        List<String> columns = originalResult.columns();\n-        StringBuilder builder = new StringBuilder();\n-        builder.append( String.join( ITEM_SEPARATOR, columns ) );\n-        if ( !queryResult.isEmpty() )\n+      while (hasNext())\n+      {\n+        Map<String, Object> row = next();\n+        AnyValue[] anyValues = new AnyValue[fields.length];\n+\n+        for (int i = 0; i < fields.length; i++)\n         {\n-            builder.append( lineSeparator() );\n-            int numberOfColumns = columns.size();\n-            for ( Map<String,Object> row : queryResult )\n-            {\n-                writeRow( columns, builder, numberOfColumns, row );\n-                builder.append( lineSeparator() );\n-            }\n+          anyValues[i] = ValueUtils.of(row.get(fields[i]));\n         }\n-        return builder.toString();\n-    }\n \n-    @Override\n-    public void writeAsStringTo( PrintWriter writer )\n-    {\n-        writer.print( resultAsString() );\n+        visitor.visit(() -> anyValues);\n+      }\n     }\n \n     @Override\n-    public void remove()\n+    public QueryExecutionType executionType()\n     {\n-        throw new UnsupportedOperationException( \"Not supported\" );\n+      return originalResult.getQueryExecutionType();\n     }\n \n     @Override\n-    public Iterable<Notification> getNotifications()\n+    public QueryStatistics queryStatistics()\n     {\n-        return originalResult.getNotifications();\n+      return originalResult.getQueryStatistics();\n     }\n \n     @Override\n-    public <VisitationException extends Exception> void accept( ResultVisitor<VisitationException> visitor )\n-            throws VisitationException\n+    public ExecutionPlanDescription executionPlanDescription()\n     {\n-        try\n-        {\n-            for ( Map<String,Object> map : queryResult )\n-            {\n-                visitor.visit( new MapRow( map ) );\n-            }\n-            checkIfDirty();\n-        }\n-        catch ( NotFoundException e )\n-        {\n-            checkIfDirty();\n-            throw e;\n-        }\n+      return originalResult.getExecutionPlanDescription();\n     }\n \n-    private void checkIfDirty()\n-    {\n-        if ( versionContext.isDirty() )\n-        {\n-            throw new QueryExecutionKernelException(\n-                    new UnstableSnapshotException( \"Unable to get clean data snapshot for query serialisation.\" ) )\n-                    .asUserException();\n-        }\n-    }\n-\n-    private void writeRow( List<String> columns, StringBuilder builder, int numberOfColumns, Map<String,Object> row )\n+    @Override\n+    public Iterable<Notification> getNotifications()\n     {\n-        for ( int i = 0; i < numberOfColumns; i++ )\n-        {\n-            builder.append( row.get( columns.get( i ) ) );\n-            if ( i != numberOfColumns - 1 )\n-            {\n-                builder.append( ITEM_SEPARATOR );\n-            }\n-        }\n+      return originalResult.getNotifications();\n     }\n \n-    private class EagerResultResourceIterator<T> implements ResourceIterator<T>\n-    {\n-        private final String column;\n-        int cursor;\n-\n-        EagerResultResourceIterator( String column )\n-        {\n-            this.column = column;\n-        }\n-\n-        @Override\n-        public boolean hasNext()\n-        {\n-            return cursor < queryResult.size();\n-        }\n-\n-        @Override\n-        public T next()\n-        {\n-            return (T) queryResult.get( cursor++ ).get( column );\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            // Nothing to close.\n-        }\n-    }\n-\n-    private class EagerQueryResult implements QueryResult\n+    @Override\n+    public void close()\n     {\n-\n-        private final String[] fields;\n-\n-        EagerQueryResult()\n-        {\n-            fields = originalResult.columns().toArray( new String[0] );\n-        }\n-\n-        @Override\n-        public String[] fieldNames()\n-        {\n-            return fields;\n-        }\n-\n-        @Override\n-        public <E extends Exception> void accept( QueryResultVisitor<E> visitor ) throws E\n-        {\n-            while ( hasNext() )\n-            {\n-                Map<String,Object> row = next();\n-                AnyValue[] anyValues = new AnyValue[fields.length];\n-\n-                for ( int i = 0; i < fields.length; i++ )\n-                {\n-                    anyValues[i] = ValueUtils.of( row.get( fields[i] ) );\n-                }\n-\n-                visitor.visit( () -> anyValues );\n-            }\n-        }\n-\n-        @Override\n-        public QueryExecutionType executionType()\n-        {\n-            return originalResult.getQueryExecutionType();\n-        }\n-\n-        @Override\n-        public QueryStatistics queryStatistics()\n-        {\n-            return originalResult.getQueryStatistics();\n-        }\n-\n-        @Override\n-        public ExecutionPlanDescription executionPlanDescription()\n-        {\n-            return originalResult.getExecutionPlanDescription();\n-        }\n-\n-        @Override\n-        public Iterable<Notification> getNotifications()\n-        {\n-            return originalResult.getNotifications();\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            // nothing to close\n-        }\n+      // nothing to close\n     }\n+  }\n }\n",
            "diff_size": 314
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2766/EagerResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2766/EagerResult.java\nindex 52e36ed5981..d287cf4d4cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2766/EagerResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2766/EagerResult.java\n@@ -156,16 +156,16 @@ class EagerResult implements Result, QueryResultProvider\n     }\n \n     @Override\n-    public <VisitationException extends Exception> void accept( ResultVisitor<VisitationException> visitor )\n-            throws VisitationException\n-    {\n+    public <VisitationException extends Exception> void accept( ResultVisitor<VisitationException> visitor ) throws VisitationException\n+{\n         try\n         {\n             for ( Map<String,Object> map : queryResult )\n             {\n                 visitor.visit( new MapRow( map ) );\n             }\n-            checkIfDirty();\n+\n+checkIfDirty();\n         }\n         catch ( NotFoundException e )\n         {\n@@ -178,10 +178,8 @@ class EagerResult implements Result, QueryResultProvider\n     {\n         if ( versionContext.isDirty() )\n         {\n-            throw new QueryExecutionKernelException(\n-                    new UnstableSnapshotException( \"Unable to get clean data snapshot for query serialisation.\" ) )\n-                    .asUserException();\n-        }\n+            throw new QueryExecutionKernelException( new UnstableSnapshotException( \"Unable to get clean data snapshot for query serialisation.\" ) ).asUserException();\n+    }\n     }\n \n     private void writeRow( List<String> columns, StringBuilder builder, int numberOfColumns, Map<String,Object> row )\n@@ -227,8 +225,7 @@ class EagerResult implements Result, QueryResultProvider\n \n     private class EagerQueryResult implements QueryResult\n     {\n-\n-        private final String[] fields;\n+    private final String[] fields;\n \n         EagerQueryResult()\n         {\n@@ -248,8 +245,7 @@ class EagerResult implements Result, QueryResultProvider\n             {\n                 Map<String,Object> row = next();\n                 AnyValue[] anyValues = new AnyValue[fields.length];\n-\n-                for ( int i = 0; i < fields.length; i++ )\n+for ( int i = 0; i < fields.length; i++ )\n                 {\n                     anyValues[i] = ValueUtils.of( row.get( fields[i] ) );\n                 }\n@@ -288,4 +284,4 @@ class EagerResult implements Result, QueryResultProvider\n             // nothing to close\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}