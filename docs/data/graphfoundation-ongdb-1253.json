{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1253",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1253/Session.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1253/Session.java\nindex 95a729a44d2..7df069f0cef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1253/Session.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1253/Session.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell;\n \n import java.io.Serializable;\n@@ -29,155 +30,158 @@ import java.util.Set;\n  */\n public class Session\n {\n-    private final Serializable id;\n-    private final Map<String, Object> properties = new HashMap<>();\n-    private final Map<String, String> aliases = new HashMap<>();\n-    private final InterruptSignalHandler signalHandler = InterruptSignalHandler.getHandler();\n-\n-    public Session( Serializable id )\n-    {\n-        this.id = id;\n-    }\n-\n-    public Serializable getId()\n-    {\n-        return id;\n-    }\n-\n-    public InterruptSignalHandler getSignalHandler()\n-    {\n-        return signalHandler;\n-    }\n-\n-    /**\n-     * Sets a session value.\n-     * @param key the session key.\n-     * @param value the value.\n-     * @throws ShellException if the execution fails\n-     */\n-    public void set( String key, Object value ) throws ShellException\n-    {\n-        Variables.checkIsValidVariableName( key );\n-        setInternal( key, value );\n-    }\n-\n-    private void setInternal( String key, Object value )\n-    {\n-        properties.put( key, value );\n-    }\n-\n-    /**\n-     * @param key the key to get the session value for.\n-     * @return the value for the {@code key} or {@code null} if not found.\n-     * @throws ShellException if the execution fails\n-     */\n-    public Object get( String key ) throws ShellException\n-    {\n-        Variables.checkIsValidVariableName( key );\n-        return getInternal( key );\n-    }\n-\n-    private Object getInternal( String key )\n-    {\n-        return properties.get( key );\n-    }\n-\n-    /**\n-     * @param key the key to check the session value for.\n-     * @return true if the session contains a variable with that name.\n-     */\n-    public boolean has( String key )\n-    {\n-        return properties.containsKey( key );\n-    }\n-\n-    /**\n-     * Removes a value from the session.\n-     * @param key the session key to remove.\n-     * @return the removed value, or {@code null} if none.\n-     * @throws ShellException if the execution fails\n-     */\n-    public Object remove( String key ) throws ShellException\n-    {\n-        Variables.checkIsValidVariableName( key );\n-        return properties.remove( key );\n-    }\n-\n-    /**\n-     * @return all the available session keys.\n-     */\n-    public String[] keys()\n-    {\n-        return properties.keySet().toArray( new String[ properties.size() ] );\n-    }\n-\n-    /**\n-     * Returns the session as a {@link Map} representation. Changes in the\n-     * returned instance won't be reflected in the session.\n-     * @return the session as a {@link Map}.\n-     */\n-    public Map<String, Object> asMap()\n-    {\n-        return properties;\n-    }\n-\n-    public void removeAlias( String key )\n-    {\n-        aliases.remove( key );\n-    }\n-\n-    public void setAlias( String key, String value )\n-    {\n-        aliases.put( key, value );\n-    }\n-\n-    public Set<String> getAliasKeys()\n-    {\n-        return aliases.keySet();\n-    }\n-\n-    public String getAlias( String key )\n-    {\n-        return aliases.get( key );\n-    }\n-\n-    public void setPath( String path )\n-    {\n-        setInternal( Variables.WORKING_DIR_KEY, path );\n-    }\n-\n-    public String getPath(  )\n-    {\n-        return (String) getInternal( Variables.WORKING_DIR_KEY );\n-    }\n-\n-    public void setCurrent( final String value )\n-    {\n-        setInternal( Variables.CURRENT_KEY, value );\n-    }\n-\n-    public String getCurrent()\n-    {\n-        return (String) getInternal( Variables.CURRENT_KEY );\n-    }\n-\n-    public Integer getCommitCount()\n-    {\n-        return (Integer) getInternal( Variables.TX_COUNT );\n-    }\n-\n-    public void setCommitCount( int commitCount )\n-    {\n-        setInternal( Variables.TX_COUNT, commitCount );\n-    }\n-\n-    public String getTitleKeys() throws ShellException\n-    {\n-        return (String) get( Variables.TITLE_KEYS_KEY );\n-    }\n-\n-    public String getMaxTitleLength() throws ShellException\n-    {\n-        return (String) get( Variables.TITLE_MAX_LENGTH );\n-    }\n+  private final Serializable id;\n+  private final Map<String, Object> properties = new HashMap<>();\n+  private final Map<String, String> aliases = new HashMap<>();\n+  private final InterruptSignalHandler signalHandler = InterruptSignalHandler.getHandler();\n+\n+  public Session(Serializable id)\n+  {\n+    this.id = id;\n+  }\n+\n+  public Serializable getId()\n+  {\n+    return id;\n+  }\n+\n+  public InterruptSignalHandler getSignalHandler()\n+  {\n+    return signalHandler;\n+  }\n+\n+  /**\n+   * Sets a session value.\n+   *\n+   * @param key   the session key.\n+   * @param value the value.\n+   * @throws ShellException if the execution fails\n+   */\n+  public void set(String key, Object value) throws ShellException\n+  {\n+    Variables.checkIsValidVariableName(key);\n+    setInternal(key, value);\n+  }\n+\n+  private void setInternal(String key, Object value)\n+  {\n+    properties.put(key, value);\n+  }\n+\n+  /**\n+   * @param key the key to get the session value for.\n+   * @return the value for the {@code key} or {@code null} if not found.\n+   * @throws ShellException if the execution fails\n+   */\n+  public Object get(String key) throws ShellException\n+  {\n+    Variables.checkIsValidVariableName(key);\n+    return getInternal(key);\n+  }\n+\n+  private Object getInternal(String key)\n+  {\n+    return properties.get(key);\n+  }\n+\n+  /**\n+   * @param key the key to check the session value for.\n+   * @return true if the session contains a variable with that name.\n+   */\n+  public boolean has(String key)\n+  {\n+    return properties.containsKey(key);\n+  }\n+\n+  /**\n+   * Removes a value from the session.\n+   *\n+   * @param key the session key to remove.\n+   * @return the removed value, or {@code null} if none.\n+   * @throws ShellException if the execution fails\n+   */\n+  public Object remove(String key) throws ShellException\n+  {\n+    Variables.checkIsValidVariableName(key);\n+    return properties.remove(key);\n+  }\n+\n+  /**\n+   * @return all the available session keys.\n+   */\n+  public String[] keys()\n+  {\n+    return properties.keySet().toArray(new String[properties.size()]);\n+  }\n+\n+  /**\n+   * Returns the session as a {@link Map} representation. Changes in the\n+   * returned instance won't be reflected in the session.\n+   *\n+   * @return the session as a {@link Map}.\n+   */\n+  public Map<String, Object> asMap()\n+  {\n+    return properties;\n+  }\n+\n+  public void removeAlias(String key)\n+  {\n+    aliases.remove(key);\n+  }\n+\n+  public void setAlias(String key, String value)\n+  {\n+    aliases.put(key, value);\n+  }\n+\n+  public Set<String> getAliasKeys()\n+  {\n+    return aliases.keySet();\n+  }\n+\n+  public String getAlias(String key)\n+  {\n+    return aliases.get(key);\n+  }\n+\n+  public void setPath(String path)\n+  {\n+    setInternal(Variables.WORKING_DIR_KEY, path);\n+  }\n+\n+  public String getPath()\n+  {\n+    return (String) getInternal(Variables.WORKING_DIR_KEY);\n+  }\n+\n+  public void setCurrent(final String value)\n+  {\n+    setInternal(Variables.CURRENT_KEY, value);\n+  }\n+\n+  public String getCurrent()\n+  {\n+    return (String) getInternal(Variables.CURRENT_KEY);\n+  }\n+\n+  public Integer getCommitCount()\n+  {\n+    return (Integer) getInternal(Variables.TX_COUNT);\n+  }\n+\n+  public void setCommitCount(int commitCount)\n+  {\n+    setInternal(Variables.TX_COUNT, commitCount);\n+  }\n+\n+  public String getTitleKeys() throws ShellException\n+  {\n+    return (String) get(Variables.TITLE_KEYS_KEY);\n+  }\n+\n+  public String getMaxTitleLength() throws ShellException\n+  {\n+    return (String) get(Variables.TITLE_MAX_LENGTH);\n+  }\n }\n",
            "diff_size": 155
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1253/Session.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1253/Session.java\nindex 95a729a44d2..d20fdbb1acb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1253/Session.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1253/Session.java\n@@ -30,8 +30,8 @@ import java.util.Set;\n public class Session\n {\n     private final Serializable id;\n-    private final Map<String, Object> properties = new HashMap<>();\n-    private final Map<String, String> aliases = new HashMap<>();\n+    private final Map<String,Object> properties = new HashMap<>();\n+    private final Map<String,String> aliases = new HashMap<>();\n     private final InterruptSignalHandler signalHandler = InterruptSignalHandler.getHandler();\n \n     public Session( Serializable id )\n@@ -108,7 +108,7 @@ public class Session\n      */\n     public String[] keys()\n     {\n-        return properties.keySet().toArray( new String[ properties.size() ] );\n+        return properties.keySet().toArray( new String[properties.size() ] );\n     }\n \n     /**\n@@ -116,7 +116,7 @@ public class Session\n      * returned instance won't be reflected in the session.\n      * @return the session as a {@link Map}.\n      */\n-    public Map<String, Object> asMap()\n+    public Map<String,Object> asMap()\n     {\n         return properties;\n     }\n@@ -146,7 +146,7 @@ public class Session\n         setInternal( Variables.WORKING_DIR_KEY, path );\n     }\n \n-    public String getPath(  )\n+    public String getPath()\n     {\n         return (String) getInternal( Variables.WORKING_DIR_KEY );\n     }\n@@ -180,4 +180,4 @@ public class Session\n     {\n         return (String) get( Variables.TITLE_MAX_LENGTH );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}