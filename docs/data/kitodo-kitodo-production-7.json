{
    "project_name": "kitodo-kitodo-production",
    "error_id": "7",
    "information": {
        "errors": [
            {
                "line": "114",
                "column": "96",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "            } catch (FilterException e) {\n                setRowCount(0);\n                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\" +\n                        \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n                logger.error(e.getMessage(), e);\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/7/LazyDTOModel.java\nindex 001ce2df1c2..7de7d5bcebe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/7/LazyDTOModel.java\n@@ -111,8 +111,8 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n                 logger.error(e.getMessage(), e);\n             } catch (FilterException e) {\n                 setRowCount(0);\n-                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\" +\n-                        \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n+                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\"\n+                        + \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n                 logger.error(e.getMessage(), e);\n             }\n         } else {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "113",
                    "column": "96",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/7/LazyDTOModel.java\nindex 001ce2df1c2..a1401e7f55f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/7/LazyDTOModel.java\n@@ -53,9 +53,8 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n      * source lazily, e.g. only the number of datasets that will be displayed in the\n      * frontend.\n      *\n-     * @param searchService\n-     *            the searchService which is used to retrieve data from the data\n-     *            source\n+     * @param searchService the searchService which is used to retrieve data from the data\n+     *                      source\n      */\n     public LazyDTOModel(SearchDatabaseService searchService) {\n         indexRestClient.setIndex(ConfigMain.getParameter(\"elasticsearch.index\", \"kitodo\"));\n@@ -94,7 +93,7 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<Object> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object>\n-            filters) {\n+        filters) {\n         if (indexRunning()) {\n             try {\n                 HashMap<String, String> filterMap = new HashMap<>();\n@@ -106,13 +105,13 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n                 logger.info(\"{} entities loaded!\", entities.size());\n                 return entities;\n             } catch (DAOException | DataException | ElasticsearchStatusException | QueryShardException\n-                    | SQLGrammarException e) {\n+                | SQLGrammarException e) {\n                 setRowCount(0);\n                 logger.error(e.getMessage(), e);\n             } catch (FilterException e) {\n                 setRowCount(0);\n                 PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\" +\n-                        \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n+                    \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n                 logger.error(e.getMessage(), e);\n             }\n         } else {\n@@ -153,8 +152,7 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n     /**\n      * Set filter String.\n      *\n-     * @param filter\n-     *      as String\n+     * @param filter as String\n      */\n     public void setFilterString(String filter) {\n         this.filterString = filter;\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/7/LazyDTOModel.java\nindex 001ce2df1c2..efe4a08b8e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/7/LazyDTOModel.java\n@@ -93,8 +93,7 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<Object> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object>\n-            filters) {\n+    public List<Object> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object> filters) {\n         if (indexRunning()) {\n             try {\n                 HashMap<String, String> filterMap = new HashMap<>();\n@@ -111,8 +110,7 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n                 logger.error(e.getMessage(), e);\n             } catch (FilterException e) {\n                 setRowCount(0);\n-                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\" +\n-                        \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n+                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\" + \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n                 logger.error(e.getMessage(), e);\n             }\n         } else {\n@@ -159,4 +157,4 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n     public void setFilterString(String filter) {\n         this.filterString = filter;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/7/LazyDTOModel.java\nindex 001ce2df1c2..fcc8b30c77f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/7/LazyDTOModel.java\n@@ -19,7 +19,6 @@ import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.commons.lang.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n@@ -57,10 +56,11 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n      *            the searchService which is used to retrieve data from the data\n      *            source\n      */\n+\n+\n     public LazyDTOModel(SearchDatabaseService searchService) {\n         indexRestClient.setIndex(ConfigMain.getParameter(\"elasticsearch.index\", \"kitodo\"));\n         this.searchService = searchService;\n-\n         try {\n             this.setRowCount(toIntExact(searchService.countDatabaseRows()));\n         } catch (DAOException e) {\n@@ -93,8 +93,7 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<Object> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object>\n-            filters) {\n+    public List<Object> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object> filters) {\n         if (indexRunning()) {\n             try {\n                 HashMap<String, String> filterMap = new HashMap<>();\n@@ -105,14 +104,12 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n                 entities = searchService.loadData(first, pageSize, sortField, sortOrder, filterMap);\n                 logger.info(\"{} entities loaded!\", entities.size());\n                 return entities;\n-            } catch (DAOException | DataException | ElasticsearchStatusException | QueryShardException\n-                    | SQLGrammarException e) {\n+            } catch (DAOException | DataException | ElasticsearchStatusException | QueryShardException | SQLGrammarException e) {\n                 setRowCount(0);\n                 logger.error(e.getMessage(), e);\n             } catch (FilterException e) {\n                 setRowCount(0);\n-                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\" +\n-                        \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n+                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\" + \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n                 logger.error(e.getMessage(), e);\n             }\n         } else {\n@@ -132,6 +129,8 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n      *\n      * @return whether the ElasticSearch index is running or not\n      */\n+\n+\n     private boolean indexRunning() {\n         try {\n             return indexRestClient.indexExists();\n@@ -146,6 +145,8 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n      *\n      * @return value of entities\n      */\n+\n+\n     public List getEntities() {\n         return entities;\n     }\n@@ -156,7 +157,9 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n      * @param filter\n      *      as String\n      */\n+\n+\n     public void setFilterString(String filter) {\n         this.filterString = filter;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/7/LazyDTOModel.java\nindex 001ce2df1c2..0eeca7902f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/7/LazyDTOModel.java\n@@ -111,8 +111,7 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n                 logger.error(e.getMessage(), e);\n             } catch (FilterException e) {\n                 setRowCount(0);\n-                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\" +\n-                        \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n+                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\" + \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n                 logger.error(e.getMessage(), e);\n             }\n         } else {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/7/LazyDTOModel.java\nindex 001ce2df1c2..7de7d5bcebe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/7/LazyDTOModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/7/LazyDTOModel.java\n@@ -111,8 +111,8 @@ public class LazyDTOModel extends LazyDataModel<Object> {\n                 logger.error(e.getMessage(), e);\n             } catch (FilterException e) {\n                 setRowCount(0);\n-                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\" +\n-                        \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n+                PrimeFaces.current().executeScript(\"PF('sticky-notifications').renderMessage(\"\n+                        + \"{'summary':'Filter error','detail':'\" + e.getMessage() + \"','severity':'error'});\");\n                 logger.error(e.getMessage(), e);\n             }\n         } else {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}