{
    "project_name": "NationalSecurityAgency-emissary",
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "17",
                "column": "28",
                "severity": "warning",
                "message": "'}' at column 28 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "    private static Logger logger = LoggerFactory.getLogger(RequestUtil.class);\n\n    private RequestUtil() {}\n\n    /**\n     * Get attribute or parameter from request. Attribute has priority over parameter when both are present. If no parameter",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/18/RequestUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler/18/RequestUtil.java\nindex 8df57c393b3..24bacd13f84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/18/RequestUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler/18/RequestUtil.java\n@@ -14,7 +14,9 @@ public class RequestUtil {\n \n     private static Logger logger = LoggerFactory.getLogger(RequestUtil.class);\n \n-    private RequestUtil() {}\n+    private RequestUtil() {\n+\n+    }\n \n     /**\n      * Get attribute or parameter from request. Attribute has priority over parameter when both are present. If no parameter\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/18/RequestUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/18/RequestUtil.java\nindex 8df57c393b3..57332e767ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/18/RequestUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/18/RequestUtil.java\n@@ -14,7 +14,8 @@ public class RequestUtil {\n \n     private static Logger logger = LoggerFactory.getLogger(RequestUtil.class);\n \n-    private RequestUtil() {}\n+    private RequestUtil() {\n+    }\n \n     /**\n      * Get attribute or parameter from request. Attribute has priority over parameter when both are present. If no parameter\n@@ -107,7 +108,7 @@ public class RequestUtil {\n \n     /**\n      * Retrieves boolean as a String (\"true\") and returns boolean.\n-     * \n+     *\n      * @return boolean\n      */\n     public static boolean getBooleanParam(final ServletRequest request, final String param) {\n@@ -117,7 +118,7 @@ public class RequestUtil {\n     /**\n      * Retrieves boolean if the string value of the parameter equals the trueString argument. If the parameter is not\n      * present, false will be returned\n-     * \n+     *\n      * @return boolean\n      */\n     public static boolean getBooleanParam(final ServletRequest request, final String param, final String trueString) {\n@@ -126,7 +127,7 @@ public class RequestUtil {\n \n     /**\n      * Retrieves boolean if the string value of the parameter equals the trueString argument.\n-     * \n+     *\n      * @return boolean\n      */\n     public static boolean getBooleanParam(final ServletRequest request, final String param, final String trueString, final boolean defaultVal) {\n@@ -140,7 +141,7 @@ public class RequestUtil {\n \n     /**\n      * Retrieves a list of Integers from the request\n-     * \n+     *\n      * @return Integer[]\n      */\n     public static Integer[] getIntegers(final ServletRequest request, final String param) {\n@@ -149,7 +150,7 @@ public class RequestUtil {\n \n     /**\n      * Retrieves a list of Integers from the request\n-     * \n+     *\n      * @return Integer[]\n      */\n     public static Integer[] getIntegers(final ServletRequest request, final String param, final int defValue) {\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/18/RequestUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/18/RequestUtil.java\nindex 8df57c393b3..a0dd6771202 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/18/RequestUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/18/RequestUtil.java\n@@ -14,7 +14,9 @@ public class RequestUtil {\n \n     private static Logger logger = LoggerFactory.getLogger(RequestUtil.class);\n \n-    private RequestUtil() {}\n+    private RequestUtil() {\n+\n+}\n \n     /**\n      * Get attribute or parameter from request. Attribute has priority over parameter when both are present. If no parameter\n@@ -224,4 +226,4 @@ public class RequestUtil {\n \n         return retval;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/18/RequestUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/18/RequestUtil.java\nindex 8df57c393b3..be886e1254d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/18/RequestUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/18/RequestUtil.java\n@@ -1,31 +1,36 @@\n package emissary.server.mvc.adapters;\n \n import javax.servlet.ServletRequest;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n  * Utilities for dealing with request parameters\n  */\n+\n+\n public class RequestUtil {\n+\n     public static final int INT_PARAM_NOT_FOUND = -99;\n+\n     public static final float FLOAT_PARAM_NOT_FOUND = -99.99f;\n \n     private static Logger logger = LoggerFactory.getLogger(RequestUtil.class);\n \n-    private RequestUtil() {}\n+    private RequestUtil() {\n+\n+    }\n \n     /**\n      * Get attribute or parameter from request. Attribute has priority over parameter when both are present. If no parameter\n      * is found, return the default value.\n      */\n+\n     public static String getParameter(final ServletRequest request, final String param, final String defaultVal) {\n         Object o = request.getAttribute(param);\n         if (o == null) {\n             o = request.getParameter(param);\n         }\n-\n         if (o == null) {\n             o = defaultVal;\n         }\n@@ -37,6 +42,8 @@ public class RequestUtil {\n      * Get attribute or parameter from request. Attribute has priority over parameter when both are present. If no parameter\n      * is found, return null.\n      */\n+\n+\n     public static String getParameter(final ServletRequest request, final String param) {\n         return getParameter(request, param, null);\n     }\n@@ -45,10 +52,11 @@ public class RequestUtil {\n      * Get attribute or parameters from request and return an array of Strings. Attribute has priority over parameter when\n      * both are present\n      */\n+\n+\n     public static String[] getParameterValues(final ServletRequest request, final String param) {\n         String[] retArray = null;\n         Object o = request.getAttribute(param);\n-\n         if (o == null) {\n             o = request.getParameterValues(param);\n         }\n@@ -59,7 +67,6 @@ public class RequestUtil {\n             retArray = new String[1];\n             retArray[0] = (String) o;\n         }\n-\n         if (retArray != null) {\n             for (int i = 0; i < retArray.length; i++) {\n                 logger.debug(\"RequestUtil.getParameterValues for \" + param + \" [\" + i + \"]: \" + retArray[i]);\n@@ -67,7 +74,6 @@ public class RequestUtil {\n         } else {\n             logger.debug(\"RequestUtil.getParameterValues for \" + param + \" is null\");\n         }\n-\n         return retArray;\n     }\n \n@@ -76,6 +82,8 @@ public class RequestUtil {\n      *\n      * @return the parameter's int value, or -99 if the parameter is null.\n      */\n+\n+\n     public static int getIntParam(final ServletRequest request, final String param) {\n         return getIntParam(request, param, INT_PARAM_NOT_FOUND);\n     }\n@@ -85,6 +93,8 @@ public class RequestUtil {\n      *\n      * @return the parameter's int value, or the default value if the parameter is null.\n      */\n+\n+\n     public static int getIntParam(final ServletRequest request, final String param, final int defValue) {\n         int retval = defValue;\n         String s_int = getParameter(request, param);\n@@ -95,13 +105,10 @@ public class RequestUtil {\n                     retval = Integer.parseInt(s_int);\n                 } catch (NumberFormatException e) {\n                     logger.info(\"RequestUtil.getIntParam. Param \" + param + \" had unparseable value '\" + s_int + \"'.\");\n-\n                 }\n             }\n         }\n-\n         logger.debug(\"RequestUtil.getIntParam for \" + param + \": \" + retval + \".\");\n-\n         return retval;\n     }\n \n@@ -110,6 +117,8 @@ public class RequestUtil {\n      * \n      * @return boolean\n      */\n+\n+\n     public static boolean getBooleanParam(final ServletRequest request, final String param) {\n         return getBooleanParam(request, param, \"true\", false);\n     }\n@@ -120,6 +129,8 @@ public class RequestUtil {\n      * \n      * @return boolean\n      */\n+\n+\n     public static boolean getBooleanParam(final ServletRequest request, final String param, final String trueString) {\n         return getBooleanParam(request, param, trueString, false);\n     }\n@@ -129,12 +140,13 @@ public class RequestUtil {\n      * \n      * @return boolean\n      */\n+\n+\n     public static boolean getBooleanParam(final ServletRequest request, final String param, final String trueString, final boolean defaultVal) {\n         final String s = getParameter(request, param);\n         if (s != null) {\n             return s.equalsIgnoreCase(trueString);\n         }\n-\n         return defaultVal;\n     }\n \n@@ -143,6 +155,8 @@ public class RequestUtil {\n      * \n      * @return Integer[]\n      */\n+\n+\n     public static Integer[] getIntegers(final ServletRequest request, final String param) {\n         return getIntegers(request, param, INT_PARAM_NOT_FOUND);\n     }\n@@ -152,15 +166,15 @@ public class RequestUtil {\n      * \n      * @return Integer[]\n      */\n+\n+\n     public static Integer[] getIntegers(final ServletRequest request, final String param, final int defValue) {\n         final String[] values = getParameterValues(request, param);\n-\n         if (values == null) {\n             return new Integer[0];\n         }\n \n         final Integer[] intValues = new Integer[values.length];\n-\n         for (int i = 0; i < values.length; i++) {\n             try {\n                 String temp = values[i];\n@@ -170,11 +184,9 @@ public class RequestUtil {\n                 intValues[i] = Integer.valueOf(temp);\n             } catch (NumberFormatException ne) {\n                 logger.info(\"RequestUtil.getIntegers. Param \" + param + \" had unparseable value '\" + values[i] + \"'.\");\n-\n                 intValues[i] = Integer.valueOf(defValue);\n             }\n         }\n-\n         return intValues;\n     }\n \n@@ -183,6 +195,8 @@ public class RequestUtil {\n      *\n      * @return the parameter's value, or \"\" if the parameter is null.\n      */\n+\n+\n     public static String getParamNoNull(final ServletRequest request, final String param) {\n         final String temp = getParameter(request, param);\n         if (temp != null) {\n@@ -196,6 +210,8 @@ public class RequestUtil {\n      *\n      * @return the parameter's int value, or -99 if the parameter is null.\n      */\n+\n+\n     public static float getFloatParam(final ServletRequest request, final String param) {\n         return getFloatParam(request, param, FLOAT_PARAM_NOT_FOUND);\n     }\n@@ -205,6 +221,8 @@ public class RequestUtil {\n      *\n      * @return the parameter's float value, or the default value if the parameter is null.\n      */\n+\n+\n     public static float getFloatParam(final ServletRequest request, final String param, final float defValue) {\n         float retval = defValue;\n         String s_f = getParameter(request, param);\n@@ -215,13 +233,10 @@ public class RequestUtil {\n                     retval = Float.parseFloat(s_f);\n                 } catch (NumberFormatException e) {\n                     logger.info(\"RequestUtil.getFloatParam. Param \" + param + \" had unparseable value '\" + s_f + \"'.\");\n-\n                 }\n             }\n         }\n-\n         logger.debug(\"RequestUtil.getFloatParam for \" + param + \": \" + retval + \".\");\n-\n         return retval;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "17",
                    "column": "28",
                    "severity": "warning",
                    "message": "'}' at column 28 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/18/RequestUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_three_grams/18/RequestUtil.java\nindex 8df57c393b3..24bacd13f84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/18/RequestUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_three_grams/18/RequestUtil.java\n@@ -14,7 +14,9 @@ public class RequestUtil {\n \n     private static Logger logger = LoggerFactory.getLogger(RequestUtil.class);\n \n-    private RequestUtil() {}\n+    private RequestUtil() {\n+\n+    }\n \n     /**\n      * Get attribute or parameter from request. Attribute has priority over parameter when both are present. If no parameter\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_random"
    ]
}