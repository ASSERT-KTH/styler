{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2883",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "8",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2883/LeaderAvailabilityTimers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2883/LeaderAvailabilityTimers.java\nindex c13541bbf75..f7264d561f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2883/LeaderAvailabilityTimers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2883/LeaderAvailabilityTimers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.consensus;\n \n import java.time.Clock;\n@@ -38,90 +39,89 @@ import static org.neo4j.causalclustering.core.consensus.schedule.Timer.CancelMod\n \n class LeaderAvailabilityTimers\n {\n-    private final long electionTimeout;\n-    private final long heartbeatInterval;\n-    private final Clock clock;\n-    private final TimerService timerService;\n-    private final Log log;\n-\n-    private volatile long lastElectionRenewalMillis;\n-\n-    private Timer heartbeatTimer;\n-    private Timer electionTimer;\n-\n-    LeaderAvailabilityTimers( Duration electionTimeout, Duration heartbeatInterval, Clock clock, TimerService timerService,\n-            LogProvider logProvider )\n+  private final long electionTimeout;\n+  private final long heartbeatInterval;\n+  private final Clock clock;\n+  private final TimerService timerService;\n+  private final Log log;\n+\n+  private volatile long lastElectionRenewalMillis;\n+\n+  private Timer heartbeatTimer;\n+  private Timer electionTimer;\n+\n+  LeaderAvailabilityTimers(Duration electionTimeout, Duration heartbeatInterval, Clock clock, TimerService timerService,\n+                           LogProvider logProvider)\n+  {\n+    this.electionTimeout = electionTimeout.toMillis();\n+    this.heartbeatInterval = heartbeatInterval.toMillis();\n+    this.clock = clock;\n+    this.timerService = timerService;\n+    this.log = logProvider.getLog(getClass());\n+\n+    if (this.electionTimeout < this.heartbeatInterval)\n     {\n-        this.electionTimeout = electionTimeout.toMillis();\n-        this.heartbeatInterval = heartbeatInterval.toMillis();\n-        this.clock = clock;\n-        this.timerService = timerService;\n-        this.log = logProvider.getLog( getClass() );\n-\n-        if ( this.electionTimeout < this.heartbeatInterval )\n-        {\n-            throw new IllegalArgumentException( String.format(\n-                            \"Election timeout %s should not be shorter than heartbeat interval %s\", this.electionTimeout, this.heartbeatInterval\n-            ) );\n-        }\n+      throw new IllegalArgumentException(String.format(\n+          \"Election timeout %s should not be shorter than heartbeat interval %s\", this.electionTimeout, this.heartbeatInterval\n+      ));\n     }\n+  }\n \n-    synchronized void start( ThrowingConsumer<Clock, Exception> electionAction, ThrowingConsumer<Clock, Exception> heartbeatAction )\n-    {\n-        this.electionTimer = timerService.create( Timeouts.ELECTION, Groups.raft, renewing( electionAction) );\n-        this.electionTimer.set( uniformRandomTimeout( electionTimeout, electionTimeout * 2, MILLISECONDS ) );\n-\n-        this.heartbeatTimer = timerService.create( Timeouts.HEARTBEAT, Groups.raft, renewing( heartbeatAction ) );\n-        this.heartbeatTimer.set( fixedTimeout( heartbeatInterval, MILLISECONDS ) );\n+  synchronized void start(ThrowingConsumer<Clock, Exception> electionAction, ThrowingConsumer<Clock, Exception> heartbeatAction)\n+  {\n+    this.electionTimer = timerService.create(Timeouts.ELECTION, Groups.raft, renewing(electionAction));\n+    this.electionTimer.set(uniformRandomTimeout(electionTimeout, electionTimeout * 2, MILLISECONDS));\n \n-        lastElectionRenewalMillis = clock.millis();\n-    }\n+    this.heartbeatTimer = timerService.create(Timeouts.HEARTBEAT, Groups.raft, renewing(heartbeatAction));\n+    this.heartbeatTimer.set(fixedTimeout(heartbeatInterval, MILLISECONDS));\n \n-    synchronized void stop()\n-    {\n-        if ( electionTimer != null )\n-        {\n-            electionTimer.cancel( ASYNC );\n-        }\n-        if ( heartbeatTimer != null )\n-        {\n-            heartbeatTimer.cancel( ASYNC );\n-        }\n-    }\n+    lastElectionRenewalMillis = clock.millis();\n+  }\n \n-    synchronized void renewElection()\n+  synchronized void stop()\n+  {\n+    if (electionTimer != null)\n     {\n-        lastElectionRenewalMillis = clock.millis();\n-        if ( electionTimer != null )\n-        {\n-            electionTimer.reset();\n-        }\n+      electionTimer.cancel(ASYNC);\n     }\n-\n-    synchronized boolean isElectionTimedOut()\n+    if (heartbeatTimer != null)\n     {\n-        return clock.millis() - lastElectionRenewalMillis >= electionTimeout;\n+      heartbeatTimer.cancel(ASYNC);\n     }\n+  }\n \n-    // Getters for immutable values\n-    long getElectionTimeout()\n+  synchronized void renewElection()\n+  {\n+    lastElectionRenewalMillis = clock.millis();\n+    if (electionTimer != null)\n     {\n-        return electionTimeout;\n+      electionTimer.reset();\n     }\n-\n-    private TimeoutHandler renewing( ThrowingConsumer<Clock, Exception> action )\n+  }\n+\n+  synchronized boolean isElectionTimedOut()\n+  {\n+    return clock.millis() - lastElectionRenewalMillis >= electionTimeout;\n+  }\n+\n+  // Getters for immutable values\n+  long getElectionTimeout()\n+  {\n+    return electionTimeout;\n+  }\n+\n+  private TimeoutHandler renewing(ThrowingConsumer<Clock, Exception> action)\n+  {\n+    return timeout ->\n     {\n-        return timeout ->\n-        {\n-            try\n-            {\n-                action.accept( clock );\n-            }\n-            catch ( Exception e )\n-            {\n-                log.error( \"Failed to process timeout.\", e );\n-            }\n-            timeout.reset();\n-        };\n-    }\n+      try\n+      {\n+        action.accept(clock);\n+      } catch (Exception e)\n+      {\n+        log.error(\"Failed to process timeout.\", e);\n+      }\n+      timeout.reset();\n+    };\n+  }\n }\n",
            "diff_size": 101
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2883/LeaderAvailabilityTimers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2883/LeaderAvailabilityTimers.java\nindex c13541bbf75..66659ff0b65 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2883/LeaderAvailabilityTimers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2883/LeaderAvailabilityTimers.java\n@@ -57,24 +57,19 @@ class LeaderAvailabilityTimers\n         this.clock = clock;\n         this.timerService = timerService;\n         this.log = logProvider.getLog( getClass() );\n-\n-        if ( this.electionTimeout < this.heartbeatInterval )\n+if ( this.electionTimeout < this.heartbeatInterval )\n         {\n-            throw new IllegalArgumentException( String.format(\n-                            \"Election timeout %s should not be shorter than heartbeat interval %s\", this.electionTimeout, this.heartbeatInterval\n-            ) );\n+            throw new IllegalArgumentException( String.format( \"Election timeout %s should not be shorter than heartbeat interval %s\", this.electionTimeout, this.heartbeatInterval ) );\n         }\n     }\n \n-    synchronized void start( ThrowingConsumer<Clock, Exception> electionAction, ThrowingConsumer<Clock, Exception> heartbeatAction )\n+    synchronized void start( ThrowingConsumer<Clock,Exception> electionAction, ThrowingConsumer<Clock,Exception> heartbeatAction )\n     {\n         this.electionTimer = timerService.create( Timeouts.ELECTION, Groups.raft, renewing( electionAction) );\n         this.electionTimer.set( uniformRandomTimeout( electionTimeout, electionTimeout * 2, MILLISECONDS ) );\n-\n-        this.heartbeatTimer = timerService.create( Timeouts.HEARTBEAT, Groups.raft, renewing( heartbeatAction ) );\n+this.heartbeatTimer = timerService.create( Timeouts.HEARTBEAT, Groups.raft, renewing( heartbeatAction ) );\n         this.heartbeatTimer.set( fixedTimeout( heartbeatInterval, MILLISECONDS ) );\n-\n-        lastElectionRenewalMillis = clock.millis();\n+lastElectionRenewalMillis = clock.millis();\n     }\n \n     synchronized void stop()\n@@ -83,7 +78,8 @@ class LeaderAvailabilityTimers\n         {\n             electionTimer.cancel( ASYNC );\n         }\n-        if ( heartbeatTimer != null )\n+\n+if ( heartbeatTimer != null )\n         {\n             heartbeatTimer.cancel( ASYNC );\n         }\n@@ -109,7 +105,7 @@ class LeaderAvailabilityTimers\n         return electionTimeout;\n     }\n \n-    private TimeoutHandler renewing( ThrowingConsumer<Clock, Exception> action )\n+    private TimeoutHandler renewing( ThrowingConsumer<Clock,Exception> action )\n     {\n         return timeout ->\n         {\n@@ -124,4 +120,4 @@ class LeaderAvailabilityTimers\n             timeout.reset();\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}