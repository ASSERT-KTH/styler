{
    "project_name": "IQSS-dataverse",
    "error_id": "60",
    "information": {
        "errors": [
            {
                "line": "12",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class BitSet implements Serializable {\n\n\tprivate long store = 0l;\n\t\n\t/**\n     * Creates a new set with all bits set to 0.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/60/BitSet.java\nindex 93e01bac551..fe4b15d058c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/60/BitSet.java\n@@ -9,7 +9,7 @@ import java.util.EnumSet;\n  */\n public class BitSet implements Serializable {\n \n-\tprivate long store = 0l;\n+private long store = 0l;\n \t\n \t/**\n      * Creates a new set with all bits set to 0.\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/60/BitSet.java\nindex 93e01bac551..2070088d074 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/60/BitSet.java\n@@ -5,116 +5,128 @@ import java.util.EnumSet;\n \n /**\n  * A set, backed by a single {@code long}.\n+ *\n  * @author michael\n  */\n public class BitSet implements Serializable {\n \n-\tprivate long store = 0l;\n-\t\n-\t/**\n-     * Creates a new set with all bits set to 0.\n-     * @return a new, empty, set.\n-     */\n-    public static BitSet emptySet() {\n-\t\treturn new BitSet();\n-\t}\n-\t\n-    /**\n-     * Creates a new set with all bits set to 1.\n-     * @return a new, full, set.\n-     */\n-\tpublic static BitSet fullSet() {\n-\t\treturn new BitSet( ~0 );\n-\t}\n-\t\n-\t/**\n-\t * Returns all the indices a bit set may have. Can be used for \n-\t * cheap for-each loops (i.e. no boxing/unboxing).\n-\t * @return All the indices a BitSet has [0..63]\n-\t */\n-\tpublic static short[] allIndices() {\n-\t\tshort[] retVal = new short[64];\n-\t\tfor ( short s=0; s<64; s++ ) retVal[s]=s;\n-\t\treturn retVal;\n-\t}\n-\t\n-\tpublic static BitSet from( EnumSet<?> es ) {\n-\t\tif ( es.isEmpty() ) return emptySet();\n-\t\tBitSet retVal = new BitSet();\n-\t\tfor ( Enum e : es ) {\n-\t\t\tretVal.set( e.ordinal() );\n-\t\t}\n-\t\treturn retVal;\n-\t}\n-\n-\tpublic BitSet() {}\n-\t\n-\tpublic BitSet( BitSet other ) {\n-\t\tstore = other.getBits();\n-\t}\n-\t\n-\tpublic BitSet( long initial ) {\n-\t\tstore = initial;\n-\t}\n-\t\n-\tpublic <E extends Enum<E>> EnumSet<E> asSetOf( Class<E> enumClass ) {\n-\t\tEnumSet<E> retVal = EnumSet.noneOf(enumClass);\n-\t\tif ( isEmpty() ) return retVal;\n-\t\tfor ( E e : EnumSet.allOf(enumClass) ) {\n-\t\t\tif ( isSet(e.ordinal()) ) {\n-\t\t\t\tretVal.add(e);\n-\t\t\t}\n-\t\t}\n-\t\treturn retVal;\n-\t}\n-\t\n-\tpublic boolean isEmpty() {\n-\t\treturn store == 0;\n-\t}\n-\t\n-\tpublic BitSet set( int idx, boolean value ) {\n-\t\treturn value ? set(idx) : unset(idx);\n-\t}\n-\t\n-\tpublic BitSet set( int idx ) {\n-\t\tstore = store | (1l<<idx);\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic BitSet unset( int idx ) {\n-\t\tstore = store & (~(1l<<idx));\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic boolean isSet( int idx ) {\n-\t\treturn ( (store&(1l<<idx)) != 0 );\n-\t}\n-\t\n-\tpublic BitSet copy() {\n-\t\treturn new BitSet( this );\n-\t}\n-\t\n-\t/**\n-\t * Adds {@code other} to {@code this} set.\n-\t * @param other The we union with.\n-\t * @return {@code this}, for call chaining.\n-\t */\n-\tpublic BitSet union( BitSet other ) {\n-\t\tstore = store | other.getBits();\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic BitSet intersect( BitSet other ) {\n-\t\tstore = store & other.getBits();\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic BitSet xor( BitSet other ) {\n-\t\tstore = store ^ other.getBits();\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic long getBits() {\n-\t\treturn store;\n-\t}\n+  private long store = 0l;\n+\n+  /**\n+   * Creates a new set with all bits set to 0.\n+   *\n+   * @return a new, empty, set.\n+   */\n+  public static BitSet emptySet() {\n+    return new BitSet();\n+  }\n+\n+  /**\n+   * Creates a new set with all bits set to 1.\n+   *\n+   * @return a new, full, set.\n+   */\n+  public static BitSet fullSet() {\n+    return new BitSet(~0);\n+  }\n+\n+  /**\n+   * Returns all the indices a bit set may have. Can be used for\n+   * cheap for-each loops (i.e. no boxing/unboxing).\n+   *\n+   * @return All the indices a BitSet has [0..63]\n+   */\n+  public static short[] allIndices() {\n+    short[] retVal = new short[64];\n+    for (short s = 0; s < 64; s++) {\n+      retVal[s] = s;\n+    }\n+    return retVal;\n+  }\n+\n+  public static BitSet from(EnumSet<?> es) {\n+    if (es.isEmpty()) {\n+      return emptySet();\n+    }\n+    BitSet retVal = new BitSet();\n+    for (Enum e : es) {\n+      retVal.set(e.ordinal());\n+    }\n+    return retVal;\n+  }\n+\n+  public BitSet() {\n+  }\n+\n+  public BitSet(BitSet other) {\n+    store = other.getBits();\n+  }\n+\n+  public BitSet(long initial) {\n+    store = initial;\n+  }\n+\n+  public <E extends Enum<E>> EnumSet<E> asSetOf(Class<E> enumClass) {\n+    EnumSet<E> retVal = EnumSet.noneOf(enumClass);\n+    if (isEmpty()) {\n+      return retVal;\n+    }\n+    for (E e : EnumSet.allOf(enumClass)) {\n+      if (isSet(e.ordinal())) {\n+        retVal.add(e);\n+      }\n+    }\n+    return retVal;\n+  }\n+\n+  public boolean isEmpty() {\n+    return store == 0;\n+  }\n+\n+  public BitSet set(int idx, boolean value) {\n+    return value ? set(idx) : unset(idx);\n+  }\n+\n+  public BitSet set(int idx) {\n+    store = store | (1l << idx);\n+    return this;\n+  }\n+\n+  public BitSet unset(int idx) {\n+    store = store & (~(1l << idx));\n+    return this;\n+  }\n+\n+  public boolean isSet(int idx) {\n+    return ((store & (1l << idx)) != 0);\n+  }\n+\n+  public BitSet copy() {\n+    return new BitSet(this);\n+  }\n+\n+  /**\n+   * Adds {@code other} to {@code this} set.\n+   *\n+   * @param other The we union with.\n+   * @return {@code this}, for call chaining.\n+   */\n+  public BitSet union(BitSet other) {\n+    store = store | other.getBits();\n+    return this;\n+  }\n+\n+  public BitSet intersect(BitSet other) {\n+    store = store & other.getBits();\n+    return this;\n+  }\n+\n+  public BitSet xor(BitSet other) {\n+    store = store ^ other.getBits();\n+    return this;\n+  }\n+\n+  public long getBits() {\n+    return store;\n+  }\n }\n",
            "diff_size": 120
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "20",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/60/BitSet.java\nindex 93e01bac551..bd16444683c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/60/BitSet.java\n@@ -9,112 +9,112 @@ import java.util.EnumSet;\n  */\n public class BitSet implements Serializable {\n \n-\tprivate long store = 0l;\n-\t\n-\t/**\n+    private long store = 0l;\n+/**\n      * Creates a new set with all bits set to 0.\n      * @return a new, empty, set.\n      */\n-    public static BitSet emptySet() {\n-\t\treturn new BitSet();\n-\t}\n+public static BitSet emptySet() {\n+    return new BitSet();\n+    }\n \t\n     /**\n      * Creates a new set with all bits set to 1.\n      * @return a new, full, set.\n      */\n \tpublic static BitSet fullSet() {\n-\t\treturn new BitSet( ~0 );\n-\t}\n-\t\n-\t/**\n+    return new BitSet( ~0 );\n+    }\n+\n+/**\n \t * Returns all the indices a bit set may have. Can be used for \n \t * cheap for-each loops (i.e. no boxing/unboxing).\n \t * @return All the indices a BitSet has [0..63]\n \t */\n-\tpublic static short[] allIndices() {\n-\t\tshort[] retVal = new short[64];\n+public static short[] allIndices() {\n+    short[] retVal = new short[64];\n \t\tfor ( short s=0; s<64; s++ ) retVal[s]=s;\n \t\treturn retVal;\n-\t}\n-\t\n-\tpublic static BitSet from( EnumSet<?> es ) {\n+    }\n+\n+public static BitSet from( EnumSet<?> es ) {\n \t\tif ( es.isEmpty() ) return emptySet();\n \t\tBitSet retVal = new BitSet();\n \t\tfor ( Enum e : es ) {\n-\t\t\tretVal.set( e.ordinal() );\n-\t\t}\n+    retVal.set( e.ordinal() );\n+    }\n \t\treturn retVal;\n-\t}\n+    }\n \n \tpublic BitSet() {}\n-\t\n-\tpublic BitSet( BitSet other ) {\n+\n+    public BitSet( BitSet other ) {\n \t\tstore = other.getBits();\n-\t}\n-\t\n-\tpublic BitSet( long initial ) {\n+    }\n+\n+public BitSet( long initial ) {\n \t\tstore = initial;\n-\t}\n-\t\n-\tpublic <E extends Enum<E>> EnumSet<E> asSetOf( Class<E> enumClass ) {\n+    }\n+\n+    public <E extends Enum<E>> EnumSet<E> asSetOf( Class<E> enumClass ) {\n \t\tEnumSet<E> retVal = EnumSet.noneOf(enumClass);\n \t\tif ( isEmpty() ) return retVal;\n \t\tfor ( E e : EnumSet.allOf(enumClass) ) {\n-\t\t\tif ( isSet(e.ordinal()) ) {\n-\t\t\t\tretVal.add(e);\n-\t\t\t}\n-\t\t}\n+    if ( isSet(e.ordinal()) ) {\n+    retVal.add(e);\n+    }\n+    }\n \t\treturn retVal;\n-\t}\n-\t\n-\tpublic boolean isEmpty() {\n+    }\n+\n+public boolean isEmpty() {\n \t\treturn store == 0;\n-\t}\n-\t\n-\tpublic BitSet set( int idx, boolean value ) {\n+    }\n+\n+public BitSet set( int idx, boolean value ) {\n \t\treturn value ? set(idx) : unset(idx);\n-\t}\n-\t\n-\tpublic BitSet set( int idx ) {\n+    }\n+\n+public BitSet set( int idx ) {\n \t\tstore = store | (1l<<idx);\n \t\treturn this;\n-\t}\n-\t\n-\tpublic BitSet unset( int idx ) {\n+    }\n+\n+public BitSet unset( int idx ) {\n \t\tstore = store & (~(1l<<idx));\n \t\treturn this;\n-\t}\n-\t\n-\tpublic boolean isSet( int idx ) {\n+    }\n+\n+public boolean isSet( int idx ) {\n \t\treturn ( (store&(1l<<idx)) != 0 );\n-\t}\n-\t\n-\tpublic BitSet copy() {\n+    }\n+\n+public BitSet copy() {\n \t\treturn new BitSet( this );\n-\t}\n-\t\n-\t/**\n+    }\n+\n+/**\n \t * Adds {@code other} to {@code this} set.\n \t * @param other The we union with.\n \t * @return {@code this}, for call chaining.\n \t */\n-\tpublic BitSet union( BitSet other ) {\n-\t\tstore = store | other.getBits();\n+public BitSet union( BitSet other ) {\n+    store = store | other.getBits();\n \t\treturn this;\n-\t}\n-\t\n-\tpublic BitSet intersect( BitSet other ) {\n+    }\n+\n+public BitSet intersect( BitSet other ) {\n \t\tstore = store & other.getBits();\n \t\treturn this;\n-\t}\n-\t\n-\tpublic BitSet xor( BitSet other ) {\n+    }\n+\n+public BitSet xor( BitSet other ) {\n \t\tstore = store ^ other.getBits();\n \t\treturn this;\n-\t}\n-\t\n-\tpublic long getBits() {\n+    }\n+\n+public long getBits() {\n \t\treturn store;\n-\t}\n-}\n+    }\n+\n+    }\n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/60/BitSet.java\nindex 93e01bac551..2c959dac2e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/60/BitSet.java\n@@ -7,114 +7,122 @@ import java.util.EnumSet;\n  * A set, backed by a single {@code long}.\n  * @author michael\n  */\n+\n+\n public class BitSet implements Serializable {\n \n-\tprivate long store = 0l;\n-\t\n-\t/**\n+    private long store = 0l;\n+    \n+    /**\n      * Creates a new set with all bits set to 0.\n      * @return a new, empty, set.\n      */\n+\n     public static BitSet emptySet() {\n-\t\treturn new BitSet();\n-\t}\n-\t\n+        return new BitSet();\n+    }\n+    \n     /**\n      * Creates a new set with all bits set to 1.\n      * @return a new, full, set.\n      */\n-\tpublic static BitSet fullSet() {\n-\t\treturn new BitSet( ~0 );\n-\t}\n-\t\n-\t/**\n-\t * Returns all the indices a bit set may have. Can be used for \n-\t * cheap for-each loops (i.e. no boxing/unboxing).\n-\t * @return All the indices a BitSet has [0..63]\n-\t */\n-\tpublic static short[] allIndices() {\n-\t\tshort[] retVal = new short[64];\n-\t\tfor ( short s=0; s<64; s++ ) retVal[s]=s;\n-\t\treturn retVal;\n-\t}\n-\t\n-\tpublic static BitSet from( EnumSet<?> es ) {\n-\t\tif ( es.isEmpty() ) return emptySet();\n-\t\tBitSet retVal = new BitSet();\n-\t\tfor ( Enum e : es ) {\n-\t\t\tretVal.set( e.ordinal() );\n-\t\t}\n-\t\treturn retVal;\n-\t}\n-\n-\tpublic BitSet() {}\n-\t\n-\tpublic BitSet( BitSet other ) {\n-\t\tstore = other.getBits();\n-\t}\n-\t\n-\tpublic BitSet( long initial ) {\n-\t\tstore = initial;\n-\t}\n-\t\n-\tpublic <E extends Enum<E>> EnumSet<E> asSetOf( Class<E> enumClass ) {\n-\t\tEnumSet<E> retVal = EnumSet.noneOf(enumClass);\n-\t\tif ( isEmpty() ) return retVal;\n-\t\tfor ( E e : EnumSet.allOf(enumClass) ) {\n-\t\t\tif ( isSet(e.ordinal()) ) {\n-\t\t\t\tretVal.add(e);\n-\t\t\t}\n-\t\t}\n-\t\treturn retVal;\n-\t}\n-\t\n-\tpublic boolean isEmpty() {\n-\t\treturn store == 0;\n-\t}\n-\t\n-\tpublic BitSet set( int idx, boolean value ) {\n-\t\treturn value ? set(idx) : unset(idx);\n-\t}\n-\t\n-\tpublic BitSet set( int idx ) {\n-\t\tstore = store | (1l<<idx);\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic BitSet unset( int idx ) {\n-\t\tstore = store & (~(1l<<idx));\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic boolean isSet( int idx ) {\n-\t\treturn ( (store&(1l<<idx)) != 0 );\n-\t}\n-\t\n-\tpublic BitSet copy() {\n-\t\treturn new BitSet( this );\n-\t}\n-\t\n-\t/**\n-\t * Adds {@code other} to {@code this} set.\n-\t * @param other The we union with.\n-\t * @return {@code this}, for call chaining.\n-\t */\n-\tpublic BitSet union( BitSet other ) {\n-\t\tstore = store | other.getBits();\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic BitSet intersect( BitSet other ) {\n-\t\tstore = store & other.getBits();\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic BitSet xor( BitSet other ) {\n-\t\tstore = store ^ other.getBits();\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic long getBits() {\n-\t\treturn store;\n-\t}\n-}\n+\n+    public static BitSet fullSet() {\n+        return new BitSet(~0);\n+    }\n+    \n+    /**\n+     * Returns all the indices a bit set may have. Can be used for \n+     * cheap for-each loops (i.e. no boxing/unboxing).\n+     * @return All the indices a BitSet has [0..63]\n+     */\n+\n+    public static short[] allIndices() {\n+        short[] retVal = new short[64];\n+        for (short s = 0; s < 64; s++) retVal[s] = s;\n+        return retVal;\n+    }\n+\n+    public static BitSet from(EnumSet<?> es) {\n+        if (es.isEmpty()) return emptySet();\n+        BitSet retVal = new BitSet();\n+        for (Enum e : es) {\n+            retVal.set(e.ordinal());\n+        }\n+        return retVal;\n+    }\n+\n+    public BitSet() {}\n+\n+    public BitSet(BitSet other) {\n+        store = other.getBits();\n+    }\n+\n+    public BitSet(long initial) {\n+        store = initial;\n+    }\n+\n+    public <E extends Enum<E>> EnumSet<E> asSetOf(Class<E> enumClass) {\n+        EnumSet<E> retVal = EnumSet.noneOf(enumClass);\n+        if (isEmpty()) return retVal;\n+\n+        for (E e : EnumSet.allOf(enumClass)) {\n+            if (isSet(e.ordinal())) {\n+                retVal.add(e);\n+            }\n+        }\n+        return retVal;\n+    }\n+\n+    public boolean isEmpty() {\n+        return store == 0;\n+    }\n+\n+    public BitSet set(int idx, boolean value) {\n+        return value ? set(idx) : unset(idx);\n+    }\n+\n+    public BitSet set(int idx) {\n+        store = store | (1l<<idx);\n+        return this;\n+    }\n+\n+    public BitSet unset(int idx) {\n+        store = store & (~(1l<<idx));\n+        return this;\n+    }\n+\n+    public boolean isSet(int idx) {\n+        return ((store & (1l<<idx)) != 0);\n+    }\n+\n+    public BitSet copy() {\n+        return new BitSet(this);\n+    }\n+    \n+    /**\n+     * Adds {@code other} to {@code this} set.\n+     * @param other The we union with.\n+     * @return {@code this}, for call chaining.\n+     */\n+\n+    public BitSet union(BitSet other) {\n+        store = store | other.getBits();\n+        return this;\n+    }\n+\n+    public BitSet intersect(BitSet other) {\n+        store = store & other.getBits();\n+        return this;\n+    }\n+\n+    public BitSet xor(BitSet other) {\n+        store = store ^ other.getBits();\n+        return this;\n+    }\n+\n+    public long getBits() {\n+        return store;\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 109
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/60/BitSet.java\nindex 93e01bac551..fe4b15d058c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/60/BitSet.java\n@@ -9,7 +9,7 @@ import java.util.EnumSet;\n  */\n public class BitSet implements Serializable {\n \n-\tprivate long store = 0l;\n+private long store = 0l;\n \t\n \t/**\n      * Creates a new set with all bits set to 0.\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/60/BitSet.java\nindex 93e01bac551..c5b6764ad47 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/60/BitSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/60/BitSet.java\n@@ -9,7 +9,7 @@ import java.util.EnumSet;\n  */\n public class BitSet implements Serializable {\n \n-\tprivate long store = 0l;\n+    private long store = 0l;\n \t\n \t/**\n      * Creates a new set with all bits set to 0.\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}