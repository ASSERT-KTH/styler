{
    "project_name": "fangjinuo-easyjson",
    "error_id": "66",
    "information": {
        "errors": [
            {
                "line": "252",
                "column": "30",
                "severity": "warning",
                "message": "'{' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\n    @Override public void close() throws IOException {\n        stack = new Object[] { SENTINEL_CLOSED };\n        stackSize = 1;\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/66/JsonTreeReader.java\nindex 831680c4b0d..1a2858f1b1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/66/JsonTreeReader.java\n@@ -249,7 +249,7 @@ public final class JsonTreeReader extends JsonReader {\n     }\n \n     @Override public void close() throws IOException {\n-        stack = new Object[] { SENTINEL_CLOSED };\n+        stack = new Object[] {SENTINEL_CLOSED };\n         stackSize = 1;\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/66/JsonTreeReader.java\nindex 831680c4b0d..aa3b0aaa60a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/66/JsonTreeReader.java\n@@ -32,14 +32,16 @@ import java.util.Map;\n /**\n  * This reader walks the elements of a JsonTreeNode as if it was coming from a\n  * character stream.\n- *\n  */\n public final class JsonTreeReader extends JsonReader {\n     private static final Reader UNREADABLE_READER = new Reader() {\n-        @Override public int read(char[] buffer, int offset, int count) throws IOException {\n+        @Override\n+        public int read(char[] buffer, int offset, int count) throws IOException {\n             throw new AssertionError();\n         }\n-        @Override public void close() throws IOException {\n+\n+        @Override\n+        public void close() throws IOException {\n             throw new AssertionError();\n         }\n     };\n@@ -67,14 +69,16 @@ public final class JsonTreeReader extends JsonReader {\n         push(element);\n     }\n \n-    @Override public void beginArray() throws IOException {\n+    @Override\n+    public void beginArray() throws IOException {\n         expect(JsonToken.BEGIN_ARRAY);\n         JsonArrayNode array = (JsonArrayNode) peekStack();\n         push(array.iterator());\n         pathIndices[stackSize - 1] = 0;\n     }\n \n-    @Override public void endArray() throws IOException {\n+    @Override\n+    public void endArray() throws IOException {\n         expect(JsonToken.END_ARRAY);\n         popStack(); // empty iterator\n         popStack(); // array\n@@ -83,13 +87,15 @@ public final class JsonTreeReader extends JsonReader {\n         }\n     }\n \n-    @Override public void beginObject() throws IOException {\n+    @Override\n+    public void beginObject() throws IOException {\n         expect(JsonToken.BEGIN_OBJECT);\n         JsonObjectNode object = (JsonObjectNode) peekStack();\n         push(object.propertySet().iterator());\n     }\n \n-    @Override public void endObject() throws IOException {\n+    @Override\n+    public void endObject() throws IOException {\n         expect(JsonToken.END_OBJECT);\n         popStack(); // empty iterator\n         popStack(); // object\n@@ -98,12 +104,14 @@ public final class JsonTreeReader extends JsonReader {\n         }\n     }\n \n-    @Override public boolean hasNext() throws IOException {\n+    @Override\n+    public boolean hasNext() throws IOException {\n         JsonToken token = peek();\n         return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;\n     }\n \n-    @Override public JsonToken peek() throws IOException {\n+    @Override\n+    public JsonToken peek() throws IOException {\n         if (stackSize == 0) {\n             return JsonToken.END_DOCUMENT;\n         }\n@@ -159,11 +167,12 @@ public final class JsonTreeReader extends JsonReader {\n     private void expect(JsonToken expected) throws IOException {\n         if (peek() != expected) {\n             throw new IllegalStateException(\n-                    \"Expected \" + expected + \" but was \" + peek() + locationString());\n+                \"Expected \" + expected + \" but was \" + peek() + locationString());\n         }\n     }\n \n-    @Override public String nextName() throws IOException {\n+    @Override\n+    public String nextName() throws IOException {\n         expect(JsonToken.NAME);\n         Iterator<?> i = (Iterator<?>) peekStack();\n         Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\n@@ -173,11 +182,12 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public String nextString() throws IOException {\n+    @Override\n+    public String nextString() throws IOException {\n         JsonToken token = peek();\n         if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\n             throw new IllegalStateException(\n-                    \"Expected \" + JsonToken.STRING + \" but was \" + token + locationString());\n+                \"Expected \" + JsonToken.STRING + \" but was \" + token + locationString());\n         }\n         String result = ((JsonPrimitiveNode) popStack()).getAsString();\n         if (stackSize > 0) {\n@@ -186,7 +196,8 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public boolean nextBoolean() throws IOException {\n+    @Override\n+    public boolean nextBoolean() throws IOException {\n         expect(JsonToken.BOOLEAN);\n         boolean result = ((JsonPrimitiveNode) popStack()).getAsBoolean();\n         if (stackSize > 0) {\n@@ -195,7 +206,8 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public void nextNull() throws IOException {\n+    @Override\n+    public void nextNull() throws IOException {\n         expect(JsonToken.NULL);\n         popStack();\n         if (stackSize > 0) {\n@@ -203,11 +215,12 @@ public final class JsonTreeReader extends JsonReader {\n         }\n     }\n \n-    @Override public double nextDouble() throws IOException {\n+    @Override\n+    public double nextDouble() throws IOException {\n         JsonToken token = peek();\n         if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n             throw new IllegalStateException(\n-                    \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n+                \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n         }\n         double result = ((JsonPrimitiveNode) peekStack()).getAsDouble();\n         if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {\n@@ -220,11 +233,12 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public long nextLong() throws IOException {\n+    @Override\n+    public long nextLong() throws IOException {\n         JsonToken token = peek();\n         if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n             throw new IllegalStateException(\n-                    \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n+                \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n         }\n         long result = ((JsonPrimitiveNode) peekStack()).getAsLong();\n         popStack();\n@@ -234,11 +248,12 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public int nextInt() throws IOException {\n+    @Override\n+    public int nextInt() throws IOException {\n         JsonToken token = peek();\n         if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n             throw new IllegalStateException(\n-                    \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n+                \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n         }\n         int result = ((JsonPrimitiveNode) peekStack()).getAsInt();\n         popStack();\n@@ -248,12 +263,14 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public void close() throws IOException {\n-        stack = new Object[] { SENTINEL_CLOSED };\n+    @Override\n+    public void close() throws IOException {\n+        stack = new Object[] {SENTINEL_CLOSED};\n         stackSize = 1;\n     }\n \n-    @Override public void skipValue() throws IOException {\n+    @Override\n+    public void skipValue() throws IOException {\n         if (peek() == JsonToken.NAME) {\n             nextName();\n             pathNames[stackSize - 2] = \"null\";\n@@ -268,7 +285,8 @@ public final class JsonTreeReader extends JsonReader {\n         }\n     }\n \n-    @Override public String toString() {\n+    @Override\n+    public String toString() {\n         return getClass().getSimpleName();\n     }\n \n@@ -295,7 +313,8 @@ public final class JsonTreeReader extends JsonReader {\n         stack[stackSize++] = newTop;\n     }\n \n-    @Override public String getPath() {\n+    @Override\n+    public String getPath() {\n         StringBuilder result = new StringBuilder().append('$');\n         for (int i = 0; i < stackSize; i++) {\n             if (stack[i] instanceof JsonArrayNode) {\n",
            "diff_size": 46
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/naturalize/66/JsonTreeReader.java\nindex 831680c4b0d..e585c906b14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/naturalize/66/JsonTreeReader.java\n@@ -249,7 +249,8 @@ public final class JsonTreeReader extends JsonReader {\n     }\n \n     @Override public void close() throws IOException {\n-        stack = new Object[] { SENTINEL_CLOSED };\n+        stack = new Object[] {\n+    SENTINEL_CLOSED };\n         stackSize = 1;\n     }\n \n@@ -317,4 +318,4 @@ public final class JsonTreeReader extends JsonReader {\n     private String locationString() {\n         return \" at path \" + getPath();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/66/JsonTreeReader.java\nindex 831680c4b0d..5bc82526e15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/66/JsonTreeReader.java\n@@ -15,7 +15,6 @@\n \n package com.github.fangjinuo.easyjson.core.tree.bind;\n \n-\n import com.github.fangjinuo.easyjson.core.JsonTreeNode;\n import com.github.fangjinuo.easyjson.core.node.JsonArrayNode;\n import com.github.fangjinuo.easyjson.core.node.JsonNullNode;\n@@ -23,7 +22,6 @@ import com.github.fangjinuo.easyjson.core.node.JsonObjectNode;\n import com.github.fangjinuo.easyjson.core.node.JsonPrimitiveNode;\n import com.github.fangjinuo.easyjson.core.tree.stream.JsonReader;\n import com.github.fangjinuo.easyjson.core.tree.stream.JsonToken;\n-\n import java.io.IOException;\n import java.io.Reader;\n import java.util.Iterator;\n@@ -34,15 +32,19 @@ import java.util.Map;\n  * character stream.\n  *\n  */\n+\n public final class JsonTreeReader extends JsonReader {\n     private static final Reader UNREADABLE_READER = new Reader() {\n-        @Override public int read(char[] buffer, int offset, int count) throws IOException {\n-            throw new AssertionError();\n-        }\n-        @Override public void close() throws IOException {\n-            throw new AssertionError();\n-        }\n-    };\n+                                                        @Override\n+                                                        public int read(char[] buffer, int offset, int count) throws IOException {\n+                                                            throw new AssertionError();\n+                                                        }\n+\n+                                                        @Override\n+                                                        public void close() throws IOException {\n+                                                            throw new AssertionError();\n+                                                        }\n+                                                    };\n     private static final Object SENTINEL_CLOSED = new Object();\n \n     /*\n@@ -67,14 +69,18 @@ public final class JsonTreeReader extends JsonReader {\n         push(element);\n     }\n \n-    @Override public void beginArray() throws IOException {\n+    @Override\n+    public void beginArray() throws IOException {\n         expect(JsonToken.BEGIN_ARRAY);\n+\n+\n         JsonArrayNode array = (JsonArrayNode) peekStack();\n         push(array.iterator());\n         pathIndices[stackSize - 1] = 0;\n     }\n \n-    @Override public void endArray() throws IOException {\n+    @Override\n+    public void endArray() throws IOException {\n         expect(JsonToken.END_ARRAY);\n         popStack(); // empty iterator\n         popStack(); // array\n@@ -83,13 +89,17 @@ public final class JsonTreeReader extends JsonReader {\n         }\n     }\n \n-    @Override public void beginObject() throws IOException {\n+    @Override\n+    public void beginObject() throws IOException {\n         expect(JsonToken.BEGIN_OBJECT);\n+\n+\n         JsonObjectNode object = (JsonObjectNode) peekStack();\n         push(object.propertySet().iterator());\n     }\n \n-    @Override public void endObject() throws IOException {\n+    @Override\n+    public void endObject() throws IOException {\n         expect(JsonToken.END_OBJECT);\n         popStack(); // empty iterator\n         popStack(); // object\n@@ -98,16 +108,17 @@ public final class JsonTreeReader extends JsonReader {\n         }\n     }\n \n-    @Override public boolean hasNext() throws IOException {\n+    @Override\n+    public boolean hasNext() throws IOException {\n         JsonToken token = peek();\n         return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;\n     }\n \n-    @Override public JsonToken peek() throws IOException {\n+    @Override\n+    public JsonToken peek() throws IOException {\n         if (stackSize == 0) {\n             return JsonToken.END_DOCUMENT;\n         }\n-\n         Object o = peekStack();\n         if (o instanceof Iterator) {\n             boolean isObject = stack[stackSize - 2] instanceof JsonObjectNode;\n@@ -125,25 +136,25 @@ public final class JsonTreeReader extends JsonReader {\n         } else if (o instanceof JsonObjectNode) {\n             return JsonToken.BEGIN_OBJECT;\n         } else if (o instanceof JsonArrayNode) {\n-            return JsonToken.BEGIN_ARRAY;\n-        } else if (o instanceof JsonPrimitiveNode) {\n-            JsonPrimitiveNode primitive = (JsonPrimitiveNode) o;\n-            if (primitive.isString()) {\n-                return JsonToken.STRING;\n-            } else if (primitive.isBoolean()) {\n-                return JsonToken.BOOLEAN;\n-            } else if (primitive.isNumber()) {\n-                return JsonToken.NUMBER;\n-            } else {\n-                throw new AssertionError();\n-            }\n-        } else if (o instanceof JsonNullNode) {\n-            return JsonToken.NULL;\n-        } else if (o == SENTINEL_CLOSED) {\n+                   return JsonToken.BEGIN_ARRAY;\n+               } else if (o instanceof JsonPrimitiveNode) {\n+                   JsonPrimitiveNode primitive = (JsonPrimitiveNode) o;\n+                   if (primitive.isString()) {\n+                       return JsonToken.STRING;\n+                   } else if (primitive.isBoolean()) {\n+                       return JsonToken.BOOLEAN;\n+                   } else if (primitive.isNumber()) {\n+                              return JsonToken.NUMBER;\n+                          } else {\n+                       throw new AssertionError();\n+                   }\n+               } else if (o instanceof JsonNullNode) {\n+                          return JsonToken.NULL;\n+                      } else if (o == SENTINEL_CLOSED) {\n             throw new IllegalStateException(\"JsonReader is closed\");\n-        } else {\n-            throw new AssertionError();\n-        }\n+                      } else {\n+                          throw new AssertionError();\n+                      }\n     }\n \n     private Object peekStack() {\n@@ -158,13 +169,15 @@ public final class JsonTreeReader extends JsonReader {\n \n     private void expect(JsonToken expected) throws IOException {\n         if (peek() != expected) {\n-            throw new IllegalStateException(\n-                    \"Expected \" + expected + \" but was \" + peek() + locationString());\n+            throw new IllegalStateException(\"Expected \" + expected + \" but was \" + peek() + locationString());\n         }\n     }\n \n-    @Override public String nextName() throws IOException {\n+    @Override\n+    public String nextName() throws IOException {\n         expect(JsonToken.NAME);\n+\n+\n         Iterator<?> i = (Iterator<?>) peekStack();\n         Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\n         String result = (String) entry.getKey();\n@@ -173,11 +186,11 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public String nextString() throws IOException {\n+    @Override\n+    public String nextString() throws IOException {\n         JsonToken token = peek();\n         if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\n-            throw new IllegalStateException(\n-                    \"Expected \" + JsonToken.STRING + \" but was \" + token + locationString());\n+            throw new IllegalStateException(\"Expected \" + JsonToken.STRING + \" but was \" + token + locationString());\n         }\n         String result = ((JsonPrimitiveNode) popStack()).getAsString();\n         if (stackSize > 0) {\n@@ -186,7 +199,8 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public boolean nextBoolean() throws IOException {\n+    @Override\n+    public boolean nextBoolean() throws IOException {\n         expect(JsonToken.BOOLEAN);\n         boolean result = ((JsonPrimitiveNode) popStack()).getAsBoolean();\n         if (stackSize > 0) {\n@@ -195,7 +209,8 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public void nextNull() throws IOException {\n+    @Override\n+    public void nextNull() throws IOException {\n         expect(JsonToken.NULL);\n         popStack();\n         if (stackSize > 0) {\n@@ -203,11 +218,11 @@ public final class JsonTreeReader extends JsonReader {\n         }\n     }\n \n-    @Override public double nextDouble() throws IOException {\n+    @Override\n+    public double nextDouble() throws IOException {\n         JsonToken token = peek();\n         if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n-            throw new IllegalStateException(\n-                    \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n+            throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n         }\n         double result = ((JsonPrimitiveNode) peekStack()).getAsDouble();\n         if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {\n@@ -220,11 +235,11 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public long nextLong() throws IOException {\n+    @Override\n+    public long nextLong() throws IOException {\n         JsonToken token = peek();\n         if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n-            throw new IllegalStateException(\n-                    \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n+            throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n         }\n         long result = ((JsonPrimitiveNode) peekStack()).getAsLong();\n         popStack();\n@@ -234,12 +249,13 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public int nextInt() throws IOException {\n+    @Override\n+    public int nextInt() throws IOException {\n         JsonToken token = peek();\n         if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n-            throw new IllegalStateException(\n-                    \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n+            throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n         }\n+\n         int result = ((JsonPrimitiveNode) peekStack()).getAsInt();\n         popStack();\n         if (stackSize > 0) {\n@@ -248,12 +264,14 @@ public final class JsonTreeReader extends JsonReader {\n         return result;\n     }\n \n-    @Override public void close() throws IOException {\n-        stack = new Object[] { SENTINEL_CLOSED };\n+    @Override\n+    public void close() throws IOException {\n+        stack = new Object[]{SENTINEL_CLOSED};\n         stackSize = 1;\n     }\n \n-    @Override public void skipValue() throws IOException {\n+    @Override\n+    public void skipValue() throws IOException {\n         if (peek() == JsonToken.NAME) {\n             nextName();\n             pathNames[stackSize - 2] = \"null\";\n@@ -268,12 +286,15 @@ public final class JsonTreeReader extends JsonReader {\n         }\n     }\n \n-    @Override public String toString() {\n+    @Override\n+    public String toString() {\n         return getClass().getSimpleName();\n     }\n \n     public void promoteNameToValue() throws IOException {\n         expect(JsonToken.NAME);\n+\n+\n         Iterator<?> i = (Iterator<?>) peekStack();\n         Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\n         push(entry.getValue());\n@@ -295,7 +316,8 @@ public final class JsonTreeReader extends JsonReader {\n         stack[stackSize++] = newTop;\n     }\n \n-    @Override public String getPath() {\n+    @Override\n+    public String getPath() {\n         StringBuilder result = new StringBuilder().append('$');\n         for (int i = 0; i < stackSize; i++) {\n             if (stack[i] instanceof JsonArrayNode) {\n@@ -303,12 +325,12 @@ public final class JsonTreeReader extends JsonReader {\n                     result.append('[').append(pathIndices[i]).append(']');\n                 }\n             } else if (stack[i] instanceof JsonObjectNode) {\n-                if (stack[++i] instanceof Iterator) {\n-                    result.append('.');\n-                    if (pathNames[i] != null) {\n-                        result.append(pathNames[i]);\n-                    }\n-                }\n+                       if (stack[++i] instanceof Iterator) {\n+                           result.append('.');\n+                           if (pathNames[i] != null) {\n+                               result.append(pathNames[i]);\n+                           }\n+                       }\n             }\n         }\n         return result.toString();\n@@ -317,4 +339,4 @@ public final class JsonTreeReader extends JsonReader {\n     private String locationString() {\n         return \" at path \" + getPath();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 93
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/66/JsonTreeReader.java\nindex 831680c4b0d..1a2858f1b1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/66/JsonTreeReader.java\n@@ -249,7 +249,7 @@ public final class JsonTreeReader extends JsonReader {\n     }\n \n     @Override public void close() throws IOException {\n-        stack = new Object[] { SENTINEL_CLOSED };\n+        stack = new Object[] {SENTINEL_CLOSED };\n         stackSize = 1;\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/66/JsonTreeReader.java\nindex 831680c4b0d..bf5f6b33579 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/66/JsonTreeReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/66/JsonTreeReader.java\n@@ -249,7 +249,7 @@ public final class JsonTreeReader extends JsonReader {\n     }\n \n     @Override public void close() throws IOException {\n-        stack = new Object[] { SENTINEL_CLOSED };\n+        stack = new Object[]{SENTINEL_CLOSED };\n         stackSize = 1;\n     }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}