{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1877",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "174",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1877/Header.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1877/Header.java\nindex d8811b2c2e6..fe15b7a3674 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1877/Header.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1877/Header.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.input.csv;\n \n import java.util.Arrays;\n@@ -33,192 +34,191 @@ import org.neo4j.values.storable.CSVHeaderInformation;\n  */\n public class Header implements Cloneable\n {\n-    public interface Factory\n+  public interface Factory\n+  {\n+    /**\n+     * @param dataSeeker    {@link CharSeeker} containing the data. Usually there's a header for us\n+     *                      to read at the very top of it.\n+     * @param configuration {@link Configuration} specific to the format of the data.\n+     * @param idType        type of values we expect the ids to be.\n+     * @param groups        {@link Groups} to register groups in.\n+     * @return the created {@link Header}.\n+     */\n+    Header create(CharSeeker dataSeeker, Configuration configuration, IdType idType, Groups groups);\n+\n+    /**\n+     * @return whether or not this header is already defined. If this returns {@code false} then the header\n+     * will be read from the top of the data stream.\n+     */\n+    boolean isDefined();\n+  }\n+\n+  private final Entry[] entries;\n+\n+  public Header(Entry... entries)\n+  {\n+    this.entries = entries;\n+  }\n+\n+  public Entry[] entries()\n+  {\n+    return entries;\n+  }\n+\n+  public Entry entry(Type type)\n+  {\n+    Entry result = null;\n+    for (Entry entry : entries)\n     {\n-        /**\n-         * @param dataSeeker {@link CharSeeker} containing the data. Usually there's a header for us\n-         * to read at the very top of it.\n-         * @param configuration {@link Configuration} specific to the format of the data.\n-         * @param idType type of values we expect the ids to be.\n-         * @param groups {@link Groups} to register groups in.\n-         * @return the created {@link Header}.\n-         */\n-        Header create( CharSeeker dataSeeker, Configuration configuration, IdType idType, Groups groups );\n-\n-        /**\n-         * @return whether or not this header is already defined. If this returns {@code false} then the header\n-         * will be read from the top of the data stream.\n-         */\n-        boolean isDefined();\n+      if (entry.type() == type)\n+      {\n+        if (result != null)\n+        {\n+          throw new IllegalStateException(\"Multiple header entries of type \" + type);\n+        }\n+        result = entry;\n+      }\n     }\n-\n-    private final Entry[] entries;\n-\n-    public Header( Entry... entries )\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return Arrays.toString(entries);\n+  }\n+\n+  @Override\n+  public Header clone()\n+  {\n+    Entry[] entries = new Entry[this.entries.length];\n+    for (int i = 0; i < entries.length; i++)\n     {\n-        this.entries = entries;\n+      entries[i] = this.entries[i].clone();\n     }\n-\n-    public Entry[] entries()\n+    return new Header(entries);\n+  }\n+\n+  public static class Entry implements Cloneable\n+  {\n+    private final String name;\n+    private final Type type;\n+    private final Group group;\n+    private final Extractor<?> extractor;\n+    // This can be used to encapsulate the parameters set in the header for spatial and temporal columns\n+    private final CSVHeaderInformation optionalParameter;\n+\n+    public Entry(String name, Type type, Group group, Extractor<?> extractor)\n     {\n-        return entries;\n+      this.name = name;\n+      this.type = type;\n+      this.group = group;\n+      this.extractor = extractor;\n+      this.optionalParameter = null;\n     }\n \n-    public Entry entry( Type type )\n+    public Entry(String name, Type type, Group group, Extractor<?> extractor, CSVHeaderInformation optionalParameter)\n     {\n-        Entry result = null;\n-        for ( Entry entry : entries )\n-        {\n-            if ( entry.type() == type )\n-            {\n-                if ( result != null )\n-                {\n-                    throw new IllegalStateException( \"Multiple header entries of type \" + type );\n-                }\n-                result = entry;\n-            }\n-        }\n-        return result;\n+      this.name = name;\n+      this.type = type;\n+      this.group = group;\n+      this.extractor = extractor;\n+      this.optionalParameter = optionalParameter;\n     }\n \n     @Override\n     public String toString()\n     {\n-        return Arrays.toString( entries );\n+      if (optionalParameter == null)\n+      {\n+        return (name != null ? name : \"\") + \":\" + (type == Type.PROPERTY ? extractor.name().toLowerCase() : type.name()) +\n+            (group() != Group.GLOBAL ? \"(\" + group().name() + \")\" : \"\");\n+      } else\n+      {\n+        return (name != null ? name : \"\") + \":\" +\n+            (type == Type.PROPERTY ? extractor.name().toLowerCase() + \"[\" + optionalParameter + \"]\" : type.name()) +\n+            (group() != Group.GLOBAL ? \"(\" + group().name() + \")\" : \"\");\n+      }\n     }\n \n-    @Override\n-    public Header clone()\n+    public Extractor<?> extractor()\n     {\n-        Entry[] entries = new Entry[this.entries.length];\n-        for ( int i = 0; i < entries.length; i++ )\n-        {\n-            entries[i] = this.entries[i].clone();\n-        }\n-        return new Header( entries );\n+      return extractor;\n     }\n \n-    public static class Entry implements Cloneable\n+    public Type type()\n     {\n-        private final String name;\n-        private final Type type;\n-        private final Group group;\n-        private final Extractor<?> extractor;\n-        // This can be used to encapsulate the parameters set in the header for spatial and temporal columns\n-        private final CSVHeaderInformation optionalParameter;\n-\n-        public Entry( String name, Type type, Group group, Extractor<?> extractor )\n-        {\n-            this.name = name;\n-            this.type = type;\n-            this.group = group;\n-            this.extractor = extractor;\n-            this.optionalParameter = null;\n-        }\n-\n-        public Entry( String name, Type type, Group group, Extractor<?> extractor, CSVHeaderInformation optionalParameter )\n-        {\n-            this.name = name;\n-            this.type = type;\n-            this.group = group;\n-            this.extractor = extractor;\n-            this.optionalParameter = optionalParameter;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            if ( optionalParameter == null )\n-            {\n-                return (name != null ? name : \"\") + \":\" + (type == Type.PROPERTY ? extractor.name().toLowerCase() : type.name()) +\n-                        (group() != Group.GLOBAL ? \"(\" + group().name() + \")\" : \"\");\n-            }\n-            else\n-            {\n-                return (name != null ? name : \"\") + \":\" +\n-                        (type == Type.PROPERTY ? extractor.name().toLowerCase() + \"[\" + optionalParameter + \"]\" : type.name()) +\n-                        (group() != Group.GLOBAL ? \"(\" + group().name() + \")\" : \"\");\n-            }\n-        }\n-\n-        public Extractor<?> extractor()\n-        {\n-            return extractor;\n-        }\n-\n-        public Type type()\n-        {\n-            return type;\n-        }\n+      return type;\n+    }\n \n-        public Group group()\n-        {\n-            return group != null ? group : Group.GLOBAL;\n-        }\n+    public Group group()\n+    {\n+      return group != null ? group : Group.GLOBAL;\n+    }\n \n-        public String name()\n-        {\n-            return name;\n-        }\n+    public String name()\n+    {\n+      return name;\n+    }\n \n-        public CSVHeaderInformation optionalParameter()\n-        {\n-            return optionalParameter;\n-        }\n+    public CSVHeaderInformation optionalParameter()\n+    {\n+      return optionalParameter;\n+    }\n \n-        @Override\n-        public int hashCode()\n-        {\n-            final int prime = 31;\n-            int result = 1;\n-            if ( name != null )\n-            {\n-                result = prime * result + name.hashCode();\n-            }\n-            result = prime * result + type.hashCode();\n-            if ( group != null )\n-            {\n-                result = prime * result + group.hashCode();\n-            }\n-            result = prime * result + extractor.hashCode();\n-            return result;\n-        }\n+    @Override\n+    public int hashCode()\n+    {\n+      final int prime = 31;\n+      int result = 1;\n+      if (name != null)\n+      {\n+        result = prime * result + name.hashCode();\n+      }\n+      result = prime * result + type.hashCode();\n+      if (group != null)\n+      {\n+        result = prime * result + group.hashCode();\n+      }\n+      result = prime * result + extractor.hashCode();\n+      return result;\n+    }\n \n-        @Override\n-        public boolean equals( Object obj )\n-        {\n-            if ( this == obj )\n-            {\n-                return true;\n-            }\n-            if ( obj == null || getClass() != obj.getClass() )\n-            {\n-                return false;\n-            }\n-            Entry other = (Entry) obj;\n-            return nullSafeEquals( name, other.name ) && type == other.type &&\n-                    nullSafeEquals( group, other.group ) && extractorEquals( extractor, other.extractor ) &&\n-                    nullSafeEquals( optionalParameter, other.optionalParameter );\n-        }\n+    @Override\n+    public boolean equals(Object obj)\n+    {\n+      if (this == obj)\n+      {\n+        return true;\n+      }\n+      if (obj == null || getClass() != obj.getClass())\n+      {\n+        return false;\n+      }\n+      Entry other = (Entry) obj;\n+      return nullSafeEquals(name, other.name) && type == other.type &&\n+          nullSafeEquals(group, other.group) && extractorEquals(extractor, other.extractor) &&\n+          nullSafeEquals(optionalParameter, other.optionalParameter);\n+    }\n \n-        @Override\n-        public Entry clone()\n-        {\n-            return new Entry( name, type, group, extractor != null ? extractor.clone() : null, optionalParameter );\n-        }\n+    @Override\n+    public Entry clone()\n+    {\n+      return new Entry(name, type, group, extractor != null ? extractor.clone() : null, optionalParameter);\n+    }\n \n-        private boolean nullSafeEquals( Object o1, Object o2 )\n-        {\n-            return o1 == null || o2 == null ? o1 == o2 : o1.equals( o2 );\n-        }\n+    private boolean nullSafeEquals(Object o1, Object o2)\n+    {\n+      return o1 == null || o2 == null ? o1 == o2 : o1.equals(o2);\n+    }\n \n-        private boolean extractorEquals( Extractor<?> first, Extractor<?> other )\n-        {\n-            if ( first == null || other == null )\n-            {\n-                return first == other;\n-            }\n-            return first.getClass().equals( other.getClass() );\n-        }\n+    private boolean extractorEquals(Extractor<?> first, Extractor<?> other)\n+    {\n+      if (first == null || other == null)\n+      {\n+        return first == other;\n+      }\n+      return first.getClass().equals(other.getClass());\n     }\n+  }\n }\n",
            "diff_size": 230
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1877/Header.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1877/Header.java\nindex d8811b2c2e6..0a0aa2b107b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1877/Header.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1877/Header.java\n@@ -75,7 +75,8 @@ public class Header implements Cloneable\n                 {\n                     throw new IllegalStateException( \"Multiple header entries of type \" + type );\n                 }\n-                result = entry;\n+\n+result = entry;\n             }\n         }\n         return result;\n@@ -130,15 +131,12 @@ public class Header implements Cloneable\n         {\n             if ( optionalParameter == null )\n             {\n-                return (name != null ? name : \"\") + \":\" + (type == Type.PROPERTY ? extractor.name().toLowerCase() : type.name()) +\n-                        (group() != Group.GLOBAL ? \"(\" + group().name() + \")\" : \"\");\n+                return (name != null ? name : \"\") + \":\" + ( type == Type.PROPERTY ? extractor.name().toLowerCase() : type.name()) + (group() != Group.GLOBAL ? \"(\" + group().name() + \")\" : \"\" );\n             }\n             else\n             {\n-                return (name != null ? name : \"\") + \":\" +\n-                        (type == Type.PROPERTY ? extractor.name().toLowerCase() + \"[\" + optionalParameter + \"]\" : type.name()) +\n-                        (group() != Group.GLOBAL ? \"(\" + group().name() + \")\" : \"\");\n-            }\n+                return (name != null ? name : \"\") + \":\" + ( type == Type.PROPERTY ? extractor.name().toLowerCase() + \"[\" + optionalParameter + \"]\" : type.name()) + (group() != Group.GLOBAL ? \"(\" + group().name() + \")\" : \"\" );\n+    }\n         }\n \n         public Extractor<?> extractor()\n@@ -175,12 +173,14 @@ public class Header implements Cloneable\n             {\n                 result = prime * result + name.hashCode();\n             }\n-            result = prime * result + type.hashCode();\n+\n+result = prime * result + type.hashCode();\n             if ( group != null )\n             {\n                 result = prime * result + group.hashCode();\n             }\n-            result = prime * result + extractor.hashCode();\n+\n+result = prime * result + extractor.hashCode();\n             return result;\n         }\n \n@@ -191,13 +191,14 @@ public class Header implements Cloneable\n             {\n                 return true;\n             }\n-            if ( obj == null || getClass() != obj.getClass() )\n+\n+if ( obj == null || getClass() != obj.getClass() )\n             {\n                 return false;\n             }\n-            Entry other = (Entry) obj;\n-            return nullSafeEquals( name, other.name ) && type == other.type &&\n-                    nullSafeEquals( group, other.group ) && extractorEquals( extractor, other.extractor ) &&\n+\n+Entry other = (Entry) obj;\n+            return nullSafeEquals( name, other.name ) && type == other.type && nullSafeEquals( group, other.group ) && extractorEquals( extractor, other.extractor ) &&\n                     nullSafeEquals( optionalParameter, other.optionalParameter );\n         }\n \n@@ -218,7 +219,8 @@ public class Header implements Cloneable\n             {\n                 return first == other;\n             }\n-            return first.getClass().equals( other.getClass() );\n+\n+return first.getClass().equals( other.getClass() );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}