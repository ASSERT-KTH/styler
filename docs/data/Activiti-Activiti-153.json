{
    "project_name": "Activiti-Activiti",
    "error_id": "153",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.interceptor;\n\nimport javax.transaction.Status;\nimport javax.transaction.SystemException;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/153/JtaRetryInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/153/JtaRetryInterceptor.java\nindex a2182d626d7..1365ce4673f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/153/JtaRetryInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/153/JtaRetryInterceptor.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.activiti.engine.impl.interceptor;\r\n \r\n import javax.transaction.Status;\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/153/JtaRetryInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/153/JtaRetryInterceptor.java\nindex a2182d626d7..dbe2b883fb3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/153/JtaRetryInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/153/JtaRetryInterceptor.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- * \r\n+ *\r\n  *      http://www.apache.org/licenses/LICENSE-2.0\r\n- * \r\n+ *\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.activiti.engine.impl.interceptor;\r\n \r\n import javax.transaction.Status;\r\n@@ -22,35 +23,33 @@ import org.slf4j.LoggerFactory;\n \r\n /**\r\n  * We cannot perform a retry if we are called in an existing transaction. In that case, the transaction will be marked \"rollback-only\" after the first ActivitiOptimisticLockingException.\r\n- * \r\n-\r\n  */\r\n public class JtaRetryInterceptor extends RetryInterceptor {\r\n \r\n-  private final Logger log = LoggerFactory.getLogger(JtaRetryInterceptor.class);\r\n+    private final Logger log = LoggerFactory.getLogger(JtaRetryInterceptor.class);\r\n \r\n-  protected final TransactionManager transactionManager;\r\n+    protected final TransactionManager transactionManager;\r\n \r\n-  public JtaRetryInterceptor(TransactionManager transactionManager) {\r\n-    this.transactionManager = transactionManager;\r\n-  }\r\n+    public JtaRetryInterceptor(TransactionManager transactionManager) {\r\n+        this.transactionManager = transactionManager;\r\n+    }\r\n \r\n-  @Override\r\n-  public <T> T execute(CommandConfig config, Command<T> command) {\r\n-    if (calledInsideTransaction()) {\r\n-      log.trace(\"Called inside transaction, skipping the retry interceptor.\");\r\n-      return next.execute(config, command);\r\n-    } else {\r\n-      return super.execute(config, command);\r\n+    @Override\r\n+    public <T> T execute(CommandConfig config, Command<T> command) {\r\n+        if (calledInsideTransaction()) {\r\n+            log.trace(\"Called inside transaction, skipping the retry interceptor.\");\r\n+            return next.execute(config, command);\r\n+        } else {\r\n+            return super.execute(config, command);\r\n+        }\r\n     }\r\n-  }\r\n \r\n-  protected boolean calledInsideTransaction() {\r\n-    try {\r\n-      return transactionManager.getStatus() != Status.STATUS_NO_TRANSACTION;\r\n-    } catch (SystemException e) {\r\n-      throw new ActivitiException(\"Could not determine the current status of the transaction manager: \" + e.getMessage(), e);\r\n+    protected boolean calledInsideTransaction() {\r\n+        try {\r\n+            return transactionManager.getStatus() != Status.STATUS_NO_TRANSACTION;\r\n+        } catch (SystemException e) {\r\n+            throw new ActivitiException(\"Could not determine the current status of the transaction manager: \" + e.getMessage(), e);\r\n+        }\r\n     }\r\n-  }\r\n \r\n }\r\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/153/JtaRetryInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/153/JtaRetryInterceptor.java\nindex a2182d626d7..428d1a94205 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/153/JtaRetryInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/153/JtaRetryInterceptor.java\n@@ -10,47 +10,46 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.activiti.engine.impl.interceptor;\r\n-\r\n-import javax.transaction.Status;\r\n-import javax.transaction.SystemException;\r\n-import javax.transaction.TransactionManager;\r\n-\r\n-import org.activiti.engine.ActivitiException;\r\n-import org.slf4j.Logger;\r\n+package org.activiti.engine.impl.interceptor;\n+\n+import javax.transaction.Status;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+import org.activiti.engine.ActivitiException;\n+import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\r\n \r\n /**\r\n  * We cannot perform a retry if we are called in an existing transaction. In that case, the transaction will be marked \"rollback-only\" after the first ActivitiOptimisticLockingException.\r\n  * \r\n \r\n- */\r\n-public class JtaRetryInterceptor extends RetryInterceptor {\r\n-\r\n-  private final Logger log = LoggerFactory.getLogger(JtaRetryInterceptor.class);\r\n-\r\n-  protected final TransactionManager transactionManager;\r\n-\r\n-  public JtaRetryInterceptor(TransactionManager transactionManager) {\r\n-    this.transactionManager = transactionManager;\r\n-  }\r\n-\r\n-  @Override\r\n-  public <T> T execute(CommandConfig config, Command<T> command) {\r\n-    if (calledInsideTransaction()) {\r\n-      log.trace(\"Called inside transaction, skipping the retry interceptor.\");\r\n-      return next.execute(config, command);\r\n-    } else {\r\n-      return super.execute(config, command);\r\n-    }\r\n-  }\r\n-\r\n-  protected boolean calledInsideTransaction() {\r\n-    try {\r\n-      return transactionManager.getStatus() != Status.STATUS_NO_TRANSACTION;\r\n-    } catch (SystemException e) {\r\n-      throw new ActivitiException(\"Could not determine the current status of the transaction manager: \" + e.getMessage(), e);\r\n-    }\r\n-  }\r\n-\r\n-}\r\n+ */\n+\n+\n+public class JtaRetryInterceptor extends RetryInterceptor {\n+\n+  private final Logger log = LoggerFactory.getLogger(JtaRetryInterceptor.class);\n+  protected final TransactionManager transactionManager;\n+\n+  public JtaRetryInterceptor(TransactionManager transactionManager) {\n+    this.transactionManager = transactionManager;\n+  }\n+\n+  @Override\n+  public <T> T execute(CommandConfig config, Command<T> command) {\n+    if (calledInsideTransaction()) {\n+      log.trace(\"Called inside transaction, skipping the retry interceptor.\");\n+      return next.execute(config, command);\n+    } else {\n+      return super.execute(config, command);\n+    }\n+  }\n+\n+  protected boolean calledInsideTransaction() {\n+    try {\n+      return transactionManager.getStatus() != Status.STATUS_NO_TRANSACTION;\n+    } catch (SystemException e) {\n+      throw new ActivitiException(\"Could not determine the current status of the transaction manager: \" + e.getMessage(), e);\n+    }\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/153/JtaRetryInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/153/JtaRetryInterceptor.java\nindex a2182d626d7..1365ce4673f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/153/JtaRetryInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/153/JtaRetryInterceptor.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.activiti.engine.impl.interceptor;\r\n \r\n import javax.transaction.Status;\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/153/JtaRetryInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/153/JtaRetryInterceptor.java\nindex a2182d626d7..1365ce4673f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/153/JtaRetryInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/153/JtaRetryInterceptor.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.activiti.engine.impl.interceptor;\r\n \r\n import javax.transaction.Status;\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}