{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "397",
    "information": {
        "errors": [
            {
                "line": "104",
                "column": "118",
                "severity": "warning",
                "message": "'>' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "   */\n  private void ensureInvocationNotTimeout(Invocation invocation) {\n    if (invocation.getOperationMeta().getConfig().getNanoInvocationTimeout() > 0 && calculateElapsedTime(invocation) >\n        invocation.getOperationMeta().getConfig().getNanoInvocationTimeout()) {\n      if (invocation.getLocalContext(Const.CONTEXT_TIMED_OUT) != null) {\n        // already timed out, do not throw exception again",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/397/InvocationTimeoutBootListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/397/InvocationTimeoutBootListener.java\nindex 86fed1914ce..2c781ff95ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/397/InvocationTimeoutBootListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/397/InvocationTimeoutBootListener.java\n@@ -101,8 +101,8 @@ public class InvocationTimeoutBootListener implements BootListener {\n    *  after timeout.\n    */\n   private void ensureInvocationNotTimeout(Invocation invocation) {\n-    if (invocation.getOperationMeta().getConfig().getNanoInvocationTimeout() > 0 && calculateElapsedTime(invocation) >\n-        invocation.getOperationMeta().getConfig().getNanoInvocationTimeout()) {\n+    if (invocation.getOperationMeta().getConfig().getNanoInvocationTimeout() > 0 && calculateElapsedTime(invocation)\n+        > invocation.getOperationMeta().getConfig().getNanoInvocationTimeout()) {\n       if (invocation.getLocalContext(Const.CONTEXT_TIMED_OUT) != null) {\n         // already timed out, do not throw exception again\n         return;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "104",
                    "column": "118",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/397/InvocationTimeoutBootListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/397/InvocationTimeoutBootListener.java\nindex 86fed1914ce..6811e2c02de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/397/InvocationTimeoutBootListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/397/InvocationTimeoutBootListener.java\n@@ -98,7 +98,7 @@ public class InvocationTimeoutBootListener implements BootListener {\n    * check if invocation is timeout.\n    *\n    * @throws InvocationException if timeout, throw an exception. Will not throw exception twice if this method called\n-   *  after timeout.\n+   *                             after timeout.\n    */\n   private void ensureInvocationNotTimeout(Invocation invocation) {\n     if (invocation.getOperationMeta().getConfig().getNanoInvocationTimeout() > 0 && calculateElapsedTime(invocation) >\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/397/InvocationTimeoutBootListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/397/InvocationTimeoutBootListener.java\nindex 86fed1914ce..9bc0fb03dcb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/397/InvocationTimeoutBootListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/397/InvocationTimeoutBootListener.java\n@@ -101,8 +101,7 @@ public class InvocationTimeoutBootListener implements BootListener {\n    *  after timeout.\n    */\n   private void ensureInvocationNotTimeout(Invocation invocation) {\n-    if (invocation.getOperationMeta().getConfig().getNanoInvocationTimeout() > 0 && calculateElapsedTime(invocation) >\n-        invocation.getOperationMeta().getConfig().getNanoInvocationTimeout()) {\n+    if (invocation.getOperationMeta().getConfig().getNanoInvocationTimeout() > 0 && calculateElapsedTime(invocation) > invocation.getOperationMeta().getConfig().getNanoInvocationTimeout()) {\n       if (invocation.getLocalContext(Const.CONTEXT_TIMED_OUT) != null) {\n         // already timed out, do not throw exception again\n         return;\n@@ -148,4 +147,4 @@ public class InvocationTimeoutBootListener implements BootListener {\n     ensureInvocationNotTimeout(invocation);\n     invocation.addContext(Const.CONTEXT_TIME_ELAPSED, Long.toString(calculateElapsedTime(invocation)));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "104",
                    "column": "118",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/397/InvocationTimeoutBootListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/397/InvocationTimeoutBootListener.java\nindex 86fed1914ce..2c781ff95ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/397/InvocationTimeoutBootListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/397/InvocationTimeoutBootListener.java\n@@ -101,8 +101,8 @@ public class InvocationTimeoutBootListener implements BootListener {\n    *  after timeout.\n    */\n   private void ensureInvocationNotTimeout(Invocation invocation) {\n-    if (invocation.getOperationMeta().getConfig().getNanoInvocationTimeout() > 0 && calculateElapsedTime(invocation) >\n-        invocation.getOperationMeta().getConfig().getNanoInvocationTimeout()) {\n+    if (invocation.getOperationMeta().getConfig().getNanoInvocationTimeout() > 0 && calculateElapsedTime(invocation)\n+        > invocation.getOperationMeta().getConfig().getNanoInvocationTimeout()) {\n       if (invocation.getLocalContext(Const.CONTEXT_TIMED_OUT) != null) {\n         // already timed out, do not throw exception again\n         return;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}