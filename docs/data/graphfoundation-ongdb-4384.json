{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4384",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4384/TextUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4384/TextUtil.java\nindex e9853610b15..30a3757626e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4384/TextUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4384/TextUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers;\n \n import java.util.ArrayList;\n@@ -29,177 +30,174 @@ import java.util.StringTokenizer;\n \n public class TextUtil\n {\n-    private TextUtil()\n-    {\n-    }\n+  private TextUtil()\n+  {\n+  }\n+\n+  public static String templateString(String templateString,\n+                                      Map<String, ?> data)\n+  {\n+    return templateString(templateString, \"\\\\$\", data);\n+  }\n \n-    public static String templateString( String templateString,\n-            Map<String, ?> data )\n+  public static String templateString(String templateString,\n+                                      String variablePrefix, Map<String, ?> data)\n+  {\n+    // Sort data strings on length.\n+    Map<Integer, List<String>> lengthMap =\n+        new HashMap<>();\n+    int longest = 0;\n+    for (String key : data.keySet())\n     {\n-        return templateString( templateString, \"\\\\$\", data );\n+      int length = key.length();\n+      if (length > longest)\n+      {\n+        longest = length;\n+      }\n+\n+      List<String> innerList;\n+      Integer innerKey = length;\n+      if (lengthMap.containsKey(innerKey))\n+      {\n+        innerList = lengthMap.get(innerKey);\n+      } else\n+      {\n+        innerList = new ArrayList<>();\n+        lengthMap.put(innerKey, innerList);\n+      }\n+      innerList.add(key);\n     }\n \n-    public static String templateString( String templateString,\n-            String variablePrefix, Map<String, ?> data )\n+    // Replace it.\n+    String result = templateString;\n+    for (int i = longest; i >= 0; i--)\n     {\n-        // Sort data strings on length.\n-        Map<Integer, List<String>> lengthMap =\n-            new HashMap<>();\n-        int longest = 0;\n-        for ( String key : data.keySet() )\n-        {\n-            int length = key.length();\n-            if ( length > longest )\n-            {\n-                longest = length;\n-            }\n+      Integer lengthKey = i;\n+      if (!lengthMap.containsKey(lengthKey))\n+      {\n+        continue;\n+      }\n \n-            List<String> innerList;\n-            Integer innerKey = length;\n-            if ( lengthMap.containsKey( innerKey ) )\n-            {\n-                innerList = lengthMap.get( innerKey );\n-            }\n-            else\n-            {\n-                innerList = new ArrayList<>();\n-                lengthMap.put( innerKey, innerList );\n-            }\n-            innerList.add( key );\n-        }\n-\n-        // Replace it.\n-        String result = templateString;\n-        for ( int i = longest; i >= 0; i-- )\n+      List<String> list = lengthMap.get(lengthKey);\n+      for (String key : list)\n+      {\n+        Object value = data.get(key);\n+        if (value != null)\n         {\n-            Integer lengthKey = i;\n-            if ( !lengthMap.containsKey( lengthKey ) )\n-            {\n-                continue;\n-            }\n-\n-            List<String> list = lengthMap.get( lengthKey );\n-            for ( String key : list )\n-            {\n-                Object value = data.get( key );\n-                if ( value != null )\n-                {\n-                    String replacement = data.get( key ).toString();\n-                    String regExpMatchString = variablePrefix + key;\n-                    result = result.replaceAll( regExpMatchString, replacement );\n-                }\n-            }\n+          String replacement = data.get(key).toString();\n+          String regExpMatchString = variablePrefix + key;\n+          result = result.replaceAll(regExpMatchString, replacement);\n         }\n-\n-        return result;\n+      }\n     }\n \n-    public static String lastWordOrQuoteOf( String text, boolean preserveQuotation )\n+    return result;\n+  }\n+\n+  public static String lastWordOrQuoteOf(String text, boolean preserveQuotation)\n+  {\n+    String[] quoteParts = text.split(\"\\\"\");\n+    String lastPart = quoteParts[quoteParts.length - 1];\n+    boolean isWithinQuotes = quoteParts.length % 2 == 0;\n+    String lastWord;\n+    if (isWithinQuotes)\n     {\n-        String[] quoteParts = text.split( \"\\\"\" );\n-        String lastPart = quoteParts[quoteParts.length - 1];\n-        boolean isWithinQuotes = quoteParts.length % 2 == 0;\n-        String lastWord;\n-        if ( isWithinQuotes )\n-        {\n-            lastWord = lastPart;\n-            if ( preserveQuotation )\n-            {\n-                lastWord = \"\\\"\" + lastWord + (text.endsWith( \"\\\"\" ) ? \"\\\"\" : \"\");\n-            }\n-        }\n-        else\n-        {\n-            String[] lastPartParts = splitAndKeepEscapedSpaces( lastPart, preserveQuotation );\n-            lastWord = lastPartParts[lastPartParts.length - 1];\n-        }\n-        return lastWord;\n+      lastWord = lastPart;\n+      if (preserveQuotation)\n+      {\n+        lastWord = \"\\\"\" + lastWord + (text.endsWith(\"\\\"\") ? \"\\\"\" : \"\");\n+      }\n+    } else\n+    {\n+      String[] lastPartParts = splitAndKeepEscapedSpaces(lastPart, preserveQuotation);\n+      lastWord = lastPartParts[lastPartParts.length - 1];\n     }\n+    return lastWord;\n+  }\n \n-    private static String[] splitAndKeepEscapedSpaces( String string, boolean preserveEscapes )\n+  private static String[] splitAndKeepEscapedSpaces(String string, boolean preserveEscapes)\n+  {\n+    Collection<String> result = new ArrayList<>();\n+    StringBuilder current = new StringBuilder();\n+    for (int i = 0; i < string.length(); i++)\n     {\n-        Collection<String> result = new ArrayList<>();\n-        StringBuilder current = new StringBuilder();\n-        for ( int i = 0; i < string.length(); i++ )\n-        {\n-            char ch = string.charAt( i );\n-            if ( ch == ' ' )\n-            {\n-                boolean isEscapedSpace = i > 0 && string.charAt( i - 1 ) == '\\\\';\n-                if ( !isEscapedSpace )\n-                {\n-                    result.add( current.toString() );\n-                    current = new StringBuilder();\n-                    continue;\n-                }\n-            }\n-\n-            if ( preserveEscapes || ch != '\\\\' )\n-            {\n-                current.append( ch );\n-            }\n-        }\n-        if ( current.length() > 0 )\n+      char ch = string.charAt(i);\n+      if (ch == ' ')\n+      {\n+        boolean isEscapedSpace = i > 0 && string.charAt(i - 1) == '\\\\';\n+        if (!isEscapedSpace)\n         {\n-            result.add( current.toString() );\n+          result.add(current.toString());\n+          current = new StringBuilder();\n+          continue;\n         }\n-        return result.toArray( new String[result.size()] );\n-    }\n+      }\n \n-    /**\n-     * Tokenizes a string, regarding quotes.\n-     *\n-     * @param string the string to tokenize.\n-     * @return the tokens from the line.\n-     */\n-    public static String[] tokenizeStringWithQuotes( String string )\n+      if (preserveEscapes || ch != '\\\\')\n+      {\n+        current.append(ch);\n+      }\n+    }\n+    if (current.length() > 0)\n     {\n-        return tokenizeStringWithQuotes( string, true, false );\n+      result.add(current.toString());\n     }\n+    return result.toArray(new String[result.size()]);\n+  }\n+\n+  /**\n+   * Tokenizes a string, regarding quotes.\n+   *\n+   * @param string the string to tokenize.\n+   * @return the tokens from the line.\n+   */\n+  public static String[] tokenizeStringWithQuotes(String string)\n+  {\n+    return tokenizeStringWithQuotes(string, true, false);\n+  }\n \n-    /**\n-     * Tokenizes a string, regarding quotes. Examples:\n-     *\n-     * o '\"One two\"'              ==&gt; [ \"One two\" ]\n-     * o 'One two'                ==&gt; [ \"One\", \"two\" ]\n-     * o 'One \"two three\" four'   ==&gt; [ \"One\", \"two three\", \"four\" ]\n-     *\n-     * @param string the string to tokenize.\n-     * @param trim  whether or not to trim each token.\n-     * @param preserveEscapeCharacters whether or not to preserve escape characters '\\', otherwise skip them.\n-     * @return the tokens from the line.\n-     */\n-    public static String[] tokenizeStringWithQuotes( String string, boolean trim, boolean preserveEscapeCharacters )\n+  /**\n+   * Tokenizes a string, regarding quotes. Examples:\n+   * <p>\n+   * o '\"One two\"'              ==&gt; [ \"One two\" ]\n+   * o 'One two'                ==&gt; [ \"One\", \"two\" ]\n+   * o 'One \"two three\" four'   ==&gt; [ \"One\", \"two three\", \"four\" ]\n+   *\n+   * @param string                   the string to tokenize.\n+   * @param trim                     whether or not to trim each token.\n+   * @param preserveEscapeCharacters whether or not to preserve escape characters '\\', otherwise skip them.\n+   * @return the tokens from the line.\n+   */\n+  public static String[] tokenizeStringWithQuotes(String string, boolean trim, boolean preserveEscapeCharacters)\n+  {\n+    if (trim)\n     {\n-        if ( trim )\n+      string = string.trim();\n+    }\n+    ArrayList<String> result = new ArrayList<>();\n+    string = string.trim();\n+    boolean inside = string.startsWith(\"\\\"\");\n+    StringTokenizer quoteTokenizer = new StringTokenizer(string, \"\\\"\");\n+    while (quoteTokenizer.hasMoreTokens())\n+    {\n+      String token = quoteTokenizer.nextToken();\n+      if (trim)\n+      {\n+        token = token.trim();\n+      }\n+      if (token.length() != 0)\n+      {\n+        if (inside)\n         {\n-            string = string.trim();\n-        }\n-        ArrayList<String> result = new ArrayList<>();\n-        string = string.trim();\n-        boolean inside = string.startsWith( \"\\\"\" );\n-        StringTokenizer quoteTokenizer = new StringTokenizer( string, \"\\\"\" );\n-        while ( quoteTokenizer.hasMoreTokens() )\n+          // Don't split\n+          result.add(token);\n+        } else\n         {\n-            String token = quoteTokenizer.nextToken();\n-            if ( trim )\n-            {\n-                token = token.trim();\n-            }\n-            if ( token.length() != 0 )\n-            {\n-                if ( inside )\n-                {\n-                    // Don't split\n-                    result.add( token );\n-                }\n-                else\n-                {\n-                    Collections.addAll( result, TextUtil.splitAndKeepEscapedSpaces( token, preserveEscapeCharacters ) );\n-                }\n-            }\n-            inside = !inside;\n+          Collections.addAll(result, TextUtil.splitAndKeepEscapedSpaces(token, preserveEscapeCharacters));\n         }\n-        return result.toArray( new String[result.size()] );\n+      }\n+      inside = !inside;\n     }\n+    return result.toArray(new String[result.size()]);\n+  }\n }\n",
            "diff_size": 228
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "24",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "127",
                    "column": "43",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4384/TextUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4384/TextUtil.java\nindex e9853610b15..d7c58096bae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4384/TextUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4384/TextUtil.java\n@@ -33,8 +33,7 @@ public class TextUtil\n     {\n     }\n \n-    public static String templateString( String templateString,\n-            Map<String, ?> data )\n+    public static String templateString( String templateString, Map<String, ?> data )\n     {\n         return templateString( templateString, \"\\\\$\", data );\n     }\n@@ -43,13 +42,12 @@ public class TextUtil\n             String variablePrefix, Map<String, ?> data )\n     {\n         // Sort data strings on length.\n-        Map<Integer, List<String>> lengthMap =\n-            new HashMap<>();\n+        Map<Integer, List<String>> lengthMap = new HashMap<>();\n         int longest = 0;\n         for ( String key : data.keySet() )\n         {\n             int length = key.length();\n-            if ( length > longest )\n+            if ( length> longest )\n             {\n                 longest = length;\n             }\n@@ -105,7 +103,7 @@ public class TextUtil\n             lastWord = lastPart;\n             if ( preserveQuotation )\n             {\n-                lastWord = \"\\\"\" + lastWord + (text.endsWith( \"\\\"\" ) ? \"\\\"\" : \"\");\n+                lastWord = \"\\\"\" + lastWord + (text.endsWith( \"\\\"\" ) ? \"\\\"\" : \"\" );\n             }\n         }\n         else\n@@ -113,7 +111,8 @@ public class TextUtil\n             String[] lastPartParts = splitAndKeepEscapedSpaces( lastPart, preserveQuotation );\n             lastWord = lastPartParts[lastPartParts.length - 1];\n         }\n-        return lastWord;\n+\n+return lastWord;\n     }\n \n     private static String[] splitAndKeepEscapedSpaces( String string, boolean preserveEscapes )\n@@ -125,7 +124,7 @@ public class TextUtil\n             char ch = string.charAt( i );\n             if ( ch == ' ' )\n             {\n-                boolean isEscapedSpace = i > 0 && string.charAt( i - 1 ) == '\\\\';\n+                boolean isEscapedSpace = i> 0 && string.charAt( i - 1 ) == '\\\\';\n                 if ( !isEscapedSpace )\n                 {\n                     result.add( current.toString() );\n@@ -143,7 +142,8 @@ public class TextUtil\n         {\n             result.add( current.toString() );\n         }\n-        return result.toArray( new String[result.size()] );\n+\n+return result.toArray( new String[result.size()] );\n     }\n \n     /**\n@@ -186,7 +186,8 @@ public class TextUtil\n             {\n                 token = token.trim();\n             }\n-            if ( token.length() != 0 )\n+\n+if ( token.length() != 0 )\n             {\n                 if ( inside )\n                 {\n@@ -200,6 +201,7 @@ public class TextUtil\n             }\n             inside = !inside;\n         }\n-        return result.toArray( new String[result.size()] );\n+\n+return result.toArray( new String[result.size()] );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}