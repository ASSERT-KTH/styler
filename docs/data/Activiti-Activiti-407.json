{
    "project_name": "Activiti-Activiti",
    "error_id": "407",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.runtime.api.impl;\n\nimport java.text.MessageFormat;\nimport java.util.ArrayList;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/407/ProcessVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/407/ProcessVariablesPayloadValidator.java\nindex 980ec38c17c..ea1c8f35860 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/407/ProcessVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/407/ProcessVariablesPayloadValidator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.text.MessageFormat;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/407/ProcessVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/407/ProcessVariablesPayloadValidator.java\nindex 980ec38c17c..0ebf545c911 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/407/ProcessVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/407/ProcessVariablesPayloadValidator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.text.MessageFormat;\n@@ -36,7 +37,7 @@ import org.activiti.spring.process.model.Extension;\n import org.activiti.spring.process.model.VariableDefinition;\n import org.activiti.spring.process.variable.VariableValidationService;\n \n-public class ProcessVariablesPayloadValidator  {\n+public class ProcessVariablesPayloadValidator {\n \n     private final VariableValidationService variableValidationService;\n     private final DateFormatterProvider dateFormatterProvider;\n@@ -58,8 +59,8 @@ public class ProcessVariablesPayloadValidator  {\n \n     private Optional<Map<String, VariableDefinition>> getVariableDefinitionMap(String processDefinitionId) {\n         Extension processExtensionModel = processDefinitionId != null ?\n-                                                      processExtensionService.getExtensionsForId(processDefinitionId) :\n-                                                      null;\n+                processExtensionService.getExtensionsForId(processDefinitionId) :\n+                null;\n \n         return Optional.ofNullable(processExtensionModel)\n                 .map(Extension::getProperties);\n@@ -79,11 +80,11 @@ public class ProcessVariablesPayloadValidator  {\n                 if (variableDefinitionEntry.getValue().getName().equals(name)) {\n                     String type = variableDefinitionEntry.getValue().getType();\n \n-                    if (type.contains(\"date\") &&  value != null) {\n+                    if (type.contains(\"date\") && value != null) {\n                         try {\n                             payloadVar.setValue(dateFormatterProvider.toDate(value));\n                         } catch (Exception e) {\n-                          //Do nothing here, keep value as a string\n+                            //Do nothing here, keep value as a string\n                         }\n                     }\n \n@@ -106,7 +107,7 @@ public class ProcessVariablesPayloadValidator  {\n     private void checkPayloadVariables(Map<String, Object> variablePayloadMap,\n                                        String processDefinitionId) {\n \n-        if (variablePayloadMap == null ) {\n+        if (variablePayloadMap == null) {\n             return;\n         }\n \n@@ -120,43 +121,43 @@ public class ProcessVariablesPayloadValidator  {\n \n         for (Map.Entry<String, Object> payloadVar : variablePayloadMap.entrySet()) {\n \n-                String name = payloadVar.getKey();\n-                // Check variable name\n-                if (!variableNameValidator.validate(name)) {\n-                    activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableName, (name != null ? name : \"null\" ))));\n-                } else if (expressionResolver.containsExpression(payloadVar.getValue())) {\n-                    activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableExpressionValue, (name != null ? name : \"null\" ))));\n-                } else {\n-\n-                    boolean found = validateVariablesAgainstDefinitions(variableDefinitionMap,\n-                                                                        payloadVar,\n-                                                                        mismatchedVars);\n-\n-                    if (!found) {\n-                        //Try to parse a new string variable as date\n-                        Object value = payloadVar.getValue();\n-                        if (value != null && (value instanceof String)) {\n-                            try {\n-                                payloadVar.setValue(dateFormatterProvider.toDate(value));\n-                            } catch (Exception e) {\n-                                //Do nothing here, keep value as a string\n-                            }\n+            String name = payloadVar.getKey();\n+            // Check variable name\n+            if (!variableNameValidator.validate(name)) {\n+                activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableName, (name != null ? name : \"null\"))));\n+            } else if (expressionResolver.containsExpression(payloadVar.getValue())) {\n+                activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableExpressionValue, (name != null ? name : \"null\"))));\n+            } else {\n+\n+                boolean found = validateVariablesAgainstDefinitions(variableDefinitionMap,\n+                        payloadVar,\n+                        mismatchedVars);\n+\n+                if (!found) {\n+                    //Try to parse a new string variable as date\n+                    Object value = payloadVar.getValue();\n+                    if (value != null && (value instanceof String)) {\n+                        try {\n+                            payloadVar.setValue(dateFormatterProvider.toDate(value));\n+                        } catch (Exception e) {\n+                            //Do nothing here, keep value as a string\n                         }\n                     }\n+                }\n \n             }\n         }\n \n         if (!mismatchedVars.isEmpty()) {\n             activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableType,\n-                                                                              String.join(\", \",\n-                                                                                          mismatchedVars))));\n+                    String.join(\", \",\n+                            mismatchedVars))));\n         }\n \n         if (!activitiExceptions.isEmpty()) {\n             throw new IllegalStateException(activitiExceptions.stream()\n-                                            .map(ex -> ex.getMessage())\n-                                            .collect(Collectors.joining(\",\")));\n+                    .map(ex -> ex.getMessage())\n+                    .collect(Collectors.joining(\",\")));\n         }\n     }\n \n@@ -164,34 +165,34 @@ public class ProcessVariablesPayloadValidator  {\n                                       String processDefinitionId) {\n \n         checkPayloadVariables(setProcessVariablesPayload.getVariables(),\n-                              processDefinitionId);\n+                processDefinitionId);\n     }\n \n     public void checkStartProcessPayloadVariables(StartProcessPayload startProcessPayload,\n                                                   String processDefinitionId) {\n \n         checkPayloadVariables(startProcessPayload.getVariables(),\n-                             processDefinitionId);\n+                processDefinitionId);\n     }\n \n     public void checkStartMessagePayloadVariables(StartMessagePayload startMessagePayload,\n                                                   String processDefinitionId) {\n \n-       checkPayloadVariables(startMessagePayload.getVariables(),\n-                             processDefinitionId);\n+        checkPayloadVariables(startMessagePayload.getVariables(),\n+                processDefinitionId);\n     }\n \n     public void checkReceiveMessagePayloadVariables(ReceiveMessagePayload receiveMessagePayload,\n                                                     String processDefinitionId) {\n \n-       checkPayloadVariables(receiveMessagePayload.getVariables(),\n-                             processDefinitionId);\n+        checkPayloadVariables(receiveMessagePayload.getVariables(),\n+                processDefinitionId);\n     }\n \n     public void checkSignalPayloadVariables(SignalPayload signalPayload,\n                                             String processDefinitionId) {\n \n-       checkPayloadVariables(signalPayload.getVariables(),\n-                             processDefinitionId);\n+        checkPayloadVariables(signalPayload.getVariables(),\n+                processDefinitionId);\n     }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 20, expected is 10, indentation should be the same level as line 85.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 16, expected is 8, indentation should be the same level as line 110.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 24, expected is 12, indentation should be the same level as line 122.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/407/ProcessVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/407/ProcessVariablesPayloadValidator.java\nindex 980ec38c17c..ebfd74118e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/407/ProcessVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/407/ProcessVariablesPayloadValidator.java\n@@ -23,7 +23,6 @@ import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n-\n import org.activiti.api.process.model.payloads.ReceiveMessagePayload;\n import org.activiti.api.process.model.payloads.SetProcessVariablesPayload;\n import org.activiti.api.process.model.payloads.SignalPayload;\n@@ -36,162 +35,133 @@ import org.activiti.spring.process.model.Extension;\n import org.activiti.spring.process.model.VariableDefinition;\n import org.activiti.spring.process.variable.VariableValidationService;\n \n-public class ProcessVariablesPayloadValidator  {\n-\n-    private final VariableValidationService variableValidationService;\n-    private final DateFormatterProvider dateFormatterProvider;\n-    private final ProcessExtensionService processExtensionService;\n-    private final VariableNameValidator variableNameValidator;\n-    private final ExpressionResolver expressionResolver;\n-\n-    public ProcessVariablesPayloadValidator(DateFormatterProvider dateFormatterProvider,\n-                                            ProcessExtensionService processExtensionService,\n-                                            VariableValidationService variableValidationService,\n-                                            VariableNameValidator variableNameValidator,\n-                                            ExpressionResolver expressionResolver) {\n-        this.dateFormatterProvider = dateFormatterProvider;\n-        this.processExtensionService = processExtensionService;\n-        this.variableValidationService = variableValidationService;\n-        this.variableNameValidator = variableNameValidator;\n-        this.expressionResolver = expressionResolver;\n-    }\n \n-    private Optional<Map<String, VariableDefinition>> getVariableDefinitionMap(String processDefinitionId) {\n-        Extension processExtensionModel = processDefinitionId != null ?\n-                                                      processExtensionService.getExtensionsForId(processDefinitionId) :\n-                                                      null;\n+public class ProcessVariablesPayloadValidator {\n \n-        return Optional.ofNullable(processExtensionModel)\n-                .map(Extension::getProperties);\n-    }\n+  private final VariableValidationService variableValidationService;\n \n-    private boolean validateVariablesAgainstDefinitions(Optional<Map<String, VariableDefinition>> variableDefinitionMap,\n-                                                        Map.Entry<String, Object> payloadVar,\n-                                                        Set<String> mismatchedVars) {\n+  private final DateFormatterProvider dateFormatterProvider;\n \n-        if (variableDefinitionMap.isPresent()) {\n-\n-            String name = payloadVar.getKey();\n-            Object value = payloadVar.getValue();\n+  private final ProcessExtensionService processExtensionService;\n \n-            for (Map.Entry<String, VariableDefinition> variableDefinitionEntry : variableDefinitionMap.get().entrySet()) {\n+  private final VariableNameValidator variableNameValidator;\n \n-                if (variableDefinitionEntry.getValue().getName().equals(name)) {\n-                    String type = variableDefinitionEntry.getValue().getType();\n+  private final ExpressionResolver expressionResolver;\n \n-                    if (type.contains(\"date\") &&  value != null) {\n-                        try {\n-                            payloadVar.setValue(dateFormatterProvider.toDate(value));\n-                        } catch (Exception e) {\n-                          //Do nothing here, keep value as a string\n-                        }\n-                    }\n+  public ProcessVariablesPayloadValidator(DateFormatterProvider dateFormatterProvider,\n+                                          ProcessExtensionService processExtensionService,\n+                                          VariableValidationService variableValidationService,\n+                                          VariableNameValidator variableNameValidator, ExpressionResolver expressionResolver) {\n+    this.dateFormatterProvider = dateFormatterProvider;\n+    this.processExtensionService = processExtensionService;\n+    this.variableValidationService = variableValidationService;\n+    this.variableNameValidator = variableNameValidator;\n+    this.expressionResolver = expressionResolver;\n+  }\n \n-                    //Check type\n-                    if (!variableValidationService\n-                            .validateWithErrors(payloadVar.getValue(), variableDefinitionEntry.getValue())\n-                            .isEmpty()) {\n+  private Optional<Map<String, VariableDefinition>> getVariableDefinitionMap(String processDefinitionId) {\n+    Extension processExtensionModel = processDefinitionId != null ? processExtensionService.getExtensionsForId(processDefinitionId) : null;\n+    return Optional.ofNullable(processExtensionModel).map(Extension::getProperties);\n+  }\n \n-                        mismatchedVars.add(name);\n-                    }\n+  private boolean validateVariablesAgainstDefinitions(Optional<Map<String, VariableDefinition>> variableDefinitionMap,\n+                                                      Map.Entry<String, Object> payloadVar, Set<String> mismatchedVars) {\n+    if (variableDefinitionMap.isPresent()) {\n+      String name = payloadVar.getKey();\n+      Object value = payloadVar.getValue();\n+      for (Map.Entry<String, VariableDefinition> variableDefinitionEntry : variableDefinitionMap.get().entrySet()) {\n+        if (variableDefinitionEntry.getValue().getName().equals(name)) {\n+          String type = variableDefinitionEntry.getValue().getType();\n+          if (type.contains(\"date\") && value != null) {\n+            try {\n+              payloadVar.setValue(dateFormatterProvider.toDate(value));\n+            } catch (Exception e) {\n+                          //Do nothing here, keep value as a string\n \n-                    return true;\n-                }\n             }\n-        }\n+          }\n \n-        return false;\n-    }\n-\n-    private void checkPayloadVariables(Map<String, Object> variablePayloadMap,\n-                                       String processDefinitionId) {\n-\n-        if (variablePayloadMap == null ) {\n-            return;\n+                    //Check type\n+          if (!variableValidationService.validateWithErrors(payloadVar.getValue(),\n+                                                            variableDefinitionEntry.getValue()).isEmpty()) {\n+            mismatchedVars.add(name);\n+          }\n+          return true;\n         }\n+      }\n+    }\n+    return false;\n+  }\n \n-        final String errorVariableName = \"Variable has not a valid name: {0}\";\n-        final String errorVariableType = \"Variables fail type validation: {0}\";\n-        final String errorVariableExpressionValue = \"Expressions in variable values are only allowed as default value when modeling the process: {0}\";\n-\n-        final Optional<Map<String, VariableDefinition>> variableDefinitionMap = getVariableDefinitionMap(processDefinitionId);\n-        List<ActivitiException> activitiExceptions = new ArrayList<>();\n-        Set<String> mismatchedVars = new HashSet<>();\n-\n-        for (Map.Entry<String, Object> payloadVar : variablePayloadMap.entrySet()) {\n+  private void checkPayloadVariables(Map<String, Object> variablePayloadMap, String processDefinitionId) {\n+    if (variablePayloadMap == null) {\n+      return;\n+    }\n \n-                String name = payloadVar.getKey();\n+    final String errorVariableName = \"Variable has not a valid name: {0}\";\n+    final String errorVariableType = \"Variables fail type validation: {0}\";\n+    final String errorVariableExpressionValue = \"Expressions in variable values are only allowed as default value when modeling the process: {0}\";\n+    final Optional<Map<String, VariableDefinition>> variableDefinitionMap = getVariableDefinitionMap(processDefinitionId);\n+    List<ActivitiException> activitiExceptions = new ArrayList<>();\n+    Set<String> mismatchedVars = new HashSet<>();\n+    for (Map.Entry<String, Object> payloadVar : variablePayloadMap.entrySet()) {\n+        String name = payloadVar.getKey();\n                 // Check variable name\n-                if (!variableNameValidator.validate(name)) {\n-                    activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableName, (name != null ? name : \"null\" ))));\n-                } else if (expressionResolver.containsExpression(payloadVar.getValue())) {\n-                    activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableExpressionValue, (name != null ? name : \"null\" ))));\n-                } else {\n-\n-                    boolean found = validateVariablesAgainstDefinitions(variableDefinitionMap,\n-                                                                        payloadVar,\n-                                                                        mismatchedVars);\n-\n-                    if (!found) {\n+        if (!variableNameValidator.validate(name)) {\n+          activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableName,\n+                                                                            (name != null ? name : \"null\"))));\n+        } else if (expressionResolver.containsExpression(payloadVar.getValue())) {\n+          activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableExpressionValue,\n+                                                                            (name != null ? name : \"null\"))));\n+        } else {\n+          boolean found = validateVariablesAgainstDefinitions(variableDefinitionMap,\n+                                                              payloadVar,\n+                                                              mismatchedVars);\n+          if (!found) {\n                         //Try to parse a new string variable as date\n-                        Object value = payloadVar.getValue();\n-                        if (value != null && (value instanceof String)) {\n-                            try {\n-                                payloadVar.setValue(dateFormatterProvider.toDate(value));\n-                            } catch (Exception e) {\n+            Object value = payloadVar.getValue();\n+            if (value != null && (value instanceof String)) {\n+              try {\n+                payloadVar.setValue(dateFormatterProvider.toDate(value));\n+              } catch (Exception e) {\n                                 //Do nothing here, keep value as a string\n-                            }\n-                        }\n-                    }\n \n+              }\n             }\n+          }\n         }\n-\n-        if (!mismatchedVars.isEmpty()) {\n-            activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableType,\n-                                                                              String.join(\", \",\n-                                                                                          mismatchedVars))));\n-        }\n-\n-        if (!activitiExceptions.isEmpty()) {\n-            throw new IllegalStateException(activitiExceptions.stream()\n-                                            .map(ex -> ex.getMessage())\n-                                            .collect(Collectors.joining(\",\")));\n-        }\n-    }\n-\n-    public void checkPayloadVariables(SetProcessVariablesPayload setProcessVariablesPayload,\n-                                      String processDefinitionId) {\n-\n-        checkPayloadVariables(setProcessVariablesPayload.getVariables(),\n-                              processDefinitionId);\n-    }\n-\n-    public void checkStartProcessPayloadVariables(StartProcessPayload startProcessPayload,\n-                                                  String processDefinitionId) {\n-\n-        checkPayloadVariables(startProcessPayload.getVariables(),\n-                             processDefinitionId);\n     }\n-\n-    public void checkStartMessagePayloadVariables(StartMessagePayload startMessagePayload,\n-                                                  String processDefinitionId) {\n-\n-       checkPayloadVariables(startMessagePayload.getVariables(),\n-                             processDefinitionId);\n+    if (!mismatchedVars.isEmpty()) {\n+      activitiExceptions.add(new ActivitiException(MessageFormat.format(errorVariableType,\n+                                                                        String.join(\", \", mismatchedVars))));\n     }\n-\n-    public void checkReceiveMessagePayloadVariables(ReceiveMessagePayload receiveMessagePayload,\n-                                                    String processDefinitionId) {\n-\n-       checkPayloadVariables(receiveMessagePayload.getVariables(),\n-                             processDefinitionId);\n-    }\n-\n-    public void checkSignalPayloadVariables(SignalPayload signalPayload,\n-                                            String processDefinitionId) {\n-\n-       checkPayloadVariables(signalPayload.getVariables(),\n-                             processDefinitionId);\n+    if (!activitiExceptions.isEmpty()) {\n+      throw new IllegalStateException(activitiExceptions.stream().map(ex -> ex.getMessage()).collect(Collectors.joining(\",\")));\n     }\n-}\n+  }\n+\n+  public void checkPayloadVariables(SetProcessVariablesPayload setProcessVariablesPayload, String processDefinitionId) {\n+    checkPayloadVariables(setProcessVariablesPayload.getVariables(),\n+                          processDefinitionId);\n+  }\n+\n+  public void checkStartProcessPayloadVariables(StartProcessPayload startProcessPayload, String processDefinitionId) {\n+    checkPayloadVariables(startProcessPayload.getVariables(),\n+                          processDefinitionId);\n+  }\n+\n+  public void checkStartMessagePayloadVariables(StartMessagePayload startMessagePayload, String processDefinitionId) {\n+    checkPayloadVariables(startMessagePayload.getVariables(),\n+                          processDefinitionId);\n+  }\n+\n+  public void checkReceiveMessagePayloadVariables(ReceiveMessagePayload receiveMessagePayload, String processDefinitionId) {\n+    checkPayloadVariables(receiveMessagePayload.getVariables(),\n+                          processDefinitionId);\n+  }\n+\n+  public void checkSignalPayloadVariables(SignalPayload signalPayload, String processDefinitionId) {\n+    checkPayloadVariables(signalPayload.getVariables(),\n+                          processDefinitionId);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 189
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/407/ProcessVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/407/ProcessVariablesPayloadValidator.java\nindex 980ec38c17c..ea1c8f35860 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/407/ProcessVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/407/ProcessVariablesPayloadValidator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.text.MessageFormat;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/407/ProcessVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/407/ProcessVariablesPayloadValidator.java\nindex 980ec38c17c..ea1c8f35860 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/407/ProcessVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/407/ProcessVariablesPayloadValidator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.text.MessageFormat;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}