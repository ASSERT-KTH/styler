{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2099",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "76",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "378",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "394",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "432",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "468",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2099/TreeNodeFixedSize.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2099/TreeNodeFixedSize.java\nindex d19b5f2ef59..34d05477cf4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2099/TreeNodeFixedSize.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2099/TreeNodeFixedSize.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -52,498 +53,494 @@ import static org.neo4j.index.internal.gbptree.TreeNode.Type.LEAF;\n  * [NODETYPE][TYPE][GENERATION][KEYCOUNT][RIGHTSIBLING][LEFTSIBLING][SUCCESSOR]|[[KEY]...##]|[[VALUE]...##]\n  *  0         1     2           6         10            34           58          82\n  * </pre>\n- *\n+ * <p>\n  * Calc offset for key i (starting from 0)\n  * HEADER_LENGTH + i * SIZE_KEY\n  * <p>\n  * Calc offset for value i\n  * HEADER_LENGTH + SIZE_KEY * MAX_KEY_COUNT_LEAF + i * SIZE_VALUE\n  *\n- * @param <KEY> type of key\n+ * @param <KEY>   type of key\n  * @param <VALUE> type of value\n  */\n-class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n+class TreeNodeFixedSize<KEY, VALUE> extends TreeNode<KEY, VALUE>\n {\n-    static final byte FORMAT_IDENTIFIER = 2;\n-    static final byte FORMAT_VERSION = 0;\n-\n-    private final int internalMaxKeyCount;\n-    private final int leafMaxKeyCount;\n-    private final int keySize;\n-    private final int valueSize;\n-\n-    TreeNodeFixedSize( int pageSize, Layout<KEY,VALUE> layout )\n-    {\n-        super( pageSize, layout );\n-        this.keySize = layout.keySize( null );\n-        this.valueSize = layout.valueSize( null );\n-        this.internalMaxKeyCount = Math.floorDiv( pageSize - (BASE_HEADER_LENGTH + SIZE_PAGE_REFERENCE),\n-                keySize + SIZE_PAGE_REFERENCE);\n-        this.leafMaxKeyCount = Math.floorDiv( pageSize - BASE_HEADER_LENGTH, keySize + valueSize );\n-\n-        if ( internalMaxKeyCount < 2 )\n-        {\n-            throw new MetadataMismatchException(\n-                    \"For layout %s a page size of %d would only fit %d internal keys, minimum is 2\",\n-                    layout, pageSize, internalMaxKeyCount );\n-        }\n-        if ( leafMaxKeyCount < 2 )\n-        {\n-            throw new MetadataMismatchException( \"A page size of %d would only fit leaf keys, minimum is 2\",\n-                    pageSize, leafMaxKeyCount );\n-        }\n-    }\n-\n-    @Override\n-    void writeAdditionalHeader( PageCursor cursor )\n-    {   // no-op\n-    }\n-\n-    private static int childSize()\n-    {\n-        return SIZE_PAGE_REFERENCE;\n-    }\n-\n-    @Override\n-    KEY keyAt( PageCursor cursor, KEY into, int pos, Type type )\n-    {\n-        cursor.setOffset( keyOffset( pos ) );\n-        layout.readKey( cursor, into, FIXED_SIZE_KEY );\n-        return into;\n-    }\n-\n-    @Override\n-    void keyValueAt( PageCursor cursor, KEY intoKey, VALUE intoValue, int pos )\n-    {\n-        keyAt( cursor, intoKey, pos, LEAF );\n-        valueAt( cursor, intoValue, pos );\n-    }\n-\n-    @Override\n-    void insertKeyAndRightChildAt( PageCursor cursor, KEY key, long child, int pos, int keyCount, long stableGeneration,\n-            long unstableGeneration )\n-    {\n-        insertKeyAt( cursor, key, pos, keyCount );\n-        insertChildAt( cursor, child, pos + 1, keyCount, stableGeneration, unstableGeneration );\n-    }\n-\n-    @Override\n-    void insertKeyValueAt( PageCursor cursor, KEY key, VALUE value, int pos, int keyCount )\n-    {\n-        insertKeyAt( cursor, key, pos, keyCount );\n-        insertValueAt( cursor, value, pos, keyCount );\n-    }\n-\n-    @Override\n-    void removeKeyValueAt( PageCursor cursor, int pos, int keyCount )\n-    {\n-        removeKeyAt( cursor, pos, keyCount );\n-        removeValueAt( cursor, pos, keyCount );\n-    }\n-\n-    @Override\n-    void removeKeyAndLeftChildAt( PageCursor cursor, int keyPos, int keyCount )\n-    {\n-        removeKeyAt( cursor, keyPos, keyCount );\n-        removeChildAt( cursor, keyPos, keyCount );\n-    }\n-\n-    @Override\n-    void removeKeyAndRightChildAt( PageCursor cursor, int keyPos, int keyCount )\n-    {\n-        removeKeyAt( cursor, keyPos, keyCount );\n-        removeChildAt( cursor, keyPos + 1, keyCount );\n-    }\n-\n-    @Override\n-    boolean setKeyAtInternal( PageCursor cursor, KEY key, int pos )\n-    {\n-        cursor.setOffset( keyOffset( pos ) );\n-        layout.writeKey( cursor, key );\n-        return true;\n-    }\n-\n-    @Override\n-    VALUE valueAt( PageCursor cursor, VALUE value, int pos )\n-    {\n-        cursor.setOffset( valueOffset( pos ) );\n-        layout.readValue( cursor, value, FIXED_SIZE_VALUE );\n-        return value;\n-    }\n-\n-    @Override\n-    boolean setValueAt( PageCursor cursor, VALUE value, int pos )\n-    {\n-        cursor.setOffset( valueOffset( pos ) );\n-        layout.writeValue( cursor, value );\n-        return true;\n-    }\n-\n-    @Override\n-    long childAt( PageCursor cursor, int pos, long stableGeneration, long unstableGeneration )\n-    {\n-        cursor.setOffset( childOffset( pos ) );\n-        return read( cursor, stableGeneration, unstableGeneration, pos );\n-    }\n-\n-    @Override\n-    void setChildAt( PageCursor cursor, long child, int pos, long stableGeneration, long unstableGeneration )\n-    {\n-        cursor.setOffset( childOffset( pos ) );\n-        writeChild( cursor, child, stableGeneration, unstableGeneration );\n-    }\n-\n-    @Override\n-    int keyValueSizeCap()\n-    {\n-        return NO_KEY_VALUE_SIZE_CAP;\n-    }\n-\n-    @Override\n-    void validateKeyValueSize( KEY key, VALUE value )\n-    {   // no-op for fixed size\n-    }\n-\n-    @Override\n-    boolean reasonableKeyCount( int keyCount )\n-    {\n-        return keyCount >= 0 && keyCount <= Math.max( internalMaxKeyCount(), leafMaxKeyCount() );\n-    }\n-\n-    @Override\n-    boolean reasonableChildCount( int childCount )\n-    {\n-        return childCount >= 0 && childCount <= internalMaxKeyCount();\n-    }\n-\n-    @Override\n-    int childOffset( int pos )\n-    {\n-        return BASE_HEADER_LENGTH + internalMaxKeyCount * keySize + pos * SIZE_PAGE_REFERENCE;\n-    }\n-\n-    private int internalMaxKeyCount()\n-    {\n-        return internalMaxKeyCount;\n-    }\n-\n-    private void insertKeyAt( PageCursor cursor, KEY key, int pos, int keyCount )\n-    {\n-        insertKeySlotsAt( cursor, pos, 1, keyCount );\n-        cursor.setOffset( keyOffset( pos ) );\n-        layout.writeKey( cursor, key );\n-    }\n-\n-    private int leafMaxKeyCount()\n-    {\n-        return leafMaxKeyCount;\n-    }\n-\n-    private void removeKeyAt( PageCursor cursor, int pos, int keyCount )\n-    {\n-        removeSlotAt( cursor, pos, keyCount, keyOffset( 0 ), keySize );\n-    }\n-\n-    private void insertChildAt( PageCursor cursor, long child, int pos, int keyCount,\n-            long stableGeneration, long unstableGeneration )\n-    {\n-        insertChildSlot( cursor, pos, keyCount );\n-        setChildAt( cursor, child, pos, stableGeneration, unstableGeneration );\n-    }\n-\n-    private void removeChildAt( PageCursor cursor, int pos, int keyCount )\n-    {\n-        removeSlotAt( cursor, pos, keyCount + 1, childOffset( 0 ), childSize() );\n-    }\n-\n-    private void insertKeyValueSlots( PageCursor cursor, int numberOfSlots, int keyCount )\n-    {\n-        insertKeySlotsAt( cursor, 0, numberOfSlots, keyCount );\n-        insertValueSlotsAt( cursor, 0, numberOfSlots, keyCount );\n-    }\n-\n-    // Always insert together with key. Use insertKeyValueAt\n-    private void insertValueAt( PageCursor cursor, VALUE value, int pos, int keyCount )\n-    {\n-        insertValueSlotsAt( cursor, pos, 1, keyCount );\n-        setValueAt( cursor, value, pos );\n-    }\n-\n-    // Always insert together with key. Use removeKeyValueAt\n-    private void removeValueAt( PageCursor cursor, int pos, int keyCount )\n-    {\n-        removeSlotAt( cursor, pos, keyCount, valueOffset( 0 ), valueSize );\n-    }\n-\n-    private void insertKeySlotsAt( PageCursor cursor, int pos, int numberOfSlots, int keyCount )\n-    {\n-        insertSlotsAt( cursor, pos, numberOfSlots, keyCount, keyOffset( 0 ), keySize );\n-    }\n-\n-    private void insertValueSlotsAt( PageCursor cursor, int pos, int numberOfSlots, int keyCount )\n-    {\n-        insertSlotsAt( cursor, pos, numberOfSlots, keyCount, valueOffset( 0 ), valueSize );\n-    }\n-\n-    private void insertChildSlot( PageCursor cursor, int pos, int keyCount )\n-    {\n-        insertSlotsAt( cursor, pos, 1, keyCount + 1, childOffset( 0 ), childSize() );\n-    }\n-\n-    private int keyOffset( int pos )\n-    {\n-        return BASE_HEADER_LENGTH + pos * keySize;\n-    }\n-\n-    private int valueOffset( int pos )\n-    {\n-        return BASE_HEADER_LENGTH + leafMaxKeyCount * keySize + pos * valueSize;\n-    }\n-\n-    private int keySize()\n-    {\n-        return keySize;\n-    }\n-\n-    private int valueSize()\n-    {\n-        return valueSize;\n-    }\n-\n-    /* SPLIT, MERGE and REBALANCE*/\n-\n-    @Override\n-    Overflow internalOverflow( PageCursor cursor, int currentKeyCount, KEY newKey )\n-    {\n-        return currentKeyCount + 1 > internalMaxKeyCount() ? Overflow.YES : Overflow.NO;\n-    }\n-\n-    @Override\n-    Overflow leafOverflow( PageCursor cursor, int currentKeyCount, KEY newKey, VALUE newValue )\n-    {\n-        return currentKeyCount + 1 > leafMaxKeyCount() ? Overflow.YES : Overflow.NO;\n-    }\n-\n-    @Override\n-    void defragmentLeaf( PageCursor cursor )\n-    {   // no-op\n-    }\n-\n-    @Override\n-    void defragmentInternal( PageCursor cursor )\n-    {   // no-op\n-    }\n-\n-    @Override\n-    boolean leafUnderflow( PageCursor cursor, int keyCount )\n-    {\n-        return keyCount < (leafMaxKeyCount() + 1) / 2;\n-    }\n-\n-    @Override\n-    int canRebalanceLeaves( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount )\n-    {\n-        if ( leftKeyCount + rightKeyCount >= leafMaxKeyCount() )\n-        {\n-            int totalKeyCount = rightKeyCount + leftKeyCount;\n-            int moveFromPosition = totalKeyCount / 2;\n-            return leftKeyCount - moveFromPosition;\n-        }\n-        return -1;\n-    }\n-\n-    @Override\n-    boolean canMergeLeaves( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount )\n-    {\n-        return leftKeyCount + rightKeyCount <= leafMaxKeyCount();\n-    }\n-\n-    @Override\n-    void doSplitLeaf( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos, KEY newKey,\n-            VALUE newValue, KEY newSplitter )\n-    {\n-        int keyCountAfterInsert = leftKeyCount + 1;\n-        int middlePos = middle( keyCountAfterInsert );\n-\n-        if ( middlePos == insertPos )\n-        {\n-            layout.copyKey( newKey, newSplitter );\n-        }\n-        else\n-        {\n-            keyAt( leftCursor, newSplitter, insertPos < middlePos ? middlePos - 1 : middlePos, LEAF );\n-        }\n-        int rightKeyCount = keyCountAfterInsert - middlePos;\n-\n-        if ( insertPos < middlePos )\n-        {\n-            //                  v-------v       copy\n-            // before _,_,_,_,_,_,_,_,_,_\n-            // insert _,_,_,X,_,_,_,_,_,_,_\n-            // middle           ^\n-            copyKeysAndValues( leftCursor, middlePos - 1, rightCursor, 0, rightKeyCount );\n-            insertKeyValueAt( leftCursor, newKey, newValue, insertPos, middlePos - 1 );\n-        }\n-        else\n-        {\n-            //                  v---v           first copy\n-            //                        v-v       second copy\n-            // before _,_,_,_,_,_,_,_,_,_\n-            // insert _,_,_,_,_,_,_,_,X,_,_\n-            // middle           ^\n-            int countBeforePos = insertPos - middlePos;\n-            if ( countBeforePos > 0 )\n-            {\n-                // first copy\n-                copyKeysAndValues( leftCursor, middlePos, rightCursor, 0, countBeforePos );\n-            }\n-            insertKeyValueAt( rightCursor, newKey, newValue, countBeforePos, countBeforePos );\n-            int countAfterPos = leftKeyCount - insertPos;\n-            if ( countAfterPos > 0 )\n-            {\n-                // second copy\n-                copyKeysAndValues( leftCursor, insertPos, rightCursor, countBeforePos + 1, countAfterPos );\n-            }\n-        }\n-        TreeNode.setKeyCount( leftCursor, middlePos );\n-        TreeNode.setKeyCount( rightCursor, rightKeyCount );\n-    }\n-\n-    private static int middle( int keyCountAfterInsert )\n-    {\n-        return keyCountAfterInsert / 2;\n-    }\n-\n-    @Override\n-    void doSplitInternal( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos, KEY newKey,\n-            long newRightChild, long stableGeneration, long unstableGeneration, KEY newSplitter )\n-    {\n-        int keyCountAfterInsert = leftKeyCount + 1;\n-        int middlePos = middle( keyCountAfterInsert );\n-\n-        if ( middlePos == insertPos )\n-        {\n-            layout.copyKey( newKey, newSplitter );\n-        }\n-        else\n-        {\n-            keyAt( leftCursor, newSplitter, insertPos < middlePos ? middlePos - 1 : middlePos, INTERNAL );\n-        }\n-        int rightKeyCount = keyCountAfterInsert - middlePos - 1; // -1 because don't keep prim key in internal\n-\n-        if ( insertPos < middlePos )\n-        {\n-            //                         v-------v       copy\n-            // before key    _,_,_,_,_,_,_,_,_,_\n-            // before child -,-,-,-,-,-,-,-,-,-,-\n-            // insert key    _,_,X,_,_,_,_,_,_,_,_\n-            // insert child -,-,-,x,-,-,-,-,-,-,-,-\n-            // middle key              ^\n-\n-            leftCursor.copyTo( keyOffset( middlePos ), rightCursor, keyOffset( 0 ), rightKeyCount * keySize() );\n-            leftCursor.copyTo( childOffset( middlePos ), rightCursor, childOffset( 0 ), (rightKeyCount + 1) * childSize() );\n-            insertKeyAt( leftCursor, newKey, insertPos, middlePos - 1 );\n-            insertChildAt( leftCursor, newRightChild, insertPos + 1, middlePos - 1, stableGeneration, unstableGeneration );\n-        }\n-        else\n-        {\n-            // pos > middlePos\n-            //                         v-v          first copy\n-            //                             v-v-v    second copy\n-            // before key    _,_,_,_,_,_,_,_,_,_\n-            // before child -,-,-,-,-,-,-,-,-,-,-\n-            // insert key    _,_,_,_,_,_,_,X,_,_,_\n-            // insert child -,-,-,-,-,-,-,-,x,-,-,-\n-            // middle key              ^\n-\n-            // pos == middlePos\n-            //                                      first copy\n-            //                         v-v-v-v-v    second copy\n-            // before key    _,_,_,_,_,_,_,_,_,_\n-            // before child -,-,-,-,-,-,-,-,-,-,-\n-            // insert key    _,_,_,_,_,X,_,_,_,_,_\n-            // insert child -,-,-,-,-,-,x,-,-,-,-,-\n-            // middle key              ^\n-\n-            // Keys\n-            int countBeforePos = insertPos - (middlePos + 1);\n-            // ... first copy\n-            if ( countBeforePos > 0 )\n-            {\n-                leftCursor.copyTo( keyOffset( middlePos + 1 ), rightCursor, keyOffset( 0 ), countBeforePos * keySize() );\n-            }\n-            // ... insert\n-            if ( countBeforePos >= 0 )\n-            {\n-                insertKeyAt( rightCursor, newKey, countBeforePos, countBeforePos );\n-            }\n-            // ... second copy\n-            int countAfterPos = leftKeyCount - insertPos;\n-            if ( countAfterPos > 0 )\n-            {\n-                leftCursor.copyTo( keyOffset( insertPos ), rightCursor, keyOffset( countBeforePos + 1 ), countAfterPos * keySize() );\n-            }\n-\n-            // Children\n-            countBeforePos = insertPos - middlePos;\n-            // ... first copy\n-            if ( countBeforePos > 0 )\n-            {\n-                // first copy\n-                leftCursor.copyTo( childOffset( middlePos + 1 ), rightCursor, childOffset( 0 ), countBeforePos * childSize() );\n-            }\n-            // ... insert\n-            insertChildAt( rightCursor, newRightChild, countBeforePos, countBeforePos, stableGeneration, unstableGeneration );\n-            // ... second copy\n-            if ( countAfterPos > 0 )\n-            {\n-                leftCursor.copyTo( childOffset( insertPos + 1 ), rightCursor, childOffset( countBeforePos + 1 ),\n-                        countAfterPos * childSize() );\n-            }\n-        }\n-        TreeNode.setKeyCount( leftCursor, middlePos );\n-        TreeNode.setKeyCount( rightCursor, rightKeyCount );\n-    }\n-\n-    @Override\n-    void moveKeyValuesFromLeftToRight( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount,\n-            int fromPosInLeftNode )\n-    {\n-        int numberOfKeysToMove = leftKeyCount - fromPosInLeftNode;\n-\n-        // Push keys and values in right sibling to the right\n-        insertKeyValueSlots( rightCursor, numberOfKeysToMove, rightKeyCount );\n-\n-        // Move keys and values from left sibling to right sibling\n-        copyKeysAndValues( leftCursor, fromPosInLeftNode, rightCursor, 0, numberOfKeysToMove );\n-\n-        setKeyCount( leftCursor, leftKeyCount - numberOfKeysToMove );\n-        setKeyCount( rightCursor, rightKeyCount + numberOfKeysToMove );\n-    }\n-\n-    @Override\n-    void copyKeyValuesFromLeftToRight( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount )\n-    {\n-        // Push keys and values in right sibling to the right\n-        insertKeyValueSlots( rightCursor, leftKeyCount, rightKeyCount );\n-\n-        // Move keys and values from left sibling to right sibling\n-        copyKeysAndValues( leftCursor, 0, rightCursor, 0, leftKeyCount );\n-\n-        // KeyCount\n-        setKeyCount( rightCursor, rightKeyCount + leftKeyCount );\n-    }\n-\n-    private void copyKeysAndValues( PageCursor fromCursor, int fromPos, PageCursor toCursor, int toPos, int count )\n-    {\n-        fromCursor.copyTo( keyOffset( fromPos ), toCursor, keyOffset( toPos ), count * keySize() );\n-        fromCursor.copyTo( valueOffset( fromPos ), toCursor, valueOffset( toPos ),count * valueSize() );\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"TreeNodeFixedSize[pageSize:\" + pageSize + \", internalMax:\" + internalMaxKeyCount() + \", leafMax:\" + leafMaxKeyCount() + \", \" +\n-                \"keySize:\" + keySize() + \", valueSize:\" + valueSize + \"]\";\n-    }\n+  static final byte FORMAT_IDENTIFIER = 2;\n+  static final byte FORMAT_VERSION = 0;\n+\n+  private final int internalMaxKeyCount;\n+  private final int leafMaxKeyCount;\n+  private final int keySize;\n+  private final int valueSize;\n+\n+  TreeNodeFixedSize(int pageSize, Layout<KEY, VALUE> layout)\n+  {\n+    super(pageSize, layout);\n+    this.keySize = layout.keySize(null);\n+    this.valueSize = layout.valueSize(null);\n+    this.internalMaxKeyCount = Math.floorDiv(pageSize - (BASE_HEADER_LENGTH + SIZE_PAGE_REFERENCE),\n+        keySize + SIZE_PAGE_REFERENCE);\n+    this.leafMaxKeyCount = Math.floorDiv(pageSize - BASE_HEADER_LENGTH, keySize + valueSize);\n+\n+    if (internalMaxKeyCount < 2)\n+    {\n+      throw new MetadataMismatchException(\n+          \"For layout %s a page size of %d would only fit %d internal keys, minimum is 2\",\n+          layout, pageSize, internalMaxKeyCount);\n+    }\n+    if (leafMaxKeyCount < 2)\n+    {\n+      throw new MetadataMismatchException(\"A page size of %d would only fit leaf keys, minimum is 2\",\n+          pageSize, leafMaxKeyCount);\n+    }\n+  }\n+\n+  @Override\n+  void writeAdditionalHeader(PageCursor cursor)\n+  {   // no-op\n+  }\n+\n+  private static int childSize()\n+  {\n+    return SIZE_PAGE_REFERENCE;\n+  }\n+\n+  @Override\n+  KEY keyAt(PageCursor cursor, KEY into, int pos, Type type)\n+  {\n+    cursor.setOffset(keyOffset(pos));\n+    layout.readKey(cursor, into, FIXED_SIZE_KEY);\n+    return into;\n+  }\n+\n+  @Override\n+  void keyValueAt(PageCursor cursor, KEY intoKey, VALUE intoValue, int pos)\n+  {\n+    keyAt(cursor, intoKey, pos, LEAF);\n+    valueAt(cursor, intoValue, pos);\n+  }\n+\n+  @Override\n+  void insertKeyAndRightChildAt(PageCursor cursor, KEY key, long child, int pos, int keyCount, long stableGeneration,\n+                                long unstableGeneration)\n+  {\n+    insertKeyAt(cursor, key, pos, keyCount);\n+    insertChildAt(cursor, child, pos + 1, keyCount, stableGeneration, unstableGeneration);\n+  }\n+\n+  @Override\n+  void insertKeyValueAt(PageCursor cursor, KEY key, VALUE value, int pos, int keyCount)\n+  {\n+    insertKeyAt(cursor, key, pos, keyCount);\n+    insertValueAt(cursor, value, pos, keyCount);\n+  }\n+\n+  @Override\n+  void removeKeyValueAt(PageCursor cursor, int pos, int keyCount)\n+  {\n+    removeKeyAt(cursor, pos, keyCount);\n+    removeValueAt(cursor, pos, keyCount);\n+  }\n+\n+  @Override\n+  void removeKeyAndLeftChildAt(PageCursor cursor, int keyPos, int keyCount)\n+  {\n+    removeKeyAt(cursor, keyPos, keyCount);\n+    removeChildAt(cursor, keyPos, keyCount);\n+  }\n+\n+  @Override\n+  void removeKeyAndRightChildAt(PageCursor cursor, int keyPos, int keyCount)\n+  {\n+    removeKeyAt(cursor, keyPos, keyCount);\n+    removeChildAt(cursor, keyPos + 1, keyCount);\n+  }\n+\n+  @Override\n+  boolean setKeyAtInternal(PageCursor cursor, KEY key, int pos)\n+  {\n+    cursor.setOffset(keyOffset(pos));\n+    layout.writeKey(cursor, key);\n+    return true;\n+  }\n+\n+  @Override\n+  VALUE valueAt(PageCursor cursor, VALUE value, int pos)\n+  {\n+    cursor.setOffset(valueOffset(pos));\n+    layout.readValue(cursor, value, FIXED_SIZE_VALUE);\n+    return value;\n+  }\n+\n+  @Override\n+  boolean setValueAt(PageCursor cursor, VALUE value, int pos)\n+  {\n+    cursor.setOffset(valueOffset(pos));\n+    layout.writeValue(cursor, value);\n+    return true;\n+  }\n+\n+  @Override\n+  long childAt(PageCursor cursor, int pos, long stableGeneration, long unstableGeneration)\n+  {\n+    cursor.setOffset(childOffset(pos));\n+    return read(cursor, stableGeneration, unstableGeneration, pos);\n+  }\n+\n+  @Override\n+  void setChildAt(PageCursor cursor, long child, int pos, long stableGeneration, long unstableGeneration)\n+  {\n+    cursor.setOffset(childOffset(pos));\n+    writeChild(cursor, child, stableGeneration, unstableGeneration);\n+  }\n+\n+  @Override\n+  int keyValueSizeCap()\n+  {\n+    return NO_KEY_VALUE_SIZE_CAP;\n+  }\n+\n+  @Override\n+  void validateKeyValueSize(KEY key, VALUE value)\n+  {   // no-op for fixed size\n+  }\n+\n+  @Override\n+  boolean reasonableKeyCount(int keyCount)\n+  {\n+    return keyCount >= 0 && keyCount <= Math.max(internalMaxKeyCount(), leafMaxKeyCount());\n+  }\n+\n+  @Override\n+  boolean reasonableChildCount(int childCount)\n+  {\n+    return childCount >= 0 && childCount <= internalMaxKeyCount();\n+  }\n+\n+  @Override\n+  int childOffset(int pos)\n+  {\n+    return BASE_HEADER_LENGTH + internalMaxKeyCount * keySize + pos * SIZE_PAGE_REFERENCE;\n+  }\n+\n+  private int internalMaxKeyCount()\n+  {\n+    return internalMaxKeyCount;\n+  }\n+\n+  private void insertKeyAt(PageCursor cursor, KEY key, int pos, int keyCount)\n+  {\n+    insertKeySlotsAt(cursor, pos, 1, keyCount);\n+    cursor.setOffset(keyOffset(pos));\n+    layout.writeKey(cursor, key);\n+  }\n+\n+  private int leafMaxKeyCount()\n+  {\n+    return leafMaxKeyCount;\n+  }\n+\n+  private void removeKeyAt(PageCursor cursor, int pos, int keyCount)\n+  {\n+    removeSlotAt(cursor, pos, keyCount, keyOffset(0), keySize);\n+  }\n+\n+  private void insertChildAt(PageCursor cursor, long child, int pos, int keyCount,\n+                             long stableGeneration, long unstableGeneration)\n+  {\n+    insertChildSlot(cursor, pos, keyCount);\n+    setChildAt(cursor, child, pos, stableGeneration, unstableGeneration);\n+  }\n+\n+  private void removeChildAt(PageCursor cursor, int pos, int keyCount)\n+  {\n+    removeSlotAt(cursor, pos, keyCount + 1, childOffset(0), childSize());\n+  }\n+\n+  private void insertKeyValueSlots(PageCursor cursor, int numberOfSlots, int keyCount)\n+  {\n+    insertKeySlotsAt(cursor, 0, numberOfSlots, keyCount);\n+    insertValueSlotsAt(cursor, 0, numberOfSlots, keyCount);\n+  }\n+\n+  // Always insert together with key. Use insertKeyValueAt\n+  private void insertValueAt(PageCursor cursor, VALUE value, int pos, int keyCount)\n+  {\n+    insertValueSlotsAt(cursor, pos, 1, keyCount);\n+    setValueAt(cursor, value, pos);\n+  }\n+\n+  // Always insert together with key. Use removeKeyValueAt\n+  private void removeValueAt(PageCursor cursor, int pos, int keyCount)\n+  {\n+    removeSlotAt(cursor, pos, keyCount, valueOffset(0), valueSize);\n+  }\n+\n+  private void insertKeySlotsAt(PageCursor cursor, int pos, int numberOfSlots, int keyCount)\n+  {\n+    insertSlotsAt(cursor, pos, numberOfSlots, keyCount, keyOffset(0), keySize);\n+  }\n+\n+  private void insertValueSlotsAt(PageCursor cursor, int pos, int numberOfSlots, int keyCount)\n+  {\n+    insertSlotsAt(cursor, pos, numberOfSlots, keyCount, valueOffset(0), valueSize);\n+  }\n+\n+  private void insertChildSlot(PageCursor cursor, int pos, int keyCount)\n+  {\n+    insertSlotsAt(cursor, pos, 1, keyCount + 1, childOffset(0), childSize());\n+  }\n+\n+  private int keyOffset(int pos)\n+  {\n+    return BASE_HEADER_LENGTH + pos * keySize;\n+  }\n+\n+  private int valueOffset(int pos)\n+  {\n+    return BASE_HEADER_LENGTH + leafMaxKeyCount * keySize + pos * valueSize;\n+  }\n+\n+  private int keySize()\n+  {\n+    return keySize;\n+  }\n+\n+  private int valueSize()\n+  {\n+    return valueSize;\n+  }\n+\n+  /* SPLIT, MERGE and REBALANCE*/\n+\n+  @Override\n+  Overflow internalOverflow(PageCursor cursor, int currentKeyCount, KEY newKey)\n+  {\n+    return currentKeyCount + 1 > internalMaxKeyCount() ? Overflow.YES : Overflow.NO;\n+  }\n+\n+  @Override\n+  Overflow leafOverflow(PageCursor cursor, int currentKeyCount, KEY newKey, VALUE newValue)\n+  {\n+    return currentKeyCount + 1 > leafMaxKeyCount() ? Overflow.YES : Overflow.NO;\n+  }\n+\n+  @Override\n+  void defragmentLeaf(PageCursor cursor)\n+  {   // no-op\n+  }\n+\n+  @Override\n+  void defragmentInternal(PageCursor cursor)\n+  {   // no-op\n+  }\n+\n+  @Override\n+  boolean leafUnderflow(PageCursor cursor, int keyCount)\n+  {\n+    return keyCount < (leafMaxKeyCount() + 1) / 2;\n+  }\n+\n+  @Override\n+  int canRebalanceLeaves(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount)\n+  {\n+    if (leftKeyCount + rightKeyCount >= leafMaxKeyCount())\n+    {\n+      int totalKeyCount = rightKeyCount + leftKeyCount;\n+      int moveFromPosition = totalKeyCount / 2;\n+      return leftKeyCount - moveFromPosition;\n+    }\n+    return -1;\n+  }\n+\n+  @Override\n+  boolean canMergeLeaves(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount)\n+  {\n+    return leftKeyCount + rightKeyCount <= leafMaxKeyCount();\n+  }\n+\n+  @Override\n+  void doSplitLeaf(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos, KEY newKey,\n+                   VALUE newValue, KEY newSplitter)\n+  {\n+    int keyCountAfterInsert = leftKeyCount + 1;\n+    int middlePos = middle(keyCountAfterInsert);\n+\n+    if (middlePos == insertPos)\n+    {\n+      layout.copyKey(newKey, newSplitter);\n+    } else\n+    {\n+      keyAt(leftCursor, newSplitter, insertPos < middlePos ? middlePos - 1 : middlePos, LEAF);\n+    }\n+    int rightKeyCount = keyCountAfterInsert - middlePos;\n+\n+    if (insertPos < middlePos)\n+    {\n+      //                  v-------v       copy\n+      // before _,_,_,_,_,_,_,_,_,_\n+      // insert _,_,_,X,_,_,_,_,_,_,_\n+      // middle           ^\n+      copyKeysAndValues(leftCursor, middlePos - 1, rightCursor, 0, rightKeyCount);\n+      insertKeyValueAt(leftCursor, newKey, newValue, insertPos, middlePos - 1);\n+    } else\n+    {\n+      //                  v---v           first copy\n+      //                        v-v       second copy\n+      // before _,_,_,_,_,_,_,_,_,_\n+      // insert _,_,_,_,_,_,_,_,X,_,_\n+      // middle           ^\n+      int countBeforePos = insertPos - middlePos;\n+      if (countBeforePos > 0)\n+      {\n+        // first copy\n+        copyKeysAndValues(leftCursor, middlePos, rightCursor, 0, countBeforePos);\n+      }\n+      insertKeyValueAt(rightCursor, newKey, newValue, countBeforePos, countBeforePos);\n+      int countAfterPos = leftKeyCount - insertPos;\n+      if (countAfterPos > 0)\n+      {\n+        // second copy\n+        copyKeysAndValues(leftCursor, insertPos, rightCursor, countBeforePos + 1, countAfterPos);\n+      }\n+    }\n+    TreeNode.setKeyCount(leftCursor, middlePos);\n+    TreeNode.setKeyCount(rightCursor, rightKeyCount);\n+  }\n+\n+  private static int middle(int keyCountAfterInsert)\n+  {\n+    return keyCountAfterInsert / 2;\n+  }\n+\n+  @Override\n+  void doSplitInternal(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos, KEY newKey,\n+                       long newRightChild, long stableGeneration, long unstableGeneration, KEY newSplitter)\n+  {\n+    int keyCountAfterInsert = leftKeyCount + 1;\n+    int middlePos = middle(keyCountAfterInsert);\n+\n+    if (middlePos == insertPos)\n+    {\n+      layout.copyKey(newKey, newSplitter);\n+    } else\n+    {\n+      keyAt(leftCursor, newSplitter, insertPos < middlePos ? middlePos - 1 : middlePos, INTERNAL);\n+    }\n+    int rightKeyCount = keyCountAfterInsert - middlePos - 1; // -1 because don't keep prim key in internal\n+\n+    if (insertPos < middlePos)\n+    {\n+      //                         v-------v       copy\n+      // before key    _,_,_,_,_,_,_,_,_,_\n+      // before child -,-,-,-,-,-,-,-,-,-,-\n+      // insert key    _,_,X,_,_,_,_,_,_,_,_\n+      // insert child -,-,-,x,-,-,-,-,-,-,-,-\n+      // middle key              ^\n+\n+      leftCursor.copyTo(keyOffset(middlePos), rightCursor, keyOffset(0), rightKeyCount * keySize());\n+      leftCursor.copyTo(childOffset(middlePos), rightCursor, childOffset(0), (rightKeyCount + 1) * childSize());\n+      insertKeyAt(leftCursor, newKey, insertPos, middlePos - 1);\n+      insertChildAt(leftCursor, newRightChild, insertPos + 1, middlePos - 1, stableGeneration, unstableGeneration);\n+    } else\n+    {\n+      // pos > middlePos\n+      //                         v-v          first copy\n+      //                             v-v-v    second copy\n+      // before key    _,_,_,_,_,_,_,_,_,_\n+      // before child -,-,-,-,-,-,-,-,-,-,-\n+      // insert key    _,_,_,_,_,_,_,X,_,_,_\n+      // insert child -,-,-,-,-,-,-,-,x,-,-,-\n+      // middle key              ^\n+\n+      // pos == middlePos\n+      //                                      first copy\n+      //                         v-v-v-v-v    second copy\n+      // before key    _,_,_,_,_,_,_,_,_,_\n+      // before child -,-,-,-,-,-,-,-,-,-,-\n+      // insert key    _,_,_,_,_,X,_,_,_,_,_\n+      // insert child -,-,-,-,-,-,x,-,-,-,-,-\n+      // middle key              ^\n+\n+      // Keys\n+      int countBeforePos = insertPos - (middlePos + 1);\n+      // ... first copy\n+      if (countBeforePos > 0)\n+      {\n+        leftCursor.copyTo(keyOffset(middlePos + 1), rightCursor, keyOffset(0), countBeforePos * keySize());\n+      }\n+      // ... insert\n+      if (countBeforePos >= 0)\n+      {\n+        insertKeyAt(rightCursor, newKey, countBeforePos, countBeforePos);\n+      }\n+      // ... second copy\n+      int countAfterPos = leftKeyCount - insertPos;\n+      if (countAfterPos > 0)\n+      {\n+        leftCursor.copyTo(keyOffset(insertPos), rightCursor, keyOffset(countBeforePos + 1), countAfterPos * keySize());\n+      }\n+\n+      // Children\n+      countBeforePos = insertPos - middlePos;\n+      // ... first copy\n+      if (countBeforePos > 0)\n+      {\n+        // first copy\n+        leftCursor.copyTo(childOffset(middlePos + 1), rightCursor, childOffset(0), countBeforePos * childSize());\n+      }\n+      // ... insert\n+      insertChildAt(rightCursor, newRightChild, countBeforePos, countBeforePos, stableGeneration, unstableGeneration);\n+      // ... second copy\n+      if (countAfterPos > 0)\n+      {\n+        leftCursor.copyTo(childOffset(insertPos + 1), rightCursor, childOffset(countBeforePos + 1),\n+            countAfterPos * childSize());\n+      }\n+    }\n+    TreeNode.setKeyCount(leftCursor, middlePos);\n+    TreeNode.setKeyCount(rightCursor, rightKeyCount);\n+  }\n+\n+  @Override\n+  void moveKeyValuesFromLeftToRight(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount,\n+                                    int fromPosInLeftNode)\n+  {\n+    int numberOfKeysToMove = leftKeyCount - fromPosInLeftNode;\n+\n+    // Push keys and values in right sibling to the right\n+    insertKeyValueSlots(rightCursor, numberOfKeysToMove, rightKeyCount);\n+\n+    // Move keys and values from left sibling to right sibling\n+    copyKeysAndValues(leftCursor, fromPosInLeftNode, rightCursor, 0, numberOfKeysToMove);\n+\n+    setKeyCount(leftCursor, leftKeyCount - numberOfKeysToMove);\n+    setKeyCount(rightCursor, rightKeyCount + numberOfKeysToMove);\n+  }\n+\n+  @Override\n+  void copyKeyValuesFromLeftToRight(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount)\n+  {\n+    // Push keys and values in right sibling to the right\n+    insertKeyValueSlots(rightCursor, leftKeyCount, rightKeyCount);\n+\n+    // Move keys and values from left sibling to right sibling\n+    copyKeysAndValues(leftCursor, 0, rightCursor, 0, leftKeyCount);\n+\n+    // KeyCount\n+    setKeyCount(rightCursor, rightKeyCount + leftKeyCount);\n+  }\n+\n+  private void copyKeysAndValues(PageCursor fromCursor, int fromPos, PageCursor toCursor, int toPos, int count)\n+  {\n+    fromCursor.copyTo(keyOffset(fromPos), toCursor, keyOffset(toPos), count * keySize());\n+    fromCursor.copyTo(valueOffset(fromPos), toCursor, valueOffset(toPos), count * valueSize());\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"TreeNodeFixedSize[pageSize:\" + pageSize + \", internalMax:\" + internalMaxKeyCount() + \", leafMax:\" + leafMaxKeyCount() + \", \" +\n+        \"keySize:\" + keySize() + \", valueSize:\" + valueSize + \"]\";\n+  }\n }\n",
            "diff_size": 486
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "545",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2099/TreeNodeFixedSize.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2099/TreeNodeFixedSize.java\nindex d19b5f2ef59..ac55eec5e7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2099/TreeNodeFixedSize.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2099/TreeNodeFixedSize.java\n@@ -66,8 +66,7 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n {\n     static final byte FORMAT_IDENTIFIER = 2;\n     static final byte FORMAT_VERSION = 0;\n-\n-    private final int internalMaxKeyCount;\n+private final int internalMaxKeyCount;\n     private final int leafMaxKeyCount;\n     private final int keySize;\n     private final int valueSize;\n@@ -79,24 +78,23 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n         this.valueSize = layout.valueSize( null );\n         this.internalMaxKeyCount = Math.floorDiv( pageSize - (BASE_HEADER_LENGTH + SIZE_PAGE_REFERENCE),\n                 keySize + SIZE_PAGE_REFERENCE);\n-        this.leafMaxKeyCount = Math.floorDiv( pageSize - BASE_HEADER_LENGTH, keySize + valueSize );\n-\n-        if ( internalMaxKeyCount < 2 )\n+this.leafMaxKeyCount = Math.floorDiv( pageSize - BASE_HEADER_LENGTH, keySize + valueSize );\n+if ( internalMaxKeyCount < 2 )\n         {\n-            throw new MetadataMismatchException(\n-                    \"For layout %s a page size of %d would only fit %d internal keys, minimum is 2\",\n-                    layout, pageSize, internalMaxKeyCount );\n+            throw new MetadataMismatchException( \"For layout %s a page size of %d would only fit %d internal keys, minimum is 2\", layout, pageSize, internalMaxKeyCount );\n         }\n-        if ( leafMaxKeyCount < 2 )\n+\n+if ( leafMaxKeyCount < 2 )\n         {\n             throw new MetadataMismatchException( \"A page size of %d would only fit leaf keys, minimum is 2\",\n                     pageSize, leafMaxKeyCount );\n-        }\n+    }\n     }\n \n     @Override\n     void writeAdditionalHeader( PageCursor cursor )\n-    {   // no-op\n+    {\n+    // no-op\n     }\n \n     private static int childSize()\n@@ -201,7 +199,8 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n \n     @Override\n     void validateKeyValueSize( KEY key, VALUE value )\n-    {   // no-op for fixed size\n+    {\n+    // no-op for fixed size\n     }\n \n     @Override\n@@ -326,18 +325,20 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n \n     @Override\n     void defragmentLeaf( PageCursor cursor )\n-    {   // no-op\n+    {\n+    // no-op\n     }\n \n     @Override\n     void defragmentInternal( PageCursor cursor )\n-    {   // no-op\n+    {\n+    // no-op\n     }\n \n     @Override\n     boolean leafUnderflow( PageCursor cursor, int keyCount )\n     {\n-        return keyCount < (leafMaxKeyCount() + 1) / 2;\n+        return keyCount < (leafMaxKeyCount() + 1 ) / 2;\n     }\n \n     @Override\n@@ -364,8 +365,7 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n     {\n         int keyCountAfterInsert = leftKeyCount + 1;\n         int middlePos = middle( keyCountAfterInsert );\n-\n-        if ( middlePos == insertPos )\n+if ( middlePos == insertPos )\n         {\n             layout.copyKey( newKey, newSplitter );\n         }\n@@ -397,7 +397,8 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n                 // first copy\n                 copyKeysAndValues( leftCursor, middlePos, rightCursor, 0, countBeforePos );\n             }\n-            insertKeyValueAt( rightCursor, newKey, newValue, countBeforePos, countBeforePos );\n+\n+insertKeyValueAt( rightCursor, newKey, newValue, countBeforePos, countBeforePos );\n             int countAfterPos = leftKeyCount - insertPos;\n             if ( countAfterPos > 0 )\n             {\n@@ -420,8 +421,7 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n     {\n         int keyCountAfterInsert = leftKeyCount + 1;\n         int middlePos = middle( keyCountAfterInsert );\n-\n-        if ( middlePos == insertPos )\n+if ( middlePos == insertPos )\n         {\n             layout.copyKey( newKey, newSplitter );\n         }\n@@ -441,7 +441,7 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n             // middle key              ^\n \n             leftCursor.copyTo( keyOffset( middlePos ), rightCursor, keyOffset( 0 ), rightKeyCount * keySize() );\n-            leftCursor.copyTo( childOffset( middlePos ), rightCursor, childOffset( 0 ), (rightKeyCount + 1) * childSize() );\n+            leftCursor.copyTo( childOffset( middlePos ), rightCursor, childOffset( 0 ), (rightKeyCount + 1 ) * childSize() );\n             insertKeyAt( leftCursor, newKey, insertPos, middlePos - 1 );\n             insertChildAt( leftCursor, newRightChild, insertPos + 1, middlePos - 1, stableGeneration, unstableGeneration );\n         }\n@@ -466,7 +466,7 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n             // middle key              ^\n \n             // Keys\n-            int countBeforePos = insertPos - (middlePos + 1);\n+            int countBeforePos = insertPos - (middlePos + 1 );\n             // ... first copy\n             if ( countBeforePos > 0 )\n             {\n@@ -499,15 +499,14 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n             {\n                 leftCursor.copyTo( childOffset( insertPos + 1 ), rightCursor, childOffset( countBeforePos + 1 ),\n                         countAfterPos * childSize() );\n-            }\n+    }\n         }\n         TreeNode.setKeyCount( leftCursor, middlePos );\n         TreeNode.setKeyCount( rightCursor, rightKeyCount );\n     }\n \n     @Override\n-    void moveKeyValuesFromLeftToRight( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount,\n-            int fromPosInLeftNode )\n+    void moveKeyValuesFromLeftToRight( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount, int fromPosInLeftNode )\n     {\n         int numberOfKeysToMove = leftKeyCount - fromPosInLeftNode;\n \n@@ -537,13 +536,12 @@ class TreeNodeFixedSize<KEY,VALUE> extends TreeNode<KEY,VALUE>\n     private void copyKeysAndValues( PageCursor fromCursor, int fromPos, PageCursor toCursor, int toPos, int count )\n     {\n         fromCursor.copyTo( keyOffset( fromPos ), toCursor, keyOffset( toPos ), count * keySize() );\n-        fromCursor.copyTo( valueOffset( fromPos ), toCursor, valueOffset( toPos ),count * valueSize() );\n+        fromCursor.copyTo( valueOffset( fromPos ), toCursor, valueOffset( toPos ), count * valueSize() );\n     }\n \n     @Override\n     public String toString()\n     {\n-        return \"TreeNodeFixedSize[pageSize:\" + pageSize + \", internalMax:\" + internalMaxKeyCount() + \", leafMax:\" + leafMaxKeyCount() + \", \" +\n-                \"keySize:\" + keySize() + \", valueSize:\" + valueSize + \"]\";\n+        return \"TreeNodeFixedSize[pageSize:\" + pageSize + \", internalMax:\" + internalMaxKeyCount() + \", leafMax:\" + leafMaxKeyCount() + \", \" + \"keySize:\" + keySize() + \", valueSize:\" + valueSize + \"]\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}