{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2934",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2934/DatabaseIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2934/DatabaseIndex.java\nindex 2c7ca3d3acc..b8aa2b9f381 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2934/DatabaseIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2934/DatabaseIndex.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.index;\n \n import java.io.Closeable;\n@@ -34,93 +35,96 @@ import org.neo4j.kernel.api.impl.index.partition.AbstractIndexPartition;\n  */\n public interface DatabaseIndex extends Closeable\n {\n-    /**\n-     * Creates new index.\n-     * As part of creation process index will allocate all required folders, index failure storage\n-     * and will create its first partition.\n-     * <p>\n-     * <b>Index creation do not automatically open it. To be able to use index please open it first.</b>\n-     *\n-     * @throws IOException\n-     */\n-    void create() throws IOException;\n+  /**\n+   * Creates new index.\n+   * As part of creation process index will allocate all required folders, index failure storage\n+   * and will create its first partition.\n+   * <p>\n+   * <b>Index creation do not automatically open it. To be able to use index please open it first.</b>\n+   *\n+   * @throws IOException\n+   */\n+  void create() throws IOException;\n \n-    /**\n-     * Open index with all allocated partitions.\n-     *\n-     * @throws IOException\n-     */\n-    void open() throws IOException;\n+  /**\n+   * Open index with all allocated partitions.\n+   *\n+   * @throws IOException\n+   */\n+  void open() throws IOException;\n \n-    /**\n-     * Check if index is open or not\n-     * @return true if index is open\n-     */\n-    boolean isOpen();\n+  /**\n+   * Check if index is open or not\n+   *\n+   * @return true if index is open\n+   */\n+  boolean isOpen();\n \n-    /**\n-     * Check if index is opened in read only mode\n-     * @return true if index open in rad only mode\n-     */\n-    boolean isReadOnly();\n+  /**\n+   * Check if index is opened in read only mode\n+   *\n+   * @return true if index open in rad only mode\n+   */\n+  boolean isReadOnly();\n \n-    /**\n-     * Check lucene index existence within all allocated partitions.\n-     *\n-     * @return true if index exist in all partitions, false when index is empty or does not exist\n-     * @throws IOException\n-     */\n-    boolean exists() throws IOException;\n+  /**\n+   * Check lucene index existence within all allocated partitions.\n+   *\n+   * @return true if index exist in all partitions, false when index is empty or does not exist\n+   * @throws IOException\n+   */\n+  boolean exists() throws IOException;\n \n-    /**\n-     * Verify state of the index.\n-     * If index is already open and in use method assume that index is valid since lucene already operating with it,\n-     * otherwise necessary checks perform.\n-     *\n-     * @return true if lucene confirm that index is in valid clean state or index is already open.\n-     */\n-    boolean isValid();\n+  /**\n+   * Verify state of the index.\n+   * If index is already open and in use method assume that index is valid since lucene already operating with it,\n+   * otherwise necessary checks perform.\n+   *\n+   * @return true if lucene confirm that index is in valid clean state or index is already open.\n+   */\n+  boolean isValid();\n \n-    /**\n-     * Close index and deletes all it's partitions.\n-     *\n-     * @throws IOException\n-     */\n-    void drop() throws IOException;\n+  /**\n+   * Close index and deletes all it's partitions.\n+   *\n+   * @throws IOException\n+   */\n+  void drop() throws IOException;\n \n-    /**\n-     * Commits all index partitions.\n-     *\n-     * @throws IOException\n-     */\n-    void flush() throws IOException;\n+  /**\n+   * Commits all index partitions.\n+   *\n+   * @throws IOException\n+   */\n+  void flush() throws IOException;\n \n-    /**\n-     * Creates an iterable over all {@link org.apache.lucene.document.Document document}s in all partitions.\n-     *\n-     * @return LuceneAllDocumentsReader over all documents\n-     */\n-    LuceneAllDocumentsReader allDocumentsReader();\n+  /**\n+   * Creates an iterable over all {@link org.apache.lucene.document.Document document}s in all partitions.\n+   *\n+   * @return LuceneAllDocumentsReader over all documents\n+   */\n+  LuceneAllDocumentsReader allDocumentsReader();\n \n-    /**\n-     * Snapshot of all file in all index partitions.\n-     *\n-     * @return iterator over all index files.\n-     * @throws IOException\n-     * @see WritableIndexSnapshotFileIterator\n-     */\n-    ResourceIterator<File> snapshot() throws IOException;\n+  /**\n+   * Snapshot of all file in all index partitions.\n+   *\n+   * @return iterator over all index files.\n+   * @throws IOException\n+   * @see WritableIndexSnapshotFileIterator\n+   */\n+  ResourceIterator<File> snapshot() throws IOException;\n \n-    /**\n-     * Refresh all partitions to make newly inserted data visible for readers.\n-     *\n-     * @throws IOException\n-     */\n-    void maybeRefreshBlocking() throws IOException;\n+  /**\n+   * Refresh all partitions to make newly inserted data visible for readers.\n+   *\n+   * @throws IOException\n+   */\n+  void maybeRefreshBlocking() throws IOException;\n \n-    /**\n-     * Get index partitions\n-     * @return list of index partition\n-     */\n-    List<AbstractIndexPartition> getPartitions();\n+  /**\n+   * Get index partitions\n+   *\n+   * @return list of index partition\n+   */\n+  List<AbstractIndexPartition> getPartitions();\n }\n",
            "diff_size": 82
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2934/DatabaseIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2934/DatabaseIndex.java\nindex 2c7ca3d3acc..6d94d5448f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2934/DatabaseIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2934/DatabaseIndex.java\n@@ -123,4 +123,4 @@ public interface DatabaseIndex extends Closeable\n      * @return list of index partition\n      */\n     List<AbstractIndexPartition> getPartitions();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}