{
    "project_name": "graphfoundation-ongdb",
    "error_id": "637",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "65",
                    "column": "85",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/637/ExtensionInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/637/ExtensionInitializer.java\nindex a4ba17a9b20..e6c8cfdd932 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/637/ExtensionInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/637/ExtensionInitializer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.modules;\n \n import java.util.Collection;\n@@ -36,57 +37,56 @@ import org.neo4j.server.plugins.SPIPluginLifecycle;\n  */\n public class ExtensionInitializer\n {\n-    private final Iterable<PluginLifecycle> lifecycles;\n-    private final NeoServer neoServer;\n+  private final Iterable<PluginLifecycle> lifecycles;\n+  private final NeoServer neoServer;\n \n-    public ExtensionInitializer( NeoServer neoServer )\n-    {\n-        this.neoServer = neoServer;\n-        lifecycles = Service.load( PluginLifecycle.class );\n-    }\n+  public ExtensionInitializer(NeoServer neoServer)\n+  {\n+    this.neoServer = neoServer;\n+    lifecycles = Service.load(PluginLifecycle.class);\n+  }\n \n-    public Collection<Injectable<?>> initializePackages( Iterable<String> packageNames )\n-    {\n-        GraphDatabaseAPI graphDatabaseService = neoServer.getDatabase().getGraph();\n-        Config configuration = neoServer.getConfig();\n+  public Collection<Injectable<?>> initializePackages(Iterable<String> packageNames)\n+  {\n+    GraphDatabaseAPI graphDatabaseService = neoServer.getDatabase().getGraph();\n+    Config configuration = neoServer.getConfig();\n \n-        Collection<Injectable<?>> injectables = new HashSet<>();\n-        for ( PluginLifecycle lifecycle : lifecycles )\n+    Collection<Injectable<?>> injectables = new HashSet<>();\n+    for (PluginLifecycle lifecycle : lifecycles)\n+    {\n+      if (hasPackage(lifecycle, packageNames))\n+      {\n+        if (lifecycle instanceof SPIPluginLifecycle)\n         {\n-            if ( hasPackage( lifecycle, packageNames ) )\n-            {\n-                if ( lifecycle instanceof SPIPluginLifecycle )\n-                {\n-                    SPIPluginLifecycle lifeCycleSpi = (SPIPluginLifecycle) lifecycle;\n-                    injectables.addAll( lifeCycleSpi.start( neoServer ) );\n-                }\n-                else\n-                {\n-                    injectables.addAll( lifecycle.start( graphDatabaseService, new ConfigAdapter( configuration ) ) );\n-                }\n-            }\n+          SPIPluginLifecycle lifeCycleSpi = (SPIPluginLifecycle) lifecycle;\n+          injectables.addAll(lifeCycleSpi.start(neoServer));\n+        } else\n+        {\n+          injectables.addAll(lifecycle.start(graphDatabaseService, new ConfigAdapter(configuration)));\n         }\n-        return injectables;\n+      }\n     }\n+    return injectables;\n+  }\n \n-    private boolean hasPackage( PluginLifecycle pluginLifecycle, Iterable<String> packageNames )\n+  private boolean hasPackage(PluginLifecycle pluginLifecycle, Iterable<String> packageNames)\n+  {\n+    String lifecyclePackageName = pluginLifecycle.getClass().getPackage().getName();\n+    for (String packageName : packageNames)\n     {\n-        String lifecyclePackageName = pluginLifecycle.getClass().getPackage().getName();\n-        for ( String packageName : packageNames )\n-        {\n-            if ( lifecyclePackageName.startsWith( packageName ) )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+      if (lifecyclePackageName.startsWith(packageName))\n+      {\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n \n-    public void stop()\n+  public void stop()\n+  {\n+    for (PluginLifecycle pluginLifecycle : lifecycles)\n     {\n-        for ( PluginLifecycle pluginLifecycle : lifecycles )\n-        {\n-            pluginLifecycle.stop();\n-        }\n+      pluginLifecycle.stop();\n     }\n+  }\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/637/ExtensionInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/637/ExtensionInitializer.java\nindex a4ba17a9b20..6cc481a1a2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/637/ExtensionInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/637/ExtensionInitializer.java\n@@ -89,4 +89,4 @@ public class ExtensionInitializer\n             pluginLifecycle.stop();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}