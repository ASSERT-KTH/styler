{
    "project_name": "Angel-ML-angel",
    "error_id": "600",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/600/LongIntSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/600/LongIntSortedVectorStorage.java\nindex 5a1854aa7bc..b20f4e19ddd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/600/LongIntSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/600/LongIntSortedVectorStorage.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.math2.utils.ArrayCopy;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "282",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/600/LongIntSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/600/LongIntSortedVectorStorage.java\nindex 5a1854aa7bc..590ec7de002 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/600/LongIntSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/600/LongIntSortedVectorStorage.java\n@@ -133,8 +133,7 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n         ArrayCopy.copy(values));\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage oneLikeSparse() {\n     int[] oneLikeValues = new int[size];\n     for (int i = 0; i < size; i++) {\n@@ -152,8 +151,7 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage oneLikeSparse(long dim, int capacity) {\n     int[] oneLikeValues = new int[capacity];\n     long[] indices = new long[capacity];\n@@ -239,8 +237,7 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage emptySparse() {\n     return new LongIntSparseVectorStorage(dim, indices.length);\n   }\n@@ -250,8 +247,7 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n     return new LongIntSortedVectorStorage(dim, indices.length);\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage emptySparse(long dim, int capacity) {\n     return new LongIntSparseVectorStorage(dim, capacity);\n   }\n@@ -283,8 +279,7 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n \n   @Override\n   public boolean hasKey(long key) {\n-    return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n-        && Arrays.binarySearch(indices, key) > 0);\n+    return (size != 0 && key <= indices[size - 1] && key >= indices[0] && Arrays.binarySearch(indices, key) > 0);\n   }\n \n   @Override\n@@ -317,4 +312,4 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n   public int[] getValues() {\n     return values;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "284",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/600/LongIntSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/600/LongIntSortedVectorStorage.java\nindex 5a1854aa7bc..416fac9da47 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/600/LongIntSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/600/LongIntSortedVectorStorage.java\n@@ -59,7 +59,7 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n     if (idx < 0 || idx > dim - 1) {\n       throw new ArrayIndexOutOfBoundsException();\n     } else if (size == 0 || idx > indices[size - 1] || idx < indices[0]) {\n-      return 0;\n+             return 0;\n     } else {\n       int i = Arrays.binarySearch(indices, idx);\n       return i >= 0 ? values[i] : 0;\n@@ -73,22 +73,24 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n     }\n \n     // 1. find the insert point\n+\n     int point;\n     if (size == 0 || idx < indices[0]) {\n       point = 0;\n     } else if (idx > indices[size - 1]) {\n-      point = size;\n+             point = size;\n     } else {\n-      point = Arrays.binarySearch(indices, idx);\n-      if (point >= 0) {\n-        values[point] = value;\n-        return;\n-      } else {\n-        point = -(point + 1);\n-      }\n+             point = Arrays.binarySearch(indices, idx);\n+             if (point >= 0) {\n+               values[point] = value;\n+               return;\n+             } else {\n+               point = -(point + 1);\n+             }\n     }\n \n     // 2. check the capacity and insert\n+\n     if (size == indices.length) {\n       long[] newIdxs = new long[(int) (indices.length * 1.5)];\n       int[] newValues = new int[(int) (indices.length * 1.5)];\n@@ -96,13 +98,13 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n         System.arraycopy(indices, 0, newIdxs, 1, size);\n         System.arraycopy(values, 0, newValues, 1, size);\n       } else if (point == size) {\n-        System.arraycopy(indices, 0, newIdxs, 0, size);\n-        System.arraycopy(values, 0, newValues, 0, size);\n+               System.arraycopy(indices, 0, newIdxs, 0, size);\n+               System.arraycopy(values, 0, newValues, 0, size);\n       } else {\n-        System.arraycopy(indices, 0, newIdxs, 0, point);\n-        System.arraycopy(values, 0, newValues, 0, point);\n-        System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n-        System.arraycopy(values, point, newValues, point + 1, size - point);\n+               System.arraycopy(indices, 0, newIdxs, 0, point);\n+               System.arraycopy(values, 0, newValues, 0, point);\n+               System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n+               System.arraycopy(values, point, newValues, point + 1, size - point);\n       }\n       newIdxs[point] = idx;\n       newValues[point] = value;\n@@ -123,17 +125,14 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n \n   @Override\n   public LongIntVectorStorage clone() {\n-    return new LongIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n+    return new LongIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices), ArrayCopy.copy(values));\n   }\n \n   @Override\n   public LongIntVectorStorage copy() {\n-    return new LongIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n+    return new LongIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices), ArrayCopy.copy(values));\n   }\n \n-\n   @Override\n   public LongIntVectorStorage oneLikeSparse() {\n     int[] oneLikeValues = new int[size];\n@@ -152,7 +151,6 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongIntVectorStorage oneLikeSparse(long dim, int capacity) {\n     int[] oneLikeValues = new int[capacity];\n@@ -168,6 +166,7 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -211,6 +210,7 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -239,7 +239,6 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongIntVectorStorage emptySparse() {\n     return new LongIntSparseVectorStorage(dim, indices.length);\n@@ -250,7 +249,6 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n     return new LongIntSortedVectorStorage(dim, indices.length);\n   }\n \n-\n   @Override\n   public LongIntVectorStorage emptySparse(long dim, int capacity) {\n     return new LongIntSparseVectorStorage(dim, capacity);\n@@ -283,8 +281,7 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n \n   @Override\n   public boolean hasKey(long key) {\n-    return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n-        && Arrays.binarySearch(indices, key) > 0);\n+    return (size != 0 && key <= indices[size - 1] && key >= indices[0] && Arrays.binarySearch(indices, key) > 0);\n   }\n \n   @Override\n@@ -309,12 +306,13 @@ public class LongIntSortedVectorStorage implements LongIntVectorStorage {\n \n   @Override\n   public void clear() {\n-    Arrays.parallelSetAll(indices, (int value) -> 0);\n-    Arrays.parallelSetAll(values, (int value) -> 0);\n+    Arrays.parallelSetAll(indices, (int value)-> 0);\n+    Arrays.parallelSetAll(values, (int value)-> 0);\n   }\n \n   @Override\n   public int[] getValues() {\n     return values;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}