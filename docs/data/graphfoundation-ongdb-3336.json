{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3336",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "75",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "177",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "189",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "207",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3336/ReplicatedIdGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3336/ReplicatedIdGenerator.java\nindex cba313bdace..56c71c3c5e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3336/ReplicatedIdGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3336/ReplicatedIdGenerator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.state.machines.id;\n \n import java.io.File;\n@@ -38,211 +39,205 @@ import static org.neo4j.kernel.impl.store.id.IdRangeIterator.VALUE_REPRESENTING_\n \n class ReplicatedIdGenerator implements IdGenerator\n {\n-    private final IdType idType;\n-    private final Log log;\n-    private final ReplicatedIdRangeAcquirer acquirer;\n-    private volatile long highId;\n-    private volatile IdRangeIterator idQueue = EMPTY_ID_RANGE_ITERATOR;\n-    private final IdContainer idContainer;\n-    private final ReentrantLock idContainerLock = new ReentrantLock();\n-\n-    ReplicatedIdGenerator( FileSystemAbstraction fs, File file, IdType idType, LongSupplier highId,\n-            ReplicatedIdRangeAcquirer acquirer, LogProvider logProvider, int grabSize, boolean aggressiveReuse )\n-    {\n-        this.idType = idType;\n-        this.highId = highId.getAsLong();\n-        this.acquirer = acquirer;\n-        this.log = logProvider.getLog( getClass() );\n-        idContainer = new IdContainer( fs, file, grabSize, aggressiveReuse );\n-        idContainer.init();\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        idContainerLock.lock();\n-        try\n-        {\n-            idContainer.close( highId );\n-        }\n-        finally\n-        {\n-            idContainerLock.unlock();\n-        }\n-    }\n-\n-    @Override\n-    public void freeId( long id )\n-    {\n-        idContainerLock.lock();\n-        try\n-        {\n-            idContainer.freeId( id );\n-        }\n-        finally\n-        {\n-            idContainerLock.unlock();\n-        }\n-    }\n-\n-    @Override\n-    public long getHighId()\n+  private final IdType idType;\n+  private final Log log;\n+  private final ReplicatedIdRangeAcquirer acquirer;\n+  private volatile long highId;\n+  private volatile IdRangeIterator idQueue = EMPTY_ID_RANGE_ITERATOR;\n+  private final IdContainer idContainer;\n+  private final ReentrantLock idContainerLock = new ReentrantLock();\n+\n+  ReplicatedIdGenerator(FileSystemAbstraction fs, File file, IdType idType, LongSupplier highId,\n+                        ReplicatedIdRangeAcquirer acquirer, LogProvider logProvider, int grabSize, boolean aggressiveReuse)\n+  {\n+    this.idType = idType;\n+    this.highId = highId.getAsLong();\n+    this.acquirer = acquirer;\n+    this.log = logProvider.getLog(getClass());\n+    idContainer = new IdContainer(fs, file, grabSize, aggressiveReuse);\n+    idContainer.init();\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    idContainerLock.lock();\n+    try\n+    {\n+      idContainer.close(highId);\n+    } finally\n+    {\n+      idContainerLock.unlock();\n+    }\n+  }\n+\n+  @Override\n+  public void freeId(long id)\n+  {\n+    idContainerLock.lock();\n+    try\n+    {\n+      idContainer.freeId(id);\n+    } finally\n     {\n-        return highId;\n+      idContainerLock.unlock();\n     }\n+  }\n+\n+  @Override\n+  public long getHighId()\n+  {\n+    return highId;\n+  }\n+\n+  @Override\n+  public void setHighId(long id)\n+  {\n+    this.highId = max(this.highId, id);\n+  }\n+\n+  @Override\n+  public long getHighestPossibleIdInUse()\n+  {\n+    return highId - 1;\n+  }\n \n-    @Override\n-    public void setHighId( long id )\n+  @Override\n+  public long getNumberOfIdsInUse()\n+  {\n+    return highId - getDefragCount();\n+  }\n+\n+  @Override\n+  public synchronized long nextId()\n+  {\n+    long id = getReusableId();\n+    if (id != IdContainer.NO_RESULT)\n     {\n-        this.highId = max( this.highId, id );\n+      return id;\n     }\n \n-    @Override\n-    public long getHighestPossibleIdInUse()\n+    long nextId = idQueue.nextId();\n+    if (nextId == VALUE_REPRESENTING_NULL)\n     {\n-        return highId - 1;\n+      acquireNextIdBatch();\n+      nextId = idQueue.nextId();\n     }\n+    highId = max(highId, nextId + 1);\n+    return nextId;\n+  }\n+\n+  private void acquireNextIdBatch()\n+  {\n+    IdAllocation allocation = acquirer.acquireIds(idType);\n+\n+    assert allocation.getIdRange().getRangeLength() > 0;\n+    log.debug(\"Received id allocation \" + allocation + \" for \" + idType);\n+    storeLocally(allocation);\n+  }\n \n-    @Override\n-    public long getNumberOfIdsInUse()\n+  @Override\n+  public synchronized IdRange nextIdBatch(int size)\n+  {\n+    IdRange idBatch = getReusableIdBatch(size);\n+    if (idBatch.totalSize() > 0)\n     {\n-        return highId - getDefragCount();\n+      return idBatch;\n     }\n-\n-    @Override\n-    public synchronized long nextId()\n-    {\n-        long id = getReusableId();\n-        if ( id != IdContainer.NO_RESULT )\n-        {\n-            return id;\n-        }\n-\n-        long nextId = idQueue.nextId();\n-        if ( nextId == VALUE_REPRESENTING_NULL )\n-        {\n-            acquireNextIdBatch();\n-            nextId = idQueue.nextId();\n-        }\n-        highId = max( highId, nextId + 1 );\n-        return nextId;\n+    IdRange range = idQueue.nextIdBatch(size);\n+    if (range.totalSize() == 0)\n+    {\n+      acquireNextIdBatch();\n+      range = idQueue.nextIdBatch(size);\n+      setHighId(range.getHighId());\n     }\n+    return range;\n+  }\n \n-    private void acquireNextIdBatch()\n+  @Override\n+  public long getDefragCount()\n+  {\n+    idContainerLock.lock();\n+    try\n     {\n-        IdAllocation allocation = acquirer.acquireIds( idType );\n-\n-        assert allocation.getIdRange().getRangeLength() > 0;\n-        log.debug( \"Received id allocation \" + allocation + \" for \" + idType );\n-        storeLocally( allocation );\n+      return idContainer.getFreeIdCount();\n+    } finally\n+    {\n+      idContainerLock.unlock();\n     }\n+  }\n \n-    @Override\n-    public synchronized IdRange nextIdBatch( int size )\n-    {\n-        IdRange idBatch = getReusableIdBatch( size );\n-        if ( idBatch.totalSize() > 0 )\n-        {\n-            return idBatch;\n-        }\n-        IdRange range = idQueue.nextIdBatch( size );\n-        if ( range.totalSize() == 0 )\n-        {\n-            acquireNextIdBatch();\n-            range = idQueue.nextIdBatch( size );\n-            setHighId( range.getHighId() );\n-        }\n-        return range;\n+  @Override\n+  public void delete()\n+  {\n+    idContainerLock.lock();\n+    try\n+    {\n+      idContainer.delete();\n+    } finally\n+    {\n+      idContainerLock.unlock();\n     }\n+  }\n \n-    @Override\n-    public long getDefragCount()\n-    {\n-        idContainerLock.lock();\n-        try\n-        {\n-            return idContainer.getFreeIdCount();\n-        }\n-        finally\n-        {\n-            idContainerLock.unlock();\n-        }\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \"[\" + this.idQueue + \"]\";\n+  }\n \n-    @Override\n-    public void delete()\n-    {\n-        idContainerLock.lock();\n-        try\n-        {\n-            idContainer.delete();\n-        }\n-        finally\n-        {\n-            idContainerLock.unlock();\n-        }\n-    }\n+  static void createGenerator(FileSystemAbstraction fs, File fileName, long highId,\n+                              boolean throwIfFileExists)\n+  {\n+    IdContainer.createEmptyIdFile(fs, fileName, highId, throwIfFileExists);\n+  }\n \n-    @Override\n-    public String toString()\n+  private long getReusableId()\n+  {\n+    idContainerLock.lock();\n+    try\n     {\n-        return getClass().getSimpleName() + \"[\" + this.idQueue + \"]\";\n-    }\n-\n-    static void createGenerator( FileSystemAbstraction fs, File fileName, long highId,\n-            boolean throwIfFileExists )\n+      return idContainer.getReusableId();\n+    } finally\n     {\n-        IdContainer.createEmptyIdFile( fs, fileName, highId, throwIfFileExists );\n+      idContainerLock.unlock();\n     }\n+  }\n \n-    private long getReusableId()\n-    {\n-        idContainerLock.lock();\n-        try\n-        {\n-            return idContainer.getReusableId();\n-        }\n-        finally\n-        {\n-            idContainerLock.unlock();\n-        }\n+  private IdRange getReusableIdBatch(int maxSize)\n+  {\n+    idContainerLock.lock();\n+    try\n+    {\n+      return idContainer.getReusableIdBatch(maxSize);\n+    } finally\n+    {\n+      idContainerLock.unlock();\n     }\n+  }\n \n-    private IdRange getReusableIdBatch( int maxSize )\n-    {\n-        idContainerLock.lock();\n-        try\n-        {\n-            return idContainer.getReusableIdBatch( maxSize );\n-        }\n-        finally\n-        {\n-            idContainerLock.unlock();\n-        }\n-    }\n+  private void storeLocally(IdAllocation allocation)\n+  {\n+    setHighId(allocation.getHighestIdInUse() + 1); // high id is certainly bigger than the highest id in use\n+    this.idQueue = respectingHighId(allocation.getIdRange()).iterator();\n+  }\n \n-    private void storeLocally( IdAllocation allocation )\n+  private IdRange respectingHighId(IdRange idRange)\n+  {\n+    int adjustment = 0;\n+    long originalRangeStart = idRange.getRangeStart();\n+    if (highId > originalRangeStart)\n     {\n-        setHighId( allocation.getHighestIdInUse() + 1 ); // high id is certainly bigger than the highest id in use\n-        this.idQueue = respectingHighId( allocation.getIdRange() ).iterator();\n+      adjustment = (int) (highId - originalRangeStart);\n     }\n-\n-    private IdRange respectingHighId( IdRange idRange )\n-    {\n-        int adjustment = 0;\n-        long originalRangeStart = idRange.getRangeStart();\n-        if ( highId > originalRangeStart )\n-        {\n-            adjustment = (int) (highId - originalRangeStart);\n-        }\n-        long rangeStart = max( this.highId, originalRangeStart );\n-        int rangeLength = idRange.getRangeLength() - adjustment;\n-        if ( rangeLength <= 0 )\n-        {\n-            throw new IllegalStateException(\n-                    \"IdAllocation state is probably corrupted or out of sync with the cluster. \" +\n-                            \"Local highId is \" + highId + \" and allocation range is \" + idRange );\n-        }\n-        return new IdRange( idRange.getDefragIds(), rangeStart, rangeLength );\n+    long rangeStart = max(this.highId, originalRangeStart);\n+    int rangeLength = idRange.getRangeLength() - adjustment;\n+    if (rangeLength <= 0)\n+    {\n+      throw new IllegalStateException(\n+          \"IdAllocation state is probably corrupted or out of sync with the cluster. \" +\n+              \"Local highId is \" + highId + \" and allocation range is \" + idRange);\n     }\n+    return new IdRange(idRange.getDefragIds(), rangeStart, rangeLength);\n+  }\n }\n",
            "diff_size": 240
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "236",
                    "column": "20",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "238",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3336/ReplicatedIdGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3336/ReplicatedIdGenerator.java\nindex cba313bdace..416ad499187 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3336/ReplicatedIdGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3336/ReplicatedIdGenerator.java\n@@ -124,15 +124,15 @@ class ReplicatedIdGenerator implements IdGenerator\n             acquireNextIdBatch();\n             nextId = idQueue.nextId();\n         }\n-        highId = max( highId, nextId + 1 );\n+\n+highId = max( highId, nextId + 1 );\n         return nextId;\n     }\n \n     private void acquireNextIdBatch()\n     {\n         IdAllocation allocation = acquirer.acquireIds( idType );\n-\n-        assert allocation.getIdRange().getRangeLength() > 0;\n+assert allocation.getIdRange().getRangeLength() > 0;\n         log.debug( \"Received id allocation \" + allocation + \" for \" + idType );\n         storeLocally( allocation );\n     }\n@@ -145,14 +145,16 @@ class ReplicatedIdGenerator implements IdGenerator\n         {\n             return idBatch;\n         }\n-        IdRange range = idQueue.nextIdBatch( size );\n+\n+IdRange range = idQueue.nextIdBatch( size );\n         if ( range.totalSize() == 0 )\n         {\n             acquireNextIdBatch();\n             range = idQueue.nextIdBatch( size );\n             setHighId( range.getHighId() );\n         }\n-        return range;\n+\n+return range;\n     }\n \n     @Override\n@@ -231,18 +233,16 @@ class ReplicatedIdGenerator implements IdGenerator\n     {\n         int adjustment = 0;\n         long originalRangeStart = idRange.getRangeStart();\n-        if ( highId > originalRangeStart )\n+        if ( highId> originalRangeStart )\n         {\n-            adjustment = (int) (highId - originalRangeStart);\n+            adjustment = ( int) ( highId - originalRangeStart);\n         }\n         long rangeStart = max( this.highId, originalRangeStart );\n         int rangeLength = idRange.getRangeLength() - adjustment;\n         if ( rangeLength <= 0 )\n         {\n-            throw new IllegalStateException(\n-                    \"IdAllocation state is probably corrupted or out of sync with the cluster. \" +\n-                            \"Local highId is \" + highId + \" and allocation range is \" + idRange );\n-        }\n+            throw new IllegalStateException( \"IdAllocation state is probably corrupted or out of sync with the cluster. \" + \"Local highId is \" + highId + \" and allocation range is \" + idRange );\n+    }\n         return new IdRange( idRange.getDefragIds(), rangeStart, rangeLength );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}