{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1416",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "112",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "173",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "336",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "607",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "607",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "696",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "738",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "775",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "775",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "804",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "804",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "806",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "806",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "821",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "821",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "832",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "832",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "839",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "839",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "843",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "843",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "846",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "846",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "847",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "847",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "860",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "860",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "866",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "866",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "870",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "870",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "883",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "883",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "885",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "885",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "889",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "889",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "893",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "893",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "906",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "906",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "912",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "912",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "916",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "916",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "927",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "927",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "929",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "929",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "933",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "933",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "937",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "937",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "950",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "950",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "952",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "952",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "956",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "956",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "960",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "960",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "975",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "975",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "977",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "977",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "981",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "981",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "985",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "985",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1000",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1000",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1002",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1002",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1006",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1006",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1010",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1010",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1023",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1023",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1027",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1027",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1046",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1046",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1050",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1050",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1069",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1069",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1076",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1076",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1095",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1095",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1097",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1097",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1102",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1102",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1121",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1121",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1125",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1125",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1144",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1144",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1148",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1148",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1167",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1167",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1171",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1171",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1188",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1188",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1196",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1196",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1202",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1202",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1207",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1207",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1214",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1214",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1217",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1222",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1222",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1226",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1226",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1226",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1229",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1235",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1235",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1238",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1238",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1253",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1253",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1258",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1258",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1264",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1264",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1270",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1270",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1275",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1275",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1277",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1277",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1416/Extractors.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1416/Extractors.java\nindex 64e53354e3e..c8c599bea8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1416/Extractors.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1416/Extractors.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.lang.reflect.Field;\n@@ -48,11 +49,11 @@ import static org.neo4j.helpers.Numbers.safeCastLongToShort;\n /**\n  * Common implementations of {@link Extractor}. Since array values can have a delimiter of user choice that isn't\n  * an enum, but a regular class with a constructor where that delimiter can be specified.\n- *\n+ * <p>\n  * The common {@link Extractor extractors} can be accessed using the accessor methods, like {@link #string()},\n  * {@link #long_()} and others. Specific classes are declared as return types for those providing additional\n  * value accessors, f.ex {@link LongExtractor#longValue()}.\n- *\n+ * <p>\n  * Typically an instance of {@link Extractors} would be instantiated along side a {@link BufferedCharSeeker},\n  * assumed to be used by a single thread, since each {@link Extractor} it has is stateful. Example:\n  *\n@@ -65,7 +66,7 @@ import static org.neo4j.helpers.Numbers.safeCastLongToShort;\n  * int boxFreeIntValue = seeker.extract( mark, extractors.int_() ).intValue();\n  * // ... or using any other type of extractor.\n  * </pre>\n- *\n+ * <p>\n  * Custom {@link Extractor extractors} can also be implemented and used, if need arises:\n  *\n  * <pre>\n@@ -76,1208 +77,1209 @@ import static org.neo4j.helpers.Numbers.safeCastLongToShort;\n  * // ... seek a value, then extract like this\n  * long timestamp = seeker.extract( mark, dateExtractor ).dateAsMillis();\n  * </pre>\n- *\n+ * <p>\n  * ... even {@link Extractors#add(Extractor) added} to an {@link Extractors} instance, where its\n  * {@link Extractor#toString() toString} value is used as key for lookup in {@link #valueOf(String)}.\n  */\n public class Extractors\n {\n-    private final Map<String, Extractor<?>> instances = new HashMap<>();\n-    private final Extractor<String> string;\n-    private final LongExtractor long_;\n-    private final IntExtractor int_;\n-    private final CharExtractor char_;\n-    private final ShortExtractor short_;\n-    private final ByteExtractor byte_;\n-    private final BooleanExtractor boolean_;\n-    private final FloatExtractor float_;\n-    private final DoubleExtractor double_;\n-    private final Extractor<String[]> stringArray;\n-    private final Extractor<boolean[]> booleanArray;\n-    private final Extractor<byte[]> byteArray;\n-    private final Extractor<short[]> shortArray;\n-    private final Extractor<int[]> intArray;\n-    private final Extractor<long[]> longArray;\n-    private final Extractor<float[]> floatArray;\n-    private final Extractor<double[]> doubleArray;\n-    private final PointExtractor point;\n-    private final DateExtractor date;\n-    private final TimeExtractor time;\n-    private final DateTimeExtractor dateTime;\n-    private final LocalTimeExtractor localTime;\n-    private final LocalDateTimeExtractor localDateTime;\n-    private final DurationExtractor duration;\n-\n-    public Extractors( char arrayDelimiter )\n+  private final Map<String, Extractor<?>> instances = new HashMap<>();\n+  private final Extractor<String> string;\n+  private final LongExtractor long_;\n+  private final IntExtractor int_;\n+  private final CharExtractor char_;\n+  private final ShortExtractor short_;\n+  private final ByteExtractor byte_;\n+  private final BooleanExtractor boolean_;\n+  private final FloatExtractor float_;\n+  private final DoubleExtractor double_;\n+  private final Extractor<String[]> stringArray;\n+  private final Extractor<boolean[]> booleanArray;\n+  private final Extractor<byte[]> byteArray;\n+  private final Extractor<short[]> shortArray;\n+  private final Extractor<int[]> intArray;\n+  private final Extractor<long[]> longArray;\n+  private final Extractor<float[]> floatArray;\n+  private final Extractor<double[]> doubleArray;\n+  private final PointExtractor point;\n+  private final DateExtractor date;\n+  private final TimeExtractor time;\n+  private final DateTimeExtractor dateTime;\n+  private final LocalTimeExtractor localTime;\n+  private final LocalDateTimeExtractor localDateTime;\n+  private final DurationExtractor duration;\n+\n+  public Extractors(char arrayDelimiter)\n+  {\n+    this(arrayDelimiter, Configuration.DEFAULT.emptyQuotedStringsAsNull(), Configuration.DEFAULT.trimStrings(), inUTC);\n+  }\n+\n+  public Extractors(char arrayDelimiter, boolean emptyStringsAsNull)\n+  {\n+    this(arrayDelimiter, emptyStringsAsNull, Configuration.DEFAULT.trimStrings(), inUTC);\n+  }\n+\n+  public Extractors(char arrayDelimiter, boolean emptyStringsAsNull, boolean trimStrings)\n+  {\n+    this(arrayDelimiter, emptyStringsAsNull, trimStrings, inUTC);\n+  }\n+\n+  /**\n+   * Why do we have a public constructor here and why isn't this class an enum?\n+   * It's because the array extractors can be configured with an array delimiter,\n+   * something that would be impossible otherwise. There's an equivalent {@link #valueOf(String)}\n+   * method to keep the feel of an enum.\n+   */\n+  public Extractors(char arrayDelimiter, boolean emptyStringsAsNull, boolean trimStrings, Supplier<ZoneId> defaultTimeZone)\n+  {\n+    try\n+    {\n+      for (Field field : getClass().getDeclaredFields())\n+      {\n+        if (isStatic(field.getModifiers()))\n+        {\n+          Object value = field.get(null);\n+          if (value instanceof Extractor)\n+          {\n+            instances.put(field.getName(), (Extractor<?>) value);\n+          }\n+        }\n+      }\n+\n+      add(string = new StringExtractor(emptyStringsAsNull));\n+      add(long_ = new LongExtractor());\n+      add(int_ = new IntExtractor());\n+      add(char_ = new CharExtractor());\n+      add(short_ = new ShortExtractor());\n+      add(byte_ = new ByteExtractor());\n+      add(boolean_ = new BooleanExtractor());\n+      add(float_ = new FloatExtractor());\n+      add(double_ = new DoubleExtractor());\n+      add(stringArray = new StringArrayExtractor(arrayDelimiter, trimStrings));\n+      add(booleanArray = new BooleanArrayExtractor(arrayDelimiter));\n+      add(byteArray = new ByteArrayExtractor(arrayDelimiter));\n+      add(shortArray = new ShortArrayExtractor(arrayDelimiter));\n+      add(intArray = new IntArrayExtractor(arrayDelimiter));\n+      add(longArray = new LongArrayExtractor(arrayDelimiter));\n+      add(floatArray = new FloatArrayExtractor(arrayDelimiter));\n+      add(doubleArray = new DoubleArrayExtractor(arrayDelimiter));\n+      add(point = new PointExtractor());\n+      add(date = new DateExtractor());\n+      add(time = new TimeExtractor(defaultTimeZone));\n+      add(dateTime = new DateTimeExtractor(defaultTimeZone));\n+      add(localTime = new LocalTimeExtractor());\n+      add(localDateTime = new LocalDateTimeExtractor());\n+      add(duration = new DurationExtractor());\n+    } catch (IllegalAccessException e)\n     {\n-        this( arrayDelimiter, Configuration.DEFAULT.emptyQuotedStringsAsNull(), Configuration.DEFAULT.trimStrings(), inUTC );\n+      throw new Error(\"Bug in reflection code gathering all extractors\");\n     }\n+  }\n \n-    public Extractors( char arrayDelimiter, boolean emptyStringsAsNull )\n+  public void add(Extractor<?> extractor)\n+  {\n+    instances.put(extractor.name().toUpperCase(), extractor);\n+  }\n+\n+  public Extractor<?> valueOf(String name)\n+  {\n+    Extractor<?> instance = instances.get(name.toUpperCase());\n+    if (instance == null)\n     {\n-        this( arrayDelimiter, emptyStringsAsNull, Configuration.DEFAULT.trimStrings(), inUTC );\n+      throw new IllegalArgumentException(\"'\" + name + \"'\");\n     }\n-\n-    public Extractors( char arrayDelimiter, boolean emptyStringsAsNull, boolean trimStrings )\n+    return instance;\n+  }\n+\n+  public Extractor<String> string()\n+  {\n+    return string;\n+  }\n+\n+  public LongExtractor long_()\n+  {\n+    return long_;\n+  }\n+\n+  public IntExtractor int_()\n+  {\n+    return int_;\n+  }\n+\n+  public CharExtractor char_()\n+  {\n+    return char_;\n+  }\n+\n+  public ShortExtractor short_()\n+  {\n+    return short_;\n+  }\n+\n+  public ByteExtractor byte_()\n+  {\n+    return byte_;\n+  }\n+\n+  public BooleanExtractor boolean_()\n+  {\n+    return boolean_;\n+  }\n+\n+  public FloatExtractor float_()\n+  {\n+    return float_;\n+  }\n+\n+  public DoubleExtractor double_()\n+  {\n+    return double_;\n+  }\n+\n+  public Extractor<String[]> stringArray()\n+  {\n+    return stringArray;\n+  }\n+\n+  public Extractor<boolean[]> booleanArray()\n+  {\n+    return booleanArray;\n+  }\n+\n+  public Extractor<byte[]> byteArray()\n+  {\n+    return byteArray;\n+  }\n+\n+  public Extractor<short[]> shortArray()\n+  {\n+    return shortArray;\n+  }\n+\n+  public Extractor<int[]> intArray()\n+  {\n+    return intArray;\n+  }\n+\n+  public Extractor<long[]> longArray()\n+  {\n+    return longArray;\n+  }\n+\n+  public Extractor<float[]> floatArray()\n+  {\n+    return floatArray;\n+  }\n+\n+  public Extractor<double[]> doubleArray()\n+  {\n+    return doubleArray;\n+  }\n+\n+  public PointExtractor point()\n+  {\n+    return point;\n+  }\n+\n+  public DateExtractor date()\n+  {\n+    return date;\n+  }\n+\n+  public TimeExtractor time()\n+  {\n+    return time;\n+  }\n+\n+  public DateTimeExtractor dateTime()\n+  {\n+    return dateTime;\n+  }\n+\n+  public LocalTimeExtractor localTime()\n+  {\n+    return localTime;\n+  }\n+\n+  public LocalDateTimeExtractor localDateTime()\n+  {\n+    return localDateTime;\n+  }\n+\n+  public DurationExtractor duration()\n+  {\n+    return duration;\n+  }\n+\n+  private abstract static class AbstractExtractor<T> implements Extractor<T>\n+  {\n+    private final String name;\n+\n+    AbstractExtractor(String name)\n     {\n-        this( arrayDelimiter, emptyStringsAsNull, trimStrings, inUTC );\n+      this.name = name;\n     }\n \n-    /**\n-     * Why do we have a public constructor here and why isn't this class an enum?\n-     * It's because the array extractors can be configured with an array delimiter,\n-     * something that would be impossible otherwise. There's an equivalent {@link #valueOf(String)}\n-     * method to keep the feel of an enum.\n-     */\n-    public Extractors( char arrayDelimiter, boolean emptyStringsAsNull, boolean trimStrings, Supplier<ZoneId> defaultTimeZone )\n+    @Override\n+    public String name()\n     {\n-        try\n-        {\n-            for ( Field field : getClass().getDeclaredFields() )\n-            {\n-                if ( isStatic( field.getModifiers() ) )\n-                {\n-                    Object value = field.get( null );\n-                    if ( value instanceof Extractor )\n-                    {\n-                        instances.put( field.getName(), (Extractor<?>) value );\n-                    }\n-                }\n-            }\n-\n-            add( string = new StringExtractor( emptyStringsAsNull ) );\n-            add( long_ = new LongExtractor() );\n-            add( int_ = new IntExtractor() );\n-            add( char_ = new CharExtractor() );\n-            add( short_ = new ShortExtractor() );\n-            add( byte_ = new ByteExtractor() );\n-            add( boolean_ = new BooleanExtractor() );\n-            add( float_ = new FloatExtractor() );\n-            add( double_ = new DoubleExtractor() );\n-            add( stringArray = new StringArrayExtractor( arrayDelimiter, trimStrings ) );\n-            add( booleanArray = new BooleanArrayExtractor( arrayDelimiter ) );\n-            add( byteArray = new ByteArrayExtractor( arrayDelimiter ) );\n-            add( shortArray = new ShortArrayExtractor( arrayDelimiter ) );\n-            add( intArray = new IntArrayExtractor( arrayDelimiter ) );\n-            add( longArray = new LongArrayExtractor( arrayDelimiter ) );\n-            add( floatArray = new FloatArrayExtractor( arrayDelimiter ) );\n-            add( doubleArray = new DoubleArrayExtractor( arrayDelimiter ) );\n-            add( point = new PointExtractor() );\n-            add( date = new DateExtractor() );\n-            add( time = new TimeExtractor( defaultTimeZone ) );\n-            add( dateTime = new DateTimeExtractor( defaultTimeZone ) );\n-            add( localTime = new LocalTimeExtractor() );\n-            add( localDateTime = new LocalDateTimeExtractor() );\n-            add( duration = new DurationExtractor() );\n-        }\n-        catch ( IllegalAccessException e )\n-        {\n-            throw new Error( \"Bug in reflection code gathering all extractors\" );\n-        }\n+      return name;\n     }\n \n-    public void add( Extractor<?> extractor )\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Extractor<T> clone()\n     {\n-        instances.put( extractor.name().toUpperCase(), extractor );\n+      try\n+      {\n+        return (Extractor<T>) super.clone();\n+      } catch (CloneNotSupportedException e)\n+      {\n+        throw new AssertionError(Extractor.class.getName() + \" implements \" + Cloneable.class.getSimpleName() +\n+            \", at least this implementation assumes that. This doesn't seem to be the case anymore\", e);\n+      }\n     }\n+  }\n \n-    public Extractor<?> valueOf( String name )\n+  private abstract static class AbstractSingleValueExtractor<T> extends AbstractExtractor<T>\n+  {\n+    AbstractSingleValueExtractor(String toString)\n     {\n-        Extractor<?> instance = instances.get( name.toUpperCase() );\n-        if ( instance == null )\n-        {\n-            throw new IllegalArgumentException( \"'\" + name + \"'\" );\n-        }\n-        return instance;\n+      super(toString);\n     }\n \n-    public Extractor<String> string()\n+    @Override\n+    public final boolean extract(char[] data, int offset, int length, boolean hadQuotes, CSVHeaderInformation optionalData)\n     {\n-        return string;\n+      if (nullValue(length, hadQuotes))\n+      {\n+        clear();\n+        return false;\n+      }\n+      return extract0(data, offset, length, optionalData);\n     }\n \n-    public LongExtractor long_()\n+    @Override\n+    public final boolean extract(char[] data, int offset, int length, boolean hadQuotes)\n     {\n-        return long_;\n+      return extract(data, offset, length, hadQuotes, null);\n     }\n \n-    public IntExtractor int_()\n+    protected boolean nullValue(int length, boolean hadQuotes)\n     {\n-        return int_;\n+      return length == 0;\n     }\n \n-    public CharExtractor char_()\n+    protected abstract void clear();\n+\n+    protected abstract boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData);\n+  }\n+\n+  private abstract static class AbstractSingleAnyValueExtractor extends AbstractSingleValueExtractor<AnyValue>\n+  {\n+    protected AnyValue value;\n+\n+    AbstractSingleAnyValueExtractor(String toString)\n     {\n-        return char_;\n+      super(toString);\n     }\n \n-    public ShortExtractor short_()\n+    @Override\n+    protected void clear()\n     {\n-        return short_;\n+      value = Values.NO_VALUE;\n     }\n \n-    public ByteExtractor byte_()\n+    @Override\n+    public AnyValue value()\n     {\n-        return byte_;\n+      return value;\n     }\n+  }\n+\n+  public static class StringExtractor extends AbstractSingleValueExtractor<String>\n+  {\n+    private String value;\n+    private final boolean emptyStringsAsNull;\n \n-    public BooleanExtractor boolean_()\n+    public StringExtractor(boolean emptyStringsAsNull)\n     {\n-        return boolean_;\n+      super(String.class.getSimpleName());\n+      this.emptyStringsAsNull = emptyStringsAsNull;\n     }\n \n-    public FloatExtractor float_()\n+    @Override\n+    protected void clear()\n     {\n-        return float_;\n+      value = null;\n     }\n \n-    public DoubleExtractor double_()\n+    @Override\n+    protected boolean nullValue(int length, boolean hadQuotes)\n     {\n-        return double_;\n+      return length == 0 && (!hadQuotes || emptyStringsAsNull);\n     }\n \n-    public Extractor<String[]> stringArray()\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        return stringArray;\n+      value = new String(data, offset, length);\n+      return true;\n     }\n \n-    public Extractor<boolean[]> booleanArray()\n+    @Override\n+    public String value()\n     {\n-        return booleanArray;\n+      return value;\n     }\n+  }\n+\n+  public static class LongExtractor extends AbstractSingleValueExtractor<Long>\n+  {\n+    private long value;\n \n-    public Extractor<byte[]> byteArray()\n+    LongExtractor()\n     {\n-        return byteArray;\n+      super(Long.TYPE.getSimpleName());\n     }\n \n-    public Extractor<short[]> shortArray()\n+    @Override\n+    protected void clear()\n     {\n-        return shortArray;\n+      value = 0;\n     }\n \n-    public Extractor<int[]> intArray()\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        return intArray;\n+      value = extractLong(data, offset, length);\n+      return true;\n     }\n \n-    public Extractor<long[]> longArray()\n+    @Override\n+    public Long value()\n     {\n-        return longArray;\n+      return value;\n     }\n \n-    public Extractor<float[]> floatArray()\n+    /**\n+     * Value accessor bypassing boxing.\n+     *\n+     * @return the number value in its primitive form.\n+     */\n+    public long longValue()\n     {\n-        return floatArray;\n+      return value;\n     }\n+  }\n+\n+  public static class IntExtractor extends AbstractSingleValueExtractor<Integer>\n+  {\n+    private int value;\n \n-    public Extractor<double[]> doubleArray()\n+    IntExtractor()\n     {\n-        return doubleArray;\n+      super(Integer.TYPE.toString());\n     }\n \n-    public PointExtractor point()\n+    @Override\n+    protected void clear()\n     {\n-        return point;\n+      value = 0;\n     }\n \n-    public DateExtractor date()\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        return date;\n+      value = safeCastLongToInt(extractLong(data, offset, length));\n+      return true;\n     }\n \n-    public TimeExtractor time()\n+    @Override\n+    public Integer value()\n     {\n-        return time;\n+      return value;\n     }\n \n-    public DateTimeExtractor dateTime()\n+    /**\n+     * Value accessor bypassing boxing.\n+     *\n+     * @return the number value in its primitive form.\n+     */\n+    public int intValue()\n     {\n-        return dateTime;\n+      return value;\n     }\n+  }\n+\n+  public static class ShortExtractor extends AbstractSingleValueExtractor<Short>\n+  {\n+    private short value;\n \n-    public LocalTimeExtractor localTime()\n+    ShortExtractor()\n     {\n-        return localTime;\n+      super(Short.TYPE.getSimpleName());\n     }\n \n-    public LocalDateTimeExtractor localDateTime()\n+    @Override\n+    protected void clear()\n     {\n-        return localDateTime;\n+      value = 0;\n     }\n \n-    public DurationExtractor duration()\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        return duration;\n+      value = safeCastLongToShort(extractLong(data, offset, length));\n+      return true;\n     }\n \n-    private abstract static class AbstractExtractor<T> implements Extractor<T>\n+    @Override\n+    public Short value()\n     {\n-        private final String name;\n-\n-        AbstractExtractor( String name )\n-        {\n-            this.name = name;\n-        }\n-\n-        @Override\n-        public String name()\n-        {\n-            return name;\n-        }\n-\n-        @Override\n-        @SuppressWarnings( \"unchecked\" )\n-        public Extractor<T> clone()\n-        {\n-            try\n-            {\n-                return (Extractor<T>) super.clone();\n-            }\n-            catch ( CloneNotSupportedException e )\n-            {\n-                throw new AssertionError( Extractor.class.getName() + \" implements \" + Cloneable.class.getSimpleName() +\n-                        \", at least this implementation assumes that. This doesn't seem to be the case anymore\", e );\n-            }\n-        }\n+      return value;\n     }\n \n-    private abstract static class AbstractSingleValueExtractor<T> extends AbstractExtractor<T>\n+    /**\n+     * Value accessor bypassing boxing.\n+     *\n+     * @return the number value in its primitive form.\n+     */\n+    public short shortValue()\n     {\n-        AbstractSingleValueExtractor( String toString )\n-        {\n-            super( toString );\n-        }\n-\n-        @Override\n-        public final boolean extract( char[] data, int offset, int length, boolean hadQuotes, CSVHeaderInformation optionalData )\n-        {\n-            if ( nullValue( length, hadQuotes ) )\n-            {\n-                clear();\n-                return false;\n-            }\n-            return extract0( data, offset, length, optionalData );\n-        }\n-\n-        @Override\n-        public final boolean extract( char[] data, int offset, int length, boolean hadQuotes )\n-        {\n-            return extract( data, offset, length, hadQuotes, null );\n-        }\n-\n-        protected boolean nullValue( int length, boolean hadQuotes )\n-        {\n-            return length == 0;\n-        }\n+      return value;\n+    }\n+  }\n \n-        protected abstract void clear();\n+  public static class ByteExtractor extends AbstractSingleValueExtractor<Byte>\n+  {\n+    private byte value;\n \n-        protected abstract boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData );\n+    ByteExtractor()\n+    {\n+      super(Byte.TYPE.getSimpleName());\n     }\n \n-    private abstract static class AbstractSingleAnyValueExtractor extends AbstractSingleValueExtractor<AnyValue>\n+    @Override\n+    protected void clear()\n     {\n-        protected AnyValue value;\n-\n-        AbstractSingleAnyValueExtractor( String toString )\n-        {\n-            super( toString );\n-        }\n-\n-        @Override\n-        protected void clear()\n-        {\n-            value = Values.NO_VALUE;\n-        }\n-\n-        @Override\n-        public AnyValue value()\n-        {\n-            return value;\n-        }\n+      value = 0;\n     }\n \n-    public static class StringExtractor extends AbstractSingleValueExtractor<String>\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        private String value;\n-        private final boolean emptyStringsAsNull;\n-\n-        public StringExtractor( boolean emptyStringsAsNull )\n-        {\n-            super( String.class.getSimpleName() );\n-            this.emptyStringsAsNull = emptyStringsAsNull;\n-        }\n-\n-        @Override\n-        protected void clear()\n-        {\n-            value = null;\n-        }\n-\n-        @Override\n-        protected boolean nullValue( int length, boolean hadQuotes )\n-        {\n-            return length == 0 && (!hadQuotes || emptyStringsAsNull);\n-        }\n-\n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = new String( data, offset, length );\n-            return true;\n-        }\n-\n-        @Override\n-        public String value()\n-        {\n-            return value;\n-        }\n+      value = safeCastLongToByte(extractLong(data, offset, length));\n+      return true;\n     }\n \n-    public static class LongExtractor extends AbstractSingleValueExtractor<Long>\n+    @Override\n+    public Byte value()\n     {\n-        private long value;\n-\n-        LongExtractor()\n-        {\n-            super( Long.TYPE.getSimpleName() );\n-        }\n-\n-        @Override\n-        protected void clear()\n-        {\n-            value = 0;\n-        }\n-\n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = extractLong( data, offset, length );\n-            return true;\n-        }\n-\n-        @Override\n-        public Long value()\n-        {\n-            return value;\n-        }\n-\n-        /**\n-         * Value accessor bypassing boxing.\n-         * @return the number value in its primitive form.\n-         */\n-        public long longValue()\n-        {\n-            return value;\n-        }\n+      return value;\n     }\n \n-    public static class IntExtractor extends AbstractSingleValueExtractor<Integer>\n+    /**\n+     * Value accessor bypassing boxing.\n+     *\n+     * @return the number value in its primitive form.\n+     */\n+    public int byteValue()\n     {\n-        private int value;\n+      return value;\n+    }\n+  }\n \n-        IntExtractor()\n-        {\n-            super( Integer.TYPE.toString() );\n-        }\n+  private static final char[] BOOLEAN_MATCH;\n \n-        @Override\n-        protected void clear()\n-        {\n-            value = 0;\n-        }\n+  static\n+  {\n+    BOOLEAN_MATCH = new char[Boolean.TRUE.toString().length()];\n+    Boolean.TRUE.toString().getChars(0, BOOLEAN_MATCH.length, BOOLEAN_MATCH, 0);\n+  }\n \n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = safeCastLongToInt( extractLong( data, offset, length ) );\n-            return true;\n-        }\n+  public static class BooleanExtractor extends AbstractSingleValueExtractor<Boolean>\n+  {\n+    private boolean value;\n \n-        @Override\n-        public Integer value()\n-        {\n-            return value;\n-        }\n-\n-        /**\n-         * Value accessor bypassing boxing.\n-         * @return the number value in its primitive form.\n-         */\n-        public int intValue()\n-        {\n-            return value;\n-        }\n+    BooleanExtractor()\n+    {\n+      super(Boolean.TYPE.getSimpleName());\n     }\n \n-    public static class ShortExtractor extends AbstractSingleValueExtractor<Short>\n+    @Override\n+    protected void clear()\n     {\n-        private short value;\n-\n-        ShortExtractor()\n-        {\n-            super( Short.TYPE.getSimpleName() );\n-        }\n-\n-        @Override\n-        protected void clear()\n-        {\n-            value = 0;\n-        }\n-\n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = safeCastLongToShort( extractLong( data, offset, length ) );\n-            return true;\n-        }\n-\n-        @Override\n-        public Short value()\n-        {\n-            return value;\n-        }\n-\n-        /**\n-         * Value accessor bypassing boxing.\n-         * @return the number value in its primitive form.\n-         */\n-        public short shortValue()\n-        {\n-            return value;\n-        }\n+      value = false;\n     }\n \n-    public static class ByteExtractor extends AbstractSingleValueExtractor<Byte>\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        private byte value;\n-\n-        ByteExtractor()\n-        {\n-            super( Byte.TYPE.getSimpleName() );\n-        }\n-\n-        @Override\n-        protected void clear()\n-        {\n-            value = 0;\n-        }\n-\n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = safeCastLongToByte( extractLong( data, offset, length ) );\n-            return true;\n-        }\n-\n-        @Override\n-        public Byte value()\n-        {\n-            return value;\n-        }\n-\n-        /**\n-         * Value accessor bypassing boxing.\n-         * @return the number value in its primitive form.\n-         */\n-        public int byteValue()\n-        {\n-            return value;\n-        }\n+      value = extractBoolean(data, offset, length);\n+      return true;\n     }\n \n-    private static final char[] BOOLEAN_MATCH;\n-    static\n+    @Override\n+    public Boolean value()\n     {\n-        BOOLEAN_MATCH = new char[Boolean.TRUE.toString().length()];\n-        Boolean.TRUE.toString().getChars( 0, BOOLEAN_MATCH.length, BOOLEAN_MATCH, 0 );\n+      return value;\n     }\n \n-    public static class BooleanExtractor extends AbstractSingleValueExtractor<Boolean>\n+    public boolean booleanValue()\n     {\n-        private boolean value;\n-\n-        BooleanExtractor()\n-        {\n-            super( Boolean.TYPE.getSimpleName() );\n-        }\n-\n-        @Override\n-        protected void clear()\n-        {\n-            value = false;\n-        }\n+      return value;\n+    }\n+  }\n \n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = extractBoolean( data, offset, length );\n-            return true;\n-        }\n+  public static class CharExtractor extends AbstractSingleValueExtractor<Character>\n+  {\n+    private char value;\n \n-        @Override\n-        public Boolean value()\n-        {\n-            return value;\n-        }\n-\n-        public boolean booleanValue()\n-        {\n-            return value;\n-        }\n+    CharExtractor()\n+    {\n+      super(Character.TYPE.getSimpleName());\n     }\n \n-    public static class CharExtractor extends AbstractSingleValueExtractor<Character>\n+    @Override\n+    protected void clear()\n     {\n-        private char value;\n-\n-        CharExtractor()\n-        {\n-            super( Character.TYPE.getSimpleName() );\n-        }\n-\n-        @Override\n-        protected void clear()\n-        {\n-            value = 0;\n-        }\n-\n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            if ( length > 1 )\n-            {\n-                throw new IllegalStateException( \"Was told to extract a character, but length:\" + length );\n-            }\n-            value = data[offset];\n-            return true;\n-        }\n+      value = 0;\n+    }\n \n-        @Override\n-        public Character value()\n-        {\n-            return value;\n-        }\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n+    {\n+      if (length > 1)\n+      {\n+        throw new IllegalStateException(\"Was told to extract a character, but length:\" + length);\n+      }\n+      value = data[offset];\n+      return true;\n+    }\n \n-        public char charValue()\n-        {\n-            return value;\n-        }\n+    @Override\n+    public Character value()\n+    {\n+      return value;\n     }\n \n-    public static class FloatExtractor extends AbstractSingleValueExtractor<Float>\n+    public char charValue()\n     {\n-        private float value;\n+      return value;\n+    }\n+  }\n \n-        FloatExtractor()\n-        {\n-            super( Float.TYPE.getSimpleName() );\n-        }\n+  public static class FloatExtractor extends AbstractSingleValueExtractor<Float>\n+  {\n+    private float value;\n \n-        @Override\n-        protected void clear()\n-        {\n-            value = 0;\n-        }\n+    FloatExtractor()\n+    {\n+      super(Float.TYPE.getSimpleName());\n+    }\n \n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            try\n-            {\n-                // TODO Figure out a way to do this conversion without round tripping to String\n-                // parseFloat automatically handles leading/trailing whitespace so no need for us to do it\n-                value = Float.parseFloat( String.valueOf( data, offset, length ) );\n-            }\n-            catch ( NumberFormatException ignored )\n-            {\n-                throw new NumberFormatException( \"Not a number: \\\"\" + String.valueOf( data, offset, length ) + \"\\\"\" );\n-            }\n-            return true;\n-        }\n+    @Override\n+    protected void clear()\n+    {\n+      value = 0;\n+    }\n \n-        @Override\n-        public Float value()\n-        {\n-            return value;\n-        }\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n+    {\n+      try\n+      {\n+        // TODO Figure out a way to do this conversion without round tripping to String\n+        // parseFloat automatically handles leading/trailing whitespace so no need for us to do it\n+        value = Float.parseFloat(String.valueOf(data, offset, length));\n+      } catch (NumberFormatException ignored)\n+      {\n+        throw new NumberFormatException(\"Not a number: \\\"\" + String.valueOf(data, offset, length) + \"\\\"\");\n+      }\n+      return true;\n+    }\n \n-        public float floatValue()\n-        {\n-            return value;\n-        }\n+    @Override\n+    public Float value()\n+    {\n+      return value;\n     }\n \n-    public static class DoubleExtractor extends AbstractSingleValueExtractor<Double>\n+    public float floatValue()\n     {\n-        private double value;\n+      return value;\n+    }\n+  }\n \n-        DoubleExtractor()\n-        {\n-            super( Double.TYPE.getSimpleName() );\n-        }\n+  public static class DoubleExtractor extends AbstractSingleValueExtractor<Double>\n+  {\n+    private double value;\n \n-        @Override\n-        protected void clear()\n-        {\n-            value = 0;\n-        }\n+    DoubleExtractor()\n+    {\n+      super(Double.TYPE.getSimpleName());\n+    }\n \n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            try\n-            {\n-                // TODO Figure out a way to do this conversion without round tripping to String\n-                // parseDouble automatically handles leading/trailing whitespace so no need for us to do it\n-                value = Double.parseDouble( String.valueOf( data, offset, length ) );\n-            }\n-            catch ( NumberFormatException ignored )\n-            {\n-                throw new NumberFormatException( \"Not a number: \\\"\" + String.valueOf( data, offset, length ) + \"\\\"\" );\n-            }\n-            return true;\n-        }\n+    @Override\n+    protected void clear()\n+    {\n+      value = 0;\n+    }\n \n-        @Override\n-        public Double value()\n-        {\n-            return value;\n-        }\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n+    {\n+      try\n+      {\n+        // TODO Figure out a way to do this conversion without round tripping to String\n+        // parseDouble automatically handles leading/trailing whitespace so no need for us to do it\n+        value = Double.parseDouble(String.valueOf(data, offset, length));\n+      } catch (NumberFormatException ignored)\n+      {\n+        throw new NumberFormatException(\"Not a number: \\\"\" + String.valueOf(data, offset, length) + \"\\\"\");\n+      }\n+      return true;\n+    }\n \n-        public double doubleValue()\n-        {\n-            return value;\n-        }\n+    @Override\n+    public Double value()\n+    {\n+      return value;\n     }\n \n-    private abstract static class ArrayExtractor<T> extends AbstractExtractor<T>\n+    public double doubleValue()\n     {\n-        protected final char arrayDelimiter;\n-        protected T value;\n+      return value;\n+    }\n+  }\n \n-        ArrayExtractor( char arrayDelimiter, Class<?> componentType )\n-        {\n-            super( componentType.getSimpleName() + \"[]\" );\n-            this.arrayDelimiter = arrayDelimiter;\n-        }\n+  private abstract static class ArrayExtractor<T> extends AbstractExtractor<T>\n+  {\n+    protected final char arrayDelimiter;\n+    protected T value;\n \n-        @Override\n-        public T value()\n-        {\n-            return value;\n-        }\n+    ArrayExtractor(char arrayDelimiter, Class<?> componentType)\n+    {\n+      super(componentType.getSimpleName() + \"[]\");\n+      this.arrayDelimiter = arrayDelimiter;\n+    }\n \n-        @Override\n-        public boolean extract( char[] data, int offset, int length, boolean hadQuotes, CSVHeaderInformation optionalData )\n-        {\n-            extract0( data, offset, length, optionalData );\n-            return true;\n-        }\n+    @Override\n+    public T value()\n+    {\n+      return value;\n+    }\n \n-        @Override\n-        public boolean extract( char[] data, int offset, int length, boolean hadQuotes )\n-        {\n-            return extract( data, offset, length, hadQuotes, null );\n-        }\n+    @Override\n+    public boolean extract(char[] data, int offset, int length, boolean hadQuotes, CSVHeaderInformation optionalData)\n+    {\n+      extract0(data, offset, length, optionalData);\n+      return true;\n+    }\n \n-        protected abstract void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData );\n+    @Override\n+    public boolean extract(char[] data, int offset, int length, boolean hadQuotes)\n+    {\n+      return extract(data, offset, length, hadQuotes, null);\n+    }\n \n-        protected int charsToNextDelimiter( char[] data, int offset, int length )\n-        {\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                if ( data[offset + i] == arrayDelimiter )\n-                {\n-                    return i;\n-                }\n-            }\n-            return length;\n-        }\n+    protected abstract void extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData);\n \n-        protected int numberOfValues( char[] data, int offset, int length )\n+    protected int charsToNextDelimiter(char[] data, int offset, int length)\n+    {\n+      for (int i = 0; i < length; i++)\n+      {\n+        if (data[offset + i] == arrayDelimiter)\n         {\n-            int count = length > 0 ? 1 : 0;\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                if ( data[offset + i] == arrayDelimiter )\n-                {\n-                    count++;\n-                }\n-            }\n-            return count;\n+          return i;\n         }\n+      }\n+      return length;\n+    }\n \n-        @Override\n-        public int hashCode()\n+    protected int numberOfValues(char[] data, int offset, int length)\n+    {\n+      int count = length > 0 ? 1 : 0;\n+      for (int i = 0; i < length; i++)\n+      {\n+        if (data[offset + i] == arrayDelimiter)\n         {\n-            return getClass().hashCode();\n+          count++;\n         }\n+      }\n+      return count;\n+    }\n \n-        @Override\n-        public boolean equals( Object obj )\n-        {\n-            return obj != null && getClass().equals( obj.getClass() );\n-        }\n+    @Override\n+    public int hashCode()\n+    {\n+      return getClass().hashCode();\n     }\n \n-    private static class StringArrayExtractor extends ArrayExtractor<String[]>\n+    @Override\n+    public boolean equals(Object obj)\n     {\n-        private static final String[] EMPTY = new String[0];\n-        private final boolean trimStrings;\n+      return obj != null && getClass().equals(obj.getClass());\n+    }\n+  }\n \n-        StringArrayExtractor( char arrayDelimiter, boolean trimStrings )\n-        {\n-            super( arrayDelimiter, String.class );\n-            this.trimStrings = trimStrings;\n-        }\n+  private static class StringArrayExtractor extends ArrayExtractor<String[]>\n+  {\n+    private static final String[] EMPTY = new String[0];\n+    private final boolean trimStrings;\n \n-        @Override\n-        protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new String[numberOfValues] : EMPTY;\n-            for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n-            {\n-                int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n-                value[arrayIndex] = new String( data, offset + charIndex, numberOfChars );\n-                if ( trimStrings )\n-                {\n-                    value[arrayIndex] = value[arrayIndex].trim();\n-                }\n-                charIndex += numberOfChars;\n-            }\n-        }\n+    StringArrayExtractor(char arrayDelimiter, boolean trimStrings)\n+    {\n+      super(arrayDelimiter, String.class);\n+      this.trimStrings = trimStrings;\n     }\n \n-    private static class ByteArrayExtractor extends ArrayExtractor<byte[]>\n+    @Override\n+    protected void extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        private static final byte[] EMPTY = new byte[0];\n+      int numberOfValues = numberOfValues(data, offset, length);\n+      value = numberOfValues > 0 ? new String[numberOfValues] : EMPTY;\n+      for (int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++)\n+      {\n+        int numberOfChars = charsToNextDelimiter(data, offset + charIndex, length - charIndex);\n+        value[arrayIndex] = new String(data, offset + charIndex, numberOfChars);\n+        if (trimStrings)\n+        {\n+          value[arrayIndex] = value[arrayIndex].trim();\n+        }\n+        charIndex += numberOfChars;\n+      }\n+    }\n+  }\n \n-        ByteArrayExtractor( char arrayDelimiter )\n-        {\n-            super( arrayDelimiter, Byte.TYPE );\n-        }\n+  private static class ByteArrayExtractor extends ArrayExtractor<byte[]>\n+  {\n+    private static final byte[] EMPTY = new byte[0];\n \n-        @Override\n-        protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new byte[numberOfValues] : EMPTY;\n-            for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n-            {\n-                int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n-                value[arrayIndex] = safeCastLongToByte( extractLong( data, offset + charIndex, numberOfChars ) );\n-                charIndex += numberOfChars;\n-            }\n-        }\n+    ByteArrayExtractor(char arrayDelimiter)\n+    {\n+      super(arrayDelimiter, Byte.TYPE);\n     }\n \n-    private static class ShortArrayExtractor extends ArrayExtractor<short[]>\n+    @Override\n+    protected void extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        private static final short[] EMPTY = new short[0];\n+      int numberOfValues = numberOfValues(data, offset, length);\n+      value = numberOfValues > 0 ? new byte[numberOfValues] : EMPTY;\n+      for (int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++)\n+      {\n+        int numberOfChars = charsToNextDelimiter(data, offset + charIndex, length - charIndex);\n+        value[arrayIndex] = safeCastLongToByte(extractLong(data, offset + charIndex, numberOfChars));\n+        charIndex += numberOfChars;\n+      }\n+    }\n+  }\n \n-        ShortArrayExtractor( char arrayDelimiter )\n-        {\n-            super( arrayDelimiter, Short.TYPE );\n-        }\n+  private static class ShortArrayExtractor extends ArrayExtractor<short[]>\n+  {\n+    private static final short[] EMPTY = new short[0];\n \n-        @Override\n-        protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new short[numberOfValues] : EMPTY;\n-            for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n-            {\n-                int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n-                value[arrayIndex] = safeCastLongToShort( extractLong( data, offset + charIndex, numberOfChars ) );\n-                charIndex += numberOfChars;\n-            }\n-        }\n+    ShortArrayExtractor(char arrayDelimiter)\n+    {\n+      super(arrayDelimiter, Short.TYPE);\n     }\n \n-    private static class IntArrayExtractor extends ArrayExtractor<int[]>\n+    @Override\n+    protected void extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        private static final int[] EMPTY = new int[0];\n+      int numberOfValues = numberOfValues(data, offset, length);\n+      value = numberOfValues > 0 ? new short[numberOfValues] : EMPTY;\n+      for (int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++)\n+      {\n+        int numberOfChars = charsToNextDelimiter(data, offset + charIndex, length - charIndex);\n+        value[arrayIndex] = safeCastLongToShort(extractLong(data, offset + charIndex, numberOfChars));\n+        charIndex += numberOfChars;\n+      }\n+    }\n+  }\n \n-        IntArrayExtractor( char arrayDelimiter )\n-        {\n-            super( arrayDelimiter, Integer.TYPE );\n-        }\n+  private static class IntArrayExtractor extends ArrayExtractor<int[]>\n+  {\n+    private static final int[] EMPTY = new int[0];\n \n-        @Override\n-        protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new int[numberOfValues] : EMPTY;\n-            for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n-            {\n-                int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n-                value[arrayIndex] = safeCastLongToInt( extractLong( data, offset + charIndex, numberOfChars ) );\n-                charIndex += numberOfChars;\n-            }\n-        }\n+    IntArrayExtractor(char arrayDelimiter)\n+    {\n+      super(arrayDelimiter, Integer.TYPE);\n     }\n \n-    private static class LongArrayExtractor extends ArrayExtractor<long[]>\n+    @Override\n+    protected void extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        LongArrayExtractor( char arrayDelimiter )\n-        {\n-            super( arrayDelimiter, Long.TYPE );\n-        }\n+      int numberOfValues = numberOfValues(data, offset, length);\n+      value = numberOfValues > 0 ? new int[numberOfValues] : EMPTY;\n+      for (int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++)\n+      {\n+        int numberOfChars = charsToNextDelimiter(data, offset + charIndex, length - charIndex);\n+        value[arrayIndex] = safeCastLongToInt(extractLong(data, offset + charIndex, numberOfChars));\n+        charIndex += numberOfChars;\n+      }\n+    }\n+  }\n \n-        @Override\n-        protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new long[numberOfValues] : EMPTY_LONG_ARRAY;\n-            for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n-            {\n-                int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n-                value[arrayIndex] = extractLong( data, offset + charIndex, numberOfChars );\n-                charIndex += numberOfChars;\n-            }\n-        }\n+  private static class LongArrayExtractor extends ArrayExtractor<long[]>\n+  {\n+    LongArrayExtractor(char arrayDelimiter)\n+    {\n+      super(arrayDelimiter, Long.TYPE);\n     }\n \n-    private static class FloatArrayExtractor extends ArrayExtractor<float[]>\n+    @Override\n+    protected void extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        private static final float[] EMPTY = new float[0];\n+      int numberOfValues = numberOfValues(data, offset, length);\n+      value = numberOfValues > 0 ? new long[numberOfValues] : EMPTY_LONG_ARRAY;\n+      for (int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++)\n+      {\n+        int numberOfChars = charsToNextDelimiter(data, offset + charIndex, length - charIndex);\n+        value[arrayIndex] = extractLong(data, offset + charIndex, numberOfChars);\n+        charIndex += numberOfChars;\n+      }\n+    }\n+  }\n \n-        FloatArrayExtractor( char arrayDelimiter )\n-        {\n-            super( arrayDelimiter, Float.TYPE );\n-        }\n+  private static class FloatArrayExtractor extends ArrayExtractor<float[]>\n+  {\n+    private static final float[] EMPTY = new float[0];\n \n-        @Override\n-        protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new float[numberOfValues] : EMPTY;\n-            for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n-            {\n-                int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n-                // TODO Figure out a way to do this conversion without round tripping to String\n-                // parseFloat automatically handles leading/trailing whitespace so no need for us to do it\n-                value[arrayIndex] = Float.parseFloat( String.valueOf( data, offset + charIndex, numberOfChars ) );\n-                charIndex += numberOfChars;\n-            }\n-        }\n+    FloatArrayExtractor(char arrayDelimiter)\n+    {\n+      super(arrayDelimiter, Float.TYPE);\n     }\n \n-    private static class DoubleArrayExtractor extends ArrayExtractor<double[]>\n+    @Override\n+    protected void extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        private static final double[] EMPTY = new double[0];\n+      int numberOfValues = numberOfValues(data, offset, length);\n+      value = numberOfValues > 0 ? new float[numberOfValues] : EMPTY;\n+      for (int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++)\n+      {\n+        int numberOfChars = charsToNextDelimiter(data, offset + charIndex, length - charIndex);\n+        // TODO Figure out a way to do this conversion without round tripping to String\n+        // parseFloat automatically handles leading/trailing whitespace so no need for us to do it\n+        value[arrayIndex] = Float.parseFloat(String.valueOf(data, offset + charIndex, numberOfChars));\n+        charIndex += numberOfChars;\n+      }\n+    }\n+  }\n \n-        DoubleArrayExtractor( char arrayDelimiter )\n-        {\n-            super( arrayDelimiter, Double.TYPE );\n-        }\n+  private static class DoubleArrayExtractor extends ArrayExtractor<double[]>\n+  {\n+    private static final double[] EMPTY = new double[0];\n \n-        @Override\n-        protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new double[numberOfValues] : EMPTY;\n-            for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n-            {\n-                int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n-                // TODO Figure out a way to do this conversion without round tripping to String\n-                // parseDouble automatically handles leading/trailing whitespace so no need for us to do it\n-                value[arrayIndex] = Double.parseDouble( String.valueOf( data, offset + charIndex, numberOfChars ) );\n-                charIndex += numberOfChars;\n-            }\n-        }\n+    DoubleArrayExtractor(char arrayDelimiter)\n+    {\n+      super(arrayDelimiter, Double.TYPE);\n     }\n \n-    private static class BooleanArrayExtractor extends ArrayExtractor<boolean[]>\n+    @Override\n+    protected void extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        private static final boolean[] EMPTY = new boolean[0];\n+      int numberOfValues = numberOfValues(data, offset, length);\n+      value = numberOfValues > 0 ? new double[numberOfValues] : EMPTY;\n+      for (int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++)\n+      {\n+        int numberOfChars = charsToNextDelimiter(data, offset + charIndex, length - charIndex);\n+        // TODO Figure out a way to do this conversion without round tripping to String\n+        // parseDouble automatically handles leading/trailing whitespace so no need for us to do it\n+        value[arrayIndex] = Double.parseDouble(String.valueOf(data, offset + charIndex, numberOfChars));\n+        charIndex += numberOfChars;\n+      }\n+    }\n+  }\n \n-        BooleanArrayExtractor( char arrayDelimiter )\n-        {\n-            super( arrayDelimiter, Boolean.TYPE );\n-        }\n+  private static class BooleanArrayExtractor extends ArrayExtractor<boolean[]>\n+  {\n+    private static final boolean[] EMPTY = new boolean[0];\n \n-        @Override\n-        protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new boolean[numberOfValues] : EMPTY;\n-            for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n-            {\n-                int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n-                value[arrayIndex] = extractBoolean( data, offset + charIndex, numberOfChars );\n-                charIndex += numberOfChars;\n-            }\n-        }\n+    BooleanArrayExtractor(char arrayDelimiter)\n+    {\n+      super(arrayDelimiter, Boolean.TYPE);\n     }\n \n-    public static class PointExtractor extends AbstractSingleAnyValueExtractor\n+    @Override\n+    protected void extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        PointExtractor()\n-        {\n-            super( NAME );\n-        }\n-\n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = PointValue.parse( CharBuffer.wrap( data, offset, length ), optionalData );\n-            return true;\n-        }\n-\n-        @Override\n-        public AnyValue value()\n-        {\n-            return value;\n-        }\n+      int numberOfValues = numberOfValues(data, offset, length);\n+      value = numberOfValues > 0 ? new boolean[numberOfValues] : EMPTY;\n+      for (int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++)\n+      {\n+        int numberOfChars = charsToNextDelimiter(data, offset + charIndex, length - charIndex);\n+        value[arrayIndex] = extractBoolean(data, offset + charIndex, numberOfChars);\n+        charIndex += numberOfChars;\n+      }\n+    }\n+  }\n \n-        public static final String NAME = \"Point\";\n+  public static class PointExtractor extends AbstractSingleAnyValueExtractor\n+  {\n+    PointExtractor()\n+    {\n+      super(NAME);\n     }\n \n-    public static class DateExtractor extends AbstractSingleAnyValueExtractor\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        DateExtractor()\n-        {\n-            super( NAME );\n-        }\n+      value = PointValue.parse(CharBuffer.wrap(data, offset, length), optionalData);\n+      return true;\n+    }\n \n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = DateValue.parse( CharBuffer.wrap( data, offset, length ) );\n-            return true;\n-        }\n+    @Override\n+    public AnyValue value()\n+    {\n+      return value;\n+    }\n \n-        @Override\n-        public AnyValue value()\n-        {\n-            return value;\n-        }\n+    public static final String NAME = \"Point\";\n+  }\n \n-        public static final String NAME = \"Date\";\n+  public static class DateExtractor extends AbstractSingleAnyValueExtractor\n+  {\n+    DateExtractor()\n+    {\n+      super(NAME);\n     }\n \n-    public static class TimeExtractor extends AbstractSingleAnyValueExtractor\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        private Supplier<ZoneId> defaultTimeZone;\n+      value = DateValue.parse(CharBuffer.wrap(data, offset, length));\n+      return true;\n+    }\n \n-        TimeExtractor( Supplier<ZoneId> defaultTimeZone )\n-        {\n-            super( NAME );\n-            this.defaultTimeZone = defaultTimeZone;\n-        }\n+    @Override\n+    public AnyValue value()\n+    {\n+      return value;\n+    }\n \n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = TimeValue.parse( CharBuffer.wrap( data, offset, length ), defaultTimeZone, optionalData );\n-            return true;\n-        }\n+    public static final String NAME = \"Date\";\n+  }\n \n-        @Override\n-        public AnyValue value()\n-        {\n-            return value;\n-        }\n+  public static class TimeExtractor extends AbstractSingleAnyValueExtractor\n+  {\n+    private Supplier<ZoneId> defaultTimeZone;\n \n-        public static final String NAME = \"Time\";\n+    TimeExtractor(Supplier<ZoneId> defaultTimeZone)\n+    {\n+      super(NAME);\n+      this.defaultTimeZone = defaultTimeZone;\n     }\n \n-    public static class DateTimeExtractor extends AbstractSingleAnyValueExtractor\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        private Supplier<ZoneId> defaultTimeZone;\n+      value = TimeValue.parse(CharBuffer.wrap(data, offset, length), defaultTimeZone, optionalData);\n+      return true;\n+    }\n \n-        DateTimeExtractor( Supplier<ZoneId> defaultTimeZone )\n-        {\n-            super( NAME );\n-            this.defaultTimeZone = defaultTimeZone;\n-        }\n+    @Override\n+    public AnyValue value()\n+    {\n+      return value;\n+    }\n \n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = DateTimeValue.parse( CharBuffer.wrap( data, offset, length ), defaultTimeZone, optionalData );\n-            return true;\n-        }\n+    public static final String NAME = \"Time\";\n+  }\n \n-        @Override\n-        public AnyValue value()\n-        {\n-            return value;\n-        }\n+  public static class DateTimeExtractor extends AbstractSingleAnyValueExtractor\n+  {\n+    private Supplier<ZoneId> defaultTimeZone;\n \n-        public static final String NAME = \"DateTime\";\n+    DateTimeExtractor(Supplier<ZoneId> defaultTimeZone)\n+    {\n+      super(NAME);\n+      this.defaultTimeZone = defaultTimeZone;\n     }\n \n-    public static class LocalTimeExtractor extends AbstractSingleAnyValueExtractor\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        LocalTimeExtractor()\n-        {\n-            super( NAME );\n-        }\n+      value = DateTimeValue.parse(CharBuffer.wrap(data, offset, length), defaultTimeZone, optionalData);\n+      return true;\n+    }\n \n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = LocalTimeValue.parse( CharBuffer.wrap( data, offset, length ) );\n-            return true;\n-        }\n+    @Override\n+    public AnyValue value()\n+    {\n+      return value;\n+    }\n \n-        @Override\n-        public AnyValue value()\n-        {\n-            return value;\n-        }\n+    public static final String NAME = \"DateTime\";\n+  }\n \n-        public static final String NAME = \"LocalTime\";\n+  public static class LocalTimeExtractor extends AbstractSingleAnyValueExtractor\n+  {\n+    LocalTimeExtractor()\n+    {\n+      super(NAME);\n     }\n \n-    public static class LocalDateTimeExtractor extends AbstractSingleAnyValueExtractor\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        LocalDateTimeExtractor()\n-        {\n-            super( NAME );\n-        }\n+      value = LocalTimeValue.parse(CharBuffer.wrap(data, offset, length));\n+      return true;\n+    }\n \n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = LocalDateTimeValue.parse( CharBuffer.wrap( data, offset, length ) );\n-            return true;\n-        }\n+    @Override\n+    public AnyValue value()\n+    {\n+      return value;\n+    }\n \n-        @Override\n-        public AnyValue value()\n-        {\n-            return value;\n-        }\n+    public static final String NAME = \"LocalTime\";\n+  }\n \n-        public static final String NAME = \"LocalDateTime\";\n+  public static class LocalDateTimeExtractor extends AbstractSingleAnyValueExtractor\n+  {\n+    LocalDateTimeExtractor()\n+    {\n+      super(NAME);\n     }\n \n-    public static class DurationExtractor extends AbstractSingleAnyValueExtractor\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        DurationExtractor()\n-        {\n-            super( NAME );\n-        }\n+      value = LocalDateTimeValue.parse(CharBuffer.wrap(data, offset, length));\n+      return true;\n+    }\n \n-        @Override\n-        protected boolean extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n-        {\n-            value = DurationValue.parse( CharBuffer.wrap( data, offset, length ) );\n-            return true;\n-        }\n+    @Override\n+    public AnyValue value()\n+    {\n+      return value;\n+    }\n \n-        @Override\n-        public AnyValue value()\n-        {\n-            return value;\n-        }\n+    public static final String NAME = \"LocalDateTime\";\n+  }\n \n-        public static final String NAME = \"Duration\";\n+  public static class DurationExtractor extends AbstractSingleAnyValueExtractor\n+  {\n+    DurationExtractor()\n+    {\n+      super(NAME);\n     }\n \n-    private static final Supplier<ZoneId> inUTC = () -> UTC;\n-\n-    private static long extractLong( char[] data, int originalOffset, int fullLength )\n+    @Override\n+    protected boolean extract0(char[] data, int offset, int length, CSVHeaderInformation optionalData)\n     {\n-        long result = 0;\n-        boolean negate = false;\n-        int offset = originalOffset;\n-        int length = fullLength;\n+      value = DurationValue.parse(CharBuffer.wrap(data, offset, length));\n+      return true;\n+    }\n \n-        // Leading whitespace can be ignored\n-        while ( length > 0 && isWhitespace( data[offset] ) )\n-        {\n-            offset++;\n-            length--;\n-        }\n-        // Trailing whitespace can be ignored\n-        while ( length > 0 && isWhitespace( data[offset + length - 1] ) )\n-        {\n-            length--;\n-        }\n+    @Override\n+    public AnyValue value()\n+    {\n+      return value;\n+    }\n \n-        if ( length > 0 && data[offset] == '-' )\n-        {\n-            negate = true;\n-            offset++;\n-            length--;\n-        }\n+    public static final String NAME = \"Duration\";\n+  }\n \n-        if ( length < 1 )\n-        {\n-            throw new NumberFormatException(\n-                    \"Not an integer: \\\"\" + String.valueOf( data, originalOffset, fullLength ) + \"\\\"\" );\n-        }\n+  private static final Supplier<ZoneId> inUTC = () -> UTC;\n \n-        try\n-        {\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result = result * 10 + digit( data[offset + i] );\n-            }\n-        }\n-        catch ( NumberFormatException ignored )\n-        {\n-            throw new NumberFormatException(\n-                    \"Not an integer: \\\"\" + String.valueOf( data, originalOffset, fullLength ) + \"\\\"\" );\n-        }\n+  private static long extractLong(char[] data, int originalOffset, int fullLength)\n+  {\n+    long result = 0;\n+    boolean negate = false;\n+    int offset = originalOffset;\n+    int length = fullLength;\n \n-        return negate ? -result : result;\n+    // Leading whitespace can be ignored\n+    while (length > 0 && isWhitespace(data[offset]))\n+    {\n+      offset++;\n+      length--;\n+    }\n+    // Trailing whitespace can be ignored\n+    while (length > 0 && isWhitespace(data[offset + length - 1]))\n+    {\n+      length--;\n     }\n \n-    private static int digit( char ch )\n+    if (length > 0 && data[offset] == '-')\n     {\n-        int digit = ch - '0';\n-        if ( (digit < 0) || (digit > 9) )\n-        {\n-            throw new NumberFormatException();\n-        }\n-        return digit;\n+      negate = true;\n+      offset++;\n+      length--;\n     }\n \n-    private static final char[] BOOLEAN_TRUE_CHARACTERS;\n-    static\n+    if (length < 1)\n     {\n-        BOOLEAN_TRUE_CHARACTERS = new char[Boolean.TRUE.toString().length()];\n-        Boolean.TRUE.toString().getChars( 0, BOOLEAN_TRUE_CHARACTERS.length, BOOLEAN_TRUE_CHARACTERS, 0 );\n+      throw new NumberFormatException(\n+          \"Not an integer: \\\"\" + String.valueOf(data, originalOffset, fullLength) + \"\\\"\");\n     }\n \n-    private static boolean extractBoolean( char[] data, int originalOffset, int fullLength )\n+    try\n     {\n-        int offset = originalOffset;\n-        int length = fullLength;\n-        // Leading whitespace can be ignored\n-        while ( length > 0 && isWhitespace( data[offset] ) )\n-        {\n-            offset++;\n-            length--;\n-        }\n-        // Trailing whitespace can be ignored\n-        while ( length > 0 && isWhitespace( data[offset + length - 1] ) )\n-        {\n-            length--;\n-        }\n+      for (int i = 0; i < length; i++)\n+      {\n+        result = result * 10 + digit(data[offset + i]);\n+      }\n+    } catch (NumberFormatException ignored)\n+    {\n+      throw new NumberFormatException(\n+          \"Not an integer: \\\"\" + String.valueOf(data, originalOffset, fullLength) + \"\\\"\");\n+    }\n \n-        // See if the rest exactly match \"true\"\n-        if ( length != BOOLEAN_TRUE_CHARACTERS.length )\n-        {\n-            return false;\n-        }\n+    return negate ? -result : result;\n+  }\n \n-        for ( int i = 0; i < BOOLEAN_TRUE_CHARACTERS.length && i < length; i++ )\n-        {\n-            if ( data[offset + i] != BOOLEAN_TRUE_CHARACTERS[i] )\n-            {\n-                return false;\n-            }\n-        }\n+  private static int digit(char ch)\n+  {\n+    int digit = ch - '0';\n+    if ((digit < 0) || (digit > 9))\n+    {\n+      throw new NumberFormatException();\n+    }\n+    return digit;\n+  }\n+\n+  private static final char[] BOOLEAN_TRUE_CHARACTERS;\n+\n+  static\n+  {\n+    BOOLEAN_TRUE_CHARACTERS = new char[Boolean.TRUE.toString().length()];\n+    Boolean.TRUE.toString().getChars(0, BOOLEAN_TRUE_CHARACTERS.length, BOOLEAN_TRUE_CHARACTERS, 0);\n+  }\n+\n+  private static boolean extractBoolean(char[] data, int originalOffset, int fullLength)\n+  {\n+    int offset = originalOffset;\n+    int length = fullLength;\n+    // Leading whitespace can be ignored\n+    while (length > 0 && isWhitespace(data[offset]))\n+    {\n+      offset++;\n+      length--;\n+    }\n+    // Trailing whitespace can be ignored\n+    while (length > 0 && isWhitespace(data[offset + length - 1]))\n+    {\n+      length--;\n+    }\n+\n+    // See if the rest exactly match \"true\"\n+    if (length != BOOLEAN_TRUE_CHARACTERS.length)\n+    {\n+      return false;\n+    }\n \n-        return true;\n+    for (int i = 0; i < BOOLEAN_TRUE_CHARACTERS.length && i < length; i++)\n+    {\n+      if (data[offset + i] != BOOLEAN_TRUE_CHARACTERS[i])\n+      {\n+        return false;\n+      }\n     }\n+\n+    return true;\n+  }\n }\n",
            "diff_size": 1446
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "340",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "803",
                    "column": "31",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "842",
                    "column": "35",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "870",
                    "column": "35",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "893",
                    "column": "35",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "916",
                    "column": "35",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "937",
                    "column": "35",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "960",
                    "column": "35",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "985",
                    "column": "35",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "1010",
                    "column": "35",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "1238",
                    "column": "37",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1416/Extractors.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1416/Extractors.java\nindex 64e53354e3e..bb8938d71e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1416/Extractors.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1416/Extractors.java\n@@ -188,7 +188,8 @@ public class Extractors\n         {\n             throw new IllegalArgumentException( \"'\" + name + \"'\" );\n         }\n-        return instance;\n+\n+return instance;\n     }\n \n     public Extractor<String> string()\n@@ -336,9 +337,8 @@ public class Extractors\n             }\n             catch ( CloneNotSupportedException e )\n             {\n-                throw new AssertionError( Extractor.class.getName() + \" implements \" + Cloneable.class.getSimpleName() +\n-                        \", at least this implementation assumes that. This doesn't seem to be the case anymore\", e );\n-            }\n+                throw new AssertionError( Extractor.class.getName() + \" implements \" + Cloneable.class.getSimpleName() + \", at least this implementation assumes that. This doesn't seem to be the case anymore\", e );\n+    }\n         }\n     }\n \n@@ -357,7 +357,8 @@ public class Extractors\n                 clear();\n                 return false;\n             }\n-            return extract0( data, offset, length, optionalData );\n+\n+return extract0( data, offset, length, optionalData );\n         }\n \n         @Override\n@@ -650,7 +651,8 @@ public class Extractors\n             {\n                 throw new IllegalStateException( \"Was told to extract a character, but length:\" + length );\n             }\n-            value = data[offset];\n+\n+value = data[offset];\n             return true;\n         }\n \n@@ -798,7 +800,7 @@ public class Extractors\n \n         protected int numberOfValues( char[] data, int offset, int length )\n         {\n-            int count = length > 0 ? 1 : 0;\n+            int count = length> 0 ? 1 : 0;\n             for ( int i = 0; i < length; i++ )\n             {\n                 if ( data[offset + i] == arrayDelimiter )\n@@ -837,7 +839,7 @@ public class Extractors\n         protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n         {\n             int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new String[numberOfValues] : EMPTY;\n+            value = numberOfValues> 0 ? new String[numberOfValues] : EMPTY;\n             for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n             {\n                 int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n@@ -846,7 +848,8 @@ public class Extractors\n                 {\n                     value[arrayIndex] = value[arrayIndex].trim();\n                 }\n-                charIndex += numberOfChars;\n+\n+charIndex += numberOfChars;\n             }\n         }\n     }\n@@ -864,7 +867,7 @@ public class Extractors\n         protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n         {\n             int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new byte[numberOfValues] : EMPTY;\n+            value = numberOfValues> 0 ? new byte[numberOfValues] : EMPTY;\n             for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n             {\n                 int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n@@ -887,7 +890,7 @@ public class Extractors\n         protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n         {\n             int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new short[numberOfValues] : EMPTY;\n+            value = numberOfValues> 0 ? new short[numberOfValues] : EMPTY;\n             for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n             {\n                 int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n@@ -910,7 +913,7 @@ public class Extractors\n         protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n         {\n             int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new int[numberOfValues] : EMPTY;\n+            value = numberOfValues> 0 ? new int[numberOfValues] : EMPTY;\n             for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n             {\n                 int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n@@ -931,7 +934,7 @@ public class Extractors\n         protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n         {\n             int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new long[numberOfValues] : EMPTY_LONG_ARRAY;\n+            value = numberOfValues> 0 ? new long[numberOfValues] : EMPTY_LONG_ARRAY;\n             for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n             {\n                 int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n@@ -954,7 +957,7 @@ public class Extractors\n         protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n         {\n             int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new float[numberOfValues] : EMPTY;\n+            value = numberOfValues> 0 ? new float[numberOfValues] : EMPTY;\n             for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n             {\n                 int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n@@ -979,7 +982,7 @@ public class Extractors\n         protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n         {\n             int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new double[numberOfValues] : EMPTY;\n+            value = numberOfValues> 0 ? new double[numberOfValues] : EMPTY;\n             for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n             {\n                 int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n@@ -1004,7 +1007,7 @@ public class Extractors\n         protected void extract0( char[] data, int offset, int length, CSVHeaderInformation optionalData )\n         {\n             int numberOfValues = numberOfValues( data, offset, length );\n-            value = numberOfValues > 0 ? new boolean[numberOfValues] : EMPTY;\n+            value = numberOfValues> 0 ? new boolean[numberOfValues] : EMPTY;\n             for ( int arrayIndex = 0, charIndex = 0; arrayIndex < numberOfValues; arrayIndex++, charIndex++ )\n             {\n                 int numberOfChars = charsToNextDelimiter( data, offset + charIndex, length - charIndex );\n@@ -1211,8 +1214,7 @@ public class Extractors\n \n         if ( length < 1 )\n         {\n-            throw new NumberFormatException(\n-                    \"Not an integer: \\\"\" + String.valueOf( data, originalOffset, fullLength ) + \"\\\"\" );\n+            throw new NumberFormatException( \"Not an integer: \\\"\" + String.valueOf( data, originalOffset, fullLength ) + \"\\\"\" );\n         }\n \n         try\n@@ -1224,8 +1226,7 @@ public class Extractors\n         }\n         catch ( NumberFormatException ignored )\n         {\n-            throw new NumberFormatException(\n-                    \"Not an integer: \\\"\" + String.valueOf( data, originalOffset, fullLength ) + \"\\\"\" );\n+            throw new NumberFormatException( \"Not an integer: \\\"\" + String.valueOf( data, originalOffset, fullLength ) + \"\\\"\" );\n         }\n \n         return negate ? -result : result;\n@@ -1234,11 +1235,12 @@ public class Extractors\n     private static int digit( char ch )\n     {\n         int digit = ch - '0';\n-        if ( (digit < 0) || (digit > 9) )\n+        if ( ( digit < 0) || ( digit> 9) )\n         {\n             throw new NumberFormatException();\n         }\n-        return digit;\n+\n+return digit;\n     }\n \n     private static final char[] BOOLEAN_TRUE_CHARACTERS;\n@@ -1280,4 +1282,4 @@ public class Extractors\n \n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}