{
    "project_name": "EMResearch-EMB",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "66",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 134).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @Override\n  public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, List<Language> altLanguages) throws IOException {\n    List<Rule> rules = new ArrayList<>(getBasicRules(messages));\n    // Rules specific for Jekavian Serbian\n    rules.add(new MorfologikJekavianSpellerRule(messages, this, userConfig, altLanguages));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/25/JekavianSerbian.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/25/JekavianSerbian.java\nindex c2ce06c8046..dc2fd3f8df7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/25/JekavianSerbian.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/25/JekavianSerbian.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.language;\n \n \n@@ -43,32 +44,33 @@ import java.util.ResourceBundle;\n  */\n public class JekavianSerbian extends Serbian {\n \n-  private Synthesizer synthesizer;\n-  private Tagger tagger;\n+    private Synthesizer synthesizer;\n+    private Tagger tagger;\n \n-  @Override\n-  public Tagger getTagger() {\n-    if (tagger == null) {\n-      tagger = new JekavianTagger();\n+    @Override\n+    public Tagger getTagger() {\n+        if (tagger == null) {\n+            tagger = new JekavianTagger();\n+        }\n+        return tagger;\n     }\n-    return tagger;\n-  }\n \n-  @Override\n-  public Synthesizer getSynthesizer() {\n-    if (synthesizer == null) {\n-      synthesizer = new JekavianSynthesizer();\n+    @Override\n+    public Synthesizer getSynthesizer() {\n+        if (synthesizer == null) {\n+            synthesizer = new JekavianSynthesizer();\n+        }\n+        return synthesizer;\n     }\n-    return synthesizer;\n-  }\n \n-  @Override\n-  public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, List<Language> altLanguages) throws IOException {\n-    List<Rule> rules = new ArrayList<>(getBasicRules(messages));\n-    // Rules specific for Jekavian Serbian\n-    rules.add(new MorfologikJekavianSpellerRule(messages, this, userConfig, altLanguages));\n-    rules.add(new SimpleGrammarJekavianReplaceRule(messages));\n-    rules.add(new SimpleStyleJekavianReplaceRule(messages));\n-    return rules;\n-  }\n+    @Override\n+    public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, List<Language> altLanguages)\n+        throws IOException {\n+        List<Rule> rules = new ArrayList<>(getBasicRules(messages));\n+        // Rules specific for Jekavian Serbian\n+        rules.add(new MorfologikJekavianSpellerRule(messages, this, userConfig, altLanguages));\n+        rules.add(new SimpleGrammarJekavianReplaceRule(messages));\n+        rules.add(new SimpleStyleJekavianReplaceRule(messages));\n+        return rules;\n+    }\n }\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/25/JekavianSerbian.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/25/JekavianSerbian.java\nindex c2ce06c8046..2fe26a2e583 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/25/JekavianSerbian.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/25/JekavianSerbian.java\n@@ -71,4 +71,4 @@ public class JekavianSerbian extends Serbian {\n     rules.add(new SimpleStyleJekavianReplaceRule(messages));\n     return rules;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/25/JekavianSerbian.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/25/JekavianSerbian.java\nindex c2ce06c8046..942ce2f7e97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/25/JekavianSerbian.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/25/JekavianSerbian.java\n@@ -18,7 +18,6 @@\n  */\n package org.languagetool.language;\n \n-\n import org.languagetool.Language;\n import org.languagetool.UserConfig;\n import org.languagetool.rules.Rule;\n@@ -29,7 +28,6 @@ import org.languagetool.synthesis.Synthesizer;\n import org.languagetool.synthesis.sr.JekavianSynthesizer;\n import org.languagetool.tagging.Tagger;\n import org.languagetool.tagging.sr.JekavianTagger;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -41,34 +39,36 @@ import java.util.ResourceBundle;\n  *\n  * @since 4.0\n  */\n+\n+\n public class JekavianSerbian extends Serbian {\n \n-  private Synthesizer synthesizer;\n-  private Tagger tagger;\n+    private Synthesizer synthesizer;\n+    private Tagger tagger;\n \n-  @Override\n-  public Tagger getTagger() {\n-    if (tagger == null) {\n-      tagger = new JekavianTagger();\n+    @Override\n+    public Tagger getTagger() {\n+        if (tagger == null) {\n+            tagger = new JekavianTagger();\n+        }\n+        return tagger;\n     }\n-    return tagger;\n-  }\n \n-  @Override\n-  public Synthesizer getSynthesizer() {\n-    if (synthesizer == null) {\n-      synthesizer = new JekavianSynthesizer();\n+    @Override\n+    public Synthesizer getSynthesizer() {\n+        if (synthesizer == null) {\n+            synthesizer = new JekavianSynthesizer();\n+        }\n+        return synthesizer;\n     }\n-    return synthesizer;\n-  }\n \n-  @Override\n-  public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, List<Language> altLanguages) throws IOException {\n-    List<Rule> rules = new ArrayList<>(getBasicRules(messages));\n+    @Override\n+    public List<Rule> getRelevantRules(ResourceBundle messages, UserConfig userConfig, List<Language> altLanguages) throws IOException {\n+        List<Rule> rules = new ArrayList<>(getBasicRules(messages));\n     // Rules specific for Jekavian Serbian\n-    rules.add(new MorfologikJekavianSpellerRule(messages, this, userConfig, altLanguages));\n-    rules.add(new SimpleGrammarJekavianReplaceRule(messages));\n-    rules.add(new SimpleStyleJekavianReplaceRule(messages));\n-    return rules;\n-  }\n-}\n+        rules.add(new MorfologikJekavianSpellerRule(messages, this, userConfig, altLanguages));\n+        rules.add(new SimpleGrammarJekavianReplaceRule(messages));\n+        rules.add(new SimpleStyleJekavianReplaceRule(messages));\n+        return rules;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}