{
    "project_name": "Activiti-Activiti",
    "error_id": "160",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\n/**\n * Element for defining an event listener to hook in to the global event-mechanism.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/160/EventListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/160/EventListener.java\nindex d011d6776da..695fb86f0c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/160/EventListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/160/EventListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n /**\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/160/EventListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/160/EventListener.java\nindex d011d6776da..227d2e86f29 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/160/EventListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/160/EventListener.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n /**\n@@ -17,53 +18,53 @@ package org.activiti.bpmn.model;\n  */\n public class EventListener extends BaseElement {\n \n-  protected String events;\n-  protected String implementationType;\n-  protected String implementation;\n-  protected String entityType;\n+    protected String events;\n+    protected String implementationType;\n+    protected String implementation;\n+    protected String entityType;\n \n-  public String getEvents() {\n-    return events;\n-  }\n+    public String getEvents() {\n+        return events;\n+    }\n \n-  public void setEvents(String events) {\n-    this.events = events;\n-  }\n+    public void setEvents(String events) {\n+        this.events = events;\n+    }\n \n-  public String getImplementationType() {\n-    return implementationType;\n-  }\n+    public String getImplementationType() {\n+        return implementationType;\n+    }\n \n-  public void setImplementationType(String implementationType) {\n-    this.implementationType = implementationType;\n-  }\n+    public void setImplementationType(String implementationType) {\n+        this.implementationType = implementationType;\n+    }\n \n-  public String getImplementation() {\n-    return implementation;\n-  }\n+    public String getImplementation() {\n+        return implementation;\n+    }\n \n-  public void setImplementation(String implementation) {\n-    this.implementation = implementation;\n-  }\n+    public void setImplementation(String implementation) {\n+        this.implementation = implementation;\n+    }\n \n-  public void setEntityType(String entityType) {\n-    this.entityType = entityType;\n-  }\n+    public void setEntityType(String entityType) {\n+        this.entityType = entityType;\n+    }\n \n-  public String getEntityType() {\n-    return entityType;\n-  }\n+    public String getEntityType() {\n+        return entityType;\n+    }\n \n-  public EventListener clone() {\n-    EventListener clone = new EventListener();\n-    clone.setValues(this);\n-    return clone;\n-  }\n+    public EventListener clone() {\n+        EventListener clone = new EventListener();\n+        clone.setValues(this);\n+        return clone;\n+    }\n \n-  public void setValues(EventListener otherListener) {\n-    setEvents(otherListener.getEvents());\n-    setImplementation(otherListener.getImplementation());\n-    setImplementationType(otherListener.getImplementationType());\n-    setEntityType(otherListener.getEntityType());\n-  }\n+    public void setValues(EventListener otherListener) {\n+        setEvents(otherListener.getEvents());\n+        setImplementation(otherListener.getImplementation());\n+        setImplementationType(otherListener.getImplementationType());\n+        setEntityType(otherListener.getEntityType());\n+    }\n }\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/160/EventListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/160/EventListener.java\nindex d011d6776da..13d7782e0af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/160/EventListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/160/EventListener.java\n@@ -15,13 +15,13 @@ package org.activiti.bpmn.model;\n /**\n  * Element for defining an event listener to hook in to the global event-mechanism.\n  */\n+\n public class EventListener extends BaseElement {\n \n   protected String events;\n   protected String implementationType;\n   protected String implementation;\n   protected String entityType;\n-\n   public String getEvents() {\n     return events;\n   }\n@@ -66,4 +66,4 @@ public class EventListener extends BaseElement {\n     setImplementationType(otherListener.getImplementationType());\n     setEntityType(otherListener.getEntityType());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/160/EventListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/160/EventListener.java\nindex d011d6776da..695fb86f0c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/160/EventListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/160/EventListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n /**\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/160/EventListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/160/EventListener.java\nindex d011d6776da..695fb86f0c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/160/EventListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/160/EventListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n /**\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}