{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1337",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1337/IndexEntryConflictException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1337/IndexEntryConflictException.java\nindex 9bd2a126911..255f24279de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1337/IndexEntryConflictException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1337/IndexEntryConflictException.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.exceptions.index;\n \n import org.neo4j.internal.kernel.api.TokenNameLookup;\n@@ -35,124 +36,123 @@ import static org.neo4j.kernel.api.StatementConstants.NO_SUCH_NODE;\n  */\n public class IndexEntryConflictException extends Exception\n {\n-    private final ValueTuple propertyValues;\n-    private final long addedNodeId;\n-    private final long existingNodeId;\n-\n-    public IndexEntryConflictException( long existingNodeId, long addedNodeId, Value... propertyValue )\n-    {\n-        this( existingNodeId, addedNodeId, ValueTuple.of( propertyValue ) );\n-    }\n-\n-    public IndexEntryConflictException( long existingNodeId, long addedNodeId, ValueTuple propertyValues )\n-    {\n-        super( format( \"Both node %d and node %d share the property value %s\",\n-                existingNodeId, addedNodeId, propertyValues ) );\n-        this.existingNodeId = existingNodeId;\n-        this.addedNodeId = addedNodeId;\n-        this.propertyValues = propertyValues;\n-    }\n-\n-    /**\n-     * Use this method in cases where {@link org.neo4j.kernel.api.exceptions.index.IndexEntryConflictException}\n-     * was caught but it should not have been allowed to be thrown in the first place.\n-     * Typically where the index we performed an operation on is not a unique index.\n-     */\n-    public RuntimeException notAllowed( SchemaIndexDescriptor descriptor )\n+  private final ValueTuple propertyValues;\n+  private final long addedNodeId;\n+  private final long existingNodeId;\n+\n+  public IndexEntryConflictException(long existingNodeId, long addedNodeId, Value... propertyValue)\n+  {\n+    this(existingNodeId, addedNodeId, ValueTuple.of(propertyValue));\n+  }\n+\n+  public IndexEntryConflictException(long existingNodeId, long addedNodeId, ValueTuple propertyValues)\n+  {\n+    super(format(\"Both node %d and node %d share the property value %s\",\n+        existingNodeId, addedNodeId, propertyValues));\n+    this.existingNodeId = existingNodeId;\n+    this.addedNodeId = addedNodeId;\n+    this.propertyValues = propertyValues;\n+  }\n+\n+  /**\n+   * Use this method in cases where {@link org.neo4j.kernel.api.exceptions.index.IndexEntryConflictException}\n+   * was caught but it should not have been allowed to be thrown in the first place.\n+   * Typically where the index we performed an operation on is not a unique index.\n+   */\n+  public RuntimeException notAllowed(SchemaIndexDescriptor descriptor)\n+  {\n+    return new IllegalStateException(String.format(\n+        \"Index for (%s) should not require unique values.\",\n+        descriptor.userDescription(SchemaUtil.idTokenNameLookup)), this);\n+  }\n+\n+  public String evidenceMessage(TokenNameLookup tokenNameLookup, SchemaDescriptor schema)\n+  {\n+    assert schema.getPropertyIds().length == propertyValues.size();\n+\n+    String labelName = tokenNameLookup.labelGetName(schema.keyId());\n+    if (addedNodeId == NO_SUCH_NODE)\n     {\n-        return new IllegalStateException( String.format(\n-                \"Index for (%s) should not require unique values.\",\n-                descriptor.userDescription( SchemaUtil.idTokenNameLookup ) ), this );\n-    }\n-\n-    public String evidenceMessage( TokenNameLookup tokenNameLookup, SchemaDescriptor schema )\n+      return format(\"Node(%d) already exists with label `%s` and %s\",\n+          existingNodeId, labelName, propertyString(tokenNameLookup, schema.getPropertyIds()));\n+    } else\n     {\n-        assert schema.getPropertyIds().length == propertyValues.size();\n-\n-        String labelName = tokenNameLookup.labelGetName( schema.keyId() );\n-        if ( addedNodeId == NO_SUCH_NODE )\n-        {\n-            return format( \"Node(%d) already exists with label `%s` and %s\",\n-                    existingNodeId, labelName, propertyString( tokenNameLookup, schema.getPropertyIds() ) );\n-        }\n-        else\n-        {\n-            return format( \"Both Node(%d) and Node(%d) have the label `%s` and %s\",\n-                    existingNodeId, addedNodeId, labelName, propertyString( tokenNameLookup, schema.getPropertyIds() ) );\n-        }\n+      return format(\"Both Node(%d) and Node(%d) have the label `%s` and %s\",\n+          existingNodeId, addedNodeId, labelName, propertyString(tokenNameLookup, schema.getPropertyIds()));\n     }\n-\n-    public ValueTuple getPropertyValues()\n-    {\n-        return propertyValues;\n-    }\n-\n-    public Value getSinglePropertyValue()\n+  }\n+\n+  public ValueTuple getPropertyValues()\n+  {\n+    return propertyValues;\n+  }\n+\n+  public Value getSinglePropertyValue()\n+  {\n+    return propertyValues.getOnlyValue();\n+  }\n+\n+  public long getAddedNodeId()\n+  {\n+    return addedNodeId;\n+  }\n+\n+  public long getExistingNodeId()\n+  {\n+    return existingNodeId;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return propertyValues.getOnlyValue();\n+      return true;\n     }\n-\n-    public long getAddedNodeId()\n-    {\n-        return addedNodeId;\n-    }\n-\n-    public long getExistingNodeId()\n-    {\n-        return existingNodeId;\n-    }\n-\n-    @Override\n-    public boolean equals( Object o )\n-    {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        IndexEntryConflictException that = (IndexEntryConflictException) o;\n-\n-        return addedNodeId == that.addedNodeId &&\n-                existingNodeId == that.existingNodeId &&\n-                !(propertyValues != null ? !propertyValues.equals( that.propertyValues ) : that.propertyValues != null);\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        int result = propertyValues != null ? propertyValues.hashCode() : 0;\n-        result = 31 * result + (int) (addedNodeId ^ (addedNodeId >>> 32));\n-        result = 31 * result + (int) (existingNodeId ^ (existingNodeId >>> 32));\n-        return result;\n-    }\n-\n-    @Override\n-    public String toString()\n+    if (o == null || getClass() != o.getClass())\n     {\n-        return \"IndexEntryConflictException{\" +\n-                \"propertyValues=\" + propertyValues +\n-                \", addedNodeId=\" + addedNodeId +\n-                \", existingNodeId=\" + existingNodeId +\n-                '}';\n+      return false;\n     }\n \n-    private String propertyString( TokenNameLookup tokenNameLookup, int[] propertyIds )\n+    IndexEntryConflictException that = (IndexEntryConflictException) o;\n+\n+    return addedNodeId == that.addedNodeId &&\n+        existingNodeId == that.existingNodeId &&\n+        !(propertyValues != null ? !propertyValues.equals(that.propertyValues) : that.propertyValues != null);\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = propertyValues != null ? propertyValues.hashCode() : 0;\n+    result = 31 * result + (int) (addedNodeId ^ (addedNodeId >>> 32));\n+    result = 31 * result + (int) (existingNodeId ^ (existingNodeId >>> 32));\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"IndexEntryConflictException{\" +\n+        \"propertyValues=\" + propertyValues +\n+        \", addedNodeId=\" + addedNodeId +\n+        \", existingNodeId=\" + existingNodeId +\n+        '}';\n+  }\n+\n+  private String propertyString(TokenNameLookup tokenNameLookup, int[] propertyIds)\n+  {\n+    StringBuilder sb = new StringBuilder();\n+    String sep = propertyIds.length > 1 ? \"properties \" : \"property \";\n+    for (int i = 0; i < propertyIds.length; i++)\n     {\n-        StringBuilder sb = new StringBuilder();\n-        String sep = propertyIds.length > 1 ? \"properties \" : \"property \";\n-        for ( int i = 0; i < propertyIds.length; i++ )\n-        {\n-            sb.append( sep );\n-            sep = \", \";\n-            sb.append( '`' );\n-            sb.append( tokenNameLookup.propertyKeyGetName( propertyIds[i] ) );\n-            sb.append( \"` = \" );\n-            sb.append( propertyValues.valueAt( i ).prettyPrint() );\n-        }\n-        return sb.toString();\n+      sb.append(sep);\n+      sep = \", \";\n+      sb.append('`');\n+      sb.append(tokenNameLookup.propertyKeyGetName(propertyIds[i]));\n+      sb.append(\"` = \");\n+      sb.append(propertyValues.valueAt(i).prettyPrint());\n     }\n+    return sb.toString();\n+  }\n }\n",
            "diff_size": 174
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "127",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "column": "40",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1337/IndexEntryConflictException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1337/IndexEntryConflictException.java\nindex 9bd2a126911..1060ec02dd6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1337/IndexEntryConflictException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1337/IndexEntryConflictException.java\n@@ -48,7 +48,7 @@ public class IndexEntryConflictException extends Exception\n     {\n         super( format( \"Both node %d and node %d share the property value %s\",\n                 existingNodeId, addedNodeId, propertyValues ) );\n-        this.existingNodeId = existingNodeId;\n+this.existingNodeId = existingNodeId;\n         this.addedNodeId = addedNodeId;\n         this.propertyValues = propertyValues;\n     }\n@@ -60,16 +60,14 @@ public class IndexEntryConflictException extends Exception\n      */\n     public RuntimeException notAllowed( SchemaIndexDescriptor descriptor )\n     {\n-        return new IllegalStateException( String.format(\n-                \"Index for (%s) should not require unique values.\",\n+        return new IllegalStateException( String.format( \"Index for (%s) should not require unique values.\",\n                 descriptor.userDescription( SchemaUtil.idTokenNameLookup ) ), this );\n     }\n \n     public String evidenceMessage( TokenNameLookup tokenNameLookup, SchemaDescriptor schema )\n     {\n         assert schema.getPropertyIds().length == propertyValues.size();\n-\n-        String labelName = tokenNameLookup.labelGetName( schema.keyId() );\n+String labelName = tokenNameLookup.labelGetName( schema.keyId() );\n         if ( addedNodeId == NO_SUCH_NODE )\n         {\n             return format( \"Node(%d) already exists with label `%s` and %s\",\n@@ -79,7 +77,7 @@ public class IndexEntryConflictException extends Exception\n         {\n             return format( \"Both Node(%d) and Node(%d) have the label `%s` and %s\",\n                     existingNodeId, addedNodeId, labelName, propertyString( tokenNameLookup, schema.getPropertyIds() ) );\n-        }\n+    }\n     }\n \n     public ValueTuple getPropertyValues()\n@@ -109,7 +107,8 @@ public class IndexEntryConflictException extends Exception\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n@@ -118,32 +117,28 @@ public class IndexEntryConflictException extends Exception\n \n         return addedNodeId == that.addedNodeId &&\n                 existingNodeId == that.existingNodeId &&\n-                !(propertyValues != null ? !propertyValues.equals( that.propertyValues ) : that.propertyValues != null);\n+                !( propertyValues != null ? !propertyValues.equals( that.propertyValues ) : that.propertyValues != null );\n     }\n \n     @Override\n     public int hashCode()\n     {\n         int result = propertyValues != null ? propertyValues.hashCode() : 0;\n-        result = 31 * result + (int) (addedNodeId ^ (addedNodeId >>> 32));\n-        result = 31 * result + (int) (existingNodeId ^ (existingNodeId >>> 32));\n+        result = 31 * result + ( int) ( addedNodeId ^ ( addedNodeId >>> 32 ));\n+        result = 31 * result + ( int) ( existingNodeId ^ ( existingNodeId >>> 32 ));\n         return result;\n     }\n \n     @Override\n     public String toString()\n     {\n-        return \"IndexEntryConflictException{\" +\n-                \"propertyValues=\" + propertyValues +\n-                \", addedNodeId=\" + addedNodeId +\n-                \", existingNodeId=\" + existingNodeId +\n-                '}';\n+        return \"IndexEntryConflictException{\" + \"propertyValues=\" + propertyValues + \", addedNodeId=\" + addedNodeId + \", existingNodeId=\" + existingNodeId + '}';\n     }\n \n     private String propertyString( TokenNameLookup tokenNameLookup, int[] propertyIds )\n     {\n         StringBuilder sb = new StringBuilder();\n-        String sep = propertyIds.length > 1 ? \"properties \" : \"property \";\n+        String sep = propertyIds.length> 1 ? \"properties \" : \"property \";\n         for ( int i = 0; i < propertyIds.length; i++ )\n         {\n             sb.append( sep );\n@@ -153,6 +148,7 @@ public class IndexEntryConflictException extends Exception\n             sb.append( \"` = \" );\n             sb.append( propertyValues.valueAt( i ).prettyPrint() );\n         }\n-        return sb.toString();\n+\n+return sb.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}