{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1771",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "104",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1771/RateLimitedAuthenticationStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1771/RateLimitedAuthenticationStrategy.java\nindex afe68665554..3b8fae67cbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1771/RateLimitedAuthenticationStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1771/RateLimitedAuthenticationStrategy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.security.auth;\n \n import java.time.Clock;\n@@ -34,88 +35,87 @@ import static org.neo4j.graphdb.factory.GraphDatabaseSettings.auth_max_failed_at\n \n public class RateLimitedAuthenticationStrategy implements AuthenticationStrategy\n {\n-    private final Clock clock;\n-    private final long lockDurationMs;\n-    private final int maxFailedAttempts;\n+  private final Clock clock;\n+  private final long lockDurationMs;\n+  private final int maxFailedAttempts;\n+\n+  private class AuthenticationMetadata\n+  {\n+    private final AtomicInteger failedAuthAttempts = new AtomicInteger();\n+    private long lastFailedAttemptTime;\n \n-    private class AuthenticationMetadata\n+    public boolean authenticationPermitted()\n     {\n-        private final AtomicInteger failedAuthAttempts = new AtomicInteger();\n-        private long lastFailedAttemptTime;\n-\n-        public boolean authenticationPermitted()\n-        {\n-            return maxFailedAttempts <= 0 || // amount of attempts is not limited\n-                   failedAuthAttempts.get() < maxFailedAttempts || // less failed attempts than configured\n-                   clock.millis() >= lastFailedAttemptTime + lockDurationMs; // auth lock duration expired\n-        }\n-\n-        public void authSuccess()\n-        {\n-            failedAuthAttempts.set( 0 );\n-        }\n-\n-        public void authFailed()\n-        {\n-            failedAuthAttempts.incrementAndGet();\n-            lastFailedAttemptTime = clock.millis();\n-        }\n+      return maxFailedAttempts <= 0 || // amount of attempts is not limited\n+          failedAuthAttempts.get() < maxFailedAttempts || // less failed attempts than configured\n+          clock.millis() >= lastFailedAttemptTime + lockDurationMs; // auth lock duration expired\n     }\n \n-    /**\n-     * Tracks authentication state for each user\n-     */\n-    private final ConcurrentMap<String, AuthenticationMetadata> authenticationData = new ConcurrentHashMap<>();\n-\n-    public RateLimitedAuthenticationStrategy( Clock clock, Config config )\n+    public void authSuccess()\n     {\n-        this( clock, config.get( auth_lock_time ), config.get( auth_max_failed_attempts ) );\n+      failedAuthAttempts.set(0);\n     }\n \n-    RateLimitedAuthenticationStrategy( Clock clock, Duration lockDuration, int maxFailedAttempts )\n+    public void authFailed()\n+    {\n+      failedAuthAttempts.incrementAndGet();\n+      lastFailedAttemptTime = clock.millis();\n+    }\n+  }\n+\n+  /**\n+   * Tracks authentication state for each user\n+   */\n+  private final ConcurrentMap<String, AuthenticationMetadata> authenticationData = new ConcurrentHashMap<>();\n+\n+  public RateLimitedAuthenticationStrategy(Clock clock, Config config)\n+  {\n+    this(clock, config.get(auth_lock_time), config.get(auth_max_failed_attempts));\n+  }\n+\n+  RateLimitedAuthenticationStrategy(Clock clock, Duration lockDuration, int maxFailedAttempts)\n+  {\n+    this.clock = clock;\n+    this.lockDurationMs = lockDuration.toMillis();\n+    this.maxFailedAttempts = maxFailedAttempts;\n+  }\n+\n+  @Override\n+  public AuthenticationResult authenticate(User user, String password)\n+  {\n+    AuthenticationMetadata authMetadata = authMetadataFor(user.name());\n+\n+    if (!authMetadata.authenticationPermitted())\n     {\n-        this.clock = clock;\n-        this.lockDurationMs = lockDuration.toMillis();\n-        this.maxFailedAttempts = maxFailedAttempts;\n+      return AuthenticationResult.TOO_MANY_ATTEMPTS;\n     }\n \n-    @Override\n-    public AuthenticationResult authenticate( User user, String password )\n+    if (user.credentials().matchesPassword(password))\n+    {\n+      authMetadata.authSuccess();\n+      return AuthenticationResult.SUCCESS;\n+    } else\n     {\n-        AuthenticationMetadata authMetadata = authMetadataFor( user.name() );\n-\n-        if ( !authMetadata.authenticationPermitted() )\n-        {\n-            return AuthenticationResult.TOO_MANY_ATTEMPTS;\n-        }\n-\n-        if ( user.credentials().matchesPassword( password ) )\n-        {\n-            authMetadata.authSuccess();\n-            return AuthenticationResult.SUCCESS;\n-        }\n-        else\n-        {\n-            authMetadata.authFailed();\n-            return AuthenticationResult.FAILURE;\n-        }\n+      authMetadata.authFailed();\n+      return AuthenticationResult.FAILURE;\n     }\n+  }\n \n-    private AuthenticationMetadata authMetadataFor( String username )\n+  private AuthenticationMetadata authMetadataFor(String username)\n+  {\n+    AuthenticationMetadata authMeta = authenticationData.get(username);\n+\n+    if (authMeta == null)\n     {\n-        AuthenticationMetadata authMeta = authenticationData.get( username );\n-\n-        if ( authMeta == null )\n-        {\n-            authMeta = new AuthenticationMetadata();\n-            AuthenticationMetadata preExisting = authenticationData.putIfAbsent( username, authMeta );\n-            if ( preExisting != null )\n-            {\n-                authMeta = preExisting;\n-            }\n-        }\n-\n-        return authMeta;\n+      authMeta = new AuthenticationMetadata();\n+      AuthenticationMetadata preExisting = authenticationData.putIfAbsent(username, authMeta);\n+      if (preExisting != null)\n+      {\n+        authMeta = preExisting;\n+      }\n     }\n \n+    return authMeta;\n+  }\n+\n }\n",
            "diff_size": 114
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}