{
    "project_name": "intuit-Tank",
    "error_id": "22",
    "information": {
        "errors": [
            {
                "line": "108",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 144).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                .getString(\n                        KEY_FOOTER,\n                        \"<p class=\\\"footer\\\">This message automatically generated by Tank (<a href=\\\"{tankBaseUrl}\\\">{tankBaseUrl}</a>). </p>\");\n    }\n\n    public String getStyle() {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/22/MailMessageConfig.java\nindex 3870e97a64b..715703ab69c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/22/MailMessageConfig.java\n@@ -106,7 +106,7 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n                 .getString(\n                         KEY_FOOTER,\n                         \"<p class=\\\"footer\\\">This message automatically generated by Tank (<a href=\\\"{tankBaseUrl}\\\">{tankBaseUrl}</a>). </p>\");\n-    }\n+            }\n \n     public String getStyle() {\n         return config.getString(KEY_CSS, \"\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/22/MailMessageConfig.java\nindex 3870e97a64b..8f2654af62e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/22/MailMessageConfig.java\n@@ -32,113 +32,112 @@ import org.apache.commons.lang.StringUtils;\n  * The Job {jobName} for Project {projectName} was added to the job queue at {eventTime}.\n  * </p>\n  * ]]> </body> </message>\n- * \n+ *\n  * <br>\n- * \n+ *\n  * @author dangleton\n  */\n @ApplicationScoped\n public class MailMessageConfig extends BaseCommonsXmlConfig {\n \n-    private static final long serialVersionUID = 1L;\n-    private static final String KEY_MESSAGE_NODE = \"message\";\n-    private static final String KEY_EVENT = \"@event\";\n-    private static final String KEY_SUBJECT = \"subject\";\n-    private static final String KEY_FOOTER = \"footer\";\n-    private static final String KEY_BODY = \"body\";\n-    private static final String KEY_CSS = \"css-style\";\n-\n-    private static final String DEFAULT = \"default\";\n-\n-    private static final String CONFIG_NAME = \"mail-messages.xml\";\n-    private static String configName = CONFIG_NAME;\n-\n-    static {\n-        File file = new File(configName);\n-        if (!file.exists()) {\n-            if (System.getenv(\"WATS_PROPERTIES\") != null) {\n-                configName = System.getenv(\"WATS_PROPERTIES\") + \"/\" + CONFIG_NAME;\n-            } else if (System.getProperty(\"WATS_PROPERTIES\") != null) {\n-                configName = System.getProperty(\"WATS_PROPERTIES\") + \"/\" + CONFIG_NAME;\n-            }\n-        }\n-    }\n-\n-    private String configPath = configName;\n-\n-    private Map<String, MailMessage> messages = new HashMap<String, MailMessage>();\n-\n-    /**\n-     * \n-     */\n-    MailMessageConfig(String configPath) {\n-        this.configPath = configPath;\n-        readConfig();\n-    }\n-\n-    /**\n-     * private constructor to implement the singleton pattern\n-     * \n-     */\n-    public MailMessageConfig() {\n-        readConfig();\n-    }\n-\n-    public MailMessage getMailMessage(String event) {\n-        checkReload();\n-        MailMessage mailMessage = messages.get(event);\n-        if (mailMessage == null) {\n-            mailMessage = messages.get(MailMessageConfig.DEFAULT);\n-        }\n-        return mailMessage;\n+  private static final long serialVersionUID = 1L;\n+  private static final String KEY_MESSAGE_NODE = \"message\";\n+  private static final String KEY_EVENT = \"@event\";\n+  private static final String KEY_SUBJECT = \"subject\";\n+  private static final String KEY_FOOTER = \"footer\";\n+  private static final String KEY_BODY = \"body\";\n+  private static final String KEY_CSS = \"css-style\";\n+\n+  private static final String DEFAULT = \"default\";\n+\n+  private static final String CONFIG_NAME = \"mail-messages.xml\";\n+  private static String configName = CONFIG_NAME;\n+\n+  static {\n+    File file = new File(configName);\n+    if (!file.exists()) {\n+      if (System.getenv(\"WATS_PROPERTIES\") != null) {\n+        configName = System.getenv(\"WATS_PROPERTIES\") + \"/\" + CONFIG_NAME;\n+      } else if (System.getProperty(\"WATS_PROPERTIES\") != null) {\n+        configName = System.getProperty(\"WATS_PROPERTIES\") + \"/\" + CONFIG_NAME;\n+      }\n     }\n-\n-    public Collection<MailMessage> getAllMessages() {\n-        checkReload();\n-        return messages.values();\n+  }\n+\n+  private String configPath = configName;\n+\n+  private Map<String, MailMessage> messages = new HashMap<String, MailMessage>();\n+\n+  /**\n+   *\n+   */\n+  MailMessageConfig(String configPath) {\n+    this.configPath = configPath;\n+    readConfig();\n+  }\n+\n+  /**\n+   * private constructor to implement the singleton pattern\n+   */\n+  public MailMessageConfig() {\n+    readConfig();\n+  }\n+\n+  public MailMessage getMailMessage(String event) {\n+    checkReload();\n+    MailMessage mailMessage = messages.get(event);\n+    if (mailMessage == null) {\n+      mailMessage = messages.get(MailMessageConfig.DEFAULT);\n     }\n-\n-    /**\n-     * @return the footer\n-     */\n-    public String getFooter() {\n-        return config\n-                .getString(\n-                        KEY_FOOTER,\n-                        \"<p class=\\\"footer\\\">This message automatically generated by Tank (<a href=\\\"{tankBaseUrl}\\\">{tankBaseUrl}</a>). </p>\");\n-    }\n-\n-    public String getStyle() {\n-        return config.getString(KEY_CSS, \"\");\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    protected String getConfigName() {\n-        return configPath;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    protected void initConfig(XMLConfiguration configuration) {\n-        messages.clear();\n-        if (config != null) {\n-            String style = getStyle();\n-            @SuppressWarnings(\"unchecked\") List<HierarchicalConfiguration> msgConfigs = config\n-                    .configurationsAt(KEY_MESSAGE_NODE);\n-            for (HierarchicalConfiguration msgConfig : msgConfigs) {\n-                String event = msgConfig.getString(KEY_EVENT);\n-                String subject = msgConfig.getString(KEY_SUBJECT);\n-                String body = msgConfig.getString(KEY_BODY);\n-                if (!StringUtils.isEmpty(event) && !StringUtils.isEmpty(subject) && !StringUtils.isEmpty(body)) {\n-                    messages.put(event, new MailMessage(body, subject, style));\n-                }\n-            }\n+    return mailMessage;\n+  }\n+\n+  public Collection<MailMessage> getAllMessages() {\n+    checkReload();\n+    return messages.values();\n+  }\n+\n+  /**\n+   * @return the footer\n+   */\n+  public String getFooter() {\n+    return config\n+      .getString(\n+        KEY_FOOTER,\n+        \"<p class=\\\"footer\\\">This message automatically generated by Tank (<a href=\\\"{tankBaseUrl}\\\">{tankBaseUrl}</a>). </p>\");\n+  }\n+\n+  public String getStyle() {\n+    return config.getString(KEY_CSS, \"\");\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  protected String getConfigName() {\n+    return configPath;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  protected void initConfig(XMLConfiguration configuration) {\n+    messages.clear();\n+    if (config != null) {\n+      String style = getStyle();\n+      @SuppressWarnings(\"unchecked\") List<HierarchicalConfiguration> msgConfigs = config\n+        .configurationsAt(KEY_MESSAGE_NODE);\n+      for (HierarchicalConfiguration msgConfig : msgConfigs) {\n+        String event = msgConfig.getString(KEY_EVENT);\n+        String subject = msgConfig.getString(KEY_SUBJECT);\n+        String body = msgConfig.getString(KEY_BODY);\n+        if (!StringUtils.isEmpty(event) && !StringUtils.isEmpty(subject) && !StringUtils.isEmpty(body)) {\n+          messages.put(event, new MailMessage(body, subject, style));\n         }\n+      }\n     }\n+  }\n \n }\n",
            "diff_size": 127
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/22/MailMessageConfig.java\nindex 3870e97a64b..81b96264195 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/22/MailMessageConfig.java\n@@ -102,8 +102,7 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n      * @return the footer\n      */\n     public String getFooter() {\n-        return config\n-                .getString(\n+        return config.getString(\n                         KEY_FOOTER,\n                         \"<p class=\\\"footer\\\">This message automatically generated by Tank (<a href=\\\"{tankBaseUrl}\\\">{tankBaseUrl}</a>). </p>\");\n     }\n@@ -141,4 +140,4 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/22/MailMessageConfig.java\nindex 3870e97a64b..f97d12f8417 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/22/MailMessageConfig.java\n@@ -14,14 +14,13 @@ package com.intuit.tank.vm.settings;\n  */\n \n \n+\n import java.io.File;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import javax.enterprise.context.ApplicationScoped;\n-\n import org.apache.commons.configuration.HierarchicalConfiguration;\n import org.apache.commons.configuration.XMLConfiguration;\n import org.apache.commons.lang.StringUtils;\n@@ -37,6 +36,7 @@ import org.apache.commons.lang.StringUtils;\n  * \n  * @author dangleton\n  */\n+\n @ApplicationScoped\n public class MailMessageConfig extends BaseCommonsXmlConfig {\n \n@@ -47,9 +47,7 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n     private static final String KEY_FOOTER = \"footer\";\n     private static final String KEY_BODY = \"body\";\n     private static final String KEY_CSS = \"css-style\";\n-\n     private static final String DEFAULT = \"default\";\n-\n     private static final String CONFIG_NAME = \"mail-messages.xml\";\n     private static String configName = CONFIG_NAME;\n \n@@ -65,12 +63,12 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n     }\n \n     private String configPath = configName;\n-\n     private Map<String, MailMessage> messages = new HashMap<String, MailMessage>();\n \n     /**\n      * \n      */\n+\n     MailMessageConfig(String configPath) {\n         this.configPath = configPath;\n         readConfig();\n@@ -80,10 +78,13 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n      * private constructor to implement the singleton pattern\n      * \n      */\n+\n+\n     public MailMessageConfig() {\n         readConfig();\n     }\n \n+\n     public MailMessage getMailMessage(String event) {\n         checkReload();\n         MailMessage mailMessage = messages.get(event);\n@@ -93,6 +94,7 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n         return mailMessage;\n     }\n \n+\n     public Collection<MailMessage> getAllMessages() {\n         checkReload();\n         return messages.values();\n@@ -101,13 +103,13 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n     /**\n      * @return the footer\n      */\n+\n+\n     public String getFooter() {\n-        return config\n-                .getString(\n-                        KEY_FOOTER,\n-                        \"<p class=\\\"footer\\\">This message automatically generated by Tank (<a href=\\\"{tankBaseUrl}\\\">{tankBaseUrl}</a>). </p>\");\n+        return config.getString(KEY_FOOTER, \"<p class=\\\"footer\\\">This message automatically generated by Tank (<a href=\\\"{tankBaseUrl}\\\">{tankBaseUrl}</a>). </p>\");\n     }\n \n+\n     public String getStyle() {\n         return config.getString(KEY_CSS, \"\");\n     }\n@@ -115,6 +117,7 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n     /**\n      * {@inheritDoc}\n      */\n+\n     @Override\n     protected String getConfigName() {\n         return configPath;\n@@ -123,22 +126,23 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n     /**\n      * {@inheritDoc}\n      */\n+\n     @Override\n     protected void initConfig(XMLConfiguration configuration) {\n         messages.clear();\n         if (config != null) {\n             String style = getStyle();\n-            @SuppressWarnings(\"unchecked\") List<HierarchicalConfiguration> msgConfigs = config\n-                    .configurationsAt(KEY_MESSAGE_NODE);\n+            @SuppressWarnings(\"unchecked\") List<HierarchicalConfiguration> msgConfigs = config.configurationsAt(KEY_MESSAGE_NODE);\n             for (HierarchicalConfiguration msgConfig : msgConfigs) {\n                 String event = msgConfig.getString(KEY_EVENT);\n                 String subject = msgConfig.getString(KEY_SUBJECT);\n                 String body = msgConfig.getString(KEY_BODY);\n-                if (!StringUtils.isEmpty(event) && !StringUtils.isEmpty(subject) && !StringUtils.isEmpty(body)) {\n+                if (!StringUtils.isEmpty(event) && !StringUtils.isEmpty(subject)\n+                        && !StringUtils.isEmpty(body)) {\n                     messages.put(event, new MailMessage(body, subject, style));\n                 }\n             }\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/22/MailMessageConfig.java\nindex 3870e97a64b..715703ab69c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/22/MailMessageConfig.java\n@@ -106,7 +106,7 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n                 .getString(\n                         KEY_FOOTER,\n                         \"<p class=\\\"footer\\\">This message automatically generated by Tank (<a href=\\\"{tankBaseUrl}\\\">{tankBaseUrl}</a>). </p>\");\n-    }\n+            }\n \n     public String getStyle() {\n         return config.getString(KEY_CSS, \"\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/22/MailMessageConfig.java\nindex 3870e97a64b..aa3891607ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/22/MailMessageConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/22/MailMessageConfig.java\n@@ -105,10 +105,7 @@ public class MailMessageConfig extends BaseCommonsXmlConfig {\n         return config\n                 .getString(\n                         KEY_FOOTER,\n-                        \"<p class=\\\"footer\\\">This message automatically generated by Tank (<a href=\\\"{tankBaseUrl}\\\">{tankBaseUrl}</a>). </p>\");\n-    }\n-\n-    public String getStyle() {\n+                        \"<p class=\\\"footer\\\">This message automatically generated by Tank (<a href=\\\"{tankBaseUrl}\\\">{tankBaseUrl}</a>). </p>\");}public String getStyle() {\n         return config.getString(KEY_CSS, \"\");\n     }\n \n",
            "diff_size": 4
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}