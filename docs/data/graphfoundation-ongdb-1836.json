{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1836",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1836/CleanupJob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1836/CleanupJob.java\nindex 41477941974..fb60e6745bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1836/CleanupJob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1836/CleanupJob.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.util.concurrent.ExecutorService;\n@@ -28,64 +29,64 @@ import java.util.concurrent.ExecutorService;\n  */\n public interface CleanupJob\n {\n-    /**\n-     * @return {@code true} if gbptree still needs cleaning, meaning job is not yet finished or has not started at all.\n-     * {@code false} if gbptree does not need cleaning, meaning job has finished or it was never needed in the first place.\n-     */\n-    boolean needed();\n+  /**\n+   * @return {@code true} if gbptree still needs cleaning, meaning job is not yet finished or has not started at all.\n+   * {@code false} if gbptree does not need cleaning, meaning job has finished or it was never needed in the first place.\n+   */\n+  boolean needed();\n \n-    /**\n-     * @return {@code true} if the job has failed. Use {@link #getCause()} to see cause of failure.\n-     */\n-    boolean hasFailed();\n+  /**\n+   * @return {@code true} if the job has failed. Use {@link #getCause()} to see cause of failure.\n+   */\n+  boolean hasFailed();\n \n-    /**\n-     * @return Cause of failure if {@link #hasFailed()} or {@code null} if job has not failed.\n-     */\n-    Throwable getCause();\n+  /**\n+   * @return Cause of failure if {@link #hasFailed()} or {@code null} if job has not failed.\n+   */\n+  Throwable getCause();\n \n-    /**\n-     * Mark this job as closed and cleanup all it's resources.\n-     */\n-    void close();\n+  /**\n+   * Mark this job as closed and cleanup all it's resources.\n+   */\n+  void close();\n \n-    /**\n-     * Run cleanup job and use provided executor for parallel tasks.\n-     * This method will wait for all jobs passed to executor to finish before returning.\n-     */\n-    void run( ExecutorService executor );\n+  /**\n+   * Run cleanup job and use provided executor for parallel tasks.\n+   * This method will wait for all jobs passed to executor to finish before returning.\n+   */\n+  void run(ExecutorService executor);\n \n-    /**\n-     * A {@link CleanupJob} that doesn't need cleaning, i.e. it's already clean.\n-     */\n-    CleanupJob CLEAN = new CleanupJob()\n-    {\n-        @Override\n-        public void run( ExecutorService executor )\n-        {   // no-op\n-        }\n+  /**\n+   * A {@link CleanupJob} that doesn't need cleaning, i.e. it's already clean.\n+   */\n+  CleanupJob CLEAN = new CleanupJob()\n+  {\n+    @Override\n+    public void run(ExecutorService executor)\n+    {   // no-op\n+    }\n \n-        @Override\n-        public boolean needed()\n-        {\n-            return false;\n-        }\n+    @Override\n+    public boolean needed()\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public boolean hasFailed()\n-        {\n-            return false;\n-        }\n+    @Override\n+    public boolean hasFailed()\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public Throwable getCause()\n-        {\n-            return null;\n-        }\n+    @Override\n+    public Throwable getCause()\n+    {\n+      return null;\n+    }\n \n-        @Override\n-        public void close()\n-        {   // no-op\n-        }\n-    };\n+    @Override\n+    public void close()\n+    {   // no-op\n+    }\n+  };\n }\n",
            "diff_size": 52
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1836/CleanupJob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1836/CleanupJob.java\nindex 41477941974..8b7c47dbef8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1836/CleanupJob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1836/CleanupJob.java\n@@ -62,7 +62,8 @@ public interface CleanupJob\n     {\n         @Override\n         public void run( ExecutorService executor )\n-        {   // no-op\n+        {\n+    // no-op\n         }\n \n         @Override\n@@ -85,7 +86,8 @@ public interface CleanupJob\n \n         @Override\n         public void close()\n-        {   // no-op\n+        {\n+    // no-op\n         }\n     };\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}