{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1246",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "142",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "147",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "150",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "165",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "173",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "411",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "497",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "497",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "531",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "548",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1246/DateValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1246/DateValue.java\nindex 1aff3ac0a81..0b75cfd684d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1246/DateValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1246/DateValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.time.Clock;\n@@ -50,520 +51,507 @@ import static org.neo4j.util.FeatureToggles.flag;\n import static org.neo4j.values.storable.DateTimeValue.parseZoneName;\n import static org.neo4j.values.storable.IntegralValue.safeCastIntegral;\n \n-public final class DateValue extends TemporalValue<LocalDate,DateValue>\n+public final class DateValue extends TemporalValue<LocalDate, DateValue>\n {\n-    public static final DateValue MIN_VALUE = new DateValue( LocalDate.MIN );\n-    public static final DateValue MAX_VALUE = new DateValue( LocalDate.MAX );\n-\n-    public static DateValue date( LocalDate value )\n-    {\n-        return new DateValue( requireNonNull( value, \"LocalDate\" ) );\n-    }\n-\n-    public static DateValue date( int year, int month, int day )\n-    {\n-        return new DateValue( assertValidArgument( () -> LocalDate.of( year, month, day ) ) );\n-    }\n-\n-    public static DateValue weekDate( int year, int week, int dayOfWeek )\n-    {\n-        return new DateValue( assertValidArgument( () -> localWeekDate( year, week, dayOfWeek ) ) );\n-    }\n-\n-    public static DateValue quarterDate( int year, int quarter, int dayOfQuarter )\n-    {\n-        return new DateValue( assertValidArgument( () -> localQuarterDate( year, quarter, dayOfQuarter ) ) );\n-    }\n-\n-    public static DateValue ordinalDate( int year, int dayOfYear )\n-    {\n-        return new DateValue( assertValidArgument( () -> LocalDate.ofYearDay( year, dayOfYear ) ) );\n-    }\n-\n-    public static DateValue epochDate( long epochDay )\n-    {\n-        return new DateValue( assertValidArgument( () -> LocalDate.ofEpochDay( epochDay ) ) );\n-    }\n-\n-    public static DateValue parse( CharSequence text )\n-    {\n-        return parse( DateValue.class, PATTERN, DateValue::parse, text );\n-    }\n-\n-    public static DateValue parse( TextValue text )\n-    {\n-        return parse( DateValue.class, PATTERN, DateValue::parse, text );\n-    }\n-\n-    public static DateValue now( Clock clock )\n-    {\n-        return new DateValue( LocalDate.now( clock ) );\n-    }\n-\n-    public static DateValue now( Clock clock, String timezone )\n-    {\n-        return now( clock.withZone( parseZoneName( timezone ) ) );\n-    }\n-\n-    public static DateValue now( Clock clock, Supplier<ZoneId> defaultZone )\n-    {\n-        return now( clock.withZone( defaultZone.get() ) );\n-    }\n-\n-    public static DateValue build( MapValue map, Supplier<ZoneId> defaultZone )\n-    {\n-        return StructureBuilder.build( builder( defaultZone ), map );\n-    }\n-\n-    public static DateValue select( org.neo4j.values.AnyValue from, Supplier<ZoneId> defaultZone )\n-    {\n-        return builder( defaultZone ).selectDate( from );\n-    }\n-\n-    public static DateValue truncate(\n-            TemporalUnit unit,\n-            TemporalValue input,\n-            MapValue fields,\n-            Supplier<ZoneId> defaultZone )\n-    {\n-        LocalDate localDate = input.getDatePart();\n-        DateValue truncated = date( truncateTo( localDate, unit ) );\n-        if ( fields.size() == 0 )\n-        {\n-            return truncated;\n-        }\n-        else\n-        {\n-            MapValue updatedFields = VirtualValues.copy( fields, Pair.of( \"date\", truncated ) );\n-            return build( updatedFields, defaultZone );\n-        }\n-    }\n-\n-    static LocalDate truncateTo( LocalDate value, TemporalUnit unit )\n-    {\n-        if ( unit == ChronoUnit.MILLENNIA )\n-        {\n-            return value.with( Neo4JTemporalField.YEAR_OF_MILLENNIUM, 0 );\n-        }\n-        else if ( unit == ChronoUnit.CENTURIES )\n-        {\n-            return value.with( Neo4JTemporalField.YEAR_OF_CENTURY, 0 );\n-        }\n-        else if ( unit == ChronoUnit.DECADES )\n-        {\n-            return value.with( Neo4JTemporalField.YEAR_OF_DECADE, 0 );\n-        }\n-        else if ( unit == ChronoUnit.YEARS )\n-        {\n-            return value.with( TemporalAdjusters.firstDayOfYear() );\n-        }\n-        else if ( unit == IsoFields.WEEK_BASED_YEARS )\n-        {\n-            return value.with( IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1 ).with( ChronoField.DAY_OF_WEEK, 1 );\n-        }\n-        else if ( unit == IsoFields.QUARTER_YEARS )\n-        {\n-            return value.with( IsoFields.DAY_OF_QUARTER, 1 );\n-        }\n-        else if ( unit == ChronoUnit.MONTHS )\n-        {\n-            return value.with( TemporalAdjusters.firstDayOfMonth() );\n-        }\n-        else if ( unit == ChronoUnit.WEEKS )\n-        {\n-            return value.with( TemporalAdjusters.previousOrSame( DayOfWeek.MONDAY ) );\n-        }\n-        else if ( unit == ChronoUnit.DAYS )\n-        {\n-            return value;\n-        }\n-        else\n-        {\n-            throw new UnsupportedTemporalUnitException( \"Unit too small for truncation: \" + unit );\n-        }\n-    }\n-\n-    static DateBuilder builder( Supplier<ZoneId> defaultZone )\n-    {\n-        return new DateBuilder( defaultZone );\n-    }\n-\n-    private final LocalDate value;\n-\n-    private DateValue( LocalDate value )\n-    {\n-        this.value = value;\n-    }\n-\n-    @Override\n-    int unsafeCompareTo( Value otherValue )\n-    {\n-        DateValue other = (DateValue) otherValue;\n-        return value.compareTo( other.value );\n-    }\n-\n-    @Override\n-    public String getTypeName()\n-    {\n-        return \"Date\";\n-    }\n-\n-    @Override\n-    LocalDate temporal()\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    LocalDate getDatePart()\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    LocalTime getLocalTimePart()\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the time of: %s\", this ) );\n-    }\n-\n-    @Override\n-    OffsetTime getTimePart( Supplier<ZoneId> defaultZone )\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the time of: %s\", this ) );\n-    }\n-\n-    @Override\n-    ZoneId getZoneId( Supplier<ZoneId> defaultZone )\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the time zone of: %s\", this ) );\n-    }\n-\n-    @Override\n-    ZoneId getZoneId()\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the timezone of: %s\", this ) );\n-    }\n-\n-    @Override\n-    ZoneOffset getZoneOffset()\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the offset of: %s\", this ) );\n-    }\n-\n-    @Override\n-    public boolean supportsTimeZone()\n-    {\n-        return false;\n-    }\n+  public static final DateValue MIN_VALUE = new DateValue(LocalDate.MIN);\n+  public static final DateValue MAX_VALUE = new DateValue(LocalDate.MAX);\n+\n+  public static DateValue date(LocalDate value)\n+  {\n+    return new DateValue(requireNonNull(value, \"LocalDate\"));\n+  }\n+\n+  public static DateValue date(int year, int month, int day)\n+  {\n+    return new DateValue(assertValidArgument(() -> LocalDate.of(year, month, day)));\n+  }\n+\n+  public static DateValue weekDate(int year, int week, int dayOfWeek)\n+  {\n+    return new DateValue(assertValidArgument(() -> localWeekDate(year, week, dayOfWeek)));\n+  }\n+\n+  public static DateValue quarterDate(int year, int quarter, int dayOfQuarter)\n+  {\n+    return new DateValue(assertValidArgument(() -> localQuarterDate(year, quarter, dayOfQuarter)));\n+  }\n \n-    @Override\n-    boolean hasTime()\n-    {\n-        return false;\n-    }\n+  public static DateValue ordinalDate(int year, int dayOfYear)\n+  {\n+    return new DateValue(assertValidArgument(() -> LocalDate.ofYearDay(year, dayOfYear)));\n+  }\n \n-    @Override\n-    public boolean equals( Value other )\n-    {\n-        return other instanceof DateValue && value.equals( ((DateValue) other).value );\n-    }\n+  public static DateValue epochDate(long epochDay)\n+  {\n+    return new DateValue(assertValidArgument(() -> LocalDate.ofEpochDay(epochDay)));\n+  }\n \n-    @Override\n-    public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n-    {\n-        writer.writeDate( value );\n-    }\n+  public static DateValue parse(CharSequence text)\n+  {\n+    return parse(DateValue.class, PATTERN, DateValue::parse, text);\n+  }\n+\n+  public static DateValue parse(TextValue text)\n+  {\n+    return parse(DateValue.class, PATTERN, DateValue::parse, text);\n+  }\n+\n+  public static DateValue now(Clock clock)\n+  {\n+    return new DateValue(LocalDate.now(clock));\n+  }\n+\n+  public static DateValue now(Clock clock, String timezone)\n+  {\n+    return now(clock.withZone(parseZoneName(timezone)));\n+  }\n+\n+  public static DateValue now(Clock clock, Supplier<ZoneId> defaultZone)\n+  {\n+    return now(clock.withZone(defaultZone.get()));\n+  }\n+\n+  public static DateValue build(MapValue map, Supplier<ZoneId> defaultZone)\n+  {\n+    return StructureBuilder.build(builder(defaultZone), map);\n+  }\n+\n+  public static DateValue select(org.neo4j.values.AnyValue from, Supplier<ZoneId> defaultZone)\n+  {\n+    return builder(defaultZone).selectDate(from);\n+  }\n+\n+  public static DateValue truncate(\n+      TemporalUnit unit,\n+      TemporalValue input,\n+      MapValue fields,\n+      Supplier<ZoneId> defaultZone)\n+  {\n+    LocalDate localDate = input.getDatePart();\n+    DateValue truncated = date(truncateTo(localDate, unit));\n+    if (fields.size() == 0)\n+    {\n+      return truncated;\n+    } else\n+    {\n+      MapValue updatedFields = VirtualValues.copy(fields, Pair.of(\"date\", truncated));\n+      return build(updatedFields, defaultZone);\n+    }\n+  }\n+\n+  static LocalDate truncateTo(LocalDate value, TemporalUnit unit)\n+  {\n+    if (unit == ChronoUnit.MILLENNIA)\n+    {\n+      return value.with(Neo4JTemporalField.YEAR_OF_MILLENNIUM, 0);\n+    } else if (unit == ChronoUnit.CENTURIES)\n+    {\n+      return value.with(Neo4JTemporalField.YEAR_OF_CENTURY, 0);\n+    } else if (unit == ChronoUnit.DECADES)\n+    {\n+      return value.with(Neo4JTemporalField.YEAR_OF_DECADE, 0);\n+    } else if (unit == ChronoUnit.YEARS)\n+    {\n+      return value.with(TemporalAdjusters.firstDayOfYear());\n+    } else if (unit == IsoFields.WEEK_BASED_YEARS)\n+    {\n+      return value.with(IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1).with(ChronoField.DAY_OF_WEEK, 1);\n+    } else if (unit == IsoFields.QUARTER_YEARS)\n+    {\n+      return value.with(IsoFields.DAY_OF_QUARTER, 1);\n+    } else if (unit == ChronoUnit.MONTHS)\n+    {\n+      return value.with(TemporalAdjusters.firstDayOfMonth());\n+    } else if (unit == ChronoUnit.WEEKS)\n+    {\n+      return value.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));\n+    } else if (unit == ChronoUnit.DAYS)\n+    {\n+      return value;\n+    } else\n+    {\n+      throw new UnsupportedTemporalUnitException(\"Unit too small for truncation: \" + unit);\n+    }\n+  }\n+\n+  static DateBuilder builder(Supplier<ZoneId> defaultZone)\n+  {\n+    return new DateBuilder(defaultZone);\n+  }\n+\n+  private final LocalDate value;\n+\n+  private DateValue(LocalDate value)\n+  {\n+    this.value = value;\n+  }\n+\n+  @Override\n+  int unsafeCompareTo(Value otherValue)\n+  {\n+    DateValue other = (DateValue) otherValue;\n+    return value.compareTo(other.value);\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"Date\";\n+  }\n+\n+  @Override\n+  LocalDate temporal()\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  LocalDate getDatePart()\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  LocalTime getLocalTimePart()\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the time of: %s\", this));\n+  }\n+\n+  @Override\n+  OffsetTime getTimePart(Supplier<ZoneId> defaultZone)\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the time of: %s\", this));\n+  }\n+\n+  @Override\n+  ZoneId getZoneId(Supplier<ZoneId> defaultZone)\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the time zone of: %s\", this));\n+  }\n+\n+  @Override\n+  ZoneId getZoneId()\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the timezone of: %s\", this));\n+  }\n+\n+  @Override\n+  ZoneOffset getZoneOffset()\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the offset of: %s\", this));\n+  }\n+\n+  @Override\n+  public boolean supportsTimeZone()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  boolean hasTime()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean equals(Value other)\n+  {\n+    return other instanceof DateValue && value.equals(((DateValue) other).value);\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n+  {\n+    writer.writeDate(value);\n+  }\n+\n+  @Override\n+  public String prettyPrint()\n+  {\n+    return assertPrintable(() -> value.format(DateTimeFormatter.ISO_DATE));\n+  }\n+\n+  @Override\n+  public ValueGroup valueGroup()\n+  {\n+    return ValueGroup.DATE;\n+  }\n+\n+  @Override\n+  protected int computeHash()\n+  {\n+    return Long.hashCode(value.toEpochDay());\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapDate(this);\n+  }\n+\n+  @Override\n+  public DateValue add(DurationValue duration)\n+  {\n+    return replacement(assertValidArithmetic(\n+        () -> value.plusMonths(duration.totalMonths()).plusDays(duration.totalDays())));\n+  }\n+\n+  @Override\n+  public DateValue sub(DurationValue duration)\n+  {\n+    return replacement(assertValidArithmetic(\n+        () -> value.minusMonths(duration.totalMonths()).minusDays(duration.totalDays())));\n+  }\n+\n+  @Override\n+  DateValue replacement(LocalDate date)\n+  {\n+    return date == value ? this : new DateValue(date);\n+  }\n+\n+  static final boolean QUARTER_DATES = flag(DateValue.class, \"QUARTER_DATES\", true);\n+  /**\n+   * The regular expression pattern for parsing dates. All fields come in two versions - long and short form, the\n+   * long form is for formats containing dashes, the short form is for formats without dashes. The long format is\n+   * the only one that handles signed years, since that is how the only case that supports years with other than 4\n+   * numbers, and not having dashes then would make the format ambiguous. In order to not have two cases that can\n+   * parse only the year, we let the long case handle that.\n+   * <p/>\n+   * Valid formats:\n+   * <ul>\n+   * <li>Year:<ul>\n+   * <li>{@code [0-9]{4}} - unique without dashes, since it is the only one 4 numbers long<br>\n+   * Parsing: {@code longYear}</li>\n+   * <li>{@code [+-] [0-9]{1,9}}<br>\n+   * Parsing: {@code longYear}</li>\n+   * </ul></li>\n+   * <li>Year & Month:<ul>\n+   * <li>{@code [0-9]{4} [0-9]{2}} - unique without dashes, since it is the only one 6 numbers long<br>\n+   * Parsing: {@code shortYear, shortMonth}</li>\n+   * <li>{@code [0-9]{4} - [0-9]{1,2}}<br>\n+   * Parsing: {@code longYear, longMonth}</li>\n+   * <li>{@code [+-] [0-9]{1,9} - [0-9]{1,2}}<br>\n+   * Parsing: {@code longYear, longMonth}</li>\n+   * </ul></li>\n+   * <li>Calendar date (Year & Month & Day):<ul>\n+   * <li>{@code [0-9]{4} [0-9]{2} [0-9]{2}} - unique without dashes, since it is the only one 8 numbers long<br>\n+   * Parsing: {@code shortYear, shortMonth, shortDay}</li>\n+   * <li>{@code [0-9]{4} - [0-9]{1,2} - [0-9]{1,2}}<br>\n+   * Parsing: {@code longYear, longMonth, longDay}</li>\n+   * <li>{@code [+-] [0-9]{1,9} - [0-9]{1,2} - [0-9]{1,2}}<br>\n+   * Parsing: {@code longYear, longMonth, longDay}</li>\n+   * </ul></li>\n+   * <li>Year & Week:<ul>\n+   * <li>{@code [0-9]{4} W [0-9]{2}}<br>\n+   * Parsing: {@code shortYear, shortWeek}</li>\n+   * <li>{@code [0-9]{4} - W [0-9]{2}}<br>\n+   * Parsing: {@code longYear, longWeek}</li>\n+   * <li>{@code [+-] [0-9]{1,9} - W [0-9]{2}}<br>\n+   * Parsing: {@code longYear, longWeek}</li>\n+   * </ul></li>\n+   * <li>Week date (year & week & day of week):<ul>\n+   * <li>{@code [0-9]{4} W [0-9]{2} [0-9]} - unique without dashes, contains W followed by 2 numbers<br>\n+   * Parsing: {@code shortYear, shortWeek, shortDOW}</li>\n+   * <li>{@code [0-9]{4} - W [0-9]{1,2} - [0-9]}<br>\n+   * Parsing: {@code longYear, longWeek, longDOW}</li>\n+   * <li>{@code [+-] [0-9]{1,9} - W [0-9]{2} - [0-9]}<br>\n+   * Parsing: {@code longYear, longWeek, longDOW}</li>\n+   * </ul></li>\n+   * <li>Ordinal date (year & day of year):<ul>\n+   * <li>{@code [0-9]{4} [0-9]{3}} - unique without dashes, since it is the only one 7 number long<br>\n+   * Parsing: {@code shortYear, shortDOY}</li>\n+   * <li>{@code [0-9]{4} - [0-9]{3}} - needs to be exactly 3 numbers long to distinguish from Year & Month<br>\n+   * Parsing: {@code longYear, longDOY}</li>\n+   * <li>{@code [+-] [0-9]{1,9} - [0-9]{3}} - needs to be exactly 3 numbers long to distinguish from Year & Month<br>\n+   * Parsing: {@code longYear, longDOY}</li>\n+   * </ul></li>\n+   * </ul>\n+   */\n+  static final String DATE_PATTERN = \"(?:\"\n+      // short formats - without dashes:\n+      + \"(?<shortYear>[0-9]{4})(?:\"\n+      + \"(?<shortMonth>[0-9]{2})(?<shortDay>[0-9]{2})?|\" // calendar date\n+      + \"W(?<shortWeek>[0-9]{2})(?<shortDOW>[0-9])?|\" // week date\n+      + (QUARTER_DATES ? \"Q(?<shortQuarter>[0-9])(?<shortDOQ>[0-9]{2})?|\" : \"\")\n+      // quarter date\n+      + \"(?<shortDOY>[0-9]{3}))\" + \"|\" // ordinal date\n+      // long formats - includes dashes:\n+      + \"(?<longYear>(?:[0-9]{4}|[+-][0-9]{1,9}))(?:\"\n+      + \"-(?<longMonth>[0-9]{1,2})(?:-(?<longDay>[0-9]{1,2}))?|\" // calendar date\n+      + \"-W(?<longWeek>[0-9]{1,2})(?:-(?<longDOW>[0-9]))?|\" // week date\n+      + (QUARTER_DATES ? \"-Q(?<longQuarter>[0-9])(?:-(?<longDOQ>[0-9]{1,2}))?|\" : \"\")\n+      // quarter date\n+      + \"-(?<longDOY>[0-9]{3}))?\" + \")\"; // ordinal date\n+  private static final Pattern PATTERN = Pattern.compile(DATE_PATTERN);\n+\n+  /**\n+   * Creates a {@link LocalDate} from a {@link Matcher} that matches the regular expression defined by\n+   * {@link #DATE_PATTERN}. The decision tree in the implementation of this method is guided by the parsing notes\n+   * for {@link #DATE_PATTERN}.\n+   *\n+   * @param matcher a {@link Matcher} that matches the regular expression defined in {@link #DATE_PATTERN}.\n+   * @return a {@link LocalDate} parsed from the given {@link Matcher}.\n+   */\n+  static LocalDate parseDate(Matcher matcher)\n+  {\n+    String longYear = matcher.group(\"longYear\");\n+    if (longYear != null)\n+    {\n+      return parse(matcher, parseInt(longYear),\n+          \"longMonth\", \"longDay\", \"longWeek\", \"longDOW\", \"longQuarter\", \"longDOQ\", \"longDOY\");\n+    } else\n+    {\n+      return parse(matcher, parseInt(matcher.group(\"shortYear\")),\n+          \"shortMonth\", \"shortDay\", \"shortWeek\", \"shortDOW\", \"shortQuarter\", \"shortDOQ\", \"shortDOY\");\n+    }\n+  }\n+\n+  private static LocalDate parse(\n+      Matcher matcher, int year,\n+      String MONTH, String DAY, String WEEK, String DOW, String QUARTER, String DOQ, String DOY)\n+  {\n+    String month = matcher.group(MONTH);\n+    if (month != null)\n+    {\n+      return assertParsable(() -> LocalDate.of(year, parseInt(month), optInt(matcher.group(DAY))));\n+    }\n+    String week = matcher.group(WEEK);\n+    if (week != null)\n+    {\n+      return assertParsable(() -> localWeekDate(year, parseInt(week), optInt(matcher.group(DOW))));\n+    }\n+    String quarter = matcher.group(QUARTER);\n+    if (quarter != null)\n+    {\n+      return assertParsable(\n+          () -> localQuarterDate(year, parseInt(quarter), optInt(matcher.group(DOQ))));\n+    }\n+    String doy = matcher.group(DOY);\n+    if (doy != null)\n+    {\n+      return assertParsable(() -> LocalDate.ofYearDay(year, parseInt(doy)));\n+    }\n+    return assertParsable(() -> LocalDate.of(year, 1, 1));\n+  }\n+\n+  private static DateValue parse(Matcher matcher)\n+  {\n+    return new DateValue(parseDate(matcher));\n+  }\n+\n+  private static int optInt(String value)\n+  {\n+    return value == null ? 1 : parseInt(value);\n+  }\n+\n+  private static LocalDate localWeekDate(int year, int week, int dayOfWeek)\n+  {\n+    LocalDate weekOne = LocalDate.of(year, 1, 4); // the fourth is guaranteed to be in week 1 by definition\n+    LocalDate withWeek = weekOne.with(IsoFields.WEEK_OF_WEEK_BASED_YEAR, week);\n+    // the implementation of WEEK_OF_WEEK_BASED_YEAR uses addition to adjust the date, this means that it accepts\n+    // week 53 of years that don't have 53 weeks, so we have to guard for this:\n+    if (week == 53 && withWeek.get(IsoFields.WEEK_BASED_YEAR) != year)\n+    {\n+      throw new InvalidValuesArgumentException(\n+          String.format(\"Year %d does not contain %d weeks.\", year, week));\n+    }\n+    return withWeek.with(ChronoField.DAY_OF_WEEK, dayOfWeek);\n+  }\n+\n+  private static LocalDate localQuarterDate(int year, int quarter, int dayOfQuarter)\n+  {\n+    // special handling for the range of Q1 and Q2, since they are shorter than Q3 and Q4\n+    if (quarter == 2 && dayOfQuarter == 92)\n+    {\n+      throw new InvalidValuesArgumentException(\"Quarter 2 only has 91 days.\");\n+    }\n+    // instantiate the yearDate now, because we use it to know if it is a leap year\n+    LocalDate yearDate = LocalDate.ofYearDay(year, dayOfQuarter); // guess on the day\n+    if (quarter == 1 && dayOfQuarter > 90 && (!yearDate.isLeapYear() || dayOfQuarter == 92))\n+    {\n+      throw new InvalidValuesArgumentException(String.format(\n+          \"Quarter 1 of %d only has %d days.\", year, yearDate.isLeapYear() ? 91 : 90));\n+    }\n+    return yearDate\n+        .with(IsoFields.QUARTER_OF_YEAR, quarter)\n+        .with(IsoFields.DAY_OF_QUARTER, dayOfQuarter);\n+  }\n+\n+  static final LocalDate DEFAULT_CALENDER_DATE = LocalDate\n+      .of(TemporalFields.year.defaultValue, TemporalFields.month.defaultValue, TemporalFields.day.defaultValue);\n \n+  private static class DateBuilder extends Builder<DateValue>\n+  {\n     @Override\n-    public String prettyPrint()\n+    protected boolean supportsTimeZone()\n     {\n-        return assertPrintable( () -> value.format( DateTimeFormatter.ISO_DATE ) );\n+      return false;\n     }\n \n     @Override\n-    public ValueGroup valueGroup()\n+    protected boolean supportsEpoch()\n     {\n-        return ValueGroup.DATE;\n+      return false;\n     }\n \n-    @Override\n-    protected int computeHash()\n+    DateBuilder(Supplier<ZoneId> defaultZone)\n     {\n-        return Long.hashCode( value.toEpochDay() );\n+      super(defaultZone);\n     }\n \n     @Override\n-    public <T> T map( ValueMapper<T> mapper )\n+    protected final boolean supportsDate()\n     {\n-        return mapper.mapDate( this );\n+      return true;\n     }\n \n     @Override\n-    public DateValue add( DurationValue duration )\n+    protected final boolean supportsTime()\n     {\n-        return replacement( assertValidArithmetic(\n-                () -> value.plusMonths( duration.totalMonths() ).plusDays( duration.totalDays() ) ) );\n+      return false;\n     }\n \n-    @Override\n-    public DateValue sub( DurationValue duration )\n+    private LocalDate getDateOf(org.neo4j.values.AnyValue temporal)\n     {\n-        return replacement( assertValidArithmetic(\n-                () -> value.minusMonths( duration.totalMonths() ).minusDays( duration.totalDays() ) ) );\n+      if (temporal instanceof TemporalValue)\n+      {\n+        TemporalValue v = (TemporalValue) temporal;\n+        return v.getDatePart();\n+      }\n+      throw new InvalidValuesArgumentException(String.format(\"Cannot construct date from: %s\", temporal));\n     }\n \n     @Override\n-    DateValue replacement( LocalDate date )\n-    {\n-        return date == value ? this : new DateValue( date );\n-    }\n-\n-    static final boolean QUARTER_DATES = flag( DateValue.class, \"QUARTER_DATES\", true );\n-    /**\n-     * The regular expression pattern for parsing dates. All fields come in two versions - long and short form, the\n-     * long form is for formats containing dashes, the short form is for formats without dashes. The long format is\n-     * the only one that handles signed years, since that is how the only case that supports years with other than 4\n-     * numbers, and not having dashes then would make the format ambiguous. In order to not have two cases that can\n-     * parse only the year, we let the long case handle that.\n-     * <p/>\n-     * Valid formats:\n-     * <ul>\n-     * <li>Year:<ul>\n-     * <li>{@code [0-9]{4}} - unique without dashes, since it is the only one 4 numbers long<br>\n-     * Parsing: {@code longYear}</li>\n-     * <li>{@code [+-] [0-9]{1,9}}<br>\n-     * Parsing: {@code longYear}</li>\n-     * </ul></li>\n-     * <li>Year & Month:<ul>\n-     * <li>{@code [0-9]{4} [0-9]{2}} - unique without dashes, since it is the only one 6 numbers long<br>\n-     * Parsing: {@code shortYear, shortMonth}</li>\n-     * <li>{@code [0-9]{4} - [0-9]{1,2}}<br>\n-     * Parsing: {@code longYear, longMonth}</li>\n-     * <li>{@code [+-] [0-9]{1,9} - [0-9]{1,2}}<br>\n-     * Parsing: {@code longYear, longMonth}</li>\n-     * </ul></li>\n-     * <li>Calendar date (Year & Month & Day):<ul>\n-     * <li>{@code [0-9]{4} [0-9]{2} [0-9]{2}} - unique without dashes, since it is the only one 8 numbers long<br>\n-     * Parsing: {@code shortYear, shortMonth, shortDay}</li>\n-     * <li>{@code [0-9]{4} - [0-9]{1,2} - [0-9]{1,2}}<br>\n-     * Parsing: {@code longYear, longMonth, longDay}</li>\n-     * <li>{@code [+-] [0-9]{1,9} - [0-9]{1,2} - [0-9]{1,2}}<br>\n-     * Parsing: {@code longYear, longMonth, longDay}</li>\n-     * </ul></li>\n-     * <li>Year & Week:<ul>\n-     * <li>{@code [0-9]{4} W [0-9]{2}}<br>\n-     * Parsing: {@code shortYear, shortWeek}</li>\n-     * <li>{@code [0-9]{4} - W [0-9]{2}}<br>\n-     * Parsing: {@code longYear, longWeek}</li>\n-     * <li>{@code [+-] [0-9]{1,9} - W [0-9]{2}}<br>\n-     * Parsing: {@code longYear, longWeek}</li>\n-     * </ul></li>\n-     * <li>Week date (year & week & day of week):<ul>\n-     * <li>{@code [0-9]{4} W [0-9]{2} [0-9]} - unique without dashes, contains W followed by 2 numbers<br>\n-     * Parsing: {@code shortYear, shortWeek, shortDOW}</li>\n-     * <li>{@code [0-9]{4} - W [0-9]{1,2} - [0-9]}<br>\n-     * Parsing: {@code longYear, longWeek, longDOW}</li>\n-     * <li>{@code [+-] [0-9]{1,9} - W [0-9]{2} - [0-9]}<br>\n-     * Parsing: {@code longYear, longWeek, longDOW}</li>\n-     * </ul></li>\n-     * <li>Ordinal date (year & day of year):<ul>\n-     * <li>{@code [0-9]{4} [0-9]{3}} - unique without dashes, since it is the only one 7 number long<br>\n-     * Parsing: {@code shortYear, shortDOY}</li>\n-     * <li>{@code [0-9]{4} - [0-9]{3}} - needs to be exactly 3 numbers long to distinguish from Year & Month<br>\n-     * Parsing: {@code longYear, longDOY}</li>\n-     * <li>{@code [+-] [0-9]{1,9} - [0-9]{3}} - needs to be exactly 3 numbers long to distinguish from Year & Month<br>\n-     * Parsing: {@code longYear, longDOY}</li>\n-     * </ul></li>\n-     * </ul>\n-     */\n-    static final String DATE_PATTERN = \"(?:\"\n-                                       // short formats - without dashes:\n-                                       + \"(?<shortYear>[0-9]{4})(?:\"\n-                                       + \"(?<shortMonth>[0-9]{2})(?<shortDay>[0-9]{2})?|\" // calendar date\n-                                       + \"W(?<shortWeek>[0-9]{2})(?<shortDOW>[0-9])?|\" // week date\n-                                       + (QUARTER_DATES ? \"Q(?<shortQuarter>[0-9])(?<shortDOQ>[0-9]{2})?|\" : \"\")\n-                                       // quarter date\n-                                       + \"(?<shortDOY>[0-9]{3}))\" + \"|\" // ordinal date\n-                                       // long formats - includes dashes:\n-                                       + \"(?<longYear>(?:[0-9]{4}|[+-][0-9]{1,9}))(?:\"\n-                                       + \"-(?<longMonth>[0-9]{1,2})(?:-(?<longDay>[0-9]{1,2}))?|\" // calendar date\n-                                       + \"-W(?<longWeek>[0-9]{1,2})(?:-(?<longDOW>[0-9]))?|\" // week date\n-                                       + (QUARTER_DATES ? \"-Q(?<longQuarter>[0-9])(?:-(?<longDOQ>[0-9]{1,2}))?|\" : \"\")\n-                                       // quarter date\n-                                       + \"-(?<longDOY>[0-9]{3}))?\" + \")\"; // ordinal date\n-    private static final Pattern PATTERN = Pattern.compile( DATE_PATTERN );\n-\n-    /**\n-     * Creates a {@link LocalDate} from a {@link Matcher} that matches the regular expression defined by\n-     * {@link #DATE_PATTERN}. The decision tree in the implementation of this method is guided by the parsing notes\n-     * for {@link #DATE_PATTERN}.\n-     *\n-     * @param matcher a {@link Matcher} that matches the regular expression defined in {@link #DATE_PATTERN}.\n-     * @return a {@link LocalDate} parsed from the given {@link Matcher}.\n-     */\n-    static LocalDate parseDate( Matcher matcher )\n-    {\n-        String longYear = matcher.group( \"longYear\" );\n-        if ( longYear != null )\n-        {\n-            return parse( matcher, parseInt( longYear ),\n-                    \"longMonth\", \"longDay\", \"longWeek\", \"longDOW\", \"longQuarter\", \"longDOQ\", \"longDOY\" );\n-        }\n-        else\n-        {\n-            return parse( matcher, parseInt( matcher.group( \"shortYear\" ) ),\n-                    \"shortMonth\", \"shortDay\", \"shortWeek\", \"shortDOW\", \"shortQuarter\", \"shortDOQ\", \"shortDOY\" );\n-        }\n-    }\n-\n-    private static LocalDate parse(\n-            Matcher matcher, int year,\n-            String MONTH, String DAY, String WEEK, String DOW, String QUARTER, String DOQ, String DOY )\n-    {\n-        String month = matcher.group( MONTH );\n-        if ( month != null )\n-        {\n-            return assertParsable( () -> LocalDate.of( year, parseInt( month ), optInt( matcher.group( DAY ) ) ) );\n-        }\n-        String week = matcher.group( WEEK );\n-        if ( week != null )\n-        {\n-            return assertParsable( () -> localWeekDate( year, parseInt( week ), optInt( matcher.group( DOW ) ) ) );\n-        }\n-        String quarter = matcher.group( QUARTER );\n-        if ( quarter != null )\n-        {\n-            return assertParsable(\n-                    () -> localQuarterDate( year, parseInt( quarter ), optInt( matcher.group( DOQ ) ) ) );\n-        }\n-        String doy = matcher.group( DOY );\n-        if ( doy != null )\n-        {\n-            return assertParsable( () -> LocalDate.ofYearDay( year, parseInt( doy ) ) );\n-        }\n-        return assertParsable( () -> LocalDate.of( year, 1, 1 ) );\n-    }\n-\n-    private static DateValue parse( Matcher matcher )\n-    {\n-        return new DateValue( parseDate( matcher ) );\n-    }\n-\n-    private static int optInt( String value )\n-    {\n-        return value == null ? 1 : parseInt( value );\n-    }\n-\n-    private static LocalDate localWeekDate( int year, int week, int dayOfWeek )\n-    {\n-        LocalDate weekOne = LocalDate.of( year, 1, 4 ); // the fourth is guaranteed to be in week 1 by definition\n-        LocalDate withWeek = weekOne.with( IsoFields.WEEK_OF_WEEK_BASED_YEAR, week );\n-        // the implementation of WEEK_OF_WEEK_BASED_YEAR uses addition to adjust the date, this means that it accepts\n-        // week 53 of years that don't have 53 weeks, so we have to guard for this:\n-        if ( week == 53 && withWeek.get( IsoFields.WEEK_BASED_YEAR ) != year )\n-        {\n-            throw new InvalidValuesArgumentException(\n-                    String.format( \"Year %d does not contain %d weeks.\", year, week ) );\n-        }\n-        return withWeek.with( ChronoField.DAY_OF_WEEK, dayOfWeek );\n-    }\n-\n-    private static LocalDate localQuarterDate( int year, int quarter, int dayOfQuarter )\n-    {\n-        // special handling for the range of Q1 and Q2, since they are shorter than Q3 and Q4\n-        if ( quarter == 2 && dayOfQuarter == 92 )\n-        {\n-            throw new InvalidValuesArgumentException( \"Quarter 2 only has 91 days.\" );\n-        }\n-        // instantiate the yearDate now, because we use it to know if it is a leap year\n-        LocalDate yearDate = LocalDate.ofYearDay( year, dayOfQuarter ); // guess on the day\n-        if ( quarter == 1 && dayOfQuarter > 90 && (!yearDate.isLeapYear() || dayOfQuarter == 92) )\n-        {\n-            throw new InvalidValuesArgumentException( String.format(\n-                    \"Quarter 1 of %d only has %d days.\", year, yearDate.isLeapYear() ? 91 : 90 ) );\n-        }\n-        return yearDate\n-                .with( IsoFields.QUARTER_OF_YEAR, quarter )\n-                .with( IsoFields.DAY_OF_QUARTER, dayOfQuarter );\n-    }\n-\n-    static final LocalDate DEFAULT_CALENDER_DATE = LocalDate\n-            .of( TemporalFields.year.defaultValue, TemporalFields.month.defaultValue, TemporalFields.day.defaultValue );\n-\n-    private static class DateBuilder extends Builder<DateValue>\n-    {\n-        @Override\n-        protected boolean supportsTimeZone()\n-        {\n-            return false;\n-        }\n-\n-        @Override\n-        protected boolean supportsEpoch()\n-        {\n-            return false;\n-        }\n-\n-        DateBuilder( Supplier<ZoneId> defaultZone )\n-        {\n-            super( defaultZone );\n-        }\n-\n-        @Override\n-        protected final boolean supportsDate()\n-        {\n-            return true;\n-        }\n-\n-        @Override\n-        protected final boolean supportsTime()\n-        {\n-            return false;\n-        }\n-\n-        private LocalDate getDateOf( org.neo4j.values.AnyValue temporal )\n-        {\n-            if ( temporal instanceof TemporalValue )\n-            {\n-                TemporalValue v = (TemporalValue) temporal;\n-                return v.getDatePart();\n-            }\n-            throw new InvalidValuesArgumentException( String.format( \"Cannot construct date from: %s\", temporal ) );\n-        }\n-\n-        @Override\n-        public DateValue buildInternal()\n-        {\n-            LocalDate result;\n-            if ( fields.containsKey( TemporalFields.date ) )\n-            {\n-                result = getDateOf( fields.get( TemporalFields.date ) );\n-            }\n-            else if ( fields.containsKey( TemporalFields.week ) )\n-            {\n-                // Be sure to be in the start of the week based year (which can be later than 1st Jan)\n-                result = DEFAULT_CALENDER_DATE\n-                        .with( IsoFields.WEEK_BASED_YEAR,\n-                                safeCastIntegral( TemporalFields.year.name(), fields.get( TemporalFields.year ),\n-                                        TemporalFields.year.defaultValue ) )\n-                        .with( IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1 )\n-                        .with( ChronoField.DAY_OF_WEEK, 1 );\n-            }\n-            else\n-            {\n-                result = DEFAULT_CALENDER_DATE;\n-            }\n-            result = assignAllFields( result );\n-            return date( result );\n-        }\n-\n-        DateValue selectDate( org.neo4j.values.AnyValue date )\n-        {\n-            if ( date instanceof DateValue )\n-            {\n-                return (DateValue) date;\n-            }\n-            return date( getDateOf( date ) );\n-        }\n-    }\n+    public DateValue buildInternal()\n+    {\n+      LocalDate result;\n+      if (fields.containsKey(TemporalFields.date))\n+      {\n+        result = getDateOf(fields.get(TemporalFields.date));\n+      } else if (fields.containsKey(TemporalFields.week))\n+      {\n+        // Be sure to be in the start of the week based year (which can be later than 1st Jan)\n+        result = DEFAULT_CALENDER_DATE\n+            .with(IsoFields.WEEK_BASED_YEAR,\n+                safeCastIntegral(TemporalFields.year.name(), fields.get(TemporalFields.year),\n+                    TemporalFields.year.defaultValue))\n+            .with(IsoFields.WEEK_OF_WEEK_BASED_YEAR, 1)\n+            .with(ChronoField.DAY_OF_WEEK, 1);\n+      } else\n+      {\n+        result = DEFAULT_CALENDER_DATE;\n+      }\n+      result = assignAllFields(result);\n+      return date(result);\n+    }\n+\n+    DateValue selectDate(org.neo4j.values.AnyValue date)\n+    {\n+      if (date instanceof DateValue)\n+      {\n+        return (DateValue) date;\n+      }\n+      return date(getDateOf(date));\n+    }\n+  }\n }\n",
            "diff_size": 883
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}