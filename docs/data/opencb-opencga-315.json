{
    "project_name": "opencb-opencga",
    "error_id": "315",
    "information": {
        "errors": [
            {
                "line": "434",
                "column": "27",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        @Override\n        public boolean equals(Object o) {\n            if (this == o){\n                return true;\n            }\n            if (o == null || getClass() != o.getClass()) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/315/SampleIndexConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/315/SampleIndexConfiguration.java\nindex c712fa65cf5..1eb9d1860d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/315/SampleIndexConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/315/SampleIndexConfiguration.java\n@@ -431,7 +431,7 @@ public class SampleIndexConfiguration {\n \n         @Override\n         public boolean equals(Object o) {\n-            if (this == o){\n+            if (this == o) {\n                 return true;\n             }\n             if (o == null || getClass() != o.getClass()) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/315/SampleIndexConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/315/SampleIndexConfiguration.java\nindex c712fa65cf5..8df8a6eec91 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/315/SampleIndexConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/315/SampleIndexConfiguration.java\n@@ -12,620 +12,620 @@ import static org.opencb.opencga.core.models.variant.VariantAnnotationConstants.\n \n public class SampleIndexConfiguration {\n \n-    public static final int DEFAULT_FILE_POSITION_SIZE_BITS = 3;\n-    private static final double[] QUAL_THRESHOLDS = new double[]{10, 20, 30};\n-    private static final double[] DP_THRESHOLDS = new double[]{5, 10, 15, 20, 30, 40, 50};\n-    private static final double[] DP_THRESHOLDS_NULLABLE = new double[]{5, 10, 15, 20, 30, 50};\n-    private final FileIndexConfiguration fileIndexConfiguration = new FileIndexConfiguration();\n-    private final AnnotationIndexConfiguration annotationIndexConfiguration = new AnnotationIndexConfiguration();\n-\n-    public static SampleIndexConfiguration backwardCompatibleConfiguration() {\n-        double[] backwardCompatibleThresholds = new double[]{0.001, 0.005, 0.01};\n-        SampleIndexConfiguration sampleIndexConfiguration = new SampleIndexConfiguration()\n-                .addFileIndexField(new IndexFieldConfiguration(\n-                        IndexFieldConfiguration.Source.FILE,\n-                        StudyEntry.FILTER,\n-                        IndexFieldConfiguration.Type.CATEGORICAL,\n-                        VCFConstants.PASSES_FILTERS_v4))\n-                .addFileIndexField(new IndexFieldConfiguration(\n-                        IndexFieldConfiguration.Source.FILE, StudyEntry.QUAL, QUAL_THRESHOLDS).setNullable(false))\n-                .addFileIndexField(new IndexFieldConfiguration(\n-                        IndexFieldConfiguration.Source.SAMPLE, VCFConstants.DEPTH_KEY, DP_THRESHOLDS).setNullable(false));\n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().getPopulationFrequency()\n-                .addPopulation(new Population(\"1kG_phase3\", \"ALL\"))\n-                .addPopulation(new Population(\"GNOMAD_GENOMES\", \"ALL\"))\n-                .setThresholds(backwardCompatibleThresholds);\n-\n-        sampleIndexConfiguration.getFileIndexConfiguration().setFilePositionBits(4);\n-\n-        // Ensure backward compatibility with these two params:\n-        sampleIndexConfiguration.addFileIndexField(new IndexFieldConfiguration(\n-                IndexFieldConfiguration.Source.SAMPLE, \"padding\", IndexFieldConfiguration.Type.CATEGORICAL,\n-                \"add_two_extra_bits\", \"to_allow_backward\", \"compatibility\"));\n-        sampleIndexConfiguration.getFileIndexConfiguration().setFixedFieldsFirst(false);\n-\n-        IndexFieldConfiguration biotypeConfiguration = new IndexFieldConfiguration(IndexFieldConfiguration.Source.ANNOTATION,\n-                \"biotype\",\n-                IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE)\n-                .setValues(\n-                        NONSENSE_MEDIATED_DECAY,\n-                        LINCRNA,\n-                        MIRNA,\n-                        RETAINED_INTRON,\n-                        SNRNA,\n-                        SNORNA,\n-                        \"other_non_pseudo_gene\",\n+  public static final int DEFAULT_FILE_POSITION_SIZE_BITS = 3;\n+  private static final double[] QUAL_THRESHOLDS = new double[] {10, 20, 30};\n+  private static final double[] DP_THRESHOLDS = new double[] {5, 10, 15, 20, 30, 40, 50};\n+  private static final double[] DP_THRESHOLDS_NULLABLE = new double[] {5, 10, 15, 20, 30, 50};\n+  private final FileIndexConfiguration fileIndexConfiguration = new FileIndexConfiguration();\n+  private final AnnotationIndexConfiguration annotationIndexConfiguration = new AnnotationIndexConfiguration();\n+\n+  public static SampleIndexConfiguration backwardCompatibleConfiguration() {\n+    double[] backwardCompatibleThresholds = new double[] {0.001, 0.005, 0.01};\n+    SampleIndexConfiguration sampleIndexConfiguration = new SampleIndexConfiguration()\n+        .addFileIndexField(new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.FILE,\n+            StudyEntry.FILTER,\n+            IndexFieldConfiguration.Type.CATEGORICAL,\n+            VCFConstants.PASSES_FILTERS_v4))\n+        .addFileIndexField(new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.FILE, StudyEntry.QUAL, QUAL_THRESHOLDS).setNullable(false))\n+        .addFileIndexField(new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.SAMPLE, VCFConstants.DEPTH_KEY, DP_THRESHOLDS).setNullable(false));\n+    sampleIndexConfiguration.getAnnotationIndexConfiguration().getPopulationFrequency()\n+        .addPopulation(new Population(\"1kG_phase3\", \"ALL\"))\n+        .addPopulation(new Population(\"GNOMAD_GENOMES\", \"ALL\"))\n+        .setThresholds(backwardCompatibleThresholds);\n+\n+    sampleIndexConfiguration.getFileIndexConfiguration().setFilePositionBits(4);\n+\n+    // Ensure backward compatibility with these two params:\n+    sampleIndexConfiguration.addFileIndexField(new IndexFieldConfiguration(\n+        IndexFieldConfiguration.Source.SAMPLE, \"padding\", IndexFieldConfiguration.Type.CATEGORICAL,\n+        \"add_two_extra_bits\", \"to_allow_backward\", \"compatibility\"));\n+    sampleIndexConfiguration.getFileIndexConfiguration().setFixedFieldsFirst(false);\n+\n+    IndexFieldConfiguration biotypeConfiguration = new IndexFieldConfiguration(IndexFieldConfiguration.Source.ANNOTATION,\n+        \"biotype\",\n+        IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE)\n+        .setValues(\n+            NONSENSE_MEDIATED_DECAY,\n+            LINCRNA,\n+            MIRNA,\n+            RETAINED_INTRON,\n+            SNRNA,\n+            SNORNA,\n+            \"other_non_pseudo_gene\",\n //                        \"other\",\n-                        PROTEIN_CODING\n-                ).setValuesMapping(new HashMap<>());\n-        biotypeConfiguration.getValuesMapping().put(LINCRNA, Arrays.asList(\n-                \"lncRNA\",\n-                NON_CODING,\n-                LINCRNA,\n-                \"macro_lncRNA\",\n-                ANTISENSE,\n-                SENSE_INTRONIC,\n-                SENSE_OVERLAPPING,\n-                THREEPRIME_OVERLAPPING_NCRNA,\n-                \"bidirectional_promoter_lncRNA\"));\n-        biotypeConfiguration.getValuesMapping().put(\"other_non_pseudo_gene\", Arrays.asList(\n-                PROCESSED_TRANSCRIPT,\n-                NON_STOP_DECAY,\n-                MISC_RNA,\n-                RRNA,\n-                MT_RRNA,\n-                MT_TRNA,\n-                IG_C_GENE,\n-                IG_D_GENE,\n-                IG_J_GENE,\n-                IG_V_GENE,\n-                TR_C_GENE,\n-                TR_D_GENE,\n-                TR_J_GENE,\n-                TR_V_GENE,\n-                NMD_TRANSCRIPT_VARIANT,\n-                TRANSCRIBED_UNPROCESSED_PSEUDGENE,\n-                AMBIGUOUS_ORF,\n-                KNOWN_NCRNA,\n-                RETROTRANSPOSED,\n-                LRG_GENE\n-        ));\n-        biotypeConfiguration.setNullable(false);\n-\n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().setBiotype(biotypeConfiguration);\n-        IndexFieldConfiguration consequenceType = new IndexFieldConfiguration(\n-                IndexFieldConfiguration.Source.ANNOTATION,\n-                \"consequenceType\",\n-                IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE)\n-                .setValues(\n-                        SPLICE_DONOR_VARIANT,\n-                        TRANSCRIPT_ABLATION,\n-                        TRANSCRIPT_AMPLIFICATION,\n-                        INITIATOR_CODON_VARIANT,\n-                        SPLICE_REGION_VARIANT,\n-                        INCOMPLETE_TERMINAL_CODON_VARIANT,\n-                        \"utr\",\n-                        \"mirna_tfbs\",\n-                        MISSENSE_VARIANT,\n-                        FRAMESHIFT_VARIANT,\n-                        INFRAME_DELETION,\n-                        INFRAME_INSERTION,\n-                        START_LOST,\n-                        STOP_GAINED,\n-                        STOP_LOST,\n-                        SPLICE_ACCEPTOR_VARIANT\n-                ).setValuesMapping(new HashMap<>());\n-        consequenceType.getValuesMapping().put(\"mirna_tfbs\", Arrays.asList(\n-                TF_BINDING_SITE_VARIANT,\n-                MATURE_MIRNA_VARIANT));\n-        consequenceType.getValuesMapping().put(\"utr\", Arrays.asList(\n-                THREE_PRIME_UTR_VARIANT,\n-                FIVE_PRIME_UTR_VARIANT));\n-        consequenceType.setNullable(false);\n-\n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().setConsequenceType(consequenceType);\n-\n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSource(\n-                new IndexFieldConfiguration(\n-                        IndexFieldConfiguration.Source.ANNOTATION, \"clinicalSource\",\n-                        IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE, \"cosmic\")\n-                        .setNullable(false));\n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSignificance(\n-                new IndexFieldConfiguration(\n-                        IndexFieldConfiguration.Source.ANNOTATION, \"clinicalSignificance\",\n-                        IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE,\n-                        ClinicalSignificance.likely_benign.toString(),\n-                        ClinicalSignificance.uncertain_significance.toString(),\n-                        ClinicalSignificance.likely_pathogenic.toString(),\n-                        ClinicalSignificance.pathogenic.toString(),\n-                        \"unused_target_drug\",\n-                        \"unused_pgx\",\n-                        \"unused_bit8\"\n-                ).setNullable(false));\n-\n-        return sampleIndexConfiguration;\n-    }\n-\n-    public static SampleIndexConfiguration defaultConfiguration() {\n-        SampleIndexConfiguration sampleIndexConfiguration = new SampleIndexConfiguration()\n-                .addPopulation(new Population(\"1kG_phase3\", \"ALL\"))\n-                .addPopulation(new Population(\"GNOMAD_GENOMES\", \"ALL\"))\n-                .addFileIndexField(new IndexFieldConfiguration(\n-                        IndexFieldConfiguration.Source.FILE,\n-                        StudyEntry.FILTER,\n-                        IndexFieldConfiguration.Type.CATEGORICAL,\n-                        VCFConstants.PASSES_FILTERS_v4))\n-                .addFileIndexField(new IndexFieldConfiguration(\n-                        IndexFieldConfiguration.Source.FILE, StudyEntry.QUAL, QUAL_THRESHOLDS).setNullable(false))\n-                .addFileIndexField(new IndexFieldConfiguration(\n-                        IndexFieldConfiguration.Source.SAMPLE, VCFConstants.DEPTH_KEY, DP_THRESHOLDS_NULLABLE).setNullable(true));\n-\n-        sampleIndexConfiguration.getFileIndexConfiguration()\n-                .setFilePositionBits(DEFAULT_FILE_POSITION_SIZE_BITS);\n-\n-        IndexFieldConfiguration biotypeConfiguration = new IndexFieldConfiguration(IndexFieldConfiguration.Source.ANNOTATION,\n-                \"biotype\",\n-                IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE)\n-                .setValues(\n-                        NONSENSE_MEDIATED_DECAY,\n-                        LINCRNA,\n-                        MIRNA,\n-                        RETAINED_INTRON,\n-                        SNRNA,\n-                        SNORNA,\n-                        \"other_non_pseudo_gene\",\n+            PROTEIN_CODING\n+        ).setValuesMapping(new HashMap<>());\n+    biotypeConfiguration.getValuesMapping().put(LINCRNA, Arrays.asList(\n+        \"lncRNA\",\n+        NON_CODING,\n+        LINCRNA,\n+        \"macro_lncRNA\",\n+        ANTISENSE,\n+        SENSE_INTRONIC,\n+        SENSE_OVERLAPPING,\n+        THREEPRIME_OVERLAPPING_NCRNA,\n+        \"bidirectional_promoter_lncRNA\"));\n+    biotypeConfiguration.getValuesMapping().put(\"other_non_pseudo_gene\", Arrays.asList(\n+        PROCESSED_TRANSCRIPT,\n+        NON_STOP_DECAY,\n+        MISC_RNA,\n+        RRNA,\n+        MT_RRNA,\n+        MT_TRNA,\n+        IG_C_GENE,\n+        IG_D_GENE,\n+        IG_J_GENE,\n+        IG_V_GENE,\n+        TR_C_GENE,\n+        TR_D_GENE,\n+        TR_J_GENE,\n+        TR_V_GENE,\n+        NMD_TRANSCRIPT_VARIANT,\n+        TRANSCRIBED_UNPROCESSED_PSEUDGENE,\n+        AMBIGUOUS_ORF,\n+        KNOWN_NCRNA,\n+        RETROTRANSPOSED,\n+        LRG_GENE\n+    ));\n+    biotypeConfiguration.setNullable(false);\n+\n+    sampleIndexConfiguration.getAnnotationIndexConfiguration().setBiotype(biotypeConfiguration);\n+    IndexFieldConfiguration consequenceType = new IndexFieldConfiguration(\n+        IndexFieldConfiguration.Source.ANNOTATION,\n+        \"consequenceType\",\n+        IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE)\n+        .setValues(\n+            SPLICE_DONOR_VARIANT,\n+            TRANSCRIPT_ABLATION,\n+            TRANSCRIPT_AMPLIFICATION,\n+            INITIATOR_CODON_VARIANT,\n+            SPLICE_REGION_VARIANT,\n+            INCOMPLETE_TERMINAL_CODON_VARIANT,\n+            \"utr\",\n+            \"mirna_tfbs\",\n+            MISSENSE_VARIANT,\n+            FRAMESHIFT_VARIANT,\n+            INFRAME_DELETION,\n+            INFRAME_INSERTION,\n+            START_LOST,\n+            STOP_GAINED,\n+            STOP_LOST,\n+            SPLICE_ACCEPTOR_VARIANT\n+        ).setValuesMapping(new HashMap<>());\n+    consequenceType.getValuesMapping().put(\"mirna_tfbs\", Arrays.asList(\n+        TF_BINDING_SITE_VARIANT,\n+        MATURE_MIRNA_VARIANT));\n+    consequenceType.getValuesMapping().put(\"utr\", Arrays.asList(\n+        THREE_PRIME_UTR_VARIANT,\n+        FIVE_PRIME_UTR_VARIANT));\n+    consequenceType.setNullable(false);\n+\n+    sampleIndexConfiguration.getAnnotationIndexConfiguration().setConsequenceType(consequenceType);\n+\n+    sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSource(\n+        new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.ANNOTATION, \"clinicalSource\",\n+            IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE, \"cosmic\")\n+            .setNullable(false));\n+    sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSignificance(\n+        new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.ANNOTATION, \"clinicalSignificance\",\n+            IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE,\n+            ClinicalSignificance.likely_benign.toString(),\n+            ClinicalSignificance.uncertain_significance.toString(),\n+            ClinicalSignificance.likely_pathogenic.toString(),\n+            ClinicalSignificance.pathogenic.toString(),\n+            \"unused_target_drug\",\n+            \"unused_pgx\",\n+            \"unused_bit8\"\n+        ).setNullable(false));\n+\n+    return sampleIndexConfiguration;\n+  }\n+\n+  public static SampleIndexConfiguration defaultConfiguration() {\n+    SampleIndexConfiguration sampleIndexConfiguration = new SampleIndexConfiguration()\n+        .addPopulation(new Population(\"1kG_phase3\", \"ALL\"))\n+        .addPopulation(new Population(\"GNOMAD_GENOMES\", \"ALL\"))\n+        .addFileIndexField(new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.FILE,\n+            StudyEntry.FILTER,\n+            IndexFieldConfiguration.Type.CATEGORICAL,\n+            VCFConstants.PASSES_FILTERS_v4))\n+        .addFileIndexField(new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.FILE, StudyEntry.QUAL, QUAL_THRESHOLDS).setNullable(false))\n+        .addFileIndexField(new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.SAMPLE, VCFConstants.DEPTH_KEY, DP_THRESHOLDS_NULLABLE).setNullable(true));\n+\n+    sampleIndexConfiguration.getFileIndexConfiguration()\n+        .setFilePositionBits(DEFAULT_FILE_POSITION_SIZE_BITS);\n+\n+    IndexFieldConfiguration biotypeConfiguration = new IndexFieldConfiguration(IndexFieldConfiguration.Source.ANNOTATION,\n+        \"biotype\",\n+        IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE)\n+        .setValues(\n+            NONSENSE_MEDIATED_DECAY,\n+            LINCRNA,\n+            MIRNA,\n+            RETAINED_INTRON,\n+            SNRNA,\n+            SNORNA,\n+            \"other_non_pseudo_gene\",\n //                        \"other\",\n-                        PROTEIN_CODING\n-                ).setValuesMapping(new HashMap<>());\n-        biotypeConfiguration.getValuesMapping().put(LINCRNA, Arrays.asList(\n-                \"lncRNA\",\n-                NON_CODING,\n-                LINCRNA,\n-                \"macro_lncRNA\",\n-                ANTISENSE,\n-                SENSE_INTRONIC,\n-                SENSE_OVERLAPPING,\n-                THREEPRIME_OVERLAPPING_NCRNA,\n-                \"bidirectional_promoter_lncRNA\"));\n-        biotypeConfiguration.getValuesMapping().put(\"other_non_pseudo_gene\", Arrays.asList(\n-                PROCESSED_TRANSCRIPT,\n-                NON_STOP_DECAY,\n-                MISC_RNA,\n-                RRNA,\n-                MT_RRNA,\n-                MT_TRNA,\n-                IG_C_GENE,\n-                IG_D_GENE,\n-                IG_J_GENE,\n-                IG_V_GENE,\n-                TR_C_GENE,\n-                TR_D_GENE,\n-                TR_J_GENE,\n-                TR_V_GENE,\n-                NMD_TRANSCRIPT_VARIANT,\n-                TRANSCRIBED_UNPROCESSED_PSEUDGENE,\n-                AMBIGUOUS_ORF,\n-                KNOWN_NCRNA,\n-                RETROTRANSPOSED,\n-                LRG_GENE\n-        ));\n-\n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().setBiotype(biotypeConfiguration);\n-        IndexFieldConfiguration consequenceType = new IndexFieldConfiguration(\n-                IndexFieldConfiguration.Source.ANNOTATION,\n-                \"consequenceType\",\n-                IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE)\n-                .setValues(\n-                        MISSENSE_VARIANT,\n-                        FRAMESHIFT_VARIANT,\n-                        INFRAME_DELETION,\n-                        INFRAME_INSERTION,\n-                        START_LOST,\n-                        STOP_GAINED,\n-                        STOP_LOST,\n-                        SPLICE_ACCEPTOR_VARIANT,\n-                        SPLICE_DONOR_VARIANT,\n-                        TRANSCRIPT_ABLATION,\n-                        TRANSCRIPT_AMPLIFICATION,\n-                        INITIATOR_CODON_VARIANT,\n-                        SPLICE_REGION_VARIANT,\n-                        INCOMPLETE_TERMINAL_CODON_VARIANT,\n-                        FEATURE_TRUNCATION,\n-                        SYNONYMOUS_VARIANT,\n-                        REGULATORY_REGION_VARIANT,\n-                        TF_BINDING_SITE_VARIANT,\n-                        MATURE_MIRNA_VARIANT,\n-                        UPSTREAM_GENE_VARIANT,\n-                        DOWNSTREAM_GENE_VARIANT,\n-                        THREE_PRIME_UTR_VARIANT,\n-                        FIVE_PRIME_UTR_VARIANT,\n-                        INTRON_VARIANT\n-                ).setValuesMapping(new HashMap<>());\n-\n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().setConsequenceType(consequenceType);\n-\n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSignificance(\n-                        new IndexFieldConfiguration(\n-                                IndexFieldConfiguration.Source.ANNOTATION, \"clinicalSignificance\",\n-                                IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE,\n-                                ClinicalSignificance.benign.toString(),\n-                                ClinicalSignificance.likely_benign.toString(),\n+            PROTEIN_CODING\n+        ).setValuesMapping(new HashMap<>());\n+    biotypeConfiguration.getValuesMapping().put(LINCRNA, Arrays.asList(\n+        \"lncRNA\",\n+        NON_CODING,\n+        LINCRNA,\n+        \"macro_lncRNA\",\n+        ANTISENSE,\n+        SENSE_INTRONIC,\n+        SENSE_OVERLAPPING,\n+        THREEPRIME_OVERLAPPING_NCRNA,\n+        \"bidirectional_promoter_lncRNA\"));\n+    biotypeConfiguration.getValuesMapping().put(\"other_non_pseudo_gene\", Arrays.asList(\n+        PROCESSED_TRANSCRIPT,\n+        NON_STOP_DECAY,\n+        MISC_RNA,\n+        RRNA,\n+        MT_RRNA,\n+        MT_TRNA,\n+        IG_C_GENE,\n+        IG_D_GENE,\n+        IG_J_GENE,\n+        IG_V_GENE,\n+        TR_C_GENE,\n+        TR_D_GENE,\n+        TR_J_GENE,\n+        TR_V_GENE,\n+        NMD_TRANSCRIPT_VARIANT,\n+        TRANSCRIBED_UNPROCESSED_PSEUDGENE,\n+        AMBIGUOUS_ORF,\n+        KNOWN_NCRNA,\n+        RETROTRANSPOSED,\n+        LRG_GENE\n+    ));\n+\n+    sampleIndexConfiguration.getAnnotationIndexConfiguration().setBiotype(biotypeConfiguration);\n+    IndexFieldConfiguration consequenceType = new IndexFieldConfiguration(\n+        IndexFieldConfiguration.Source.ANNOTATION,\n+        \"consequenceType\",\n+        IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE)\n+        .setValues(\n+            MISSENSE_VARIANT,\n+            FRAMESHIFT_VARIANT,\n+            INFRAME_DELETION,\n+            INFRAME_INSERTION,\n+            START_LOST,\n+            STOP_GAINED,\n+            STOP_LOST,\n+            SPLICE_ACCEPTOR_VARIANT,\n+            SPLICE_DONOR_VARIANT,\n+            TRANSCRIPT_ABLATION,\n+            TRANSCRIPT_AMPLIFICATION,\n+            INITIATOR_CODON_VARIANT,\n+            SPLICE_REGION_VARIANT,\n+            INCOMPLETE_TERMINAL_CODON_VARIANT,\n+            FEATURE_TRUNCATION,\n+            SYNONYMOUS_VARIANT,\n+            REGULATORY_REGION_VARIANT,\n+            TF_BINDING_SITE_VARIANT,\n+            MATURE_MIRNA_VARIANT,\n+            UPSTREAM_GENE_VARIANT,\n+            DOWNSTREAM_GENE_VARIANT,\n+            THREE_PRIME_UTR_VARIANT,\n+            FIVE_PRIME_UTR_VARIANT,\n+            INTRON_VARIANT\n+        ).setValuesMapping(new HashMap<>());\n+\n+    sampleIndexConfiguration.getAnnotationIndexConfiguration().setConsequenceType(consequenceType);\n+\n+    sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSignificance(\n+        new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.ANNOTATION, \"clinicalSignificance\",\n+            IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE,\n+            ClinicalSignificance.benign.toString(),\n+            ClinicalSignificance.likely_benign.toString(),\n //                                ClinicalSignificance.VUS.toString(),\n-                                ClinicalSignificance.uncertain_significance.toString(),\n-                                ClinicalSignificance.likely_pathogenic.toString(),\n-                                ClinicalSignificance.pathogenic.toString())\n-                                .setNullable(false));\n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSource(\n-                new IndexFieldConfiguration(\n-                        IndexFieldConfiguration.Source.ANNOTATION, \"clinicalSource\",\n-                        IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE,\n-                        \"clinvar\",\n-                        \"cosmic\")\n-                        .setNullable(false)\n-        );\n-\n-        return sampleIndexConfiguration;\n-    }\n-\n-    public void validate() {\n-        addMissingValues(defaultConfiguration());\n-\n-        for (IndexFieldConfiguration customField : fileIndexConfiguration.getCustomFields()) {\n-            customField.validate();\n-        }\n-        for (IndexFieldConfiguration configuration : annotationIndexConfiguration.getPopulationFrequency().toIndexFieldConfiguration()) {\n-            configuration.validate();\n-        }\n-        annotationIndexConfiguration.biotype.validate();\n-        annotationIndexConfiguration.consequenceType.validate();\n-        annotationIndexConfiguration.clinicalSignificance.validate();\n-        annotationIndexConfiguration.clinicalSource.validate();\n-    }\n-\n-    public void addMissingValues(SampleIndexConfiguration defaultConfiguration) {\n-        if (fileIndexConfiguration.getCustomFields().isEmpty()) {\n-            fileIndexConfiguration.getCustomFields().addAll(defaultConfiguration.fileIndexConfiguration.customFields);\n-        }\n-        if (annotationIndexConfiguration.getPopulationFrequency() == null) {\n-            annotationIndexConfiguration.setPopulationFrequency(defaultConfiguration.annotationIndexConfiguration.populationFrequency);\n-        }\n-        if (annotationIndexConfiguration.getPopulationFrequency().getThresholds() == null) {\n-            annotationIndexConfiguration.getPopulationFrequency()\n-                    .setThresholds(defaultConfiguration.annotationIndexConfiguration.populationFrequency.thresholds);\n-        }\n-        if (CollectionUtils.isEmpty(annotationIndexConfiguration.getPopulationFrequency().getPopulations())) {\n-            annotationIndexConfiguration.getPopulationFrequency()\n-                    .setPopulations(defaultConfiguration.annotationIndexConfiguration.populationFrequency.populations);\n-        }\n-        if (annotationIndexConfiguration.biotype == null) {\n-            annotationIndexConfiguration.biotype = defaultConfiguration.annotationIndexConfiguration.biotype;\n-        }\n-        if (annotationIndexConfiguration.consequenceType == null) {\n-            annotationIndexConfiguration.consequenceType = defaultConfiguration.annotationIndexConfiguration.consequenceType;\n-        }\n-        if (annotationIndexConfiguration.clinicalSignificance == null) {\n-            annotationIndexConfiguration.clinicalSignificance = defaultConfiguration.annotationIndexConfiguration.clinicalSignificance;\n-        }\n-        if (annotationIndexConfiguration.clinicalSource == null) {\n-            annotationIndexConfiguration.clinicalSource = defaultConfiguration.annotationIndexConfiguration.clinicalSource;\n-        }\n-    }\n-\n-    public static class FileIndexConfiguration {\n-\n-        private final List<IndexFieldConfiguration> customFields = new ArrayList<>();\n-        private int filePositionBits = DEFAULT_FILE_POSITION_SIZE_BITS;\n-        private boolean fixedFieldsFirst = true;\n-\n-        public FileIndexConfiguration() {\n-        }\n-\n-        public FileIndexConfiguration(int filePositionBits, boolean fixedFieldsFirst) {\n-            this.filePositionBits = filePositionBits;\n-            this.fixedFieldsFirst = fixedFieldsFirst;\n-        }\n-\n-        public List<IndexFieldConfiguration> getCustomFields() {\n-            return customFields;\n-        }\n-\n-        public int getFilePositionBits() {\n-            return filePositionBits;\n-        }\n-\n-        public FileIndexConfiguration setFilePositionBits(int filePositionBits) {\n-            this.filePositionBits = filePositionBits;\n-            return this;\n-        }\n-\n-        public boolean isFixedFieldsFirst() {\n-            return fixedFieldsFirst;\n-        }\n-\n-        public FileIndexConfiguration setFixedFieldsFirst(boolean fixedFieldsFirst) {\n-            this.fixedFieldsFirst = fixedFieldsFirst;\n-            return this;\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) {\n-                return true;\n-            }\n-            if (o == null || getClass() != o.getClass()) {\n-                return false;\n-            }\n-            FileIndexConfiguration that = (FileIndexConfiguration) o;\n-            return filePositionBits == that.filePositionBits\n-                    && fixedFieldsFirst == that.fixedFieldsFirst\n-                    && Objects.equals(customFields, that.customFields);\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(customFields, filePositionBits, fixedFieldsFirst);\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder(\"FileIndexConfiguration{\");\n-            sb.append(\"customFields=\").append(customFields);\n-            sb.append(\", filePositionBits=\").append(filePositionBits);\n-            sb.append(\", fixedFieldsFirst=\").append(fixedFieldsFirst);\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-    public static class AnnotationIndexConfiguration {\n-        private PopulationFrequencyIndexConfiguration populationFrequency = new PopulationFrequencyIndexConfiguration();\n-        private IndexFieldConfiguration biotype;\n-        private IndexFieldConfiguration consequenceType;\n-        private IndexFieldConfiguration clinicalSignificance;\n-        private IndexFieldConfiguration clinicalSource;\n-\n-        public PopulationFrequencyIndexConfiguration getPopulationFrequency() {\n-            return populationFrequency;\n-        }\n-\n-        public AnnotationIndexConfiguration setPopulationFrequency(PopulationFrequencyIndexConfiguration populationFrequency) {\n-            this.populationFrequency = populationFrequency;\n-            return this;\n-        }\n-\n-        public IndexFieldConfiguration getBiotype() {\n-            return biotype;\n-        }\n-\n-        public AnnotationIndexConfiguration setBiotype(IndexFieldConfiguration biotype) {\n-            this.biotype = biotype;\n-            return this;\n-        }\n-\n-        public IndexFieldConfiguration getConsequenceType() {\n-            return consequenceType;\n-        }\n-\n-        public AnnotationIndexConfiguration setConsequenceType(IndexFieldConfiguration consequenceType) {\n-            this.consequenceType = consequenceType;\n-            return this;\n-        }\n-\n-        public IndexFieldConfiguration getClinicalSignificance() {\n-            return clinicalSignificance;\n-        }\n-\n-        public AnnotationIndexConfiguration setClinicalSignificance(IndexFieldConfiguration clinicalSignificance) {\n-            this.clinicalSignificance = clinicalSignificance;\n-            return this;\n-        }\n-\n-        public IndexFieldConfiguration getClinicalSource() {\n-            return clinicalSource;\n-        }\n-\n-        public AnnotationIndexConfiguration setClinicalSource(IndexFieldConfiguration clinicalSource) {\n-            this.clinicalSource = clinicalSource;\n-            return this;\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o){\n-                return true;\n-            }\n-            if (o == null || getClass() != o.getClass()) {\n-                return false;\n-            }\n-            AnnotationIndexConfiguration that = (AnnotationIndexConfiguration) o;\n-            return Objects.equals(populationFrequency, that.populationFrequency)\n-                    && Objects.equals(biotype, that.biotype)\n-                    && Objects.equals(consequenceType, that.consequenceType)\n-                    && Objects.equals(clinicalSignificance, that.clinicalSignificance)\n-                    && Objects.equals(clinicalSource, that.clinicalSource);\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(populationFrequency, biotype, consequenceType, clinicalSignificance, clinicalSource);\n-        }\n-    }\n-\n-\n-    public static class PopulationFrequencyIndexConfiguration {\n-        private static final double[] DEFAULT_THRESHOLDS = new double[]{0.001, 0.005, 0.01};\n-\n-        private List<Population> populations = new ArrayList<>(5);\n-        private double[] thresholds = DEFAULT_THRESHOLDS;\n-\n-        public List<Population> getPopulations() {\n-            return populations;\n-        }\n-\n-        public PopulationFrequencyIndexConfiguration setPopulations(List<Population> populations) {\n-            this.populations = populations;\n-            return this;\n-        }\n-\n-        public double[] getThresholds() {\n-            return thresholds;\n-        }\n-\n-        public PopulationFrequencyIndexConfiguration setThresholds(double[] thresholds) {\n-            this.thresholds = thresholds;\n-            return this;\n-        }\n-\n-        public PopulationFrequencyIndexConfiguration addPopulation(String study, String population) {\n-            addPopulation(new Population(study, population));\n-            return this;\n-        }\n-\n-        public PopulationFrequencyIndexConfiguration addPopulation(Population population) {\n-            if (populations.contains(population)) {\n-                throw new IllegalArgumentException(\"Duplicated population '\"\n-                        + population.getKey() + \"' in SampleIndexConfiguration\");\n-            }\n-            populations.add(population);\n-            return this;\n-        }\n-\n-        public List<IndexFieldConfiguration> toIndexFieldConfiguration() {\n-            List<IndexFieldConfiguration> indexFieldConfigurations = new ArrayList<>(populations.size());\n-            for (Population population : populations) {\n-                indexFieldConfigurations.add(new IndexFieldConfiguration(\n-                        IndexFieldConfiguration.Source.ANNOTATION,\n-                        population.getKey(),\n-                        IndexFieldConfiguration.Type.RANGE_LT)\n-                        .setNullable(false)\n-                        .setThresholds(thresholds));\n-            }\n-            return indexFieldConfigurations;\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) {\n-                return true;\n-            }\n-            if (o == null || getClass() != o.getClass()) {\n-                return false;\n-            }\n-            PopulationFrequencyIndexConfiguration that = (PopulationFrequencyIndexConfiguration) o;\n-            return Objects.equals(populations, that.populations)\n-                    && Arrays.equals(thresholds, that.thresholds);\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            int result = Objects.hash(populations);\n-            result = 31 * result + Arrays.hashCode(thresholds);\n-            return result;\n-        }\n-    }\n-\n-    public static class Population {\n-        private String study;\n-        private String population;\n-\n-        public Population(String studyPopulation) {\n-            this.study = studyPopulation.split(\":\")[0];\n-            this.population = studyPopulation.split(\":\")[1];\n-        }\n-\n-        @ConstructorProperties({\"study\", \"population\"})\n-        public Population(String study, String population) {\n-            this.study = study;\n-            this.population = population;\n-        }\n-\n-        private String getKey() {\n-            return study + \":\" + population;\n-        }\n-\n-        public String getStudy() {\n-            return study;\n-        }\n-\n-        public Population setStudy(String study) {\n-            this.study = study;\n-            return this;\n-        }\n-\n-        public String getPopulation() {\n-            return population;\n-        }\n-\n-        public Population setPopulation(String population) {\n-            this.population = population;\n-            return this;\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) {\n-                return true;\n-            }\n-            if (o == null || getClass() != o.getClass()) {\n-                return false;\n-            }\n-            Population that = (Population) o;\n-            return Objects.equals(study, that.study) && Objects.equals(population, that.population);\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(study, population);\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder(\"PopulationFrequencyRange{\");\n-            sb.append(\"study='\").append(study).append('\\'');\n-            sb.append(\", population='\").append(population).append('\\'');\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-    public AnnotationIndexConfiguration getAnnotationIndexConfiguration() {\n-        return annotationIndexConfiguration;\n-    }\n-\n-    public SampleIndexConfiguration addPopulation(Population population) {\n-        getAnnotationIndexConfiguration().getPopulationFrequency().addPopulation(population);\n-        return this;\n-    }\n-\n-    public FileIndexConfiguration getFileIndexConfiguration() {\n-        return fileIndexConfiguration;\n-    }\n-\n-\n-    public SampleIndexConfiguration addFileIndexField(IndexFieldConfiguration fileIndex) {\n-        if (fileIndexConfiguration.getCustomFields().contains(fileIndex)) {\n-            throw new IllegalArgumentException(\"Duplicated file index '\"\n-                    + fileIndex.getKey() + \"' in SampleIndexConfiguration\");\n-        }\n-        this.fileIndexConfiguration.getCustomFields().add(fileIndex);\n-        return this;\n+            ClinicalSignificance.uncertain_significance.toString(),\n+            ClinicalSignificance.likely_pathogenic.toString(),\n+            ClinicalSignificance.pathogenic.toString())\n+            .setNullable(false));\n+    sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSource(\n+        new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.ANNOTATION, \"clinicalSource\",\n+            IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE,\n+            \"clinvar\",\n+            \"cosmic\")\n+            .setNullable(false)\n+    );\n+\n+    return sampleIndexConfiguration;\n+  }\n+\n+  public void validate() {\n+    addMissingValues(defaultConfiguration());\n+\n+    for (IndexFieldConfiguration customField : fileIndexConfiguration.getCustomFields()) {\n+      customField.validate();\n+    }\n+    for (IndexFieldConfiguration configuration : annotationIndexConfiguration.getPopulationFrequency().toIndexFieldConfiguration()) {\n+      configuration.validate();\n+    }\n+    annotationIndexConfiguration.biotype.validate();\n+    annotationIndexConfiguration.consequenceType.validate();\n+    annotationIndexConfiguration.clinicalSignificance.validate();\n+    annotationIndexConfiguration.clinicalSource.validate();\n+  }\n+\n+  public void addMissingValues(SampleIndexConfiguration defaultConfiguration) {\n+    if (fileIndexConfiguration.getCustomFields().isEmpty()) {\n+      fileIndexConfiguration.getCustomFields().addAll(defaultConfiguration.fileIndexConfiguration.customFields);\n+    }\n+    if (annotationIndexConfiguration.getPopulationFrequency() == null) {\n+      annotationIndexConfiguration.setPopulationFrequency(defaultConfiguration.annotationIndexConfiguration.populationFrequency);\n+    }\n+    if (annotationIndexConfiguration.getPopulationFrequency().getThresholds() == null) {\n+      annotationIndexConfiguration.getPopulationFrequency()\n+          .setThresholds(defaultConfiguration.annotationIndexConfiguration.populationFrequency.thresholds);\n+    }\n+    if (CollectionUtils.isEmpty(annotationIndexConfiguration.getPopulationFrequency().getPopulations())) {\n+      annotationIndexConfiguration.getPopulationFrequency()\n+          .setPopulations(defaultConfiguration.annotationIndexConfiguration.populationFrequency.populations);\n+    }\n+    if (annotationIndexConfiguration.biotype == null) {\n+      annotationIndexConfiguration.biotype = defaultConfiguration.annotationIndexConfiguration.biotype;\n+    }\n+    if (annotationIndexConfiguration.consequenceType == null) {\n+      annotationIndexConfiguration.consequenceType = defaultConfiguration.annotationIndexConfiguration.consequenceType;\n+    }\n+    if (annotationIndexConfiguration.clinicalSignificance == null) {\n+      annotationIndexConfiguration.clinicalSignificance = defaultConfiguration.annotationIndexConfiguration.clinicalSignificance;\n+    }\n+    if (annotationIndexConfiguration.clinicalSource == null) {\n+      annotationIndexConfiguration.clinicalSource = defaultConfiguration.annotationIndexConfiguration.clinicalSource;\n+    }\n+  }\n+\n+  public static class FileIndexConfiguration {\n+\n+    private final List<IndexFieldConfiguration> customFields = new ArrayList<>();\n+    private int filePositionBits = DEFAULT_FILE_POSITION_SIZE_BITS;\n+    private boolean fixedFieldsFirst = true;\n+\n+    public FileIndexConfiguration() {\n+    }\n+\n+    public FileIndexConfiguration(int filePositionBits, boolean fixedFieldsFirst) {\n+      this.filePositionBits = filePositionBits;\n+      this.fixedFieldsFirst = fixedFieldsFirst;\n+    }\n+\n+    public List<IndexFieldConfiguration> getCustomFields() {\n+      return customFields;\n+    }\n+\n+    public int getFilePositionBits() {\n+      return filePositionBits;\n+    }\n+\n+    public FileIndexConfiguration setFilePositionBits(int filePositionBits) {\n+      this.filePositionBits = filePositionBits;\n+      return this;\n+    }\n+\n+    public boolean isFixedFieldsFirst() {\n+      return fixedFieldsFirst;\n+    }\n+\n+    public FileIndexConfiguration setFixedFieldsFirst(boolean fixedFieldsFirst) {\n+      this.fixedFieldsFirst = fixedFieldsFirst;\n+      return this;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      FileIndexConfiguration that = (FileIndexConfiguration) o;\n+      return filePositionBits == that.filePositionBits\n+          && fixedFieldsFirst == that.fixedFieldsFirst\n+          && Objects.equals(customFields, that.customFields);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(customFields, filePositionBits, fixedFieldsFirst);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      final StringBuilder sb = new StringBuilder(\"FileIndexConfiguration{\");\n+      sb.append(\"customFields=\").append(customFields);\n+      sb.append(\", filePositionBits=\").append(filePositionBits);\n+      sb.append(\", fixedFieldsFirst=\").append(fixedFieldsFirst);\n+      sb.append('}');\n+      return sb.toString();\n+    }\n+  }\n+\n+  public static class AnnotationIndexConfiguration {\n+    private PopulationFrequencyIndexConfiguration populationFrequency = new PopulationFrequencyIndexConfiguration();\n+    private IndexFieldConfiguration biotype;\n+    private IndexFieldConfiguration consequenceType;\n+    private IndexFieldConfiguration clinicalSignificance;\n+    private IndexFieldConfiguration clinicalSource;\n+\n+    public PopulationFrequencyIndexConfiguration getPopulationFrequency() {\n+      return populationFrequency;\n+    }\n+\n+    public AnnotationIndexConfiguration setPopulationFrequency(PopulationFrequencyIndexConfiguration populationFrequency) {\n+      this.populationFrequency = populationFrequency;\n+      return this;\n+    }\n+\n+    public IndexFieldConfiguration getBiotype() {\n+      return biotype;\n+    }\n+\n+    public AnnotationIndexConfiguration setBiotype(IndexFieldConfiguration biotype) {\n+      this.biotype = biotype;\n+      return this;\n+    }\n+\n+    public IndexFieldConfiguration getConsequenceType() {\n+      return consequenceType;\n+    }\n+\n+    public AnnotationIndexConfiguration setConsequenceType(IndexFieldConfiguration consequenceType) {\n+      this.consequenceType = consequenceType;\n+      return this;\n+    }\n+\n+    public IndexFieldConfiguration getClinicalSignificance() {\n+      return clinicalSignificance;\n+    }\n+\n+    public AnnotationIndexConfiguration setClinicalSignificance(IndexFieldConfiguration clinicalSignificance) {\n+      this.clinicalSignificance = clinicalSignificance;\n+      return this;\n+    }\n+\n+    public IndexFieldConfiguration getClinicalSource() {\n+      return clinicalSource;\n+    }\n+\n+    public AnnotationIndexConfiguration setClinicalSource(IndexFieldConfiguration clinicalSource) {\n+      this.clinicalSource = clinicalSource;\n+      return this;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      AnnotationIndexConfiguration that = (AnnotationIndexConfiguration) o;\n+      return Objects.equals(populationFrequency, that.populationFrequency)\n+          && Objects.equals(biotype, that.biotype)\n+          && Objects.equals(consequenceType, that.consequenceType)\n+          && Objects.equals(clinicalSignificance, that.clinicalSignificance)\n+          && Objects.equals(clinicalSource, that.clinicalSource);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(populationFrequency, biotype, consequenceType, clinicalSignificance, clinicalSource);\n+    }\n+  }\n+\n+\n+  public static class PopulationFrequencyIndexConfiguration {\n+    private static final double[] DEFAULT_THRESHOLDS = new double[] {0.001, 0.005, 0.01};\n+\n+    private List<Population> populations = new ArrayList<>(5);\n+    private double[] thresholds = DEFAULT_THRESHOLDS;\n+\n+    public List<Population> getPopulations() {\n+      return populations;\n+    }\n+\n+    public PopulationFrequencyIndexConfiguration setPopulations(List<Population> populations) {\n+      this.populations = populations;\n+      return this;\n+    }\n+\n+    public double[] getThresholds() {\n+      return thresholds;\n+    }\n+\n+    public PopulationFrequencyIndexConfiguration setThresholds(double[] thresholds) {\n+      this.thresholds = thresholds;\n+      return this;\n+    }\n+\n+    public PopulationFrequencyIndexConfiguration addPopulation(String study, String population) {\n+      addPopulation(new Population(study, population));\n+      return this;\n+    }\n+\n+    public PopulationFrequencyIndexConfiguration addPopulation(Population population) {\n+      if (populations.contains(population)) {\n+        throw new IllegalArgumentException(\"Duplicated population '\"\n+            + population.getKey() + \"' in SampleIndexConfiguration\");\n+      }\n+      populations.add(population);\n+      return this;\n+    }\n+\n+    public List<IndexFieldConfiguration> toIndexFieldConfiguration() {\n+      List<IndexFieldConfiguration> indexFieldConfigurations = new ArrayList<>(populations.size());\n+      for (Population population : populations) {\n+        indexFieldConfigurations.add(new IndexFieldConfiguration(\n+            IndexFieldConfiguration.Source.ANNOTATION,\n+            population.getKey(),\n+            IndexFieldConfiguration.Type.RANGE_LT)\n+            .setNullable(false)\n+            .setThresholds(thresholds));\n+      }\n+      return indexFieldConfigurations;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      PopulationFrequencyIndexConfiguration that = (PopulationFrequencyIndexConfiguration) o;\n+      return Objects.equals(populations, that.populations)\n+          && Arrays.equals(thresholds, that.thresholds);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      int result = Objects.hash(populations);\n+      result = 31 * result + Arrays.hashCode(thresholds);\n+      return result;\n+    }\n+  }\n+\n+  public static class Population {\n+    private String study;\n+    private String population;\n+\n+    public Population(String studyPopulation) {\n+      this.study = studyPopulation.split(\":\")[0];\n+      this.population = studyPopulation.split(\":\")[1];\n+    }\n+\n+    @ConstructorProperties({\"study\", \"population\"})\n+    public Population(String study, String population) {\n+      this.study = study;\n+      this.population = population;\n+    }\n+\n+    private String getKey() {\n+      return study + \":\" + population;\n+    }\n+\n+    public String getStudy() {\n+      return study;\n+    }\n+\n+    public Population setStudy(String study) {\n+      this.study = study;\n+      return this;\n+    }\n+\n+    public String getPopulation() {\n+      return population;\n+    }\n+\n+    public Population setPopulation(String population) {\n+      this.population = population;\n+      return this;\n     }\n \n     @Override\n     public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        SampleIndexConfiguration that = (SampleIndexConfiguration) o;\n-        return Objects.equals(fileIndexConfiguration, that.fileIndexConfiguration)\n-                && Objects.equals(annotationIndexConfiguration, that.annotationIndexConfiguration);\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      Population that = (Population) o;\n+      return Objects.equals(study, that.study) && Objects.equals(population, that.population);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(fileIndexConfiguration, annotationIndexConfiguration);\n+      return Objects.hash(study, population);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      final StringBuilder sb = new StringBuilder(\"PopulationFrequencyRange{\");\n+      sb.append(\"study='\").append(study).append('\\'');\n+      sb.append(\", population='\").append(population).append('\\'');\n+      sb.append('}');\n+      return sb.toString();\n+    }\n+  }\n+\n+  public AnnotationIndexConfiguration getAnnotationIndexConfiguration() {\n+    return annotationIndexConfiguration;\n+  }\n+\n+  public SampleIndexConfiguration addPopulation(Population population) {\n+    getAnnotationIndexConfiguration().getPopulationFrequency().addPopulation(population);\n+    return this;\n+  }\n+\n+  public FileIndexConfiguration getFileIndexConfiguration() {\n+    return fileIndexConfiguration;\n+  }\n+\n+\n+  public SampleIndexConfiguration addFileIndexField(IndexFieldConfiguration fileIndex) {\n+    if (fileIndexConfiguration.getCustomFields().contains(fileIndex)) {\n+      throw new IllegalArgumentException(\"Duplicated file index '\"\n+          + fileIndex.getKey() + \"' in SampleIndexConfiguration\");\n+    }\n+    this.fileIndexConfiguration.getCustomFields().add(fileIndex);\n+    return this;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n+    SampleIndexConfiguration that = (SampleIndexConfiguration) o;\n+    return Objects.equals(fileIndexConfiguration, that.fileIndexConfiguration)\n+        && Objects.equals(annotationIndexConfiguration, that.annotationIndexConfiguration);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(fileIndexConfiguration, annotationIndexConfiguration);\n+  }\n }\n",
            "diff_size": 655
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/315/SampleIndexConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/315/SampleIndexConfiguration.java\nindex c712fa65cf5..8549980b6ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/315/SampleIndexConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/315/SampleIndexConfiguration.java\n@@ -56,8 +56,7 @@ public class SampleIndexConfiguration {\n                         SNORNA,\n                         \"other_non_pseudo_gene\",\n //                        \"other\",\n-                        PROTEIN_CODING\n-                ).setValuesMapping(new HashMap<>());\n+                        PROTEIN_CODING).setValuesMapping(new HashMap<>());\n         biotypeConfiguration.getValuesMapping().put(LINCRNA, Arrays.asList(\n                 \"lncRNA\",\n                 NON_CODING,\n@@ -159,8 +158,7 @@ public class SampleIndexConfiguration {\n                         IndexFieldConfiguration.Source.FILE, StudyEntry.QUAL, QUAL_THRESHOLDS).setNullable(false))\n                 .addFileIndexField(new IndexFieldConfiguration(\n                         IndexFieldConfiguration.Source.SAMPLE, VCFConstants.DEPTH_KEY, DP_THRESHOLDS_NULLABLE).setNullable(true));\n-\n-        sampleIndexConfiguration.getFileIndexConfiguration()\n+sampleIndexConfiguration.getFileIndexConfiguration()\n                 .setFilePositionBits(DEFAULT_FILE_POSITION_SIZE_BITS);\n \n         IndexFieldConfiguration biotypeConfiguration = new IndexFieldConfiguration(IndexFieldConfiguration.Source.ANNOTATION,\n@@ -175,8 +173,7 @@ public class SampleIndexConfiguration {\n                         SNORNA,\n                         \"other_non_pseudo_gene\",\n //                        \"other\",\n-                        PROTEIN_CODING\n-                ).setValuesMapping(new HashMap<>());\n+                        PROTEIN_CODING).setValuesMapping(new HashMap<>());\n         biotypeConfiguration.getValuesMapping().put(LINCRNA, Arrays.asList(\n                 \"lncRNA\",\n                 NON_CODING,\n@@ -244,8 +241,7 @@ public class SampleIndexConfiguration {\n \n         sampleIndexConfiguration.getAnnotationIndexConfiguration().setConsequenceType(consequenceType);\n \n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSignificance(\n-                        new IndexFieldConfiguration(\n+        sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSignificance(new IndexFieldConfiguration(\n                                 IndexFieldConfiguration.Source.ANNOTATION, \"clinicalSignificance\",\n                                 IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE,\n                                 ClinicalSignificance.benign.toString(),\n@@ -255,14 +251,13 @@ public class SampleIndexConfiguration {\n                                 ClinicalSignificance.likely_pathogenic.toString(),\n                                 ClinicalSignificance.pathogenic.toString())\n                                 .setNullable(false));\n-        sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSource(\n+sampleIndexConfiguration.getAnnotationIndexConfiguration().setClinicalSource(\n                 new IndexFieldConfiguration(\n                         IndexFieldConfiguration.Source.ANNOTATION, \"clinicalSource\",\n                         IndexFieldConfiguration.Type.CATEGORICAL_MULTI_VALUE,\n                         \"clinvar\",\n                         \"cosmic\")\n-                        .setNullable(false)\n-        );\n+                        .setNullable(false));\n \n         return sampleIndexConfiguration;\n     }\n@@ -431,7 +426,7 @@ public class SampleIndexConfiguration {\n \n         @Override\n         public boolean equals(Object o) {\n-            if (this == o){\n+            if (this == o) {\n                 return true;\n             }\n             if (o == null || getClass() != o.getClass()) {\n@@ -628,4 +623,4 @@ public class SampleIndexConfiguration {\n     public int hashCode() {\n         return Objects.hash(fileIndexConfiguration, annotationIndexConfiguration);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/315/SampleIndexConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/315/SampleIndexConfiguration.java\nindex c712fa65cf5..1eb9d1860d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/315/SampleIndexConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/315/SampleIndexConfiguration.java\n@@ -431,7 +431,7 @@ public class SampleIndexConfiguration {\n \n         @Override\n         public boolean equals(Object o) {\n-            if (this == o){\n+            if (this == o) {\n                 return true;\n             }\n             if (o == null || getClass() != o.getClass()) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/315/SampleIndexConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/315/SampleIndexConfiguration.java\nindex c712fa65cf5..1eb9d1860d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/315/SampleIndexConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/315/SampleIndexConfiguration.java\n@@ -431,7 +431,7 @@ public class SampleIndexConfiguration {\n \n         @Override\n         public boolean equals(Object o) {\n-            if (this == o){\n+            if (this == o) {\n                 return true;\n             }\n             if (o == null || getClass() != o.getClass()) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}