{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1804",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "132",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "176",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "181",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "197",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1804/InputEntityCacheReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1804/InputEntityCacheReader.java\nindex 0fee0ac3139..a4156348453 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1804/InputEntityCacheReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1804/InputEntityCacheReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.input;\n \n import java.io.IOException;\n@@ -50,185 +51,184 @@ import static org.neo4j.unsafe.impl.batchimport.input.InputCache.newChunkHeaderB\n  */\n abstract class InputEntityCacheReader implements InputIterator\n {\n-    // Used by workers, immutable\n-    private final PrimitiveIntObjectMap<String>[] tokens;\n+  // Used by workers, immutable\n+  private final PrimitiveIntObjectMap<String>[] tokens;\n+\n+  // Not used by workers\n+  private final StoreChannel channel;\n+  private final ByteBuffer chunkHeaderBuffer = newChunkHeaderBuffer();\n+  private boolean end;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  InputEntityCacheReader(StoreChannel channel, StoreChannel header)\n+      throws IOException\n+  {\n+    tokens = new PrimitiveIntObjectMap[HIGH_TOKEN_TYPE];\n+    tokens[PROPERTY_KEY_TOKEN] = Primitive.intObjectMap();\n+    tokens[LABEL_TOKEN] = Primitive.intObjectMap();\n+    tokens[RELATIONSHIP_TYPE_TOKEN] = Primitive.intObjectMap();\n+    tokens[GROUP_TOKEN] = Primitive.intObjectMap();\n+    this.channel = channel;\n+    readHeader(header);\n+  }\n+\n+  @Override\n+  public boolean next(InputChunk chunk) throws IOException\n+  {\n+    InputEntityDeserializer realChunk = (InputEntityDeserializer) chunk;\n+\n+    long dataStartPosition;\n+    int length;\n+    synchronized (channel)\n+    {\n+      if (end)\n+      {\n+        return false;\n+      }\n+\n+      chunkHeaderBuffer.clear();\n+      channel.read(chunkHeaderBuffer);\n+      chunkHeaderBuffer.flip();\n+      length = chunkHeaderBuffer.getInt();\n+      dataStartPosition = channel.position();\n+      channel.position(dataStartPosition + length);\n+      if (length == 0)\n+      {\n+        end = true;\n+        return false;\n+      }\n+    }\n \n-    // Not used by workers\n-    private final StoreChannel channel;\n-    private final ByteBuffer chunkHeaderBuffer = newChunkHeaderBuffer();\n-    private boolean end;\n+    realChunk.initialize(dataStartPosition, length);\n+    return true;\n+  }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    InputEntityCacheReader( StoreChannel channel, StoreChannel header )\n-            throws IOException\n+  private static ReadAheadChannel<StoreChannel> reader(StoreChannel channel)\n+  {\n+    return new ReadAheadChannel<>(channel);\n+  }\n+\n+  private void readHeader(StoreChannel header) throws IOException\n+  {\n+    try (ReadableClosableChannel reader = reader(header))\n     {\n-        tokens = new PrimitiveIntObjectMap[HIGH_TOKEN_TYPE];\n-        tokens[PROPERTY_KEY_TOKEN] = Primitive.intObjectMap();\n-        tokens[LABEL_TOKEN] = Primitive.intObjectMap();\n-        tokens[RELATIONSHIP_TYPE_TOKEN] = Primitive.intObjectMap();\n-        tokens[GROUP_TOKEN] = Primitive.intObjectMap();\n-        this.channel = channel;\n-        readHeader( header );\n+      int[] tokenIds = new int[HIGH_TOKEN_TYPE];\n+      byte type;\n+      while ((type = reader.get()) != END_OF_HEADER)\n+      {\n+        int tokenId = tokenIds[type]++;\n+        String name = (String) ValueType.stringType().read(reader);\n+        tokens[type].put(tokenId, name);\n+      }\n     }\n+  }\n \n-    @Override\n-    public boolean next( InputChunk chunk ) throws IOException\n+  @Override\n+  public void close()\n+  {\n+    try\n     {\n-        InputEntityDeserializer realChunk = (InputEntityDeserializer) chunk;\n-\n-        long dataStartPosition;\n-        int length;\n-        synchronized ( channel )\n-        {\n-            if ( end )\n-            {\n-                return false;\n-            }\n-\n-            chunkHeaderBuffer.clear();\n-            channel.read( chunkHeaderBuffer );\n-            chunkHeaderBuffer.flip();\n-            length = chunkHeaderBuffer.getInt();\n-            dataStartPosition = channel.position();\n-            channel.position( dataStartPosition + length );\n-            if ( length == 0 )\n-            {\n-                end = true;\n-                return false;\n-            }\n-        }\n-\n-        realChunk.initialize( dataStartPosition, length );\n-        return true;\n+      channel.close();\n+    } catch (IOException e)\n+    {\n+      throw new InputException(\"Couldn't close channel for cached input data\", e);\n     }\n+  }\n \n-    private static ReadAheadChannel<StoreChannel> reader( StoreChannel channel )\n+  abstract class InputEntityDeserializer implements InputChunk\n+  {\n+    private ByteBuffer buffer;\n+    protected ReadableClosableChannel channel;\n+    protected Group[] previousGroups = new Group[2];\n+\n+    void initialize(long startPosition, int chunkLength) throws IOException\n     {\n-        return new ReadAheadChannel<>( channel );\n+      if (buffer == null || buffer.capacity() < chunkLength)\n+      {\n+        buffer = ByteBuffer.allocate(chunkLength + chunkLength / 10);\n+        channel = new ByteBufferReadableChannel(buffer);\n+      }\n+      buffer.clear();\n+      buffer.limit(chunkLength);\n+      InputEntityCacheReader.this.channel.read(buffer, startPosition);\n+      buffer.flip();\n+      clearState();\n     }\n \n-    private void readHeader( StoreChannel header ) throws IOException\n+    protected void clearState()\n     {\n-        try ( ReadableClosableChannel reader = reader( header ) )\n-        {\n-            int[] tokenIds = new int[HIGH_TOKEN_TYPE];\n-            byte type;\n-            while ( (type = reader.get()) != END_OF_HEADER )\n-            {\n-                int tokenId = tokenIds[type]++;\n-                String name = (String) ValueType.stringType().read( reader );\n-                tokens[type].put( tokenId, name );\n-            }\n-        }\n+      Arrays.fill(previousGroups, Group.GLOBAL);\n     }\n \n     @Override\n     public void close()\n     {\n-        try\n-        {\n-            channel.close();\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new InputException( \"Couldn't close channel for cached input data\", e );\n-        }\n     }\n \n-    abstract class InputEntityDeserializer implements InputChunk\n+    protected boolean readProperties(InputEntityVisitor visitor) throws IOException\n     {\n-        private ByteBuffer buffer;\n-        protected ReadableClosableChannel channel;\n-        protected Group[] previousGroups = new Group[2];\n-\n-        void initialize( long startPosition, int chunkLength ) throws IOException\n+      short count = channel.getShort();\n+      if (count == END_OF_ENTITIES)\n+      {\n+        // This is a special value denoting the end of the stream. This is done like this since\n+        // properties are the first thing read for every entity.\n+        return false;\n+      } else if (count == HAS_FIRST_PROPERTY_ID)\n+      {\n+        visitor.propertyId(channel.getLong());\n+      } else\n+      {\n+        for (int i = 0; i < count; i++)\n         {\n-            if ( buffer == null || buffer.capacity() < chunkLength )\n-            {\n-                buffer = ByteBuffer.allocate( chunkLength + chunkLength / 10 );\n-                channel = new ByteBufferReadableChannel( buffer );\n-            }\n-            buffer.clear();\n-            buffer.limit( chunkLength );\n-            InputEntityCacheReader.this.channel.read( buffer, startPosition );\n-            buffer.flip();\n-            clearState();\n-        }\n-\n-        protected void clearState()\n-        {\n-            Arrays.fill( previousGroups, Group.GLOBAL );\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-        }\n-\n-        protected boolean readProperties( InputEntityVisitor visitor ) throws IOException\n-        {\n-            short count = channel.getShort();\n-            if ( count == END_OF_ENTITIES )\n-            {\n-                // This is a special value denoting the end of the stream. This is done like this since\n-                // properties are the first thing read for every entity.\n-                return false;\n-            }\n-            else if ( count == HAS_FIRST_PROPERTY_ID )\n-            {\n-                visitor.propertyId( channel.getLong() );\n-            }\n-            else\n-            {\n-                for ( int i = 0; i < count; i++ )\n-                {\n-                    Object token = readToken( PROPERTY_KEY_TOKEN );\n-                    Object value = readValue( );\n-                    if ( token instanceof Integer )\n-                    {\n-                        visitor.property( (Integer) token, value );\n-                    }\n-                    else\n-                    {\n-                        visitor.property( (String) token, value );\n-                    }\n-                }\n-            }\n-            return true;\n+          Object token = readToken(PROPERTY_KEY_TOKEN);\n+          Object value = readValue();\n+          if (token instanceof Integer)\n+          {\n+            visitor.property((Integer) token, value);\n+          } else\n+          {\n+            visitor.property((String) token, value);\n+          }\n         }\n+      }\n+      return true;\n+    }\n \n-        protected Object readToken( byte type ) throws IOException\n-        {\n-            int id = channel.getInt();\n-            if ( id == -1 )\n-            {\n-                // This is a real token id\n-                return channel.getInt();\n-            }\n-\n-            String name = tokens[type].get( id );\n-            if ( name == null )\n-            {\n-                throw new IllegalArgumentException( \"Unknown token \" + id );\n-            }\n-            return name;\n-        }\n+    protected Object readToken(byte type) throws IOException\n+    {\n+      int id = channel.getInt();\n+      if (id == -1)\n+      {\n+        // This is a real token id\n+        return channel.getInt();\n+      }\n+\n+      String name = tokens[type].get(id);\n+      if (name == null)\n+      {\n+        throw new IllegalArgumentException(\"Unknown token \" + id);\n+      }\n+      return name;\n+    }\n \n-        protected Object readValue() throws IOException\n-        {\n-            return ValueType.typeOf( channel.get() ).read( channel );\n-        }\n+    protected Object readValue() throws IOException\n+    {\n+      return ValueType.typeOf(channel.get()).read(channel);\n+    }\n \n-        protected Group readGroup( int slot ) throws IOException\n-        {\n-            byte groupMode = channel.get();\n-            switch ( groupMode )\n-            {\n-            case SAME_GROUP: return previousGroups[slot];\n-            case NEW_GROUP: return previousGroups[slot] = new Group.Adapter( channel.getInt(),\n-                    (String) readToken( GROUP_TOKEN ) );\n-            default: throw new IllegalArgumentException( \"Unknown group mode \" + groupMode );\n-            }\n-        }\n+    protected Group readGroup(int slot) throws IOException\n+    {\n+      byte groupMode = channel.get();\n+      switch (groupMode)\n+      {\n+        case SAME_GROUP:\n+          return previousGroups[slot];\n+        case NEW_GROUP:\n+          return previousGroups[slot] = new Group.Adapter(channel.getInt(),\n+              (String) readToken(GROUP_TOKEN));\n+        default:\n+          throw new IllegalArgumentException(\"Unknown group mode \" + groupMode);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 239
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1804/InputEntityCacheReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1804/InputEntityCacheReader.java\nindex 0fee0ac3139..89837d22d6b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1804/InputEntityCacheReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1804/InputEntityCacheReader.java\n@@ -59,16 +59,16 @@ abstract class InputEntityCacheReader implements InputIterator\n     private boolean end;\n \n     @SuppressWarnings( \"unchecked\" )\n-    InputEntityCacheReader( StoreChannel channel, StoreChannel header )\n-            throws IOException\n-    {\n+    InputEntityCacheReader( StoreChannel channel, StoreChannel header ) throws IOException\n+{\n         tokens = new PrimitiveIntObjectMap[HIGH_TOKEN_TYPE];\n         tokens[PROPERTY_KEY_TOKEN] = Primitive.intObjectMap();\n         tokens[LABEL_TOKEN] = Primitive.intObjectMap();\n         tokens[RELATIONSHIP_TYPE_TOKEN] = Primitive.intObjectMap();\n         tokens[GROUP_TOKEN] = Primitive.intObjectMap();\n         this.channel = channel;\n-        readHeader( header );\n+\n+readHeader( header );\n     }\n \n     @Override\n@@ -211,7 +211,8 @@ abstract class InputEntityCacheReader implements InputIterator\n             {\n                 throw new IllegalArgumentException( \"Unknown token \" + id );\n             }\n-            return name;\n+\n+return name;\n         }\n \n         protected Object readValue() throws IOException\n@@ -224,11 +225,13 @@ abstract class InputEntityCacheReader implements InputIterator\n             byte groupMode = channel.get();\n             switch ( groupMode )\n             {\n-            case SAME_GROUP: return previousGroups[slot];\n-            case NEW_GROUP: return previousGroups[slot] = new Group.Adapter( channel.getInt(),\n-                    (String) readToken( GROUP_TOKEN ) );\n-            default: throw new IllegalArgumentException( \"Unknown group mode \" + groupMode );\n-            }\n+            case SAME_GROUP:\n+    return previousGroups[slot];\n+            case NEW_GROUP:\n+    return previousGroups[slot] = new Group.Adapter( channel.getInt(), (String) readToken( GROUP_TOKEN ) );\n+    default:\n+    throw new IllegalArgumentException( \"Unknown group mode \" + groupMode );\n+    }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}