{
    "project_name": "neo4j-neo4j",
    "error_id": "416",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/416/SchemaMatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/416/SchemaMatcher.java\nindex 18534b87e74..da19aede087 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/416/SchemaMatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/416/SchemaMatcher.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import java.util.Arrays;\n@@ -33,7 +34,7 @@ public class SchemaMatcher\n {\n     private SchemaMatcher()\n     {\n-        throw new AssertionError( \"no instance\" );\n+        throw new AssertionError(\"no instance\");\n     }\n \n     /**\n@@ -44,39 +45,39 @@ public class SchemaMatcher\n      * To avoid unnecessary store lookups, this implementation only gets propertyKeyIds for the entity if some\n      * descriptor has a valid token.\n      *\n-     * @param <SUPPLIER> the type to match. Must implement SchemaDescriptorSupplier\n-     * @param <EXCEPTION> The type of exception that can be thrown when taking the action\n-     * @param schemaSuppliers The suppliers to match\n+     * @param <SUPPLIER>        the type to match. Must implement SchemaDescriptorSupplier\n+     * @param <EXCEPTION>       The type of exception that can be thrown when taking the action\n+     * @param schemaSuppliers   The suppliers to match\n      * @param specialPropertyId This property id will always count as a match for the descriptor, regardless of\n-     * whether the entity has this property or not\n-     * @param callback The action to take on match\n+     *                          whether the entity has this property or not\n+     * @param callback          The action to take on match\n      * @throws EXCEPTION This exception is propagated from the action\n      */\n     static <SUPPLIER extends SchemaDescriptorSupplier, EXCEPTION extends Exception> void onMatchingSchema(\n-            Iterator<SUPPLIER> schemaSuppliers,\n-            int specialPropertyId,\n-            int[] existingPropertyIds,\n-            ThrowingConsumer<SUPPLIER,EXCEPTION> callback\n+      Iterator<SUPPLIER> schemaSuppliers,\n+      int specialPropertyId,\n+      int[] existingPropertyIds,\n+      ThrowingConsumer<SUPPLIER, EXCEPTION> callback\n     ) throws EXCEPTION\n     {\n-        while ( schemaSuppliers.hasNext() )\n+        while (schemaSuppliers.hasNext())\n         {\n             SUPPLIER schemaSupplier = schemaSuppliers.next();\n             SchemaDescriptor schema = schemaSupplier.schema();\n \n-            if ( entityHasSchemaProperties( existingPropertyIds, schema.getPropertyIds(), specialPropertyId ) )\n+            if (entityHasSchemaProperties(existingPropertyIds, schema.getPropertyIds(), specialPropertyId))\n             {\n-                callback.accept( schemaSupplier );\n+                callback.accept(schemaSupplier);\n             }\n         }\n     }\n \n     private static boolean entityHasSchemaProperties(\n-            int[] existingPropertyIds, int[] indexPropertyIds, int changedPropertyId )\n+      int[] existingPropertyIds, int[] indexPropertyIds, int changedPropertyId)\n     {\n-        for ( int indexPropertyId : indexPropertyIds )\n+        for (int indexPropertyId : indexPropertyIds)\n         {\n-            if ( indexPropertyId != changedPropertyId && !contains( existingPropertyIds, indexPropertyId ) )\n+            if (indexPropertyId != changedPropertyId && !contains(existingPropertyIds, indexPropertyId))\n             {\n                 return false;\n             }\n@@ -84,8 +85,8 @@ public class SchemaMatcher\n         return true;\n     }\n \n-    private static boolean contains( int[] existingPropertyIds, int indexPropertyId )\n+    private static boolean contains(int[] existingPropertyIds, int indexPropertyId)\n     {\n-        return Arrays.binarySearch( existingPropertyIds, indexPropertyId ) >= 0;\n+        return Arrays.binarySearch(existingPropertyIds, indexPropertyId) >= 0;\n     }\n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/416/SchemaMatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/416/SchemaMatcher.java\nindex 18534b87e74..bc441ce10d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/416/SchemaMatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/416/SchemaMatcher.java\n@@ -88,4 +88,4 @@ public class SchemaMatcher\n     {\n         return Arrays.binarySearch( existingPropertyIds, indexPropertyId ) >= 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}