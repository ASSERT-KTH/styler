{
    "project_name": "graphfoundation-ongdb",
    "error_id": "315",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "62",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "98",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "101",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/315/JLineConsole.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/315/JLineConsole.java\nindex 8702b99bee9..88bd4df05cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/315/JLineConsole.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/315/JLineConsole.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.impl;\n \n import java.io.File;\n@@ -30,80 +31,76 @@ import org.neo4j.shell.ShellClient;\n  */\n public class JLineConsole implements Console\n {\n-    private final Object consoleReader;\n+  private final Object consoleReader;\n \n-    static JLineConsole newConsoleOrNullIfNotFound( ShellClient client )\n+  static JLineConsole newConsoleOrNullIfNotFound(ShellClient client)\n+  {\n+    try\n     {\n-        try\n-        {\n-            Object consoleReader =\n-                Class.forName( \"jline.console.ConsoleReader\" ).newInstance();\n-            consoleReader.getClass().getMethod( \"setBellEnabled\",\n-                Boolean.TYPE ).invoke( consoleReader, false );\n-            consoleReader.getClass().getMethod( \"setExpandEvents\", Boolean.TYPE ).invoke(\n-                    consoleReader, false );\n-            consoleReader.getClass().getMethod( \"setHistoryEnabled\", Boolean.TYPE ).invoke(\n-                    consoleReader, true );\n-\n-            Object completer = Class.forName( JLineConsole.class.getPackage().getName() + \".\" +\n-                    \"ShellTabCompleter\" ).getConstructor( ShellClient.class ).newInstance( client );\n-            Class<?> completerClass = Class.forName( \"jline.console.completer.Completer\" );\n-            consoleReader.getClass().getMethod( \"addCompleter\",\n-                completerClass ).invoke( consoleReader, completer );\n+      Object consoleReader =\n+          Class.forName(\"jline.console.ConsoleReader\").newInstance();\n+      consoleReader.getClass().getMethod(\"setBellEnabled\",\n+          Boolean.TYPE).invoke(consoleReader, false);\n+      consoleReader.getClass().getMethod(\"setExpandEvents\", Boolean.TYPE).invoke(\n+          consoleReader, false);\n+      consoleReader.getClass().getMethod(\"setHistoryEnabled\", Boolean.TYPE).invoke(\n+          consoleReader, true);\n \n-            Class<?> historyClass = Class.forName( \"jline.console.history.History\" );\n-            Object history = Class.forName( \"jline.console.history.FileHistory\" ).getConstructor(\n-                    File.class ).newInstance( new File( System.getProperty(\n-                            \"user.home\" ), \".neo4j_shell_history\" ) );\n-            consoleReader.getClass().getMethod( \"setHistory\", historyClass ).invoke( consoleReader, history );\n+      Object completer = Class.forName(JLineConsole.class.getPackage().getName() + \".\" +\n+          \"ShellTabCompleter\").getConstructor(ShellClient.class).newInstance(client);\n+      Class<?> completerClass = Class.forName(\"jline.console.completer.Completer\");\n+      consoleReader.getClass().getMethod(\"addCompleter\",\n+          completerClass).invoke(consoleReader, completer);\n \n-            return new JLineConsole( consoleReader, client );\n-        }\n-        catch ( RuntimeException e )\n-        {\n-            // Only checked exceptions should cause us to return null,\n-            // a runtime exception is not expected - it could be an OOM\n-            // for instance, throw instead.\n-            throw e;\n-        }\n-        catch ( Exception e )\n-        {\n-            return null;\n-        }\n-    }\n+      Class<?> historyClass = Class.forName(\"jline.console.history.History\");\n+      Object history = Class.forName(\"jline.console.history.FileHistory\").getConstructor(\n+          File.class).newInstance(new File(System.getProperty(\n+          \"user.home\"), \".neo4j_shell_history\"));\n+      consoleReader.getClass().getMethod(\"setHistory\", historyClass).invoke(consoleReader, history);\n \n-    private JLineConsole( Object consoleReader, ShellClient client )\n+      return new JLineConsole(consoleReader, client);\n+    } catch (RuntimeException e)\n     {\n-        this.consoleReader = consoleReader;\n-    }\n-\n-    @Override\n-    public void format( String format, Object... args )\n+      // Only checked exceptions should cause us to return null,\n+      // a runtime exception is not expected - it could be an OOM\n+      // for instance, throw instead.\n+      throw e;\n+    } catch (Exception e)\n     {\n-        System.out.print( format );\n+      return null;\n     }\n+  }\n \n-    @Override\n-    public String readLine( String prompt )\n+  private JLineConsole(Object consoleReader, ShellClient client)\n+  {\n+    this.consoleReader = consoleReader;\n+  }\n+\n+  @Override\n+  public void format(String format, Object... args)\n+  {\n+    System.out.print(format);\n+  }\n+\n+  @Override\n+  public String readLine(String prompt)\n+  {\n+    try\n+    {\n+      consoleReader.getClass().getMethod(\"setPrompt\", String.class).invoke(\n+          consoleReader, prompt);\n+      Class<?> fileHistoryClass = Class.forName(\"jline.console.history.FileHistory\");\n+      Object history = consoleReader.getClass().getMethod(\"getHistory\").invoke(\n+          consoleReader);\n+      Class.forName(\"jline.console.history.FileHistory\").getMethod(\"flush\").invoke(\n+          history);\n+      return (String) consoleReader.getClass().getMethod(\"readLine\").invoke(consoleReader);\n+    } catch (RuntimeException e)\n+    {\n+      throw e;\n+    } catch (Exception e)\n     {\n-        try\n-        {\n-            consoleReader.getClass().getMethod( \"setPrompt\", String.class ).invoke(\n-                    consoleReader, prompt );\n-            Class<?> fileHistoryClass = Class.forName( \"jline.console.history.FileHistory\" );\n-            Object history = consoleReader.getClass().getMethod( \"getHistory\" ).invoke(\n-                    consoleReader );\n-            Class.forName( \"jline.console.history.FileHistory\" ).getMethod( \"flush\" ).invoke(\n-                    history );\n-            return (String) consoleReader.getClass().getMethod( \"readLine\" ).invoke( consoleReader );\n-        }\n-        catch ( RuntimeException e )\n-        {\n-            throw e;\n-        }\n-        catch ( Exception e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n+      throw new RuntimeException(e);\n     }\n+  }\n }\n",
            "diff_size": 97
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/315/JLineConsole.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/315/JLineConsole.java\nindex 8702b99bee9..eb124118865 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/315/JLineConsole.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/315/JLineConsole.java\n@@ -36,28 +36,17 @@ public class JLineConsole implements Console\n     {\n         try\n         {\n-            Object consoleReader =\n-                Class.forName( \"jline.console.ConsoleReader\" ).newInstance();\n-            consoleReader.getClass().getMethod( \"setBellEnabled\",\n-                Boolean.TYPE ).invoke( consoleReader, false );\n-            consoleReader.getClass().getMethod( \"setExpandEvents\", Boolean.TYPE ).invoke(\n-                    consoleReader, false );\n-            consoleReader.getClass().getMethod( \"setHistoryEnabled\", Boolean.TYPE ).invoke(\n-                    consoleReader, true );\n-\n-            Object completer = Class.forName( JLineConsole.class.getPackage().getName() + \".\" +\n-                    \"ShellTabCompleter\" ).getConstructor( ShellClient.class ).newInstance( client );\n-            Class<?> completerClass = Class.forName( \"jline.console.completer.Completer\" );\n-            consoleReader.getClass().getMethod( \"addCompleter\",\n-                completerClass ).invoke( consoleReader, completer );\n-\n-            Class<?> historyClass = Class.forName( \"jline.console.history.History\" );\n-            Object history = Class.forName( \"jline.console.history.FileHistory\" ).getConstructor(\n-                    File.class ).newInstance( new File( System.getProperty(\n-                            \"user.home\" ), \".neo4j_shell_history\" ) );\n-            consoleReader.getClass().getMethod( \"setHistory\", historyClass ).invoke( consoleReader, history );\n-\n-            return new JLineConsole( consoleReader, client );\n+            Object consoleReader = Class.forName( \"jline.console.ConsoleReader\" ).newInstance();\n+consoleReader.getClass().getMethod( \"setBellEnabled\", Boolean.TYPE ).invoke( consoleReader, false );\n+consoleReader.getClass().getMethod( \"setExpandEvents\", Boolean.TYPE ).invoke( consoleReader, false );\n+consoleReader.getClass().getMethod( \"setHistoryEnabled\", Boolean.TYPE ).invoke( consoleReader, true );\n+Object completer = Class.forName( JLineConsole.class.getPackage().getName() + \".\" + \"ShellTabCompleter\" ).getConstructor( ShellClient.class ).newInstance( client );\n+Class<?> completerClass = Class.forName( \"jline.console.completer.Completer\" );\n+            consoleReader.getClass().getMethod( \"addCompleter\", completerClass ).invoke( consoleReader, completer );\n+Class<?> historyClass = Class.forName( \"jline.console.history.History\" );\n+            Object history = Class.forName( \"jline.console.history.FileHistory\" ).getConstructor( File.class ).newInstance( new File( System.getProperty( \"user.home\" ), \".neo4j_shell_history\" ) );\n+consoleReader.getClass().getMethod( \"setHistory\", historyClass ).invoke( consoleReader, history );\n+return new JLineConsole( consoleReader, client );\n         }\n         catch ( RuntimeException e )\n         {\n@@ -88,14 +77,11 @@ public class JLineConsole implements Console\n     {\n         try\n         {\n-            consoleReader.getClass().getMethod( \"setPrompt\", String.class ).invoke(\n-                    consoleReader, prompt );\n-            Class<?> fileHistoryClass = Class.forName( \"jline.console.history.FileHistory\" );\n-            Object history = consoleReader.getClass().getMethod( \"getHistory\" ).invoke(\n-                    consoleReader );\n-            Class.forName( \"jline.console.history.FileHistory\" ).getMethod( \"flush\" ).invoke(\n-                    history );\n-            return (String) consoleReader.getClass().getMethod( \"readLine\" ).invoke( consoleReader );\n+            consoleReader.getClass().getMethod( \"setPrompt\", String.class ).invoke( consoleReader, prompt );\n+Class<?> fileHistoryClass = Class.forName( \"jline.console.history.FileHistory\" );\n+            Object history = consoleReader.getClass().getMethod( \"getHistory\" ).invoke( consoleReader );\n+Class.forName( \"jline.console.history.FileHistory\" ).getMethod( \"flush\" ).invoke( history );\n+return (String) consoleReader.getClass().getMethod( \"readLine\" ).invoke( consoleReader );\n         }\n         catch ( RuntimeException e )\n         {\n@@ -106,4 +92,4 @@ public class JLineConsole implements Console\n             throw new RuntimeException( e );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}