{
    "project_name": "wso2-attic-commons",
    "error_id": "41",
    "information": {
        "errors": [
            {
                "line": "137",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 133).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            store.connect(serverName, userName, password);\n        } catch (MessagingException e) {\n            logger.log(Level.SEVERE, \"[MSF] Caught an exception while connecting to Mail Store, properties are: \"+mailProperties, e);\n            throw e;\n        }\n        folder = store.getFolder(folderName);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/41/MailServerFolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/41/MailServerFolder.java\nindex ac9fa8ec147..765161d36a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/41/MailServerFolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/41/MailServerFolder.java\n@@ -134,7 +134,8 @@ public class MailServerFolder {\n         try {\r\n             store.connect(serverName, userName, password);\r\n         } catch (MessagingException e) {\r\n-            logger.log(Level.SEVERE, \"[MSF] Caught an exception while connecting to Mail Store, properties are: \"+mailProperties, e);\r\n+            logger.log(Level.SEVERE, \"[MSF] Caught an exception while connecting to Mail Store, properties are: \"\r\n+                    +mailProperties, e);\r\n             throw e;\r\n         }\r\n         folder = store.getFolder(folderName);\r\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/41/MailServerFolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/41/MailServerFolder.java\nindex ac9fa8ec147..e34c444a9dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/41/MailServerFolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/41/MailServerFolder.java\n@@ -1,8 +1,8 @@\n /*\r\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\r\n- * \r\n+ *\r\n  * Copyright (c) 1997-2013 Oracle and/or its affiliates. All rights reserved.\r\n- * \r\n+ *\r\n  * The contents of this file are subject to the terms of either the GNU General\r\n  * Public License Version 2 only (\"GPL\") or the Common Development and\r\n  * Distribution License(\"CDDL\") (collectively, the \"License\"). You may not use\r\n@@ -10,18 +10,18 @@\n  * License at https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html or\r\n  * packager/legal/LICENSE.txt. See the License for the specific language\r\n  * governing permissions and limitations under the License.\r\n- * \r\n+ *\r\n  * When distributing the software, include this License Header Notice in each\r\n  * file and include the License file at packager/legal/LICENSE.txt.\r\n- * \r\n+ *\r\n  * GPL Classpath Exception: Oracle designates this particular file as subject to\r\n  * the \"Classpath\" exception as provided by Oracle in the GPL Version 2 section\r\n  * of the License file that accompanied this code.\r\n- * \r\n+ *\r\n  * Modifications: If applicable, add the following below the License Header,\r\n  * with the fields enclosed by brackets [] replaced by your own identifying\r\n  * information: \"Portions Copyright [year] [name of copyright owner]\"\r\n- * \r\n+ *\r\n  * Contributor(s): If you wish your version of this file to be governed by only\r\n  * the CDDL or only the GPL Version 2, indicate your decision by adding\r\n  * \"[Contributor] elects to include this software in this distribution under the\r\n@@ -42,219 +42,216 @@ import java.util.logging.*;\n \r\n /**\r\n  * @author Alejandro Murillo\r\n- * \r\n  */\r\n \r\n // public class MailServerFolder implements MessageCountListener\r\n public class MailServerFolder {\r\n-    private javax.mail.Session       session;\r\n-    private javax.mail.Authenticator authenticator;\r\n-    private javax.mail.Store         store;\r\n-    private javax.mail.Folder        folder;\r\n-    private Properties               mailProperties;\r\n-\r\n-    private String protocol;\r\n-    private String serverName;\r\n-    private String userName;\r\n-    private String password;\r\n-    private String folderName;\r\n-\r\n-    public static final Logger  logger = Logger.getLogger(\"samples.connectors.mailconnector.ra.inbound\");\r\n-\r\n-    /**\r\n-     * Constructor.\r\n-     * \r\n-     * @param spec\r\n-     *    the ActivationSpec for the MDB\r\n-     */\r\n-\r\n-    public MailServerFolder(ActivationSpecImpl spec) throws Exception {\r\n-        folderName = spec.getFolderName();\r\n-        userName = spec.getUserName();\r\n-        password = spec.getPassword();\r\n-        serverName = spec.getServerName();\r\n-        protocol = spec.getProtocol();\r\n-\r\n-        this.authenticator = null;\r\n-\r\n-        mailProperties = new Properties();\r\n-        mailProperties.setProperty(\"mail.transport.protocol\", \"smtp\");\r\n-        mailProperties.setProperty(\"mail.store.protocol\", protocol);\r\n-        mailProperties.setProperty(\"mail.smtp.host\", serverName);\r\n+  private javax.mail.Session session;\r\n+  private javax.mail.Authenticator authenticator;\r\n+  private javax.mail.Store store;\r\n+  private javax.mail.Folder folder;\r\n+  private Properties mailProperties;\r\n+\r\n+  private String protocol;\r\n+  private String serverName;\r\n+  private String userName;\r\n+  private String password;\r\n+  private String folderName;\r\n+\r\n+  public static final Logger logger = Logger.getLogger(\"samples.connectors.mailconnector.ra.inbound\");\r\n+\r\n+  /**\r\n+   * Constructor.\r\n+   *\r\n+   * @param spec the ActivationSpec for the MDB\r\n+   */\r\n+\r\n+  public MailServerFolder(ActivationSpecImpl spec) throws Exception {\r\n+    folderName = spec.getFolderName();\r\n+    userName = spec.getUserName();\r\n+    password = spec.getPassword();\r\n+    serverName = spec.getServerName();\r\n+    protocol = spec.getProtocol();\r\n+\r\n+    this.authenticator = null;\r\n+\r\n+    mailProperties = new Properties();\r\n+    mailProperties.setProperty(\"mail.transport.protocol\", \"smtp\");\r\n+    mailProperties.setProperty(\"mail.store.protocol\", protocol);\r\n+    mailProperties.setProperty(\"mail.smtp.host\", serverName);\r\n //        mailProperties.setProperty(\"mail.imap.class\", \"org.jvnet.mock_javamail.MockStore\");\r\n \r\n-        try {\r\n-            open();\r\n-        } catch (Exception te) {\r\n-            logger.log(Level.SEVERE,\r\n-                    \"[S] Caught an exception when opening the Folder\", te);\r\n-            throw te;\r\n-        }\r\n+    try {\r\n+      open();\r\n+    } catch (Exception te) {\r\n+      logger.log(Level.SEVERE,\r\n+        \"[S] Caught an exception when opening the Folder\", te);\r\n+      throw te;\r\n     }\r\n+  }\r\n \r\n-    /**\r\n-     * Closes the folder.\r\n-     * \r\n-     * @exception Exception\r\n-     *                if the close fails\r\n-     */\r\n-\r\n-    public void close() throws Exception {\r\n-        /*\r\n-         * The JavaMail Session object does not have an explicit close.\r\n-         */\r\n-\r\n-        // logger.info(\"Listener::close()\");\r\n-        this.store.close();\r\n-        this.store = null;\r\n-        this.session = null;\r\n-        this.authenticator = null;\r\n+  /**\r\n+   * Closes the folder.\r\n+   *\r\n+   * @throws Exception if the close fails\r\n+   */\r\n \r\n-    }\r\n-\r\n-    /**\r\n-     * Opens a connection to the mail server.\r\n-     * \r\n-     * @exception Exception\r\n-     *                if the open fails\r\n+  public void close() throws Exception {\r\n+    /*\r\n+     * The JavaMail Session object does not have an explicit close.\r\n      */\r\n \r\n-    private void open() throws Exception {\r\n-        try {\r\n-            // Get a session object\r\n-            session = javax.mail.Session.getDefaultInstance(mailProperties);\r\n-            \r\n-            // Get a store object\r\n-            store = session.getStore(\"imap\");\r\n-        } catch (Exception te) {\r\n-            logger.log(Level.FINE, \"[MSF] Caught an exception when obtaining a JavaMail Session\", te);\r\n-            throw te;\r\n-        }\r\n-        \r\n-        try {\r\n-            store.connect(serverName, userName, password);\r\n-        } catch (MessagingException e) {\r\n-            logger.log(Level.SEVERE, \"[MSF] Caught an exception while connecting to Mail Store, properties are: \"+mailProperties, e);\r\n-            throw e;\r\n-        }\r\n-        folder = store.getFolder(folderName);\r\n-\r\n-        if ((folder == null) || (!this.folder.exists())) {\r\n-            Exception e = new Exception(\"Folder \" + folderName + \" does not exist or is not found\");\r\n-            throw e;\r\n-        }\r\n-\r\n-        folder.open(javax.mail.Folder.READ_WRITE);\r\n-        // folder.addMessageCountListener(this); //set this as the folder\r\n-        // MessageCountListener\r\n+    // logger.info(\"Listener::close()\");\r\n+    this.store.close();\r\n+    this.store = null;\r\n+    this.session = null;\r\n+    this.authenticator = null;\r\n+\r\n+  }\r\n+\r\n+  /**\r\n+   * Opens a connection to the mail server.\r\n+   *\r\n+   * @throws Exception if the open fails\r\n+   */\r\n+\r\n+  private void open() throws Exception {\r\n+    try {\r\n+      // Get a session object\r\n+      session = javax.mail.Session.getDefaultInstance(mailProperties);\r\n+\r\n+      // Get a store object\r\n+      store = session.getStore(\"imap\");\r\n+    } catch (Exception te) {\r\n+      logger.log(Level.FINE, \"[MSF] Caught an exception when obtaining a JavaMail Session\", te);\r\n+      throw te;\r\n     }\r\n \r\n-    private void reopen() throws Exception {\r\n-        if (!folder.isOpen()) {\r\n-            // logger.info(\"[MSF] Reopening folder\");\r\n-            folder.open(javax.mail.Folder.READ_WRITE);\r\n-            // folder.addMessageCountListener(this); //set this as the folder\r\n-            // MessageCountListener\r\n-        }\r\n+    try {\r\n+      store.connect(serverName, userName, password);\r\n+    } catch (MessagingException e) {\r\n+      logger.log(Level.SEVERE,\r\n+        \"[MSF] Caught an exception while connecting to Mail Store, properties are: \" + mailProperties, e);\r\n+      throw e;\r\n     }\r\n+    folder = store.getFolder(folderName);\r\n \r\n-    /**\r\n-     * Retrieves new messages.\r\n-     * \r\n-     * @return an array of messages\r\n-     */\r\n-\r\n-    public Message[] getNewMessages() throws Exception {\r\n-        reopen(); // Make sure the folder is open\r\n-\r\n-        //\r\n-        // Deliver only new messages to the MDB\r\n-        //\r\n-\r\n-        try {\r\n-            if (folder.hasNewMessages()) {\r\n-                int newMsgs = folder.getNewMessageCount();\r\n-                int msgCount = folder.getMessageCount();\r\n-                Message msgs[] = folder.getMessages(msgCount - newMsgs + 1,  msgCount);\r\n-                return msgs;\r\n-            }\r\n-        } catch (Exception e) {\r\n-            logger.info(\"[MSF] Exception obtaining messages from mail server\");\r\n-        }\r\n-        return null;\r\n+    if ((folder == null) || (!this.folder.exists())) {\r\n+      Exception e = new Exception(\"Folder \" + folderName + \" does not exist or is not found\");\r\n+      throw e;\r\n     }\r\n \r\n-    /**\r\n-     * Retrieves headers of new messages.\r\n-     * \r\n-     * @return a string array containing the message headers\r\n-     */\r\n-\r\n-    public String[] getNewMessageHeaders() throws Exception {\r\n-        reopen(); // Make sure the folder is open\r\n-\r\n-        //\r\n-        // Deliver only new messages to the MDB\r\n-        //\r\n-\r\n-        try {\r\n-            if (folder.hasNewMessages()) {\r\n-                int newMsgs = folder.getNewMessageCount();\r\n-                int msgCount = folder.getMessageCount();\r\n-                Message[] msgs = folder.getMessages(msgCount - newMsgs + 1,\r\n-                        msgCount);\r\n-                String[] headers = new String[msgs.length];\r\n-                logger.info(\"messages length: \" + msgs.length);\r\n-                logger.info(\"headers length: \" + headers.length);\r\n-                for (int i = 0; i < headers.length; i++) {\r\n-                    logger.info(\"[MSF] Packing message with SUBJECT: \"\r\n-                            + msgs[i].getSubject());\r\n-                    headers[i] = msgs[i].getSubject();\r\n-                }\r\n-                return headers;\r\n-            }\r\n-        } catch (Exception e) {\r\n-            logger.severe(\"[MSF] Exception obtaining messages from mail server:\");\r\n-            e.printStackTrace();\r\n-        }\r\n-        return null;\r\n+    folder.open(javax.mail.Folder.READ_WRITE);\r\n+    // folder.addMessageCountListener(this); //set this as the folder\r\n+    // MessageCountListener\r\n+  }\r\n+\r\n+  private void reopen() throws Exception {\r\n+    if (!folder.isOpen()) {\r\n+      // logger.info(\"[MSF] Reopening folder\");\r\n+      folder.open(javax.mail.Folder.READ_WRITE);\r\n+      // folder.addMessageCountListener(this); //set this as the folder\r\n+      // MessageCountListener\r\n     }\r\n-\r\n-    public boolean hasNewMessages() throws Exception {\r\n-        reopen(); // Make sure the folder is open\r\n-\r\n-        /****\r\n-         * logger.info(\"Folder <\" + folder.getName() + \"> has (\" +\r\n-         * folder.getUnreadMessageCount() + \") unread messages\");\r\n-         * logger.info(\"Folder <\" + folder.getName() + \"> has (\" +\r\n-         * folder.getNewMessageCount() + \") NEW messages\");\r\n-         ****/\r\n-\r\n-        return folder.hasNewMessages();\r\n+  }\r\n+\r\n+  /**\r\n+   * Retrieves new messages.\r\n+   *\r\n+   * @return an array of messages\r\n+   */\r\n+\r\n+  public Message[] getNewMessages() throws Exception {\r\n+    reopen(); // Make sure the folder is open\r\n+\r\n+    //\r\n+    // Deliver only new messages to the MDB\r\n+    //\r\n+\r\n+    try {\r\n+      if (folder.hasNewMessages()) {\r\n+        int newMsgs = folder.getNewMessageCount();\r\n+        int msgCount = folder.getMessageCount();\r\n+        Message msgs[] = folder.getMessages(msgCount - newMsgs + 1, msgCount);\r\n+        return msgs;\r\n+      }\r\n+    } catch (Exception e) {\r\n+      logger.info(\"[MSF] Exception obtaining messages from mail server\");\r\n     }\r\n-\r\n-    /**\r\n-     * These 2 methods should be uncommented when this class implements the\r\n-     * MessageCountListener interface\r\n-     * \r\n-     * \r\n-     * \r\n-     * public void messagesAdded(MessageCountEvent e) {\r\n-     * logger.info(\"messagesAdded: ENTERED\"); try { Message[] msgs =\r\n-     * e.getMessages(); logger.info(\"messagesAdded: \" + msgs.length); for (int i\r\n-     * = 0; i < msgs.length; i++) {\r\n-     * logger.info(\"<MSF> Added Message with SUBJECT: \" + msgs[i].getSubject());\r\n-     * } } catch (Exception ex) {\r\n-     * logger.info(\"[S] Got an Exception in messagesAdded\"); } }\r\n-     * \r\n-     * public void messagesRemoved(MessageCountEvent e) {\r\n-     * logger.info(\"messagesRemoved: ENTERED\"); try { Message[] msgs =\r\n-     * e.getMessages(); logger.info(\"messagesRemoved: \" + msgs.length); for (int\r\n-     * i = 0; i < msgs.length; i++) {\r\n-     * logger.info(\"<MSF> Removed Message with SUBJECT: \" +\r\n-     * msgs[i].getSubject()); } } catch (Exception ex) {\r\n-     * logger.info(\"[S] Got an Exception in messagesRemoved\"); } }\r\n-     * \r\n-     */\r\n+    return null;\r\n+  }\r\n+\r\n+  /**\r\n+   * Retrieves headers of new messages.\r\n+   *\r\n+   * @return a string array containing the message headers\r\n+   */\r\n+\r\n+  public String[] getNewMessageHeaders() throws Exception {\r\n+    reopen(); // Make sure the folder is open\r\n+\r\n+    //\r\n+    // Deliver only new messages to the MDB\r\n+    //\r\n+\r\n+    try {\r\n+      if (folder.hasNewMessages()) {\r\n+        int newMsgs = folder.getNewMessageCount();\r\n+        int msgCount = folder.getMessageCount();\r\n+        Message[] msgs = folder.getMessages(msgCount - newMsgs + 1,\r\n+          msgCount);\r\n+        String[] headers = new String[msgs.length];\r\n+        logger.info(\"messages length: \" + msgs.length);\r\n+        logger.info(\"headers length: \" + headers.length);\r\n+        for (int i = 0; i < headers.length; i++) {\r\n+          logger.info(\"[MSF] Packing message with SUBJECT: \"\r\n+            + msgs[i].getSubject());\r\n+          headers[i] = msgs[i].getSubject();\r\n+        }\r\n+        return headers;\r\n+      }\r\n+    } catch (Exception e) {\r\n+      logger.severe(\"[MSF] Exception obtaining messages from mail server:\");\r\n+      e.printStackTrace();\r\n+    }\r\n+    return null;\r\n+  }\r\n+\r\n+  public boolean hasNewMessages() throws Exception {\r\n+    reopen(); // Make sure the folder is open\r\n+\r\n+    /****\r\n+     * logger.info(\"Folder <\" + folder.getName() + \"> has (\" +\r\n+     * folder.getUnreadMessageCount() + \") unread messages\");\r\n+     * logger.info(\"Folder <\" + folder.getName() + \"> has (\" +\r\n+     * folder.getNewMessageCount() + \") NEW messages\");\r\n+     ****/\r\n+\r\n+    return folder.hasNewMessages();\r\n+  }\r\n+\r\n+  /**\r\n+   * These 2 methods should be uncommented when this class implements the\r\n+   * MessageCountListener interface\r\n+   *\r\n+   *\r\n+   *\r\n+   * public void messagesAdded(MessageCountEvent e) {\r\n+   * logger.info(\"messagesAdded: ENTERED\"); try { Message[] msgs =\r\n+   * e.getMessages(); logger.info(\"messagesAdded: \" + msgs.length); for (int i\r\n+   * = 0; i < msgs.length; i++) {\r\n+   * logger.info(\"<MSF> Added Message with SUBJECT: \" + msgs[i].getSubject());\r\n+   * } } catch (Exception ex) {\r\n+   * logger.info(\"[S] Got an Exception in messagesAdded\"); } }\r\n+   *\r\n+   * public void messagesRemoved(MessageCountEvent e) {\r\n+   * logger.info(\"messagesRemoved: ENTERED\"); try { Message[] msgs =\r\n+   * e.getMessages(); logger.info(\"messagesRemoved: \" + msgs.length); for (int\r\n+   * i = 0; i < msgs.length; i++) {\r\n+   * logger.info(\"<MSF> Removed Message with SUBJECT: \" +\r\n+   * msgs[i].getSubject()); } } catch (Exception ex) {\r\n+   * logger.info(\"[S] Got an Exception in messagesRemoved\"); } }\r\n+   *\r\n+   */\r\n \r\n }\r\n",
            "diff_size": 266
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/41/MailServerFolder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/41/MailServerFolder.java\nindex ac9fa8ec147..765161d36a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/41/MailServerFolder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/41/MailServerFolder.java\n@@ -134,7 +134,8 @@ public class MailServerFolder {\n         try {\r\n             store.connect(serverName, userName, password);\r\n         } catch (MessagingException e) {\r\n-            logger.log(Level.SEVERE, \"[MSF] Caught an exception while connecting to Mail Store, properties are: \"+mailProperties, e);\r\n+            logger.log(Level.SEVERE, \"[MSF] Caught an exception while connecting to Mail Store, properties are: \"\r\n+                    +mailProperties, e);\r\n             throw e;\r\n         }\r\n         folder = store.getFolder(folderName);\r\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}