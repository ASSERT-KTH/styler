{
    "project_name": "graphfoundation-ongdb",
    "error_id": "727",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/727/RecordTypeVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/727/RecordTypeVisitor.java\nindex c0101a12eeb..7b51881e844 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/727/RecordTypeVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/727/RecordTypeVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tooling.procedure.visitors;\n \n import java.util.Set;\n@@ -37,48 +38,48 @@ import static javax.lang.model.element.Modifier.PUBLIC;\n import static javax.lang.model.element.Modifier.STATIC;\n import static javax.lang.model.util.ElementFilter.fieldsIn;\n \n-class RecordTypeVisitor extends SimpleTypeVisitor8<Stream<CompilationMessage>,Void>\n+class RecordTypeVisitor extends SimpleTypeVisitor8<Stream<CompilationMessage>, Void>\n {\n \n-    private final Types typeUtils;\n-    private final TypeVisitor<Boolean,Void> fieldTypeVisitor;\n+  private final Types typeUtils;\n+  private final TypeVisitor<Boolean, Void> fieldTypeVisitor;\n \n-    RecordTypeVisitor( Types typeUtils, TypeMirrorUtils typeMirrors )\n-    {\n-        this.typeUtils = typeUtils;\n-        fieldTypeVisitor = new RecordFieldTypeVisitor( typeUtils, typeMirrors );\n-    }\n+  RecordTypeVisitor(Types typeUtils, TypeMirrorUtils typeMirrors)\n+  {\n+    this.typeUtils = typeUtils;\n+    fieldTypeVisitor = new RecordFieldTypeVisitor(typeUtils, typeMirrors);\n+  }\n \n-    @Override\n-    public Stream<CompilationMessage> visitDeclared( DeclaredType returnType, Void ignored )\n-    {\n-        return returnType.getTypeArguments().stream().flatMap( this::validateRecord );\n-    }\n+  @Override\n+  public Stream<CompilationMessage> visitDeclared(DeclaredType returnType, Void ignored)\n+  {\n+    return returnType.getTypeArguments().stream().flatMap(this::validateRecord);\n+  }\n \n-    private Stream<CompilationMessage> validateRecord( TypeMirror recordType )\n-    {\n-        Element recordElement = typeUtils.asElement( recordType );\n-        return Stream.concat( validateFieldModifiers( recordElement ), validateFieldType( recordElement ) );\n-    }\n+  private Stream<CompilationMessage> validateRecord(TypeMirror recordType)\n+  {\n+    Element recordElement = typeUtils.asElement(recordType);\n+    return Stream.concat(validateFieldModifiers(recordElement), validateFieldType(recordElement));\n+  }\n \n-    private Stream<CompilationMessage> validateFieldModifiers( Element recordElement )\n+  private Stream<CompilationMessage> validateFieldModifiers(Element recordElement)\n+  {\n+    return fieldsIn(recordElement.getEnclosedElements()).stream().filter(element ->\n     {\n-        return fieldsIn( recordElement.getEnclosedElements() ).stream().filter( element ->\n-        {\n-            Set<Modifier> modifiers = element.getModifiers();\n-            return !modifiers.contains( PUBLIC ) && !modifiers.contains( STATIC );\n-        } ).map( element -> new RecordTypeError( element, \"Record definition error: field %s#%s must be public\",\n-                recordElement.getSimpleName(), element.getSimpleName() ) );\n-    }\n+      Set<Modifier> modifiers = element.getModifiers();\n+      return !modifiers.contains(PUBLIC) && !modifiers.contains(STATIC);\n+    }).map(element -> new RecordTypeError(element, \"Record definition error: field %s#%s must be public\",\n+        recordElement.getSimpleName(), element.getSimpleName()));\n+  }\n \n-    private Stream<CompilationMessage> validateFieldType( Element recordElement )\n-    {\n-        return fieldsIn( recordElement.getEnclosedElements() ).stream()\n-                .filter( element -> !element.getModifiers().contains( STATIC ) )\n-                .filter( element -> !fieldTypeVisitor.visit( element.asType() ) )\n-                .map( element -> new RecordTypeError( element,\n-                        \"Record definition error: type of field %s#%s is not supported\", recordElement.getSimpleName(),\n-                        element.getSimpleName() ) );\n-    }\n+  private Stream<CompilationMessage> validateFieldType(Element recordElement)\n+  {\n+    return fieldsIn(recordElement.getEnclosedElements()).stream()\n+        .filter(element -> !element.getModifiers().contains(STATIC))\n+        .filter(element -> !fieldTypeVisitor.visit(element.asType()))\n+        .map(element -> new RecordTypeError(element,\n+            \"Record definition error: type of field %s#%s is not supported\", recordElement.getSimpleName(),\n+            element.getSimpleName()));\n+  }\n \n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 371).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/727/RecordTypeVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/727/RecordTypeVisitor.java\nindex c0101a12eeb..41cf6717265 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/727/RecordTypeVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/727/RecordTypeVisitor.java\n@@ -39,7 +39,6 @@ import static javax.lang.model.util.ElementFilter.fieldsIn;\n \n class RecordTypeVisitor extends SimpleTypeVisitor8<Stream<CompilationMessage>,Void>\n {\n-\n     private final Types typeUtils;\n     private final TypeVisitor<Boolean,Void> fieldTypeVisitor;\n \n@@ -73,12 +72,6 @@ class RecordTypeVisitor extends SimpleTypeVisitor8<Stream<CompilationMessage>,Vo\n \n     private Stream<CompilationMessage> validateFieldType( Element recordElement )\n     {\n-        return fieldsIn( recordElement.getEnclosedElements() ).stream()\n-                .filter( element -> !element.getModifiers().contains( STATIC ) )\n-                .filter( element -> !fieldTypeVisitor.visit( element.asType() ) )\n-                .map( element -> new RecordTypeError( element,\n-                        \"Record definition error: type of field %s#%s is not supported\", recordElement.getSimpleName(),\n-                        element.getSimpleName() ) );\n+        return fieldsIn( recordElement.getEnclosedElements() ).stream().filter( element -> !element.getModifiers().contains( STATIC ) ).filter( element -> !fieldTypeVisitor.visit( element.asType() ) ).map( element -> new RecordTypeError( element, \"Record definition error: type of field %s#%s is not supported\", recordElement.getSimpleName(), element.getSimpleName() ) );\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}