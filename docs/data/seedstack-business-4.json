{
    "project_name": "seedstack-business",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "8",
                "column": "1",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.domain;\n\nimport static com.google.inject.util.Types.newParameterizedType;\nimport static org.seedstack.business.internal.utils.BusinessUtils.resolveDefaultQualifier;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/4/DefaultRepositoryCollector.java\nindex a849adbb5dd..a56197bac83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/4/DefaultRepositoryCollector.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import static com.google.inject.util.Types.newParameterizedType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/4/DefaultRepositoryCollector.java\nindex a849adbb5dd..f7eb4200af5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/4/DefaultRepositoryCollector.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import static com.google.inject.util.Types.newParameterizedType;\n@@ -35,8 +36,8 @@ class DefaultRepositoryCollector {\n     private final Collection<Class<? extends Repository>> defaultRepositoryImplementations;\n \n     DefaultRepositoryCollector(Application application,\n-            Map<Key<?>, Class<?>> bindings,\n-            Collection<Class<? extends Repository>> defaultRepositoryImplementations) {\n+                               Map<Key<?>, Class<?>> bindings,\n+                               Collection<Class<? extends Repository>> defaultRepositoryImplementations) {\n         this.application = application;\n         this.bindings = bindings;\n         this.defaultRepositoryImplementations = defaultRepositoryImplementations;\n@@ -116,6 +117,6 @@ class DefaultRepositoryCollector {\n     @SuppressWarnings(\"unchecked\")\n     private Type[] getTypes(Class aggregateClass) {\n         Class<?> aggregateIdClass = BusinessUtils.resolveAggregateIdClass(aggregateClass);\n-        return new Type[]{aggregateClass, aggregateIdClass};\n+        return new Type[] {aggregateClass, aggregateIdClass};\n     }\n }\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "column": "5",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "column": "9",
                    "severity": "warning",
                    "message": "'DEFAULT_REPOSITORY_KEY' has incorrect indentation level 8, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "column": "120",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "74",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/4/DefaultRepositoryCollector.java\nindex a849adbb5dd..acdc3e15a69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/4/DefaultRepositoryCollector.java\n@@ -34,10 +34,8 @@ class DefaultRepositoryCollector {\n     private final Map<Key<?>, Class<?>> bindings;\n     private final Collection<Class<? extends Repository>> defaultRepositoryImplementations;\n \n-    DefaultRepositoryCollector(Application application,\n-            Map<Key<?>, Class<?>> bindings,\n-            Collection<Class<? extends Repository>> defaultRepositoryImplementations) {\n-        this.application = application;\n+    DefaultRepositoryCollector(Application application, Map<Key<?>, Class<?>> bindings, Collection<Class<? extends Repository>> defaultRepositoryImplementations) {\n+    this.application = application;\n         this.bindings = bindings;\n         this.defaultRepositoryImplementations = defaultRepositoryImplementations;\n     }\n@@ -56,23 +54,13 @@ class DefaultRepositoryCollector {\n         for (Class<? extends AggregateRoot<?>> aggregateClass : BusinessUtils.includeSuperClasses(aggregateClasses)) {\n             Type[] generics = getTypes(aggregateClass);\n             TypeLiteral<?> genericInterface = TypeLiteral.get(newParameterizedType(Repository.class, generics));\n-            allGenerics.put(generics, resolveDefaultQualifier(\n-                    bindings,\n-                    application.getConfiguration(aggregateClass),\n-                    DEFAULT_REPOSITORY_KEY,\n-                    aggregateClass,\n-                    genericInterface\n-                    ).orElse(null)\n-            );\n+            allGenerics.put(generics, resolveDefaultQualifier(bindings, application.getConfiguration(aggregateClass),\n+        DEFAULT_REPOSITORY_KEY, aggregateClass, genericInterface).orElse(null));\n         }\n \n         // Create a binding strategy for each default repository implementation\n         for (Class<? extends Repository> defaultRepoImpl : defaultRepositoryImplementations) {\n-            bindingStrategies.add(new GenericBindingStrategy<>(\n-                    Repository.class,\n-                    defaultRepoImpl,\n-                    allGenerics)\n-            );\n+            bindingStrategies.add(new GenericBindingStrategy<>(Repository.class, defaultRepoImpl, allGenerics));\n         }\n \n         return bindingStrategies;\n@@ -82,13 +70,9 @@ class DefaultRepositoryCollector {\n         Collection<BindingStrategy> bindingStrategies = new ArrayList<>();\n         for (Class<? extends Repository> repositoryInterface : repositoryInterfaces) {\n             if (bindings.containsKey(Key.get(repositoryInterface))) {\n-                LOGGER.info(\"Skipping implementation generation for repository {}: an explicit implementation already \"\n-                        + \"exists\", repositoryInterface.getName());\n-            } else {\n-                bindingStrategies.add(collectFromInterface(\n-                        repositoryInterface,\n-                        BusinessUtils.resolveGenerics(Repository.class, repositoryInterface)\n-                ));\n+                LOGGER.info(\"Skipping implementation generation for repository {}: an explicit implementation already \"+ \"exists\", repositoryInterface.getName());\n+    } else {\n+                bindingStrategies.add(collectFromInterface(repositoryInterface, BusinessUtils.resolveGenerics(Repository.class, repositoryInterface)));\n             }\n         }\n         return bindingStrategies;\n@@ -97,20 +81,11 @@ class DefaultRepositoryCollector {\n     private <T extends Repository> BindingStrategy collectFromInterface(Class<T> repoInterface, Type[] generics) {\n         DefaultRepositoryGenerator<T> defaultRepositoryGenerator = new DefaultRepositoryGenerator<>(repoInterface);\n         Class<?> aggregateClass = (Class<?>) generics[0];\n-        return new DefaultRepositoryStrategy<>(\n-                repoInterface,\n-                generics,\n-                defaultRepositoryImplementations.stream()\n+        return new DefaultRepositoryStrategy<>(repoInterface, generics, defaultRepositoryImplementations.stream()\n                         .map(defaultRepositoryGenerator::generate)\n                         .collect(Collectors.toList()),\n-                resolveDefaultQualifier(\n-                        bindings,\n-                        application.getConfiguration(aggregateClass),\n-                        DEFAULT_REPOSITORY_KEY,\n-                        aggregateClass,\n-                        TypeLiteral.get(repoInterface)\n-                ).orElse(null)\n-        );\n+        resolveDefaultQualifier(bindings, application.getConfiguration(aggregateClass),\n+        DEFAULT_REPOSITORY_KEY, aggregateClass, TypeLiteral.get(repoInterface)).orElse(null));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -118,4 +93,4 @@ class DefaultRepositoryCollector {\n         Class<?> aggregateIdClass = BusinessUtils.resolveAggregateIdClass(aggregateClass);\n         return new Type[]{aggregateClass, aggregateIdClass};\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "column": "120",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 119, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "column": "120",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 119, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "column": "120",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 119, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "column": "1",
                    "severity": "warning",
                    "message": "'resolveDefaultQualifier' has incorrect indentation level 0, expected level should be 127.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "column": "5",
                    "severity": "warning",
                    "message": "'application' has incorrect indentation level 4, expected level should be 127.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "column": "9",
                    "severity": "warning",
                    "message": "'DEFAULT_REPOSITORY_KEY' has incorrect indentation level 8, expected level should be 127.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "column": "13",
                    "severity": "warning",
                    "message": "'aggregateClass' has incorrect indentation level 12, expected level should be 127.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "column": "17",
                    "severity": "warning",
                    "message": "'genericInterface' has incorrect indentation level 16, expected level should be 127.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "column": "21",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 20, expected level should be 127.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "column": "116",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 115, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "column": "96",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 95, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "column": "92",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 91, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "column": "88",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 87, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "column": "92",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 91, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "column": "195",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "column": "1",
                    "severity": "warning",
                    "message": "'repositoryInterface' has incorrect indentation level 0, expected level should be 99.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "column": "88",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 87, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "column": "92",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 91, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "column": "96",
                    "severity": "warning",
                    "message": "'BusinessUtils' has incorrect indentation level 95, expected level should be 99.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "column": "88",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 87, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "column": "84",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 83, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/4/DefaultRepositoryCollector.java\nindex a849adbb5dd..4ce2b0f0e92 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/4/DefaultRepositoryCollector.java\n@@ -8,8 +8,8 @@\n package org.seedstack.business.internal.domain;\n \n import static com.google.inject.util.Types.newParameterizedType;\n-import static org.seedstack.business.internal.utils.BusinessUtils.resolveDefaultQualifier;\n \n+import static org.seedstack.business.internal.utils.BusinessUtils.resolveDefaultQualifier;\n import com.google.inject.Key;\n import com.google.inject.TypeLiteral;\n import java.lang.reflect.Type;\n@@ -27,16 +27,16 @@ import org.seedstack.seed.core.internal.guice.GenericBindingStrategy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n class DefaultRepositoryCollector {\n+\n     private static final Logger LOGGER = LoggerFactory.getLogger(DefaultRepositoryCollector.class);\n     private static final String DEFAULT_REPOSITORY_KEY = \"defaultRepository\";\n     private final Application application;\n     private final Map<Key<?>, Class<?>> bindings;\n     private final Collection<Class<? extends Repository>> defaultRepositoryImplementations;\n \n-    DefaultRepositoryCollector(Application application,\n-            Map<Key<?>, Class<?>> bindings,\n-            Collection<Class<? extends Repository>> defaultRepositoryImplementations) {\n+    DefaultRepositoryCollector(Application application, Map<Key<?>, Class<?>> bindings, Collection<Class<? extends Repository>> defaultRepositoryImplementations) {\n         this.application = application;\n         this.bindings = bindings;\n         this.defaultRepositoryImplementations = defaultRepositoryImplementations;\n@@ -49,73 +49,64 @@ class DefaultRepositoryCollector {\n      * @param aggregateClasses the aggregates classes to collect repositories from.\n      * @return a binding strategy\n      */\n+\n     Collection<BindingStrategy> collectFromAggregates(Collection<Class<? extends AggregateRoot>> aggregateClasses) {\n         Collection<BindingStrategy> bindingStrategies = new ArrayList<>();\n+\n         Map<Type[], Key<?>> allGenerics = new HashMap<>();\n+        for(Class<? extends AggregateRoot<?>> aggregateClass :BusinessUtils.includeSuperClasses(aggregateClasses)) {\n+                                                                                                                       Type[] generics = getTypes(aggregateClass);\n \n-        for (Class<? extends AggregateRoot<?>> aggregateClass : BusinessUtils.includeSuperClasses(aggregateClasses)) {\n-            Type[] generics = getTypes(aggregateClass);\n-            TypeLiteral<?> genericInterface = TypeLiteral.get(newParameterizedType(Repository.class, generics));\n-            allGenerics.put(generics, resolveDefaultQualifier(\n-                    bindings,\n-                    application.getConfiguration(aggregateClass),\n-                    DEFAULT_REPOSITORY_KEY,\n-                    aggregateClass,\n-                    genericInterface\n-                    ).orElse(null)\n-            );\n-        }\n+                                                                                                                       TypeLiteral<?> genericInterface = TypeLiteral.get(newParameterizedType(Repository.class, generics));\n+                                                                                                                       allGenerics.put(generics,\n+resolveDefaultQualifier(bindings,\n+    application.getConfiguration(aggregateClass),\n+        DEFAULT_REPOSITORY_KEY,\n+            aggregateClass,\n+                genericInterface)\n+                    .orElse(null));\n+                                                                                                                   }\n \n         // Create a binding strategy for each default repository implementation\n-        for (Class<? extends Repository> defaultRepoImpl : defaultRepositoryImplementations) {\n-            bindingStrategies.add(new GenericBindingStrategy<>(\n-                    Repository.class,\n-                    defaultRepoImpl,\n-                    allGenerics)\n-            );\n-        }\n-\n+        for(Class<? extends Repository> defaultRepoImpl :defaultRepositoryImplementations) {\n+                                                                                               bindingStrategies.add(new GenericBindingStrategy<>(Repository.class, defaultRepoImpl, allGenerics));\n+                                                                                           }\n         return bindingStrategies;\n     }\n \n     Collection<BindingStrategy> collectFromInterfaces(Collection<Class<? extends Repository>> repositoryInterfaces) {\n         Collection<BindingStrategy> bindingStrategies = new ArrayList<>();\n-        for (Class<? extends Repository> repositoryInterface : repositoryInterfaces) {\n-            if (bindings.containsKey(Key.get(repositoryInterface))) {\n-                LOGGER.info(\"Skipping implementation generation for repository {}: an explicit implementation already \"\n-                        + \"exists\", repositoryInterface.getName());\n-            } else {\n-                bindingStrategies.add(collectFromInterface(\n-                        repositoryInterface,\n-                        BusinessUtils.resolveGenerics(Repository.class, repositoryInterface)\n-                ));\n-            }\n-        }\n+        for(Class<? extends Repository> repositoryInterface :repositoryInterfaces) {\n+                                                                                       if (bindings.containsKey(Key.get(repositoryInterface))) {\n+                                                                                           LOGGER.info(\"Skipping implementation generation for repository {}: an explicit implementation already \"+ \"exists\",\n+repositoryInterface.getName());\n+                                                                                       } else {\n+                                                                                           bindingStrategies.add(collectFromInterface(repositoryInterface,\n+                                                                                               BusinessUtils.resolveGenerics(Repository.class, repositoryInterface)));\n+                                                                                       }\n+                                                                                   }\n         return bindingStrategies;\n     }\n \n     private <T extends Repository> BindingStrategy collectFromInterface(Class<T> repoInterface, Type[] generics) {\n         DefaultRepositoryGenerator<T> defaultRepositoryGenerator = new DefaultRepositoryGenerator<>(repoInterface);\n+\n         Class<?> aggregateClass = (Class<?>) generics[0];\n-        return new DefaultRepositoryStrategy<>(\n-                repoInterface,\n-                generics,\n-                defaultRepositoryImplementations.stream()\n-                        .map(defaultRepositoryGenerator::generate)\n-                        .collect(Collectors.toList()),\n-                resolveDefaultQualifier(\n-                        bindings,\n-                        application.getConfiguration(aggregateClass),\n-                        DEFAULT_REPOSITORY_KEY,\n+\n+        return new DefaultRepositoryStrategy<>(repoInterface, generics, defaultRepositoryImplementations.stream()\n+            .map(defaultRepositoryGenerator::generate)\n+            .collect(Collectors.toList()), resolveDefaultQualifier(bindings,\n+                application.getConfiguration(aggregateClass),\n+                    DEFAULT_REPOSITORY_KEY,\n                         aggregateClass,\n-                        TypeLiteral.get(repoInterface)\n-                ).orElse(null)\n-        );\n+                            TypeLiteral.get(repoInterface))\n+                                .orElse(null));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     private Type[] getTypes(Class aggregateClass) {\n         Class<?> aggregateIdClass = BusinessUtils.resolveAggregateIdClass(aggregateClass);\n+\n         return new Type[]{aggregateClass, aggregateIdClass};\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/4/DefaultRepositoryCollector.java\nindex a849adbb5dd..a56197bac83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/4/DefaultRepositoryCollector.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import static com.google.inject.util.Types.newParameterizedType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/4/DefaultRepositoryCollector.java\nindex a849adbb5dd..a56197bac83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/4/DefaultRepositoryCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/4/DefaultRepositoryCollector.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import static com.google.inject.util.Types.newParameterizedType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}