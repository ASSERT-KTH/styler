{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "530",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.messaging.client;\n\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\nimport gov.hhs.fha.nhinc.messaging.service.port.ServicePortDescriptor;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/530/CONNECTCXFClientFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/530/CONNECTCXFClientFactory.java\nindex 0d79e2a5f2c..a39d938aa81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/530/CONNECTCXFClientFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/530/CONNECTCXFClientFactory.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.messaging.client;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/530/CONNECTCXFClientFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/530/CONNECTCXFClientFactory.java\nindex 0d79e2a5f2c..70801acd1a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/530/CONNECTCXFClientFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/530/CONNECTCXFClientFactory.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.messaging.client;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -32,50 +33,51 @@ import org.apache.commons.lang.StringUtils;\n \n /**\n  * @author akong\n- *\n  */\n public class CONNECTCXFClientFactory extends CONNECTClientFactory {\n \n-    /**\n-     * Returns a CONNECTClient configured for secured invocation.\n-     */\n-    @Override\n-    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, String url,\n-            AssertionType assertion) {\n-        return getCONNECTClientSecured(portDescriptor, url, assertion, null, null);\n-    }\n+  /**\n+   * Returns a CONNECTClient configured for secured invocation.\n+   */\n+  @Override\n+  public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, String url,\n+                                                      AssertionType assertion) {\n+    return getCONNECTClientSecured(portDescriptor, url, assertion, null, null);\n+  }\n \n-    /**\n-     * Returns a CONNECTClient configured for secured invocation. This method allows Ws-Addressing parameters to be\n-     * passed for HIEM use.\n-     */\n-    @Override\n-    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, String url,\n-            AssertionType assertion, String wsAddressingTo, String subscriptionId) {\n-        String wsAddressingToValue = wsAddressingTo;\n-        // use the url if the wsaddressing is null or blank\n-        if (StringUtils.isBlank(wsAddressingToValue)) {\n-            wsAddressingToValue = url;\n-        }\n-        return new CONNECTCXFClientSecured<>(portDescriptor, url, assertion, wsAddressingToValue, subscriptionId);\n+  /**\n+   * Returns a CONNECTClient configured for secured invocation. This method allows Ws-Addressing parameters to be\n+   * passed for HIEM use.\n+   */\n+  @Override\n+  public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, String url,\n+                                                      AssertionType assertion, String wsAddressingTo,\n+                                                      String subscriptionId) {\n+    String wsAddressingToValue = wsAddressingTo;\n+    // use the url if the wsaddressing is null or blank\n+    if (StringUtils.isBlank(wsAddressingToValue)) {\n+      wsAddressingToValue = url;\n     }\n+    return new CONNECTCXFClientSecured<>(portDescriptor, url, assertion, wsAddressingToValue, subscriptionId);\n+  }\n \n-    /**\n-     * Returns a CONNECTClient configured for secured invocation. This method allows the target hcid and service name to\n-     * be passed to be used for purpose of/purpose for logic.\n-     */\n-    @Override\n-    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor,\n-            AssertionType assertion, String url, String targetHomeCommunityId, String serviceName) {\n-        return new CONNECTCXFClientSecured<>(portDescriptor, assertion, url, targetHomeCommunityId, serviceName);\n-    }\n+  /**\n+   * Returns a CONNECTClient configured for secured invocation. This method allows the target hcid and service name to\n+   * be passed to be used for purpose of/purpose for logic.\n+   */\n+  @Override\n+  public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor,\n+                                                      AssertionType assertion, String url, String targetHomeCommunityId,\n+                                                      String serviceName) {\n+    return new CONNECTCXFClientSecured<>(portDescriptor, assertion, url, targetHomeCommunityId, serviceName);\n+  }\n \n-    /**\n-     * Returns a CONNECTClient configured for unsecured invocation.\n-     */\n-    @Override\n-    public <T> CONNECTClient<T> getCONNECTClientUnsecured(ServicePortDescriptor<T> portDescriptor, String url,\n-            AssertionType assertion) {\n-        return new CONNECTCXFClientUnsecured<>(portDescriptor, url, assertion);\n-    }\n+  /**\n+   * Returns a CONNECTClient configured for unsecured invocation.\n+   */\n+  @Override\n+  public <T> CONNECTClient<T> getCONNECTClientUnsecured(ServicePortDescriptor<T> portDescriptor, String url,\n+                                                        AssertionType assertion) {\n+    return new CONNECTCXFClientUnsecured<>(portDescriptor, url, assertion);\n+  }\n }\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/530/CONNECTCXFClientFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/530/CONNECTCXFClientFactory.java\nindex 0d79e2a5f2c..894a853ba1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/530/CONNECTCXFClientFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/530/CONNECTCXFClientFactory.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.messaging.client;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -40,9 +41,8 @@ public class CONNECTCXFClientFactory extends CONNECTClientFactory {\n      * Returns a CONNECTClient configured for secured invocation.\n      */\n     @Override\n-    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, String url,\n-            AssertionType assertion) {\n-        return getCONNECTClientSecured(portDescriptor, url, assertion, null, null);\n+    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion) {\n+    return getCONNECTClientSecured(portDescriptor, url, assertion, null, null);\n     }\n \n     /**\n@@ -50,8 +50,7 @@ public class CONNECTCXFClientFactory extends CONNECTClientFactory {\n      * passed for HIEM use.\n      */\n     @Override\n-    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, String url,\n-            AssertionType assertion, String wsAddressingTo, String subscriptionId) {\n+    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion, String wsAddressingTo, String subscriptionId) {\n         String wsAddressingToValue = wsAddressingTo;\n         // use the url if the wsaddressing is null or blank\n         if (StringUtils.isBlank(wsAddressingToValue)) {\n@@ -65,17 +64,15 @@ public class CONNECTCXFClientFactory extends CONNECTClientFactory {\n      * be passed to be used for purpose of/purpose for logic.\n      */\n     @Override\n-    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor,\n-            AssertionType assertion, String url, String targetHomeCommunityId, String serviceName) {\n-        return new CONNECTCXFClientSecured<>(portDescriptor, assertion, url, targetHomeCommunityId, serviceName);\n+    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, AssertionType assertion, String url, String targetHomeCommunityId, String serviceName) {\n+    return new CONNECTCXFClientSecured<>(portDescriptor, assertion, url, targetHomeCommunityId, serviceName);\n     }\n \n     /**\n      * Returns a CONNECTClient configured for unsecured invocation.\n      */\n     @Override\n-    public <T> CONNECTClient<T> getCONNECTClientUnsecured(ServicePortDescriptor<T> portDescriptor, String url,\n-            AssertionType assertion) {\n-        return new CONNECTCXFClientUnsecured<>(portDescriptor, url, assertion);\n+    public <T> CONNECTClient<T> getCONNECTClientUnsecured(ServicePortDescriptor<T> portDescriptor, String url, AssertionType assertion) {\n+    return new CONNECTCXFClientUnsecured<>(portDescriptor, url, assertion);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/530/CONNECTCXFClientFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/530/CONNECTCXFClientFactory.java\nindex 0d79e2a5f2c..163ee2dc276 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/530/CONNECTCXFClientFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/530/CONNECTCXFClientFactory.java\n@@ -34,14 +34,19 @@ import org.apache.commons.lang.StringUtils;\n  * @author akong\n  *\n  */\n-public class CONNECTCXFClientFactory extends CONNECTClientFactory {\n+\n+\n+public class CONNECTCXFClientFactory extends\n+    CONNECTClientFactory {\n \n     /**\n      * Returns a CONNECTClient configured for secured invocation.\n      */\n+\n+\n     @Override\n-    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, String url,\n-            AssertionType assertion) {\n+    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor,\n+        String url, AssertionType assertion) {\n         return getCONNECTClientSecured(portDescriptor, url, assertion, null, null);\n     }\n \n@@ -49,9 +54,13 @@ public class CONNECTCXFClientFactory extends CONNECTClientFactory {\n      * Returns a CONNECTClient configured for secured invocation. This method allows Ws-Addressing parameters to be\n      * passed for HIEM use.\n      */\n+\n+\n     @Override\n-    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor, String url,\n-            AssertionType assertion, String wsAddressingTo, String subscriptionId) {\n+    public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor,\n+        String url,\n+        AssertionType assertion,\n+        String wsAddressingTo, String subscriptionId) {\n         String wsAddressingToValue = wsAddressingTo;\n         // use the url if the wsaddressing is null or blank\n         if (StringUtils.isBlank(wsAddressingToValue)) {\n@@ -64,18 +73,24 @@ public class CONNECTCXFClientFactory extends CONNECTClientFactory {\n      * Returns a CONNECTClient configured for secured invocation. This method allows the target hcid and service name to\n      * be passed to be used for purpose of/purpose for logic.\n      */\n+\n+\n     @Override\n     public <T> CONNECTClient<T> getCONNECTClientSecured(ServicePortDescriptor<T> portDescriptor,\n-            AssertionType assertion, String url, String targetHomeCommunityId, String serviceName) {\n+        AssertionType assertion,\n+        String url,\n+        String targetHomeCommunityId, String serviceName) {\n         return new CONNECTCXFClientSecured<>(portDescriptor, assertion, url, targetHomeCommunityId, serviceName);\n     }\n \n     /**\n      * Returns a CONNECTClient configured for unsecured invocation.\n      */\n+\n+\n     @Override\n-    public <T> CONNECTClient<T> getCONNECTClientUnsecured(ServicePortDescriptor<T> portDescriptor, String url,\n-            AssertionType assertion) {\n+    public <T> CONNECTClient<T> getCONNECTClientUnsecured(ServicePortDescriptor<T> portDescriptor,\n+        String url, AssertionType assertion) {\n         return new CONNECTCXFClientUnsecured<>(portDescriptor, url, assertion);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/530/CONNECTCXFClientFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/530/CONNECTCXFClientFactory.java\nindex 0d79e2a5f2c..a39d938aa81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/530/CONNECTCXFClientFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/530/CONNECTCXFClientFactory.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.messaging.client;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}