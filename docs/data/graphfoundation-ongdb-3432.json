{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3432",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "158",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "344",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "356",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "559",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "570",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "598",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "631",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "638",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "667",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "667",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "683",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "690",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "693",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "693",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "693",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "696",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "713",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "713",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "713",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "727",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "727",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "738",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "741",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "744",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "870",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "870",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "873",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "873",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "881",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "881",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "886",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "886",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "890",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "901",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "901",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "905",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "928",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "941",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "969",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "969",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "984",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "984",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "986",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "987",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "995",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "995",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "997",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "998",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1004",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1004",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1063",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1064",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1137",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1137",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1138",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1138",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1150",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1150",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1154",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1154",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1214",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1223",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3432/KernelTransactionImplementation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3432/KernelTransactionImplementation.java\nindex b8f80236b41..6d8ee43b39a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3432/KernelTransactionImplementation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3432/KernelTransactionImplementation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.util.ArrayList;\n@@ -114,1128 +115,1123 @@ import static org.neo4j.storageengine.api.TransactionApplicationMode.INTERNAL;\n  */\n public class KernelTransactionImplementation implements KernelTransaction, TxStateHolder, ExecutionStatistics\n {\n-    /*\n-     * IMPORTANT:\n-     * This class is pooled and re-used. If you add *any* state to it, you *must* make sure that:\n-     *   - the #initialize() method resets that state for re-use\n-     *   - the #release() method releases resources acquired in #initialize() or during the transaction's life time\n-     */\n-\n-    // default values for not committed tx id and tx commit time\n-    private static final long NOT_COMMITTED_TRANSACTION_ID = -1;\n-    private static final long NOT_COMMITTED_TRANSACTION_COMMIT_TIME = -1;\n-\n-    private final CollectionsFactory collectionsFactory;\n-\n-    // Logic\n-    private final SchemaWriteGuard schemaWriteGuard;\n-    private final TransactionHooks hooks;\n-    private final ConstraintIndexCreator constraintIndexCreator;\n-    private final StorageEngine storageEngine;\n-    private final TransactionTracer transactionTracer;\n-    private final Pool<KernelTransactionImplementation> pool;\n-    private final Supplier<ExplicitIndexTransactionState> explicitIndexTxStateSupplier;\n-\n-    // For committing\n-    private final TransactionHeaderInformationFactory headerInformationFactory;\n-    private final TransactionCommitProcess commitProcess;\n-    private final TransactionMonitor transactionMonitor;\n-    private final PageCursorTracerSupplier cursorTracerSupplier;\n-    private final VersionContextSupplier versionContextSupplier;\n-    private final StoreReadLayer storeLayer;\n-    private final ClockContext clocks;\n-    private final AccessCapability accessCapability;\n-\n-    // State that needs to be reset between uses. Most of these should be cleared or released in #release(),\n-    // whereas others, such as timestamp or txId when transaction starts, even locks, needs to be set in #initialize().\n-    private TxState txState;\n-    private ExplicitIndexTransactionState explicitIndexTransactionState;\n-    private TransactionWriteState writeState;\n-    private TransactionHooks.TransactionHooksState hooksState;\n-    private final KernelStatement currentStatement;\n-    private final StorageStatement storageStatement;\n-    private final List<CloseListener> closeListeners = new ArrayList<>( 2 );\n-    private SecurityContext securityContext;\n-    private volatile StatementLocks statementLocks;\n-    private volatile long userTransactionId;\n-    private boolean beforeHookInvoked;\n-    private volatile boolean closing;\n-    private volatile boolean closed;\n-    private boolean failure;\n-    private boolean success;\n-    private volatile Status terminationReason;\n-    private long startTimeMillis;\n-    private long startTimeNanos;\n-    private long timeoutMillis;\n-    private long lastTransactionIdWhenStarted;\n-    private volatile long lastTransactionTimestampWhenStarted;\n-    private final Statistics statistics;\n-    private TransactionEvent transactionEvent;\n-    private Type type;\n-    private long transactionId;\n-    private long commitTime;\n-    private volatile int reuseCount;\n-    private volatile Map<String,Object> userMetaData;\n-    private final Operations operations;\n-\n-    /**\n-     * Lock prevents transaction {@link #markForTermination(Status)}  transaction termination} from interfering with\n-     * {@link #close() transaction commit} and specifically with {@link #release()}.\n-     * Termination can run concurrently with commit and we need to make sure that it terminates the right lock client\n-     * and the right transaction (with the right {@link #reuseCount}) because {@link KernelTransactionImplementation}\n-     * instances are pooled.\n-     */\n-    private final Lock terminationReleaseLock = new ReentrantLock();\n-\n-    public KernelTransactionImplementation( StatementOperationParts statementOperations, SchemaWriteGuard schemaWriteGuard, TransactionHooks hooks,\n-            ConstraintIndexCreator constraintIndexCreator, Procedures procedures, TransactionHeaderInformationFactory headerInformationFactory,\n-            TransactionCommitProcess commitProcess, TransactionMonitor transactionMonitor, Supplier<ExplicitIndexTransactionState> explicitIndexTxStateSupplier,\n-            Pool<KernelTransactionImplementation> pool, SystemNanoClock clock, AtomicReference<CpuClock> cpuClockRef,\n-            AtomicReference<HeapAllocation> heapAllocationRef, TransactionTracer transactionTracer, LockTracer lockTracer,\n-            PageCursorTracerSupplier cursorTracerSupplier, StorageEngine storageEngine, AccessCapability accessCapability, DefaultCursors cursors,\n-            AutoIndexing autoIndexing, ExplicitIndexStore explicitIndexStore, VersionContextSupplier versionContextSupplier,\n-            CollectionsFactorySupplier collectionsFactorySupplier, ConstraintSemantics constraintSemantics, SchemaState schemaState,\n-            IndexingService indexingService, IndexProviderMap indexProviderMap )\n-    {\n-        this.schemaWriteGuard = schemaWriteGuard;\n-        this.hooks = hooks;\n-        this.constraintIndexCreator = constraintIndexCreator;\n-        this.headerInformationFactory = headerInformationFactory;\n-        this.commitProcess = commitProcess;\n-        this.transactionMonitor = transactionMonitor;\n-        this.storeLayer = storageEngine.storeReadLayer();\n-        this.storageEngine = storageEngine;\n-        this.explicitIndexTxStateSupplier = explicitIndexTxStateSupplier;\n-        this.pool = pool;\n-        this.clocks = new ClockContext( clock );\n-        this.transactionTracer = transactionTracer;\n-        this.cursorTracerSupplier = cursorTracerSupplier;\n-        this.versionContextSupplier = versionContextSupplier;\n-        this.storageStatement = storeLayer.newStatement();\n-        this.currentStatement = new KernelStatement( this, this, storageStatement,\n-                lockTracer, statementOperations, this.clocks,\n-                versionContextSupplier );\n-        this.accessCapability = accessCapability;\n-        this.statistics = new Statistics( this, cpuClockRef, heapAllocationRef );\n-        this.userMetaData = new HashMap<>();\n-        AllStoreHolder allStoreHolder =\n-                new AllStoreHolder( storageEngine, storageStatement, this, cursors, explicitIndexStore,\n-                        procedures, schemaState );\n-        this.operations =\n-                new Operations(\n-                        allStoreHolder,\n-                        new IndexTxStateUpdater( storageEngine.storeReadLayer(), allStoreHolder, indexingService ),\n-                        storageStatement,\n-                        this, new KernelToken( storeLayer, this ), cursors, autoIndexing, constraintIndexCreator,\n-                        constraintSemantics,\n-                        indexProviderMap );\n-        this.collectionsFactory = collectionsFactorySupplier.create();\n-    }\n-\n-    /**\n-     * Reset this transaction to a vanilla state, turning it into a logically new transaction.\n-     */\n-    public KernelTransactionImplementation initialize( long lastCommittedTx, long lastTimeStamp, StatementLocks statementLocks, Type type,\n-            SecurityContext frozenSecurityContext, long transactionTimeout, long userTransactionId )\n-    {\n-        this.type = type;\n-        this.statementLocks = statementLocks;\n-        this.userTransactionId = userTransactionId;\n-        this.terminationReason = null;\n-        this.closing = false;\n-        this. closed = false;\n-        this.beforeHookInvoked = false;\n-        this.failure = false;\n-        this.success = false;\n-        this.writeState = TransactionWriteState.NONE;\n-        this.startTimeMillis = clocks.systemClock().millis();\n-        this.startTimeNanos = clocks.systemClock().nanos();\n-        this.timeoutMillis = transactionTimeout;\n-        this.lastTransactionIdWhenStarted = lastCommittedTx;\n-        this.lastTransactionTimestampWhenStarted = lastTimeStamp;\n-        this.transactionEvent = transactionTracer.beginTransaction();\n-        assert transactionEvent != null : \"transactionEvent was null!\";\n-        this.securityContext = frozenSecurityContext;\n-        this.transactionId = NOT_COMMITTED_TRANSACTION_ID;\n-        this.commitTime = NOT_COMMITTED_TRANSACTION_COMMIT_TIME;\n-        PageCursorTracer pageCursorTracer = cursorTracerSupplier.get();\n-        this.statistics.init( Thread.currentThread().getId(), pageCursorTracer );\n-        this.currentStatement.initialize( statementLocks, pageCursorTracer );\n-        this.operations.initialize();\n-        return this;\n-    }\n-\n-    int getReuseCount()\n-    {\n-        return reuseCount;\n-    }\n-\n-    @Override\n-    public long startTime()\n-    {\n-        return startTimeMillis;\n-    }\n-\n-    @Override\n-    public long startTimeNanos()\n-    {\n-        return startTimeNanos;\n-    }\n-\n-    @Override\n-    public long timeout()\n-    {\n-        return timeoutMillis;\n-    }\n-\n-    @Override\n-    public long lastTransactionIdWhenStarted()\n-    {\n-        return lastTransactionIdWhenStarted;\n-    }\n-\n-    @Override\n-    public void success()\n-    {\n-        this.success = true;\n-    }\n-\n-    boolean isSuccess()\n-    {\n-        return success;\n-    }\n-\n-    @Override\n-    public void failure()\n-    {\n-        failure = true;\n-    }\n-\n-    @Override\n-    public Optional<Status> getReasonIfTerminated()\n-    {\n-        return Optional.ofNullable( terminationReason );\n-    }\n-\n-    boolean markForTermination( long expectedReuseCount, Status reason )\n-    {\n-        terminationReleaseLock.lock();\n-        try\n-        {\n-            return expectedReuseCount == reuseCount && markForTerminationIfPossible( reason );\n-        }\n-        finally\n-        {\n-            terminationReleaseLock.unlock();\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     * <p>\n-     * This method is guarded by {@link #terminationReleaseLock} to coordinate concurrent\n-     * {@link #close()} and {@link #release()} calls.\n-     */\n-    @Override\n-    public void markForTermination( Status reason )\n-    {\n-        terminationReleaseLock.lock();\n-        try\n-        {\n-            markForTerminationIfPossible( reason );\n-        }\n-        finally\n-        {\n-            terminationReleaseLock.unlock();\n-        }\n-    }\n-\n-    private boolean markForTerminationIfPossible( Status reason )\n-    {\n-        if ( canBeTerminated() )\n-        {\n-            failure = true;\n-            terminationReason = reason;\n-            if ( statementLocks != null )\n-            {\n-                statementLocks.stop();\n-            }\n-            transactionMonitor.transactionTerminated( hasTxStateWithChanges() );\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isOpen()\n-    {\n-        return !closed && !closing;\n-    }\n-\n-    @Override\n-    public SecurityContext securityContext()\n-    {\n-        if ( securityContext == null )\n-        {\n-            throw new NotInTransactionException();\n-        }\n-        return securityContext;\n-    }\n-\n-    public AuthSubject subjectOrAnonymous()\n-    {\n-        SecurityContext context = this.securityContext;\n-        return context == null ? AuthSubject.ANONYMOUS : context.subject();\n-    }\n-\n-    public void setMetaData( Map<String, Object> data )\n-    {\n-        this.userMetaData = data;\n-    }\n-\n-    public Map<String, Object> getMetaData()\n-    {\n-        return userMetaData;\n-    }\n-\n-    @Override\n-    public KernelStatement acquireStatement()\n-    {\n-        assertTransactionOpen();\n-        currentStatement.acquire();\n-        return currentStatement;\n-    }\n-\n-    @Override\n-    public long pageHits()\n-    {\n-        return cursorTracerSupplier.get().hits();\n-    }\n-\n-    @Override\n-    public long pageFaults()\n-    {\n-        return cursorTracerSupplier.get().faults();\n-    }\n-\n-    ExecutingQueryList executingQueries()\n-    {\n-        return currentStatement.executingQueryList();\n-    }\n-\n-    void upgradeToDataWrites() throws InvalidTransactionTypeKernelException\n+  /*\n+   * IMPORTANT:\n+   * This class is pooled and re-used. If you add *any* state to it, you *must* make sure that:\n+   *   - the #initialize() method resets that state for re-use\n+   *   - the #release() method releases resources acquired in #initialize() or during the transaction's life time\n+   */\n+\n+  // default values for not committed tx id and tx commit time\n+  private static final long NOT_COMMITTED_TRANSACTION_ID = -1;\n+  private static final long NOT_COMMITTED_TRANSACTION_COMMIT_TIME = -1;\n+\n+  private final CollectionsFactory collectionsFactory;\n+\n+  // Logic\n+  private final SchemaWriteGuard schemaWriteGuard;\n+  private final TransactionHooks hooks;\n+  private final ConstraintIndexCreator constraintIndexCreator;\n+  private final StorageEngine storageEngine;\n+  private final TransactionTracer transactionTracer;\n+  private final Pool<KernelTransactionImplementation> pool;\n+  private final Supplier<ExplicitIndexTransactionState> explicitIndexTxStateSupplier;\n+\n+  // For committing\n+  private final TransactionHeaderInformationFactory headerInformationFactory;\n+  private final TransactionCommitProcess commitProcess;\n+  private final TransactionMonitor transactionMonitor;\n+  private final PageCursorTracerSupplier cursorTracerSupplier;\n+  private final VersionContextSupplier versionContextSupplier;\n+  private final StoreReadLayer storeLayer;\n+  private final ClockContext clocks;\n+  private final AccessCapability accessCapability;\n+\n+  // State that needs to be reset between uses. Most of these should be cleared or released in #release(),\n+  // whereas others, such as timestamp or txId when transaction starts, even locks, needs to be set in #initialize().\n+  private TxState txState;\n+  private ExplicitIndexTransactionState explicitIndexTransactionState;\n+  private TransactionWriteState writeState;\n+  private TransactionHooks.TransactionHooksState hooksState;\n+  private final KernelStatement currentStatement;\n+  private final StorageStatement storageStatement;\n+  private final List<CloseListener> closeListeners = new ArrayList<>(2);\n+  private SecurityContext securityContext;\n+  private volatile StatementLocks statementLocks;\n+  private volatile long userTransactionId;\n+  private boolean beforeHookInvoked;\n+  private volatile boolean closing;\n+  private volatile boolean closed;\n+  private boolean failure;\n+  private boolean success;\n+  private volatile Status terminationReason;\n+  private long startTimeMillis;\n+  private long startTimeNanos;\n+  private long timeoutMillis;\n+  private long lastTransactionIdWhenStarted;\n+  private volatile long lastTransactionTimestampWhenStarted;\n+  private final Statistics statistics;\n+  private TransactionEvent transactionEvent;\n+  private Type type;\n+  private long transactionId;\n+  private long commitTime;\n+  private volatile int reuseCount;\n+  private volatile Map<String, Object> userMetaData;\n+  private final Operations operations;\n+\n+  /**\n+   * Lock prevents transaction {@link #markForTermination(Status)}  transaction termination} from interfering with\n+   * {@link #close() transaction commit} and specifically with {@link #release()}.\n+   * Termination can run concurrently with commit and we need to make sure that it terminates the right lock client\n+   * and the right transaction (with the right {@link #reuseCount}) because {@link KernelTransactionImplementation}\n+   * instances are pooled.\n+   */\n+  private final Lock terminationReleaseLock = new ReentrantLock();\n+\n+  public KernelTransactionImplementation(StatementOperationParts statementOperations, SchemaWriteGuard schemaWriteGuard, TransactionHooks hooks,\n+                                         ConstraintIndexCreator constraintIndexCreator, Procedures procedures,\n+                                         TransactionHeaderInformationFactory headerInformationFactory,\n+                                         TransactionCommitProcess commitProcess, TransactionMonitor transactionMonitor,\n+                                         Supplier<ExplicitIndexTransactionState> explicitIndexTxStateSupplier,\n+                                         Pool<KernelTransactionImplementation> pool, SystemNanoClock clock, AtomicReference<CpuClock> cpuClockRef,\n+                                         AtomicReference<HeapAllocation> heapAllocationRef, TransactionTracer transactionTracer, LockTracer lockTracer,\n+                                         PageCursorTracerSupplier cursorTracerSupplier, StorageEngine storageEngine, AccessCapability accessCapability,\n+                                         DefaultCursors cursors,\n+                                         AutoIndexing autoIndexing, ExplicitIndexStore explicitIndexStore, VersionContextSupplier versionContextSupplier,\n+                                         CollectionsFactorySupplier collectionsFactorySupplier, ConstraintSemantics constraintSemantics,\n+                                         SchemaState schemaState,\n+                                         IndexingService indexingService, IndexProviderMap indexProviderMap)\n+  {\n+    this.schemaWriteGuard = schemaWriteGuard;\n+    this.hooks = hooks;\n+    this.constraintIndexCreator = constraintIndexCreator;\n+    this.headerInformationFactory = headerInformationFactory;\n+    this.commitProcess = commitProcess;\n+    this.transactionMonitor = transactionMonitor;\n+    this.storeLayer = storageEngine.storeReadLayer();\n+    this.storageEngine = storageEngine;\n+    this.explicitIndexTxStateSupplier = explicitIndexTxStateSupplier;\n+    this.pool = pool;\n+    this.clocks = new ClockContext(clock);\n+    this.transactionTracer = transactionTracer;\n+    this.cursorTracerSupplier = cursorTracerSupplier;\n+    this.versionContextSupplier = versionContextSupplier;\n+    this.storageStatement = storeLayer.newStatement();\n+    this.currentStatement = new KernelStatement(this, this, storageStatement,\n+        lockTracer, statementOperations, this.clocks,\n+        versionContextSupplier);\n+    this.accessCapability = accessCapability;\n+    this.statistics = new Statistics(this, cpuClockRef, heapAllocationRef);\n+    this.userMetaData = new HashMap<>();\n+    AllStoreHolder allStoreHolder =\n+        new AllStoreHolder(storageEngine, storageStatement, this, cursors, explicitIndexStore,\n+            procedures, schemaState);\n+    this.operations =\n+        new Operations(\n+            allStoreHolder,\n+            new IndexTxStateUpdater(storageEngine.storeReadLayer(), allStoreHolder, indexingService),\n+            storageStatement,\n+            this, new KernelToken(storeLayer, this), cursors, autoIndexing, constraintIndexCreator,\n+            constraintSemantics,\n+            indexProviderMap);\n+    this.collectionsFactory = collectionsFactorySupplier.create();\n+  }\n+\n+  /**\n+   * Reset this transaction to a vanilla state, turning it into a logically new transaction.\n+   */\n+  public KernelTransactionImplementation initialize(long lastCommittedTx, long lastTimeStamp, StatementLocks statementLocks, Type type,\n+                                                    SecurityContext frozenSecurityContext, long transactionTimeout, long userTransactionId)\n+  {\n+    this.type = type;\n+    this.statementLocks = statementLocks;\n+    this.userTransactionId = userTransactionId;\n+    this.terminationReason = null;\n+    this.closing = false;\n+    this.closed = false;\n+    this.beforeHookInvoked = false;\n+    this.failure = false;\n+    this.success = false;\n+    this.writeState = TransactionWriteState.NONE;\n+    this.startTimeMillis = clocks.systemClock().millis();\n+    this.startTimeNanos = clocks.systemClock().nanos();\n+    this.timeoutMillis = transactionTimeout;\n+    this.lastTransactionIdWhenStarted = lastCommittedTx;\n+    this.lastTransactionTimestampWhenStarted = lastTimeStamp;\n+    this.transactionEvent = transactionTracer.beginTransaction();\n+    assert transactionEvent != null : \"transactionEvent was null!\";\n+    this.securityContext = frozenSecurityContext;\n+    this.transactionId = NOT_COMMITTED_TRANSACTION_ID;\n+    this.commitTime = NOT_COMMITTED_TRANSACTION_COMMIT_TIME;\n+    PageCursorTracer pageCursorTracer = cursorTracerSupplier.get();\n+    this.statistics.init(Thread.currentThread().getId(), pageCursorTracer);\n+    this.currentStatement.initialize(statementLocks, pageCursorTracer);\n+    this.operations.initialize();\n+    return this;\n+  }\n+\n+  int getReuseCount()\n+  {\n+    return reuseCount;\n+  }\n+\n+  @Override\n+  public long startTime()\n+  {\n+    return startTimeMillis;\n+  }\n+\n+  @Override\n+  public long startTimeNanos()\n+  {\n+    return startTimeNanos;\n+  }\n+\n+  @Override\n+  public long timeout()\n+  {\n+    return timeoutMillis;\n+  }\n+\n+  @Override\n+  public long lastTransactionIdWhenStarted()\n+  {\n+    return lastTransactionIdWhenStarted;\n+  }\n+\n+  @Override\n+  public void success()\n+  {\n+    this.success = true;\n+  }\n+\n+  boolean isSuccess()\n+  {\n+    return success;\n+  }\n+\n+  @Override\n+  public void failure()\n+  {\n+    failure = true;\n+  }\n+\n+  @Override\n+  public Optional<Status> getReasonIfTerminated()\n+  {\n+    return Optional.ofNullable(terminationReason);\n+  }\n+\n+  boolean markForTermination(long expectedReuseCount, Status reason)\n+  {\n+    terminationReleaseLock.lock();\n+    try\n+    {\n+      return expectedReuseCount == reuseCount && markForTerminationIfPossible(reason);\n+    } finally\n+    {\n+      terminationReleaseLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   * <p>\n+   * This method is guarded by {@link #terminationReleaseLock} to coordinate concurrent\n+   * {@link #close()} and {@link #release()} calls.\n+   */\n+  @Override\n+  public void markForTermination(Status reason)\n+  {\n+    terminationReleaseLock.lock();\n+    try\n+    {\n+      markForTerminationIfPossible(reason);\n+    } finally\n+    {\n+      terminationReleaseLock.unlock();\n+    }\n+  }\n+\n+  private boolean markForTerminationIfPossible(Status reason)\n+  {\n+    if (canBeTerminated())\n+    {\n+      failure = true;\n+      terminationReason = reason;\n+      if (statementLocks != null)\n+      {\n+        statementLocks.stop();\n+      }\n+      transactionMonitor.transactionTerminated(hasTxStateWithChanges());\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean isOpen()\n+  {\n+    return !closed && !closing;\n+  }\n+\n+  @Override\n+  public SecurityContext securityContext()\n+  {\n+    if (securityContext == null)\n+    {\n+      throw new NotInTransactionException();\n+    }\n+    return securityContext;\n+  }\n+\n+  public AuthSubject subjectOrAnonymous()\n+  {\n+    SecurityContext context = this.securityContext;\n+    return context == null ? AuthSubject.ANONYMOUS : context.subject();\n+  }\n+\n+  public void setMetaData(Map<String, Object> data)\n+  {\n+    this.userMetaData = data;\n+  }\n+\n+  public Map<String, Object> getMetaData()\n+  {\n+    return userMetaData;\n+  }\n+\n+  @Override\n+  public KernelStatement acquireStatement()\n+  {\n+    assertTransactionOpen();\n+    currentStatement.acquire();\n+    return currentStatement;\n+  }\n+\n+  @Override\n+  public long pageHits()\n+  {\n+    return cursorTracerSupplier.get().hits();\n+  }\n+\n+  @Override\n+  public long pageFaults()\n+  {\n+    return cursorTracerSupplier.get().faults();\n+  }\n+\n+  ExecutingQueryList executingQueries()\n+  {\n+    return currentStatement.executingQueryList();\n+  }\n+\n+  void upgradeToDataWrites() throws InvalidTransactionTypeKernelException\n+  {\n+    writeState = writeState.upgradeToDataWrites();\n+  }\n+\n+  void upgradeToSchemaWrites() throws InvalidTransactionTypeKernelException\n+  {\n+    schemaWriteGuard.assertSchemaWritesAllowed();\n+    writeState = writeState.upgradeToSchemaWrites();\n+  }\n+\n+  private void dropCreatedConstraintIndexes() throws TransactionFailureException\n+  {\n+    if (hasTxStateWithChanges())\n+    {\n+      for (SchemaIndexDescriptor createdConstraintIndex : txState().constraintIndexesCreatedInTx())\n+      {\n+        // TODO logically, which statement should this operation be performed on?\n+        constraintIndexCreator.dropUniquenessConstraintIndex(createdConstraintIndex);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public TransactionState txState()\n+  {\n+    if (txState == null)\n+    {\n+      transactionMonitor.upgradeToWriteTransaction();\n+      txState = new TxState(collectionsFactory);\n+    }\n+    return txState;\n+  }\n+\n+  @Override\n+  public ExplicitIndexTransactionState explicitIndexTxState()\n+  {\n+    return explicitIndexTransactionState != null ? explicitIndexTransactionState :\n+        (explicitIndexTransactionState = explicitIndexTxStateSupplier.get());\n+  }\n+\n+  @Override\n+  public boolean hasTxStateWithChanges()\n+  {\n+    return txState != null && txState.hasChanges();\n+  }\n+\n+  private void markAsClosed(long txId)\n+  {\n+    assertTransactionOpen();\n+    closed = true;\n+    notifyListeners(txId);\n+    closeCurrentStatementIfAny();\n+  }\n+\n+  private void notifyListeners(long txId)\n+  {\n+    for (CloseListener closeListener : closeListeners)\n+    {\n+      closeListener.notify(txId);\n+    }\n+  }\n+\n+  private void closeCurrentStatementIfAny()\n+  {\n+    currentStatement.forceClose();\n+  }\n+\n+  private void assertTransactionNotClosing()\n+  {\n+    if (closing)\n+    {\n+      throw new IllegalStateException(\"This transaction is already being closed.\");\n+    }\n+  }\n+\n+  private void assertTransactionOpen()\n+  {\n+    if (closed)\n+    {\n+      throw new IllegalStateException(\"This transaction has already been completed.\");\n+    }\n+  }\n+\n+  @Override\n+  public void assertOpen()\n+  {\n+    Status reason = this.terminationReason;\n+    if (reason != null)\n+    {\n+      throw new TransactionTerminatedException(reason);\n+    }\n+    if (closed)\n+    {\n+      throw new NotInTransactionException(\"The transaction has been closed.\");\n+    }\n+  }\n+\n+  private boolean hasChanges()\n+  {\n+    return hasTxStateWithChanges() || hasExplicitIndexChanges();\n+  }\n+\n+  private boolean hasExplicitIndexChanges()\n+  {\n+    return explicitIndexTransactionState != null && explicitIndexTransactionState.hasChanges();\n+  }\n+\n+  private boolean hasDataChanges()\n+  {\n+    return hasTxStateWithChanges() && txState.hasDataChanges();\n+  }\n+\n+  @Override\n+  public long closeTransaction() throws TransactionFailureException\n+  {\n+    assertTransactionOpen();\n+    assertTransactionNotClosing();\n+    closing = true;\n+    try\n     {\n-        writeState = writeState.upgradeToDataWrites();\n-    }\n-\n-    void upgradeToSchemaWrites() throws InvalidTransactionTypeKernelException\n-    {\n-        schemaWriteGuard.assertSchemaWritesAllowed();\n-        writeState = writeState.upgradeToSchemaWrites();\n-    }\n-\n-    private void dropCreatedConstraintIndexes() throws TransactionFailureException\n-    {\n-        if ( hasTxStateWithChanges() )\n-        {\n-            for ( SchemaIndexDescriptor createdConstraintIndex : txState().constraintIndexesCreatedInTx() )\n-            {\n-                // TODO logically, which statement should this operation be performed on?\n-                constraintIndexCreator.dropUniquenessConstraintIndex( createdConstraintIndex );\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public TransactionState txState()\n-    {\n-        if ( txState == null )\n-        {\n-            transactionMonitor.upgradeToWriteTransaction();\n-            txState = new TxState( collectionsFactory );\n-        }\n-        return txState;\n-    }\n-\n-    @Override\n-    public ExplicitIndexTransactionState explicitIndexTxState()\n-    {\n-        return explicitIndexTransactionState != null ? explicitIndexTransactionState :\n-               (explicitIndexTransactionState = explicitIndexTxStateSupplier.get());\n-    }\n-\n-    @Override\n-    public boolean hasTxStateWithChanges()\n-    {\n-        return txState != null && txState.hasChanges();\n-    }\n-\n-    private void markAsClosed( long txId )\n-    {\n-        assertTransactionOpen();\n+      if (failure || !success || isTerminated())\n+      {\n+        rollback();\n+        failOnNonExplicitRollbackIfNeeded();\n+        return ROLLBACK;\n+      } else\n+      {\n+        return commit();\n+      }\n+    } finally\n+    {\n+      try\n+      {\n         closed = true;\n-        notifyListeners( txId );\n-        closeCurrentStatementIfAny();\n-    }\n-\n-    private void notifyListeners( long txId )\n-    {\n-        for ( CloseListener closeListener : closeListeners )\n+        closing = false;\n+        transactionEvent.setSuccess(success);\n+        transactionEvent.setFailure(failure);\n+        transactionEvent.setTransactionWriteState(writeState.name());\n+        transactionEvent.setReadOnly(txState == null || !txState.hasChanges());\n+        transactionEvent.close();\n+      } finally\n+      {\n+        release();\n+      }\n+    }\n+  }\n+\n+  public boolean isClosing()\n+  {\n+    return closing;\n+  }\n+\n+  /**\n+   * Throws exception if this transaction was marked as successful but failure flag has also been set to true.\n+   * <p>\n+   * This could happen when:\n+   * <ul>\n+   * <li>caller explicitly calls both {@link #success()} and {@link #failure()}</li>\n+   * <li>caller explicitly calls {@link #success()} but transaction execution fails</li>\n+   * <li>caller explicitly calls {@link #success()} but transaction is terminated</li>\n+   * </ul>\n+   * <p>\n+   *\n+   * @throws TransactionFailureException    when execution failed\n+   * @throws TransactionTerminatedException when transaction was terminated\n+   */\n+  private void failOnNonExplicitRollbackIfNeeded() throws TransactionFailureException\n+  {\n+    if (success && isTerminated())\n+    {\n+      throw new TransactionTerminatedException(terminationReason);\n+    }\n+    if (success)\n+    {\n+      // Success was called, but also failure which means that the client code using this\n+      // transaction passed through a happy path, but the transaction was still marked as\n+      // failed for one or more reasons. Tell the user that although it looked happy it\n+      // wasn't committed, but was instead rolled back.\n+      throw new TransactionFailureException(Status.Transaction.TransactionMarkedAsFailed,\n+          \"Transaction rolled back even if marked as successful\");\n+    }\n+  }\n+\n+  private long commit() throws TransactionFailureException\n+  {\n+    boolean success = false;\n+    long txId = READ_ONLY;\n+\n+    try (CommitEvent commitEvent = transactionEvent.beginCommitEvent())\n+    {\n+      // Trigger transaction \"before\" hooks.\n+      if (hasDataChanges())\n+      {\n+        try\n         {\n-            closeListener.notify( txId );\n-        }\n-    }\n-\n-    private void closeCurrentStatementIfAny()\n-    {\n-        currentStatement.forceClose();\n-    }\n-\n-    private void assertTransactionNotClosing()\n-    {\n-        if ( closing )\n+          hooksState = hooks.beforeCommit(txState, this, storageEngine.storeReadLayer(), storageStatement);\n+          if (hooksState != null && hooksState.failed())\n+          {\n+            Throwable cause = hooksState.failure();\n+            throw new TransactionFailureException(Status.Transaction.TransactionHookFailed, cause, \"\");\n+          }\n+        } finally\n         {\n-            throw new IllegalStateException( \"This transaction is already being closed.\" );\n+          beforeHookInvoked = true;\n         }\n-    }\n-\n-    private void assertTransactionOpen()\n-    {\n-        if ( closed )\n+      }\n+\n+      // Convert changes into commands and commit\n+      if (hasChanges())\n+      {\n+        // grab all optimistic locks now, locks can't be deferred any further\n+        statementLocks.prepareForCommit(currentStatement.lockTracer());\n+        // use pessimistic locks for the rest of the commit process, locks can't be deferred any further\n+        Locks.Client commitLocks = statementLocks.pessimistic();\n+\n+        // Gather up commands from the various sources\n+        Collection<StorageCommand> extractedCommands = new ArrayList<>();\n+        storageEngine.createCommands(\n+            extractedCommands,\n+            txState,\n+            storageStatement,\n+            commitLocks,\n+            lastTransactionIdWhenStarted);\n+        if (hasExplicitIndexChanges())\n         {\n-            throw new IllegalStateException( \"This transaction has already been completed.\" );\n+          explicitIndexTransactionState.extractCommands(extractedCommands);\n         }\n-    }\n \n-    @Override\n-    public void assertOpen()\n-    {\n-        Status reason = this.terminationReason;\n-        if ( reason != null )\n-        {\n-            throw new TransactionTerminatedException( reason );\n-        }\n-        if ( closed )\n+        /* Here's the deal: we track a quick-to-access hasChanges in transaction state which is true\n+         * if there are any changes imposed by this transaction. Some changes made inside a transaction undo\n+         * previously made changes in that same transaction, and so at some point a transaction may have\n+         * changes and at another point, after more changes seemingly,\n+         * the transaction may not have any changes.\n+         * However, to track that \"undoing\" of the changes is a bit tedious, intrusive and hard to maintain\n+         * and get right.... So to really make sure the transaction has changes we re-check by looking if we\n+         * have produced any commands to add to the logical log.\n+         */\n+        if (!extractedCommands.isEmpty())\n         {\n-            throw new NotInTransactionException( \"The transaction has been closed.\" );\n+          // Finish up the whole transaction representation\n+          PhysicalTransactionRepresentation transactionRepresentation =\n+              new PhysicalTransactionRepresentation(extractedCommands);\n+          TransactionHeaderInformation headerInformation = headerInformationFactory.create();\n+          long timeCommitted = clocks.systemClock().millis();\n+          transactionRepresentation.setHeader(headerInformation.getAdditionalHeader(),\n+              headerInformation.getMasterId(),\n+              headerInformation.getAuthorId(),\n+              startTimeMillis, lastTransactionIdWhenStarted, timeCommitted,\n+              commitLocks.getLockSessionId());\n+\n+          // Commit the transaction\n+          success = true;\n+          TransactionToApply batch = new TransactionToApply(transactionRepresentation,\n+              versionContextSupplier.getVersionContext());\n+          txId = transactionId = commitProcess.commit(batch, commitEvent, INTERNAL);\n+          commitTime = timeCommitted;\n         }\n-    }\n-\n-    private boolean hasChanges()\n-    {\n-        return hasTxStateWithChanges() || hasExplicitIndexChanges();\n-    }\n-\n-    private boolean hasExplicitIndexChanges()\n-    {\n-        return explicitIndexTransactionState != null && explicitIndexTransactionState.hasChanges();\n-    }\n-\n-    private boolean hasDataChanges()\n-    {\n-        return hasTxStateWithChanges() && txState.hasDataChanges();\n-    }\n-\n-    @Override\n-    public long closeTransaction() throws TransactionFailureException\n-    {\n-        assertTransactionOpen();\n-        assertTransactionNotClosing();\n-        closing = true;\n+      }\n+      success = true;\n+      return txId;\n+    } catch (ConstraintValidationException | CreateConstraintFailureException e)\n+    {\n+      throw new ConstraintViolationTransactionFailureException(\n+          e.getUserMessage(new SilentTokenNameLookup(tokenRead())), e);\n+    } finally\n+    {\n+      if (!success)\n+      {\n+        rollback();\n+      } else\n+      {\n+        afterCommit(txId);\n+      }\n+    }\n+  }\n+\n+  private void rollback() throws TransactionFailureException\n+  {\n+    try\n+    {\n+      try\n+      {\n+        dropCreatedConstraintIndexes();\n+      } catch (IllegalStateException | SecurityException e)\n+      {\n+        throw new TransactionFailureException(Status.Transaction.TransactionRollbackFailed, e,\n+            \"Could not drop created constraint indexes\");\n+      }\n+\n+      // Free any acquired id's\n+      if (txState != null)\n+      {\n         try\n         {\n-            if ( failure || !success || isTerminated() )\n+          txState.accept(new TxStateVisitor.Adapter()\n+          {\n+            @Override\n+            public void visitCreatedNode(long id)\n             {\n-                rollback();\n-                failOnNonExplicitRollbackIfNeeded();\n-                return ROLLBACK;\n+              storeLayer.releaseNode(id);\n             }\n-            else\n+\n+            @Override\n+            public void visitCreatedRelationship(long id, int type, long startNode, long endNode)\n             {\n-                return commit();\n+              storeLayer.releaseRelationship(id);\n             }\n-        }\n-        finally\n+          });\n+        } catch (ConstraintValidationException | CreateConstraintFailureException e)\n         {\n-            try\n-            {\n-                closed = true;\n-                closing = false;\n-                transactionEvent.setSuccess( success );\n-                transactionEvent.setFailure( failure );\n-                transactionEvent.setTransactionWriteState( writeState.name() );\n-                transactionEvent.setReadOnly( txState == null || !txState.hasChanges() );\n-                transactionEvent.close();\n-            }\n-            finally\n-            {\n-                release();\n-            }\n+          throw new IllegalStateException(\n+              \"Releasing locks during rollback should perform no constraints checking.\", e);\n         }\n-    }\n-\n-    public boolean isClosing()\n-    {\n-        return closing;\n+      }\n+    } finally\n+    {\n+      afterRollback();\n+    }\n+  }\n+\n+  @Override\n+  public Read dataRead()\n+  {\n+    assertAllows(AccessMode::allowsReads, \"Read\");\n+    return operations.dataRead();\n+  }\n+\n+  @Override\n+  public Read stableDataRead()\n+  {\n+    assertAllows(AccessMode::allowsReads, \"Read\");\n+    return operations.dataRead();\n+  }\n+\n+  @Override\n+  public void markAsStable()\n+  {\n+    // ignored until 2-layer tx-state is supported\n+  }\n+\n+  @Override\n+  public Write dataWrite() throws InvalidTransactionTypeKernelException\n+  {\n+    accessCapability.assertCanWrite();\n+    assertAllows(AccessMode::allowsWrites, \"Write\");\n+    upgradeToDataWrites();\n+    return operations;\n+  }\n+\n+  @Override\n+  public TokenWrite tokenWrite()\n+  {\n+    accessCapability.assertCanWrite();\n+    return operations.token();\n+  }\n+\n+  @Override\n+  public Token token()\n+  {\n+    accessCapability.assertCanWrite();\n+    return operations.token();\n+  }\n+\n+  @Override\n+  public TokenRead tokenRead()\n+  {\n+    assertAllows(AccessMode::allowsReads, \"Read\");\n+    return operations.token();\n+  }\n+\n+  @Override\n+  public ExplicitIndexRead indexRead()\n+  {\n+    assertAllows(AccessMode::allowsReads, \"Read\");\n+\n+    return operations.indexRead();\n+  }\n+\n+  @Override\n+  public ExplicitIndexWrite indexWrite() throws InvalidTransactionTypeKernelException\n+  {\n+    accessCapability.assertCanWrite();\n+    assertAllows(AccessMode::allowsWrites, \"Write\");\n+    upgradeToDataWrites();\n+\n+    return operations;\n+  }\n+\n+  @Override\n+  public SchemaRead schemaRead()\n+  {\n+    assertAllows(AccessMode::allowsReads, \"Read\");\n+    return operations.schemaRead();\n+  }\n+\n+  @Override\n+  public SchemaWrite schemaWrite() throws InvalidTransactionTypeKernelException\n+  {\n+    accessCapability.assertCanWrite();\n+    assertAllows(AccessMode::allowsSchemaWrites, \"Schema\");\n+\n+    upgradeToSchemaWrites();\n+    return operations;\n+  }\n+\n+  @Override\n+  public org.neo4j.internal.kernel.api.Locks locks()\n+  {\n+    return operations.locks();\n+  }\n+\n+  public StatementLocks statementLocks()\n+  {\n+    assertOpen();\n+    return statementLocks;\n+  }\n+\n+  @Override\n+  public CursorFactory cursors()\n+  {\n+    return operations.cursors();\n+  }\n+\n+  @Override\n+  public org.neo4j.internal.kernel.api.Procedures procedures()\n+  {\n+    return operations.procedures();\n+  }\n+\n+  @Override\n+  public ExecutionStatistics executionStatistics()\n+  {\n+    return this;\n+  }\n+\n+  public LockTracer lockTracer()\n+  {\n+    return currentStatement.lockTracer();\n+  }\n+\n+  public void assertAllows(Function<AccessMode, Boolean> allows, String mode)\n+  {\n+    AccessMode accessMode = securityContext().mode();\n+    if (!allows.apply(accessMode))\n+    {\n+      throw accessMode.onViolation(\n+          format(\"%s operations are not allowed for %s.\", mode,\n+              securityContext().description()));\n+    }\n+  }\n+\n+  private void afterCommit(long txId)\n+  {\n+    try\n+    {\n+      markAsClosed(txId);\n+      if (beforeHookInvoked)\n+      {\n+        hooks.afterCommit(txState, this, hooksState);\n+      }\n+    } finally\n+    {\n+      transactionMonitor.transactionFinished(true, hasTxStateWithChanges());\n+    }\n+  }\n+\n+  private void afterRollback()\n+  {\n+    try\n+    {\n+      markAsClosed(ROLLBACK);\n+      if (beforeHookInvoked)\n+      {\n+        hooks.afterRollback(txState, this, hooksState);\n+      }\n+    } finally\n+    {\n+      transactionMonitor.transactionFinished(false, hasTxStateWithChanges());\n+    }\n+  }\n+\n+  /**\n+   * Release resources held up by this transaction & return it to the transaction pool.\n+   * This method is guarded by {@link #terminationReleaseLock} to coordinate concurrent\n+   * {@link #markForTermination(Status)} calls.\n+   */\n+  private void release()\n+  {\n+    terminationReleaseLock.lock();\n+    try\n+    {\n+      statementLocks.close();\n+      statementLocks = null;\n+      terminationReason = null;\n+      type = null;\n+      securityContext = null;\n+      transactionEvent = null;\n+      explicitIndexTransactionState = null;\n+      if (txState != null)\n+      {\n+        txState.release();\n+        txState = null;\n+      }\n+      hooksState = null;\n+      closeListeners.clear();\n+      reuseCount++;\n+      userMetaData = Collections.emptyMap();\n+      userTransactionId = 0;\n+      statistics.reset();\n+      operations.release();\n+      pool.release(this);\n+    } finally\n+    {\n+      terminationReleaseLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * Transaction can be terminated only when it is not closed and not already terminated.\n+   * Otherwise termination does not make sense.\n+   */\n+  private boolean canBeTerminated()\n+  {\n+    return !closed && !isTerminated();\n+  }\n+\n+  @Override\n+  public boolean isTerminated()\n+  {\n+    return terminationReason != null;\n+  }\n+\n+  @Override\n+  public long lastTransactionTimestampWhenStarted()\n+  {\n+    return lastTransactionTimestampWhenStarted;\n+  }\n+\n+  @Override\n+  public void registerCloseListener(CloseListener listener)\n+  {\n+    assert listener != null;\n+    closeListeners.add(listener);\n+  }\n+\n+  @Override\n+  public Type transactionType()\n+  {\n+    return type;\n+  }\n+\n+  @Override\n+  public long getTransactionId()\n+  {\n+    if (transactionId == NOT_COMMITTED_TRANSACTION_ID)\n+    {\n+      throw new IllegalStateException(\"Transaction id is not assigned yet. \" +\n+          \"It will be assigned during transaction commit.\");\n+    }\n+    return transactionId;\n+  }\n+\n+  @Override\n+  public long getCommitTime()\n+  {\n+    if (commitTime == NOT_COMMITTED_TRANSACTION_COMMIT_TIME)\n+    {\n+      throw new IllegalStateException(\"Transaction commit time is not assigned yet. \" +\n+          \"It will be assigned during transaction commit.\");\n+    }\n+    return commitTime;\n+  }\n+\n+  @Override\n+  public Revertable overrideWith(SecurityContext context)\n+  {\n+    SecurityContext oldContext = this.securityContext;\n+    this.securityContext = context;\n+    return () -> this.securityContext = oldContext;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    String lockSessionId = statementLocks == null\n+        ? \"statementLocks == null\"\n+        : String.valueOf(statementLocks.pessimistic().getLockSessionId());\n+\n+    return \"KernelTransaction[\" + lockSessionId + \"]\";\n+  }\n+\n+  public void dispose()\n+  {\n+    storageStatement.close();\n+  }\n+\n+  /**\n+   * This method will be invoked by concurrent threads for inspecting the locks held by this transaction.\n+   * <p>\n+   * The fact that {@link #statementLocks} is a volatile fields, grants us enough of a read barrier to get a good\n+   * enough snapshot of the lock state (as long as the underlying methods give us such guarantees).\n+   *\n+   * @return the locks held by this transaction.\n+   */\n+  public Stream<? extends ActiveLock> activeLocks()\n+  {\n+    StatementLocks locks = this.statementLocks;\n+    return locks == null ? Stream.empty() : locks.activeLocks();\n+  }\n+\n+  long userTransactionId()\n+  {\n+    return userTransactionId;\n+  }\n+\n+  public Statistics getStatistics()\n+  {\n+    return statistics;\n+  }\n+\n+  public static class Statistics\n+  {\n+    private volatile long cpuTimeNanosWhenQueryStarted;\n+    private volatile long heapAllocatedBytesWhenQueryStarted;\n+    private volatile long waitingTimeNanos;\n+    private volatile long transactionThreadId;\n+    private volatile PageCursorTracer pageCursorTracer = PageCursorTracer.NULL;\n+    private final KernelTransactionImplementation transaction;\n+    private final AtomicReference<CpuClock> cpuClockRef;\n+    private final AtomicReference<HeapAllocation> heapAllocationRef;\n+    private CpuClock cpuClock;\n+    private HeapAllocation heapAllocation;\n+\n+    public Statistics(KernelTransactionImplementation transaction, AtomicReference<CpuClock> cpuClockRef,\n+                      AtomicReference<HeapAllocation> heapAllocationRef)\n+    {\n+      this.transaction = transaction;\n+      this.cpuClockRef = cpuClockRef;\n+      this.heapAllocationRef = heapAllocationRef;\n+    }\n+\n+    protected void init(long threadId, PageCursorTracer pageCursorTracer)\n+    {\n+      this.cpuClock = cpuClockRef.get();\n+      this.heapAllocation = heapAllocationRef.get();\n+      this.transactionThreadId = threadId;\n+      this.pageCursorTracer = pageCursorTracer;\n+      this.cpuTimeNanosWhenQueryStarted = cpuClock.cpuTimeNanos(transactionThreadId);\n+      this.heapAllocatedBytesWhenQueryStarted = heapAllocation.allocatedBytes(transactionThreadId);\n     }\n \n     /**\n-     * Throws exception if this transaction was marked as successful but failure flag has also been set to true.\n-     * <p>\n-     * This could happen when:\n-     * <ul>\n-     * <li>caller explicitly calls both {@link #success()} and {@link #failure()}</li>\n-     * <li>caller explicitly calls {@link #success()} but transaction execution fails</li>\n-     * <li>caller explicitly calls {@link #success()} but transaction is terminated</li>\n-     * </ul>\n-     * <p>\n+     * Returns number of allocated bytes by current transaction.\n      *\n-     * @throws TransactionFailureException when execution failed\n-     * @throws TransactionTerminatedException when transaction was terminated\n+     * @return number of allocated bytes by the thread.\n      */\n-    private void failOnNonExplicitRollbackIfNeeded() throws TransactionFailureException\n-    {\n-        if ( success && isTerminated() )\n-        {\n-            throw new TransactionTerminatedException( terminationReason );\n-        }\n-        if ( success )\n-        {\n-            // Success was called, but also failure which means that the client code using this\n-            // transaction passed through a happy path, but the transaction was still marked as\n-            // failed for one or more reasons. Tell the user that although it looked happy it\n-            // wasn't committed, but was instead rolled back.\n-            throw new TransactionFailureException( Status.Transaction.TransactionMarkedAsFailed,\n-                    \"Transaction rolled back even if marked as successful\" );\n-        }\n-    }\n-\n-    private long commit() throws TransactionFailureException\n-    {\n-        boolean success = false;\n-        long txId = READ_ONLY;\n-\n-        try ( CommitEvent commitEvent = transactionEvent.beginCommitEvent() )\n-        {\n-            // Trigger transaction \"before\" hooks.\n-            if ( hasDataChanges() )\n-            {\n-                try\n-                {\n-                    hooksState = hooks.beforeCommit( txState, this, storageEngine.storeReadLayer(), storageStatement );\n-                    if ( hooksState != null && hooksState.failed() )\n-                    {\n-                        Throwable cause = hooksState.failure();\n-                        throw new TransactionFailureException( Status.Transaction.TransactionHookFailed, cause, \"\" );\n-                    }\n-                }\n-                finally\n-                {\n-                    beforeHookInvoked = true;\n-                }\n-            }\n-\n-            // Convert changes into commands and commit\n-            if ( hasChanges() )\n-            {\n-                // grab all optimistic locks now, locks can't be deferred any further\n-                statementLocks.prepareForCommit( currentStatement.lockTracer() );\n-                // use pessimistic locks for the rest of the commit process, locks can't be deferred any further\n-                Locks.Client commitLocks = statementLocks.pessimistic();\n-\n-                // Gather up commands from the various sources\n-                Collection<StorageCommand> extractedCommands = new ArrayList<>();\n-                storageEngine.createCommands(\n-                        extractedCommands,\n-                        txState,\n-                        storageStatement,\n-                        commitLocks,\n-                        lastTransactionIdWhenStarted );\n-                if ( hasExplicitIndexChanges() )\n-                {\n-                    explicitIndexTransactionState.extractCommands( extractedCommands );\n-                }\n-\n-                /* Here's the deal: we track a quick-to-access hasChanges in transaction state which is true\n-                 * if there are any changes imposed by this transaction. Some changes made inside a transaction undo\n-                 * previously made changes in that same transaction, and so at some point a transaction may have\n-                 * changes and at another point, after more changes seemingly,\n-                 * the transaction may not have any changes.\n-                 * However, to track that \"undoing\" of the changes is a bit tedious, intrusive and hard to maintain\n-                 * and get right.... So to really make sure the transaction has changes we re-check by looking if we\n-                 * have produced any commands to add to the logical log.\n-                 */\n-                if ( !extractedCommands.isEmpty() )\n-                {\n-                    // Finish up the whole transaction representation\n-                    PhysicalTransactionRepresentation transactionRepresentation =\n-                            new PhysicalTransactionRepresentation( extractedCommands );\n-                    TransactionHeaderInformation headerInformation = headerInformationFactory.create();\n-                    long timeCommitted = clocks.systemClock().millis();\n-                    transactionRepresentation.setHeader( headerInformation.getAdditionalHeader(),\n-                            headerInformation.getMasterId(),\n-                            headerInformation.getAuthorId(),\n-                            startTimeMillis, lastTransactionIdWhenStarted, timeCommitted,\n-                            commitLocks.getLockSessionId() );\n-\n-                    // Commit the transaction\n-                    success = true;\n-                    TransactionToApply batch = new TransactionToApply( transactionRepresentation,\n-                            versionContextSupplier.getVersionContext() );\n-                    txId = transactionId = commitProcess.commit( batch, commitEvent, INTERNAL );\n-                    commitTime = timeCommitted;\n-                }\n-            }\n-            success = true;\n-            return txId;\n-        }\n-        catch ( ConstraintValidationException | CreateConstraintFailureException e )\n-        {\n-            throw new ConstraintViolationTransactionFailureException(\n-                    e.getUserMessage( new SilentTokenNameLookup( tokenRead() ) ), e );\n-        }\n-        finally\n-        {\n-            if ( !success )\n-            {\n-                rollback();\n-            }\n-            else\n-            {\n-                afterCommit( txId );\n-            }\n-        }\n-    }\n-\n-    private void rollback() throws TransactionFailureException\n-    {\n-        try\n-        {\n-            try\n-            {\n-                dropCreatedConstraintIndexes();\n-            }\n-            catch ( IllegalStateException | SecurityException e )\n-            {\n-                throw new TransactionFailureException( Status.Transaction.TransactionRollbackFailed, e,\n-                        \"Could not drop created constraint indexes\" );\n-            }\n-\n-            // Free any acquired id's\n-            if ( txState != null )\n-            {\n-                try\n-                {\n-                    txState.accept( new TxStateVisitor.Adapter()\n-                    {\n-                        @Override\n-                        public void visitCreatedNode( long id )\n-                        {\n-                            storeLayer.releaseNode( id );\n-                        }\n-\n-                        @Override\n-                        public void visitCreatedRelationship( long id, int type, long startNode, long endNode )\n-                        {\n-                            storeLayer.releaseRelationship( id );\n-                        }\n-                    } );\n-                }\n-                catch ( ConstraintValidationException | CreateConstraintFailureException e )\n-                {\n-                    throw new IllegalStateException(\n-                            \"Releasing locks during rollback should perform no constraints checking.\", e );\n-                }\n-            }\n-        }\n-        finally\n-        {\n-            afterRollback();\n-        }\n-    }\n-\n-    @Override\n-    public Read dataRead()\n-    {\n-        assertAllows( AccessMode::allowsReads, \"Read\" );\n-        return operations.dataRead();\n-    }\n-\n-    @Override\n-    public Read stableDataRead()\n-    {\n-        assertAllows( AccessMode::allowsReads, \"Read\" );\n-        return operations.dataRead();\n-    }\n-\n-    @Override\n-    public void markAsStable()\n-    {\n-        // ignored until 2-layer tx-state is supported\n-    }\n-\n-    @Override\n-    public Write dataWrite() throws InvalidTransactionTypeKernelException\n-    {\n-        accessCapability.assertCanWrite();\n-        assertAllows( AccessMode::allowsWrites, \"Write\" );\n-        upgradeToDataWrites();\n-        return operations;\n-    }\n-\n-    @Override\n-    public TokenWrite tokenWrite()\n-    {\n-        accessCapability.assertCanWrite();\n-        return operations.token();\n-    }\n-\n-    @Override\n-    public Token token()\n-    {\n-        accessCapability.assertCanWrite();\n-        return operations.token();\n-    }\n-\n-    @Override\n-    public TokenRead tokenRead()\n-    {\n-        assertAllows( AccessMode::allowsReads, \"Read\" );\n-        return operations.token();\n-    }\n-\n-    @Override\n-    public ExplicitIndexRead indexRead()\n-    {\n-        assertAllows( AccessMode::allowsReads, \"Read\" );\n-\n-        return operations.indexRead();\n-    }\n-\n-    @Override\n-    public ExplicitIndexWrite indexWrite() throws InvalidTransactionTypeKernelException\n-    {\n-        accessCapability.assertCanWrite();\n-        assertAllows( AccessMode::allowsWrites, \"Write\" );\n-        upgradeToDataWrites();\n-\n-        return operations;\n-    }\n-\n-    @Override\n-    public SchemaRead schemaRead()\n-    {\n-        assertAllows( AccessMode::allowsReads, \"Read\" );\n-        return operations.schemaRead();\n-    }\n-\n-    @Override\n-    public SchemaWrite schemaWrite() throws InvalidTransactionTypeKernelException\n+    long heapAllocatedBytes()\n     {\n-        accessCapability.assertCanWrite();\n-        assertAllows( AccessMode::allowsSchemaWrites, \"Schema\" );\n-\n-        upgradeToSchemaWrites();\n-        return operations;\n-    }\n-\n-    @Override\n-    public org.neo4j.internal.kernel.api.Locks locks()\n-    {\n-       return operations.locks();\n-    }\n-\n-    public StatementLocks statementLocks()\n-    {\n-        assertOpen();\n-        return statementLocks;\n-    }\n-\n-    @Override\n-    public CursorFactory cursors()\n-    {\n-        return operations.cursors();\n-    }\n-\n-    @Override\n-    public org.neo4j.internal.kernel.api.Procedures procedures()\n-    {\n-        return operations.procedures();\n-    }\n-\n-    @Override\n-    public ExecutionStatistics executionStatistics()\n-    {\n-        return this;\n-    }\n-\n-    public LockTracer lockTracer()\n-    {\n-        return currentStatement.lockTracer();\n-    }\n-\n-    public void assertAllows( Function<AccessMode,Boolean> allows, String mode )\n-    {\n-        AccessMode accessMode = securityContext().mode();\n-        if ( !allows.apply( accessMode ) )\n-        {\n-            throw accessMode.onViolation(\n-                    format( \"%s operations are not allowed for %s.\", mode,\n-                           securityContext().description() ) );\n-        }\n-    }\n-\n-    private void afterCommit( long txId )\n-    {\n-        try\n-        {\n-            markAsClosed( txId );\n-            if ( beforeHookInvoked )\n-            {\n-                hooks.afterCommit( txState, this, hooksState );\n-            }\n-        }\n-        finally\n-        {\n-            transactionMonitor.transactionFinished( true, hasTxStateWithChanges() );\n-        }\n-    }\n-\n-    private void afterRollback()\n-    {\n-        try\n-        {\n-            markAsClosed( ROLLBACK );\n-            if ( beforeHookInvoked )\n-            {\n-                hooks.afterRollback( txState, this, hooksState );\n-            }\n-        }\n-        finally\n-        {\n-            transactionMonitor.transactionFinished( false, hasTxStateWithChanges() );\n-        }\n+      return heapAllocation.allocatedBytes(transactionThreadId) - heapAllocatedBytesWhenQueryStarted;\n     }\n \n     /**\n-     * Release resources held up by this transaction & return it to the transaction pool.\n-     * This method is guarded by {@link #terminationReleaseLock} to coordinate concurrent\n-     * {@link #markForTermination(Status)} calls.\n+     * Returns amount of direct memory allocated by current transaction.\n+     *\n+     * @return amount of direct memory allocated by the thread in bytes.\n      */\n-    private void release()\n+    long directAllocatedBytes()\n     {\n-        terminationReleaseLock.lock();\n-        try\n-        {\n-            statementLocks.close();\n-            statementLocks = null;\n-            terminationReason = null;\n-            type = null;\n-            securityContext = null;\n-            transactionEvent = null;\n-            explicitIndexTransactionState = null;\n-            if ( txState != null )\n-            {\n-                txState.release();\n-                txState = null;\n-            }\n-            hooksState = null;\n-            closeListeners.clear();\n-            reuseCount++;\n-            userMetaData = Collections.emptyMap();\n-            userTransactionId = 0;\n-            statistics.reset();\n-            operations.release();\n-            pool.release( this );\n-        }\n-        finally\n-        {\n-            terminationReleaseLock.unlock();\n-        }\n+      return transaction.collectionsFactory.getMemoryTracker().usedDirectMemory();\n     }\n \n     /**\n-     * Transaction can be terminated only when it is not closed and not already terminated.\n-     * Otherwise termination does not make sense.\n+     * Return CPU time used by current transaction in milliseconds\n+     *\n+     * @return the current CPU time used by the transaction, in milliseconds.\n      */\n-    private boolean canBeTerminated()\n+    public long cpuTimeMillis()\n     {\n-        return !closed && !isTerminated();\n-    }\n-\n-    @Override\n-    public boolean isTerminated()\n-    {\n-        return terminationReason != null;\n-    }\n-\n-    @Override\n-    public long lastTransactionTimestampWhenStarted()\n-    {\n-        return lastTransactionTimestampWhenStarted;\n-    }\n-\n-    @Override\n-    public void registerCloseListener( CloseListener listener )\n-    {\n-        assert listener != null;\n-        closeListeners.add( listener );\n-    }\n-\n-    @Override\n-    public Type transactionType()\n-    {\n-        return type;\n-    }\n-\n-    @Override\n-    public long getTransactionId()\n-    {\n-        if ( transactionId == NOT_COMMITTED_TRANSACTION_ID )\n-        {\n-            throw new IllegalStateException( \"Transaction id is not assigned yet. \" +\n-                                             \"It will be assigned during transaction commit.\" );\n-        }\n-        return transactionId;\n-    }\n-\n-    @Override\n-    public long getCommitTime()\n-    {\n-        if ( commitTime == NOT_COMMITTED_TRANSACTION_COMMIT_TIME )\n-        {\n-            throw new IllegalStateException( \"Transaction commit time is not assigned yet. \" +\n-                                             \"It will be assigned during transaction commit.\" );\n-        }\n-        return commitTime;\n-    }\n-\n-    @Override\n-    public Revertable overrideWith( SecurityContext context )\n-    {\n-        SecurityContext oldContext = this.securityContext;\n-        this.securityContext = context;\n-        return () -> this.securityContext = oldContext;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        String lockSessionId = statementLocks == null\n-                               ? \"statementLocks == null\"\n-                               : String.valueOf( statementLocks.pessimistic().getLockSessionId() );\n-\n-        return \"KernelTransaction[\" + lockSessionId + \"]\";\n-    }\n-\n-    public void dispose()\n-    {\n-        storageStatement.close();\n+      long cpuTimeNanos = cpuClock.cpuTimeNanos(transactionThreadId) - cpuTimeNanosWhenQueryStarted;\n+      return NANOSECONDS.toMillis(cpuTimeNanos);\n     }\n \n     /**\n-     * This method will be invoked by concurrent threads for inspecting the locks held by this transaction.\n-     * <p>\n-     * The fact that {@link #statementLocks} is a volatile fields, grants us enough of a read barrier to get a good\n-     * enough snapshot of the lock state (as long as the underlying methods give us such guarantees).\n+     * Return total number of page cache hits that current transaction performed\n      *\n-     * @return the locks held by this transaction.\n+     * @return total page cache hits\n      */\n-    public Stream<? extends ActiveLock> activeLocks()\n+    long totalTransactionPageCacheHits()\n     {\n-        StatementLocks locks = this.statementLocks;\n-        return locks == null ? Stream.empty() : locks.activeLocks();\n+      return pageCursorTracer.accumulatedHits();\n     }\n \n-    long userTransactionId()\n+    /**\n+     * Return total number of page cache faults that current transaction performed\n+     *\n+     * @return total page cache faults\n+     */\n+    long totalTransactionPageCacheFaults()\n     {\n-        return userTransactionId;\n+      return pageCursorTracer.accumulatedFaults();\n     }\n \n-    public Statistics getStatistics()\n+    /**\n+     * Report how long any particular query was waiting during it's execution\n+     *\n+     * @param waitTimeNanos query waiting time in nanoseconds\n+     */\n+    @SuppressWarnings(\"NonAtomicOperationOnVolatileField\")\n+    void addWaitingTime(long waitTimeNanos)\n     {\n-        return statistics;\n+      waitingTimeNanos += waitTimeNanos;\n     }\n \n-    public static class Statistics\n-    {\n-        private volatile long cpuTimeNanosWhenQueryStarted;\n-        private volatile long heapAllocatedBytesWhenQueryStarted;\n-        private volatile long waitingTimeNanos;\n-        private volatile long transactionThreadId;\n-        private volatile PageCursorTracer pageCursorTracer = PageCursorTracer.NULL;\n-        private final KernelTransactionImplementation transaction;\n-        private final AtomicReference<CpuClock> cpuClockRef;\n-        private final AtomicReference<HeapAllocation> heapAllocationRef;\n-        private CpuClock cpuClock;\n-        private HeapAllocation heapAllocation;\n-\n-        public Statistics( KernelTransactionImplementation transaction, AtomicReference<CpuClock> cpuClockRef,\n-                AtomicReference<HeapAllocation> heapAllocationRef )\n-        {\n-            this.transaction = transaction;\n-            this.cpuClockRef = cpuClockRef;\n-            this.heapAllocationRef = heapAllocationRef;\n-        }\n-\n-        protected void init( long threadId, PageCursorTracer pageCursorTracer )\n-        {\n-            this.cpuClock = cpuClockRef.get();\n-            this.heapAllocation = heapAllocationRef.get();\n-            this.transactionThreadId = threadId;\n-            this.pageCursorTracer = pageCursorTracer;\n-            this.cpuTimeNanosWhenQueryStarted = cpuClock.cpuTimeNanos( transactionThreadId );\n-            this.heapAllocatedBytesWhenQueryStarted = heapAllocation.allocatedBytes( transactionThreadId );\n-        }\n-\n-        /**\n-         * Returns number of allocated bytes by current transaction.\n-         * @return number of allocated bytes by the thread.\n-         */\n-        long heapAllocatedBytes()\n-        {\n-            return heapAllocation.allocatedBytes( transactionThreadId ) - heapAllocatedBytesWhenQueryStarted;\n-        }\n-\n-        /**\n-         * Returns amount of direct memory allocated by current transaction.\n-         *\n-         * @return amount of direct memory allocated by the thread in bytes.\n-         */\n-        long directAllocatedBytes()\n-        {\n-            return transaction.collectionsFactory.getMemoryTracker().usedDirectMemory();\n-        }\n-\n-        /**\n-         * Return CPU time used by current transaction in milliseconds\n-         * @return the current CPU time used by the transaction, in milliseconds.\n-         */\n-        public long cpuTimeMillis()\n-        {\n-            long cpuTimeNanos = cpuClock.cpuTimeNanos( transactionThreadId ) - cpuTimeNanosWhenQueryStarted;\n-            return NANOSECONDS.toMillis( cpuTimeNanos );\n-        }\n-\n-        /**\n-         * Return total number of page cache hits that current transaction performed\n-         * @return total page cache hits\n-         */\n-        long totalTransactionPageCacheHits()\n-        {\n-            return pageCursorTracer.accumulatedHits();\n-        }\n-\n-        /**\n-         * Return total number of page cache faults that current transaction performed\n-         * @return total page cache faults\n-         */\n-        long totalTransactionPageCacheFaults()\n-        {\n-            return pageCursorTracer.accumulatedFaults();\n-        }\n-\n-        /**\n-         * Report how long any particular query was waiting during it's execution\n-         * @param waitTimeNanos query waiting time in nanoseconds\n-         */\n-        @SuppressWarnings( \"NonAtomicOperationOnVolatileField\" )\n-        void addWaitingTime( long waitTimeNanos )\n-        {\n-            waitingTimeNanos += waitTimeNanos;\n-        }\n-\n-        /**\n-         * Accumulated transaction waiting time that includes waiting time of all already executed queries\n-         * plus waiting time of currently executed query.\n-         * @return accumulated transaction waiting time\n-         * @param nowNanos current moment in nanoseconds\n-         */\n-        long getWaitingTimeNanos( long nowNanos )\n+    /**\n+     * Accumulated transaction waiting time that includes waiting time of all already executed queries\n+     * plus waiting time of currently executed query.\n+     *\n+     * @param nowNanos current moment in nanoseconds\n+     * @return accumulated transaction waiting time\n+     */\n+    long getWaitingTimeNanos(long nowNanos)\n+    {\n+      ExecutingQueryList queryList = transaction.executingQueries();\n+      long waitingTime = waitingTimeNanos;\n+      if (queryList != null)\n+      {\n+        Long latestQueryWaitingNanos = queryList.top(executingQuery ->\n+            executingQuery.totalWaitingTimeNanos(nowNanos));\n+        waitingTime = latestQueryWaitingNanos != null ? waitingTime + latestQueryWaitingNanos : waitingTime;\n+      }\n+      return waitingTime;\n+    }\n+\n+    void reset()\n+    {\n+      pageCursorTracer = PageCursorTracer.NULL;\n+      cpuTimeNanosWhenQueryStarted = 0;\n+      heapAllocatedBytesWhenQueryStarted = 0;\n+      waitingTimeNanos = 0;\n+      transactionThreadId = -1;\n+    }\n+  }\n+\n+  @Override\n+  public ClockContext clocks()\n+  {\n+    return clocks;\n+  }\n+\n+  @Override\n+  public NodeCursor ambientNodeCursor()\n+  {\n+    return operations.nodeCursor();\n+  }\n+\n+  @Override\n+  public RelationshipScanCursor ambientRelationshipCursor()\n+  {\n+    return operations.relationshipCursor();\n+  }\n+\n+  @Override\n+  public PropertyCursor ambientPropertyCursor()\n+  {\n+    return operations.propertyCursor();\n+  }\n+\n+  /**\n+   * It is not allowed for the same transaction to perform database writes as well as schema writes.\n+   * This enum tracks the current write transactionStatus of the transaction, allowing it to transition from\n+   * no writes (NONE) to data writes (DATA) or schema writes (SCHEMA), but it cannot transition between\n+   * DATA and SCHEMA without throwing an InvalidTransactionTypeKernelException. Note that this behavior\n+   * is orthogonal to the SecurityContext which manages what the transaction or statement is allowed to do\n+   * based on authorization.\n+   */\n+  private enum TransactionWriteState\n+  {\n+    NONE,\n+    DATA\n         {\n-            ExecutingQueryList queryList = transaction.executingQueries();\n-            long waitingTime = waitingTimeNanos;\n-            if ( queryList != null )\n-            {\n-                Long latestQueryWaitingNanos = queryList.top( executingQuery ->\n-                        executingQuery.totalWaitingTimeNanos( nowNanos ) );\n-                waitingTime = latestQueryWaitingNanos != null ? waitingTime + latestQueryWaitingNanos : waitingTime;\n-            }\n-            return waitingTime;\n-        }\n-\n-        void reset()\n+          @Override\n+          TransactionWriteState upgradeToSchemaWrites() throws InvalidTransactionTypeKernelException\n+          {\n+            throw new InvalidTransactionTypeKernelException(\n+                \"Cannot perform schema updates in a transaction that has performed data updates.\");\n+          }\n+        },\n+    SCHEMA\n         {\n-            pageCursorTracer = PageCursorTracer.NULL;\n-            cpuTimeNanosWhenQueryStarted = 0;\n-            heapAllocatedBytesWhenQueryStarted = 0;\n-            waitingTimeNanos = 0;\n-            transactionThreadId = -1;\n-        }\n-    }\n-\n-    @Override\n-    public ClockContext clocks()\n-    {\n-        return clocks;\n-    }\n+          @Override\n+          TransactionWriteState upgradeToDataWrites() throws InvalidTransactionTypeKernelException\n+          {\n+            throw new InvalidTransactionTypeKernelException(\n+                \"Cannot perform data updates in a transaction that has performed schema updates.\");\n+          }\n+        };\n \n-    @Override\n-    public NodeCursor ambientNodeCursor()\n+    TransactionWriteState upgradeToDataWrites() throws InvalidTransactionTypeKernelException\n     {\n-        return operations.nodeCursor();\n+      return DATA;\n     }\n \n-    @Override\n-    public RelationshipScanCursor ambientRelationshipCursor()\n+    TransactionWriteState upgradeToSchemaWrites() throws InvalidTransactionTypeKernelException\n     {\n-        return operations.relationshipCursor();\n-    }\n-\n-    @Override\n-    public PropertyCursor ambientPropertyCursor()\n-    {\n-        return operations.propertyCursor();\n-    }\n-\n-    /**\n-     * It is not allowed for the same transaction to perform database writes as well as schema writes.\n-     * This enum tracks the current write transactionStatus of the transaction, allowing it to transition from\n-     * no writes (NONE) to data writes (DATA) or schema writes (SCHEMA), but it cannot transition between\n-     * DATA and SCHEMA without throwing an InvalidTransactionTypeKernelException. Note that this behavior\n-     * is orthogonal to the SecurityContext which manages what the transaction or statement is allowed to do\n-     * based on authorization.\n-     */\n-    private enum TransactionWriteState\n-    {\n-        NONE,\n-        DATA\n-                {\n-                    @Override\n-                    TransactionWriteState upgradeToSchemaWrites() throws InvalidTransactionTypeKernelException\n-                    {\n-                        throw new InvalidTransactionTypeKernelException(\n-                                \"Cannot perform schema updates in a transaction that has performed data updates.\" );\n-                    }\n-                },\n-        SCHEMA\n-                {\n-                    @Override\n-                    TransactionWriteState upgradeToDataWrites() throws InvalidTransactionTypeKernelException\n-                    {\n-                        throw new InvalidTransactionTypeKernelException(\n-                                \"Cannot perform data updates in a transaction that has performed schema updates.\" );\n-                    }\n-                };\n-\n-        TransactionWriteState upgradeToDataWrites() throws InvalidTransactionTypeKernelException\n-        {\n-            return DATA;\n-        }\n-\n-        TransactionWriteState upgradeToSchemaWrites() throws InvalidTransactionTypeKernelException\n-        {\n-            return SCHEMA;\n-        }\n+      return SCHEMA;\n     }\n+  }\n }\n",
            "diff_size": 1635
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}