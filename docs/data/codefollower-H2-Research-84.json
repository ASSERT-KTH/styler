{
    "project_name": "codefollower-H2-Research",
    "error_id": "84",
    "information": {
        "errors": [
            {
                "line": "26",
                "column": "27",
                "severity": "warning",
                "message": "'{' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    public static final Long[] EMPTY_LONG_ARR = new Long[0];\n\n    public LongDataType() {}\n\n    @Override\n    public int getMemory(Long obj) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/84/LongDataType.java\nindex ead1b5f5768..00e7c4bd11c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/84/LongDataType.java\n@@ -23,7 +23,7 @@ public class LongDataType extends BasicDataType<Long>\n     public static final LongDataType INSTANCE = new LongDataType();\n     public static final Long[] EMPTY_LONG_ARR = new Long[0];\n \n-    public LongDataType() {}\n+    public LongDataType() { }\n \n     @Override\n     public int getMemory(Long obj) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/84/LongDataType.java\nindex ead1b5f5768..570f6f8907f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/84/LongDataType.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.mvstore.type;\n \n import org.h2.mvstore.DataUtils;\n@@ -18,66 +19,66 @@ import java.nio.ByteBuffer;\n  *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n-public class LongDataType extends BasicDataType<Long>\n-{\n-    public static final LongDataType INSTANCE = new LongDataType();\n-    public static final Long[] EMPTY_LONG_ARR = new Long[0];\n+public class LongDataType extends BasicDataType<Long> {\n+  public static final LongDataType INSTANCE = new LongDataType();\n+  public static final Long[] EMPTY_LONG_ARR = new Long[0];\n \n-    public LongDataType() {}\n+  public LongDataType() {\n+  }\n \n-    @Override\n-    public int getMemory(Long obj) {\n-        return 8;\n-    }\n+  @Override\n+  public int getMemory(Long obj) {\n+    return 8;\n+  }\n \n-    @Override\n-    public void write(WriteBuffer buff, Long data) {\n-        buff.putVarLong(data);\n-    }\n+  @Override\n+  public void write(WriteBuffer buff, Long data) {\n+    buff.putVarLong(data);\n+  }\n \n-    @Override\n-    public Long read(ByteBuffer buff) {\n-        return DataUtils.readVarLong(buff);\n-    }\n+  @Override\n+  public Long read(ByteBuffer buff) {\n+    return DataUtils.readVarLong(buff);\n+  }\n \n-    @Override\n-    public Long[] createStorage(int size) {\n-        return size == 0 ? EMPTY_LONG_ARR : new Long[size];\n-    }\n+  @Override\n+  public Long[] createStorage(int size) {\n+    return size == 0 ? EMPTY_LONG_ARR : new Long[size];\n+  }\n \n-    @Override\n-    public int compare(Long one, Long two) {\n-        return Long.compare(one, two);\n-    }\n+  @Override\n+  public int compare(Long one, Long two) {\n+    return Long.compare(one, two);\n+  }\n \n-    @Override\n-    public int binarySearch(Long keyObj, Object storageObj, int size, int initialGuess) {\n-        long key = keyObj;\n-        Long[] storage = cast(storageObj);\n-        int low = 0;\n-        int high = size - 1;\n-        // the cached index minus one, so that\n-        // for the first time (when cachedCompare is 0),\n-        // the default value is used\n-        int x = initialGuess - 1;\n-        if (x < 0 || x > high) {\n-            x = high >>> 1;\n-        }\n-        return binarySearch(key, storage, low, high, x);\n+  @Override\n+  public int binarySearch(Long keyObj, Object storageObj, int size, int initialGuess) {\n+    long key = keyObj;\n+    Long[] storage = cast(storageObj);\n+    int low = 0;\n+    int high = size - 1;\n+    // the cached index minus one, so that\n+    // for the first time (when cachedCompare is 0),\n+    // the default value is used\n+    int x = initialGuess - 1;\n+    if (x < 0 || x > high) {\n+      x = high >>> 1;\n     }\n+    return binarySearch(key, storage, low, high, x);\n+  }\n \n-    private static int binarySearch(long key, Long[] storage, int low, int high, int x) {\n-        while (low <= high) {\n-            long midVal = storage[x];\n-            if (key > midVal) {\n-                low = x + 1;\n-            } else if (key < midVal) {\n-                high = x - 1;\n-            } else {\n-                return x;\n-            }\n-            x = (low + high) >>> 1;\n-        }\n-        return -(low + 1);\n+  private static int binarySearch(long key, Long[] storage, int low, int high, int x) {\n+    while (low <= high) {\n+      long midVal = storage[x];\n+      if (key > midVal) {\n+        low = x + 1;\n+      } else if (key < midVal) {\n+        high = x - 1;\n+      } else {\n+        return x;\n+      }\n+      x = (low + high) >>> 1;\n     }\n+    return -(low + 1);\n+  }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "25",
                    "column": "27",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/84/LongDataType.java\nindex ead1b5f5768..c07eea6cdc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/84/LongDataType.java\n@@ -18,8 +18,7 @@ import java.nio.ByteBuffer;\n  *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n-public class LongDataType extends BasicDataType<Long>\n-{\n+public class LongDataType extends BasicDataType<Long> {\n     public static final LongDataType INSTANCE = new LongDataType();\n     public static final Long[] EMPTY_LONG_ARR = new Long[0];\n \n@@ -80,4 +79,4 @@ public class LongDataType extends BasicDataType<Long>\n         }\n         return -(low + 1);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/84/LongDataType.java\nindex ead1b5f5768..79ca6ca666b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/84/LongDataType.java\n@@ -7,7 +7,6 @@ package org.h2.mvstore.type;\n \n import org.h2.mvstore.DataUtils;\n import org.h2.mvstore.WriteBuffer;\n-\n import java.nio.ByteBuffer;\n \n /**\n@@ -18,12 +17,19 @@ import java.nio.ByteBuffer;\n  *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n-public class LongDataType extends BasicDataType<Long>\n-{\n+\n+\n+public class LongDataType extends BasicDataType<Long> {\n+\n+\n     public static final LongDataType INSTANCE = new LongDataType();\n+\n+\n     public static final Long[] EMPTY_LONG_ARR = new Long[0];\n \n-    public LongDataType() {}\n+    public LongDataType() {\n+\n+    }\n \n     @Override\n     public int getMemory(Long obj) {\n@@ -73,11 +79,12 @@ public class LongDataType extends BasicDataType<Long>\n                 low = x + 1;\n             } else if (key < midVal) {\n                 high = x - 1;\n-            } else {\n+                            } else {\n                 return x;\n             }\n             x = (low + high) >>> 1;\n         }\n         return -(low + 1);\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/84/LongDataType.java\nindex ead1b5f5768..00e7c4bd11c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/84/LongDataType.java\n@@ -23,7 +23,7 @@ public class LongDataType extends BasicDataType<Long>\n     public static final LongDataType INSTANCE = new LongDataType();\n     public static final Long[] EMPTY_LONG_ARR = new Long[0];\n \n-    public LongDataType() {}\n+    public LongDataType() { }\n \n     @Override\n     public int getMemory(Long obj) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/84/LongDataType.java\nindex ead1b5f5768..00e7c4bd11c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/84/LongDataType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/84/LongDataType.java\n@@ -23,7 +23,7 @@ public class LongDataType extends BasicDataType<Long>\n     public static final LongDataType INSTANCE = new LongDataType();\n     public static final Long[] EMPTY_LONG_ARR = new Long[0];\n \n-    public LongDataType() {}\n+    public LongDataType() { }\n \n     @Override\n     public int getMemory(Long obj) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}