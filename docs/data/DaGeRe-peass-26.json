{
    "project_name": "DaGeRe-peass",
    "error_id": "26",
    "information": {
        "errors": [
            {
                "line": "43",
                "severity": "error",
                "message": "Line is longer than 200 characters (found 221).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   private final EnvironmentVariables env;\n\n   public ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig, final EnvironmentVariables env) {\n      super(projectFolder, dependencies);\n      this.viewFolder = viewFolder;\n      this.executeFile = executefile;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/26/ViewGenerator.java\nindex b167832f55d..95059c623a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/26/ViewGenerator.java\n@@ -40,7 +40,7 @@ public class ViewGenerator extends PairProcessor {\n    private final ExecutionConfig executionConfig;\n    private final EnvironmentVariables env;\n \n-   public ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig, final EnvironmentVariables env) {\n+\t\t\tpublic ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig, final EnvironmentVariables env) {\n       super(projectFolder, dependencies);\n       this.viewFolder = viewFolder;\n       this.executeFile = executefile;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/26/ViewGenerator.java\nindex b167832f55d..93a184470fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/26/ViewGenerator.java\n@@ -29,161 +29,162 @@ import picocli.CommandLine.Option;\n \n public class ViewGenerator extends PairProcessor {\n \n-   private static final Logger LOG = LogManager.getLogger(ViewGenerator.class);\n-\n-   @Option(names = { \"-out\", \"--out\" }, description = \"Path for saving the executionfile\")\n-   File out;\n-\n-   private File viewFolder;\n-   private File executeFile;\n-   private ExecutionData changedTraceMethods = new ExecutionData();\n-   private final ExecutionConfig executionConfig;\n-   private final EnvironmentVariables env;\n-\n-   public ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig, final EnvironmentVariables env) {\n-      super(projectFolder, dependencies);\n-      this.viewFolder = viewFolder;\n-      this.executeFile = executefile;\n-      this.threads = threads;\n-      processInitialVersion(dependencies.getInitialversion());\n-      changedTraceMethods.setAndroid(dependencies.isAndroid());\n-      this.executionConfig = executionConfig;\n-      this.env = env;\n-      init();\n-   }\n-\n-   public ViewGenerator(final EnvironmentVariables env) {\n-      executionConfig = new ExecutionConfig();\n-      this.env = env;\n-   }\n-\n-   public void init() {\n-      final String url = GitUtils.getURL(folders.getProjectFolder());\n-      changedTraceMethods.setUrl(url);\n-   }\n-\n-   public void processVersion(final String version, final Version versioninfo, final ExecutorService threads) {\n-      LOG.info(\"View-Generation for Version {}\", version);\n-      final Set<TestCase> testcases = versioninfo.getTests().getTests();\n-\n-      final boolean beforeEndVersion = endversion == null || version.equals(endversion) || VersionComparator.isBefore(version, endversion);\n-      final boolean beforeStartVersion = startversion == null || !VersionComparator.isBefore(version, startversion);\n-      LOG.debug(\"Before Start Version {}: {}\", startversion, beforeStartVersion);\n-      LOG.debug(\"Before End Version {}: {}\", endversion, beforeEndVersion);\n-\n-      \n-      final TestSet tests = new TestSet();\n-      for (final TestCase testcase : testcases) {\n-         if (beforeStartVersion && beforeEndVersion) {\n-            if (lastTestcaseCalls.containsKey(testcase)) {\n-               tests.addTest(testcase);\n-            }\n-         }\n-         lastTestcaseCalls.put(testcase, version);\n+  private static final Logger LOG = LogManager.getLogger(ViewGenerator.class);\n+\n+  @Option(names = {\"-out\", \"--out\"}, description = \"Path for saving the executionfile\")\n+  File out;\n+\n+  private File viewFolder;\n+  private File executeFile;\n+  private ExecutionData changedTraceMethods = new ExecutionData();\n+  private final ExecutionConfig executionConfig;\n+  private final EnvironmentVariables env;\n+\n+  public ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig,\n+                       final EnvironmentVariables env) {\n+    super(projectFolder, dependencies);\n+    this.viewFolder = viewFolder;\n+    this.executeFile = executefile;\n+    this.threads = threads;\n+    processInitialVersion(dependencies.getInitialversion());\n+    changedTraceMethods.setAndroid(dependencies.isAndroid());\n+    this.executionConfig = executionConfig;\n+    this.env = env;\n+    init();\n+  }\n+\n+  public ViewGenerator(final EnvironmentVariables env) {\n+    executionConfig = new ExecutionConfig();\n+    this.env = env;\n+  }\n+\n+  public void init() {\n+    final String url = GitUtils.getURL(folders.getProjectFolder());\n+    changedTraceMethods.setUrl(url);\n+  }\n+\n+  public void processVersion(final String version, final Version versioninfo, final ExecutorService threads) {\n+    LOG.info(\"View-Generation for Version {}\", version);\n+    final Set<TestCase> testcases = versioninfo.getTests().getTests();\n+\n+    final boolean beforeEndVersion = endversion == null || version.equals(endversion) || VersionComparator.isBefore(version, endversion);\n+    final boolean beforeStartVersion = startversion == null || !VersionComparator.isBefore(version, startversion);\n+    LOG.debug(\"Before Start Version {}: {}\", startversion, beforeStartVersion);\n+    LOG.debug(\"Before End Version {}: {}\", endversion, beforeEndVersion);\n+\n+\n+    final TestSet tests = new TestSet();\n+    for (final TestCase testcase : testcases) {\n+      if (beforeStartVersion && beforeEndVersion) {\n+        if (lastTestcaseCalls.containsKey(testcase)) {\n+          tests.addTest(testcase);\n+        }\n       }\n-      if (!tests.getTestcases().isEmpty()) {\n-         // int index= VersionComparator.getVersionIndex(versioninfo.getVersion());\n-         final String predecessor = getRunningPredecessor(version);\n-         final Runnable currentVersionAnalyser = createGeneratorRunnable(version, predecessor, tests);\n-         threads.submit(currentVersionAnalyser);\n+      lastTestcaseCalls.put(testcase, version);\n+    }\n+    if (!tests.getTestcases().isEmpty()) {\n+      // int index= VersionComparator.getVersionIndex(versioninfo.getVersion());\n+      final String predecessor = getRunningPredecessor(version);\n+      final Runnable currentVersionAnalyser = createGeneratorRunnable(version, predecessor, tests);\n+      threads.submit(currentVersionAnalyser);\n+    }\n+  }\n+\n+  private String getRunningPredecessor(final String version) {\n+    String predecessor = VersionComparator.getPreviousVersion(version);\n+    boolean running = isVersionRunning(predecessor);\n+    if (running) {\n+      return version + \"~1\";\n+    } else {\n+      LOG.debug(\"Previous version {}  of {} not running, searching running predecessor\", predecessor, version);\n+    }\n+    while (!running && !predecessor.equals(VersionComparator.NO_BEFORE)) {\n+      predecessor = VersionComparator.getPreviousVersion(predecessor);\n+      running = isVersionRunning(predecessor);\n+    }\n+    return predecessor;\n+  }\n+\n+  private boolean isVersionRunning(final String version) {\n+    boolean running = false;\n+    for (final Map.Entry<String, Version> previousCandidate : dependencies.getVersions().entrySet()) {\n+      if (previousCandidate.getKey().equals(version) && previousCandidate.getValue().isRunning()) {\n+        running = true;\n       }\n-   }\n-\n-   private String getRunningPredecessor(final String version) {\n-      String predecessor = VersionComparator.getPreviousVersion(version);\n-      boolean running = isVersionRunning(predecessor);\n-      if (running) {\n-         return version + \"~1\";\n-      } else {\n-         LOG.debug(\"Previous version {}  of {} not running, searching running predecessor\", predecessor, version);\n+    }\n+    if (dependencies.getInitialversion().getVersion().equals(version)) {\n+      return true;\n+    }\n+    return running;\n+  }\n+\n+  @Override\n+  public void processVersion(final String version, final Version versioninfo) {\n+    LOG.info(\"View-Generation for Version {} Index: {}\", version, VersionComparator.getVersionIndex(version));\n+    final Set<TestCase> testcases = versioninfo.getTests().getTests();\n+\n+    final boolean beforeEndVersion = endversion == null || version.equals(endversion) || VersionComparator.isBefore(version, endversion);\n+    LOG.debug(\"Before End Version {}: {}\", endversion, beforeEndVersion);\n+\n+    final TestSet tests = new TestSet();\n+    for (final TestCase testcase : testcases) {\n+      if ((startversion == null || !VersionComparator.isBefore(version, startversion)) && beforeEndVersion) {\n+        if (lastTestcaseCalls.containsKey(testcase)) {\n+          tests.addTest(testcase);\n+        }\n       }\n-      while (!running && !predecessor.equals(VersionComparator.NO_BEFORE)) {\n-         predecessor = VersionComparator.getPreviousVersion(predecessor);\n-         running = isVersionRunning(predecessor);\n-      }\n-      return predecessor;\n-   }\n-\n-   private boolean isVersionRunning(final String version) {\n-      boolean running = false;\n-      for (final Map.Entry<String, Version> previousCandidate : dependencies.getVersions().entrySet()) {\n-         if (previousCandidate.getKey().equals(version) && previousCandidate.getValue().isRunning()) {\n-            running = true;\n-         }\n-      }\n-      if (dependencies.getInitialversion().getVersion().equals(version)) {\n-         return true;\n-      }\n-      return running;\n-   }\n-\n-   @Override\n-   public void processVersion(final String version, final Version versioninfo) {\n-      LOG.info(\"View-Generation for Version {} Index: {}\", version, VersionComparator.getVersionIndex(version));\n-      final Set<TestCase> testcases = versioninfo.getTests().getTests();\n-\n-      final boolean beforeEndVersion = endversion == null || version.equals(endversion) || VersionComparator.isBefore(version, endversion);\n-      LOG.debug(\"Before End Version {}: {}\", endversion, beforeEndVersion);\n-\n-      final TestSet tests = new TestSet();\n-      for (final TestCase testcase : testcases) {\n-         if ((startversion == null || !VersionComparator.isBefore(version, startversion)) && beforeEndVersion) {\n-            if (lastTestcaseCalls.containsKey(testcase)) {\n-               tests.addTest(testcase);\n-            }\n-         }\n-         lastTestcaseCalls.put(testcase, version);\n-      }\n-      LOG.debug(\"Testcases for {}: {}\", version, tests.classCount());\n-      if (tests.classCount() > 0) {\n-         final String predecessor = getRunningPredecessor(version);\n-         final Runnable currentVersionAnalyser = createGeneratorRunnable(version, predecessor, tests);\n-         currentVersionAnalyser.run();\n-      } else {\n-         LOG.debug(\"No testcase is executed in {}\", version);\n-      }\n-   }\n-\n-   private Runnable createGeneratorRunnable(final String version, final String predecessor, final TestSet testset) {\n-      LOG.info(\"Starting {}\", version);\n-      return new ViewGeneratorThread(version, predecessor, folders,\n-            viewFolder, executeFile,\n-            testset, changedTraceMethods, executionConfig, env);\n-   }\n-\n-   public File getExecuteFile() {\n-      return executeFile;\n-   }\n-\n-   public static void main(final String[] args) throws JsonParseException, JsonMappingException, JAXBException, IOException {\n-      final CommandLine commandLine = new CommandLine(new ViewGenerator(new EnvironmentVariables()));\n-      commandLine.execute(args);\n-   }\n-\n-   public ExecutionData getChangedTraceMethods() {\n-      return changedTraceMethods;\n-   }\n-\n-   @Override\n-   public Void call() throws Exception {\n-      super.call();\n-      // final File resultFolder = DependencyReadingStarter.getResultFolder();\n-      final String projectName = folders.getProjectName();\n-      init();\n-\n-      if (out == null) {\n-         out = new File(\"results\");\n-      }\n-\n-      executeFile = new File(out, \"execute-\" + projectName + \".json\");\n-      viewFolder = new File(out, \"views_\" + projectName);\n-      if (!viewFolder.exists()) {\n-         viewFolder.mkdir();\n-      }\n-\n-      processCommandline();\n-\n-      return null;\n-   }\n+      lastTestcaseCalls.put(testcase, version);\n+    }\n+    LOG.debug(\"Testcases for {}: {}\", version, tests.classCount());\n+    if (tests.classCount() > 0) {\n+      final String predecessor = getRunningPredecessor(version);\n+      final Runnable currentVersionAnalyser = createGeneratorRunnable(version, predecessor, tests);\n+      currentVersionAnalyser.run();\n+    } else {\n+      LOG.debug(\"No testcase is executed in {}\", version);\n+    }\n+  }\n+\n+  private Runnable createGeneratorRunnable(final String version, final String predecessor, final TestSet testset) {\n+    LOG.info(\"Starting {}\", version);\n+    return new ViewGeneratorThread(version, predecessor, folders,\n+        viewFolder, executeFile,\n+        testset, changedTraceMethods, executionConfig, env);\n+  }\n+\n+  public File getExecuteFile() {\n+    return executeFile;\n+  }\n+\n+  public static void main(final String[] args) throws JsonParseException, JsonMappingException, JAXBException, IOException {\n+    final CommandLine commandLine = new CommandLine(new ViewGenerator(new EnvironmentVariables()));\n+    commandLine.execute(args);\n+  }\n+\n+  public ExecutionData getChangedTraceMethods() {\n+    return changedTraceMethods;\n+  }\n+\n+  @Override\n+  public Void call() throws Exception {\n+    super.call();\n+    // final File resultFolder = DependencyReadingStarter.getResultFolder();\n+    final String projectName = folders.getProjectName();\n+    init();\n+\n+    if (out == null) {\n+      out = new File(\"results\");\n+    }\n+\n+    executeFile = new File(out, \"execute-\" + projectName + \".json\");\n+    viewFolder = new File(out, \"views_\" + projectName);\n+    if (!viewFolder.exists()) {\n+      viewFolder.mkdir();\n+    }\n+\n+    processCommandline();\n+\n+    return null;\n+  }\n \n }\n",
            "diff_size": 190
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/26/ViewGenerator.java\nindex b167832f55d..215c85579fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/26/ViewGenerator.java\n@@ -29,10 +29,9 @@ import picocli.CommandLine.Option;\n \n public class ViewGenerator extends PairProcessor {\n \n-   private static final Logger LOG = LogManager.getLogger(ViewGenerator.class);\n+\tprivate static final Logger LOG = LogManager.getLogger(ViewGenerator.class);\n \n-   @Option(names = { \"-out\", \"--out\" }, description = \"Path for saving the executionfile\")\n-   File out;\n+   @Option(names = { \"-out\", \"--out\" }, description = \"Path for saving the executionfile\") File out;\n \n    private File viewFolder;\n    private File executeFile;\n@@ -41,7 +40,7 @@ public class ViewGenerator extends PairProcessor {\n    private final EnvironmentVariables env;\n \n    public ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig, final EnvironmentVariables env) {\n-      super(projectFolder, dependencies);\n+\tsuper(projectFolder, dependencies);\n       this.viewFolder = viewFolder;\n       this.executeFile = executefile;\n       this.threads = threads;\n@@ -50,76 +49,74 @@ public class ViewGenerator extends PairProcessor {\n       this.executionConfig = executionConfig;\n       this.env = env;\n       init();\n-   }\n+\t}\n \n    public ViewGenerator(final EnvironmentVariables env) {\n-      executionConfig = new ExecutionConfig();\n+\texecutionConfig = new ExecutionConfig();\n       this.env = env;\n-   }\n+\t}\n \n    public void init() {\n-      final String url = GitUtils.getURL(folders.getProjectFolder());\n+\tfinal String url = GitUtils.getURL(folders.getProjectFolder());\n       changedTraceMethods.setUrl(url);\n-   }\n+\t}\n \n    public void processVersion(final String version, final Version versioninfo, final ExecutorService threads) {\n-      LOG.info(\"View-Generation for Version {}\", version);\n+\tLOG.info(\"View-Generation for Version {}\", version);\n       final Set<TestCase> testcases = versioninfo.getTests().getTests();\n \n       final boolean beforeEndVersion = endversion == null || version.equals(endversion) || VersionComparator.isBefore(version, endversion);\n       final boolean beforeStartVersion = startversion == null || !VersionComparator.isBefore(version, startversion);\n       LOG.debug(\"Before Start Version {}: {}\", startversion, beforeStartVersion);\n       LOG.debug(\"Before End Version {}: {}\", endversion, beforeEndVersion);\n-\n-      \n-      final TestSet tests = new TestSet();\n-      for (final TestCase testcase : testcases) {\n-         if (beforeStartVersion && beforeEndVersion) {\n-            if (lastTestcaseCalls.containsKey(testcase)) {\n-               tests.addTest(testcase);\n-            }\n-         }\n+final TestSet tests = new TestSet();\n+for (final TestCase testcase : testcases) {\n+\tif (beforeStartVersion && beforeEndVersion) {\n+\tif (lastTestcaseCalls.containsKey(testcase)) {\n+\ttests.addTest(testcase);\n+\t}\n+\t}\n          lastTestcaseCalls.put(testcase, version);\n-      }\n+\t}\n       if (!tests.getTestcases().isEmpty()) {\n-         // int index= VersionComparator.getVersionIndex(versioninfo.getVersion());\n+\t// int index= VersionComparator.getVersionIndex(versioninfo.getVersion());\n          final String predecessor = getRunningPredecessor(version);\n          final Runnable currentVersionAnalyser = createGeneratorRunnable(version, predecessor, tests);\n          threads.submit(currentVersionAnalyser);\n-      }\n-   }\n+\t}\n+\t}\n \n    private String getRunningPredecessor(final String version) {\n-      String predecessor = VersionComparator.getPreviousVersion(version);\n+\tString predecessor = VersionComparator.getPreviousVersion(version);\n       boolean running = isVersionRunning(predecessor);\n       if (running) {\n-         return version + \"~1\";\n-      } else {\n-         LOG.debug(\"Previous version {}  of {} not running, searching running predecessor\", predecessor, version);\n-      }\n+\treturn version + \"~1\";\n+\t} else {\n+\tLOG.debug(\"Previous version {}  of {} not running, searching running predecessor\", predecessor, version);\n+\t}\n       while (!running && !predecessor.equals(VersionComparator.NO_BEFORE)) {\n-         predecessor = VersionComparator.getPreviousVersion(predecessor);\n+\tpredecessor = VersionComparator.getPreviousVersion(predecessor);\n          running = isVersionRunning(predecessor);\n-      }\n+\t}\n       return predecessor;\n-   }\n+\t}\n \n    private boolean isVersionRunning(final String version) {\n-      boolean running = false;\n+\tboolean running = false;\n       for (final Map.Entry<String, Version> previousCandidate : dependencies.getVersions().entrySet()) {\n-         if (previousCandidate.getKey().equals(version) && previousCandidate.getValue().isRunning()) {\n-            running = true;\n-         }\n-      }\n+\tif (previousCandidate.getKey().equals(version) && previousCandidate.getValue().isRunning()) {\n+\trunning = true;\n+\t}\n+\t}\n       if (dependencies.getInitialversion().getVersion().equals(version)) {\n-         return true;\n-      }\n+\treturn true;\n+\t}\n       return running;\n-   }\n+\t}\n \n    @Override\n    public void processVersion(final String version, final Version versioninfo) {\n-      LOG.info(\"View-Generation for Version {} Index: {}\", version, VersionComparator.getVersionIndex(version));\n+\tLOG.info(\"View-Generation for Version {} Index: {}\", version, VersionComparator.getVersionIndex(version));\n       final Set<TestCase> testcases = versioninfo.getTests().getTests();\n \n       final boolean beforeEndVersion = endversion == null || version.equals(endversion) || VersionComparator.isBefore(version, endversion);\n@@ -127,63 +124,60 @@ public class ViewGenerator extends PairProcessor {\n \n       final TestSet tests = new TestSet();\n       for (final TestCase testcase : testcases) {\n-         if ((startversion == null || !VersionComparator.isBefore(version, startversion)) && beforeEndVersion) {\n-            if (lastTestcaseCalls.containsKey(testcase)) {\n-               tests.addTest(testcase);\n-            }\n-         }\n+\tif ((startversion == null || !VersionComparator.isBefore(version, startversion)) && beforeEndVersion) {\n+\tif (lastTestcaseCalls.containsKey(testcase)) {\n+\ttests.addTest(testcase);\n+\t}\n+\t}\n          lastTestcaseCalls.put(testcase, version);\n-      }\n+\t}\n       LOG.debug(\"Testcases for {}: {}\", version, tests.classCount());\n       if (tests.classCount() > 0) {\n-         final String predecessor = getRunningPredecessor(version);\n+\tfinal String predecessor = getRunningPredecessor(version);\n          final Runnable currentVersionAnalyser = createGeneratorRunnable(version, predecessor, tests);\n          currentVersionAnalyser.run();\n-      } else {\n-         LOG.debug(\"No testcase is executed in {}\", version);\n-      }\n-   }\n+\t} else {\n+\tLOG.debug(\"No testcase is executed in {}\", version);\n+\t}\n+\t}\n \n    private Runnable createGeneratorRunnable(final String version, final String predecessor, final TestSet testset) {\n-      LOG.info(\"Starting {}\", version);\n-      return new ViewGeneratorThread(version, predecessor, folders,\n-            viewFolder, executeFile,\n-            testset, changedTraceMethods, executionConfig, env);\n-   }\n+\tLOG.info(\"Starting {}\", version);\n+      return new ViewGeneratorThread(version, predecessor, folders, viewFolder, executeFile, testset, changedTraceMethods, executionConfig, env);\n+\t}\n \n    public File getExecuteFile() {\n-      return executeFile;\n-   }\n+\treturn executeFile;\n+\t}\n \n    public static void main(final String[] args) throws JsonParseException, JsonMappingException, JAXBException, IOException {\n-      final CommandLine commandLine = new CommandLine(new ViewGenerator(new EnvironmentVariables()));\n+\tfinal CommandLine commandLine = new CommandLine(new ViewGenerator(new EnvironmentVariables()));\n       commandLine.execute(args);\n-   }\n+\t}\n \n    public ExecutionData getChangedTraceMethods() {\n-      return changedTraceMethods;\n-   }\n+\treturn changedTraceMethods;\n+\t}\n \n    @Override\n    public Void call() throws Exception {\n-      super.call();\n+\tsuper.call();\n       // final File resultFolder = DependencyReadingStarter.getResultFolder();\n       final String projectName = folders.getProjectName();\n       init();\n \n       if (out == null) {\n-         out = new File(\"results\");\n-      }\n+\tout = new File(\"results\");\n+\t}\n \n       executeFile = new File(out, \"execute-\" + projectName + \".json\");\n       viewFolder = new File(out, \"views_\" + projectName);\n       if (!viewFolder.exists()) {\n-         viewFolder.mkdir();\n-      }\n+\tviewFolder.mkdir();\n+\t}\n \n       processCommandline();\n \n       return null;\n-   }\n-\n-}\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 70
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "column": "16",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/26/ViewGenerator.java\nindex b167832f55d..d58bf026d46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/26/ViewGenerator.java\n@@ -5,15 +5,11 @@ import java.io.IOException;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ExecutorService;\n-\n import javax.xml.bind.JAXBException;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-\n import com.fasterxml.jackson.core.JsonParseException;\n import com.fasterxml.jackson.databind.JsonMappingException;\n-\n import de.peass.config.ExecutionConfig;\n import de.peass.dependency.analysis.data.TestCase;\n import de.peass.dependency.analysis.data.TestSet;\n@@ -27,163 +23,155 @@ import de.peass.vcs.GitUtils;\n import picocli.CommandLine;\n import picocli.CommandLine.Option;\n \n-public class ViewGenerator extends PairProcessor {\n-\n-   private static final Logger LOG = LogManager.getLogger(ViewGenerator.class);\n-\n-   @Option(names = { \"-out\", \"--out\" }, description = \"Path for saving the executionfile\")\n-   File out;\n-\n-   private File viewFolder;\n-   private File executeFile;\n-   private ExecutionData changedTraceMethods = new ExecutionData();\n-   private final ExecutionConfig executionConfig;\n-   private final EnvironmentVariables env;\n-\n-   public ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig, final EnvironmentVariables env) {\n-      super(projectFolder, dependencies);\n-      this.viewFolder = viewFolder;\n-      this.executeFile = executefile;\n-      this.threads = threads;\n-      processInitialVersion(dependencies.getInitialversion());\n-      changedTraceMethods.setAndroid(dependencies.isAndroid());\n-      this.executionConfig = executionConfig;\n-      this.env = env;\n-      init();\n-   }\n \n-   public ViewGenerator(final EnvironmentVariables env) {\n-      executionConfig = new ExecutionConfig();\n-      this.env = env;\n-   }\n-\n-   public void init() {\n-      final String url = GitUtils.getURL(folders.getProjectFolder());\n-      changedTraceMethods.setUrl(url);\n+public class ViewGenerator extends PairProcessor {\n+ private static final Logger LOG = LogManager.getLogger(ViewGenerator.class);\n+\n+ @Option(names ={\"-out\", \"--out\"}, description = \"Path for saving the executionfile\") File out;\n+ private File viewFolder;\n+ private File executeFile;\n+ private ExecutionData changedTraceMethods = new ExecutionData();\n+ private final ExecutionConfig executionConfig;\n+ private final EnvironmentVariables env;\n+\n+ public ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig, final EnvironmentVariables env) {\n+  super(projectFolder, dependencies);\n+  this.viewFolder = viewFolder;\n+  this.executeFile = executefile;\n+  this.threads = threads;\n+  processInitialVersion(dependencies.getInitialversion());\n+  changedTraceMethods.setAndroid(dependencies.isAndroid());\n+  this.executionConfig = executionConfig;\n+  this.env = env;\n+  init();\n+ }\n+\n+ public ViewGenerator(final EnvironmentVariables env) {\n+  executionConfig = new ExecutionConfig();\n+  this.env = env;\n+ }\n+\n+\n+ public void init() {\n+  final String url = GitUtils.getURL(folders.getProjectFolder());\n+  changedTraceMethods.setUrl(url);\n+ }\n+\n+ public void processVersion(final String version, final Version versioninfo, final ExecutorService threads) {\n+  LOG.info(\"View-Generation for Version {}\", version);\n+\n+  final Set<TestCase> testcases = versioninfo.getTests().getTests();\n+  final boolean beforeEndVersion = endversion == null || version.equals(endversion) || VersionComparator.isBefore(version, endversion);\n+  final boolean beforeStartVersion = startversion == null || !VersionComparator.isBefore(version, startversion);\n+  LOG.debug(\"Before Start Version {}: {}\", startversion, beforeStartVersion);\n+  LOG.debug(\"Before End Version {}: {}\", endversion, beforeEndVersion);\n+\n+  final TestSet tests = new TestSet();\n+  for (final TestCase testcase : testcases) {\n+   if (beforeStartVersion && beforeEndVersion) {\n+    if (lastTestcaseCalls.containsKey(testcase)) {\n+     tests.addTest(testcase);\n+    }\n    }\n-\n-   public void processVersion(final String version, final Version versioninfo, final ExecutorService threads) {\n-      LOG.info(\"View-Generation for Version {}\", version);\n-      final Set<TestCase> testcases = versioninfo.getTests().getTests();\n-\n-      final boolean beforeEndVersion = endversion == null || version.equals(endversion) || VersionComparator.isBefore(version, endversion);\n-      final boolean beforeStartVersion = startversion == null || !VersionComparator.isBefore(version, startversion);\n-      LOG.debug(\"Before Start Version {}: {}\", startversion, beforeStartVersion);\n-      LOG.debug(\"Before End Version {}: {}\", endversion, beforeEndVersion);\n-\n-      \n-      final TestSet tests = new TestSet();\n-      for (final TestCase testcase : testcases) {\n-         if (beforeStartVersion && beforeEndVersion) {\n-            if (lastTestcaseCalls.containsKey(testcase)) {\n-               tests.addTest(testcase);\n-            }\n-         }\n-         lastTestcaseCalls.put(testcase, version);\n-      }\n-      if (!tests.getTestcases().isEmpty()) {\n+   lastTestcaseCalls.put(testcase, version);\n+  }\n+  if (!tests.getTestcases().isEmpty()) {\n          // int index= VersionComparator.getVersionIndex(versioninfo.getVersion());\n-         final String predecessor = getRunningPredecessor(version);\n-         final Runnable currentVersionAnalyser = createGeneratorRunnable(version, predecessor, tests);\n-         threads.submit(currentVersionAnalyser);\n-      }\n-   }\n-\n-   private String getRunningPredecessor(final String version) {\n-      String predecessor = VersionComparator.getPreviousVersion(version);\n-      boolean running = isVersionRunning(predecessor);\n-      if (running) {\n-         return version + \"~1\";\n-      } else {\n-         LOG.debug(\"Previous version {}  of {} not running, searching running predecessor\", predecessor, version);\n-      }\n-      while (!running && !predecessor.equals(VersionComparator.NO_BEFORE)) {\n-         predecessor = VersionComparator.getPreviousVersion(predecessor);\n-         running = isVersionRunning(predecessor);\n-      }\n-      return predecessor;\n-   }\n-\n-   private boolean isVersionRunning(final String version) {\n-      boolean running = false;\n-      for (final Map.Entry<String, Version> previousCandidate : dependencies.getVersions().entrySet()) {\n-         if (previousCandidate.getKey().equals(version) && previousCandidate.getValue().isRunning()) {\n-            running = true;\n-         }\n-      }\n-      if (dependencies.getInitialversion().getVersion().equals(version)) {\n-         return true;\n-      }\n-      return running;\n+   final String predecessor = getRunningPredecessor(version);\n+   final Runnable currentVersionAnalyser = createGeneratorRunnable(version, predecessor, tests);\n+   threads.submit(currentVersionAnalyser);\n+  }\n+ }\n+\n+ private String getRunningPredecessor(final String version) {\n+  String predecessor = VersionComparator.getPreviousVersion(version);\n+  boolean running = isVersionRunning(predecessor);\n+  if (running) {\n+   return version + \"~1\";\n+  } else {\n+   LOG.debug(\"Previous version {}  of {} not running, searching running predecessor\", predecessor, version);\n+  }\n+  while (!running && !predecessor.equals(VersionComparator.NO_BEFORE)) {\n+   predecessor = VersionComparator.getPreviousVersion(predecessor);\n+   running = isVersionRunning(predecessor);\n+  }\n+  return predecessor;\n+ }\n+\n+ private boolean isVersionRunning(final String version) {\n+  boolean running = false;\n+  for (final Map.Entry<String, Version> previousCandidate : dependencies.getVersions().entrySet()) {\n+   if (previousCandidate.getKey().equals(version) && previousCandidate.getValue().isRunning()) {\n+    running = true;\n    }\n-\n-   @Override\n-   public void processVersion(final String version, final Version versioninfo) {\n-      LOG.info(\"View-Generation for Version {} Index: {}\", version, VersionComparator.getVersionIndex(version));\n-      final Set<TestCase> testcases = versioninfo.getTests().getTests();\n-\n-      final boolean beforeEndVersion = endversion == null || version.equals(endversion) || VersionComparator.isBefore(version, endversion);\n-      LOG.debug(\"Before End Version {}: {}\", endversion, beforeEndVersion);\n-\n-      final TestSet tests = new TestSet();\n-      for (final TestCase testcase : testcases) {\n-         if ((startversion == null || !VersionComparator.isBefore(version, startversion)) && beforeEndVersion) {\n-            if (lastTestcaseCalls.containsKey(testcase)) {\n-               tests.addTest(testcase);\n-            }\n-         }\n-         lastTestcaseCalls.put(testcase, version);\n-      }\n-      LOG.debug(\"Testcases for {}: {}\", version, tests.classCount());\n-      if (tests.classCount() > 0) {\n-         final String predecessor = getRunningPredecessor(version);\n-         final Runnable currentVersionAnalyser = createGeneratorRunnable(version, predecessor, tests);\n-         currentVersionAnalyser.run();\n-      } else {\n-         LOG.debug(\"No testcase is executed in {}\", version);\n-      }\n-   }\n-\n-   private Runnable createGeneratorRunnable(final String version, final String predecessor, final TestSet testset) {\n-      LOG.info(\"Starting {}\", version);\n-      return new ViewGeneratorThread(version, predecessor, folders,\n-            viewFolder, executeFile,\n-            testset, changedTraceMethods, executionConfig, env);\n-   }\n-\n-   public File getExecuteFile() {\n-      return executeFile;\n-   }\n-\n-   public static void main(final String[] args) throws JsonParseException, JsonMappingException, JAXBException, IOException {\n-      final CommandLine commandLine = new CommandLine(new ViewGenerator(new EnvironmentVariables()));\n-      commandLine.execute(args);\n+  }\n+  if (dependencies.getInitialversion().getVersion().equals(version)) {\n+   return true;\n+  }\n+  return running;\n+ }\n+\n+ @Override\n+ public void processVersion(final String version, final Version versioninfo) {\n+  LOG.info(\"View-Generation for Version {} Index: {}\", version, VersionComparator.getVersionIndex(version));\n+\n+  final Set<TestCase> testcases = versioninfo.getTests().getTests();\n+  final boolean beforeEndVersion = endversion == null || version.equals(endversion) || VersionComparator.isBefore(version, endversion);\n+  LOG.debug(\"Before End Version {}: {}\", endversion, beforeEndVersion);\n+\n+  final TestSet tests = new TestSet();\n+  for (final TestCase testcase : testcases) {\n+   if ((startversion == null || !VersionComparator.isBefore(version, startversion)) && beforeEndVersion) {\n+    if (lastTestcaseCalls.containsKey(testcase)) {\n+     tests.addTest(testcase);\n+    }\n    }\n-\n-   public ExecutionData getChangedTraceMethods() {\n-      return changedTraceMethods;\n-   }\n-\n-   @Override\n-   public Void call() throws Exception {\n-      super.call();\n+   lastTestcaseCalls.put(testcase, version);\n+  }\n+  LOG.debug(\"Testcases for {}: {}\", version, tests.classCount());\n+  if (tests.classCount() > 0) {\n+   final String predecessor = getRunningPredecessor(version);\n+   final Runnable currentVersionAnalyser = createGeneratorRunnable(version, predecessor, tests);\n+   currentVersionAnalyser.run();\n+  } else {\n+   LOG.debug(\"No testcase is executed in {}\", version);\n+  }\n+ }\n+\n+ private Runnable createGeneratorRunnable(final String version, final String predecessor, final TestSet testset) {\n+  LOG.info(\"Starting {}\", version);\n+  return new ViewGeneratorThread(version, predecessor, folders, viewFolder, executeFile, testset, changedTraceMethods, executionConfig, env);\n+ }\n+\n+ public File getExecuteFile() {\n+  return executeFile;\n+ }\n+\n+ public static void main(final String[] args) throws JsonParseException, JsonMappingException, JAXBException, IOException {\n+  final CommandLine commandLine = new CommandLine(new ViewGenerator(new EnvironmentVariables()));\n+  commandLine.execute(args);\n+ }\n+\n+ public ExecutionData getChangedTraceMethods() {\n+  return changedTraceMethods;\n+ }\n+\n+ @Override\n+ public Void call() throws Exception {\n+  super.call();\n       // final File resultFolder = DependencyReadingStarter.getResultFolder();\n-      final String projectName = folders.getProjectName();\n-      init();\n-\n-      if (out == null) {\n-         out = new File(\"results\");\n-      }\n-\n-      executeFile = new File(out, \"execute-\" + projectName + \".json\");\n-      viewFolder = new File(out, \"views_\" + projectName);\n-      if (!viewFolder.exists()) {\n-         viewFolder.mkdir();\n-      }\n-\n-      processCommandline();\n-\n-      return null;\n-   }\n \n-}\n+  final String projectName = folders.getProjectName();\n+  init();\n+  if (out == null) {\n+   out = new File(\"results\");\n+  }\n+  executeFile = new File(out, \"execute-\" + projectName + \".json\");\n+  viewFolder = new File(out, \"views_\" + projectName);\n+  if (!viewFolder.exists()) {\n+   viewFolder.mkdir();\n+  }\n+  processCommandline();\n+  return null;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 235
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/26/ViewGenerator.java\nindex b167832f55d..95059c623a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/26/ViewGenerator.java\n@@ -40,7 +40,7 @@ public class ViewGenerator extends PairProcessor {\n    private final ExecutionConfig executionConfig;\n    private final EnvironmentVariables env;\n \n-   public ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig, final EnvironmentVariables env) {\n+\t\t\tpublic ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig, final EnvironmentVariables env) {\n       super(projectFolder, dependencies);\n       this.viewFolder = viewFolder;\n       this.executeFile = executefile;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "41",
                    "column": "42",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "42",
                    "column": "112",
                    "severity": "error",
                    "message": "'{' at column 77 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "42",
                    "column": "120",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/26/ViewGenerator.java\nindex b167832f55d..aeb6ace672f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/26/ViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/26/ViewGenerator.java\n@@ -38,10 +38,8 @@ public class ViewGenerator extends PairProcessor {\n    private File executeFile;\n    private ExecutionData changedTraceMethods = new ExecutionData();\n    private final ExecutionConfig executionConfig;\n-   private final EnvironmentVariables env;\n-\n-   public ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads, final ExecutionConfig executionConfig, final EnvironmentVariables env) {\n-      super(projectFolder, dependencies);\n+   private final EnvironmentVariables env;public ViewGenerator(final File projectFolder, final Dependencies dependencies, final File executefile, final File viewFolder, final int threads,\n+\t\t\t\t\tfinal ExecutionConfig executionConfig, final EnvironmentVariables env) { super (projectFolder, dependencies);\n       this.viewFolder = viewFolder;\n       this.executeFile = executefile;\n       this.threads = threads;\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}