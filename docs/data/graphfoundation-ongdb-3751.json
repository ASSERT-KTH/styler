{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3751",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "112",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3751/GapFreeAllEntriesLabelScanReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3751/GapFreeAllEntriesLabelScanReader.java\nindex 958d68e76b5..7433c31210c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3751/GapFreeAllEntriesLabelScanReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3751/GapFreeAllEntriesLabelScanReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import java.util.Iterator;\n@@ -31,95 +32,93 @@ import org.neo4j.kernel.api.labelscan.NodeLabelRange;\n  */\n class GapFreeAllEntriesLabelScanReader implements AllEntriesLabelScanReader\n {\n-    private final AllEntriesLabelScanReader nodeLabelRanges;\n-    private final long highId;\n+  private final AllEntriesLabelScanReader nodeLabelRanges;\n+  private final long highId;\n \n-    GapFreeAllEntriesLabelScanReader( AllEntriesLabelScanReader nodeLabelRanges, long highId )\n-    {\n-        this.nodeLabelRanges = nodeLabelRanges;\n-        this.highId = highId;\n-    }\n+  GapFreeAllEntriesLabelScanReader(AllEntriesLabelScanReader nodeLabelRanges, long highId)\n+  {\n+    this.nodeLabelRanges = nodeLabelRanges;\n+    this.highId = highId;\n+  }\n \n-    @Override\n-    public long maxCount()\n-    {\n-        return nodeLabelRanges.maxCount();\n-    }\n+  @Override\n+  public long maxCount()\n+  {\n+    return nodeLabelRanges.maxCount();\n+  }\n \n-    @Override\n-    public void close() throws Exception\n-    {\n-        nodeLabelRanges.close();\n-    }\n+  @Override\n+  public void close() throws Exception\n+  {\n+    nodeLabelRanges.close();\n+  }\n \n-    @Override\n-    public int rangeSize()\n-    {\n-        return nodeLabelRanges.rangeSize();\n-    }\n+  @Override\n+  public int rangeSize()\n+  {\n+    return nodeLabelRanges.rangeSize();\n+  }\n \n-    @Override\n-    public Iterator<NodeLabelRange> iterator()\n+  @Override\n+  public Iterator<NodeLabelRange> iterator()\n+  {\n+    return new GapFillingIterator(nodeLabelRanges.iterator(), (highId - 1) / nodeLabelRanges.rangeSize(),\n+        nodeLabelRanges.rangeSize());\n+  }\n+\n+  private static class GapFillingIterator extends PrefetchingIterator<NodeLabelRange>\n+  {\n+    private final long highestRangeId;\n+    private final Iterator<NodeLabelRange> source;\n+    private final long[][] emptyRangeData;\n+\n+    private NodeLabelRange nextFromSource;\n+    private long currentRangeId = -1;\n+\n+    GapFillingIterator(Iterator<NodeLabelRange> nodeLableRangeIterator, long highestRangeId, int rangeSize)\n     {\n-        return new GapFillingIterator( nodeLabelRanges.iterator(), (highId - 1) / nodeLabelRanges.rangeSize(),\n-                nodeLabelRanges.rangeSize() );\n+      this.highestRangeId = highestRangeId;\n+      this.source = nodeLableRangeIterator;\n+      this.emptyRangeData = new long[rangeSize][];\n     }\n \n-    private static class GapFillingIterator extends PrefetchingIterator<NodeLabelRange>\n+    @Override\n+    protected NodeLabelRange fetchNextOrNull()\n     {\n-        private final long highestRangeId;\n-        private final Iterator<NodeLabelRange> source;\n-        private final long[][] emptyRangeData;\n-\n-        private NodeLabelRange nextFromSource;\n-        private long currentRangeId = -1;\n-\n-        GapFillingIterator( Iterator<NodeLabelRange> nodeLableRangeIterator, long highestRangeId, int rangeSize )\n+      while (true)\n+      {\n+        // These conditions only come into play after we've gotten the first range from the source\n+        if (nextFromSource != null)\n         {\n-            this.highestRangeId = highestRangeId;\n-            this.source = nodeLableRangeIterator;\n-            this.emptyRangeData = new long[rangeSize][];\n+          if (currentRangeId + 1 == nextFromSource.id())\n+          {\n+            // Next to return is the one from source\n+            currentRangeId++;\n+            return nextFromSource;\n+          }\n+\n+          if (currentRangeId < nextFromSource.id())\n+          {\n+            // Source range iterator has a gap we need to fill\n+            return new NodeLabelRange(++currentRangeId, emptyRangeData);\n+          }\n         }\n \n-        @Override\n-        protected NodeLabelRange fetchNextOrNull()\n+        if (source.hasNext())\n         {\n-            while ( true )\n-            {\n-                // These conditions only come into play after we've gotten the first range from the source\n-                if ( nextFromSource != null )\n-                {\n-                    if ( currentRangeId + 1 == nextFromSource.id() )\n-                    {\n-                        // Next to return is the one from source\n-                        currentRangeId++;\n-                        return nextFromSource;\n-                    }\n-\n-                    if ( currentRangeId < nextFromSource.id() )\n-                    {\n-                        // Source range iterator has a gap we need to fill\n-                        return new NodeLabelRange( ++currentRangeId, emptyRangeData );\n-                    }\n-                }\n-\n-                if ( source.hasNext() )\n-                {\n-                    // The source iterator has more ranges, grab the next one\n-                    nextFromSource = source.next();\n-                    // continue in the outer loop\n-                }\n-                else if ( currentRangeId < highestRangeId )\n-                {\n-                    nextFromSource = new NodeLabelRange( highestRangeId, emptyRangeData );\n-                    // continue in the outer loop\n-                }\n-                else\n-                {\n-                    // End has been reached\n-                    return null;\n-                }\n-            }\n+          // The source iterator has more ranges, grab the next one\n+          nextFromSource = source.next();\n+          // continue in the outer loop\n+        } else if (currentRangeId < highestRangeId)\n+        {\n+          nextFromSource = new NodeLabelRange(highestRangeId, emptyRangeData);\n+          // continue in the outer loop\n+        } else\n+        {\n+          // End has been reached\n+          return null;\n         }\n+      }\n     }\n+  }\n }\n",
            "diff_size": 105
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3751/GapFreeAllEntriesLabelScanReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3751/GapFreeAllEntriesLabelScanReader.java\nindex 958d68e76b5..93e0c2797ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3751/GapFreeAllEntriesLabelScanReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3751/GapFreeAllEntriesLabelScanReader.java\n@@ -61,8 +61,7 @@ class GapFreeAllEntriesLabelScanReader implements AllEntriesLabelScanReader\n     @Override\n     public Iterator<NodeLabelRange> iterator()\n     {\n-        return new GapFillingIterator( nodeLabelRanges.iterator(), (highId - 1) / nodeLabelRanges.rangeSize(),\n-                nodeLabelRanges.rangeSize() );\n+        return new GapFillingIterator( nodeLabelRanges.iterator(), ( highId - 1) / nodeLabelRanges.rangeSize(), nodeLabelRanges.rangeSize() );\n     }\n \n     private static class GapFillingIterator extends PrefetchingIterator<NodeLabelRange>\n@@ -122,4 +121,4 @@ class GapFreeAllEntriesLabelScanReader implements AllEntriesLabelScanReader\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}