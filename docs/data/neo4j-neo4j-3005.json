{
    "project_name": "neo4j-neo4j",
    "error_id": "3005",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "88",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3005/ByteCodeClassWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3005/ByteCodeClassWriter.java\nindex f2fca0eddb9..eeaab1b2f5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3005/ByteCodeClassWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3005/ByteCodeClassWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen.bytecode;\n \n import org.objectweb.asm.ClassVisitor;\n@@ -56,67 +57,67 @@ class ByteCodeClassWriter implements ClassWriter\n     private final org.objectweb.asm.ClassWriter classWriter;\n     private final ClassVisitor classVisitor;\n     private final TypeReference type;\n-    private final Map<FieldReference,Expression> staticFields = new HashMap<>();\n+    private final Map<FieldReference, Expression> staticFields = new HashMap<>();\n     private final TypeReference base;\n \n-    ByteCodeClassWriter( TypeReference type, TypeReference base, TypeReference[] interfaces )\n+    ByteCodeClassWriter(TypeReference type, TypeReference base, TypeReference[] interfaces)\n     {\n-        this.classWriter = new org.objectweb.asm.ClassWriter( org.objectweb.asm.ClassWriter.COMPUTE_FRAMES );\n+        this.classWriter = new org.objectweb.asm.ClassWriter(org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);\n         this.classVisitor = classWriter; // this separation is useful if we want to add intermediary visitors\n         String[] iNames = new String[interfaces.length];\n-        for ( int i = 0; i < interfaces.length; i++ )\n+        for (int i = 0; i < interfaces.length; i++)\n         {\n-            iNames[i] = byteCodeName( interfaces[i] );\n+            iNames[i] = byteCodeName(interfaces[i]);\n         }\n-        classVisitor.visit( V1_8, ACC_PUBLIC + ACC_FINAL + ACC_SUPER, byteCodeName( type ), signature( type ),\n-                byteCodeName( base ), iNames.length != 0 ? iNames : null );\n-        if ( base.isInnerClass() )\n+        classVisitor.visit(V1_8, ACC_PUBLIC + ACC_FINAL + ACC_SUPER, byteCodeName(type), signature(type),\n+          byteCodeName(base), iNames.length != 0 ? iNames : null);\n+        if (base.isInnerClass())\n         {\n-            classVisitor.visitInnerClass( byteCodeName( base ), outerName( base ),\n-                    base.simpleName(), ACC_PUBLIC + ACC_STATIC );\n+            classVisitor.visitInnerClass(byteCodeName(base), outerName(base),\n+              base.simpleName(), ACC_PUBLIC + ACC_STATIC);\n         }\n         this.type = type;\n         this.base = base;\n     }\n \n     @Override\n-    public MethodWriter method( MethodDeclaration signature )\n+    public MethodWriter method(MethodDeclaration signature)\n     {\n-        return new ByteCodeMethodWriter( classVisitor, signature, base );\n+        return new ByteCodeMethodWriter(classVisitor, signature, base);\n     }\n \n     @Override\n-    public void field( FieldReference field, Expression value )\n+    public void field(FieldReference field, Expression value)\n     {\n         //keep track of all static field->value, and initiate in <clinit> in done\n-        if ( Modifier.isStatic( field.modifiers() ) && value != null )\n+        if (Modifier.isStatic(field.modifiers()) && value != null)\n         {\n-            staticFields.put( field, value );\n+            staticFields.put(field, value);\n         }\n         FieldVisitor fieldVisitor = classVisitor\n-                .visitField( field.modifiers(), field.name(), typeName( field.type() ), signature( field.type() ),\n-                        null );\n+          .visitField(field.modifiers(), field.name(), typeName(field.type()), signature(field.type()),\n+            null);\n         fieldVisitor.visitEnd();\n     }\n \n     @Override\n     public void done()\n     {\n-        if ( !staticFields.isEmpty() )\n+        if (!staticFields.isEmpty())\n         {\n-            MethodVisitor methodVisitor = classVisitor.visitMethod( ACC_STATIC, \"<clinit>\", \"()V\", null, null );\n-            ByteCodeExpressionVisitor expressionVisitor = new ByteCodeExpressionVisitor( methodVisitor );\n+            MethodVisitor methodVisitor = classVisitor.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n+            ByteCodeExpressionVisitor expressionVisitor = new ByteCodeExpressionVisitor(methodVisitor);\n             methodVisitor.visitCode();\n-            for ( Map.Entry<FieldReference,Expression> entry : staticFields.entrySet() )\n+            for (Map.Entry<FieldReference, Expression> entry : staticFields.entrySet())\n             {\n                 FieldReference field = entry.getKey();\n                 Expression value = entry.getValue();\n-                value.accept( expressionVisitor );\n-                methodVisitor.visitFieldInsn( PUTSTATIC, byteCodeName( field.owner() ),\n-                        field.name(), typeName( field.type() ) );\n+                value.accept(expressionVisitor);\n+                methodVisitor.visitFieldInsn(PUTSTATIC, byteCodeName(field.owner()),\n+                  field.name(), typeName(field.type()));\n             }\n-            methodVisitor.visitInsn( RETURN );\n-            methodVisitor.visitMaxs( 0, 0 );\n+            methodVisitor.visitInsn(RETURN);\n+            methodVisitor.visitMaxs(0, 0);\n             methodVisitor.visitEnd();\n         }\n         classVisitor.visitEnd();\n@@ -136,7 +137,7 @@ class ByteCodeClassWriter implements ClassWriter\n             @Override\n             public ByteBuffer bytes()\n             {\n-                return ByteBuffer.wrap( bytecode );\n+                return ByteBuffer.wrap(bytecode);\n             }\n         };\n     }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}