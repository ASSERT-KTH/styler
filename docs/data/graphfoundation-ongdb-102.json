{
    "project_name": "graphfoundation-ongdb",
    "error_id": "102",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "164",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "265",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "270",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/102/RecordFormatSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/102/RecordFormatSelector.java\nindex cb95fb7d52d..3f61f468cc5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/102/RecordFormatSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/102/RecordFormatSelector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -56,301 +57,300 @@ import static org.neo4j.kernel.impl.store.MetaDataStore.Position.STORE_VERSION;\n  */\n public class RecordFormatSelector\n {\n-    private static final RecordFormats DEFAULT_FORMAT = Standard.LATEST_RECORD_FORMATS;\n+  private static final RecordFormats DEFAULT_FORMAT = Standard.LATEST_RECORD_FORMATS;\n+\n+  private static final List<RecordFormats> KNOWN_FORMATS = asList(\n+      StandardV2_3.RECORD_FORMATS,\n+      StandardV3_0.RECORD_FORMATS,\n+      StandardV3_2.RECORD_FORMATS,\n+      StandardV3_4.RECORD_FORMATS\n+  );\n \n-    private static final List<RecordFormats> KNOWN_FORMATS = asList(\n-            StandardV2_3.RECORD_FORMATS,\n-            StandardV3_0.RECORD_FORMATS,\n-            StandardV3_2.RECORD_FORMATS,\n-            StandardV3_4.RECORD_FORMATS\n-    );\n+  private RecordFormatSelector()\n+  {\n+    throw new AssertionError(\"Not for instantiation!\");\n+  }\n \n-    private RecordFormatSelector()\n+  /**\n+   * Select {@link #DEFAULT_FORMAT} record format.\n+   *\n+   * @return default record format.\n+   */\n+  @Nonnull\n+  public static RecordFormats defaultFormat()\n+  {\n+    return DEFAULT_FORMAT;\n+  }\n+\n+  /**\n+   * Select record formats for provided store version.\n+   *\n+   * @param storeVersion store version to find format for\n+   * @return record formats\n+   * @throws IllegalArgumentException if format for specified store version not found\n+   */\n+  @Nonnull\n+  public static RecordFormats selectForVersion(String storeVersion)\n+  {\n+    for (RecordFormats format : allFormats())\n     {\n-        throw new AssertionError( \"Not for instantiation!\" );\n+      if (format.storeVersion().equals(storeVersion))\n+      {\n+        return format;\n+      }\n     }\n+    throw new IllegalArgumentException(\"Unknown store version '\" + storeVersion + \"'\");\n+  }\n \n-    /**\n-     * Select {@link #DEFAULT_FORMAT} record format.\n-     *\n-     * @return default record format.\n-     */\n-    @Nonnull\n-    public static RecordFormats defaultFormat()\n+  /**\n+   * Select configured record format based on available services in class path.\n+   * Specific format can be specified by {@link GraphDatabaseSettings#record_format} property.\n+   * <p>\n+   * If format is not specified {@link #DEFAULT_FORMAT} will be used.\n+   *\n+   * @param config      configuration parameters\n+   * @param logProvider logging provider\n+   * @return selected record format\n+   * @throws IllegalArgumentException if requested format not found\n+   */\n+  @Nonnull\n+  public static RecordFormats selectForConfig(Config config, LogProvider logProvider)\n+  {\n+    String recordFormat = configuredRecordFormat(config);\n+    if (StringUtils.isEmpty(recordFormat))\n     {\n-        return DEFAULT_FORMAT;\n+      info(logProvider, \"Record format not configured, selected default: \" + defaultFormat());\n+      return defaultFormat();\n     }\n+    RecordFormats format = selectSpecificFormat(recordFormat);\n+    info(logProvider, \"Selected record format based on config: \" + format);\n+    return format;\n+  }\n \n-    /**\n-     * Select record formats for provided store version.\n-     *\n-     * @param storeVersion store version to find format for\n-     * @return record formats\n-     * @throws IllegalArgumentException if format for specified store version not found\n-     */\n-    @Nonnull\n-    public static RecordFormats selectForVersion( String storeVersion )\n+  /**\n+   * Select record format for the given store directory.\n+   * <p>\n+   * <b>Note:</b> package private only for testing.\n+   *\n+   * @param storeDir  directory with the store\n+   * @param pageCache page cache to read store files\n+   * @return record format of the given store or <code>null</code> if {@value MetaDataStore#DEFAULT_NAME} file not\n+   * found or can't be read\n+   */\n+  @Nullable\n+  static RecordFormats selectForStore(File storeDir, PageCache pageCache, LogProvider logProvider)\n+  {\n+    File neoStoreFile = new File(storeDir, MetaDataStore.DEFAULT_NAME);\n+    // It's important for the block device support, that we use the page cache file system to check for the\n+    // neostore file.\n+    if (pageCache.getCachedFileSystem().fileExists(neoStoreFile))\n     {\n-        for ( RecordFormats format : allFormats() )\n+      try\n+      {\n+        long value = MetaDataStore.getRecord(pageCache, neoStoreFile, STORE_VERSION);\n+        if (value != MetaDataRecordFormat.FIELD_NOT_PRESENT)\n         {\n-            if ( format.storeVersion().equals( storeVersion ) )\n+          String storeVersion = MetaDataStore.versionLongToString(value);\n+\n+          for (RecordFormats format : allFormats())\n+          {\n+            if (format.storeVersion().equals(storeVersion))\n             {\n-                return format;\n+              info(logProvider, \"Selected \" + format + \" record format from store \" + storeDir);\n+              return format;\n             }\n+          }\n         }\n-        throw new IllegalArgumentException( \"Unknown store version '\" + storeVersion + \"'\" );\n+      } catch (IOException e)\n+      {\n+        info(logProvider, \"Unable to read store format: \" + e.getMessage());\n+      }\n     }\n+    return null;\n+  }\n+\n+  /**\n+   * Select record format for the given store (if exists) or from the given configuration. If there is no store and\n+   * record format is not configured than {@link #DEFAULT_FORMAT} is selected.\n+   *\n+   * @param config    configuration parameters\n+   * @param storeDir  directory with the store\n+   * @param pageCache page cache to read store files\n+   * @return record format from the store (if it can be read) or configured record format or {@link #DEFAULT_FORMAT}\n+   * @throws IllegalArgumentException when configured format is different from the format present in the store\n+   */\n+  @Nonnull\n+  public static RecordFormats selectForStoreOrConfig(\n+      Config config, File storeDir, PageCache pageCache, LogProvider logProvider)\n+  {\n+    RecordFormats configuredFormat = loadRecordFormat(configuredRecordFormat(config));\n+    boolean formatConfigured = configuredFormat != null;\n+\n+    RecordFormats currentFormat = selectForStore(storeDir, pageCache, logProvider);\n+    boolean storeWithFormatExists = currentFormat != null;\n \n-    /**\n-     * Select configured record format based on available services in class path.\n-     * Specific format can be specified by {@link GraphDatabaseSettings#record_format} property.\n-     * <p>\n-     * If format is not specified {@link #DEFAULT_FORMAT} will be used.\n-     *\n-     * @param config configuration parameters\n-     * @param logProvider logging provider\n-     * @return selected record format\n-     * @throws IllegalArgumentException if requested format not found\n-     */\n-    @Nonnull\n-    public static RecordFormats selectForConfig( Config config, LogProvider logProvider )\n+    if (formatConfigured && storeWithFormatExists)\n     {\n-        String recordFormat = configuredRecordFormat( config );\n-        if ( StringUtils.isEmpty( recordFormat ) )\n-        {\n-            info( logProvider, \"Record format not configured, selected default: \" + defaultFormat() );\n-            return defaultFormat();\n-        }\n-        RecordFormats format = selectSpecificFormat( recordFormat );\n-        info( logProvider, \"Selected record format based on config: \" + format );\n-        return format;\n+      if (currentFormat.getFormatFamily().equals(configuredFormat.getFormatFamily()) &&\n+          (currentFormat.generation() == configuredFormat.generation()))\n+      {\n+        info(logProvider, \"Configured format matches format in the store. Selected: \" + currentFormat);\n+        return currentFormat;\n+      }\n+      throw new IllegalArgumentException(String.format(\n+          \"Configured format '%s' is different from the actual format in the store '%s'\",\n+          configuredFormat, currentFormat));\n     }\n \n-    /**\n-     * Select record format for the given store directory.\n-     * <p>\n-     * <b>Note:</b> package private only for testing.\n-     *\n-     * @param storeDir directory with the store\n-     * @param pageCache page cache to read store files\n-     * @return record format of the given store or <code>null</code> if {@value MetaDataStore#DEFAULT_NAME} file not\n-     * found or can't be read\n-     */\n-    @Nullable\n-    static RecordFormats selectForStore( File storeDir, PageCache pageCache, LogProvider logProvider )\n+    if (!formatConfigured && storeWithFormatExists)\n     {\n-        File neoStoreFile = new File( storeDir, MetaDataStore.DEFAULT_NAME );\n-        // It's important for the block device support, that we use the page cache file system to check for the\n-        // neostore file.\n-        if ( pageCache.getCachedFileSystem().fileExists( neoStoreFile ) )\n-        {\n-            try\n-            {\n-                long value = MetaDataStore.getRecord( pageCache, neoStoreFile, STORE_VERSION );\n-                if ( value != MetaDataRecordFormat.FIELD_NOT_PRESENT )\n-                {\n-                    String storeVersion = MetaDataStore.versionLongToString( value );\n-\n-                    for ( RecordFormats format : allFormats() )\n-                    {\n-                        if ( format.storeVersion().equals( storeVersion ) )\n-                        {\n-                            info( logProvider, \"Selected \" + format + \" record format from store \" + storeDir );\n-                            return format;\n-                        }\n-                    }\n-                }\n-            }\n-            catch ( IOException e )\n-            {\n-                info( logProvider, \"Unable to read store format: \" + e.getMessage() );\n-            }\n-        }\n-        return null;\n+      info(logProvider, \"Format not configured. Selected format from the store: \" + currentFormat);\n+      return currentFormat;\n     }\n \n-    /**\n-     * Select record format for the given store (if exists) or from the given configuration. If there is no store and\n-     * record format is not configured than {@link #DEFAULT_FORMAT} is selected.\n-     *\n-     * @param config configuration parameters\n-     * @param storeDir directory with the store\n-     * @param pageCache page cache to read store files\n-     * @return record format from the store (if it can be read) or configured record format or {@link #DEFAULT_FORMAT}\n-     * @throws IllegalArgumentException when configured format is different from the format present in the store\n-     */\n-    @Nonnull\n-    public static RecordFormats selectForStoreOrConfig(\n-            Config config, File storeDir, PageCache pageCache, LogProvider logProvider )\n+    if (formatConfigured)\n     {\n-        RecordFormats configuredFormat = loadRecordFormat( configuredRecordFormat( config ) );\n-        boolean formatConfigured = configuredFormat != null;\n-\n-        RecordFormats currentFormat = selectForStore( storeDir, pageCache, logProvider );\n-        boolean storeWithFormatExists = currentFormat != null;\n+      info(logProvider, \"Selected configured format: \" + configuredFormat);\n+      return configuredFormat;\n+    }\n \n-        if ( formatConfigured && storeWithFormatExists )\n-        {\n-            if ( currentFormat.getFormatFamily().equals( configuredFormat.getFormatFamily() ) &&\n-                 (currentFormat.generation() == configuredFormat.generation()) )\n-            {\n-                info( logProvider, \"Configured format matches format in the store. Selected: \" + currentFormat );\n-                return currentFormat;\n-            }\n-            throw new IllegalArgumentException( String.format(\n-                    \"Configured format '%s' is different from the actual format in the store '%s'\",\n-                    configuredFormat, currentFormat ) );\n-        }\n+    return DEFAULT_FORMAT;\n+  }\n \n-        if ( !formatConfigured && storeWithFormatExists )\n-        {\n-            info( logProvider, \"Format not configured. Selected format from the store: \" + currentFormat );\n-            return currentFormat;\n-        }\n+  /**\n+   * Check if store and configured formats are compatible. In case if format is not configured or store does not\n+   * exist yet - we consider formats as compatible.\n+   *\n+   * @param config      configuration parameters\n+   * @param storeDir    directory with the store\n+   * @param pageCache   page cache to read store files\n+   * @param logProvider log provider\n+   * @return true if configured and actual format is compatible, false otherwise.\n+   */\n+  public static boolean isStoreAndConfigFormatsCompatible(\n+      Config config, File storeDir, PageCache pageCache, LogProvider logProvider)\n+  {\n+    RecordFormats configuredFormat = loadRecordFormat(configuredRecordFormat(config));\n \n-        if ( formatConfigured )\n-        {\n-            info( logProvider, \"Selected configured format: \" + configuredFormat );\n-            return configuredFormat;\n-        }\n+    RecordFormats currentFormat = selectForStore(storeDir, pageCache, logProvider);\n \n-        return DEFAULT_FORMAT;\n-    }\n+    return (configuredFormat == null) || (currentFormat == null) ||\n+        (currentFormat.getFormatFamily().equals(configuredFormat.getFormatFamily()) &&\n+            (currentFormat.generation() == configuredFormat.generation()));\n+  }\n \n-    /**\n-     * Check if store and configured formats are compatible. In case if format is not configured or store does not\n-     * exist yet - we consider formats as compatible.\n-     * @param config configuration parameters\n-     * @param storeDir directory with the store\n-     * @param pageCache page cache to read store files\n-     * @param logProvider log provider\n-     * @return true if configured and actual format is compatible, false otherwise.\n-     */\n-    public static boolean isStoreAndConfigFormatsCompatible(\n-            Config config, File storeDir, PageCache pageCache, LogProvider logProvider )\n+  /**\n+   * Select explicitly configured record format (via given {@code config}) or format from the store. If store does\n+   * not exist or has old format ({@link RecordFormats#generation()}) than this method returns\n+   * {@link #DEFAULT_FORMAT}.\n+   *\n+   * @param config    configuration parameters\n+   * @param storeDir  directory with the store\n+   * @param pageCache page cache to read store files\n+   * @return record format from the store (if it can be read) or configured record format or {@link #DEFAULT_FORMAT}\n+   * @see RecordFormats#generation()\n+   */\n+  @Nonnull\n+  public static RecordFormats selectNewestFormat(\n+      Config config, File storeDir, PageCache pageCache, LogProvider logProvider)\n+  {\n+    boolean formatConfigured = StringUtils.isNotEmpty(configuredRecordFormat(config));\n+    if (formatConfigured)\n     {\n-        RecordFormats configuredFormat = loadRecordFormat( configuredRecordFormat( config ) );\n-\n-        RecordFormats currentFormat = selectForStore( storeDir, pageCache, logProvider );\n-\n-        return (configuredFormat == null) || (currentFormat == null) ||\n-                (currentFormat.getFormatFamily().equals( configuredFormat.getFormatFamily() ) &&\n-                (currentFormat.generation() == configuredFormat.generation()));\n-    }\n-\n-    /**\n-     * Select explicitly configured record format (via given {@code config}) or format from the store. If store does\n-     * not exist or has old format ({@link RecordFormats#generation()}) than this method returns\n-     * {@link #DEFAULT_FORMAT}.\n-     *\n-     * @param config configuration parameters\n-     * @param storeDir directory with the store\n-     * @param pageCache page cache to read store files\n-     * @return record format from the store (if it can be read) or configured record format or {@link #DEFAULT_FORMAT}\n-     * @see RecordFormats#generation()\n-     */\n-    @Nonnull\n-    public static RecordFormats selectNewestFormat(\n-            Config config, File storeDir, PageCache pageCache, LogProvider logProvider )\n+      // format was explicitly configured so select it\n+      return selectForConfig(config, logProvider);\n+    } else\n     {\n-        boolean formatConfigured = StringUtils.isNotEmpty( configuredRecordFormat( config ) );\n-        if ( formatConfigured )\n-        {\n-            // format was explicitly configured so select it\n-            return selectForConfig( config, logProvider );\n-        }\n-        else\n-        {\n-            RecordFormats result = selectForStore( storeDir, pageCache, logProvider );\n-            if ( result == null )\n-            {\n-                // format was not explicitly configured and store does not exist, select default format\n-                info( logProvider, \"Selected format '\" + DEFAULT_FORMAT + \"' for the new store\" );\n-                result = DEFAULT_FORMAT;\n-            }\n-            else if ( FormatFamily.isHigherFamilyFormat( DEFAULT_FORMAT, result ) ||\n-                      (FormatFamily.isSameFamily( result, DEFAULT_FORMAT ) && (result.generation() < DEFAULT_FORMAT.generation())) )\n-            {\n-                // format was not explicitly configured and store has lower format\n-                // select default format, upgrade is intended\n-                info( logProvider,\n-                        \"Selected format '\" + DEFAULT_FORMAT + \"' for existing store with format '\" + result + \"'\" );\n-                result = DEFAULT_FORMAT;\n-            }\n-            return result;\n-        }\n+      RecordFormats result = selectForStore(storeDir, pageCache, logProvider);\n+      if (result == null)\n+      {\n+        // format was not explicitly configured and store does not exist, select default format\n+        info(logProvider, \"Selected format '\" + DEFAULT_FORMAT + \"' for the new store\");\n+        result = DEFAULT_FORMAT;\n+      } else if (FormatFamily.isHigherFamilyFormat(DEFAULT_FORMAT, result) ||\n+          (FormatFamily.isSameFamily(result, DEFAULT_FORMAT) && (result.generation() < DEFAULT_FORMAT.generation())))\n+      {\n+        // format was not explicitly configured and store has lower format\n+        // select default format, upgrade is intended\n+        info(logProvider,\n+            \"Selected format '\" + DEFAULT_FORMAT + \"' for existing store with format '\" + result + \"'\");\n+        result = DEFAULT_FORMAT;\n+      }\n+      return result;\n     }\n+  }\n \n-    /**\n-     * Finds which format, if any, succeeded the specified format. Only formats in the same family are considered.\n-     *\n-     * @param format to find successor to.\n-     * @return the format with the lowest generation > format.generation, or None if no such format is known.\n-     */\n-    @Nonnull\n-    public static Optional<RecordFormats> findSuccessor( @Nonnull final RecordFormats format )\n-    {\n-        return StreamSupport.stream( RecordFormatSelector.allFormats().spliterator(), false )\n-                .filter( candidate -> FormatFamily.isSameFamily( format, candidate ) )\n-                .filter( candidate -> candidate.generation() > format.generation() )\n-                .reduce( ( a, b ) -> a.generation() < b.generation() ? a : b );\n-    }\n+  /**\n+   * Finds which format, if any, succeeded the specified format. Only formats in the same family are considered.\n+   *\n+   * @param format to find successor to.\n+   * @return the format with the lowest generation > format.generation, or None if no such format is known.\n+   */\n+  @Nonnull\n+  public static Optional<RecordFormats> findSuccessor(@Nonnull final RecordFormats format)\n+  {\n+    return StreamSupport.stream(RecordFormatSelector.allFormats().spliterator(), false)\n+        .filter(candidate -> FormatFamily.isSameFamily(format, candidate))\n+        .filter(candidate -> candidate.generation() > format.generation())\n+        .reduce((a, b) -> a.generation() < b.generation() ? a : b);\n+  }\n \n-    /**\n-     * Gets all {@link RecordFormats} that the selector is aware of.\n-     * @return An iterable over all known record formats.\n-     */\n-    public static Iterable<RecordFormats> allFormats()\n-    {\n-        Iterable<RecordFormats.Factory> loadableFormatFactories = Service.load( RecordFormats.Factory.class );\n-        Iterable<RecordFormats> loadableFormats = map( RecordFormats.Factory::newInstance, loadableFormatFactories );\n-        return concat( KNOWN_FORMATS, loadableFormats );\n-    }\n+  /**\n+   * Gets all {@link RecordFormats} that the selector is aware of.\n+   *\n+   * @return An iterable over all known record formats.\n+   */\n+  public static Iterable<RecordFormats> allFormats()\n+  {\n+    Iterable<RecordFormats.Factory> loadableFormatFactories = Service.load(RecordFormats.Factory.class);\n+    Iterable<RecordFormats> loadableFormats = map(RecordFormats.Factory::newInstance, loadableFormatFactories);\n+    return concat(KNOWN_FORMATS, loadableFormats);\n+  }\n \n-    @Nonnull\n-    private static RecordFormats selectSpecificFormat( String recordFormat )\n+  @Nonnull\n+  private static RecordFormats selectSpecificFormat(String recordFormat)\n+  {\n+    RecordFormats formats = loadRecordFormat(recordFormat);\n+    if (formats == null)\n     {\n-        RecordFormats formats = loadRecordFormat( recordFormat );\n-        if ( formats == null )\n-        {\n-            throw new IllegalArgumentException( \"No record format found with the name '\" + recordFormat + \"'.\" );\n-        }\n-        return formats;\n+      throw new IllegalArgumentException(\"No record format found with the name '\" + recordFormat + \"'.\");\n     }\n+    return formats;\n+  }\n \n-    @Nullable\n-    private static RecordFormats loadRecordFormat( String recordFormat )\n+  @Nullable\n+  private static RecordFormats loadRecordFormat(String recordFormat)\n+  {\n+    if (StringUtils.isNotEmpty(recordFormat))\n     {\n-        if ( StringUtils.isNotEmpty( recordFormat ) )\n+      if (Standard.LATEST_NAME.equals(recordFormat))\n+      {\n+        return Standard.LATEST_RECORD_FORMATS;\n+      }\n+      for (RecordFormats knownFormat : KNOWN_FORMATS)\n+      {\n+        if (recordFormat.equals(knownFormat.name()))\n         {\n-            if ( Standard.LATEST_NAME.equals( recordFormat ) )\n-            {\n-                return Standard.LATEST_RECORD_FORMATS;\n-            }\n-            for ( RecordFormats knownFormat : KNOWN_FORMATS )\n-            {\n-                if ( recordFormat.equals( knownFormat.name() ) )\n-                {\n-                    return knownFormat;\n-                }\n-            }\n-            RecordFormats.Factory formatFactory = Service.loadSilently( RecordFormats.Factory.class, recordFormat );\n-            if ( formatFactory != null )\n-            {\n-                return formatFactory.newInstance();\n-            }\n+          return knownFormat;\n         }\n-        return null;\n+      }\n+      RecordFormats.Factory formatFactory = Service.loadSilently(RecordFormats.Factory.class, recordFormat);\n+      if (formatFactory != null)\n+      {\n+        return formatFactory.newInstance();\n+      }\n     }\n+    return null;\n+  }\n \n-    private static void info( LogProvider logProvider, String message )\n-    {\n-        logProvider.getLog( RecordFormatSelector.class ).info( message );\n-    }\n+  private static void info(LogProvider logProvider, String message)\n+  {\n+    logProvider.getLog(RecordFormatSelector.class).info(message);\n+  }\n \n-    @Nonnull\n-    private static String configuredRecordFormat( Config config )\n-    {\n-        return config.get( GraphDatabaseSettings.record_format );\n-    }\n+  @Nonnull\n+  private static String configuredRecordFormat(Config config)\n+  {\n+    return config.get(GraphDatabaseSettings.record_format);\n+  }\n }\n",
            "diff_size": 384
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "260",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "281",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 294).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/102/RecordFormatSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/102/RecordFormatSelector.java\nindex cb95fb7d52d..0e125bc24c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/102/RecordFormatSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/102/RecordFormatSelector.java\n@@ -58,12 +58,10 @@ public class RecordFormatSelector\n {\n     private static final RecordFormats DEFAULT_FORMAT = Standard.LATEST_RECORD_FORMATS;\n \n-    private static final List<RecordFormats> KNOWN_FORMATS = asList(\n-            StandardV2_3.RECORD_FORMATS,\n+    private static final List<RecordFormats> KNOWN_FORMATS = asList( StandardV2_3.RECORD_FORMATS,\n             StandardV3_0.RECORD_FORMATS,\n             StandardV3_2.RECORD_FORMATS,\n-            StandardV3_4.RECORD_FORMATS\n-    );\n+            StandardV3_4.RECORD_FORMATS );\n \n     private RecordFormatSelector()\n     {\n@@ -121,7 +119,8 @@ public class RecordFormatSelector\n             info( logProvider, \"Record format not configured, selected default: \" + defaultFormat() );\n             return defaultFormat();\n         }\n-        RecordFormats format = selectSpecificFormat( recordFormat );\n+\n+RecordFormats format = selectSpecificFormat( recordFormat );\n         info( logProvider, \"Selected record format based on config: \" + format );\n         return format;\n     }\n@@ -150,8 +149,7 @@ public class RecordFormatSelector\n                 if ( value != MetaDataRecordFormat.FIELD_NOT_PRESENT )\n                 {\n                     String storeVersion = MetaDataStore.versionLongToString( value );\n-\n-                    for ( RecordFormats format : allFormats() )\n+for ( RecordFormats format : allFormats() )\n                     {\n                         if ( format.storeVersion().equals( storeVersion ) )\n                         {\n@@ -180,8 +178,7 @@ public class RecordFormatSelector\n      * @throws IllegalArgumentException when configured format is different from the format present in the store\n      */\n     @Nonnull\n-    public static RecordFormats selectForStoreOrConfig(\n-            Config config, File storeDir, PageCache pageCache, LogProvider logProvider )\n+    public static RecordFormats selectForStoreOrConfig( Config config, File storeDir, PageCache pageCache, LogProvider logProvider )\n     {\n         RecordFormats configuredFormat = loadRecordFormat( configuredRecordFormat( config ) );\n         boolean formatConfigured = configuredFormat != null;\n@@ -191,15 +188,12 @@ public class RecordFormatSelector\n \n         if ( formatConfigured && storeWithFormatExists )\n         {\n-            if ( currentFormat.getFormatFamily().equals( configuredFormat.getFormatFamily() ) &&\n-                 (currentFormat.generation() == configuredFormat.generation()) )\n-            {\n+            if ( currentFormat.getFormatFamily().equals( configuredFormat.getFormatFamily() ) && (currentFormat.generation() == configuredFormat.generation()) )\n+{\n                 info( logProvider, \"Configured format matches format in the store. Selected: \" + currentFormat );\n                 return currentFormat;\n             }\n-            throw new IllegalArgumentException( String.format(\n-                    \"Configured format '%s' is different from the actual format in the store '%s'\",\n-                    configuredFormat, currentFormat ) );\n+            throw new IllegalArgumentException( String.format( \"Configured format '%s' is different from the actual format in the store '%s'\", configuredFormat, currentFormat ) );\n         }\n \n         if ( !formatConfigured && storeWithFormatExists )\n@@ -226,16 +220,12 @@ public class RecordFormatSelector\n      * @param logProvider log provider\n      * @return true if configured and actual format is compatible, false otherwise.\n      */\n-    public static boolean isStoreAndConfigFormatsCompatible(\n-            Config config, File storeDir, PageCache pageCache, LogProvider logProvider )\n+    public static boolean isStoreAndConfigFormatsCompatible( Config config, File storeDir, PageCache pageCache, LogProvider logProvider )\n     {\n         RecordFormats configuredFormat = loadRecordFormat( configuredRecordFormat( config ) );\n-\n-        RecordFormats currentFormat = selectForStore( storeDir, pageCache, logProvider );\n-\n-        return (configuredFormat == null) || (currentFormat == null) ||\n-                (currentFormat.getFormatFamily().equals( configuredFormat.getFormatFamily() ) &&\n-                (currentFormat.generation() == configuredFormat.generation()));\n+RecordFormats currentFormat = selectForStore( storeDir, pageCache, logProvider );\n+return ( configuredFormat == null ) || ( currentFormat == null ) || (currentFormat.getFormatFamily().equals( configuredFormat.getFormatFamily() ) &&\n+                (currentFormat.generation() == configuredFormat.generation() ));\n     }\n \n     /**\n@@ -250,8 +240,7 @@ public class RecordFormatSelector\n      * @see RecordFormats#generation()\n      */\n     @Nonnull\n-    public static RecordFormats selectNewestFormat(\n-            Config config, File storeDir, PageCache pageCache, LogProvider logProvider )\n+    public static RecordFormats selectNewestFormat( Config config, File storeDir, PageCache pageCache, LogProvider logProvider )\n     {\n         boolean formatConfigured = StringUtils.isNotEmpty( configuredRecordFormat( config ) );\n         if ( formatConfigured )\n@@ -268,16 +257,15 @@ public class RecordFormatSelector\n                 info( logProvider, \"Selected format '\" + DEFAULT_FORMAT + \"' for the new store\" );\n                 result = DEFAULT_FORMAT;\n             }\n-            else if ( FormatFamily.isHigherFamilyFormat( DEFAULT_FORMAT, result ) ||\n-                      (FormatFamily.isSameFamily( result, DEFAULT_FORMAT ) && (result.generation() < DEFAULT_FORMAT.generation())) )\n-            {\n+            else if ( FormatFamily.isHigherFamilyFormat( DEFAULT_FORMAT, result ) || (FormatFamily.isSameFamily( result, DEFAULT_FORMAT ) && (result.generation() < DEFAULT_FORMAT.generation() )) )\n+{\n                 // format was not explicitly configured and store has lower format\n                 // select default format, upgrade is intended\n-                info( logProvider,\n-                        \"Selected format '\" + DEFAULT_FORMAT + \"' for existing store with format '\" + result + \"'\" );\n-                result = DEFAULT_FORMAT;\n+                info( logProvider, \"Selected format '\" + DEFAULT_FORMAT + \"' for existing store with format '\" + result + \"'\" );\n+result = DEFAULT_FORMAT;\n             }\n-            return result;\n+\n+return result;\n         }\n     }\n \n@@ -290,10 +278,7 @@ public class RecordFormatSelector\n     @Nonnull\n     public static Optional<RecordFormats> findSuccessor( @Nonnull final RecordFormats format )\n     {\n-        return StreamSupport.stream( RecordFormatSelector.allFormats().spliterator(), false )\n-                .filter( candidate -> FormatFamily.isSameFamily( format, candidate ) )\n-                .filter( candidate -> candidate.generation() > format.generation() )\n-                .reduce( ( a, b ) -> a.generation() < b.generation() ? a : b );\n+        return StreamSupport.stream( RecordFormatSelector.allFormats().spliterator(), false ).filter( candidate -> FormatFamily.isSameFamily( format, candidate ) ).filter( candidate -> candidate.generation() > format.generation() ).reduce( ( a, b ) -> a.generation() < b.generation() ? a : b );\n     }\n \n     /**\n@@ -315,7 +300,8 @@ public class RecordFormatSelector\n         {\n             throw new IllegalArgumentException( \"No record format found with the name '\" + recordFormat + \"'.\" );\n         }\n-        return formats;\n+\n+return formats;\n     }\n \n     @Nullable\n@@ -353,4 +339,4 @@ public class RecordFormatSelector\n     {\n         return config.get( GraphDatabaseSettings.record_format );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}