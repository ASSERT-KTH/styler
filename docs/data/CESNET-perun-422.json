{
    "project_name": "CESNET-perun",
    "error_id": "422",
    "information": {
        "errors": [
            {
                "line": "447",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t * @throws InternalErrorException\n\t * @throws PrivilegeException\n\t * \n\t * @return count of all resources\n\t */\n\tint getResourcesCount(PerunSession perunSession) throws InternalErrorException, PrivilegeException;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "447",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/422/ResourcesManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/422/ResourcesManager.java\nindex 8e044bb63bc..38fe5cd87a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/422/ResourcesManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/422/ResourcesManager.java\n@@ -7,927 +7,891 @@ import java.util.List;\n /**\n  * Manages resources.\n  *\n- * @author  Slavek Licehammer\n+ * @author Slavek Licehammer\n  * @author\n  */\n public interface ResourcesManager {\n \n-\t/**\n-\t * Searches for the Resource with specified id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t *\n-\t * @return Resource with specified id\n-\t *\n-\t * @throws ResourceNotExistsException\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tResource getResourceById(PerunSession perunSession, int id) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Search for the RichResource with specific id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t *\n-\t * @return RichResource with specified id\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tRichResource getRichResourceById(PerunSession perunSession, int id) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Return resource by its name.\n-\t *\n-\t * @param sess\n-\t * @param name\n-\t * @param vo\n-\t * @param facility\n-\t * @return resource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tResource getResourceByName(PerunSession sess, Vo vo, Facility facility, String name) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, VoNotExistsException, FacilityNotExistsException;\n-\n-\t/**\n-\t * Inserts resource into DB.\n-\t *\n-\t * @param resource resource to create\n-\t * @param vo virtual organization\n-\t * @param facility facility\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tResource createResource(PerunSession perunSession, Resource resource, Vo vo, Facility facility) throws InternalErrorException, PrivilegeException, VoNotExistsException, FacilityNotExistsException, ResourceExistsException;\n-\n-\t/**\n-\t *  Deletes resource by id.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws RelationExistsException\n-\t * @throws ResourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group which is not affected by removing from DB\n-\t * @throws FacilityNotExistsException if facility of this resource not exists\n-\t */\n-\tvoid deleteResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, FacilityNotExistsException;\n-\n-\t/**\n-\t *  Deletes all resources for the VO.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws RelationExistsException\n-\t * @throws ResourceAlreadyRemovedException if there are at least 1 resource not affected by deleting from DB\n-\t * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group which is not affected by removing from DB\n-\t */\n-\tvoid deleteAllResources(PerunSession perunSession, Vo vo) throws InternalErrorException, VoNotExistsException, PrivilegeException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Get facility which belongs to the concrete resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return facility belonging to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tFacility getFacility(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Set Facility to resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param facility\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws FacilityNotExistsException\n-\t */\n-\tvoid setFacility(PerunSession perunSession, Resource resource, Facility facility) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, FacilityNotExistsException;\n-\n-\t/**\n-\t * Get Vo which is tied to specified resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return vo tied to specified resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tVo getVo(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns all members assigned to the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of members assigned to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> getAllowedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns all users who is assigned with the resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<User> getAllowedUsers(PerunSession sess, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Assign group to a resource. Check if attributes for each member form group are valid. Fill members' attributes with missing value.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t * @param resource\n-\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws WrongAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid assignGroupToResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Assign groups to a resource. Check if attributes for each member from all groups are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param perunSession\n-\t * @param groups list of resources\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t */\n-\tvoid assignGroupsToResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Assign group to the resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param perunSession\n-\t * @param group the group\n-\t * @param resources list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t */\n-\tvoid assignGroupToResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove group from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t * @param resource\n-\n-\t * @throws InternalErrorException Raise when group and resource not belong to the same VO or cant properly fix attributes of group's members after removing group from resource.\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotDefinedOnResourceException Group was never assigned to this resource\n-\t * @throws GroupAlreadyRemovedFromResourceException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeGroupFromResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Remove groups from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param groups list of groups\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws GroupNotDefinedOnResourceException\n-\t * @throws GroupAlreadyRemovedFromResourceException\n-\t */\n-\tvoid removeGroupsFromResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Remove group from the resources.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param groups list of groups\n-\t * @param resources list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws GroupNotDefinedOnResourceException\n-\t * @throws GroupAlreadyRemovedFromResourceException\n-\t */\n-\tvoid removeGroupFromResources(PerunSession perunSession, Group groups, List<Resource> resources) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * List all groups associated with the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @return list of assigned group\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Group> getAssignedGroups(PerunSession perunSession, Resource resource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * List all resources associated with the group.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t *\n-\t * @return list of assigned resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession perunSession, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * List all rich resources associated with the group with facility property filled.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t *\n-\t * @return list of assigned rich resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession perunSession, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * List all services associated with the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @return list of assigned resources\n-\t */\n-\tList<Service> getAssignedServices(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns all members assigned to the resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of assigned members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tpublic List<Member> getAssignedMembers(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException;\n-\t/**\n-\t * Returns all members assigned to the resource as RichMembers.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of assigned rich members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tpublic List<RichMember> getAssignedRichMembers(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Assign service to resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param service\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ServiceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ServiceAlreadyAssignedException\n-\t */\n-\tvoid assignService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServiceNotExistsException, ServiceAlreadyAssignedException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Assign all services from services package to resouce.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param servicesPackage\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tvoid assignServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServicesPackageNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Remove service from resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param service\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ServiceNotExistsException\n-\t * @throws ServiceNotAssignedException\n-\t */\n-\tvoid removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServiceNotExistsException, ServiceNotAssignedException;\n-\n-\t/**\n-\t * Remove from resource all services from services package.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param servicesPackage\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tvoid removeServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Get all VO resources.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @return list of resources\n-\t */\n-\tList<Resource> getResources(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all VO rich resources with facility property filled.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @return list of rich resources\n-\t */\n-\tList<RichResource> getRichResources(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all VO resources count.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @return count of vo resources\n-\t */\n-\tint getResourcesCount(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get count of all resources.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * \n-\t * @return count of all resources\n-\t */\n-\tint getResourcesCount(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n-\n-\n-\t/**\n-\t * Get all resources which have the member access on.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return list of resources which have the member acess on\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tList<Resource> getAllowedResources(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Get all resources where the member is assigned.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get all resources where the member and the service are assigned.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param service\n-\t * @return list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws ServiceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Member member, Service service) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ServiceNotExistsException;\n-\n-\t/**\n-\t * Get all rich resources where the member is assigned with facility property filled.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return list of rich resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get all rich resources where the service and the member are assigned with facility property filled.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param service\n-\t * @return list of rich resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws ServiceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession sess, Member member, Service service) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ServiceNotExistsException;\n-\n-\t/**\n-\t * Updates Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return returns updated Resource\n-\t * @throws ResourceNotExistsException\n-\t * @throws ResourceExistsException\n-\t * @throws PrivilegeException\n-\t * @throws InternalErrorException\n-\t */\n-\tResource updateResource(PerunSession perunSession, Resource resource) throws ResourceNotExistsException, InternalErrorException, PrivilegeException, ResourceExistsException;\n-\n-\t/**\n-\t * Create new Resource tag for the vo.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param vo\n-\t * @return new created resourceTag\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tResourceTag createResourceTag(PerunSession perunSession, ResourceTag resourceTag, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Update existing Resource tag.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @return updated ResourceTag\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceTagNotExistsException\n-\t * @throws VoNotExistsException\n-\t */\n-\tResourceTag updateResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, VoNotExistsException;\n-\n-\t/**\n-\t * Delete existing Resource tag.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceTagNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t */\n-\tvoid deleteResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, ResourceTagAlreadyAssignedException, ResourceTagNotExistsException, VoNotExistsException;\n-\n-\t/**\n-\t * Delete all ResourcesTags for specific VO.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t * @throws VoNotExistsException \u00a8\n-\t */\n-\tvoid deleteAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException,ResourceTagAlreadyAssignedException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Assign existing ResourceTag on existing Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceTagNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t */\n-\tvoid assignResourceTagToResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, ResourceNotExistsException, ResourceTagAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove specific ResourceTag from existing Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceTagNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws ResourceTagNotAssignedException\n-\t */\n-\tvoid removeResourceTagFromResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, ResourceNotExistsException, ResourceTagNotAssignedException;\n-\n-\t/**\n-\t * Remove all Resource tags for specific resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceNotExistsException\n-\t * @throws VoNotExistsException\n-\t */\n-\tvoid removeAllResourcesTagFromResource(PerunSession perunSession, Resource resource) throws InternalErrorException, PrivilegeException, VoNotExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get all resources in specific Vo (specific by resourceTag.getVoId) for existing resourceTag\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @return list of Resources\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws ResourceTagNotExistsException \u00a8\n-\t */\n-\tList<Resource> getAllResourcesByResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, VoNotExistsException, ResourceTagNotExistsException;\n-\n-\t/**\n-\t * Get all resourcesTags for existing Vo.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @return list of all resourcesTags for existing Vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException \u00a8\n-\t */\n-\tList<ResourceTag> getAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all resourcesTags for existing Resource\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of ResourcesTags\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<ResourceTag> getAllResourcesTagsForResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\n-\t/**\n-\t * Copy all attributes of the source resource to the destination resource.\n-\t * The attributes, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common attributes are replaced with the attributes from the source resource.\n-\t * The virtual attributes are not copied.\n-\t * @param sess\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tpublic void copyAttributes(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Copy all services of the source resource to the destination resource.\n-\t * The services, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common services are replaced with the services from source resource.\n-\t *\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tpublic void copyServices(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Copy all groups of the source resource to the destination resource.\n-\t * The groups, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common groups are replaced with the groups from source resource.\n-\t *\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tpublic void copyGroups(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Get list of all user administrators for supported role and given resource.\n-\t *\n-\t * If onlyDirectAdmins is true, return only direct users of the group for supported role.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return list of all user administrators of the given resource for supported role\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tList<User> getAdmins(PerunSession perunSession, Resource resource, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get list of all richUser administrators for the resource and supported role with specific attributes.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is \"true\", return only direct users of the group for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is \"true\", do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @param specificAttributes list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return list of RichUser administrators for the resource and supported role with attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tList<RichUser> getRichAdmins(PerunSession perunSession, Resource resource, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Returns list of resources, where the user is an admin.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of resources, where the user is an admin.\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<Resource> getResourcesWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Gets list of all group administrators of the Resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of Group that are admins in the resource.\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Group> getAdminGroups(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Add role resource admin to user for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException, AlreadyAdminException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Add role resource admin to group for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, AlreadyAdminException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Remove role resource admin from user for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException, UserNotAdminException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Remove role resource admin from group for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupNotAdminException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Set ban for member on resource.\n-\t *\n-\t * @param sess\n-\t * @param banOnResource the ban\n-\t * @return ban on resource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws BanAlreadyExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tBanOnResource setBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException, PrivilegeException, BanAlreadyExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get Ban for member on resource by it's id\n-\t *\n-\t * @param sess\n-\t * @param banId the id of ban\n-\t * @return resource ban by it's id\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tBanOnResource getBanById(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get ban by memberId and resource id\n-\t *\n-\t * @param sess\n-\t * @param memberId the id of member\n-\t * @param resourceId the id of resource\n-\t * @return specific ban for member on resource\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tBanOnResource getBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException, PrivilegeException, MemberNotExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get all bans for member on any resource.\n-\t *\n-\t * @param sess\n-\t * @param memberId the id of member\n-\t * @return list of bans for member on any resource\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tList<BanOnResource> getBansForMember(PerunSession sess, int memberId) throws InternalErrorException, MemberNotExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get all bans for members on the resource.\n-\t *\n-\t * @param sess\n-\t * @param resourceId the id of resource\n-\t * @return list of all members bans on the resource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tList<BanOnResource> getBansForResource(PerunSession sess, int resourceId) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Update existing ban (description, validation timestamp)\n-\t *\n-\t * @param sess\n-\t * @param banOnResource the specific ban\n-\t * @return updated ban\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws FacilityNotExistsException\n-\t * @throws MemberNotExistsException\n-\t * @throws BanNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tBanOnResource updateBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException, PrivilegeException, FacilityNotExistsException, MemberNotExistsException, BanNotExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Remove specific ban by it's id.\n-\t *\n-\t * @param sess\n-\t * @param banId the id of ban\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws BanNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid removeBan(PerunSession sess, int banId) throws InternalErrorException, PrivilegeException, BanNotExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Remove specific ban by memberId and resourceId.\n-\t *\n-\t * @param sess\n-\t * @param memberId the id of member\n-\t * @param resourceId the id of resource\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tvoid removeBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException, PrivilegeException, ResourceNotExistsException;\n+    /**\n+     * Searches for the Resource with specified id.\n+     *\n+     * @param perunSession\n+     * @param id\n+     * @return Resource with specified id\n+     * @throws ResourceNotExistsException\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    Resource getResourceById(PerunSession perunSession, int id) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+    /**\n+     * Search for the RichResource with specific id.\n+     *\n+     * @param perunSession\n+     * @param id\n+     * @return RichResource with specified id\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws ResourceNotExistsException\n+     */\n+    RichResource getRichResourceById(PerunSession perunSession, int id) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+    /**\n+     * Return resource by its name.\n+     *\n+     * @param sess\n+     * @param name\n+     * @param vo\n+     * @param facility\n+     * @return resource\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    Resource getResourceByName(PerunSession sess, Vo vo, Facility facility, String name) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, VoNotExistsException, FacilityNotExistsException;\n+\n+    /**\n+     * Inserts resource into DB.\n+     *\n+     * @param resource resource to create\n+     * @param vo       virtual organization\n+     * @param facility facility\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    Resource createResource(PerunSession perunSession, Resource resource, Vo vo, Facility facility) throws InternalErrorException, PrivilegeException, VoNotExistsException, FacilityNotExistsException, ResourceExistsException;\n+\n+    /**\n+     * Deletes resource by id.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws RelationExistsException\n+     * @throws ResourceAlreadyRemovedException          if there are 0 rows affected by deleting from DB\n+     * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group which is not affected by removing from DB\n+     * @throws FacilityNotExistsException               if facility of this resource not exists\n+     */\n+    void deleteResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, FacilityNotExistsException;\n+\n+    /**\n+     * Deletes all resources for the VO.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws RelationExistsException\n+     * @throws ResourceAlreadyRemovedException          if there are at least 1 resource not affected by deleting from DB\n+     * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group which is not affected by removing from DB\n+     */\n+    void deleteAllResources(PerunSession perunSession, Vo vo) throws InternalErrorException, VoNotExistsException, PrivilegeException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException;\n+\n+    /**\n+     * Get facility which belongs to the concrete resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return facility belonging to the resource\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    Facility getFacility(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Set Facility to resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param facility\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws FacilityNotExistsException\n+     */\n+    void setFacility(PerunSession perunSession, Resource resource, Facility facility) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, FacilityNotExistsException;\n+\n+    /**\n+     * Get Vo which is tied to specified resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return vo tied to specified resource\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    Vo getVo(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Returns all members assigned to the resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return list of members assigned to the resource\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<Member> getAllowedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Returns all users who is assigned with the resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @return list of users\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<User> getAllowedUsers(PerunSession sess, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Assign group to a resource. Check if attributes for each member form group are valid. Fill members' attributes with missing value.\n+     *\n+     * @param perunSession\n+     * @param group\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws GroupNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws WrongAttributeValueException\n+     * @throws GroupAlreadyAssignedException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void assignGroupToResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+    /**\n+     * Assign groups to a resource. Check if attributes for each member from all groups are valid. Fill members' attributes with missing values.\n+     *\n+     * @param perunSession\n+     * @param groups       list of resources\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws GroupAlreadyAssignedException\n+     */\n+    void assignGroupsToResource(PerunSession perunSession, List<Group> groups, Resource resource)\n+            throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+    /**\n+     * Assign group to the resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n+     *\n+     * @param perunSession\n+     * @param group        the group\n+     * @param resources    list of resources\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws GroupAlreadyAssignedException\n+     */\n+    void assignGroupToResources(PerunSession perunSession, Group group, List<Resource> resources)\n+            throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+    /**\n+     * Remove group from a resource.\n+     * After removing, check attributes and fix them if it is needed.\n+     *\n+     * @param perunSession\n+     * @param group\n+     * @param resource\n+     * @throws InternalErrorException                   Raise when group and resource not belong to the same VO or cant properly fix attributes of group's members after removing group from resource.\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws GroupNotDefinedOnResourceException       Group was never assigned to this resource\n+     * @throws GroupAlreadyRemovedFromResourceException if there are 0 rows affected by deleting from DB\n+     */\n+    void removeGroupFromResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+    /**\n+     * Remove groups from a resource.\n+     * After removing, check attributes and fix them if it is needed.\n+     *\n+     * @param perunSession\n+     * @param groups       list of groups\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws GroupNotDefinedOnResourceException\n+     * @throws GroupAlreadyRemovedFromResourceException\n+     */\n+    void removeGroupsFromResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+    /**\n+     * Remove group from the resources.\n+     * After removing, check attributes and fix them if it is needed.\n+     *\n+     * @param perunSession\n+     * @param groups       list of groups\n+     * @param resources    list of resources\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws GroupNotDefinedOnResourceException\n+     * @throws GroupAlreadyRemovedFromResourceException\n+     */\n+    void removeGroupFromResources(PerunSession perunSession, Group groups, List<Resource> resources) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+    /**\n+     * List all groups associated with the resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return list of assigned group\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<Group> getAssignedGroups(PerunSession perunSession, Resource resource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+    /**\n+     * List all resources associated with the group.\n+     *\n+     * @param perunSession\n+     * @param group\n+     * @return list of assigned resources\n+     * @throws InternalErrorException\n+     * @throws GroupNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<Resource> getAssignedResources(PerunSession perunSession, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException;\n+\n+    /**\n+     * List all rich resources associated with the group with facility property filled.\n+     *\n+     * @param perunSession\n+     * @param group\n+     * @return list of assigned rich resources\n+     * @throws InternalErrorException\n+     * @throws GroupNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<RichResource> getAssignedRichResources(PerunSession perunSession, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException;\n+\n+    /**\n+     * List all services associated with the resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return list of assigned resources\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<Service> getAssignedServices(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Returns all members assigned to the resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @return list of assigned members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    public List<Member> getAssignedMembers(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Returns all members assigned to the resource as RichMembers.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @return list of assigned rich members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    public List<RichMember> getAssignedRichMembers(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Assign service to resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param service\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ServiceNotExistsException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     * @throws ServiceAlreadyAssignedException\n+     */\n+    void assignService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServiceNotExistsException, ServiceAlreadyAssignedException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Assign all services from services package to resouce.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param servicesPackage\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     * @throws ServicesPackageNotExistsException\n+     */\n+    void assignServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServicesPackageNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Remove service from resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param service\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ServiceNotExistsException\n+     * @throws ServiceNotAssignedException\n+     */\n+    void removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServiceNotExistsException, ServiceNotAssignedException;\n+\n+    /**\n+     * Remove from resource all services from services package.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param servicesPackage\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ServicesPackageNotExistsException\n+     */\n+    void removeServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServicesPackageNotExistsException;\n+\n+    /**\n+     * Get all VO resources.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @return list of resources\n+     * @throws InternalErrorException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<Resource> getResources(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all VO rich resources with facility property filled.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @return list of rich resources\n+     * @throws InternalErrorException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<RichResource> getRichResources(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all VO resources count.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @return count of vo resources\n+     * @throws InternalErrorException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    int getResourcesCount(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get count of all resources.\n+     *\n+     * @param perunSession\n+     * @return count of all resources\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    int getResourcesCount(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n+\n+\n+    /**\n+     * Get all resources which have the member access on.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return list of resources which have the member acess on\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     */\n+    List<Resource> getAllowedResources(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Get all resources where the member is assigned.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<Resource> getAssignedResources(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Get all resources where the member and the service are assigned.\n+     *\n+     * @param sess\n+     * @param member\n+     * @param service\n+     * @return list of resources\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws ServiceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<Resource> getAssignedResources(PerunSession sess, Member member, Service service) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ServiceNotExistsException;\n+\n+    /**\n+     * Get all rich resources where the member is assigned with facility property filled.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return list of rich resources\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<RichResource> getAssignedRichResources(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Get all rich resources where the service and the member are assigned with facility property filled.\n+     *\n+     * @param sess\n+     * @param member\n+     * @param service\n+     * @return list of rich resources\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws ServiceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<RichResource> getAssignedRichResources(PerunSession sess, Member member, Service service) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ServiceNotExistsException;\n+\n+    /**\n+     * Updates Resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return returns updated Resource\n+     * @throws ResourceNotExistsException\n+     * @throws ResourceExistsException\n+     * @throws PrivilegeException\n+     * @throws InternalErrorException\n+     */\n+    Resource updateResource(PerunSession perunSession, Resource resource) throws ResourceNotExistsException, InternalErrorException, PrivilegeException, ResourceExistsException;\n+\n+    /**\n+     * Create new Resource tag for the vo.\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @param vo\n+     * @return new created resourceTag\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    ResourceTag createResourceTag(PerunSession perunSession, ResourceTag resourceTag, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Update existing Resource tag.\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @return updated ResourceTag\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws ResourceTagNotExistsException\n+     * @throws VoNotExistsException\n+     */\n+    ResourceTag updateResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, VoNotExistsException;\n+\n+    /**\n+     * Delete existing Resource tag.\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws ResourceTagNotExistsException\n+     * @throws VoNotExistsException\n+     * @throws ResourceTagAlreadyAssignedException\n+     */\n+    void deleteResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, ResourceTagAlreadyAssignedException, ResourceTagNotExistsException, VoNotExistsException;\n+\n+    /**\n+     * Delete all ResourcesTags for specific VO.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws ResourceTagAlreadyAssignedException\n+     * @throws VoNotExistsException                \u00a8\n+     */\n+    void deleteAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException, ResourceTagAlreadyAssignedException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Assign existing ResourceTag on existing Resource.\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws ResourceTagNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws ResourceTagAlreadyAssignedException\n+     */\n+    void assignResourceTagToResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, ResourceNotExistsException, ResourceTagAlreadyAssignedException;\n+\n+    /**\n+     * Remove specific ResourceTag from existing Resource.\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws ResourceTagNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws ResourceTagNotAssignedException\n+     */\n+    void removeResourceTagFromResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, ResourceNotExistsException, ResourceTagNotAssignedException;\n+\n+    /**\n+     * Remove all Resource tags for specific resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws ResourceNotExistsException\n+     * @throws VoNotExistsException\n+     */\n+    void removeAllResourcesTagFromResource(PerunSession perunSession, Resource resource) throws InternalErrorException, PrivilegeException, VoNotExistsException, ResourceNotExistsException;\n+\n+    /**\n+     * Get all resources in specific Vo (specific by resourceTag.getVoId) for existing resourceTag\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @return list of Resources\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws ResourceTagNotExistsException \u00a8\n+     */\n+    List<Resource> getAllResourcesByResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, VoNotExistsException, ResourceTagNotExistsException;\n+\n+    /**\n+     * Get all resourcesTags for existing Vo.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @return list of all resourcesTags for existing Vo\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException   \u00a8\n+     */\n+    List<ResourceTag> getAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all resourcesTags for existing Resource\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return list of ResourcesTags\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<ResourceTag> getAllResourcesTagsForResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+\n+    /**\n+     * Copy all attributes of the source resource to the destination resource.\n+     * The attributes, that are in the destination resource and aren't in the source resource, are retained.\n+     * The common attributes are replaced with the attributes from the source resource.\n+     * The virtual attributes are not copied.\n+     *\n+     * @param sess\n+     * @param sourceResource\n+     * @param destinationResource\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws ResourceNotExistsException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    public void copyAttributes(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Copy all services of the source resource to the destination resource.\n+     * The services, that are in the destination resource and aren't in the source resource, are retained.\n+     * The common services are replaced with the services from source resource.\n+     *\n+     * @param sourceResource\n+     * @param destinationResource\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    public void copyServices(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Copy all groups of the source resource to the destination resource.\n+     * The groups, that are in the destination resource and aren't in the source resource, are retained.\n+     * The common groups are replaced with the groups from source resource.\n+     *\n+     * @param sourceResource\n+     * @param destinationResource\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    public void copyGroups(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Get list of all user administrators for supported role and given resource.\n+     * <p>\n+     * If onlyDirectAdmins is true, return only direct users of the group for supported role.\n+     * <p>\n+     * Supported roles: ResourceAdmin, VOAdmin\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n+     * @return list of all user administrators of the given resource for supported role\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws ResourceNotExistsException\n+     */\n+    List<User> getAdmins(PerunSession perunSession, Resource resource, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+    /**\n+     * Get list of all richUser administrators for the resource and supported role with specific attributes.\n+     * <p>\n+     * Supported roles: ResourceAdmin, VOAdmin\n+     * <p>\n+     * If \"onlyDirectAdmins\" is \"true\", return only direct users of the group for supported role with specific attributes.\n+     * If \"allUserAttributes\" is \"true\", do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param specificAttributes list of specified attributes which are needed in object richUser\n+     * @param allUserAttributes  if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+     * @param onlyDirectAdmins   if true, get only direct user administrators (if false, get both direct and indirect)\n+     * @return list of RichUser administrators for the resource and supported role with attributes\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws UserNotExistsException\n+     * @throws ResourceNotExistsException\n+     */\n+    List<RichUser> getRichAdmins(PerunSession perunSession, Resource resource, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException, PrivilegeException, ResourceNotExistsException;\n+\n+    /**\n+     * Returns list of resources, where the user is an admin.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return list of resources, where the user is an admin.\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws UserNotExistsException\n+     */\n+    List<Resource> getResourcesWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Gets list of all group administrators of the Resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @return list of Group that are admins in the resource.\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<Group> getAdminGroups(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+    /**\n+     * Add role resource admin to user for the selected resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param user\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     * @throws AlreadyAdminException\n+     * @throws ResourceNotExistsException\n+     */\n+    void addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException, AlreadyAdminException, ResourceNotExistsException;\n+\n+    /**\n+     * Add role resource admin to group for the selected resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param group\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     * @throws AlreadyAdminException\n+     * @throws ResourceNotExistsException\n+     */\n+    void addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, AlreadyAdminException, ResourceNotExistsException;\n+\n+    /**\n+     * Remove role resource admin from user for the selected resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param user\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     * @throws AlreadyAdminException\n+     * @throws ResourceNotExistsException\n+     */\n+    void removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException, UserNotAdminException, ResourceNotExistsException;\n+\n+    /**\n+     * Remove role resource admin from group for the selected resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param group\n+     * @throws InternalErrorException\n+     * @throws GroupNotExistsException\n+     * @throws PrivilegeException\n+     * @throws GroupNotAdminException\n+     * @throws ResourceNotExistsException\n+     */\n+    void removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupNotAdminException, ResourceNotExistsException;\n+\n+    /**\n+     * Set ban for member on resource.\n+     *\n+     * @param sess\n+     * @param banOnResource the ban\n+     * @return ban on resource\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws BanAlreadyExistsException\n+     * @throws ResourceNotExistsException\n+     */\n+    BanOnResource setBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException, PrivilegeException, BanAlreadyExistsException, ResourceNotExistsException;\n+\n+    /**\n+     * Get Ban for member on resource by it's id\n+     *\n+     * @param sess\n+     * @param banId the id of ban\n+     * @return resource ban by it's id\n+     * @throws InternalErrorException\n+     * @throws BanNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    BanOnResource getBanById(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException, PrivilegeException, ResourceNotExistsException;\n+\n+    /**\n+     * Get ban by memberId and resource id\n+     *\n+     * @param sess\n+     * @param memberId   the id of member\n+     * @param resourceId the id of resource\n+     * @return specific ban for member on resource\n+     * @throws InternalErrorException\n+     * @throws BanNotExistsException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     * @throws ResourceNotExistsException\n+     */\n+    BanOnResource getBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException, PrivilegeException, MemberNotExistsException, ResourceNotExistsException;\n+\n+    /**\n+     * Get all bans for member on any resource.\n+     *\n+     * @param sess\n+     * @param memberId the id of member\n+     * @return list of bans for member on any resource\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws ResourceNotExistsException\n+     */\n+    List<BanOnResource> getBansForMember(PerunSession sess, int memberId) throws InternalErrorException, MemberNotExistsException, ResourceNotExistsException;\n+\n+    /**\n+     * Get all bans for members on the resource.\n+     *\n+     * @param sess\n+     * @param resourceId the id of resource\n+     * @return list of all members bans on the resource\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws ResourceNotExistsException\n+     */\n+    List<BanOnResource> getBansForResource(PerunSession sess, int resourceId) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+    /**\n+     * Update existing ban (description, validation timestamp)\n+     *\n+     * @param sess\n+     * @param banOnResource the specific ban\n+     * @return updated ban\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws FacilityNotExistsException\n+     * @throws MemberNotExistsException\n+     * @throws BanNotExistsException\n+     * @throws ResourceNotExistsException\n+     */\n+    BanOnResource updateBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException, PrivilegeException, FacilityNotExistsException, MemberNotExistsException, BanNotExistsException, ResourceNotExistsException;\n+\n+    /**\n+     * Remove specific ban by it's id.\n+     *\n+     * @param sess\n+     * @param banId the id of ban\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws BanNotExistsException\n+     * @throws ResourceNotExistsException\n+     */\n+    void removeBan(PerunSession sess, int banId) throws InternalErrorException, PrivilegeException, BanNotExistsException, ResourceNotExistsException;\n+\n+    /**\n+     * Remove specific ban by memberId and resourceId.\n+     *\n+     * @param sess\n+     * @param memberId   the id of member\n+     * @param resourceId the id of resource\n+     * @throws InternalErrorException\n+     * @throws BanNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    void removeBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException, PrivilegeException, ResourceNotExistsException;\n }\n",
            "diff_size": 919
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "508",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/422/ResourcesManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/422/ResourcesManager.java\nindex 8e044bb63bc..fd530c977cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/422/ResourcesManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/422/ResourcesManager.java\n@@ -1,7 +1,6 @@\n package cz.metacentrum.perun.core.api;\n \n import cz.metacentrum.perun.core.api.exceptions.*;\n-\n import java.util.List;\n \n /**\n@@ -10,924 +9,1059 @@ import java.util.List;\n  * @author  Slavek Licehammer\n  * @author\n  */\n+\n+\n public interface ResourcesManager {\n \n-\t/**\n-\t * Searches for the Resource with specified id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t *\n-\t * @return Resource with specified id\n-\t *\n-\t * @throws ResourceNotExistsException\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tResource getResourceById(PerunSession perunSession, int id) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Search for the RichResource with specific id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t *\n-\t * @return RichResource with specified id\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tRichResource getRichResourceById(PerunSession perunSession, int id) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Return resource by its name.\n-\t *\n-\t * @param sess\n-\t * @param name\n-\t * @param vo\n-\t * @param facility\n-\t * @return resource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tResource getResourceByName(PerunSession sess, Vo vo, Facility facility, String name) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, VoNotExistsException, FacilityNotExistsException;\n-\n-\t/**\n-\t * Inserts resource into DB.\n-\t *\n-\t * @param resource resource to create\n-\t * @param vo virtual organization\n-\t * @param facility facility\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tResource createResource(PerunSession perunSession, Resource resource, Vo vo, Facility facility) throws InternalErrorException, PrivilegeException, VoNotExistsException, FacilityNotExistsException, ResourceExistsException;\n-\n-\t/**\n-\t *  Deletes resource by id.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws RelationExistsException\n-\t * @throws ResourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group which is not affected by removing from DB\n-\t * @throws FacilityNotExistsException if facility of this resource not exists\n-\t */\n-\tvoid deleteResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, FacilityNotExistsException;\n-\n-\t/**\n-\t *  Deletes all resources for the VO.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws RelationExistsException\n-\t * @throws ResourceAlreadyRemovedException if there are at least 1 resource not affected by deleting from DB\n-\t * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group which is not affected by removing from DB\n-\t */\n-\tvoid deleteAllResources(PerunSession perunSession, Vo vo) throws InternalErrorException, VoNotExistsException, PrivilegeException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Get facility which belongs to the concrete resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return facility belonging to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tFacility getFacility(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Set Facility to resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param facility\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws FacilityNotExistsException\n-\t */\n-\tvoid setFacility(PerunSession perunSession, Resource resource, Facility facility) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, FacilityNotExistsException;\n-\n-\t/**\n-\t * Get Vo which is tied to specified resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return vo tied to specified resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tVo getVo(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns all members assigned to the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of members assigned to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> getAllowedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns all users who is assigned with the resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<User> getAllowedUsers(PerunSession sess, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Assign group to a resource. Check if attributes for each member form group are valid. Fill members' attributes with missing value.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t * @param resource\n-\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws WrongAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid assignGroupToResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Assign groups to a resource. Check if attributes for each member from all groups are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param perunSession\n-\t * @param groups list of resources\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t */\n-\tvoid assignGroupsToResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Assign group to the resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param perunSession\n-\t * @param group the group\n-\t * @param resources list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t */\n-\tvoid assignGroupToResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove group from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t * @param resource\n-\n-\t * @throws InternalErrorException Raise when group and resource not belong to the same VO or cant properly fix attributes of group's members after removing group from resource.\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotDefinedOnResourceException Group was never assigned to this resource\n-\t * @throws GroupAlreadyRemovedFromResourceException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeGroupFromResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Remove groups from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param groups list of groups\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws GroupNotDefinedOnResourceException\n-\t * @throws GroupAlreadyRemovedFromResourceException\n-\t */\n-\tvoid removeGroupsFromResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Remove group from the resources.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param groups list of groups\n-\t * @param resources list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws GroupNotDefinedOnResourceException\n-\t * @throws GroupAlreadyRemovedFromResourceException\n-\t */\n-\tvoid removeGroupFromResources(PerunSession perunSession, Group groups, List<Resource> resources) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * List all groups associated with the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @return list of assigned group\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Group> getAssignedGroups(PerunSession perunSession, Resource resource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * List all resources associated with the group.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t *\n-\t * @return list of assigned resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession perunSession, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * List all rich resources associated with the group with facility property filled.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t *\n-\t * @return list of assigned rich resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession perunSession, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * List all services associated with the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @return list of assigned resources\n-\t */\n-\tList<Service> getAssignedServices(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns all members assigned to the resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of assigned members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tpublic List<Member> getAssignedMembers(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException;\n-\t/**\n-\t * Returns all members assigned to the resource as RichMembers.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of assigned rich members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tpublic List<RichMember> getAssignedRichMembers(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Assign service to resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param service\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ServiceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ServiceAlreadyAssignedException\n-\t */\n-\tvoid assignService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServiceNotExistsException, ServiceAlreadyAssignedException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Assign all services from services package to resouce.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param servicesPackage\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tvoid assignServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServicesPackageNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Remove service from resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param service\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ServiceNotExistsException\n-\t * @throws ServiceNotAssignedException\n-\t */\n-\tvoid removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServiceNotExistsException, ServiceNotAssignedException;\n-\n-\t/**\n-\t * Remove from resource all services from services package.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param servicesPackage\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tvoid removeServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Get all VO resources.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @return list of resources\n-\t */\n-\tList<Resource> getResources(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all VO rich resources with facility property filled.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @return list of rich resources\n-\t */\n-\tList<RichResource> getRichResources(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all VO resources count.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @return count of vo resources\n-\t */\n-\tint getResourcesCount(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get count of all resources.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * \n-\t * @return count of all resources\n-\t */\n-\tint getResourcesCount(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n-\n-\n-\t/**\n-\t * Get all resources which have the member access on.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return list of resources which have the member acess on\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tList<Resource> getAllowedResources(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Get all resources where the member is assigned.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get all resources where the member and the service are assigned.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param service\n-\t * @return list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws ServiceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Member member, Service service) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ServiceNotExistsException;\n-\n-\t/**\n-\t * Get all rich resources where the member is assigned with facility property filled.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return list of rich resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get all rich resources where the service and the member are assigned with facility property filled.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param service\n-\t * @return list of rich resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws ServiceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession sess, Member member, Service service) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ServiceNotExistsException;\n-\n-\t/**\n-\t * Updates Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return returns updated Resource\n-\t * @throws ResourceNotExistsException\n-\t * @throws ResourceExistsException\n-\t * @throws PrivilegeException\n-\t * @throws InternalErrorException\n-\t */\n-\tResource updateResource(PerunSession perunSession, Resource resource) throws ResourceNotExistsException, InternalErrorException, PrivilegeException, ResourceExistsException;\n-\n-\t/**\n-\t * Create new Resource tag for the vo.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param vo\n-\t * @return new created resourceTag\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tResourceTag createResourceTag(PerunSession perunSession, ResourceTag resourceTag, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Update existing Resource tag.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @return updated ResourceTag\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceTagNotExistsException\n-\t * @throws VoNotExistsException\n-\t */\n-\tResourceTag updateResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, VoNotExistsException;\n-\n-\t/**\n-\t * Delete existing Resource tag.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceTagNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t */\n-\tvoid deleteResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, ResourceTagAlreadyAssignedException, ResourceTagNotExistsException, VoNotExistsException;\n-\n-\t/**\n-\t * Delete all ResourcesTags for specific VO.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t * @throws VoNotExistsException \u00a8\n-\t */\n-\tvoid deleteAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException,ResourceTagAlreadyAssignedException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Assign existing ResourceTag on existing Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceTagNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t */\n-\tvoid assignResourceTagToResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, ResourceNotExistsException, ResourceTagAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove specific ResourceTag from existing Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceTagNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws ResourceTagNotAssignedException\n-\t */\n-\tvoid removeResourceTagFromResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, ResourceNotExistsException, ResourceTagNotAssignedException;\n-\n-\t/**\n-\t * Remove all Resource tags for specific resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceNotExistsException\n-\t * @throws VoNotExistsException\n-\t */\n-\tvoid removeAllResourcesTagFromResource(PerunSession perunSession, Resource resource) throws InternalErrorException, PrivilegeException, VoNotExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get all resources in specific Vo (specific by resourceTag.getVoId) for existing resourceTag\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @return list of Resources\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws ResourceTagNotExistsException \u00a8\n-\t */\n-\tList<Resource> getAllResourcesByResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, VoNotExistsException, ResourceTagNotExistsException;\n-\n-\t/**\n-\t * Get all resourcesTags for existing Vo.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @return list of all resourcesTags for existing Vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException \u00a8\n-\t */\n-\tList<ResourceTag> getAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all resourcesTags for existing Resource\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of ResourcesTags\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<ResourceTag> getAllResourcesTagsForResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\n-\t/**\n-\t * Copy all attributes of the source resource to the destination resource.\n-\t * The attributes, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common attributes are replaced with the attributes from the source resource.\n-\t * The virtual attributes are not copied.\n-\t * @param sess\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceNotExistsException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tpublic void copyAttributes(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Copy all services of the source resource to the destination resource.\n-\t * The services, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common services are replaced with the services from source resource.\n-\t *\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tpublic void copyServices(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Copy all groups of the source resource to the destination resource.\n-\t * The groups, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common groups are replaced with the groups from source resource.\n-\t *\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tpublic void copyGroups(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Get list of all user administrators for supported role and given resource.\n-\t *\n-\t * If onlyDirectAdmins is true, return only direct users of the group for supported role.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return list of all user administrators of the given resource for supported role\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tList<User> getAdmins(PerunSession perunSession, Resource resource, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get list of all richUser administrators for the resource and supported role with specific attributes.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is \"true\", return only direct users of the group for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is \"true\", do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @param specificAttributes list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return list of RichUser administrators for the resource and supported role with attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tList<RichUser> getRichAdmins(PerunSession perunSession, Resource resource, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Returns list of resources, where the user is an admin.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of resources, where the user is an admin.\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<Resource> getResourcesWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Gets list of all group administrators of the Resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of Group that are admins in the resource.\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Group> getAdminGroups(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Add role resource admin to user for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException, AlreadyAdminException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Add role resource admin to group for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, AlreadyAdminException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Remove role resource admin from user for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException, UserNotAdminException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Remove role resource admin from group for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupNotAdminException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Set ban for member on resource.\n-\t *\n-\t * @param sess\n-\t * @param banOnResource the ban\n-\t * @return ban on resource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws BanAlreadyExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tBanOnResource setBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException, PrivilegeException, BanAlreadyExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get Ban for member on resource by it's id\n-\t *\n-\t * @param sess\n-\t * @param banId the id of ban\n-\t * @return resource ban by it's id\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tBanOnResource getBanById(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get ban by memberId and resource id\n-\t *\n-\t * @param sess\n-\t * @param memberId the id of member\n-\t * @param resourceId the id of resource\n-\t * @return specific ban for member on resource\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tBanOnResource getBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException, PrivilegeException, MemberNotExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get all bans for member on any resource.\n-\t *\n-\t * @param sess\n-\t * @param memberId the id of member\n-\t * @return list of bans for member on any resource\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tList<BanOnResource> getBansForMember(PerunSession sess, int memberId) throws InternalErrorException, MemberNotExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Get all bans for members on the resource.\n-\t *\n-\t * @param sess\n-\t * @param resourceId the id of resource\n-\t * @return list of all members bans on the resource\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tList<BanOnResource> getBansForResource(PerunSession sess, int resourceId) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Update existing ban (description, validation timestamp)\n-\t *\n-\t * @param sess\n-\t * @param banOnResource the specific ban\n-\t * @return updated ban\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws FacilityNotExistsException\n-\t * @throws MemberNotExistsException\n-\t * @throws BanNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tBanOnResource updateBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException, PrivilegeException, FacilityNotExistsException, MemberNotExistsException, BanNotExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Remove specific ban by it's id.\n-\t *\n-\t * @param sess\n-\t * @param banId the id of ban\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws BanNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid removeBan(PerunSession sess, int banId) throws InternalErrorException, PrivilegeException, BanNotExistsException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Remove specific ban by memberId and resourceId.\n-\t *\n-\t * @param sess\n-\t * @param memberId the id of member\n-\t * @param resourceId the id of resource\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tvoid removeBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException, PrivilegeException, ResourceNotExistsException;\n-}\n+ /**\n+  * Searches for the Resource with specified id.\n+  *\n+  * @param perunSession\n+  * @param id\n+  *\n+  * @return Resource with specified id\n+  *\n+  * @throws ResourceNotExistsException\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Resource getResourceById(PerunSession perunSession, int id) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+ /**\n+  * Search for the RichResource with specific id.\n+  *\n+  * @param perunSession\n+  * @param id\n+  *\n+  * @return RichResource with specified id\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ RichResource getRichResourceById(PerunSession perunSession, int id) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+ /**\n+  * Return resource by its name.\n+  *\n+  * @param sess\n+  * @param name\n+  * @param vo\n+  * @param facility\n+  * @return resource\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Resource getResourceByName(PerunSession sess, Vo vo, Facility facility, String name) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, VoNotExistsException, FacilityNotExistsException;\n+\n+ /**\n+  * Inserts resource into DB.\n+  *\n+  * @param resource resource to create\n+  * @param vo virtual organization\n+  * @param facility facility\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Resource createResource(PerunSession perunSession, Resource resource, Vo vo, Facility facility) throws InternalErrorException, PrivilegeException, VoNotExistsException, FacilityNotExistsException, ResourceExistsException;\n+\n+ /**\n+  *  Deletes resource by id.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  *\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws RelationExistsException\n+  * @throws ResourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+  * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group which is not affected by removing from DB\n+  * @throws FacilityNotExistsException if facility of this resource not exists\n+  */\n+\n+\n+ void deleteResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, FacilityNotExistsException;\n+\n+ /**\n+  *  Deletes all resources for the VO.\n+  *\n+  * @param perunSession\n+  * @param vo\n+  *\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws RelationExistsException\n+  * @throws ResourceAlreadyRemovedException if there are at least 1 resource not affected by deleting from DB\n+  * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group which is not affected by removing from DB\n+  */\n+\n+\n+ void deleteAllResources(PerunSession perunSession, Vo vo) throws InternalErrorException, VoNotExistsException, PrivilegeException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException;\n+\n+ /**\n+  * Get facility which belongs to the concrete resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return facility belonging to the resource\n+  *\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Facility getFacility(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Set Facility to resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param facility\n+  *\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws FacilityNotExistsException\n+  */\n+\n+\n+ void setFacility(PerunSession perunSession, Resource resource, Facility facility) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, FacilityNotExistsException;\n+\n+ /**\n+  * Get Vo which is tied to specified resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return vo tied to specified resource\n+  *\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Vo getVo(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Returns all members assigned to the resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return list of members assigned to the resource\n+  *\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Member> getAllowedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Returns all users who is assigned with the resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @return list of users\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<User> getAllowedUsers(PerunSession sess, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Assign group to a resource. Check if attributes for each member form group are valid. Fill members' attributes with missing value.\n+  *\n+  * @param perunSession\n+  * @param group\n+  * @param resource\n+\n+  * @throws InternalErrorException\n+  * @throws GroupNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws WrongAttributeValueException\n+  * @throws GroupAlreadyAssignedException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void assignGroupToResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+ /**\n+  * Assign groups to a resource. Check if attributes for each member from all groups are valid. Fill members' attributes with missing values.\n+  *\n+  * @param perunSession\n+  * @param groups list of resources\n+  * @param resource\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws GroupAlreadyAssignedException\n+  */\n+\n+\n+ void assignGroupsToResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+ /**\n+  * Assign group to the resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n+  *\n+  * @param perunSession\n+  * @param group the group\n+  * @param resources list of resources\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws GroupAlreadyAssignedException\n+  */\n+\n+\n+ void assignGroupToResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+ /**\n+  * Remove group from a resource.\n+  * After removing, check attributes and fix them if it is needed.\n+  *\n+  * @param perunSession\n+  * @param group\n+  * @param resource\n+\n+  * @throws InternalErrorException Raise when group and resource not belong to the same VO or cant properly fix attributes of group's members after removing group from resource.\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws GroupNotDefinedOnResourceException Group was never assigned to this resource\n+  * @throws GroupAlreadyRemovedFromResourceException if there are 0 rows affected by deleting from DB\n+  */\n+\n+\n+ void removeGroupFromResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+ /**\n+  * Remove groups from a resource.\n+  * After removing, check attributes and fix them if it is needed.\n+  *\n+  * @param perunSession\n+  * @param groups list of groups\n+  * @param resource\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws GroupNotDefinedOnResourceException\n+  * @throws GroupAlreadyRemovedFromResourceException\n+  */\n+\n+\n+ void removeGroupsFromResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+ /**\n+  * Remove group from the resources.\n+  * After removing, check attributes and fix them if it is needed.\n+  *\n+  * @param perunSession\n+  * @param groups list of groups\n+  * @param resources list of resources\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws GroupNotDefinedOnResourceException\n+  * @throws GroupAlreadyRemovedFromResourceException\n+  */\n+\n+\n+ void removeGroupFromResources(PerunSession perunSession, Group groups, List<Resource> resources) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ResourceNotExistsException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+ /**\n+  * List all groups associated with the resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  *\n+  * @return list of assigned group\n+  *\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Group> getAssignedGroups(PerunSession perunSession, Resource resource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+ /**\n+  * List all resources associated with the group.\n+  *\n+  * @param perunSession\n+  * @param group\n+  *\n+  * @return list of assigned resources\n+  *\n+  * @throws InternalErrorException\n+  * @throws GroupNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession perunSession, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException;\n+\n+ /**\n+  * List all rich resources associated with the group with facility property filled.\n+  *\n+  * @param perunSession\n+  * @param group\n+  *\n+  * @return list of assigned rich resources\n+  *\n+  * @throws InternalErrorException\n+  * @throws GroupNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<RichResource> getAssignedRichResources(PerunSession perunSession, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException;\n+\n+ /**\n+  * List all services associated with the resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  *\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @return list of assigned resources\n+  */\n+\n+\n+ List<Service> getAssignedServices(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Returns all members assigned to the resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @return list of assigned members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ public List<Member> getAssignedMembers(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException;\n+ /**\n+  * Returns all members assigned to the resource as RichMembers.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @return list of assigned rich members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ public List<RichMember> getAssignedRichMembers(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Assign service to resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param service\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ServiceNotExistsException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  * @throws ServiceAlreadyAssignedException\n+  */\n+\n+\n+ void assignService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServiceNotExistsException, ServiceAlreadyAssignedException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Assign all services from services package to resouce.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param servicesPackage\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  * @throws ServicesPackageNotExistsException\n+  */\n+\n+\n+ void assignServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServicesPackageNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Remove service from resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param service\n+  *\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ServiceNotExistsException\n+  * @throws ServiceNotAssignedException\n+  */\n+\n+\n+ void removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServiceNotExistsException, ServiceNotAssignedException;\n+\n+ /**\n+  * Remove from resource all services from services package.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param servicesPackage\n+  *\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ServicesPackageNotExistsException\n+  */\n+\n+\n+ void removeServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, ServicesPackageNotExistsException;\n+\n+ /**\n+  * Get all VO resources.\n+  *\n+  * @param perunSession\n+  * @param vo\n+  *\n+  * @throws InternalErrorException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @return list of resources\n+  */\n+\n+\n+ List<Resource> getResources(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all VO rich resources with facility property filled.\n+  *\n+  * @param perunSession\n+  * @param vo\n+  *\n+  * @throws InternalErrorException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @return list of rich resources\n+  */\n+\n+\n+ List<RichResource> getRichResources(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all VO resources count.\n+  *\n+  * @param perunSession\n+  * @param vo\n+  *\n+  * @throws InternalErrorException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @return count of vo resources\n+  */\n+\n+\n+ int getResourcesCount(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get count of all resources.\n+  *\n+  * @param perunSession\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * \n+  * @return count of all resources\n+  */\n+\n+\n+ int getResourcesCount(PerunSession perunSession) throws InternalErrorException, PrivilegeException;\n+\n+\n+ /**\n+  * Get all resources which have the member access on.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return list of resources which have the member acess on\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ List<Resource> getAllowedResources(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Get all resources where the member is assigned.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return\n+  *\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Get all resources where the member and the service are assigned.\n+  *\n+  * @param sess\n+  * @param member\n+  * @param service\n+  * @return list of resources\n+  *\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws ServiceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession sess, Member member, Service service) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ServiceNotExistsException;\n+\n+ /**\n+  * Get all rich resources where the member is assigned with facility property filled.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return list of rich resources\n+  *\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<RichResource> getAssignedRichResources(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Get all rich resources where the service and the member are assigned with facility property filled.\n+  *\n+  * @param sess\n+  * @param member\n+  * @param service\n+  * @return list of rich resources\n+  *\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws ServiceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<RichResource> getAssignedRichResources(PerunSession sess, Member member, Service service) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ServiceNotExistsException;\n+\n+ /**\n+  * Updates Resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return returns updated Resource\n+  * @throws ResourceNotExistsException\n+  * @throws ResourceExistsException\n+  * @throws PrivilegeException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Resource updateResource(PerunSession perunSession, Resource resource) throws ResourceNotExistsException, InternalErrorException, PrivilegeException, ResourceExistsException;\n+\n+ /**\n+  * Create new Resource tag for the vo.\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @param vo\n+  * @return new created resourceTag\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ ResourceTag createResourceTag(PerunSession perunSession, ResourceTag resourceTag, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Update existing Resource tag.\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @return updated ResourceTag\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws ResourceTagNotExistsException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ ResourceTag updateResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, VoNotExistsException;\n+\n+ /**\n+  * Delete existing Resource tag.\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws ResourceTagNotExistsException\n+  * @throws VoNotExistsException\n+  * @throws ResourceTagAlreadyAssignedException\n+  */\n+\n+\n+ void deleteResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, ResourceTagAlreadyAssignedException, ResourceTagNotExistsException, VoNotExistsException;\n+\n+ /**\n+  * Delete all ResourcesTags for specific VO.\n+  *\n+  * @param perunSession\n+  * @param vo\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws ResourceTagAlreadyAssignedException\n+  * @throws VoNotExistsException \u00a8\n+  */\n+\n+\n+ void deleteAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException, ResourceTagAlreadyAssignedException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Assign existing ResourceTag on existing Resource.\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @param resource\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws ResourceTagNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws ResourceTagAlreadyAssignedException\n+  */\n+\n+\n+ void assignResourceTagToResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, ResourceNotExistsException, ResourceTagAlreadyAssignedException;\n+\n+ /**\n+  * Remove specific ResourceTag from existing Resource.\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @param resource\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws ResourceTagNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws ResourceTagNotAssignedException\n+  */\n+\n+\n+ void removeResourceTagFromResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, PrivilegeException, ResourceTagNotExistsException, ResourceNotExistsException, ResourceTagNotAssignedException;\n+\n+ /**\n+  * Remove all Resource tags for specific resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws ResourceNotExistsException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ void removeAllResourcesTagFromResource(PerunSession perunSession, Resource resource) throws InternalErrorException, PrivilegeException, VoNotExistsException, ResourceNotExistsException;\n+\n+ /**\n+  * Get all resources in specific Vo (specific by resourceTag.getVoId) for existing resourceTag\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @return list of Resources\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws ResourceTagNotExistsException \u00a8\n+  */\n+\n+\n+ List<Resource> getAllResourcesByResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, PrivilegeException, VoNotExistsException, ResourceTagNotExistsException;\n+\n+ /**\n+  * Get all resourcesTags for existing Vo.\n+  *\n+  * @param perunSession\n+  * @param vo\n+  * @return list of all resourcesTags for existing Vo\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException \u00a8\n+  */\n+\n+\n+ List<ResourceTag> getAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all resourcesTags for existing Resource\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return list of ResourcesTags\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<ResourceTag> getAllResourcesTagsForResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+\n+ /**\n+  * Copy all attributes of the source resource to the destination resource.\n+  * The attributes, that are in the destination resource and aren't in the source resource, are retained.\n+  * The common attributes are replaced with the attributes from the source resource.\n+  * The virtual attributes are not copied.\n+  * @param sess\n+  * @param sourceResource\n+  * @param destinationResource\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws ResourceNotExistsException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ public void copyAttributes(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Copy all services of the source resource to the destination resource.\n+  * The services, that are in the destination resource and aren't in the source resource, are retained.\n+  * The common services are replaced with the services from source resource.\n+  *\n+  * @param sourceResource\n+  * @param destinationResource\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ public void copyServices(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Copy all groups of the source resource to the destination resource.\n+  * The groups, that are in the destination resource and aren't in the source resource, are retained.\n+  * The common groups are replaced with the groups from source resource.\n+  *\n+  * @param sourceResource\n+  * @param destinationResource\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ public void copyGroups(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, ResourceNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Get list of all user administrators for supported role and given resource.\n+  *\n+  * If onlyDirectAdmins is true, return only direct users of the group for supported role.\n+  *\n+  * Supported roles: ResourceAdmin, VOAdmin\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n+  *\n+  * @return list of all user administrators of the given resource for supported role\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ List<User> getAdmins(PerunSession perunSession, Resource resource, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+ /**\n+  * Get list of all richUser administrators for the resource and supported role with specific attributes.\n+  *\n+  * Supported roles: ResourceAdmin, VOAdmin\n+  *\n+  * If \"onlyDirectAdmins\" is \"true\", return only direct users of the group for supported role with specific attributes.\n+  * If \"allUserAttributes\" is \"true\", do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  *\n+  * @param specificAttributes list of specified attributes which are needed in object richUser\n+  * @param allUserAttributes if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+  * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n+  *\n+  * @return list of RichUser administrators for the resource and supported role with attributes\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws UserNotExistsException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ List<RichUser> getRichAdmins(PerunSession perunSession, Resource resource, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException, PrivilegeException, ResourceNotExistsException;\n+\n+ /**\n+  * Returns list of resources, where the user is an admin.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return list of resources, where the user is an admin.\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<Resource> getResourcesWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Gets list of all group administrators of the Resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @return list of Group that are admins in the resource.\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Group> getAdminGroups(PerunSession sess, Resource resource) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+ /**\n+  * Add role resource admin to user for the selected resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param user\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  * @throws AlreadyAdminException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ void addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException, AlreadyAdminException, ResourceNotExistsException;\n+\n+ /**\n+  * Add role resource admin to group for the selected resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param group\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  * @throws AlreadyAdminException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ void addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, AlreadyAdminException, ResourceNotExistsException;\n+\n+ /**\n+  * Remove role resource admin from user for the selected resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param user\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  * @throws AlreadyAdminException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ void removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotExistsException, PrivilegeException, UserNotAdminException, ResourceNotExistsException;\n+\n+ /**\n+  * Remove role resource admin from group for the selected resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param group\n+  * @throws InternalErrorException\n+  * @throws GroupNotExistsException\n+  * @throws PrivilegeException\n+  * @throws GroupNotAdminException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ void removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupNotAdminException, ResourceNotExistsException;\n+\n+ /**\n+  * Set ban for member on resource.\n+  *\n+  * @param sess\n+  * @param banOnResource the ban\n+  * @return ban on resource\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws BanAlreadyExistsException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ BanOnResource setBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException, PrivilegeException, BanAlreadyExistsException, ResourceNotExistsException;\n+\n+ /**\n+  * Get Ban for member on resource by it's id\n+  *\n+  * @param sess\n+  * @param banId the id of ban\n+  * @return resource ban by it's id\n+  * @throws InternalErrorException\n+  * @throws BanNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ BanOnResource getBanById(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException, PrivilegeException, ResourceNotExistsException;\n+\n+ /**\n+  * Get ban by memberId and resource id\n+  *\n+  * @param sess\n+  * @param memberId the id of member\n+  * @param resourceId the id of resource\n+  * @return specific ban for member on resource\n+  * @throws InternalErrorException\n+  * @throws BanNotExistsException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ BanOnResource getBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException, PrivilegeException, MemberNotExistsException, ResourceNotExistsException;\n+\n+ /**\n+  * Get all bans for member on any resource.\n+  *\n+  * @param sess\n+  * @param memberId the id of member\n+  * @return list of bans for member on any resource\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ List<BanOnResource> getBansForMember(PerunSession sess, int memberId) throws InternalErrorException, MemberNotExistsException, ResourceNotExistsException;\n+\n+ /**\n+  * Get all bans for members on the resource.\n+  *\n+  * @param sess\n+  * @param resourceId the id of resource\n+  * @return list of all members bans on the resource\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ List<BanOnResource> getBansForResource(PerunSession sess, int resourceId) throws InternalErrorException, PrivilegeException, ResourceNotExistsException;\n+\n+ /**\n+  * Update existing ban (description, validation timestamp)\n+  *\n+  * @param sess\n+  * @param banOnResource the specific ban\n+  * @return updated ban\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws FacilityNotExistsException\n+  * @throws MemberNotExistsException\n+  * @throws BanNotExistsException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ BanOnResource updateBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException, PrivilegeException, FacilityNotExistsException, MemberNotExistsException, BanNotExistsException, ResourceNotExistsException;\n+\n+ /**\n+  * Remove specific ban by it's id.\n+  *\n+  * @param sess\n+  * @param banId the id of ban\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws BanNotExistsException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ void removeBan(PerunSession sess, int banId) throws InternalErrorException, PrivilegeException, BanNotExistsException, ResourceNotExistsException;\n+\n+ /**\n+  * Remove specific ban by memberId and resourceId.\n+  *\n+  * @param sess\n+  * @param memberId the id of member\n+  * @param resourceId the id of resource\n+  * @throws InternalErrorException\n+  * @throws BanNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ void removeBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException, PrivilegeException, ResourceNotExistsException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 1055
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "447",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "447",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}