{
    "project_name": "moquette-io-moquette",
    "error_id": "22",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "warning",
                "message": "missing copyright header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "package io.moquette.persistence;\n\nimport io.moquette.broker.IRetainedRepository;\nimport io.moquette.broker.RetainedMessage;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/22/H2RetainedRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/22/H2RetainedRepository.java\nindex 53a64be399f..3376e56dc7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/22/H2RetainedRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/22/H2RetainedRepository.java\n@@ -14,42 +14,42 @@ import java.util.Map;\n \n public class H2RetainedRepository implements IRetainedRepository {\n \n-    private final MVMap<Topic, RetainedMessage> queueMap;\n-\n-    public H2RetainedRepository(MVStore mvStore) {\n-        this.queueMap = mvStore.openMap(\"retained_store\");\n-    }\n-\n-    @Override\n-    public void cleanRetained(Topic topic) {\n-        queueMap.remove(topic);\n-    }\n-\n-    @Override\n-    public void retain(Topic topic, MqttPublishMessage msg) {\n-        final ByteBuf payload = msg.content();\n-        byte[] rawPayload = new byte[payload.readableBytes()];\n-        payload.getBytes(0, rawPayload);\n-        final RetainedMessage toStore = new RetainedMessage(topic, msg.fixedHeader().qosLevel(), rawPayload);\n-        queueMap.put(topic, toStore);\n-    }\n-\n-    @Override\n-    public boolean isEmpty() {\n-        return queueMap.isEmpty();\n+  private final MVMap<Topic, RetainedMessage> queueMap;\n+\n+  public H2RetainedRepository(MVStore mvStore) {\n+    this.queueMap = mvStore.openMap(\"retained_store\");\n+  }\n+\n+  @Override\n+  public void cleanRetained(Topic topic) {\n+    queueMap.remove(topic);\n+  }\n+\n+  @Override\n+  public void retain(Topic topic, MqttPublishMessage msg) {\n+    final ByteBuf payload = msg.content();\n+    byte[] rawPayload = new byte[payload.readableBytes()];\n+    payload.getBytes(0, rawPayload);\n+    final RetainedMessage toStore = new RetainedMessage(topic, msg.fixedHeader().qosLevel(), rawPayload);\n+    queueMap.put(topic, toStore);\n+  }\n+\n+  @Override\n+  public boolean isEmpty() {\n+    return queueMap.isEmpty();\n+  }\n+\n+  @Override\n+  public List<RetainedMessage> retainedOnTopic(String topic) {\n+    final Topic searchTopic = new Topic(topic);\n+    final List<RetainedMessage> matchingMessages = new ArrayList<>();\n+    for (Map.Entry<Topic, RetainedMessage> entry : queueMap.entrySet()) {\n+      final Topic scanTopic = entry.getKey();\n+      if (searchTopic.match(scanTopic)) {\n+        matchingMessages.add(entry.getValue());\n+      }\n     }\n \n-    @Override\n-    public List<RetainedMessage> retainedOnTopic(String topic) {\n-        final Topic searchTopic = new Topic(topic);\n-        final List<RetainedMessage> matchingMessages = new ArrayList<>();\n-        for (Map.Entry<Topic, RetainedMessage> entry : queueMap.entrySet()) {\n-            final Topic scanTopic = entry.getKey();\n-            if (searchTopic.match(scanTopic)) {\n-                matchingMessages.add(entry.getValue());\n-            }\n-        }\n-\n-        return matchingMessages;\n-    }\n+    return matchingMessages;\n+  }\n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/22/H2RetainedRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/22/H2RetainedRepository.java\nindex 53a64be399f..e01686eb732 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/22/H2RetainedRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/22/H2RetainedRepository.java\n@@ -52,4 +52,4 @@ public class H2RetainedRepository implements IRetainedRepository {\n \n         return matchingMessages;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/22/H2RetainedRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/22/H2RetainedRepository.java\nindex 53a64be399f..03ca248b39b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/22/H2RetainedRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/22/H2RetainedRepository.java\n@@ -7,11 +7,11 @@ import io.netty.buffer.ByteBuf;\n import io.netty.handler.codec.mqtt.MqttPublishMessage;\n import org.h2.mvstore.MVMap;\n import org.h2.mvstore.MVStore;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n+\n public class H2RetainedRepository implements IRetainedRepository {\n \n     private final MVMap<Topic, RetainedMessage> queueMap;\n@@ -49,7 +49,6 @@ public class H2RetainedRepository implements IRetainedRepository {\n                 matchingMessages.add(entry.getValue());\n             }\n         }\n-\n         return matchingMessages;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "missing copyright header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}