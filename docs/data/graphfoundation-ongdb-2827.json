{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2827",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2827/SearchEnvelope.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2827/SearchEnvelope.java\nindex 11f83922db9..60140da76f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2827/SearchEnvelope.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2827/SearchEnvelope.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.gis.spatial.index.curves;\n \n import org.neo4j.gis.spatial.index.Envelope;\n@@ -26,109 +27,109 @@ import org.neo4j.gis.spatial.index.Envelope;\n  */\n class SearchEnvelope\n {\n-    private long[] min; // inclusive lower bounds\n-    private long[] max; // exclusive upper bounds\n-    private int nbrDim;\n+  private long[] min; // inclusive lower bounds\n+  private long[] max; // exclusive upper bounds\n+  private int nbrDim;\n \n-    SearchEnvelope( SpaceFillingCurve curve, Envelope referenceEnvelope )\n+  SearchEnvelope(SpaceFillingCurve curve, Envelope referenceEnvelope)\n+  {\n+    this.min = curve.getNormalizedCoord(referenceEnvelope.getMin());\n+    this.max = curve.getNormalizedCoord(referenceEnvelope.getMax());\n+    this.nbrDim = referenceEnvelope.getDimension();\n+    for (int i = 0; i < nbrDim; i++)\n     {\n-        this.min = curve.getNormalizedCoord( referenceEnvelope.getMin() );\n-        this.max = curve.getNormalizedCoord( referenceEnvelope.getMax() );\n-        this.nbrDim = referenceEnvelope.getDimension();\n-        for ( int i = 0; i < nbrDim; i++ )\n-        {\n-            // getNormalizedCoord gives inclusive bounds. Need to increment to make the upper exclusive.\n-            this.max[i] += 1;\n-        }\n+      // getNormalizedCoord gives inclusive bounds. Need to increment to make the upper exclusive.\n+      this.max[i] += 1;\n     }\n+  }\n \n-    private SearchEnvelope( long[] min, long[] max )\n-    {\n-        this.min = min;\n-        this.max = max;\n-        this.nbrDim = min.length;\n-    }\n+  private SearchEnvelope(long[] min, long[] max)\n+  {\n+    this.min = min;\n+    this.max = max;\n+    this.nbrDim = min.length;\n+  }\n \n-    SearchEnvelope( long min, long max, int nbrDim )\n-    {\n-        this.nbrDim = nbrDim;\n-        this.min = new long[nbrDim];\n-        this.max = new long[nbrDim];\n+  SearchEnvelope(long min, long max, int nbrDim)\n+  {\n+    this.nbrDim = nbrDim;\n+    this.min = new long[nbrDim];\n+    this.max = new long[nbrDim];\n \n-        for ( int dim = 0; dim < nbrDim; dim++ )\n-        {\n-            this.min[dim] = min;\n-            this.max[dim] = max;\n-        }\n+    for (int dim = 0; dim < nbrDim; dim++)\n+    {\n+      this.min[dim] = min;\n+      this.max[dim] = max;\n     }\n+  }\n \n-    SearchEnvelope quadrant( int[] quadNbrs )\n-    {\n-        long[] newMin = new long[nbrDim];\n-        long[] newMax = new long[nbrDim];\n+  SearchEnvelope quadrant(int[] quadNbrs)\n+  {\n+    long[] newMin = new long[nbrDim];\n+    long[] newMax = new long[nbrDim];\n \n-        for ( int dim = 0; dim < nbrDim; dim++ )\n-        {\n-            long extent = (max[dim] - min[dim]) / 2;\n-            newMin[dim] = this.min[dim] + quadNbrs[dim] * extent;\n-            newMax[dim] = this.min[dim] + (quadNbrs[dim] + 1) * extent;\n-        }\n-        return new SearchEnvelope( newMin, newMax );\n+    for (int dim = 0; dim < nbrDim; dim++)\n+    {\n+      long extent = (max[dim] - min[dim]) / 2;\n+      newMin[dim] = this.min[dim] + quadNbrs[dim] * extent;\n+      newMax[dim] = this.min[dim] + (quadNbrs[dim] + 1) * extent;\n     }\n+    return new SearchEnvelope(newMin, newMax);\n+  }\n \n-    boolean contains( long[] coord )\n+  boolean contains(long[] coord)\n+  {\n+    for (int dim = 0; dim < nbrDim; dim++)\n     {\n-        for ( int dim = 0; dim < nbrDim; dim++ )\n-        {\n-            if ( coord[dim] < min[dim] || coord[dim] >= max[dim] )\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      if (coord[dim] < min[dim] || coord[dim] >= max[dim])\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    boolean intersects( SearchEnvelope other )\n+  boolean intersects(SearchEnvelope other)\n+  {\n+    for (int dim = 0; dim < nbrDim; dim++)\n     {\n-        for ( int dim = 0; dim < nbrDim; dim++ )\n-        {\n-            if ( this.max[dim] <= other.min[dim] || other.max[dim] <= this.min[dim] )\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      if (this.max[dim] <= other.min[dim] || other.max[dim] <= this.min[dim])\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    /**\n-     * Calculates the faction of the overlapping area between {@code this} and {@code} other compared\n-     * to the area of {@code this}.\n-     *\n-     * Must only be called for intersecting envelopes\n-     */\n-    double fractionOf( SearchEnvelope other )\n+  /**\n+   * Calculates the faction of the overlapping area between {@code this} and {@code} other compared\n+   * to the area of {@code this}.\n+   * <p>\n+   * Must only be called for intersecting envelopes\n+   */\n+  double fractionOf(SearchEnvelope other)\n+  {\n+    double fraction = 1.0;\n+    for (int i = 0; i < nbrDim; i++)\n     {\n-        double fraction = 1.0;\n-        for ( int i = 0; i < nbrDim; i++ )\n-        {\n-            long min = Math.max( this.min[i], other.min[i] );\n-            long max = Math.min( this.max[i], other.max[i] );\n-            final double innerFraction = (double) (max - min) / (double) (other.max[i] - other.min[i]);\n-            fraction *= innerFraction;\n-        }\n-        return fraction;\n+      long min = Math.max(this.min[i], other.min[i]);\n+      long max = Math.min(this.max[i], other.max[i]);\n+      final double innerFraction = (double) (max - min) / (double) (other.max[i] - other.min[i]);\n+      fraction *= innerFraction;\n     }\n+    return fraction;\n+  }\n \n-    /**\n-     * The smallest possible envelope has unit area 1\n-     */\n-    public long getArea()\n+  /**\n+   * The smallest possible envelope has unit area 1\n+   */\n+  public long getArea()\n+  {\n+    long area = 1;\n+    for (int i = 0; i < nbrDim; i++)\n     {\n-        long area = 1;\n-        for ( int i = 0; i < nbrDim; i++ )\n-        {\n-            area *= max[i] - min[i];\n-        }\n-        return area;\n+      area *= max[i] - min[i];\n     }\n+    return area;\n+  }\n }\n",
            "diff_size": 111
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2827/SearchEnvelope.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2827/SearchEnvelope.java\nindex 11f83922db9..abf642fcf1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2827/SearchEnvelope.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2827/SearchEnvelope.java\n@@ -54,8 +54,7 @@ class SearchEnvelope\n         this.nbrDim = nbrDim;\n         this.min = new long[nbrDim];\n         this.max = new long[nbrDim];\n-\n-        for ( int dim = 0; dim < nbrDim; dim++ )\n+for ( int dim = 0; dim < nbrDim; dim++ )\n         {\n             this.min[dim] = min;\n             this.max[dim] = max;\n@@ -66,12 +65,11 @@ class SearchEnvelope\n     {\n         long[] newMin = new long[nbrDim];\n         long[] newMax = new long[nbrDim];\n-\n-        for ( int dim = 0; dim < nbrDim; dim++ )\n+for ( int dim = 0; dim < nbrDim; dim++ )\n         {\n             long extent = (max[dim] - min[dim]) / 2;\n             newMin[dim] = this.min[dim] + quadNbrs[dim] * extent;\n-            newMax[dim] = this.min[dim] + (quadNbrs[dim] + 1) * extent;\n+            newMax[dim] = this.min[dim] + (quadNbrs[dim] + 1 ) * extent;\n         }\n         return new SearchEnvelope( newMin, newMax );\n     }\n@@ -113,10 +111,11 @@ class SearchEnvelope\n         {\n             long min = Math.max( this.min[i], other.min[i] );\n             long max = Math.min( this.max[i], other.max[i] );\n-            final double innerFraction = (double) (max - min) / (double) (other.max[i] - other.min[i]);\n+            final double innerFraction = (double) ( max - min) / (double) (other.max[i] - other.min[i]);\n             fraction *= innerFraction;\n         }\n-        return fraction;\n+\n+return fraction;\n     }\n \n     /**\n@@ -129,6 +128,7 @@ class SearchEnvelope\n         {\n             area *= max[i] - min[i];\n         }\n-        return area;\n+\n+return area;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}