{
    "project_name": "neo4j-neo4j",
    "error_id": "2812",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "181",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "151",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2812/ExecutingQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2812/ExecutingQuery.java\nindex aa2b7d8b84f..e96e79c374d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2812/ExecutingQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2812/ExecutingQuery.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.query;\n \n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -52,7 +53,7 @@ import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n public class ExecutingQuery\n {\n     private static final AtomicLongFieldUpdater<ExecutingQuery> WAIT_TIME =\n-            newUpdater( ExecutingQuery.class, \"waitTimeNanos\" );\n+      newUpdater(ExecutingQuery.class, \"waitTimeNanos\");\n     private final long queryId;\n     private final LockTracer lockTracer = this::waitForLock;\n     private final String username;\n@@ -61,15 +62,17 @@ public class ExecutingQuery\n     private final MapValue rawQueryParameters;\n     private final long startTimeNanos;\n     private final long startTimestampMillis;\n-    private final Map<String,Object> transactionAnnotationData;\n+    private final Map<String, Object> transactionAnnotationData;\n     private final long threadExecutingTheQueryId;\n-    @SuppressWarnings( {\"unused\", \"FieldCanBeLocal\"} )\n+    @SuppressWarnings({\"unused\", \"FieldCanBeLocal\"})\n     private final String threadExecutingTheQueryName;\n     private final SystemNanoClock clock;\n     private final CpuClock cpuClock;\n     private final long cpuTimeNanosWhenQueryStarted;\n \n-    /** Uses write barrier of {@link #status}. */\n+    /**\n+     * Uses write barrier of {@link #status}.\n+     */\n     private CompilerInfo compilerInfo;\n     private long compilationCompletedNanos;\n     private String obfuscatedQueryText;\n@@ -79,20 +82,22 @@ public class ExecutingQuery\n     private volatile ExecutingQueryStatus status = SimpleState.parsing();\n     private volatile ExecutingQuery previousQuery;\n \n-    /** Updated through {@link #WAIT_TIME} */\n-    @SuppressWarnings( \"unused\" )\n+    /**\n+     * Updated through {@link #WAIT_TIME}\n+     */\n+    @SuppressWarnings(\"unused\")\n     private volatile long waitTimeNanos;\n \n     private OptionalMemoryTracker memoryTracker;\n     private TransactionBinding transactionBinding = TransactionBinding.EMPTY;\n \n     public ExecutingQuery(\n-            long queryId, ClientConnectionInfo clientConnection, String username, String queryText, MapValue queryParameters,\n-            Map<String,Object> transactionAnnotationData,\n-            long threadExecutingTheQueryId, String threadExecutingTheQueryName, SystemNanoClock clock, CpuClock cpuClock, boolean trackQueryAllocations )\n+      long queryId, ClientConnectionInfo clientConnection, String username, String queryText, MapValue queryParameters,\n+      Map<String, Object> transactionAnnotationData,\n+      long threadExecutingTheQueryId, String threadExecutingTheQueryName, SystemNanoClock clock, CpuClock cpuClock, boolean trackQueryAllocations)\n     {\n         // Capture timestamps first\n-        this.cpuTimeNanosWhenQueryStarted = cpuClock.cpuTimeNanos( threadExecutingTheQueryId );\n+        this.cpuTimeNanosWhenQueryStarted = cpuClock.cpuTimeNanos(threadExecutingTheQueryId);\n         this.startTimeNanos = clock.nanos();\n         this.startTimestampMillis = clock.millis();\n         // then continue with assigning fields\n@@ -111,24 +116,24 @@ public class ExecutingQuery\n \n     // NOTE: test/benchmarking constructor\n     public ExecutingQuery(\n-            long queryId, ClientConnectionInfo clientConnection, NamedDatabaseId namedDatabaseId, String username, String queryText, MapValue queryParameters,\n-            Map<String,Object> transactionAnnotationData, LongSupplier activeLockCount, LongSupplier hitsSupplier, LongSupplier faultsSupplier,\n-            long threadExecutingTheQueryId, String threadExecutingTheQueryName, SystemNanoClock clock, CpuClock cpuClock, boolean trackQueryAllocations )\n+      long queryId, ClientConnectionInfo clientConnection, NamedDatabaseId namedDatabaseId, String username, String queryText, MapValue queryParameters,\n+      Map<String, Object> transactionAnnotationData, LongSupplier activeLockCount, LongSupplier hitsSupplier, LongSupplier faultsSupplier,\n+      long threadExecutingTheQueryId, String threadExecutingTheQueryName, SystemNanoClock clock, CpuClock cpuClock, boolean trackQueryAllocations)\n     {\n         this(\n-                queryId,\n-                clientConnection,\n-                username,\n-                queryText,\n-                queryParameters,\n-                transactionAnnotationData,\n-                threadExecutingTheQueryId,\n-                threadExecutingTheQueryName,\n-                clock,\n-                cpuClock,\n-                trackQueryAllocations\n+          queryId,\n+          clientConnection,\n+          username,\n+          queryText,\n+          queryParameters,\n+          transactionAnnotationData,\n+          threadExecutingTheQueryId,\n+          threadExecutingTheQueryName,\n+          clock,\n+          cpuClock,\n+          trackQueryAllocations\n         );\n-        onTransactionBound( new TransactionBinding( namedDatabaseId, hitsSupplier, faultsSupplier, activeLockCount ) );\n+        onTransactionBound(new TransactionBinding(namedDatabaseId, hitsSupplier, faultsSupplier, activeLockCount));\n     }\n \n     public static class TransactionBinding\n@@ -139,10 +144,10 @@ public class ExecutingQuery\n         private final LongSupplier activeLockCount;\n         private final long initialActiveLocks;\n \n-        public TransactionBinding( NamedDatabaseId namedDatabaseId,\n-                                   LongSupplier hitsSupplier,\n-                                   LongSupplier faultsSupplier,\n-                                   LongSupplier activeLockCount )\n+        public TransactionBinding(NamedDatabaseId namedDatabaseId,\n+                                  LongSupplier hitsSupplier,\n+                                  LongSupplier faultsSupplier,\n+                                  LongSupplier activeLockCount)\n         {\n             this.namedDatabaseId = namedDatabaseId;\n             this.hitsSupplier = hitsSupplier;\n@@ -152,29 +157,28 @@ public class ExecutingQuery\n         }\n \n         public static final TransactionBinding EMPTY =\n-                new TransactionBinding( null, () -> 0L, () -> 0L, () -> 0L );\n+          new TransactionBinding(null, () -> 0L, () -> 0L, () -> 0L);\n     }\n \n     // update state\n \n-    public void onTransactionBound( TransactionBinding transactionBinding )\n+    public void onTransactionBound(TransactionBinding transactionBinding)\n     {\n         this.transactionBinding = transactionBinding;\n     }\n \n-    public void onObfuscatorReady( QueryObfuscator queryObfuscator )\n+    public void onObfuscatorReady(QueryObfuscator queryObfuscator)\n     {\n-        if ( status != SimpleState.parsing() ) // might get called multiple times due to caching and/or internal queries\n+        if (status != SimpleState.parsing()) // might get called multiple times due to caching and/or internal queries\n         {\n             return;\n         }\n \n         try\n         {\n-            obfuscatedQueryText = queryObfuscator.obfuscateText( rawQueryText );\n-            obfuscatedQueryParameters = queryObfuscator.obfuscateParameters( rawQueryParameters );\n-        }\n-        catch ( Exception ignore )\n+            obfuscatedQueryText = queryObfuscator.obfuscateText(rawQueryText);\n+            obfuscatedQueryParameters = queryObfuscator.obfuscateParameters(rawQueryParameters);\n+        } catch (Exception ignore)\n         {\n             obfuscatedQueryText = null;\n             obfuscatedQueryParameters = null;\n@@ -183,11 +187,11 @@ public class ExecutingQuery\n         this.status = SimpleState.planning();\n     }\n \n-    public void onCompilationCompleted( CompilerInfo compilerInfo,\n-                                        QueryExecutionType.QueryType queryType,\n-                                        Supplier<ExecutionPlanDescription> planDescriptionSupplier )\n+    public void onCompilationCompleted(CompilerInfo compilerInfo,\n+                                       QueryExecutionType.QueryType queryType,\n+                                       Supplier<ExecutionPlanDescription> planDescriptionSupplier)\n     {\n-        assertExpectedStatus( SimpleState.planning() );\n+        assertExpectedStatus(SimpleState.planning());\n \n         this.compilerInfo = compilerInfo;\n         this.compilationCompletedNanos = clock.nanos();\n@@ -196,9 +200,9 @@ public class ExecutingQuery\n         this.status = SimpleState.planned(); // write barrier - must be last\n     }\n \n-    public void onExecutionStarted( OptionalMemoryTracker memoryTracker )\n+    public void onExecutionStarted(OptionalMemoryTracker memoryTracker)\n     {\n-        assertExpectedStatus( SimpleState.planned() );\n+        assertExpectedStatus(SimpleState.planned());\n \n         this.memoryTracker = memoryTracker;\n         this.status = SimpleState.running(); // write barrier - must be last\n@@ -206,7 +210,7 @@ public class ExecutingQuery\n \n     public void onRetryAttempted()\n     {\n-        assertExpectedStatus( SimpleState.running() );\n+        assertExpectedStatus(SimpleState.running());\n \n         this.compilerInfo = null;\n         this.compilationCompletedNanos = 0;\n@@ -238,12 +242,12 @@ public class ExecutingQuery\n         {\n             status = this.status; // read barrier, must be first\n             waitTimeNanos = this.waitTimeNanos; // the reason for the retry loop: don't count the wait time twice\n-            cpuTimeNanos = cpuClock.cpuTimeNanos( threadExecutingTheQueryId );\n+            cpuTimeNanos = cpuClock.cpuTimeNanos(threadExecutingTheQueryId);\n             currentTimeNanos = clock.nanos(); // capture the time as close to the snapshot as possible\n             queryText = this.obfuscatedQueryText;\n             queryParameters = this.obfuscatedQueryParameters;\n         }\n-        while ( this.status != status );\n+        while (this.status != status);\n         // guarded by barrier - unused if status is planning, stable otherwise\n         long compilationCompletedNanos = this.compilationCompletedNanos;\n         // guarded by barrier - like compilationCompletedNanos\n@@ -252,42 +256,42 @@ public class ExecutingQuery\n         // activeLockCount is not atomic to capture, so we capture it after the most sensitive part.\n         long totalActiveLocks = transactionBinding.activeLockCount.getAsLong();\n         // just needs to be captured at some point...\n-        PageCounterValues pageCounters = new PageCounterValues( transactionBinding.hitsSupplier, transactionBinding.faultsSupplier );\n+        PageCounterValues pageCounters = new PageCounterValues(transactionBinding.hitsSupplier, transactionBinding.faultsSupplier);\n \n         // - at this point we are done capturing the \"live\" state, and can start computing the snapshot -\n         long compilationTimeNanos = (status.isParsingOrPlanning() ? currentTimeNanos : compilationCompletedNanos) - startTimeNanos;\n         long elapsedTimeNanos = currentTimeNanos - startTimeNanos;\n         cpuTimeNanos -= cpuTimeNanosWhenQueryStarted;\n-        waitTimeNanos += status.waitTimeNanos( currentTimeNanos );\n+        waitTimeNanos += status.waitTimeNanos(currentTimeNanos);\n \n         return new QuerySnapshot(\n-                this,\n-                planner,\n-                pageCounters,\n-                NANOSECONDS.toMicros( compilationTimeNanos ),\n-                NANOSECONDS.toMicros( elapsedTimeNanos ),\n-                cpuTimeNanos == 0 && cpuTimeNanosWhenQueryStarted == -1 ? -1 : NANOSECONDS.toMicros( cpuTimeNanos ),\n-                NANOSECONDS.toMicros( waitTimeNanos ),\n-                status.name(),\n-                status.toMap( currentTimeNanos ),\n-                waitingOnLocks,\n-                totalActiveLocks - transactionBinding.initialActiveLocks,\n-                memoryTracker.totalAllocatedMemory(),\n-                Optional.ofNullable( queryText ),\n-                Optional.ofNullable( queryParameters )\n+          this,\n+          planner,\n+          pageCounters,\n+          NANOSECONDS.toMicros(compilationTimeNanos),\n+          NANOSECONDS.toMicros(elapsedTimeNanos),\n+          cpuTimeNanos == 0 && cpuTimeNanosWhenQueryStarted == -1 ? -1 : NANOSECONDS.toMicros(cpuTimeNanos),\n+          NANOSECONDS.toMicros(waitTimeNanos),\n+          status.name(),\n+          status.toMap(currentTimeNanos),\n+          waitingOnLocks,\n+          totalActiveLocks - transactionBinding.initialActiveLocks,\n+          memoryTracker.totalAllocatedMemory(),\n+          Optional.ofNullable(queryText),\n+          Optional.ofNullable(queryParameters)\n         );\n     }\n \n     // basic methods\n \n     @Override\n-    public boolean equals( Object o )\n+    public boolean equals(Object o)\n     {\n-        if ( this == o )\n+        if (this == o)\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+        if (o == null || getClass() != o.getClass())\n         {\n             return false;\n         }\n@@ -306,7 +310,7 @@ public class ExecutingQuery\n     @Override\n     public String toString()\n     {\n-        return ToStringBuilder.reflectionToString( this );\n+        return ToStringBuilder.reflectionToString(this);\n     }\n \n     // access stable state\n@@ -318,7 +322,7 @@ public class ExecutingQuery\n \n     public String id()\n     {\n-        return Long.toString( internalQueryId() );\n+        return Long.toString(internalQueryId());\n     }\n \n     public String username()\n@@ -343,7 +347,7 @@ public class ExecutingQuery\n \n     public Optional<NamedDatabaseId> databaseId()\n     {\n-        return Optional.ofNullable( transactionBinding.namedDatabaseId );\n+        return Optional.ofNullable(transactionBinding.namedDatabaseId);\n     }\n \n     public long startTimestampMillis()\n@@ -356,7 +360,7 @@ public class ExecutingQuery\n         return clock.nanos() - startTimeNanos;\n     }\n \n-    public Map<String,Object> transactionAnnotationData()\n+    public Map<String, Object> transactionAnnotationData()\n     {\n         return transactionAnnotationData;\n     }\n@@ -366,9 +370,9 @@ public class ExecutingQuery\n         return waitTimeNanos;\n     }\n \n-    public long totalWaitingTimeNanos( long currentTimeNanos )\n+    public long totalWaitingTimeNanos(long currentTimeNanos)\n     {\n-        return waitTimeNanos + status.waitTimeNanos( currentTimeNanos );\n+        return waitTimeNanos + status.waitTimeNanos(currentTimeNanos);\n     }\n \n     ClientConnectionInfo clientConnection()\n@@ -376,35 +380,35 @@ public class ExecutingQuery\n         return clientConnection;\n     }\n \n-    private LockWaitEvent waitForLock( LockType lockType, ResourceType resourceType, long userTransactionId, long[] resourceIds )\n+    private LockWaitEvent waitForLock(LockType lockType, ResourceType resourceType, long userTransactionId, long[] resourceIds)\n     {\n         WaitingOnLockEvent event = new WaitingOnLockEvent(\n-                lockType,\n-                resourceType,\n-                userTransactionId,\n-                resourceIds,\n-                this,\n-                clock.nanos(),\n-                status );\n+          lockType,\n+          resourceType,\n+          userTransactionId,\n+          resourceIds,\n+          this,\n+          clock.nanos(),\n+          status);\n         status = event;\n         return event;\n     }\n \n-    void doneWaitingOnLock( WaitingOnLockEvent waiting )\n+    void doneWaitingOnLock(WaitingOnLockEvent waiting)\n     {\n-        if ( status != waiting )\n+        if (status != waiting)\n         {\n             return; // already closed\n         }\n-        WAIT_TIME.addAndGet( this, waiting.waitTimeNanos( clock.nanos() ) );\n+        WAIT_TIME.addAndGet(this, waiting.waitTimeNanos(clock.nanos()));\n         status = waiting.previousStatus();\n     }\n \n-    private void assertExpectedStatus( ExecutingQueryStatus expectedStatus )\n+    private void assertExpectedStatus(ExecutingQueryStatus expectedStatus)\n     {\n-        if ( status != expectedStatus )\n+        if (status != expectedStatus)\n         {\n-            throw new IllegalStateException( String.format( \"Expected query in '%s' state, actual state is '%s'.\", expectedStatus.name(), status.name() ) );\n+            throw new IllegalStateException(String.format(\"Expected query in '%s' state, actual state is '%s'.\", expectedStatus.name(), status.name()));\n         }\n     }\n \n@@ -413,7 +417,7 @@ public class ExecutingQuery\n         return previousQuery;\n     }\n \n-    public void setPreviousQuery( ExecutingQuery previousQuery )\n+    public void setPreviousQuery(ExecutingQuery previousQuery)\n     {\n         this.previousQuery = previousQuery;\n     }\n",
            "diff_size": 91
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2812/ExecutingQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2812/ExecutingQuery.java\nindex aa2b7d8b84f..43486cd9a16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2812/ExecutingQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2812/ExecutingQuery.java\n@@ -139,8 +139,7 @@ public class ExecutingQuery\n         private final LongSupplier activeLockCount;\n         private final long initialActiveLocks;\n \n-        public TransactionBinding( NamedDatabaseId namedDatabaseId,\n-                                   LongSupplier hitsSupplier,\n+        public TransactionBinding( NamedDatabaseId namedDatabaseId, LongSupplier hitsSupplier,\n                                    LongSupplier faultsSupplier,\n                                    LongSupplier activeLockCount )\n         {\n@@ -183,10 +182,9 @@ public class ExecutingQuery\n         this.status = SimpleState.planning();\n     }\n \n-    public void onCompilationCompleted( CompilerInfo compilerInfo,\n-                                        QueryExecutionType.QueryType queryType,\n+    public void onCompilationCompleted( CompilerInfo compilerInfo, QueryExecutionType.QueryType queryType,\n                                         Supplier<ExecutionPlanDescription> planDescriptionSupplier )\n-    {\n+{\n         assertExpectedStatus( SimpleState.planning() );\n \n         this.compilerInfo = compilerInfo;\n@@ -417,4 +415,4 @@ public class ExecutingQuery\n     {\n         this.previousQuery = previousQuery;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}