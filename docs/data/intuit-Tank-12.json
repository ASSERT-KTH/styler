{
    "project_name": "intuit-Tank",
    "error_id": "12",
    "information": {
        "errors": [
            {
                "line": "199",
                "column": "56",
                "severity": "warning",
                "message": "'?' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    }\n\n    public String getCollectionFilterString(Collection<? extends Object> c) {\n        StringBuilder sb = new StringBuilder();\n        if (c != null) {\n            for (Object o : c) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/12/PreferencesBean.java\nindex eee0399c3f3..6b23345557a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/12/PreferencesBean.java\n@@ -196,7 +196,7 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n         timestampFormat = FastDateFormat.getInstance(preferredTimeStampFormat);\n     }\n \n-    public String getCollectionFilterString(Collection<? extends Object> c) {\n+    public String getCollectionFilterString(Collection< ? extends Object> c) {\n         StringBuilder sb = new StringBuilder();\n         if (c != null) {\n             for (Object o : c) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "196",
                    "column": "54",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/12/PreferencesBean.java\nindex eee0399c3f3..b27a44de905 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/12/PreferencesBean.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank;\n \n /*\n@@ -39,204 +40,198 @@ import com.intuit.tank.project.ColumnPreferences.Visibility;\n \n /**\n  * PreferencesBean\n- * \n+ *\n  * @author dangleton\n- * \n  */\n @SessionScoped\n @Named\n public class PreferencesBean implements Serializable, PreferencesChangedListener {\n \n-    private static final long serialVersionUID = 1L;\n-    private String preferredDateTimeFormat = \"MM/dd/yy HH:mm\";\n-    private String preferredTimeStampFormat = \"yyyy-MM-dd_HH-mm-ss\";\n-\n-    private FastDateFormat timestampFormat;\n-\n-    private FastDateFormat dateTimeFotmat;\n-    \n-\n-    private Preferences preferences;\n-\n-    private int screenWidth = 1200;\n-    private int screenHeight = 600;\n-\n-    /**\n-     * @return the preferences\n-     */\n-    public Preferences getPreferences() {\n-        return preferences;\n-    }\n-\n-    /**\n-     * \n-     * @param user\n-     */\n-    public void observeLogin(@Observes(notifyObserver = Reception.IF_EXISTS) @Deleted Preferences preferences) {\n-        init(preferences.getCreator());\n-    }\n-\n-    public void init(String owner) {\n-        preferences = new PreferencesDao().getForOwner(owner);\n-        validatePrefs(owner);\n-    }\n-\n-    public void setScreenSizes(String width, String height) {\n-        if (NumberUtils.isDigits(width)) {\n-            this.screenWidth = NumberUtils.toInt(width) - 20;\n-        }\n-        if (NumberUtils.isDigits(height)) {\n-            this.screenHeight = NumberUtils.toInt(height) - 20;\n-        }\n-    }\n-\n-    /**\n-     * @return the screenWidth\n-     */\n-    public int getScreenWidth() {\n-        return screenWidth;\n-    }\n-\n-    /**\n-     * @param screenWidth\n-     *            the screenWidth to set\n-     */\n-    public void setScreenWidth(int screenWidth) {\n-        this.screenWidth = screenWidth;\n-    }\n-\n-    /**\n-     * @return the screenHeight\n-     */\n-    public int getScreenHeight() {\n-        return screenHeight;\n-    }\n-\n-    /**\n-     * @param screenHeight\n-     *            the screenHeight to set\n-     */\n-    public void setScreenHeight(int screenHeight) {\n-        this.screenHeight = screenHeight;\n-    }\n-\n-    /**\n-     * @param owner\n-     * @return\n-     */\n-    private void validatePrefs(String owner) {\n-        if (preferences == null) {\n-            preferences = new Preferences();\n-            preferences.setCreator(owner);\n-        }\n-        boolean needsSave = false;\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getProjectTableColumns(),\n-                DefaultTableColumnUtil.PROJECT_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getDatafilesTableColumns(),\n-                DefaultTableColumnUtil.DATA_FILES_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getJobsTableColumns(),\n-                DefaultTableColumnUtil.JOBS_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptsTableColumns(),\n-                DefaultTableColumnUtil.SCRIPTS_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptStepTableColumns(),\n-                DefaultTableColumnUtil.SCRIPT_STEPS_COL_PREFS);\n-        if (needsSave) {\n-            preferences = new PreferencesDao().saveOrUpdate(preferences);\n-        }\n-\n-    }\n-\n-    private boolean checkPrefs(String owner, List<ColumnPreferences> existingPrefs,\n-            List<ColumnPreferences> defaultPreferences) {\n-        boolean ret = false;\n-        for (int i = 0; i < defaultPreferences.size(); i++) {\n-            ColumnPreferences p = defaultPreferences.get(i);\n-            if (!existingPrefs.contains(p)) {\n-                ColumnPreferences pref = new ColumnPreferences(p.getColName(), p.getDisplayName(), p.getSize(),\n-                        p.isVisible() ? Visibility.VISIBLE : Visibility.HIDDEN, p.isHideable() ? Hidability.HIDABLE\n-                                : Hidability.NON_HIDABLE);\n-                pref.setCreator(owner);\n-                existingPrefs.add(i, pref);\n-                ret = true;\n-            }\n-        }\n-        return ret;\n-    }\n-\n-    /**\n-     * @{inheritDoc\n-     */\n-    @Override\n-    public void prefsChanged() {\n-        if (preferences != null) {\n-            new PreferencesDao().saveOrUpdate(preferences);\n+  private static final long serialVersionUID = 1L;\n+  private String preferredDateTimeFormat = \"MM/dd/yy HH:mm\";\n+  private String preferredTimeStampFormat = \"yyyy-MM-dd_HH-mm-ss\";\n+\n+  private FastDateFormat timestampFormat;\n+\n+  private FastDateFormat dateTimeFotmat;\n+\n+\n+  private Preferences preferences;\n+\n+  private int screenWidth = 1200;\n+  private int screenHeight = 600;\n+\n+  /**\n+   * @return the preferences\n+   */\n+  public Preferences getPreferences() {\n+    return preferences;\n+  }\n+\n+  /**\n+   * @param user\n+   */\n+  public void observeLogin(@Observes(notifyObserver = Reception.IF_EXISTS) @Deleted Preferences preferences) {\n+    init(preferences.getCreator());\n+  }\n+\n+  public void init(String owner) {\n+    preferences = new PreferencesDao().getForOwner(owner);\n+    validatePrefs(owner);\n+  }\n+\n+  public void setScreenSizes(String width, String height) {\n+    if (NumberUtils.isDigits(width)) {\n+      this.screenWidth = NumberUtils.toInt(width) - 20;\n+    }\n+    if (NumberUtils.isDigits(height)) {\n+      this.screenHeight = NumberUtils.toInt(height) - 20;\n+    }\n+  }\n+\n+  /**\n+   * @return the screenWidth\n+   */\n+  public int getScreenWidth() {\n+    return screenWidth;\n+  }\n+\n+  /**\n+   * @param screenWidth the screenWidth to set\n+   */\n+  public void setScreenWidth(int screenWidth) {\n+    this.screenWidth = screenWidth;\n+  }\n+\n+  /**\n+   * @return the screenHeight\n+   */\n+  public int getScreenHeight() {\n+    return screenHeight;\n+  }\n+\n+  /**\n+   * @param screenHeight the screenHeight to set\n+   */\n+  public void setScreenHeight(int screenHeight) {\n+    this.screenHeight = screenHeight;\n+  }\n+\n+  /**\n+   * @param owner\n+   * @return\n+   */\n+  private void validatePrefs(String owner) {\n+    if (preferences == null) {\n+      preferences = new Preferences();\n+      preferences.setCreator(owner);\n+    }\n+    boolean needsSave = false;\n+    needsSave |= checkPrefs(preferences.getCreator(), preferences.getProjectTableColumns(),\n+      DefaultTableColumnUtil.PROJECT_COL_PREFS);\n+    needsSave |= checkPrefs(preferences.getCreator(), preferences.getDatafilesTableColumns(),\n+      DefaultTableColumnUtil.DATA_FILES_COL_PREFS);\n+    needsSave |= checkPrefs(preferences.getCreator(), preferences.getJobsTableColumns(),\n+      DefaultTableColumnUtil.JOBS_COL_PREFS);\n+    needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptsTableColumns(),\n+      DefaultTableColumnUtil.SCRIPTS_COL_PREFS);\n+    needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptStepTableColumns(),\n+      DefaultTableColumnUtil.SCRIPT_STEPS_COL_PREFS);\n+    if (needsSave) {\n+      preferences = new PreferencesDao().saveOrUpdate(preferences);\n+    }\n+\n+  }\n+\n+  private boolean checkPrefs(String owner, List<ColumnPreferences> existingPrefs,\n+                             List<ColumnPreferences> defaultPreferences) {\n+    boolean ret = false;\n+    for (int i = 0; i < defaultPreferences.size(); i++) {\n+      ColumnPreferences p = defaultPreferences.get(i);\n+      if (!existingPrefs.contains(p)) {\n+        ColumnPreferences pref = new ColumnPreferences(p.getColName(), p.getDisplayName(), p.getSize(),\n+          p.isVisible() ? Visibility.VISIBLE : Visibility.HIDDEN, p.isHideable() ? Hidability.HIDABLE\n+          : Hidability.NON_HIDABLE);\n+        pref.setCreator(owner);\n+        existingPrefs.add(i, pref);\n+        ret = true;\n+      }\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Override\n+  public void prefsChanged() {\n+    if (preferences != null) {\n+      new PreferencesDao().saveOrUpdate(preferences);\n+    }\n+\n+  }\n+\n+  /**\n+   * Format the date according to the user's preferences\n+   *\n+   * @param date\n+   * @return\n+   */\n+  public String formatDate(Date date) {\n+    String ret = null;\n+    if (date != null) {\n+      ret = dateTimeFotmat.format(date);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   *\n+   */\n+  public PreferencesBean() {\n+    dateTimeFotmat = FastDateFormat.getInstance(preferredDateTimeFormat);\n+    timestampFormat = FastDateFormat.getInstance(preferredTimeStampFormat);\n+  }\n+\n+  public String getCollectionFilterString(Collection<? extends Object> c) {\n+    StringBuilder sb = new StringBuilder();\n+    if (c != null) {\n+      for (Object o : c) {\n+        if (sb.length() != 0) {\n+          sb.append(\", \");\n         }\n-\n-    }\n-\n-    /**\n-     * Format the date according to the user's preferences\n-     * \n-     * @param date\n-     * @return\n-     */\n-    public String formatDate(Date date) {\n-        String ret = null;\n-        if (date != null) {\n-            ret = dateTimeFotmat.format(date);\n-        }\n-        return ret;\n-    }\n-\n-    /**\n-     * \n-     */\n-    public PreferencesBean() {\n-        dateTimeFotmat = FastDateFormat.getInstance(preferredDateTimeFormat);\n-        timestampFormat = FastDateFormat.getInstance(preferredTimeStampFormat);\n-    }\n-\n-    public String getCollectionFilterString(Collection<? extends Object> c) {\n-        StringBuilder sb = new StringBuilder();\n-        if (c != null) {\n-            for (Object o : c) {\n-                if (sb.length() != 0) {\n-                    sb.append(\", \");\n-                }\n-                sb.append(o.toString());\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    /**\n-     * @return the timestampFormat\n-     */\n-    public FastDateFormat getTimestampFormat() {\n-        return timestampFormat;\n-    }\n-\n-    /**\n-     * @param timestampFormat\n-     *            the timestampFormat to set\n-     */\n-    public void setTimestampFormat(FastDateFormat timestampFormat) {\n-        this.timestampFormat = timestampFormat;\n-    }\n-\n-    /**\n-     * @return the dateTimeFotmat\n-     */\n-    public FastDateFormat getDateTimeFotmat() {\n-        return dateTimeFotmat;\n-    }\n-\n-    /**\n-     * @param dateTimeFotmat\n-     *            the dateTimeFotmat to set\n-     */\n-    public void setDateTimeFotmat(FastDateFormat dateTimeFotmat) {\n-        this.dateTimeFotmat = dateTimeFotmat;\n-    }\n+        sb.append(o.toString());\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * @return the timestampFormat\n+   */\n+  public FastDateFormat getTimestampFormat() {\n+    return timestampFormat;\n+  }\n+\n+  /**\n+   * @param timestampFormat the timestampFormat to set\n+   */\n+  public void setTimestampFormat(FastDateFormat timestampFormat) {\n+    this.timestampFormat = timestampFormat;\n+  }\n+\n+  /**\n+   * @return the dateTimeFotmat\n+   */\n+  public FastDateFormat getDateTimeFotmat() {\n+    return dateTimeFotmat;\n+  }\n+\n+  /**\n+   * @param dateTimeFotmat the dateTimeFotmat to set\n+   */\n+  public void setDateTimeFotmat(FastDateFormat dateTimeFotmat) {\n+    this.dateTimeFotmat = dateTimeFotmat;\n+  }\n \n }\n",
            "diff_size": 222
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "196",
                    "column": "56",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/12/PreferencesBean.java\nindex eee0399c3f3..74b1b8605a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/12/PreferencesBean.java\n@@ -54,11 +54,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     private FastDateFormat timestampFormat;\n \n     private FastDateFormat dateTimeFotmat;\n-    \n-\n-    private Preferences preferences;\n-\n-    private int screenWidth = 1200;\n+private Preferences preferences;\n+private int screenWidth = 1200;\n     private int screenHeight = 600;\n \n     /**\n@@ -155,7 +152,7 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n                 ColumnPreferences pref = new ColumnPreferences(p.getColName(), p.getDisplayName(), p.getSize(),\n                         p.isVisible() ? Visibility.VISIBLE : Visibility.HIDDEN, p.isHideable() ? Hidability.HIDABLE\n                                 : Hidability.NON_HIDABLE);\n-                pref.setCreator(owner);\n+pref.setCreator(owner);\n                 existingPrefs.add(i, pref);\n                 ret = true;\n             }\n@@ -239,4 +236,4 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n         this.dateTimeFotmat = dateTimeFotmat;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "column": "56",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/12/PreferencesBean.java\nindex eee0399c3f3..79eb8e93172 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/12/PreferencesBean.java\n@@ -16,19 +16,18 @@ package com.intuit.tank;\n  * #L%\n  */\n \n+\n+\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n-\n import javax.enterprise.context.SessionScoped;\n import javax.enterprise.event.Observes;\n import javax.enterprise.event.Reception;\n import javax.inject.Named;\n-\n import org.apache.commons.lang.math.NumberUtils;\n import org.apache.commons.lang.time.FastDateFormat;\n-\n import com.intuit.tank.admin.Deleted;\n import com.intuit.tank.dao.PreferencesDao;\n import com.intuit.tank.prefs.PreferencesChangedListener;\n@@ -43,6 +42,7 @@ import com.intuit.tank.project.ColumnPreferences.Visibility;\n  * @author dangleton\n  * \n  */\n+\n @SessionScoped\n @Named\n public class PreferencesBean implements Serializable, PreferencesChangedListener {\n@@ -50,20 +50,17 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     private static final long serialVersionUID = 1L;\n     private String preferredDateTimeFormat = \"MM/dd/yy HH:mm\";\n     private String preferredTimeStampFormat = \"yyyy-MM-dd_HH-mm-ss\";\n-\n     private FastDateFormat timestampFormat;\n-\n     private FastDateFormat dateTimeFotmat;\n-    \n-\n     private Preferences preferences;\n-\n     private int screenWidth = 1200;\n     private int screenHeight = 600;\n \n     /**\n      * @return the preferences\n      */\n+\n+\n     public Preferences getPreferences() {\n         return preferences;\n     }\n@@ -72,15 +69,19 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * \n      * @param user\n      */\n+\n+\n     public void observeLogin(@Observes(notifyObserver = Reception.IF_EXISTS) @Deleted Preferences preferences) {\n         init(preferences.getCreator());\n     }\n \n+\n     public void init(String owner) {\n         preferences = new PreferencesDao().getForOwner(owner);\n         validatePrefs(owner);\n     }\n \n+\n     public void setScreenSizes(String width, String height) {\n         if (NumberUtils.isDigits(width)) {\n             this.screenWidth = NumberUtils.toInt(width) - 20;\n@@ -93,6 +94,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @return the screenWidth\n      */\n+\n+\n     public int getScreenWidth() {\n         return screenWidth;\n     }\n@@ -101,6 +104,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param screenWidth\n      *            the screenWidth to set\n      */\n+\n+\n     public void setScreenWidth(int screenWidth) {\n         this.screenWidth = screenWidth;\n     }\n@@ -108,6 +113,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @return the screenHeight\n      */\n+\n+\n     public int getScreenHeight() {\n         return screenHeight;\n     }\n@@ -116,6 +123,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param screenHeight\n      *            the screenHeight to set\n      */\n+\n+\n     public void setScreenHeight(int screenHeight) {\n         this.screenHeight = screenHeight;\n     }\n@@ -124,37 +133,30 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param owner\n      * @return\n      */\n+\n     private void validatePrefs(String owner) {\n         if (preferences == null) {\n             preferences = new Preferences();\n             preferences.setCreator(owner);\n         }\n         boolean needsSave = false;\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getProjectTableColumns(),\n-                DefaultTableColumnUtil.PROJECT_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getDatafilesTableColumns(),\n-                DefaultTableColumnUtil.DATA_FILES_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getJobsTableColumns(),\n-                DefaultTableColumnUtil.JOBS_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptsTableColumns(),\n-                DefaultTableColumnUtil.SCRIPTS_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptStepTableColumns(),\n-                DefaultTableColumnUtil.SCRIPT_STEPS_COL_PREFS);\n+        needsSave |= checkPrefs(preferences.getCreator(), preferences.getProjectTableColumns(), DefaultTableColumnUtil.PROJECT_COL_PREFS);\n+        needsSave |= checkPrefs(preferences.getCreator(), preferences.getDatafilesTableColumns(), DefaultTableColumnUtil.DATA_FILES_COL_PREFS);\n+        needsSave |= checkPrefs(preferences.getCreator(), preferences.getJobsTableColumns(), DefaultTableColumnUtil.JOBS_COL_PREFS);\n+        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptsTableColumns(), DefaultTableColumnUtil.SCRIPTS_COL_PREFS);\n+        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptStepTableColumns(), DefaultTableColumnUtil.SCRIPT_STEPS_COL_PREFS);\n         if (needsSave) {\n             preferences = new PreferencesDao().saveOrUpdate(preferences);\n         }\n-\n     }\n \n-    private boolean checkPrefs(String owner, List<ColumnPreferences> existingPrefs,\n-            List<ColumnPreferences> defaultPreferences) {\n+    private boolean checkPrefs(String owner,\n+        List<ColumnPreferences> existingPrefs, List<ColumnPreferences> defaultPreferences) {\n         boolean ret = false;\n         for (int i = 0; i < defaultPreferences.size(); i++) {\n             ColumnPreferences p = defaultPreferences.get(i);\n             if (!existingPrefs.contains(p)) {\n-                ColumnPreferences pref = new ColumnPreferences(p.getColName(), p.getDisplayName(), p.getSize(),\n-                        p.isVisible() ? Visibility.VISIBLE : Visibility.HIDDEN, p.isHideable() ? Hidability.HIDABLE\n-                                : Hidability.NON_HIDABLE);\n+                ColumnPreferences pref = new ColumnPreferences(p.getColName(), p.getDisplayName(), p.getSize(), p.isVisible() ? Visibility.VISIBLE : Visibility.HIDDEN, p.isHideable() ? Hidability.HIDABLE : Hidability.NON_HIDABLE);\n                 pref.setCreator(owner);\n                 existingPrefs.add(i, pref);\n                 ret = true;\n@@ -166,12 +168,12 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @{inheritDoc\n      */\n+\n     @Override\n     public void prefsChanged() {\n         if (preferences != null) {\n             new PreferencesDao().saveOrUpdate(preferences);\n         }\n-\n     }\n \n     /**\n@@ -180,6 +182,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param date\n      * @return\n      */\n+\n+\n     public String formatDate(Date date) {\n         String ret = null;\n         if (date != null) {\n@@ -191,11 +195,13 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * \n      */\n+\n     public PreferencesBean() {\n         dateTimeFotmat = FastDateFormat.getInstance(preferredDateTimeFormat);\n         timestampFormat = FastDateFormat.getInstance(preferredTimeStampFormat);\n     }\n \n+\n     public String getCollectionFilterString(Collection<? extends Object> c) {\n         StringBuilder sb = new StringBuilder();\n         if (c != null) {\n@@ -212,6 +218,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @return the timestampFormat\n      */\n+\n+\n     public FastDateFormat getTimestampFormat() {\n         return timestampFormat;\n     }\n@@ -220,6 +228,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param timestampFormat\n      *            the timestampFormat to set\n      */\n+\n+\n     public void setTimestampFormat(FastDateFormat timestampFormat) {\n         this.timestampFormat = timestampFormat;\n     }\n@@ -227,6 +237,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @return the dateTimeFotmat\n      */\n+\n+\n     public FastDateFormat getDateTimeFotmat() {\n         return dateTimeFotmat;\n     }\n@@ -235,8 +247,10 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param dateTimeFotmat\n      *            the dateTimeFotmat to set\n      */\n+\n+\n     public void setDateTimeFotmat(FastDateFormat dateTimeFotmat) {\n         this.dateTimeFotmat = dateTimeFotmat;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/12/PreferencesBean.java\nindex eee0399c3f3..6b23345557a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/12/PreferencesBean.java\n@@ -196,7 +196,7 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n         timestampFormat = FastDateFormat.getInstance(preferredTimeStampFormat);\n     }\n \n-    public String getCollectionFilterString(Collection<? extends Object> c) {\n+    public String getCollectionFilterString(Collection< ? extends Object> c) {\n         StringBuilder sb = new StringBuilder();\n         if (c != null) {\n             for (Object o : c) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/12/PreferencesBean.java\nindex eee0399c3f3..6b23345557a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/12/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/12/PreferencesBean.java\n@@ -196,7 +196,7 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n         timestampFormat = FastDateFormat.getInstance(preferredTimeStampFormat);\n     }\n \n-    public String getCollectionFilterString(Collection<? extends Object> c) {\n+    public String getCollectionFilterString(Collection< ? extends Object> c) {\n         StringBuilder sb = new StringBuilder();\n         if (c != null) {\n             for (Object o : c) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}