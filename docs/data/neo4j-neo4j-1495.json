{
    "project_name": "neo4j-neo4j",
    "error_id": "1495",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "140",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1495/MapWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1495/MapWriter.java\nindex bea59fa7657..3ea37efe9e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1495/MapWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1495/MapWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.counts;\n \n import java.util.concurrent.ConcurrentHashMap;\n@@ -36,11 +37,11 @@ import static org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY;\n public class MapWriter implements CountUpdater.CountWriter\n {\n     private final ToLongFunction<CountsKey> storeLookup;\n-    private final ConcurrentMap<CountsKey,AtomicLong> changes;\n+    private final ConcurrentMap<CountsKey, AtomicLong> changes;\n     private final OutOfOrderSequence idSequence;\n     private final long txId;\n \n-    MapWriter( ToLongFunction<CountsKey> storeLookup, ConcurrentMap<CountsKey,AtomicLong> changes, OutOfOrderSequence idSequence, long txId )\n+    MapWriter(ToLongFunction<CountsKey> storeLookup, ConcurrentMap<CountsKey, AtomicLong> changes, OutOfOrderSequence idSequence, long txId)\n     {\n         this.storeLookup = storeLookup;\n         this.changes = changes;\n@@ -49,15 +50,15 @@ public class MapWriter implements CountUpdater.CountWriter\n     }\n \n     @Override\n-    public void write( CountsKey key, long delta )\n+    public void write(CountsKey key, long delta)\n     {\n-        Function<CountsKey,AtomicLong> defaultToStoredCount = k -> new AtomicLong( storeLookup.applyAsLong( k ) );\n-        changes.computeIfAbsent( key, defaultToStoredCount ).addAndGet( delta );\n+        Function<CountsKey, AtomicLong> defaultToStoredCount = k -> new AtomicLong(storeLookup.applyAsLong(k));\n+        changes.computeIfAbsent(key, defaultToStoredCount).addAndGet(delta);\n     }\n \n     @Override\n     public void close()\n     {\n-        idSequence.offer( txId, EMPTY_LONG_ARRAY );\n+        idSequence.offer(txId, EMPTY_LONG_ARRAY);\n     }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}