{
    "project_name": "opencb-opencga",
    "error_id": "193",
    "information": {
        "errors": [
            {
                "line": "36",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 157).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @After\n    public void tearDown() throws Exception {\n        VariantHbaseTestUtils.printVariants(((HadoopVariantStorageEngine) variantStorageEngine).getDBAdaptor(), newOutputUri(getTestName().getMethodName()));\n    }\n\n    @Test",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/193/HadoopVariantAnnotationManagerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/193/HadoopVariantAnnotationManagerTest.java\nindex 1703506f5a9..9628b2ebfd7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/193/HadoopVariantAnnotationManagerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/193/HadoopVariantAnnotationManagerTest.java\n@@ -33,7 +33,8 @@ public class HadoopVariantAnnotationManagerTest extends VariantAnnotationManager\n \n     @After\n     public void tearDown() throws Exception {\n-        VariantHbaseTestUtils.printVariants(((HadoopVariantStorageEngine) variantStorageEngine).getDBAdaptor(), newOutputUri(getTestName().getMethodName()));\n+        VariantHbaseTestUtils.printVariants(((HadoopVariantStorageEngine) variantStorageEngine)\n+        .getDBAdaptor(), newOutputUri(getTestName().getMethodName()));\n     }\n \n     @Test\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/193/HadoopVariantAnnotationManagerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/193/HadoopVariantAnnotationManagerTest.java\nindex 1703506f5a9..34a382914a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/193/HadoopVariantAnnotationManagerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/193/HadoopVariantAnnotationManagerTest.java\n@@ -28,46 +28,47 @@ import java.util.stream.Collectors;\n  */\n public class HadoopVariantAnnotationManagerTest extends VariantAnnotationManagerTest implements HadoopVariantStorageTest {\n \n-    @ClassRule\n-    public static ExternalResource externalResource = new HadoopExternalResource();\n+  @ClassRule\n+  public static ExternalResource externalResource = new HadoopExternalResource();\n \n-    @After\n-    public void tearDown() throws Exception {\n-        VariantHbaseTestUtils.printVariants(((HadoopVariantStorageEngine) variantStorageEngine).getDBAdaptor(), newOutputUri(getTestName().getMethodName()));\n-    }\n-\n-    @Test\n-    public void incrementalAnnotationTest() throws Exception {\n-        HadoopVariantStorageEngine engine = getVariantStorageEngine();\n-        for (int i = 0; i < 3; i++) {\n-            URI platinumFile = getPlatinumFile(i);\n+  @After\n+  public void tearDown() throws Exception {\n+    VariantHbaseTestUtils\n+        .printVariants(((HadoopVariantStorageEngine) variantStorageEngine).getDBAdaptor(), newOutputUri(getTestName().getMethodName()));\n+  }\n \n-            runDefaultETL(platinumFile, engine, null, new ObjectMap(VariantStorageOptions.ANNOTATE.key(), false)\n-                    .append(VariantStorageOptions.STATS_CALCULATE.key(), false));\n+  @Test\n+  public void incrementalAnnotationTest() throws Exception {\n+    HadoopVariantStorageEngine engine = getVariantStorageEngine();\n+    for (int i = 0; i < 3; i++) {\n+      URI platinumFile = getPlatinumFile(i);\n \n-            // Update pending variants\n-            new TestMRExecutor().run(DiscoverPendingVariantsToAnnotateDriver.class,\n-                    DiscoverPendingVariantsToAnnotateDriver.buildArgs(engine.getDBAdaptor().getVariantTable(), new ObjectMap()),\n-                    new ObjectMap(), \"Prepare variants to annotate\");\n+      runDefaultETL(platinumFile, engine, null, new ObjectMap(VariantStorageOptions.ANNOTATE.key(), false)\n+          .append(VariantStorageOptions.STATS_CALCULATE.key(), false));\n \n-            long pendingVariantsCount = new PendingVariantsToAnnotateReader(engine.getDBAdaptor(), new Query()).stream().count();\n-            System.out.println(\"pendingVariants = \" + pendingVariantsCount);\n-            long expectedPendingVariantsCount = engine.count(new Query(VariantQueryParam.ANNOTATION_EXISTS.key(), false)).first();\n-            Assert.assertEquals(expectedPendingVariantsCount, pendingVariantsCount);\n-            Assert.assertEquals(expectedPendingVariantsCount, engine.annotate(new Query(), new ObjectMap()));\n+      // Update pending variants\n+      new TestMRExecutor().run(DiscoverPendingVariantsToAnnotateDriver.class,\n+          DiscoverPendingVariantsToAnnotateDriver.buildArgs(engine.getDBAdaptor().getVariantTable(), new ObjectMap()),\n+          new ObjectMap(), \"Prepare variants to annotate\");\n \n+      long pendingVariantsCount = new PendingVariantsToAnnotateReader(engine.getDBAdaptor(), new Query()).stream().count();\n+      System.out.println(\"pendingVariants = \" + pendingVariantsCount);\n+      long expectedPendingVariantsCount = engine.count(new Query(VariantQueryParam.ANNOTATION_EXISTS.key(), false)).first();\n+      Assert.assertEquals(expectedPendingVariantsCount, pendingVariantsCount);\n+      Assert.assertEquals(expectedPendingVariantsCount, engine.annotate(new Query(), new ObjectMap()));\n \n-            List<Variant> pendingVariants = new PendingVariantsToAnnotateReader(engine.getDBAdaptor(), new Query())\n-                    .stream()\n-                    .collect(Collectors.toList());\n-            expectedPendingVariantsCount = engine.count(new Query(VariantQueryParam.ANNOTATION_EXISTS.key(), false)).first();\n-            Assert.assertEquals(0, expectedPendingVariantsCount);\n-            Assert.assertEquals(pendingVariants.toString(), 0, pendingVariants.size());\n-            Assert.assertNotEquals(0, engine.count(new Query()).first().longValue());\n-        }\n \n-        long variants = engine.count(new Query()).first();\n-        Assert.assertEquals(0L, engine.annotate(new Query(), new ObjectMap()));\n-        Assert.assertEquals(variants, engine.annotate(new Query(), new ObjectMap(VariantStorageOptions.ANNOTATION_OVERWEITE.key(), true)));\n+      List<Variant> pendingVariants = new PendingVariantsToAnnotateReader(engine.getDBAdaptor(), new Query())\n+          .stream()\n+          .collect(Collectors.toList());\n+      expectedPendingVariantsCount = engine.count(new Query(VariantQueryParam.ANNOTATION_EXISTS.key(), false)).first();\n+      Assert.assertEquals(0, expectedPendingVariantsCount);\n+      Assert.assertEquals(pendingVariants.toString(), 0, pendingVariants.size());\n+      Assert.assertNotEquals(0, engine.count(new Query()).first().longValue());\n     }\n+\n+    long variants = engine.count(new Query()).first();\n+    Assert.assertEquals(0L, engine.annotate(new Query(), new ObjectMap()));\n+    Assert.assertEquals(variants, engine.annotate(new Query(), new ObjectMap(VariantStorageOptions.ANNOTATION_OVERWEITE.key(), true)));\n+  }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/193/HadoopVariantAnnotationManagerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/193/HadoopVariantAnnotationManagerTest.java\nindex 1703506f5a9..131894c52a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/193/HadoopVariantAnnotationManagerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/193/HadoopVariantAnnotationManagerTest.java\n@@ -70,4 +70,4 @@ public class HadoopVariantAnnotationManagerTest extends VariantAnnotationManager\n         Assert.assertEquals(0L, engine.annotate(new Query(), new ObjectMap()));\n         Assert.assertEquals(variants, engine.annotate(new Query(), new ObjectMap(VariantStorageOptions.ANNOTATION_OVERWEITE.key(), true)));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/193/HadoopVariantAnnotationManagerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/193/HadoopVariantAnnotationManagerTest.java\nindex 1703506f5a9..9628b2ebfd7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/193/HadoopVariantAnnotationManagerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/193/HadoopVariantAnnotationManagerTest.java\n@@ -33,7 +33,8 @@ public class HadoopVariantAnnotationManagerTest extends VariantAnnotationManager\n \n     @After\n     public void tearDown() throws Exception {\n-        VariantHbaseTestUtils.printVariants(((HadoopVariantStorageEngine) variantStorageEngine).getDBAdaptor(), newOutputUri(getTestName().getMethodName()));\n+        VariantHbaseTestUtils.printVariants(((HadoopVariantStorageEngine) variantStorageEngine)\n+        .getDBAdaptor(), newOutputUri(getTestName().getMethodName()));\n     }\n \n     @Test\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "37",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "34",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "37",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/193/HadoopVariantAnnotationManagerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/193/HadoopVariantAnnotationManagerTest.java\nindex 1703506f5a9..4a89c0411c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/193/HadoopVariantAnnotationManagerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/193/HadoopVariantAnnotationManagerTest.java\n@@ -33,7 +33,11 @@ public class HadoopVariantAnnotationManagerTest extends VariantAnnotationManager\n \n     @After\n     public void tearDown() throws Exception {\n-        VariantHbaseTestUtils.printVariants(((HadoopVariantStorageEngine) variantStorageEngine).getDBAdaptor(), newOutputUri(getTestName().getMethodName()));\n+        VariantHbaseTestUtils.printVariants(((HadoopVariantStorageEngine\n+        ) variantStorageEngine ). getDBAdaptor( ), newOutputUri(\n+                getTestName().\n+\n+        getMethodName()));\n     }\n \n     @Test\n",
            "diff_size": 5
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}