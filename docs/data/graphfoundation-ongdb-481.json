{
    "project_name": "graphfoundation-ongdb",
    "error_id": "481",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/481/NodeExistenceConstraintDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/481/NodeExistenceConstraintDescriptor.java\nindex be810ce88eb..e38b264543e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/481/NodeExistenceConstraintDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/481/NodeExistenceConstraintDescriptor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.schema.constaints;\n \n import org.neo4j.internal.kernel.api.TokenNameLookup;\n@@ -26,28 +27,28 @@ import org.neo4j.internal.kernel.api.schema.SchemaUtil;\n \n public class NodeExistenceConstraintDescriptor extends ConstraintDescriptor implements LabelSchemaSupplier\n {\n-    private LabelSchemaDescriptor schema;\n+  private LabelSchemaDescriptor schema;\n \n-    NodeExistenceConstraintDescriptor( LabelSchemaDescriptor schema )\n-    {\n-        super( Type.EXISTS );\n-        this.schema = schema;\n-    }\n+  NodeExistenceConstraintDescriptor(LabelSchemaDescriptor schema)\n+  {\n+    super(Type.EXISTS);\n+    this.schema = schema;\n+  }\n \n-    @Override\n-    public LabelSchemaDescriptor schema()\n-    {\n-        return schema;\n-    }\n+  @Override\n+  public LabelSchemaDescriptor schema()\n+  {\n+    return schema;\n+  }\n \n-    @Override\n-    public String prettyPrint( TokenNameLookup tokenNameLookup )\n-    {\n-        String labelName = escapeLabelOrRelTyp( tokenNameLookup.labelGetName( schema.getLabelId() ) );\n-        String nodeName = labelName.toLowerCase();\n-        String properties =\n-                SchemaUtil.niceProperties( tokenNameLookup, schema.getPropertyIds(), nodeName + \".\", false );\n+  @Override\n+  public String prettyPrint(TokenNameLookup tokenNameLookup)\n+  {\n+    String labelName = escapeLabelOrRelTyp(tokenNameLookup.labelGetName(schema.getLabelId()));\n+    String nodeName = labelName.toLowerCase();\n+    String properties =\n+        SchemaUtil.niceProperties(tokenNameLookup, schema.getPropertyIds(), nodeName + \".\", false);\n \n-        return String.format( \"CONSTRAINT ON ( %s:%s ) ASSERT exists(%s)\", nodeName, labelName, properties );\n-    }\n+    return String.format(\"CONSTRAINT ON ( %s:%s ) ASSERT exists(%s)\", nodeName, labelName, properties);\n+  }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/481/NodeExistenceConstraintDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/481/NodeExistenceConstraintDescriptor.java\nindex be810ce88eb..a277ba37dac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/481/NodeExistenceConstraintDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/481/NodeExistenceConstraintDescriptor.java\n@@ -45,9 +45,7 @@ public class NodeExistenceConstraintDescriptor extends ConstraintDescriptor impl\n     {\n         String labelName = escapeLabelOrRelTyp( tokenNameLookup.labelGetName( schema.getLabelId() ) );\n         String nodeName = labelName.toLowerCase();\n-        String properties =\n-                SchemaUtil.niceProperties( tokenNameLookup, schema.getPropertyIds(), nodeName + \".\", false );\n-\n-        return String.format( \"CONSTRAINT ON ( %s:%s ) ASSERT exists(%s)\", nodeName, labelName, properties );\n+        String properties = SchemaUtil.niceProperties( tokenNameLookup, schema.getPropertyIds(), nodeName + \".\", false );\n+return String.format( \"CONSTRAINT ON ( %s:%s ) ASSERT exists(%s)\", nodeName, labelName, properties );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}