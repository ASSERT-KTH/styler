{
    "project_name": "neo4j-neo4j",
    "error_id": "2841",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "121",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "155",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "169",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2841/Tracers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2841/Tracers.java\nindex 2c27e8f3abb..3a14656c54d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2841/Tracers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2841/Tracers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.monitoring.tracing;\n \n import org.neo4j.configuration.Config;\n@@ -36,68 +37,68 @@ import static org.neo4j.kernel.monitoring.tracing.NullTracersFactory.NULL_TRACER\n /**\n  * <h1>Tracers</h1>\n  * <p>\n- *     While monitoring is a dynamic piece of infrastructure, where monitors can be wired up and torn down on the fly,\n- *     the tracing infrastructure is static and hard-coded into the database on startup.\n+ * While monitoring is a dynamic piece of infrastructure, where monitors can be wired up and torn down on the fly,\n+ * the tracing infrastructure is static and hard-coded into the database on startup.\n  * </p>\n  * <p>\n- *     Tracing is always on, though the default implementation is very light weight, incurring almost no overhead.\n+ * Tracing is always on, though the default implementation is very light weight, incurring almost no overhead.\n  * </p>\n  * <h2>The Tracers class</h2>\n  * <p>\n- *     This is the central hub in the tracing infrastructure.\n+ * This is the central hub in the tracing infrastructure.\n  * </p>\n  * <p>\n- *     This class is responsible for choosing what tracing implementation to use, and for creating the relevant tracer\n- *     components to distribute throughout the database instance.\n+ * This class is responsible for choosing what tracing implementation to use, and for creating the relevant tracer\n+ * components to distribute throughout the database instance.\n  * </p>\n  * <p>\n- *     The tracing implementation is determined by the {@code unsupported.dbms.tracer} setting. Two built-in implementations\n- *     exist: {@code default} and {@code null}. Alternative implementations can be loaded from the\n- *     classpath by referencing their {@link org.neo4j.kernel.monitoring.tracing.TracerFactory} in a\n- *     {@code META-INF/services/org.neo4j.kernel.monitoring.tracing.TracerFactory}, and setting\n- *     {@code unsupported.dbms.tracer} to the appropriate value.\n+ * The tracing implementation is determined by the {@code unsupported.dbms.tracer} setting. Two built-in implementations\n+ * exist: {@code default} and {@code null}. Alternative implementations can be loaded from the\n+ * classpath by referencing their {@link org.neo4j.kernel.monitoring.tracing.TracerFactory} in a\n+ * {@code META-INF/services/org.neo4j.kernel.monitoring.tracing.TracerFactory}, and setting\n+ * {@code unsupported.dbms.tracer} to the appropriate value.\n  * </p>\n  * <h2>Designing and implementing tracers</h2>\n  * <p>\n- *     There are two parts to tracers: the tracer implementation, which starts with the TracerFactory, and the\n- *     subsystems that expose themselves to tracing.\n+ * There are two parts to tracers: the tracer implementation, which starts with the TracerFactory, and the\n+ * subsystems that expose themselves to tracing.\n  * </p>\n  * <p>\n- *     The traced subsystems are responsible for defining their own tracer and trace event interfaces, and they are\n- *     responsible for getting hold of a tracer implementation through the Tracers class, and for producing trace\n- *     events and feeding them with data.\n+ * The traced subsystems are responsible for defining their own tracer and trace event interfaces, and they are\n+ * responsible for getting hold of a tracer implementation through the Tracers class, and for producing trace\n+ * events and feeding them with data.\n  * </p>\n  * <p>\n- *     Traced subsystems define a hierarchy of events: large coarse grain events can contain smaller and more\n- *     detailed events. Sibling events (that follow one after another in time) are typically spawned from the same\n- *     parent event. The tracers and trace events are all defined as interfaces, and each interface should have a\n- *     {@code NULL} field that references an implementation that does nothing, other than return other {@code NULL}\n- *     implementations of any child event interfaces. The existing trace interfaces for transactions and the page\n- *     cache, are good examples of this.\n+ * Traced subsystems define a hierarchy of events: large coarse grain events can contain smaller and more\n+ * detailed events. Sibling events (that follow one after another in time) are typically spawned from the same\n+ * parent event. The tracers and trace events are all defined as interfaces, and each interface should have a\n+ * {@code NULL} field that references an implementation that does nothing, other than return other {@code NULL}\n+ * implementations of any child event interfaces. The existing trace interfaces for transactions and the page\n+ * cache, are good examples of this.\n  * </p>\n  * <p>\n- *     The tracer implementations are responsible for implementing all the tracer and trace event interfaces in a way\n- *     that is both fast, and robust. Robustness is important because tracer implementations are not allowed to throw\n- *     exceptions, and they are not allowed to return {@code null} where a trace event is expected. Implementations\n- *     may add implementation specific data to the events, if they want to report implementation specific data.\n- *     They are also allowed to produce the {@code NULL} implementations that are associated with the various tracer\n- *     and trace event interfaces. If, for instance, the implementation is not interested in the data that would be\n- *     collected from a given trace event, then it can choose to use the {@code NULL} implementation. It could also\n- *     be that something went wrong when building an event instance of the desired type, and since it cannot return\n- *     {@code null} or throw exceptions, it is forced to return the {@code NULL} implementation.\n+ * The tracer implementations are responsible for implementing all the tracer and trace event interfaces in a way\n+ * that is both fast, and robust. Robustness is important because tracer implementations are not allowed to throw\n+ * exceptions, and they are not allowed to return {@code null} where a trace event is expected. Implementations\n+ * may add implementation specific data to the events, if they want to report implementation specific data.\n+ * They are also allowed to produce the {@code NULL} implementations that are associated with the various tracer\n+ * and trace event interfaces. If, for instance, the implementation is not interested in the data that would be\n+ * collected from a given trace event, then it can choose to use the {@code NULL} implementation. It could also\n+ * be that something went wrong when building an event instance of the desired type, and since it cannot return\n+ * {@code null} or throw exceptions, it is forced to return the {@code NULL} implementation.\n  * </p>\n  * <p>\n- *     Tracer implementations should prefer to always return the same trace event implementation type for a given\n- *     trace event type. Using more than one implementation type impairs JIT optimisation, as it causes the callsites\n- *     in the traced code to no longer be monomorphic. Implementations should be built with performance in mind, as\n- *     the code being traced is often quite important for the performance of the database.\n+ * Tracer implementations should prefer to always return the same trace event implementation type for a given\n+ * trace event type. Using more than one implementation type impairs JIT optimisation, as it causes the callsites\n+ * in the traced code to no longer be monomorphic. Implementations should be built with performance in mind, as\n+ * the code being traced is often quite important for the performance of the database.\n  * </p>\n  * <p>\n- *     The {@code default} and {@code null} implementation are always available, and 3rd party implementations can\n- *     piggy-back on them and extend them. At least one 3rd party implementation is known at this point; the\n- *     <a href=\"https://github.com/neo4j-contrib/neo4j-jfr\">neo4j-jfr implementation</a>. It is recommended that\n- *     those change the tracer or trace event interfaces, or add tracing to more subsystems, also make sure to keep\n- *     the neo4j-jfr code base up to date.\n+ * The {@code default} and {@code null} implementation are always available, and 3rd party implementations can\n+ * piggy-back on them and extend them. At least one 3rd party implementation is known at this point; the\n+ * <a href=\"https://github.com/neo4j-contrib/neo4j-jfr\">neo4j-jfr implementation</a>. It is recommended that\n+ * those change the tracer or trace event interfaces, or add tracing to more subsystems, also make sure to keep\n+ * the neo4j-jfr code base up to date.\n  * </p>\n  */\n public class Tracers\n@@ -108,20 +109,21 @@ public class Tracers\n \n     /**\n      * Create a Tracers subsystem with the desired implementation, if it can be found and created.\n-     *\n+     * <p>\n      * Otherwise the default implementation is used, and a warning is logged to the given StringLogger.\n+     *\n      * @param desiredImplementationName The name of the desired {@link org.neo4j.kernel.monitoring.tracing\n-     * .TracerFactory} implementation, as given by its {@link TracerFactory#getName()} method.\n-     * @param msgLog A {@link Log} for logging when the desired implementation cannot be created.\n-     * @param monitors the monitoring manager\n-     * @param jobScheduler a scheduler for async jobs\n+     *                                  .TracerFactory} implementation, as given by its {@link TracerFactory#getName()} method.\n+     * @param msgLog                    A {@link Log} for logging when the desired implementation cannot be created.\n+     * @param monitors                  the monitoring manager\n+     * @param jobScheduler              a scheduler for async jobs\n      */\n-    public Tracers( String desiredImplementationName, Log msgLog, Monitors monitors, JobScheduler jobScheduler,\n-            SystemNanoClock clock, Config config )\n+    public Tracers(String desiredImplementationName, Log msgLog, Monitors monitors, JobScheduler jobScheduler,\n+                   SystemNanoClock clock, Config config)\n     {\n         this.clock = clock;\n-        this.tracersFactory = createTracersFactory( desiredImplementationName, msgLog );\n-        this.pageCacheTracer = tracersFactory.createPageCacheTracer( monitors, jobScheduler, clock, msgLog, config );\n+        this.tracersFactory = createTracersFactory(desiredImplementationName, msgLog);\n+        this.pageCacheTracer = tracersFactory.createPageCacheTracer(monitors, jobScheduler, clock, msgLog, config);\n     }\n \n     public PageCacheTracer getPageCacheTracer()\n@@ -131,44 +133,42 @@ public class Tracers\n \n     public LockTracer getLockTracer()\n     {\n-        return tracersFactory.createLockTracer( clock );\n+        return tracersFactory.createLockTracer(clock);\n     }\n \n     public DatabaseTracer getDatabaseTracer()\n     {\n-        return tracersFactory.createDatabaseTracer( clock );\n+        return tracersFactory.createDatabaseTracer(clock);\n     }\n \n-    private static TracerFactory createTracersFactory( String desiredImplementationName, Log msgLog )\n+    private static TracerFactory createTracersFactory(String desiredImplementationName, Log msgLog)\n     {\n-        if ( NULL_TRACERS_NAME.equalsIgnoreCase( desiredImplementationName ) )\n+        if (NULL_TRACERS_NAME.equalsIgnoreCase(desiredImplementationName))\n         {\n             return new NullTracersFactory();\n-        }\n-        else\n+        } else\n         {\n-            return selectTracerFactory( desiredImplementationName, msgLog );\n+            return selectTracerFactory(desiredImplementationName, msgLog);\n         }\n     }\n \n-    private static TracerFactory selectTracerFactory( String desiredImplementationName, Log msgLog )\n+    private static TracerFactory selectTracerFactory(String desiredImplementationName, Log msgLog)\n     {\n-        if ( isBlank( desiredImplementationName ) )\n+        if (isBlank(desiredImplementationName))\n         {\n             return createDefaultTracerFactory();\n         }\n         try\n         {\n-            return Services.load( TracerFactory.class, desiredImplementationName )\n-                    .orElseGet( () ->\n-                    {\n-                        msgLog.warn( \"Using default tracer implementations instead of '%s'\", desiredImplementationName );\n-                        return Tracers.createDefaultTracerFactory();\n-                    } );\n-        }\n-        catch ( Exception e )\n+            return Services.load(TracerFactory.class, desiredImplementationName)\n+              .orElseGet(() ->\n+              {\n+                  msgLog.warn(\"Using default tracer implementations instead of '%s'\", desiredImplementationName);\n+                  return Tracers.createDefaultTracerFactory();\n+              });\n+        } catch (Exception e)\n         {\n-            msgLog.warn( format( \"Failed to instantiate desired tracer implementations '%s', using default\", desiredImplementationName ), e );\n+            msgLog.warn(format(\"Failed to instantiate desired tracer implementations '%s', using default\", desiredImplementationName), e);\n             return createDefaultTracerFactory();\n         }\n     }\n",
            "diff_size": 69
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}