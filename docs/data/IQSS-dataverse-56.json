{
    "project_name": "IQSS-dataverse",
    "error_id": "56",
    "information": {
        "errors": [
            {
                "line": "30",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": " */\n@NamedQueries({\n\t\t@NamedQuery( name=\"BuiltinUser.findAll\",\n\t\t\t\tquery = \"SELECT u FROM BuiltinUser u ORDER BY u.userName\"),\n\t\t@NamedQuery( name=\"BuiltinUser.findByUserName\",\n\t\t\t\tquery = \"SELECT u FROM BuiltinUser u WHERE LOWER(u.userName)=LOWER(:userName)\"),",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/56/BuiltinUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/56/BuiltinUser.java\nindex 9ae4e4b0e87..25e7752d65f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/56/BuiltinUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/56/BuiltinUser.java\n@@ -27,7 +27,7 @@ import org.hibernate.validator.constraints.NotBlank;\n  * @author mbarsinai\n  */\n @NamedQueries({\n-\t\t@NamedQuery( name=\"BuiltinUser.findAll\",\n+   @NamedQuery( name=\"BuiltinUser.findAll\",\n \t\t\t\tquery = \"SELECT u FROM BuiltinUser u ORDER BY u.userName\"),\n \t\t@NamedQuery( name=\"BuiltinUser.findByUserName\",\n \t\t\t\tquery = \"SELECT u FROM BuiltinUser u WHERE LOWER(u.userName)=LOWER(:userName)\"),\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/56/BuiltinUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/56/BuiltinUser.java\nindex 9ae4e4b0e87..93c1dd71c3e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/56/BuiltinUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/56/BuiltinUser.java\n@@ -22,176 +22,184 @@ import javax.validation.constraints.Size;\n import org.hibernate.validator.constraints.NotBlank;\n \n /**\n- *\n  * @author xyang\n  * @author mbarsinai\n  */\n @NamedQueries({\n-\t\t@NamedQuery( name=\"BuiltinUser.findAll\",\n-\t\t\t\tquery = \"SELECT u FROM BuiltinUser u ORDER BY u.userName\"),\n-\t\t@NamedQuery( name=\"BuiltinUser.findByUserName\",\n-\t\t\t\tquery = \"SELECT u FROM BuiltinUser u WHERE LOWER(u.userName)=LOWER(:userName)\"),\n-\t\t@NamedQuery( name=\"BuiltinUser.listByUserNameLike\",\n-\t\t\t\tquery = \"SELECT u FROM BuiltinUser u WHERE u.userName LIKE :userNameLike\")\n+  @NamedQuery(name = \"BuiltinUser.findAll\",\n+    query = \"SELECT u FROM BuiltinUser u ORDER BY u.userName\"),\n+  @NamedQuery(name = \"BuiltinUser.findByUserName\",\n+    query = \"SELECT u FROM BuiltinUser u WHERE LOWER(u.userName)=LOWER(:userName)\"),\n+  @NamedQuery(name = \"BuiltinUser.listByUserNameLike\",\n+    query = \"SELECT u FROM BuiltinUser u WHERE u.userName LIKE :userNameLike\")\n })\n @Entity\n-@Table(indexes = {@Index(columnList=\"userName\")})  // for sorting the NamedQuery BuiltinUser.findAll\n+@Table(indexes = {@Index(columnList = \"userName\")})  // for sorting the NamedQuery BuiltinUser.findAll\n public class BuiltinUser implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long id;\n-\n-    @NotBlank(message = \"{user.enterUsername}\")\n-    @Size(min=2, max=60, message = \"{user.usernameLength}\")\n-    @ValidateUserName(message = \"{user.illegalCharacters}\")\n-    @Column(nullable = false, unique=true)  \n-    private String userName;\n-    \n-    private int passwordEncryptionVersion; \n-\n-    @OneToOne(mappedBy = \"builtinUser\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n-    private PasswordResetData passwordResetData;\n-\n-    private String encryptedPassword;\n-\n-    /**\n-     * These attributes are kept as transients for legacy purposes, namely to ease\n-     * the creation of users via API with serialization\n-     * \n-     * We do not provide getters because the only time these need to be gotten\n-     * is not individually\n-     */\n-    @Transient\n-    private String email;\n-    @Transient\n-    private String firstName;\n-    @Transient\n-    private String lastName;\n-    @Transient\n-    private String affiliation;\n-    @Transient\n-    private String position;\n-    \n-    @Deprecated()\n-    public String getEmail() {\n-        return email;\n-    }\n-    @Deprecated()\n-    public void setEmail(String email) {\n-       this.email = email;\n-    }\n-    @Deprecated()\n-    public String getFirstName() {\n-       return firstName;\n-    }\n-    @Deprecated()\n-    public void setFirstName(String firstName) {\n-       this.firstName = firstName;\n-    }\n-    @Deprecated()\n-    public String getLastName() {\n-       return lastName;\n-    }\n-    @Deprecated()\n-    public void setLastName(String lastName) {\n-       this.lastName = lastName;\n-    }\n-    @Deprecated()\n-    public String getAffiliation() {\n-       return affiliation;\n-    }\n-    @Deprecated()\n-    public void setAffiliation(String affiliation) {\n-       this.affiliation = affiliation;\n-    }\n-    @Deprecated()\n-    public String getPosition() {\n-       return position;\n-    }\n-    @Deprecated()\n-    public void setPosition(String position) {\n-       this.position = position;\n-    }\n-    \n-    public void updateEncryptedPassword( String encryptedPassword, int algorithmVersion ) {\n-        setEncryptedPassword(encryptedPassword);\n-        setPasswordEncryptionVersion(algorithmVersion);\n-    }\n-    \n-    public Long getId() {\n-        return id;\n-    }\n+  private static final long serialVersionUID = 1L;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long id;\n \n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n+  @NotBlank(message = \"{user.enterUsername}\")\n+  @Size(min = 2, max = 60, message = \"{user.usernameLength}\")\n+  @ValidateUserName(message = \"{user.illegalCharacters}\")\n+  @Column(nullable = false, unique = true)\n+  private String userName;\n \n-    public String getUserName() {\n-        return userName;\n-    }\n+  private int passwordEncryptionVersion;\n \n-    public void setUserName(String userName) {\n-        this.userName = userName;\n-    }\n-    \n-    public String getEncryptedPassword() {\n-        return encryptedPassword;\n-    }\n-    \n-    /**\n-     * JPA-use only. Humans should call {@link #updateEncryptedPassword(java.lang.String, int)}\n-     * and update the password and the algorithm at the same time.\n-     * \n-     * @param encryptedPassword\n-     * @deprecated\n-     */\n-    @Deprecated()\n-    public void setEncryptedPassword(String encryptedPassword) {\n-        this.encryptedPassword = encryptedPassword;\n-    }\n+  @OneToOne(mappedBy = \"builtinUser\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n+  private PasswordResetData passwordResetData;\n \n-    @Override\n-    public int hashCode() {\n-        int hash = 0;\n-        hash += (id != null ? id.hashCode() : 0);\n-        return hash;\n-    }\n+  private String encryptedPassword;\n \n-    @Override\n-    public boolean equals(Object object) {\n-        if (!(object instanceof BuiltinUser)) {\n-            return false;\n-        }\n-        BuiltinUser other = (BuiltinUser) object;\n-        return !((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id)));\n-    }\n+  /**\n+   * These attributes are kept as transients for legacy purposes, namely to ease\n+   * the creation of users via API with serialization\n+   * <p>\n+   * We do not provide getters because the only time these need to be gotten\n+   * is not individually\n+   */\n+  @Transient\n+  private String email;\n+  @Transient\n+  private String firstName;\n+  @Transient\n+  private String lastName;\n+  @Transient\n+  private String affiliation;\n+  @Transient\n+  private String position;\n \n-    @Override\n-    public String toString() {\n-            return \"BuiltinUser{\" + \"id=\" + id + \", userName=\" + userName + '}';\n-    }\n+  @Deprecated()\n+  public String getEmail() {\n+    return email;\n+  }\n \n-    public int getPasswordEncryptionVersion() {\n-        return passwordEncryptionVersion;\n-    }\n+  @Deprecated()\n+  public void setEmail(String email) {\n+    this.email = email;\n+  }\n \n-    public void setPasswordEncryptionVersion(int passwordEncryptionVersion) {\n-        this.passwordEncryptionVersion = passwordEncryptionVersion;\n-    }\n-    \n-    /**\n-     * This only exists at this point to ease creation of users via API.\n-     * Previously we stored more information in the BuiltInUser, but this was\n-     * removed and only stored with AuthenticatedUser.\n-     * We use this along with the transient BuiltinUser attributes to gather\n-     * needed data for user creation.\n-     * \n-     * @deprecated\n-     */\n-    @Deprecated()\n-    public AuthenticatedUserDisplayInfo getDisplayInfoForApiCreation() {\n-        return new AuthenticatedUserDisplayInfo(firstName, lastName, email, affiliation, position );\n-    }\n+  @Deprecated()\n+  public String getFirstName() {\n+    return firstName;\n+  }\n+\n+  @Deprecated()\n+  public void setFirstName(String firstName) {\n+    this.firstName = firstName;\n+  }\n+\n+  @Deprecated()\n+  public String getLastName() {\n+    return lastName;\n+  }\n+\n+  @Deprecated()\n+  public void setLastName(String lastName) {\n+    this.lastName = lastName;\n+  }\n+\n+  @Deprecated()\n+  public String getAffiliation() {\n+    return affiliation;\n+  }\n+\n+  @Deprecated()\n+  public void setAffiliation(String affiliation) {\n+    this.affiliation = affiliation;\n+  }\n+\n+  @Deprecated()\n+  public String getPosition() {\n+    return position;\n+  }\n+\n+  @Deprecated()\n+  public void setPosition(String position) {\n+    this.position = position;\n+  }\n+\n+  public void updateEncryptedPassword(String encryptedPassword, int algorithmVersion) {\n+    setEncryptedPassword(encryptedPassword);\n+    setPasswordEncryptionVersion(algorithmVersion);\n+  }\n+\n+  public Long getId() {\n+    return id;\n+  }\n+\n+  public void setId(Long id) {\n+    this.id = id;\n+  }\n+\n+  public String getUserName() {\n+    return userName;\n+  }\n+\n+  public void setUserName(String userName) {\n+    this.userName = userName;\n+  }\n+\n+  public String getEncryptedPassword() {\n+    return encryptedPassword;\n+  }\n+\n+  /**\n+   * JPA-use only. Humans should call {@link #updateEncryptedPassword(java.lang.String, int)}\n+   * and update the password and the algorithm at the same time.\n+   *\n+   * @param encryptedPassword\n+   * @deprecated\n+   */\n+  @Deprecated()\n+  public void setEncryptedPassword(String encryptedPassword) {\n+    this.encryptedPassword = encryptedPassword;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int hash = 0;\n+    hash += (id != null ? id.hashCode() : 0);\n+    return hash;\n+  }\n+\n+  @Override\n+  public boolean equals(Object object) {\n+    if (!(object instanceof BuiltinUser)) {\n+      return false;\n+    }\n+    BuiltinUser other = (BuiltinUser) object;\n+    return !((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id)));\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"BuiltinUser{\" + \"id=\" + id + \", userName=\" + userName + '}';\n+  }\n+\n+  public int getPasswordEncryptionVersion() {\n+    return passwordEncryptionVersion;\n+  }\n+\n+  public void setPasswordEncryptionVersion(int passwordEncryptionVersion) {\n+    this.passwordEncryptionVersion = passwordEncryptionVersion;\n+  }\n+\n+  /**\n+   * This only exists at this point to ease creation of users via API.\n+   * Previously we stored more information in the BuiltInUser, but this was\n+   * removed and only stored with AuthenticatedUser.\n+   * We use this along with the transient BuiltinUser attributes to gather\n+   * needed data for user creation.\n+   *\n+   * @deprecated\n+   */\n+  @Deprecated()\n+  public AuthenticatedUserDisplayInfo getDisplayInfoForApiCreation() {\n+    return new AuthenticatedUserDisplayInfo(firstName, lastName, email, affiliation, position);\n+  }\n }\n",
            "diff_size": 270
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/56/BuiltinUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/56/BuiltinUser.java\nindex 9ae4e4b0e87..a69c1a9aa07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/56/BuiltinUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/56/BuiltinUser.java\n@@ -26,34 +26,34 @@ import org.hibernate.validator.constraints.NotBlank;\n  * @author xyang\n  * @author mbarsinai\n  */\n+\n+\n @NamedQueries({\n-\t\t@NamedQuery( name=\"BuiltinUser.findAll\",\n-\t\t\t\tquery = \"SELECT u FROM BuiltinUser u ORDER BY u.userName\"),\n-\t\t@NamedQuery( name=\"BuiltinUser.findByUserName\",\n-\t\t\t\tquery = \"SELECT u FROM BuiltinUser u WHERE LOWER(u.userName)=LOWER(:userName)\"),\n-\t\t@NamedQuery( name=\"BuiltinUser.listByUserNameLike\",\n-\t\t\t\tquery = \"SELECT u FROM BuiltinUser u WHERE u.userName LIKE :userNameLike\")\n+    @NamedQuery(name = \"BuiltinUser.findAll\", query = \"SELECT u FROM BuiltinUser u ORDER BY u.userName\"),\n+    @NamedQuery(name = \"BuiltinUser.findByUserName\",\n+        query = \"SELECT u FROM BuiltinUser u WHERE LOWER(u.userName)=LOWER(:userName)\"),\n+    @NamedQuery(name = \"BuiltinUser.listByUserNameLike\",\n+        query = \"SELECT u FROM BuiltinUser u WHERE u.userName LIKE :userNameLike\")\n })\n @Entity\n-@Table(indexes = {@Index(columnList=\"userName\")})  // for sorting the NamedQuery BuiltinUser.findAll\n+@Table(indexes = {@Index(columnList = \"userName\")})  // for sorting the NamedQuery BuiltinUser.findAll\n public class BuiltinUser implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n+\n     @Id\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Long id;\n \n     @NotBlank(message = \"{user.enterUsername}\")\n-    @Size(min=2, max=60, message = \"{user.usernameLength}\")\n+    @Size(min = 2, max = 60, message = \"{user.usernameLength}\")\n     @ValidateUserName(message = \"{user.illegalCharacters}\")\n-    @Column(nullable = false, unique=true)  \n+    @Column(nullable = false, unique = true)\n     private String userName;\n-    \n-    private int passwordEncryptionVersion; \n+    private int passwordEncryptionVersion;\n \n     @OneToOne(mappedBy = \"builtinUser\", cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST})\n     private PasswordResetData passwordResetData;\n-\n     private String encryptedPassword;\n \n     /**\n@@ -63,63 +63,77 @@ public class BuiltinUser implements Serializable {\n      * We do not provide getters because the only time these need to be gotten\n      * is not individually\n      */\n+\n     @Transient\n     private String email;\n+\n     @Transient\n     private String firstName;\n+\n     @Transient\n     private String lastName;\n+\n     @Transient\n     private String affiliation;\n+\n     @Transient\n     private String position;\n-    \n+\n     @Deprecated()\n     public String getEmail() {\n         return email;\n     }\n+\n     @Deprecated()\n     public void setEmail(String email) {\n-       this.email = email;\n+        this.email = email;\n     }\n+\n     @Deprecated()\n     public String getFirstName() {\n-       return firstName;\n+        return firstName;\n     }\n+\n     @Deprecated()\n     public void setFirstName(String firstName) {\n-       this.firstName = firstName;\n+        this.firstName = firstName;\n     }\n+\n     @Deprecated()\n     public String getLastName() {\n-       return lastName;\n+        return lastName;\n     }\n+\n     @Deprecated()\n     public void setLastName(String lastName) {\n-       this.lastName = lastName;\n+        this.lastName = lastName;\n     }\n+\n     @Deprecated()\n     public String getAffiliation() {\n-       return affiliation;\n+        return affiliation;\n     }\n+\n     @Deprecated()\n     public void setAffiliation(String affiliation) {\n-       this.affiliation = affiliation;\n+        this.affiliation = affiliation;\n     }\n+\n     @Deprecated()\n     public String getPosition() {\n-       return position;\n+        return position;\n     }\n+\n     @Deprecated()\n     public void setPosition(String position) {\n-       this.position = position;\n+        this.position = position;\n     }\n-    \n-    public void updateEncryptedPassword( String encryptedPassword, int algorithmVersion ) {\n+\n+    public void updateEncryptedPassword(String encryptedPassword, int algorithmVersion) {\n         setEncryptedPassword(encryptedPassword);\n         setPasswordEncryptionVersion(algorithmVersion);\n     }\n-    \n+\n     public Long getId() {\n         return id;\n     }\n@@ -135,7 +149,7 @@ public class BuiltinUser implements Serializable {\n     public void setUserName(String userName) {\n         this.userName = userName;\n     }\n-    \n+\n     public String getEncryptedPassword() {\n         return encryptedPassword;\n     }\n@@ -147,6 +161,7 @@ public class BuiltinUser implements Serializable {\n      * @param encryptedPassword\n      * @deprecated\n      */\n+\n     @Deprecated()\n     public void setEncryptedPassword(String encryptedPassword) {\n         this.encryptedPassword = encryptedPassword;\n@@ -164,13 +179,14 @@ public class BuiltinUser implements Serializable {\n         if (!(object instanceof BuiltinUser)) {\n             return false;\n         }\n+\n         BuiltinUser other = (BuiltinUser) object;\n         return !((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id)));\n     }\n \n     @Override\n     public String toString() {\n-            return \"BuiltinUser{\" + \"id=\" + id + \", userName=\" + userName + '}';\n+        return \"BuiltinUser{\" + \"id=\" + id + \", userName=\" + userName + '}';\n     }\n \n     public int getPasswordEncryptionVersion() {\n@@ -190,8 +206,10 @@ public class BuiltinUser implements Serializable {\n      * \n      * @deprecated\n      */\n+\n     @Deprecated()\n     public AuthenticatedUserDisplayInfo getDisplayInfoForApiCreation() {\n-        return new AuthenticatedUserDisplayInfo(firstName, lastName, email, affiliation, position );\n+        return new AuthenticatedUserDisplayInfo(firstName, lastName, email, affiliation, position);\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/56/BuiltinUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/56/BuiltinUser.java\nindex 9ae4e4b0e87..25e7752d65f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/56/BuiltinUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/56/BuiltinUser.java\n@@ -27,7 +27,7 @@ import org.hibernate.validator.constraints.NotBlank;\n  * @author mbarsinai\n  */\n @NamedQueries({\n-\t\t@NamedQuery( name=\"BuiltinUser.findAll\",\n+   @NamedQuery( name=\"BuiltinUser.findAll\",\n \t\t\t\tquery = \"SELECT u FROM BuiltinUser u ORDER BY u.userName\"),\n \t\t@NamedQuery( name=\"BuiltinUser.findByUserName\",\n \t\t\t\tquery = \"SELECT u FROM BuiltinUser u WHERE LOWER(u.userName)=LOWER(:userName)\"),\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/56/BuiltinUser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/56/BuiltinUser.java\nindex 9ae4e4b0e87..6e8adf46227 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/56/BuiltinUser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/56/BuiltinUser.java\n@@ -27,7 +27,7 @@ import org.hibernate.validator.constraints.NotBlank;\n  * @author mbarsinai\n  */\n @NamedQueries({\n-\t\t@NamedQuery( name=\"BuiltinUser.findAll\",\n+    @NamedQuery( name=\"BuiltinUser.findAll\",\n \t\t\t\tquery = \"SELECT u FROM BuiltinUser u ORDER BY u.userName\"),\n \t\t@NamedQuery( name=\"BuiltinUser.findByUserName\",\n \t\t\t\tquery = \"SELECT u FROM BuiltinUser u WHERE LOWER(u.userName)=LOWER(:userName)\"),\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}