{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1249",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1249/SchemaRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1249/SchemaRule.java\nindex 4b367e6ab8e..524e5cf9abb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1249/SchemaRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1249/SchemaRule.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.storageengine.api.schema;\n \n import org.neo4j.internal.kernel.api.schema.LabelSchemaDescriptor;\n@@ -34,151 +35,152 @@ import org.neo4j.kernel.impl.store.record.IndexRule;\n  */\n public abstract class SchemaRule implements SchemaDescriptorSupplier\n {\n-    protected final long id;\n-    protected final String name;\n-\n-    protected SchemaRule( long id )\n+  protected final long id;\n+  protected final String name;\n+\n+  protected SchemaRule(long id)\n+  {\n+    this(id, null);\n+  }\n+\n+  protected SchemaRule(long id, String name)\n+  {\n+    this.id = id;\n+    this.name = name == null ? generateName(id, getClass()) : checkName(name);\n+  }\n+\n+  private String checkName(String name)\n+  {\n+    int length = name.length();\n+    if (length == 0)\n     {\n-        this( id, null );\n+      throw new IllegalArgumentException(\"Schema rule name cannot be the empty string\");\n     }\n-\n-    protected SchemaRule( long id, String name )\n+    for (int i = 0; i < length; i++)\n     {\n-        this.id = id;\n-        this.name = name == null ? generateName( id, getClass() ) : checkName( name );\n+      char ch = name.charAt(i);\n+      if (ch == '\\0')\n+      {\n+        throw new IllegalArgumentException(\"Illegal schema rule name: '\" + name + \"'\");\n+      }\n     }\n-\n-    private String checkName( String name )\n+    return name;\n+  }\n+\n+  /**\n+   * The persistence id for this rule.\n+   */\n+  public final long getId()\n+  {\n+    return this.id;\n+  }\n+\n+  /**\n+   * @return The (possibly user supplied) name of this schema rule.\n+   */\n+  public final String getName()\n+  {\n+    return name;\n+  }\n+\n+  public abstract byte[] serialize();\n+\n+  public static String generateName(long id, Class<? extends SchemaRule> type)\n+  {\n+    if (type == IndexRule.class)\n+    {\n+      return \"index_\" + id;\n+    }\n+    if (type == ConstraintRule.class)\n     {\n-        int length = name.length();\n-        if ( length == 0 )\n-        {\n-            throw new IllegalArgumentException( \"Schema rule name cannot be the empty string\" );\n-        }\n-        for ( int i = 0; i < length; i++ )\n-        {\n-            char ch = name.charAt( i );\n-            if ( ch == '\\0' )\n-            {\n-                throw new IllegalArgumentException( \"Illegal schema rule name: '\" + name + \"'\" );\n-            }\n-        }\n-        return name;\n+      return \"constraint_\" + id;\n+    }\n+    return \"schema_\" + id;\n+  }\n+\n+  /**\n+   * This enum is used for the legacy schema store, and should not be extended.\n+   *\n+   * @see org.neo4j.kernel.impl.store.record.SchemaRuleSerialization for the new (de)serialisation code instead.\n+   */\n+  @Deprecated\n+  public enum Kind\n+  {\n+    INDEX_RULE(\"Index\"),\n+    CONSTRAINT_INDEX_RULE(\"Constraint index\"),\n+    UNIQUENESS_CONSTRAINT(\"Uniqueness constraint\"),\n+    NODE_PROPERTY_EXISTENCE_CONSTRAINT(\"Node property existence constraint\"),\n+    RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT(\"Relationship property existence constraint\");\n+\n+    private static final Kind[] ALL = values();\n+\n+    private final String userString;\n+\n+    Kind(String userString)\n+    {\n+      this.userString = userString;\n     }\n \n-    /**\n-     * The persistence id for this rule.\n-     */\n-    public final long getId()\n+    public byte id()\n     {\n-        return this.id;\n+      return (byte) (ordinal() + 1);\n     }\n \n-    /**\n-     * @return The (possibly user supplied) name of this schema rule.\n-     */\n-    public final String getName()\n+    public String userString()\n     {\n-        return name;\n+      return userString;\n     }\n \n-    public abstract byte[] serialize();\n+    public static Kind forId(byte id) throws MalformedSchemaRuleException\n+    {\n+      if (id >= 1 && id <= ALL.length)\n+      {\n+        return values()[id - 1];\n+      }\n+      throw new MalformedSchemaRuleException(null, \"Unknown kind id %d\", id);\n+    }\n \n-    public static String generateName( long id, Class<? extends SchemaRule> type )\n+    public static Kind map(SchemaIndexDescriptor descriptor)\n     {\n-        if ( type == IndexRule.class )\n-        {\n-            return \"index_\" + id;\n-        }\n-        if ( type == ConstraintRule.class )\n-        {\n-            return \"constraint_\" + id;\n-        }\n-        return \"schema_\" + id;\n+      switch (descriptor.type())\n+      {\n+        case GENERAL:\n+          return INDEX_RULE;\n+        case UNIQUE:\n+          return CONSTRAINT_INDEX_RULE;\n+        default:\n+          throw new IllegalStateException(\n+              \"Cannot map descriptor type to legacy schema rule: \" + descriptor.type());\n+      }\n     }\n \n-    /**\n-     * This enum is used for the legacy schema store, and should not be extended.\n-     * @see org.neo4j.kernel.impl.store.record.SchemaRuleSerialization for the new (de)serialisation code instead.\n-     */\n-    @Deprecated\n-    public enum Kind\n+    public static Kind map(ConstraintDescriptor descriptor)\n     {\n-        INDEX_RULE( \"Index\" ),\n-        CONSTRAINT_INDEX_RULE( \"Constraint index\" ),\n-        UNIQUENESS_CONSTRAINT( \"Uniqueness constraint\" ),\n-        NODE_PROPERTY_EXISTENCE_CONSTRAINT( \"Node property existence constraint\" ),\n-        RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT( \"Relationship property existence constraint\" );\n-\n-        private static final Kind[] ALL = values();\n-\n-        private final String userString;\n-\n-        Kind( String userString )\n-        {\n-            this.userString = userString;\n-        }\n-\n-        public byte id()\n-        {\n-            return (byte) (ordinal() + 1);\n-        }\n-\n-        public String userString()\n-        {\n-            return userString;\n-        }\n-\n-        public static Kind forId( byte id ) throws MalformedSchemaRuleException\n-        {\n-            if ( id >= 1 && id <= ALL.length )\n-            {\n-                return values()[id - 1];\n-            }\n-            throw new MalformedSchemaRuleException( null, \"Unknown kind id %d\", id );\n-        }\n-\n-        public static Kind map( SchemaIndexDescriptor descriptor )\n-        {\n-            switch ( descriptor.type() )\n-            {\n-            case GENERAL:\n-                return INDEX_RULE;\n-            case UNIQUE:\n-                return CONSTRAINT_INDEX_RULE;\n-            default:\n-                throw new IllegalStateException(\n-                        \"Cannot map descriptor type to legacy schema rule: \" + descriptor.type() );\n-            }\n-        }\n-\n-        public static Kind map( ConstraintDescriptor descriptor )\n-        {\n-            switch ( descriptor.type() )\n-            {\n-            case UNIQUE:\n-                return UNIQUENESS_CONSTRAINT;\n-            case EXISTS:\n-                return descriptor.schema().computeWith( existenceKindMapper );\n-            default:\n-                throw new IllegalStateException(\n-                        \"Cannot map descriptor type to legacy schema rule: \" + descriptor.type() );\n-            }\n-        }\n-\n-        private static SchemaComputer<Kind> existenceKindMapper = new SchemaComputer<Kind>()\n-        {\n-            @Override\n-            public Kind computeSpecific( LabelSchemaDescriptor schema )\n-            {\n-                return NODE_PROPERTY_EXISTENCE_CONSTRAINT;\n-            }\n-\n-            @Override\n-            public Kind computeSpecific( RelationTypeSchemaDescriptor schema )\n-            {\n-                return RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT;\n-            }\n-        };\n+      switch (descriptor.type())\n+      {\n+        case UNIQUE:\n+          return UNIQUENESS_CONSTRAINT;\n+        case EXISTS:\n+          return descriptor.schema().computeWith(existenceKindMapper);\n+        default:\n+          throw new IllegalStateException(\n+              \"Cannot map descriptor type to legacy schema rule: \" + descriptor.type());\n+      }\n     }\n+\n+    private static SchemaComputer<Kind> existenceKindMapper = new SchemaComputer<Kind>()\n+    {\n+      @Override\n+      public Kind computeSpecific(LabelSchemaDescriptor schema)\n+      {\n+        return NODE_PROPERTY_EXISTENCE_CONSTRAINT;\n+      }\n+\n+      @Override\n+      public Kind computeSpecific(RelationTypeSchemaDescriptor schema)\n+      {\n+        return RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 208
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 293).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1249/SchemaRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1249/SchemaRule.java\nindex 4b367e6ab8e..572f82d4e49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1249/SchemaRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1249/SchemaRule.java\n@@ -90,7 +90,8 @@ public abstract class SchemaRule implements SchemaDescriptorSupplier\n         {\n             return \"index_\" + id;\n         }\n-        if ( type == ConstraintRule.class )\n+\n+if ( type == ConstraintRule.class )\n         {\n             return \"constraint_\" + id;\n         }\n@@ -104,11 +105,7 @@ public abstract class SchemaRule implements SchemaDescriptorSupplier\n     @Deprecated\n     public enum Kind\n     {\n-        INDEX_RULE( \"Index\" ),\n-        CONSTRAINT_INDEX_RULE( \"Constraint index\" ),\n-        UNIQUENESS_CONSTRAINT( \"Uniqueness constraint\" ),\n-        NODE_PROPERTY_EXISTENCE_CONSTRAINT( \"Node property existence constraint\" ),\n-        RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT( \"Relationship property existence constraint\" );\n+        INDEX_RULE( \"Index\" ), CONSTRAINT_INDEX_RULE( \"Constraint index\" ), UNIQUENESS_CONSTRAINT( \"Uniqueness constraint\" ), NODE_PROPERTY_EXISTENCE_CONSTRAINT( \"Node property existence constraint\" ), RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT( \"Relationship property existence constraint\" );\n \n         private static final Kind[] ALL = values();\n \n@@ -121,7 +118,7 @@ public abstract class SchemaRule implements SchemaDescriptorSupplier\n \n         public byte id()\n         {\n-            return (byte) (ordinal() + 1);\n+            return (byte) (ordinal() + 1 );\n         }\n \n         public String userString()\n@@ -147,9 +144,8 @@ public abstract class SchemaRule implements SchemaDescriptorSupplier\n             case UNIQUE:\n                 return CONSTRAINT_INDEX_RULE;\n             default:\n-                throw new IllegalStateException(\n-                        \"Cannot map descriptor type to legacy schema rule: \" + descriptor.type() );\n-            }\n+                throw new IllegalStateException( \"Cannot map descriptor type to legacy schema rule: \" + descriptor.type() );\n+    }\n         }\n \n         public static Kind map( ConstraintDescriptor descriptor )\n@@ -161,9 +157,8 @@ public abstract class SchemaRule implements SchemaDescriptorSupplier\n             case EXISTS:\n                 return descriptor.schema().computeWith( existenceKindMapper );\n             default:\n-                throw new IllegalStateException(\n-                        \"Cannot map descriptor type to legacy schema rule: \" + descriptor.type() );\n-            }\n+                throw new IllegalStateException( \"Cannot map descriptor type to legacy schema rule: \" + descriptor.type() );\n+    }\n         }\n \n         private static SchemaComputer<Kind> existenceKindMapper = new SchemaComputer<Kind>()\n@@ -181,4 +176,4 @@ public abstract class SchemaRule implements SchemaDescriptorSupplier\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}