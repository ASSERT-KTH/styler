{
    "project_name": "Activiti-Activiti",
    "error_id": "930",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.bpmn.behavior;\n\nimport org.activiti.bpmn.model.Signal;\nimport org.activiti.bpmn.model.SignalEventDefinition;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/930/IntermediateThrowSignalEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/930/IntermediateThrowSignalEventActivityBehavior.java\nindex 486269a5d1d..72b15baf110 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/930/IntermediateThrowSignalEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/930/IntermediateThrowSignalEventActivityBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.bpmn.model.Signal;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/930/IntermediateThrowSignalEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/930/IntermediateThrowSignalEventActivityBehavior.java\nindex 486269a5d1d..4da7213724e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/930/IntermediateThrowSignalEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/930/IntermediateThrowSignalEventActivityBehavior.java\n@@ -74,24 +74,24 @@ public class IntermediateThrowSignalEventActivityBehavior extends AbstractBpmnAc\n         if (processInstanceScope) {\n             subscriptionEntities = eventSubscriptionEntityManager\n                     .findSignalEventSubscriptionsByProcessInstanceAndEventName(execution.getProcessInstanceId(),\n-                                                                               eventSubscriptionName);\n+                            eventSubscriptionName);\n         } else {\n             subscriptionEntities = eventSubscriptionEntityManager\n                     .findSignalEventSubscriptionsByEventName(eventSubscriptionName,\n-                                                             execution.getTenantId());\n+                            execution.getTenantId());\n         }\n \n         for (SignalEventSubscriptionEntity signalEventSubscriptionEntity : subscriptionEntities) {\n             Map<String, Object> signalVariables = Optional.ofNullable(execution.getVariables())\n-                                                          .filter(it -> !it.isEmpty())\n-                                                          .orElse(null);\n+                    .filter(it -> !it.isEmpty())\n+                    .orElse(null);\n \n             eventSubscriptionEntityManager.eventReceived(signalEventSubscriptionEntity,\n-                                                         signalVariables,\n-                                                         signalEventDefinition.isAsync());\n+                    signalVariables,\n+                    signalEventDefinition.isAsync());\n         }\n \n         Context.getAgenda().planTakeOutgoingSequenceFlowsOperation((ExecutionEntity) execution,\n-                                                                   true);\n+                true);\n     }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/930/IntermediateThrowSignalEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/930/IntermediateThrowSignalEventActivityBehavior.java\nindex 486269a5d1d..0a9385323fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/930/IntermediateThrowSignalEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/930/IntermediateThrowSignalEventActivityBehavior.java\n@@ -27,71 +27,60 @@ import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntityManage\n import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n import org.activiti.engine.impl.persistence.entity.SignalEventSubscriptionEntity;\n import org.apache.commons.lang3.StringUtils;\n-\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n \n-public class IntermediateThrowSignalEventActivityBehavior extends AbstractBpmnActivityBehavior {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    protected final SignalEventDefinition signalEventDefinition;\n-    protected String signalEventName;\n-    protected String signalExpression;\n-    protected boolean processInstanceScope;\n \n-    public IntermediateThrowSignalEventActivityBehavior(SignalEventDefinition signalEventDefinition,\n-                                                        Signal signal) {\n-        if (signal != null) {\n-            signalEventName = signal.getName();\n-            if (Signal.SCOPE_PROCESS_INSTANCE.equals(signal.getScope())) {\n-                this.processInstanceScope = true;\n-            }\n-        } else if (StringUtils.isNotEmpty(signalEventDefinition.getSignalRef())) {\n-            signalEventName = signalEventDefinition.getSignalRef();\n-        } else {\n-            signalExpression = signalEventDefinition.getSignalExpression();\n-        }\n+public class IntermediateThrowSignalEventActivityBehavior extends AbstractBpmnActivityBehavior {\n \n-        this.signalEventDefinition = signalEventDefinition;\n+  private static final long serialVersionUID = 1L;\n+  protected final SignalEventDefinition signalEventDefinition;\n+  protected String signalEventName;\n+  protected String signalExpression;\n+  protected boolean processInstanceScope;\n+\n+  public IntermediateThrowSignalEventActivityBehavior(SignalEventDefinition signalEventDefinition, Signal signal) {\n+    if (signal != null) {\n+      signalEventName = signal.getName();\n+      if (Signal.SCOPE_PROCESS_INSTANCE.equals(signal.getScope())) {\n+        this.processInstanceScope = true;\n+      }\n+    } else if (StringUtils.isNotEmpty(signalEventDefinition.getSignalRef())) {\n+      signalEventName = signalEventDefinition.getSignalRef();\n+    } else {\n+      signalExpression = signalEventDefinition.getSignalExpression();\n+    }\n+    this.signalEventDefinition = signalEventDefinition;\n+  }\n+\n+  public void execute(DelegateExecution execution) {\n+    CommandContext commandContext = Context.getCommandContext();\n+    String eventSubscriptionName = null;\n+    if (signalEventName != null) {\n+      eventSubscriptionName = signalEventName;\n+    } else {\n+      Expression expressionObject = commandContext.getProcessEngineConfiguration().getExpressionManager().createExpression(signalExpression);\n+      eventSubscriptionName = expressionObject.getValue(execution).toString();\n     }\n \n-    public void execute(DelegateExecution execution) {\n-\n-        CommandContext commandContext = Context.getCommandContext();\n-\n-        String eventSubscriptionName = null;\n-        if (signalEventName != null) {\n-            eventSubscriptionName = signalEventName;\n-        } else {\n-            Expression expressionObject = commandContext.getProcessEngineConfiguration().getExpressionManager().createExpression(signalExpression);\n-            eventSubscriptionName = expressionObject.getValue(execution).toString();\n-        }\n-\n-        EventSubscriptionEntityManager eventSubscriptionEntityManager = commandContext.getEventSubscriptionEntityManager();\n-        List<SignalEventSubscriptionEntity> subscriptionEntities = null;\n-        if (processInstanceScope) {\n-            subscriptionEntities = eventSubscriptionEntityManager\n-                    .findSignalEventSubscriptionsByProcessInstanceAndEventName(execution.getProcessInstanceId(),\n-                                                                               eventSubscriptionName);\n-        } else {\n-            subscriptionEntities = eventSubscriptionEntityManager\n-                    .findSignalEventSubscriptionsByEventName(eventSubscriptionName,\n-                                                             execution.getTenantId());\n-        }\n-\n-        for (SignalEventSubscriptionEntity signalEventSubscriptionEntity : subscriptionEntities) {\n-            Map<String, Object> signalVariables = Optional.ofNullable(execution.getVariables())\n-                                                          .filter(it -> !it.isEmpty())\n-                                                          .orElse(null);\n-\n-            eventSubscriptionEntityManager.eventReceived(signalEventSubscriptionEntity,\n-                                                         signalVariables,\n-                                                         signalEventDefinition.isAsync());\n-        }\n+    EventSubscriptionEntityManager eventSubscriptionEntityManager = commandContext.getEventSubscriptionEntityManager();\n+    List<SignalEventSubscriptionEntity> subscriptionEntities = null;\n+    if (processInstanceScope) {\n+      subscriptionEntities = eventSubscriptionEntityManager.findSignalEventSubscriptionsByProcessInstanceAndEventName(execution.getProcessInstanceId(),\n+                                                                                                                      eventSubscriptionName);\n+    } else {\n+      subscriptionEntities = eventSubscriptionEntityManager.findSignalEventSubscriptionsByEventName(eventSubscriptionName,\n+                                                                                                    execution.getTenantId());\n+    }\n \n-        Context.getAgenda().planTakeOutgoingSequenceFlowsOperation((ExecutionEntity) execution,\n-                                                                   true);\n+    for (SignalEventSubscriptionEntity signalEventSubscriptionEntity : subscriptionEntities) {\n+        Map<String, Object> signalVariables = Optional.ofNullable(execution.getVariables()).filter(it -> !it.isEmpty()).orElse(null);\n+        eventSubscriptionEntityManager.eventReceived(signalEventSubscriptionEntity,\n+                                                     signalVariables,\n+                                                     signalEventDefinition.isAsync());\n     }\n-}\n+    Context.getAgenda().planTakeOutgoingSequenceFlowsOperation((ExecutionEntity) execution, true);\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 91
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/930/IntermediateThrowSignalEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/930/IntermediateThrowSignalEventActivityBehavior.java\nindex 486269a5d1d..72b15baf110 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/930/IntermediateThrowSignalEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/930/IntermediateThrowSignalEventActivityBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.bpmn.model.Signal;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/930/IntermediateThrowSignalEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/930/IntermediateThrowSignalEventActivityBehavior.java\nindex 486269a5d1d..72b15baf110 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/930/IntermediateThrowSignalEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/930/IntermediateThrowSignalEventActivityBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.bpmn.model.Signal;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}