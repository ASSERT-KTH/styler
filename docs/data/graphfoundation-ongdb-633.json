{
    "project_name": "graphfoundation-ongdb",
    "error_id": "633",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "165",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "169",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "173",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "179",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/633/GraphDbStructureGuide.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/633/GraphDbStructureGuide.java\nindex 3b7bebb5325..ae6d0b2a92a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/633/GraphDbStructureGuide.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/633/GraphDbStructureGuide.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.dbstructure;\n \n import java.util.Iterator;\n@@ -57,215 +58,211 @@ import static org.neo4j.kernel.api.StatementConstants.ANY_RELATIONSHIP_TYPE;\n \n public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n {\n-    private static RelationshipType WILDCARD_REL_TYPE = () -> \"\";\n-\n-    private final GraphDatabaseService db;\n-    private final ThreadToStatementContextBridge bridge;\n-\n-    public GraphDbStructureGuide( GraphDatabaseService graph )\n+  private static RelationshipType WILDCARD_REL_TYPE = () -> \"\";\n+\n+  private final GraphDatabaseService db;\n+  private final ThreadToStatementContextBridge bridge;\n+\n+  public GraphDbStructureGuide(GraphDatabaseService graph)\n+  {\n+    this.db = graph;\n+    DependencyResolver dependencies = ((GraphDatabaseAPI) graph).getDependencyResolver();\n+    this.bridge = dependencies.resolveDependency(ThreadToStatementContextBridge.class);\n+  }\n+\n+  @Override\n+  public void accept(DbStructureVisitor visitor)\n+  {\n+    try (Transaction tx = db.beginTx())\n     {\n-        this.db = graph;\n-        DependencyResolver dependencies = ((GraphDatabaseAPI) graph).getDependencyResolver();\n-        this.bridge = dependencies.resolveDependency( ThreadToStatementContextBridge.class );\n+      showStructure(bridge.getKernelTransactionBoundToThisThread(true), visitor);\n+      tx.success();\n     }\n+  }\n \n-    @Override\n-    public void accept( DbStructureVisitor visitor )\n-    {\n-        try ( Transaction tx = db.beginTx() )\n-        {\n-            showStructure( bridge.getKernelTransactionBoundToThisThread( true ), visitor );\n-            tx.success();\n-        }\n-    }\n+  private void showStructure(KernelTransaction ktx, DbStructureVisitor visitor)\n+  {\n \n-    private void showStructure( KernelTransaction ktx, DbStructureVisitor visitor )\n+    try\n     {\n-\n-        try\n-        {\n-            showTokens( visitor, ktx );\n-            showSchema( visitor, ktx );\n-            showStatistics( visitor, ktx );\n-        }\n-        catch ( KernelException e )\n-        {\n-            throw new IllegalStateException( \"Kernel exception when traversing database schema structure and statistics. \" +\n-                    \"This is not expected to happen.\", e );\n-        }\n-    }\n-\n-    private void showTokens( DbStructureVisitor visitor, KernelTransaction ktx )\n+      showTokens(visitor, ktx);\n+      showSchema(visitor, ktx);\n+      showStatistics(visitor, ktx);\n+    } catch (KernelException e)\n     {\n-        showLabels( ktx, visitor );\n-        showPropertyKeys( ktx, visitor );\n-        showRelTypes( ktx, visitor );\n+      throw new IllegalStateException(\"Kernel exception when traversing database schema structure and statistics. \" +\n+          \"This is not expected to happen.\", e);\n     }\n-\n-    private void showLabels( KernelTransaction ktx, DbStructureVisitor visitor )\n+  }\n+\n+  private void showTokens(DbStructureVisitor visitor, KernelTransaction ktx)\n+  {\n+    showLabels(ktx, visitor);\n+    showPropertyKeys(ktx, visitor);\n+    showRelTypes(ktx, visitor);\n+  }\n+\n+  private void showLabels(KernelTransaction ktx, DbStructureVisitor visitor)\n+  {\n+    for (Label label : db.getAllLabels())\n     {\n-        for ( Label label : db.getAllLabels() )\n-        {\n-            int labelId = ktx.tokenRead().nodeLabel( label.name() );\n-            visitor.visitLabel( labelId, label.name() );\n-        }\n+      int labelId = ktx.tokenRead().nodeLabel(label.name());\n+      visitor.visitLabel(labelId, label.name());\n     }\n+  }\n \n-    private void showPropertyKeys( KernelTransaction ktx, DbStructureVisitor visitor )\n+  private void showPropertyKeys(KernelTransaction ktx, DbStructureVisitor visitor)\n+  {\n+    for (String propertyKeyName : db.getAllPropertyKeys())\n     {\n-        for ( String propertyKeyName : db.getAllPropertyKeys() )\n-        {\n-            int propertyKeyId = ktx.tokenRead().propertyKey( propertyKeyName );\n-            visitor.visitPropertyKey( propertyKeyId, propertyKeyName );\n-        }\n+      int propertyKeyId = ktx.tokenRead().propertyKey(propertyKeyName);\n+      visitor.visitPropertyKey(propertyKeyId, propertyKeyName);\n     }\n+  }\n \n-    private void showRelTypes( KernelTransaction ktx, DbStructureVisitor visitor )\n+  private void showRelTypes(KernelTransaction ktx, DbStructureVisitor visitor)\n+  {\n+    for (RelationshipType relType : db.getAllRelationshipTypes())\n     {\n-        for ( RelationshipType relType : db.getAllRelationshipTypes() )\n-        {\n-            int relTypeId = ktx.tokenRead().relationshipType( relType.name() );\n-            visitor.visitRelationshipType( relTypeId, relType.name() );\n-        }\n+      int relTypeId = ktx.tokenRead().relationshipType(relType.name());\n+      visitor.visitRelationshipType(relTypeId, relType.name());\n     }\n+  }\n \n-    private void showSchema( DbStructureVisitor visitor, KernelTransaction ktx ) throws IndexNotFoundKernelException\n-    {\n-        TokenNameLookup nameLookup = new SilentTokenNameLookup( ktx.tokenRead() );\n+  private void showSchema(DbStructureVisitor visitor, KernelTransaction ktx) throws IndexNotFoundKernelException\n+  {\n+    TokenNameLookup nameLookup = new SilentTokenNameLookup(ktx.tokenRead());\n \n-        showIndices( visitor, ktx, nameLookup );\n-        showUniqueConstraints( visitor, ktx, nameLookup );\n-    }\n+    showIndices(visitor, ktx, nameLookup);\n+    showUniqueConstraints(visitor, ktx, nameLookup);\n+  }\n \n-    private void showIndices( DbStructureVisitor visitor, KernelTransaction ktx, TokenNameLookup nameLookup )\n-            throws IndexNotFoundKernelException\n+  private void showIndices(DbStructureVisitor visitor, KernelTransaction ktx, TokenNameLookup nameLookup)\n+      throws IndexNotFoundKernelException\n+  {\n+    SchemaRead schemaRead = ktx.schemaRead();\n+    for (IndexReference reference : loop(sortByType(schemaRead.indexesGetAll())))\n     {\n-        SchemaRead schemaRead = ktx.schemaRead();\n-        for ( IndexReference reference : loop( sortByType( schemaRead.indexesGetAll() ) ) )\n-        {\n-            String userDescription = SchemaDescriptorFactory.forLabel( reference.label(), reference.properties() )\n-                    .userDescription( nameLookup );\n-            double uniqueValuesPercentage = schemaRead.indexUniqueValuesSelectivity( reference );\n-            long size = schemaRead.indexSize( reference );\n-            visitor.visitIndex( DefaultIndexReference.toDescriptor( reference ), userDescription, uniqueValuesPercentage, size );\n-        }\n+      String userDescription = SchemaDescriptorFactory.forLabel(reference.label(), reference.properties())\n+          .userDescription(nameLookup);\n+      double uniqueValuesPercentage = schemaRead.indexUniqueValuesSelectivity(reference);\n+      long size = schemaRead.indexSize(reference);\n+      visitor.visitIndex(DefaultIndexReference.toDescriptor(reference), userDescription, uniqueValuesPercentage, size);\n     }\n+  }\n \n-    private void showUniqueConstraints( DbStructureVisitor visitor, KernelTransaction ktx, TokenNameLookup nameLookup )\n+  private void showUniqueConstraints(DbStructureVisitor visitor, KernelTransaction ktx, TokenNameLookup nameLookup)\n+  {\n+    Iterator<ConstraintDescriptor> constraints = ktx.schemaRead().constraintsGetAll();\n+    while (constraints.hasNext())\n     {\n-        Iterator<ConstraintDescriptor> constraints = ktx.schemaRead().constraintsGetAll();\n-        while ( constraints.hasNext() )\n-        {\n-            ConstraintDescriptor constraint = constraints.next();\n-            String userDescription = constraint.prettyPrint( nameLookup );\n-\n-            if ( constraint instanceof UniquenessConstraintDescriptor )\n-            {\n-                visitor.visitUniqueConstraint( (UniquenessConstraintDescriptor) constraint, userDescription );\n-            }\n-            else if ( constraint instanceof NodeExistenceConstraintDescriptor )\n-            {\n-                NodeExistenceConstraintDescriptor existenceConstraint = (NodeExistenceConstraintDescriptor) constraint;\n-                visitor.visitNodePropertyExistenceConstraint( existenceConstraint, userDescription );\n-            }\n-            else if ( constraint instanceof RelExistenceConstraintDescriptor )\n-            {\n-                RelExistenceConstraintDescriptor existenceConstraint = (RelExistenceConstraintDescriptor) constraint;\n-                visitor.visitRelationshipPropertyExistenceConstraint( existenceConstraint, userDescription );\n-            }\n-            else if ( constraint instanceof NodeKeyConstraintDescriptor )\n-            {\n-                NodeKeyConstraintDescriptor nodeKeyConstraint = (NodeKeyConstraintDescriptor) constraint;\n-                visitor.visitNodeKeyConstraint( nodeKeyConstraint, userDescription );\n-            }\n-            else\n-            {\n-                throw new IllegalArgumentException( \"Unknown constraint type: \" + constraint.getClass() + \", \" +\n-                                                    \"constraint: \" + constraint );\n-            }\n-        }\n+      ConstraintDescriptor constraint = constraints.next();\n+      String userDescription = constraint.prettyPrint(nameLookup);\n+\n+      if (constraint instanceof UniquenessConstraintDescriptor)\n+      {\n+        visitor.visitUniqueConstraint((UniquenessConstraintDescriptor) constraint, userDescription);\n+      } else if (constraint instanceof NodeExistenceConstraintDescriptor)\n+      {\n+        NodeExistenceConstraintDescriptor existenceConstraint = (NodeExistenceConstraintDescriptor) constraint;\n+        visitor.visitNodePropertyExistenceConstraint(existenceConstraint, userDescription);\n+      } else if (constraint instanceof RelExistenceConstraintDescriptor)\n+      {\n+        RelExistenceConstraintDescriptor existenceConstraint = (RelExistenceConstraintDescriptor) constraint;\n+        visitor.visitRelationshipPropertyExistenceConstraint(existenceConstraint, userDescription);\n+      } else if (constraint instanceof NodeKeyConstraintDescriptor)\n+      {\n+        NodeKeyConstraintDescriptor nodeKeyConstraint = (NodeKeyConstraintDescriptor) constraint;\n+        visitor.visitNodeKeyConstraint(nodeKeyConstraint, userDescription);\n+      } else\n+      {\n+        throw new IllegalArgumentException(\"Unknown constraint type: \" + constraint.getClass() + \", \" +\n+            \"constraint: \" + constraint);\n+      }\n     }\n-\n-    private void showStatistics( DbStructureVisitor visitor, KernelTransaction ktx )\n+  }\n+\n+  private void showStatistics(DbStructureVisitor visitor, KernelTransaction ktx)\n+  {\n+    showNodeCounts(ktx, visitor);\n+    showRelCounts(ktx, visitor);\n+  }\n+\n+  private void showNodeCounts(KernelTransaction ktx, DbStructureVisitor visitor)\n+  {\n+    Read read = ktx.dataRead();\n+    visitor.visitAllNodesCount(read.countsForNode(ANY_LABEL));\n+    for (Label label : db.getAllLabels())\n     {\n-        showNodeCounts( ktx, visitor );\n-        showRelCounts( ktx, visitor );\n+      int labelId = ktx.tokenRead().nodeLabel(label.name());\n+      visitor.visitNodeCount(labelId, label.name(), read.countsForNode(labelId));\n     }\n+  }\n \n-    private void showNodeCounts( KernelTransaction ktx, DbStructureVisitor visitor )\n-    {\n-        Read read = ktx.dataRead();\n-        visitor.visitAllNodesCount( read.countsForNode( ANY_LABEL ) );\n-        for ( Label label : db.getAllLabels() )\n-        {\n-            int labelId = ktx.tokenRead().nodeLabel( label.name() );\n-            visitor.visitNodeCount( labelId, label.name(), read.countsForNode( labelId ) );\n-        }\n-    }\n-    private void showRelCounts( KernelTransaction ktx, DbStructureVisitor visitor )\n-    {\n-        // all wildcards\n-        noSide( ktx, visitor, WILDCARD_REL_TYPE, ANY_RELATIONSHIP_TYPE );\n-\n-        TokenRead tokenRead = ktx.tokenRead();\n-        // one label only\n-        for ( Label label : db.getAllLabels() )\n-        {\n-            int labelId = tokenRead.nodeLabel( label.name() );\n-\n-            leftSide( ktx, visitor, label, labelId, WILDCARD_REL_TYPE, ANY_RELATIONSHIP_TYPE );\n-            rightSide( ktx, visitor, label, labelId, WILDCARD_REL_TYPE, ANY_RELATIONSHIP_TYPE );\n-        }\n-\n-        // fixed rel type\n-        for ( RelationshipType relType : db.getAllRelationshipTypes() )\n-        {\n-            int relTypeId = tokenRead.relationshipType( relType.name() );\n-            noSide( ktx, visitor, relType, relTypeId );\n-\n-            for ( Label label : db.getAllLabels() )\n-            {\n-                int labelId = tokenRead.nodeLabel( label.name() );\n-\n-                // wildcard on right\n-                leftSide( ktx, visitor, label, labelId, relType, relTypeId );\n-\n-                // wildcard on left\n-                rightSide( ktx, visitor, label, labelId, relType, relTypeId );\n-            }\n-        }\n-    }\n+  private void showRelCounts(KernelTransaction ktx, DbStructureVisitor visitor)\n+  {\n+    // all wildcards\n+    noSide(ktx, visitor, WILDCARD_REL_TYPE, ANY_RELATIONSHIP_TYPE);\n \n-    private void noSide( KernelTransaction ktx, DbStructureVisitor visitor, RelationshipType relType, int relTypeId )\n+    TokenRead tokenRead = ktx.tokenRead();\n+    // one label only\n+    for (Label label : db.getAllLabels())\n     {\n-        String userDescription = format(\"MATCH ()-[%s]->() RETURN count(*)\", colon( relType.name() ));\n-        long amount = ktx.dataRead().countsForRelationship( ANY_LABEL, relTypeId, ANY_LABEL );\n+      int labelId = tokenRead.nodeLabel(label.name());\n \n-        visitor.visitRelCount( ANY_LABEL, relTypeId, ANY_LABEL, userDescription, amount );\n+      leftSide(ktx, visitor, label, labelId, WILDCARD_REL_TYPE, ANY_RELATIONSHIP_TYPE);\n+      rightSide(ktx, visitor, label, labelId, WILDCARD_REL_TYPE, ANY_RELATIONSHIP_TYPE);\n     }\n \n-    private void leftSide( KernelTransaction ktx, DbStructureVisitor visitor, Label label, int labelId,\n-            RelationshipType relType, int relTypeId )\n+    // fixed rel type\n+    for (RelationshipType relType : db.getAllRelationshipTypes())\n     {\n-        String userDescription =\n-                format( \"MATCH (%s)-[%s]->() RETURN count(*)\", colon( label.name() ), colon( relType.name() ) );\n-        long amount = ktx.dataRead().countsForRelationship( labelId, relTypeId, ANY_LABEL );\n+      int relTypeId = tokenRead.relationshipType(relType.name());\n+      noSide(ktx, visitor, relType, relTypeId);\n \n-        visitor.visitRelCount( labelId, relTypeId, ANY_LABEL, userDescription, amount );\n-    }\n+      for (Label label : db.getAllLabels())\n+      {\n+        int labelId = tokenRead.nodeLabel(label.name());\n \n-    private void rightSide( KernelTransaction ktx, DbStructureVisitor visitor, Label label, int labelId,\n-            RelationshipType relType, int relTypeId )\n-    {\n-        String userDescription =\n-                format( \"MATCH ()-[%s]->(%s) RETURN count(*)\", colon( relType.name() ), colon( label.name() ) );\n-        long amount = ktx.dataRead().countsForRelationship( ANY_LABEL, relTypeId, labelId );\n+        // wildcard on right\n+        leftSide(ktx, visitor, label, labelId, relType, relTypeId);\n \n-        visitor.visitRelCount( ANY_LABEL, relTypeId, labelId, userDescription, amount );\n-    }\n-\n-    private String colon( String name )\n-    {\n-        return  name.length() == 0 ? name : (\":\" + name);\n+        // wildcard on left\n+        rightSide(ktx, visitor, label, labelId, relType, relTypeId);\n+      }\n     }\n+  }\n+\n+  private void noSide(KernelTransaction ktx, DbStructureVisitor visitor, RelationshipType relType, int relTypeId)\n+  {\n+    String userDescription = format(\"MATCH ()-[%s]->() RETURN count(*)\", colon(relType.name()));\n+    long amount = ktx.dataRead().countsForRelationship(ANY_LABEL, relTypeId, ANY_LABEL);\n+\n+    visitor.visitRelCount(ANY_LABEL, relTypeId, ANY_LABEL, userDescription, amount);\n+  }\n+\n+  private void leftSide(KernelTransaction ktx, DbStructureVisitor visitor, Label label, int labelId,\n+                        RelationshipType relType, int relTypeId)\n+  {\n+    String userDescription =\n+        format(\"MATCH (%s)-[%s]->() RETURN count(*)\", colon(label.name()), colon(relType.name()));\n+    long amount = ktx.dataRead().countsForRelationship(labelId, relTypeId, ANY_LABEL);\n+\n+    visitor.visitRelCount(labelId, relTypeId, ANY_LABEL, userDescription, amount);\n+  }\n+\n+  private void rightSide(KernelTransaction ktx, DbStructureVisitor visitor, Label label, int labelId,\n+                         RelationshipType relType, int relTypeId)\n+  {\n+    String userDescription =\n+        format(\"MATCH ()-[%s]->(%s) RETURN count(*)\", colon(relType.name()), colon(label.name()));\n+    long amount = ktx.dataRead().countsForRelationship(ANY_LABEL, relTypeId, labelId);\n+\n+    visitor.visitRelCount(ANY_LABEL, relTypeId, labelId, userDescription, amount);\n+  }\n+\n+  private String colon(String name)\n+  {\n+    return name.length() == 0 ? name : (\":\" + name);\n+  }\n }\n",
            "diff_size": 261
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/633/GraphDbStructureGuide.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/633/GraphDbStructureGuide.java\nindex 3b7bebb5325..d20f7d26db9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/633/GraphDbStructureGuide.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/633/GraphDbStructureGuide.java\n@@ -58,8 +58,7 @@ import static org.neo4j.kernel.api.StatementConstants.ANY_RELATIONSHIP_TYPE;\n public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n {\n     private static RelationshipType WILDCARD_REL_TYPE = () -> \"\";\n-\n-    private final GraphDatabaseService db;\n+private final GraphDatabaseService db;\n     private final ThreadToStatementContextBridge bridge;\n \n     public GraphDbStructureGuide( GraphDatabaseService graph )\n@@ -81,8 +80,7 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n \n     private void showStructure( KernelTransaction ktx, DbStructureVisitor visitor )\n     {\n-\n-        try\n+try\n         {\n             showTokens( visitor, ktx );\n             showSchema( visitor, ktx );\n@@ -90,9 +88,8 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n         }\n         catch ( KernelException e )\n         {\n-            throw new IllegalStateException( \"Kernel exception when traversing database schema structure and statistics. \" +\n-                    \"This is not expected to happen.\", e );\n-        }\n+            throw new IllegalStateException( \"Kernel exception when traversing database schema structure and statistics. \" + \"This is not expected to happen.\", e );\n+    }\n     }\n \n     private void showTokens( DbStructureVisitor visitor, KernelTransaction ktx )\n@@ -137,15 +134,13 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n         showUniqueConstraints( visitor, ktx, nameLookup );\n     }\n \n-    private void showIndices( DbStructureVisitor visitor, KernelTransaction ktx, TokenNameLookup nameLookup )\n-            throws IndexNotFoundKernelException\n-    {\n+    private void showIndices( DbStructureVisitor visitor, KernelTransaction ktx, TokenNameLookup nameLookup ) throws IndexNotFoundKernelException\n+{\n         SchemaRead schemaRead = ktx.schemaRead();\n         for ( IndexReference reference : loop( sortByType( schemaRead.indexesGetAll() ) ) )\n         {\n-            String userDescription = SchemaDescriptorFactory.forLabel( reference.label(), reference.properties() )\n-                    .userDescription( nameLookup );\n-            double uniqueValuesPercentage = schemaRead.indexUniqueValuesSelectivity( reference );\n+            String userDescription = SchemaDescriptorFactory.forLabel( reference.label(), reference.properties() ).userDescription( nameLookup );\n+    double uniqueValuesPercentage = schemaRead.indexUniqueValuesSelectivity( reference );\n             long size = schemaRead.indexSize( reference );\n             visitor.visitIndex( DefaultIndexReference.toDescriptor( reference ), userDescription, uniqueValuesPercentage, size );\n         }\n@@ -158,8 +153,7 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n         {\n             ConstraintDescriptor constraint = constraints.next();\n             String userDescription = constraint.prettyPrint( nameLookup );\n-\n-            if ( constraint instanceof UniquenessConstraintDescriptor )\n+if ( constraint instanceof UniquenessConstraintDescriptor )\n             {\n                 visitor.visitUniqueConstraint( (UniquenessConstraintDescriptor) constraint, userDescription );\n             }\n@@ -180,9 +174,8 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n             }\n             else\n             {\n-                throw new IllegalArgumentException( \"Unknown constraint type: \" + constraint.getClass() + \", \" +\n-                                                    \"constraint: \" + constraint );\n-            }\n+                throw new IllegalArgumentException( \"Unknown constraint type: \" + constraint.getClass() + \", \" + \"constraint: \" + constraint );\n+    }\n         }\n     }\n \n@@ -206,8 +199,7 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n     {\n         // all wildcards\n         noSide( ktx, visitor, WILDCARD_REL_TYPE, ANY_RELATIONSHIP_TYPE );\n-\n-        TokenRead tokenRead = ktx.tokenRead();\n+TokenRead tokenRead = ktx.tokenRead();\n         // one label only\n         for ( Label label : db.getAllLabels() )\n         {\n@@ -222,8 +214,7 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n         {\n             int relTypeId = tokenRead.relationshipType( relType.name() );\n             noSide( ktx, visitor, relType, relTypeId );\n-\n-            for ( Label label : db.getAllLabels() )\n+for ( Label label : db.getAllLabels() )\n             {\n                 int labelId = tokenRead.nodeLabel( label.name() );\n \n@@ -238,34 +229,29 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n \n     private void noSide( KernelTransaction ktx, DbStructureVisitor visitor, RelationshipType relType, int relTypeId )\n     {\n-        String userDescription = format(\"MATCH ()-[%s]->() RETURN count(*)\", colon( relType.name() ));\n+        String userDescription = format( \"MATCH ()-[%s]->() RETURN count(*)\", colon( relType.name() ));\n         long amount = ktx.dataRead().countsForRelationship( ANY_LABEL, relTypeId, ANY_LABEL );\n-\n-        visitor.visitRelCount( ANY_LABEL, relTypeId, ANY_LABEL, userDescription, amount );\n+visitor.visitRelCount( ANY_LABEL, relTypeId, ANY_LABEL, userDescription, amount );\n     }\n \n     private void leftSide( KernelTransaction ktx, DbStructureVisitor visitor, Label label, int labelId,\n             RelationshipType relType, int relTypeId )\n     {\n-        String userDescription =\n-                format( \"MATCH (%s)-[%s]->() RETURN count(*)\", colon( label.name() ), colon( relType.name() ) );\n-        long amount = ktx.dataRead().countsForRelationship( labelId, relTypeId, ANY_LABEL );\n-\n-        visitor.visitRelCount( labelId, relTypeId, ANY_LABEL, userDescription, amount );\n+        String userDescription = format( \"MATCH (%s)-[%s]->() RETURN count(*)\", colon( label.name() ), colon( relType.name() ) );\n+    long amount = ktx.dataRead().countsForRelationship( labelId, relTypeId, ANY_LABEL );\n+visitor.visitRelCount( labelId, relTypeId, ANY_LABEL, userDescription, amount );\n     }\n \n     private void rightSide( KernelTransaction ktx, DbStructureVisitor visitor, Label label, int labelId,\n             RelationshipType relType, int relTypeId )\n     {\n-        String userDescription =\n-                format( \"MATCH ()-[%s]->(%s) RETURN count(*)\", colon( relType.name() ), colon( label.name() ) );\n-        long amount = ktx.dataRead().countsForRelationship( ANY_LABEL, relTypeId, labelId );\n-\n-        visitor.visitRelCount( ANY_LABEL, relTypeId, labelId, userDescription, amount );\n+        String userDescription = format( \"MATCH ()-[%s]->(%s) RETURN count(*)\", colon( relType.name() ), colon( label.name() ) );\n+    long amount = ktx.dataRead().countsForRelationship( ANY_LABEL, relTypeId, labelId );\n+visitor.visitRelCount( ANY_LABEL, relTypeId, labelId, userDescription, amount );\n     }\n \n     private String colon( String name )\n     {\n-        return  name.length() == 0 ? name : (\":\" + name);\n+        return name.length() == 0 ? name : ( \":\" + name);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "76",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "116",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "126",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "144",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "157",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "157",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "214",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "224",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "229",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/633/GraphDbStructureGuide.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/633/GraphDbStructureGuide.java\nindex 3b7bebb5325..bb22b4c54f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/633/GraphDbStructureGuide.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/633/GraphDbStructureGuide.java\n@@ -20,9 +20,7 @@\n package org.neo4j.kernel.impl.util.dbstructure;\n \n import java.util.Iterator;\n-\n import javax.xml.validation.SchemaFactory;\n-\n import org.neo4j.graphdb.DependencyResolver;\n import org.neo4j.graphdb.GraphDatabaseService;\n import org.neo4j.graphdb.Label;\n@@ -48,17 +46,19 @@ import org.neo4j.kernel.api.schema.constaints.UniquenessConstraintDescriptor;\n import org.neo4j.kernel.impl.api.store.DefaultIndexReference;\n import org.neo4j.kernel.impl.core.ThreadToStatementContextBridge;\n import org.neo4j.kernel.internal.GraphDatabaseAPI;\n-\n import static java.lang.String.format;\n+\n import static org.neo4j.helpers.collection.Iterators.loop;\n+\n import static org.neo4j.internal.kernel.api.IndexReference.sortByType;\n+\n import static org.neo4j.kernel.api.StatementConstants.ANY_LABEL;\n+\n import static org.neo4j.kernel.api.StatementConstants.ANY_RELATIONSHIP_TYPE;\n \n public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n {\n     private static RelationshipType WILDCARD_REL_TYPE = () -> \"\";\n-\n     private final GraphDatabaseService db;\n     private final ThreadToStatementContextBridge bridge;\n \n@@ -72,7 +72,8 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n     @Override\n     public void accept( DbStructureVisitor visitor )\n     {\n-        try ( Transaction tx = db.beginTx() )\n+        try\n+            ( Transaction tx = db.beginTx())\n         {\n             showStructure( bridge.getKernelTransactionBoundToThisThread( true ), visitor );\n             tx.success();\n@@ -81,7 +82,6 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n \n     private void showStructure( KernelTransaction ktx, DbStructureVisitor visitor )\n     {\n-\n         try\n         {\n             showTokens( visitor, ktx );\n@@ -90,8 +90,7 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n         }\n         catch ( KernelException e )\n         {\n-            throw new IllegalStateException( \"Kernel exception when traversing database schema structure and statistics. \" +\n-                    \"This is not expected to happen.\", e );\n+            throw new IllegalStateException( \"Kernel exception when traversing database schema structure and statistics. \" + \"This is not expected to happen.\", e );\n         }\n     }\n \n@@ -104,7 +103,8 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n \n     private void showLabels( KernelTransaction ktx, DbStructureVisitor visitor )\n     {\n-        for ( Label label : db.getAllLabels() )\n+        for( Label label : db.getAllLabels()\n+        )\n         {\n             int labelId = ktx.tokenRead().nodeLabel( label.name() );\n             visitor.visitLabel( labelId, label.name() );\n@@ -113,7 +113,8 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n \n     private void showPropertyKeys( KernelTransaction ktx, DbStructureVisitor visitor )\n     {\n-        for ( String propertyKeyName : db.getAllPropertyKeys() )\n+        for( String propertyKeyName : db.getAllPropertyKeys()\n+        )\n         {\n             int propertyKeyId = ktx.tokenRead().propertyKey( propertyKeyName );\n             visitor.visitPropertyKey( propertyKeyId, propertyKeyName );\n@@ -122,7 +123,8 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n \n     private void showRelTypes( KernelTransaction ktx, DbStructureVisitor visitor )\n     {\n-        for ( RelationshipType relType : db.getAllRelationshipTypes() )\n+        for( RelationshipType relType : db.getAllRelationshipTypes()\n+        )\n         {\n             int relTypeId = ktx.tokenRead().relationshipType( relType.name() );\n             visitor.visitRelationshipType( relTypeId, relType.name() );\n@@ -132,19 +134,17 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n     private void showSchema( DbStructureVisitor visitor, KernelTransaction ktx ) throws IndexNotFoundKernelException\n     {\n         TokenNameLookup nameLookup = new SilentTokenNameLookup( ktx.tokenRead() );\n-\n         showIndices( visitor, ktx, nameLookup );\n         showUniqueConstraints( visitor, ktx, nameLookup );\n     }\n \n-    private void showIndices( DbStructureVisitor visitor, KernelTransaction ktx, TokenNameLookup nameLookup )\n-            throws IndexNotFoundKernelException\n+    private void showIndices( DbStructureVisitor visitor, KernelTransaction ktx, TokenNameLookup nameLookup ) throws IndexNotFoundKernelException\n     {\n         SchemaRead schemaRead = ktx.schemaRead();\n-        for ( IndexReference reference : loop( sortByType( schemaRead.indexesGetAll() ) ) )\n+        for( IndexReference reference : loop( sortByType( schemaRead.indexesGetAll() ) )\n+        )\n         {\n-            String userDescription = SchemaDescriptorFactory.forLabel( reference.label(), reference.properties() )\n-                    .userDescription( nameLookup );\n+            String userDescription = SchemaDescriptorFactory.forLabel( reference.label(), reference.properties() ).userDescription( nameLookup );\n             double uniqueValuesPercentage = schemaRead.indexUniqueValuesSelectivity( reference );\n             long size = schemaRead.indexSize( reference );\n             visitor.visitIndex( DefaultIndexReference.toDescriptor( reference ), userDescription, uniqueValuesPercentage, size );\n@@ -154,35 +154,36 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n     private void showUniqueConstraints( DbStructureVisitor visitor, KernelTransaction ktx, TokenNameLookup nameLookup )\n     {\n         Iterator<ConstraintDescriptor> constraints = ktx.schemaRead().constraintsGetAll();\n-        while ( constraints.hasNext() )\n+        while( constraints.hasNext())\n         {\n             ConstraintDescriptor constraint = constraints.next();\n             String userDescription = constraint.prettyPrint( nameLookup );\n-\n             if ( constraint instanceof UniquenessConstraintDescriptor )\n             {\n                 visitor.visitUniqueConstraint( (UniquenessConstraintDescriptor) constraint, userDescription );\n             }\n-            else if ( constraint instanceof NodeExistenceConstraintDescriptor )\n+            else\n+            if ( constraint instanceof NodeExistenceConstraintDescriptor )\n             {\n                 NodeExistenceConstraintDescriptor existenceConstraint = (NodeExistenceConstraintDescriptor) constraint;\n                 visitor.visitNodePropertyExistenceConstraint( existenceConstraint, userDescription );\n             }\n-            else if ( constraint instanceof RelExistenceConstraintDescriptor )\n-            {\n-                RelExistenceConstraintDescriptor existenceConstraint = (RelExistenceConstraintDescriptor) constraint;\n-                visitor.visitRelationshipPropertyExistenceConstraint( existenceConstraint, userDescription );\n-            }\n-            else if ( constraint instanceof NodeKeyConstraintDescriptor )\n-            {\n-                NodeKeyConstraintDescriptor nodeKeyConstraint = (NodeKeyConstraintDescriptor) constraint;\n-                visitor.visitNodeKeyConstraint( nodeKeyConstraint, userDescription );\n-            }\n             else\n-            {\n-                throw new IllegalArgumentException( \"Unknown constraint type: \" + constraint.getClass() + \", \" +\n-                                                    \"constraint: \" + constraint );\n-            }\n+                if ( constraint instanceof RelExistenceConstraintDescriptor )\n+                {\n+                    RelExistenceConstraintDescriptor existenceConstraint = (RelExistenceConstraintDescriptor) constraint;\n+                    visitor.visitRelationshipPropertyExistenceConstraint( existenceConstraint, userDescription );\n+                }\n+                    else\n+                if ( constraint instanceof NodeKeyConstraintDescriptor )\n+                {\n+                    NodeKeyConstraintDescriptor nodeKeyConstraint = (NodeKeyConstraintDescriptor) constraint;\n+                    visitor.visitNodeKeyConstraint( nodeKeyConstraint, userDescription );\n+                }\n+                    else\n+                {\n+                    throw new IllegalArgumentException( \"Unknown constraint type: \" + constraint.getClass() + \", \" + \"constraint: \" + constraint );\n+                }\n         }\n     }\n \n@@ -196,34 +197,37 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n     {\n         Read read = ktx.dataRead();\n         visitor.visitAllNodesCount( read.countsForNode( ANY_LABEL ) );\n-        for ( Label label : db.getAllLabels() )\n+        for( Label label : db.getAllLabels()\n+        )\n         {\n             int labelId = ktx.tokenRead().nodeLabel( label.name() );\n             visitor.visitNodeCount( labelId, label.name(), read.countsForNode( labelId ) );\n         }\n     }\n+\n     private void showRelCounts( KernelTransaction ktx, DbStructureVisitor visitor )\n     {\n         // all wildcards\n         noSide( ktx, visitor, WILDCARD_REL_TYPE, ANY_RELATIONSHIP_TYPE );\n-\n         TokenRead tokenRead = ktx.tokenRead();\n         // one label only\n-        for ( Label label : db.getAllLabels() )\n+        for( Label label : db.getAllLabels()\n+        )\n         {\n             int labelId = tokenRead.nodeLabel( label.name() );\n-\n             leftSide( ktx, visitor, label, labelId, WILDCARD_REL_TYPE, ANY_RELATIONSHIP_TYPE );\n             rightSide( ktx, visitor, label, labelId, WILDCARD_REL_TYPE, ANY_RELATIONSHIP_TYPE );\n         }\n \n         // fixed rel type\n-        for ( RelationshipType relType : db.getAllRelationshipTypes() )\n+\n+        for( RelationshipType relType : db.getAllRelationshipTypes()\n+        )\n         {\n             int relTypeId = tokenRead.relationshipType( relType.name() );\n             noSide( ktx, visitor, relType, relTypeId );\n-\n-            for ( Label label : db.getAllLabels() )\n+            for( Label label : db.getAllLabels()\n+            )\n             {\n                 int labelId = tokenRead.nodeLabel( label.name() );\n \n@@ -238,34 +242,27 @@ public class GraphDbStructureGuide implements Visitable<DbStructureVisitor>\n \n     private void noSide( KernelTransaction ktx, DbStructureVisitor visitor, RelationshipType relType, int relTypeId )\n     {\n-        String userDescription = format(\"MATCH ()-[%s]->() RETURN count(*)\", colon( relType.name() ));\n+        String userDescription = format( \"MATCH ()-[%s]->() RETURN count(*)\", colon( relType.name() ) );\n         long amount = ktx.dataRead().countsForRelationship( ANY_LABEL, relTypeId, ANY_LABEL );\n-\n         visitor.visitRelCount( ANY_LABEL, relTypeId, ANY_LABEL, userDescription, amount );\n     }\n \n-    private void leftSide( KernelTransaction ktx, DbStructureVisitor visitor, Label label, int labelId,\n-            RelationshipType relType, int relTypeId )\n+    private void leftSide( KernelTransaction ktx, DbStructureVisitor visitor, Label label, int labelId, RelationshipType relType, int relTypeId )\n     {\n-        String userDescription =\n-                format( \"MATCH (%s)-[%s]->() RETURN count(*)\", colon( label.name() ), colon( relType.name() ) );\n+        String userDescription = format( \"MATCH (%s)-[%s]->() RETURN count(*)\", colon( label.name() ), colon( relType.name() ) );\n         long amount = ktx.dataRead().countsForRelationship( labelId, relTypeId, ANY_LABEL );\n-\n         visitor.visitRelCount( labelId, relTypeId, ANY_LABEL, userDescription, amount );\n     }\n \n-    private void rightSide( KernelTransaction ktx, DbStructureVisitor visitor, Label label, int labelId,\n-            RelationshipType relType, int relTypeId )\n+    private void rightSide( KernelTransaction ktx, DbStructureVisitor visitor, Label label, int labelId, RelationshipType relType, int relTypeId )\n     {\n-        String userDescription =\n-                format( \"MATCH ()-[%s]->(%s) RETURN count(*)\", colon( relType.name() ), colon( label.name() ) );\n+        String userDescription = format( \"MATCH ()-[%s]->(%s) RETURN count(*)\", colon( relType.name() ), colon( label.name() ) );\n         long amount = ktx.dataRead().countsForRelationship( ANY_LABEL, relTypeId, labelId );\n-\n         visitor.visitRelCount( ANY_LABEL, relTypeId, labelId, userDescription, amount );\n     }\n \n     private String colon( String name )\n     {\n-        return  name.length() == 0 ? name : (\":\" + name);\n+        return name.length() == 0 ? name : ( \":\" + name);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 81
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}