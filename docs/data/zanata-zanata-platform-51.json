{
    "project_name": "zanata-zanata-platform",
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "298",
                "column": "47",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        if (hTextFlowTarget == null) {\n            hTextFlowTarget = new HTextFlowTarget(hTextFlow, hLocale);\n            hTextFlowTarget.setVersionNum(0); // this will be incremented when\n                                              // content is set (below)\n            // TODO getTargets just to make sure hTextFlowTarget is persisted in\n            // the end",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/51/TextFlowTargetDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/51/TextFlowTargetDAO.java\nindex bb0bcac982d..bd44dafc2a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/51/TextFlowTargetDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/51/TextFlowTargetDAO.java\n@@ -295,8 +295,9 @@ public class TextFlowTargetDAO extends AbstractDAOImpl<HTextFlowTarget, Long>\n \n         if (hTextFlowTarget == null) {\n             hTextFlowTarget = new HTextFlowTarget(hTextFlow, hLocale);\n-            hTextFlowTarget.setVersionNum(0); // this will be incremented when\n-                                              // content is set (below)\n+            hTextFlowTarget.setVersionNum(0);\n+            // this will be incremented when // content is set (below)\n+// content is set (below)\n             // TODO getTargets just to make sure hTextFlowTarget is persisted in\n             // the end\n             hTextFlow.getTargets().put(hLocale.getId(), hTextFlowTarget);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "297",
                    "column": "41",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/51/TextFlowTargetDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/51/TextFlowTargetDAO.java\nindex bb0bcac982d..42b5480a6ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/51/TextFlowTargetDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/51/TextFlowTargetDAO.java\n@@ -24,457 +24,450 @@ import org.zanata.service.TranslationFinder;\n @Named(\"textFlowTargetDAO\")\n @RequestScoped\n public class TextFlowTargetDAO extends AbstractDAOImpl<HTextFlowTarget, Long>\n-        implements TranslationFinder {\n-\n-    private static final long serialVersionUID = -1426951552450893617L;\n-\n-    public TextFlowTargetDAO() {\n-        super(HTextFlowTarget.class);\n-    }\n-\n-    public TextFlowTargetDAO(Session session) {\n-        super(HTextFlowTarget.class, session);\n-    }\n-\n-    /**\n-     * @param textFlow\n-     * @param locale\n-     * @return\n-     */\n-    public HTextFlowTarget getByNaturalId(HTextFlow textFlow, HLocale locale) {\n-        return (HTextFlowTarget) getSession()\n-                .byNaturalId(HTextFlowTarget.class).using(\"textFlow\", textFlow)\n-                .using(\"locale\", locale).load();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public List<HTextFlowTarget> getByTextFlowId(Long tfId, int offset,\n-            int maxResults) {\n-        Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"from HTextFlowTarget tft where tft.textFlow.obsolete=0 and tft.textFlow.id = :tfId\");\n-        q.setParameter(\"tfId\", tfId);\n-        q.setFirstResult(offset);\n-        q.setMaxResults(maxResults);\n-        q.setCacheable(true)\n-                .setComment(\"TextFlowTargetDAO.getByTextFlowId\");\n-        return q.list();\n-    }\n-\n-    public int countTextFlowTargetsInTextFlow(Long tfId) {\n-        Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(*) from HTextFlowTarget tft where tft.textFlow.obsolete=0 and tft.textFlow.id = :tfId\");\n-        q.setParameter(\"tfId\", tfId);\n-        q.setCacheable(true).setComment(\n-                \"TextFlowTargetDAO.countTextFlowTargetsInTextFlow\");\n-        Long totalCount = (Long) q.uniqueResult();\n-        return totalCount == null ? 0 : totalCount.intValue();\n-    }\n-\n-    public int getTotalTextFlowTargets() {\n-        Query q =\n-                getSession()\n-                        .createQuery(\"select count(*) from HTextFlowTarget\");\n-        q.setCacheable(true);\n-        q.setComment(\"TextFlowTargetDAO.getTotalTextFlowTargets\");\n-        Long totalCount = (Long) q.uniqueResult();\n-        if (totalCount == null)\n-            return 0;\n-        return totalCount.intValue();\n-    }\n-\n-    public int getTotalActiveTextFlowTargets() {\n-        Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(*) from HTextFlowTarget t where t.textFlow.obsolete=0\");\n-        q.setCacheable(true);\n-        q.setComment(\"TextFlowTargetDAO.getTotalActiveTextFlowTargets\");\n-        Long totalCount = (Long) q.uniqueResult();\n-        if (totalCount == null)\n-            return 0;\n-        return totalCount.intValue();\n-    }\n-\n-    public int getTotalObsoleteTextFlowTargets() {\n-        Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(*) from HTextFlowTarget t where t.textFlow.obsolete=1\");\n-        q.setCacheable(true);\n-        q.setComment(\"TextFlowTargetDAO.getTotalObsoleteTextFlowTargets\");\n-        Long totalCount = (Long) q.uniqueResult();\n-        if (totalCount == null)\n-            return 0;\n-        return totalCount.intValue();\n-    }\n-\n-    public int getTotalApprovedOrTranslatedTextFlowTargets() {\n-        Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(*) from HTextFlowTarget t where t.state = :state or t.state = :state2 and t.textFlow.obsolete=0\");\n-        q.setCacheable(true);\n-        q.setComment(\"TextFlowTargetDAO.getTotalApprovedOrTranslatedTextFlowTargets\");\n-        Long totalCount =\n-                (Long) q.setParameter(\"state\", ContentState.Approved)\n-                        .setParameter(\"state2\", ContentState.Translated)\n-                        .uniqueResult();\n-        if (totalCount == null)\n-            return 0;\n-        return totalCount.intValue();\n+  implements TranslationFinder {\n+\n+  private static final long serialVersionUID = -1426951552450893617L;\n+\n+  public TextFlowTargetDAO() {\n+    super(HTextFlowTarget.class);\n+  }\n+\n+  public TextFlowTargetDAO(Session session) {\n+    super(HTextFlowTarget.class, session);\n+  }\n+\n+  /**\n+   * @param textFlow\n+   * @param locale\n+   * @return\n+   */\n+  public HTextFlowTarget getByNaturalId(HTextFlow textFlow, HLocale locale) {\n+    return (HTextFlowTarget) getSession()\n+      .byNaturalId(HTextFlowTarget.class).using(\"textFlow\", textFlow)\n+      .using(\"locale\", locale).load();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public List<HTextFlowTarget> getByTextFlowId(Long tfId, int offset,\n+                                               int maxResults) {\n+    Query q =\n+      getSession()\n+        .createQuery(\n+          \"from HTextFlowTarget tft where tft.textFlow.obsolete=0 and tft.textFlow.id = :tfId\");\n+    q.setParameter(\"tfId\", tfId);\n+    q.setFirstResult(offset);\n+    q.setMaxResults(maxResults);\n+    q.setCacheable(true)\n+      .setComment(\"TextFlowTargetDAO.getByTextFlowId\");\n+    return q.list();\n+  }\n+\n+  public int countTextFlowTargetsInTextFlow(Long tfId) {\n+    Query q =\n+      getSession()\n+        .createQuery(\n+          \"select count(*) from HTextFlowTarget tft where tft.textFlow.obsolete=0 and tft.textFlow.id = :tfId\");\n+    q.setParameter(\"tfId\", tfId);\n+    q.setCacheable(true).setComment(\n+      \"TextFlowTargetDAO.countTextFlowTargetsInTextFlow\");\n+    Long totalCount = (Long) q.uniqueResult();\n+    return totalCount == null ? 0 : totalCount.intValue();\n+  }\n+\n+  public int getTotalTextFlowTargets() {\n+    Query q =\n+      getSession()\n+        .createQuery(\"select count(*) from HTextFlowTarget\");\n+    q.setCacheable(true);\n+    q.setComment(\"TextFlowTargetDAO.getTotalTextFlowTargets\");\n+    Long totalCount = (Long) q.uniqueResult();\n+    if (totalCount == null) {\n+      return 0;\n     }\n-\n-    public int getTotalRejectedOrFuzzyTextFlowTargets() {\n-        Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(*) from HTextFlowTarget t where t.state = :state or t.state = :state2 and t.textFlow.obsolete=0\");\n-        q.setCacheable(true);\n-        q.setComment(\"TextFlowTargetDAO.getTotalRejectedOrFuzzyTextFlowTargets\");\n-        Long totalCount =\n-                (Long) q.setParameter(\"state\", ContentState.NeedReview)\n-                        .setParameter(\"state2\", ContentState.Rejected)\n-                        .uniqueResult();\n-        if (totalCount == null)\n-            return 0;\n-        return totalCount.intValue();\n-    }\n-\n-    public int getTotalNewTextFlowTargets() {\n-        Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(*) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\");\n-        q.setCacheable(true);\n-        q.setComment(\"TextFlowTargetDAO.getTotalNewTextFlowTargets\");\n-        Long totalCount =\n-                (Long) q.setParameter(\"state\", ContentState.New).uniqueResult();\n-        if (totalCount == null)\n-            return 0;\n-        return totalCount.intValue();\n-    }\n-\n-    /**\n-     * Finds all (including obsolete) translations for 'document' in 'locale'.\n-     *\n-     * @param document\n-     * @param localeId\n-     * @return\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public List<HTextFlowTarget> findAllTranslations(HDocument document,\n-            LocaleId localeId) {\n-        Query q =\n-                getSession().createQuery(\n-                        \"select t from HTextFlowTarget t where \"\n-                                + \"t.textFlow.document =:document \"\n-                                + \"and t.locale.localeId =:localeId \"\n-                                + \"order by t.textFlow.pos\");\n-        q.setParameter(\"document\", document);\n-        q.setParameter(\"localeId\", localeId);\n-        q.setCacheable(false);\n-        q.setComment(\"TextFlowTargetDAO.findAllTranslations\");\n-        return q.list();\n-    }\n-\n-    /**\n-     * Finds non-obsolete translations for 'document' in 'locale'.\n-     *\n-     * @param document\n-     * @param locale\n-     * @return\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public List<HTextFlowTarget> findTranslations(HDocument document,\n-            HLocale locale) {\n-        Query q =\n-                getSession().createQuery(\n-                        \"select t \" + \"from HTextFlowTarget t where \"\n-                                + \"t.textFlow.document =:document \"\n-                                + \"and t.locale =:locale \"\n-                                + \"and t.textFlow.obsolete=false \"\n-                                + \"order by t.textFlow.pos\");\n-        q.setParameter(\"document\", document);\n-        q.setParameter(\"locale\", locale);\n-        q.setCacheable(true);\n-        q.setComment(\"TextFlowTargetDAO.findTranslations\");\n-        return q.list();\n-    }\n-\n-    /**\n-     * Finds the best matching translations for a single text flow and a locale.\n-     * Other parameters (context, document id, and project) can also influence\n-     * what the best match is. A matching translation is one where the source\n-     * text is exactly the same as the translation within the document and in\n-     * the same locale, excluding any machine translations.\n-     *\n-     * @param textFlow\n-     *            The text flow for which to find a matching translation.\n-     * @param targetLocaleId\n-     *            The locale in which to find matches.\n-     * @param checkContext\n-     *            Whether to check for a matching context\n-     * @param checkDocument\n-     *            Whether to check for a matching document id\n-     * @param checkProject\n-     *            Whether to check for a matching project\n-     * @return The single best possible match found in the system for the given\n-     *         text flow.\n-     */\n-    @Override\n-    @NativeQuery\n-    public Optional<HTextFlowTarget> searchBestMatchTransMemory(\n-            HTextFlow textFlow, LocaleId targetLocaleId,\n-            LocaleId sourceLocaleId, boolean checkContext,\n-            boolean checkDocument, boolean checkProject) {\n-        StringBuilder queryBuilder = new StringBuilder();\n-        queryBuilder\n-                .append(\"SELECT tft.* FROM HTextFlowTarget tft \")\n-                .append(\"JOIN HTextFlow tf ON tf.id = tft.tf_id \")\n-                .append(\"JOIN HLocale locale ON locale.id = tft.locale \")\n-                .append(\"JOIN HDocument hDoc ON hDoc.id = tf.document_id \")\n-                .append(\"JOIN HProjectIteration iter ON iter.id = hDoc.project_iteration_id \")\n-                .append(\"JOIN HProject project ON project.id = iter.project_id \")\n-                .append(\"WHERE tf.contentHash = :contentHash AND locale.localeId = :localeId \")\n-                .append(\"AND tft.tf_id = tf.id \")\n-                .append(\"AND tft.locale = locale.id \")\n-                // 'MT' = TranslationSourceType.MACHINE_TRANS\n-                .append(\"AND (tft.sourceType IS NULL OR tft.sourceType <> 'MT') \")\n-                .append(\"AND tf.document_id = hDoc.id \")\n-                .append(\"AND hDoc.project_iteration_id = iter.id \")\n-                .append(\"AND iter.project_id = project.id \")\n-                // (2, 3) = (ContentState.Translated, ContentState.Approved)\n-                // 'O' = EntityStatus.OBSOLETE\n-                .append(\"AND tft.state in (2, 3) AND tft.tf_id <> :textFlowId AND iter.status <> 'O' AND project.status <> 'O' \");\n-        if (checkContext) {\n-            queryBuilder.append(\"AND tf.resId = :resId \");\n-        }\n-        if (checkDocument) {\n-            queryBuilder.append(\"AND hDoc.docId = :docId \");\n-        }\n-        if (checkProject) {\n-            queryBuilder.append(\"AND project.id = :projectId \");\n-        }\n-        queryBuilder\n-                .append(\"ORDER BY \")\n-                .append(\" CASE WHEN tf.resId = :resId THEN 0 ELSE 1 END, \")\n-                .append(\" CASE WHEN hDoc.docId = :docId THEN 0 ELSE 1 END, \")\n-                .append(\" CASE WHEN iter.project_id = :projectId THEN 0 ELSE 1 END, \")\n-                .append(\" tft.lastChanged DESC \")\n-                .append(\"LIMIT 1\");\n-\n-        SQLQuery sqlQuery =\n-                getSession().createSQLQuery(queryBuilder.toString());\n-        sqlQuery.setParameter(\"textFlowId\", textFlow.getId());\n-        sqlQuery.setParameter(\"contentHash\", textFlow.getContentHash());\n-        sqlQuery.setParameter(\"resId\", textFlow.getResId());\n-        sqlQuery.setParameter(\"docId\", textFlow.getDocument().getDocId());\n-        sqlQuery.setParameter(\"projectId\", textFlow.getDocument()\n-                .getProjectIteration().getProject().getId());\n-        sqlQuery.setParameter(\"localeId\", targetLocaleId.getId());\n-        sqlQuery.addEntity(HTextFlowTarget.class);\n-        return Optional.ofNullable((HTextFlowTarget) sqlQuery.uniqueResult());\n+    return totalCount.intValue();\n+  }\n+\n+  public int getTotalActiveTextFlowTargets() {\n+    Query q =\n+      getSession()\n+        .createQuery(\n+          \"select count(*) from HTextFlowTarget t where t.textFlow.obsolete=0\");\n+    q.setCacheable(true);\n+    q.setComment(\"TextFlowTargetDAO.getTotalActiveTextFlowTargets\");\n+    Long totalCount = (Long) q.uniqueResult();\n+    if (totalCount == null) {\n+      return 0;\n     }\n-\n-    /**\n-     * Look up the {@link HTextFlowTarget} for the given hLocale in hTextFlow,\n-     * creating a new one if none is present.\n-     *\n-     * @param hTextFlow\n-     *            The parent text flow.\n-     * @param hLocale\n-     *            The locale for the text flow target.\n-     */\n-    public HTextFlowTarget getOrCreateTarget(HTextFlow hTextFlow,\n-            HLocale hLocale) {\n-        HTextFlowTarget hTextFlowTarget = getTextFlowTarget(hTextFlow, hLocale);\n-\n-        if (hTextFlowTarget == null) {\n-            hTextFlowTarget = new HTextFlowTarget(hTextFlow, hLocale);\n-            hTextFlowTarget.setVersionNum(0); // this will be incremented when\n-                                              // content is set (below)\n-            // TODO getTargets just to make sure hTextFlowTarget is persisted in\n-            // the end\n-            hTextFlow.getTargets().put(hLocale.getId(), hTextFlowTarget);\n-            // getSession().persist(hTextFlowTarget);\n-        }\n-        return hTextFlowTarget;\n+    return totalCount.intValue();\n+  }\n+\n+  public int getTotalObsoleteTextFlowTargets() {\n+    Query q =\n+      getSession()\n+        .createQuery(\n+          \"select count(*) from HTextFlowTarget t where t.textFlow.obsolete=1\");\n+    q.setCacheable(true);\n+    q.setComment(\"TextFlowTargetDAO.getTotalObsoleteTextFlowTargets\");\n+    Long totalCount = (Long) q.uniqueResult();\n+    if (totalCount == null) {\n+      return 0;\n     }\n-\n-    /**\n-     * Look up the {@link HTextFlowTarget} for the given hLocale in hTextFlow.\n-     * If none can be found, return null.\n-     *\n-     * @param hTextFlow\n-     *            The parent text flow.\n-     * @param hLocale\n-     *            The locale for the text flow target.\n-     */\n-    public HTextFlowTarget getTextFlowTarget(HTextFlow hTextFlow,\n-            HLocale hLocale) {\n-        HTextFlowTarget hTextFlowTarget =\n-                (HTextFlowTarget) getSession()\n-                        .createQuery(\n-                                \"select tft from HTextFlowTarget tft \"\n-                                        + \"where tft.textFlow = :textFlow \"\n-                                        + \"and tft.locale = :locale\")\n-                        .setParameter(\"textFlow\", hTextFlow)\n-                        .setParameter(\"locale\", hLocale)\n-                        .setComment(\"TextFlowTargetDAO.getTextFlowTarget\")\n-                        .uniqueResult();\n-        return hTextFlowTarget;\n+    return totalCount.intValue();\n+  }\n+\n+  public int getTotalApprovedOrTranslatedTextFlowTargets() {\n+    Query q =\n+      getSession()\n+        .createQuery(\n+          \"select count(*) from HTextFlowTarget t where t.state = :state or t.state = :state2 and t.textFlow.obsolete=0\");\n+    q.setCacheable(true);\n+    q.setComment(\"TextFlowTargetDAO.getTotalApprovedOrTranslatedTextFlowTargets\");\n+    Long totalCount =\n+      (Long) q.setParameter(\"state\", ContentState.Approved)\n+        .setParameter(\"state2\", ContentState.Translated)\n+        .uniqueResult();\n+    if (totalCount == null) {\n+      return 0;\n     }\n-\n-    public HTextFlowTarget\n-            getTextFlowTarget(Long hTextFlowId, LocaleId localeId) {\n-        HTextFlowTarget hTextFlowTarget =\n-                (HTextFlowTarget) getSession()\n-                        .createQuery(\n-                                \"select tft from HTextFlowTarget tft \"\n-                                        + \"where tft.textFlow.id = :hTextFlowId \"\n-                                        + \"and tft.locale.localeId = :localeId\")\n-                        .setParameter(\"hTextFlowId\", hTextFlowId)\n-                        .setParameter(\"localeId\", localeId)\n-                        .setComment(\"TextFlowTargetDAO.getTextFlowTarget\")\n-                        .uniqueResult();\n-        return hTextFlowTarget;\n+    return totalCount.intValue();\n+  }\n+\n+  public int getTotalRejectedOrFuzzyTextFlowTargets() {\n+    Query q =\n+      getSession()\n+        .createQuery(\n+          \"select count(*) from HTextFlowTarget t where t.state = :state or t.state = :state2 and t.textFlow.obsolete=0\");\n+    q.setCacheable(true);\n+    q.setComment(\"TextFlowTargetDAO.getTotalRejectedOrFuzzyTextFlowTargets\");\n+    Long totalCount =\n+      (Long) q.setParameter(\"state\", ContentState.NeedReview)\n+        .setParameter(\"state2\", ContentState.Rejected)\n+        .uniqueResult();\n+    if (totalCount == null) {\n+      return 0;\n     }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public List<HTextFlowTarget> findByTextFlowIdList(List<Long> idList,\n-            LocaleId localeId) {\n-        if (idList == null || idList.isEmpty()) {\n-            return Collections.EMPTY_LIST;\n-        }\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select tft from HTextFlowTarget tft \"\n-                                        + \"where tft.textFlow.id in (:idList) \"\n-                                        + \"and tft.locale.localeId = :localeId\");\n-\n-        query.setParameterList(\"idList\", idList);\n-        query.setParameter(\"localeId\", localeId);\n-        query.setCacheable(false).setComment(\n-                \"TextFlowTargetDAO.findByTextFlowIdList\");\n-        return query.list();\n+    return totalCount.intValue();\n+  }\n+\n+  public int getTotalNewTextFlowTargets() {\n+    Query q =\n+      getSession()\n+        .createQuery(\n+          \"select count(*) from HTextFlowTarget t where t.state = :state and t.textFlow.obsolete=0\");\n+    q.setCacheable(true);\n+    q.setComment(\"TextFlowTargetDAO.getTotalNewTextFlowTargets\");\n+    Long totalCount =\n+      (Long) q.setParameter(\"state\", ContentState.New).uniqueResult();\n+    if (totalCount == null) {\n+      return 0;\n     }\n-\n-    public HTextFlowTarget getTextFlowTarget(HTextFlow hTextFlow,\n-            LocaleId localeId) {\n-        HTextFlowTarget hTextFlowTarget =\n-                (HTextFlowTarget) getSession()\n-                        .createQuery(\n-                                \"select tft from HTextFlowTarget tft \"\n-                                        + \"where tft.textFlow = :textFlow \"\n-                                        + \"and tft.locale.localeId = :localeId\")\n-                        .setParameter(\"textFlow\", hTextFlow)\n-                        .setParameter(\"localeId\", localeId)\n-                        .setComment(\"TextFlowTargetDAO.getTextFlowTarget\")\n-                        .uniqueResult();\n-        return hTextFlowTarget;\n+    return totalCount.intValue();\n+  }\n+\n+  /**\n+   * Finds all (including obsolete) translations for 'document' in 'locale'.\n+   *\n+   * @param document\n+   * @param localeId\n+   * @return\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public List<HTextFlowTarget> findAllTranslations(HDocument document,\n+                                                   LocaleId localeId) {\n+    Query q =\n+      getSession().createQuery(\n+        \"select t from HTextFlowTarget t where \"\n+          + \"t.textFlow.document =:document \"\n+          + \"and t.locale.localeId =:localeId \"\n+          + \"order by t.textFlow.pos\");\n+    q.setParameter(\"document\", document);\n+    q.setParameter(\"localeId\", localeId);\n+    q.setCacheable(false);\n+    q.setComment(\"TextFlowTargetDAO.findAllTranslations\");\n+    return q.list();\n+  }\n+\n+  /**\n+   * Finds non-obsolete translations for 'document' in 'locale'.\n+   *\n+   * @param document\n+   * @param locale\n+   * @return\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public List<HTextFlowTarget> findTranslations(HDocument document,\n+                                                HLocale locale) {\n+    Query q =\n+      getSession().createQuery(\n+        \"select t \" + \"from HTextFlowTarget t where \"\n+          + \"t.textFlow.document =:document \"\n+          + \"and t.locale =:locale \"\n+          + \"and t.textFlow.obsolete=false \"\n+          + \"order by t.textFlow.pos\");\n+    q.setParameter(\"document\", document);\n+    q.setParameter(\"locale\", locale);\n+    q.setCacheable(true);\n+    q.setComment(\"TextFlowTargetDAO.findTranslations\");\n+    return q.list();\n+  }\n+\n+  /**\n+   * Finds the best matching translations for a single text flow and a locale.\n+   * Other parameters (context, document id, and project) can also influence\n+   * what the best match is. A matching translation is one where the source\n+   * text is exactly the same as the translation within the document and in\n+   * the same locale, excluding any machine translations.\n+   *\n+   * @param textFlow       The text flow for which to find a matching translation.\n+   * @param targetLocaleId The locale in which to find matches.\n+   * @param checkContext   Whether to check for a matching context\n+   * @param checkDocument  Whether to check for a matching document id\n+   * @param checkProject   Whether to check for a matching project\n+   * @return The single best possible match found in the system for the given\n+   * text flow.\n+   */\n+  @Override\n+  @NativeQuery\n+  public Optional<HTextFlowTarget> searchBestMatchTransMemory(\n+    HTextFlow textFlow, LocaleId targetLocaleId,\n+    LocaleId sourceLocaleId, boolean checkContext,\n+    boolean checkDocument, boolean checkProject) {\n+    StringBuilder queryBuilder = new StringBuilder();\n+    queryBuilder\n+      .append(\"SELECT tft.* FROM HTextFlowTarget tft \")\n+      .append(\"JOIN HTextFlow tf ON tf.id = tft.tf_id \")\n+      .append(\"JOIN HLocale locale ON locale.id = tft.locale \")\n+      .append(\"JOIN HDocument hDoc ON hDoc.id = tf.document_id \")\n+      .append(\"JOIN HProjectIteration iter ON iter.id = hDoc.project_iteration_id \")\n+      .append(\"JOIN HProject project ON project.id = iter.project_id \")\n+      .append(\"WHERE tf.contentHash = :contentHash AND locale.localeId = :localeId \")\n+      .append(\"AND tft.tf_id = tf.id \")\n+      .append(\"AND tft.locale = locale.id \")\n+      // 'MT' = TranslationSourceType.MACHINE_TRANS\n+      .append(\"AND (tft.sourceType IS NULL OR tft.sourceType <> 'MT') \")\n+      .append(\"AND tf.document_id = hDoc.id \")\n+      .append(\"AND hDoc.project_iteration_id = iter.id \")\n+      .append(\"AND iter.project_id = project.id \")\n+      // (2, 3) = (ContentState.Translated, ContentState.Approved)\n+      // 'O' = EntityStatus.OBSOLETE\n+      .append(\"AND tft.state in (2, 3) AND tft.tf_id <> :textFlowId AND iter.status <> 'O' AND project.status <> 'O' \");\n+    if (checkContext) {\n+      queryBuilder.append(\"AND tf.resId = :resId \");\n     }\n-\n-    public Long getTextFlowTargetId(HTextFlow hTextFlow, LocaleId localeId) {\n-        Query q =\n-                getSession().createQuery(\n-                        \"select tft.id from HTextFlowTarget tft \"\n-                                + \"where tft.textFlow = :textFlow \"\n-                                + \"and tft.locale.localeId = :localeId\");\n-        q.setParameter(\"textFlow\", hTextFlow);\n-        q.setParameter(\"localeId\", localeId);\n-        q.setComment(\"TextFlowTargetDAO.getTextFlowTargetId\");\n-        Long id = (Long) q.uniqueResult();\n-        return id;\n+    if (checkDocument) {\n+      queryBuilder.append(\"AND hDoc.docId = :docId \");\n     }\n-\n-    public HTextFlowTarget getLastTranslated(String projectSlug,\n-            String iterationSlug, LocaleId localeId) {\n-        StringBuilder query = new StringBuilder();\n-        query.append(\"from HTextFlowTarget tft \");\n-        query.append(\"where tft.textFlow.document.projectIteration.slug = :iterationSlug \");\n-        query.append(\"and tft.textFlow.document.projectIteration.project.slug = :projectSlug \");\n-        query.append(\"and tft.locale.localeId = :localeId \");\n-        query.append(\"order by tft.lastChanged DESC\");\n-\n-        Query q = getSession().createQuery(query.toString());\n-        q.setParameter(\"iterationSlug\", iterationSlug);\n-        q.setParameter(\"projectSlug\", projectSlug);\n-        q.setParameter(\"localeId\", localeId);\n-        q.setCacheable(true);\n-        q.setMaxResults(1);\n-        q.setComment(\"TextFlowTargetDAO.getLastTranslated\");\n-\n-        return (HTextFlowTarget) q.uniqueResult();\n+    if (checkProject) {\n+      queryBuilder.append(\"AND project.id = :projectId \");\n     }\n-\n-    /**\n-     * @param document\n-     *            copyTrans copy target document\n-     * @param targetLocale\n-     *            target locale\n-     * @return number of translation candidates in given locale and is from\n-     *         given docId (exclude translations from target document's\n-     *         iteration)\n-     */\n-    public long getTranslationCandidateCountWithDocIdAndLocale(\n-            HDocument document,\n-            HLocale targetLocale) {\n-        String queryString =\n-                \"select count(*) from HTextFlowTarget tft \" +\n-                        \"where tft.textFlow.document.docId = :docId \" +\n-                        \"and tft.locale = :locale \" +\n-                        \"and tft.textFlow.obsolete = false \" +\n-                        \"and tft.textFlow.document.obsolete = false \" +\n-                        \"and tft.textFlow.document.projectIteration <> :self\";\n-        Query query =\n-                getSession()\n-                        .createQuery(queryString)\n-                        .setParameter(\"docId\", document.getDocId())\n-                        .setParameter(\"locale\", targetLocale)\n-                        .setParameter(\"self\", document.getProjectIteration())\n-                        .setCacheable(true)\n-                        .setComment(\n-                                \"TextFlowTargetDAO.getTranslationCandidateCountWithDocIdAndLocale\");\n-        return (Long) query.uniqueResult();\n+    queryBuilder\n+      .append(\"ORDER BY \")\n+      .append(\" CASE WHEN tf.resId = :resId THEN 0 ELSE 1 END, \")\n+      .append(\" CASE WHEN hDoc.docId = :docId THEN 0 ELSE 1 END, \")\n+      .append(\" CASE WHEN iter.project_id = :projectId THEN 0 ELSE 1 END, \")\n+      .append(\" tft.lastChanged DESC \")\n+      .append(\"LIMIT 1\");\n+\n+    SQLQuery sqlQuery =\n+      getSession().createSQLQuery(queryBuilder.toString());\n+    sqlQuery.setParameter(\"textFlowId\", textFlow.getId());\n+    sqlQuery.setParameter(\"contentHash\", textFlow.getContentHash());\n+    sqlQuery.setParameter(\"resId\", textFlow.getResId());\n+    sqlQuery.setParameter(\"docId\", textFlow.getDocument().getDocId());\n+    sqlQuery.setParameter(\"projectId\", textFlow.getDocument()\n+      .getProjectIteration().getProject().getId());\n+    sqlQuery.setParameter(\"localeId\", targetLocaleId.getId());\n+    sqlQuery.addEntity(HTextFlowTarget.class);\n+    return Optional.ofNullable((HTextFlowTarget) sqlQuery.uniqueResult());\n+  }\n+\n+  /**\n+   * Look up the {@link HTextFlowTarget} for the given hLocale in hTextFlow,\n+   * creating a new one if none is present.\n+   *\n+   * @param hTextFlow The parent text flow.\n+   * @param hLocale   The locale for the text flow target.\n+   */\n+  public HTextFlowTarget getOrCreateTarget(HTextFlow hTextFlow,\n+                                           HLocale hLocale) {\n+    HTextFlowTarget hTextFlowTarget = getTextFlowTarget(hTextFlow, hLocale);\n+\n+    if (hTextFlowTarget == null) {\n+      hTextFlowTarget = new HTextFlowTarget(hTextFlow, hLocale);\n+      hTextFlowTarget.setVersionNum(0); // this will be incremented when\n+      // content is set (below)\n+      // TODO getTargets just to make sure hTextFlowTarget is persisted in\n+      // the end\n+      hTextFlow.getTargets().put(hLocale.getId(), hTextFlowTarget);\n+      // getSession().persist(hTextFlowTarget);\n     }\n-\n-    /**\n-     * @param document\n-     *            copyTrans copy target document\n-     * @param targetLocale\n-     *            target locale\n-     * @return number of translation candidates in given locale and is from\n-     *         given project (exclude translations from target document's\n-     *         iteration)\n-     */\n-    public long getTranslationCandidateCountWithProjectAndLocale(\n-            HDocument document, HLocale targetLocale) {\n-        HProjectIteration projectIteration = document.getProjectIteration();\n-        HProject project = projectIteration.getProject();\n-        String queryString =\n-                \"select count(*) from HTextFlowTarget tft \" +\n-                        \"where tft.textFlow.document.projectIteration.project = :project \" +\n-                        \"and tft.locale = :locale \" +\n-                        \"and tft.textFlow.obsolete = false \" +\n-                        \"and tft.textFlow.document.obsolete = false \" +\n-                        \"and tft.textFlow.document.projectIteration.status <> :obsoleteStatus \" +\n-                        \"and tft.textFlow.document.projectIteration <> :self\";\n-\n-        Query query =\n-                getSession()\n-                        .createQuery(queryString)\n-                        .setParameter(\"project\", project)\n-                        .setParameter(\"locale\", targetLocale)\n-                        .setParameter(\"self\", projectIteration)\n-                        .setParameter(\"obsoleteStatus\", EntityStatus.OBSOLETE)\n-                        .setCacheable(true)\n-                        .setComment(\n-                                \"TextFlowTargetDAO.getTranslationCandidateCountWithProjectAndLocale\");\n-        return (Long) query.uniqueResult();\n+    return hTextFlowTarget;\n+  }\n+\n+  /**\n+   * Look up the {@link HTextFlowTarget} for the given hLocale in hTextFlow.\n+   * If none can be found, return null.\n+   *\n+   * @param hTextFlow The parent text flow.\n+   * @param hLocale   The locale for the text flow target.\n+   */\n+  public HTextFlowTarget getTextFlowTarget(HTextFlow hTextFlow,\n+                                           HLocale hLocale) {\n+    HTextFlowTarget hTextFlowTarget =\n+      (HTextFlowTarget) getSession()\n+        .createQuery(\n+          \"select tft from HTextFlowTarget tft \"\n+            + \"where tft.textFlow = :textFlow \"\n+            + \"and tft.locale = :locale\")\n+        .setParameter(\"textFlow\", hTextFlow)\n+        .setParameter(\"locale\", hLocale)\n+        .setComment(\"TextFlowTargetDAO.getTextFlowTarget\")\n+        .uniqueResult();\n+    return hTextFlowTarget;\n+  }\n+\n+  public HTextFlowTarget\n+  getTextFlowTarget(Long hTextFlowId, LocaleId localeId) {\n+    HTextFlowTarget hTextFlowTarget =\n+      (HTextFlowTarget) getSession()\n+        .createQuery(\n+          \"select tft from HTextFlowTarget tft \"\n+            + \"where tft.textFlow.id = :hTextFlowId \"\n+            + \"and tft.locale.localeId = :localeId\")\n+        .setParameter(\"hTextFlowId\", hTextFlowId)\n+        .setParameter(\"localeId\", localeId)\n+        .setComment(\"TextFlowTargetDAO.getTextFlowTarget\")\n+        .uniqueResult();\n+    return hTextFlowTarget;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public List<HTextFlowTarget> findByTextFlowIdList(List<Long> idList,\n+                                                    LocaleId localeId) {\n+    if (idList == null || idList.isEmpty()) {\n+      return Collections.EMPTY_LIST;\n     }\n+    Query query =\n+      getSession()\n+        .createQuery(\n+          \"select tft from HTextFlowTarget tft \"\n+            + \"where tft.textFlow.id in (:idList) \"\n+            + \"and tft.locale.localeId = :localeId\");\n+\n+    query.setParameterList(\"idList\", idList);\n+    query.setParameter(\"localeId\", localeId);\n+    query.setCacheable(false).setComment(\n+      \"TextFlowTargetDAO.findByTextFlowIdList\");\n+    return query.list();\n+  }\n+\n+  public HTextFlowTarget getTextFlowTarget(HTextFlow hTextFlow,\n+                                           LocaleId localeId) {\n+    HTextFlowTarget hTextFlowTarget =\n+      (HTextFlowTarget) getSession()\n+        .createQuery(\n+          \"select tft from HTextFlowTarget tft \"\n+            + \"where tft.textFlow = :textFlow \"\n+            + \"and tft.locale.localeId = :localeId\")\n+        .setParameter(\"textFlow\", hTextFlow)\n+        .setParameter(\"localeId\", localeId)\n+        .setComment(\"TextFlowTargetDAO.getTextFlowTarget\")\n+        .uniqueResult();\n+    return hTextFlowTarget;\n+  }\n+\n+  public Long getTextFlowTargetId(HTextFlow hTextFlow, LocaleId localeId) {\n+    Query q =\n+      getSession().createQuery(\n+        \"select tft.id from HTextFlowTarget tft \"\n+          + \"where tft.textFlow = :textFlow \"\n+          + \"and tft.locale.localeId = :localeId\");\n+    q.setParameter(\"textFlow\", hTextFlow);\n+    q.setParameter(\"localeId\", localeId);\n+    q.setComment(\"TextFlowTargetDAO.getTextFlowTargetId\");\n+    Long id = (Long) q.uniqueResult();\n+    return id;\n+  }\n+\n+  public HTextFlowTarget getLastTranslated(String projectSlug,\n+                                           String iterationSlug, LocaleId localeId) {\n+    StringBuilder query = new StringBuilder();\n+    query.append(\"from HTextFlowTarget tft \");\n+    query.append(\"where tft.textFlow.document.projectIteration.slug = :iterationSlug \");\n+    query.append(\"and tft.textFlow.document.projectIteration.project.slug = :projectSlug \");\n+    query.append(\"and tft.locale.localeId = :localeId \");\n+    query.append(\"order by tft.lastChanged DESC\");\n+\n+    Query q = getSession().createQuery(query.toString());\n+    q.setParameter(\"iterationSlug\", iterationSlug);\n+    q.setParameter(\"projectSlug\", projectSlug);\n+    q.setParameter(\"localeId\", localeId);\n+    q.setCacheable(true);\n+    q.setMaxResults(1);\n+    q.setComment(\"TextFlowTargetDAO.getLastTranslated\");\n+\n+    return (HTextFlowTarget) q.uniqueResult();\n+  }\n+\n+  /**\n+   * @param document     copyTrans copy target document\n+   * @param targetLocale target locale\n+   * @return number of translation candidates in given locale and is from\n+   * given docId (exclude translations from target document's\n+   * iteration)\n+   */\n+  public long getTranslationCandidateCountWithDocIdAndLocale(\n+    HDocument document,\n+    HLocale targetLocale) {\n+    String queryString =\n+      \"select count(*) from HTextFlowTarget tft \" +\n+        \"where tft.textFlow.document.docId = :docId \" +\n+        \"and tft.locale = :locale \" +\n+        \"and tft.textFlow.obsolete = false \" +\n+        \"and tft.textFlow.document.obsolete = false \" +\n+        \"and tft.textFlow.document.projectIteration <> :self\";\n+    Query query =\n+      getSession()\n+        .createQuery(queryString)\n+        .setParameter(\"docId\", document.getDocId())\n+        .setParameter(\"locale\", targetLocale)\n+        .setParameter(\"self\", document.getProjectIteration())\n+        .setCacheable(true)\n+        .setComment(\n+          \"TextFlowTargetDAO.getTranslationCandidateCountWithDocIdAndLocale\");\n+    return (Long) query.uniqueResult();\n+  }\n+\n+  /**\n+   * @param document     copyTrans copy target document\n+   * @param targetLocale target locale\n+   * @return number of translation candidates in given locale and is from\n+   * given project (exclude translations from target document's\n+   * iteration)\n+   */\n+  public long getTranslationCandidateCountWithProjectAndLocale(\n+    HDocument document, HLocale targetLocale) {\n+    HProjectIteration projectIteration = document.getProjectIteration();\n+    HProject project = projectIteration.getProject();\n+    String queryString =\n+      \"select count(*) from HTextFlowTarget tft \" +\n+        \"where tft.textFlow.document.projectIteration.project = :project \" +\n+        \"and tft.locale = :locale \" +\n+        \"and tft.textFlow.obsolete = false \" +\n+        \"and tft.textFlow.document.obsolete = false \" +\n+        \"and tft.textFlow.document.projectIteration.status <> :obsoleteStatus \" +\n+        \"and tft.textFlow.document.projectIteration <> :self\";\n+\n+    Query query =\n+      getSession()\n+        .createQuery(queryString)\n+        .setParameter(\"project\", project)\n+        .setParameter(\"locale\", targetLocale)\n+        .setParameter(\"self\", projectIteration)\n+        .setParameter(\"obsoleteStatus\", EntityStatus.OBSOLETE)\n+        .setCacheable(true)\n+        .setComment(\n+          \"TextFlowTargetDAO.getTranslationCandidateCountWithProjectAndLocale\");\n+    return (Long) query.uniqueResult();\n+  }\n }\n",
            "diff_size": 666
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "298",
                    "column": "47",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/51/TextFlowTargetDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/51/TextFlowTargetDAO.java\nindex bb0bcac982d..9a4a315a604 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/51/TextFlowTargetDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/51/TextFlowTargetDAO.java\n@@ -296,7 +296,7 @@ public class TextFlowTargetDAO extends AbstractDAOImpl<HTextFlowTarget, Long>\n         if (hTextFlowTarget == null) {\n             hTextFlowTarget = new HTextFlowTarget(hTextFlow, hLocale);\n             hTextFlowTarget.setVersionNum(0); // this will be incremented when\n-                                              // content is set (below)\n+            // content is set (below)\n             // TODO getTargets just to make sure hTextFlowTarget is persisted in\n             // the end\n             hTextFlow.getTargets().put(hLocale.getId(), hTextFlowTarget);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/51/TextFlowTargetDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/51/TextFlowTargetDAO.java\nindex bb0bcac982d..bd44dafc2a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/51/TextFlowTargetDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/51/TextFlowTargetDAO.java\n@@ -295,8 +295,9 @@ public class TextFlowTargetDAO extends AbstractDAOImpl<HTextFlowTarget, Long>\n \n         if (hTextFlowTarget == null) {\n             hTextFlowTarget = new HTextFlowTarget(hTextFlow, hLocale);\n-            hTextFlowTarget.setVersionNum(0); // this will be incremented when\n-                                              // content is set (below)\n+            hTextFlowTarget.setVersionNum(0);\n+            // this will be incremented when // content is set (below)\n+// content is set (below)\n             // TODO getTargets just to make sure hTextFlowTarget is persisted in\n             // the end\n             hTextFlow.getTargets().put(hLocale.getId(), hTextFlowTarget);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}