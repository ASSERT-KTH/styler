{
    "project_name": "griddynamics-jagger",
    "error_id": "197",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "warning",
                "message": "Line is longer than 150 characters (found 168).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n/**\n * This load is a list of user groups {@link JLoadProfileUsers} running in parallel. Every such user group imitates a group of threads. Threads will start sequentially.\n * Thus you are able to create load ramp-up and rump-down with this load type. You can configure a number of threads by attributes of user group.<p>\n * Available attributes:<p>\n *     - numberOfUsers - A goal number of threads.<p>",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/197/JLoadProfileUserGroups.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/197/JLoadProfileUserGroups.java\nindex 471ea0f43c1..0cb6dfc3c62 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/197/JLoadProfileUserGroups.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/197/JLoadProfileUserGroups.java\n@@ -11,21 +11,20 @@ import static java.util.Collections.singletonList;\n  * This load is a list of user groups {@link JLoadProfileUsers} running in parallel. Every such user group imitates a group of threads. Threads will start sequentially.\n  * Thus you are able to create load ramp-up and rump-down with this load type. You can configure a number of threads by attributes of user group.<p>\n  * Available attributes:<p>\n- *     - numberOfUsers - A goal number of threads.<p>\n- *     - lifeTimeInSeconds - Describes how long threads will be alive. Default is 2 days.<p>\n- *     - startDelayInSeconds - Delay before first thread will start. Default is 0.<p>\n- *     - slewRateUsersPerSecond - Describes how many threads to start during every iteration. Default is numberOfUsers value.<p>\n+ * - numberOfUsers - A goal number of threads.<p>\n+ * - lifeTimeInSeconds - Describes how long threads will be alive. Default is 2 days.<p>\n+ * - startDelayInSeconds - Delay before first thread will start. Default is 0.<p>\n+ * - slewRateUsersPerSecond - Describes how many threads to start during every iteration. Default is numberOfUsers value.<p>\n  * You can set optional attribute delayBetweenInvocationsInMilliseconds to specify delay in milliseconds between invocations (default value is 0s).\n- *\n+ * <p>\n  * Examples: @n\n- * @code\n- * JLoadProfileUsers u1 = JLoadProfileUsers.builder(NumberOfUsers.of(10)).withStartDelayInSeconds(0).withLifeTimeInSeconds(80).build();\n+ *\n+ * @code JLoadProfileUsers u1 = JLoadProfileUsers.builder(NumberOfUsers.of(10)).withStartDelayInSeconds(0).withLifeTimeInSeconds(80).build();\n  * JLoadProfileUsers u2 = JLoadProfileUsers.builder(NumberOfUsers.of(10)).withStartDelayInSeconds(20).withLifeTimeInSeconds(80).build();\n  * JLoadProfileUsers u3 = JLoadProfileUsers.builder(NumberOfUsers.of(10)).withStartDelayInSeconds(40).withLifeTimeInSeconds(80).build();\n  * JLoadProfileUserGroups.builder(u1, u2, u3).build();\n  * @endcode\n  * @image html load_ComplexGroupLoad.png \"Multiple user groups load with allows to build complex load profiles\"\n- *\n  * @ingroup Main_Load_profiles_group\n  */\n public class JLoadProfileUserGroups implements JLoadProfile {\n@@ -40,22 +39,26 @@ public class JLoadProfileUserGroups implements JLoadProfile {\n         this.tickInterval = builder.tickInterval;\n     }\n \n-    /** Builder of the JLoadProfileUserGroups\n+    /**\n+     * Builder of the JLoadProfileUserGroups\n+     *\n+     * @param userGroup - User group which Jagger will imitate\n      * @n\n      * @details Constructor parameters are mandatory for the JLoadProfileUserGroups. All parameters, set by setters are optional\n      * @n\n-     * @param userGroup   - User group which Jagger will imitate\n      */\n     public static Builder builder(JLoadProfileUsers userGroup) {\n         return new Builder(userGroup);\n     }\n \n-    /** Builder of the JLoadProfileUserGroups\n+    /**\n+     * Builder of the JLoadProfileUserGroups\n+     *\n+     * @param userGroup  - User group which Jagger will imitate\n+     * @param userGroups - User groups which Jagger will imitate\n      * @n\n      * @details Constructor parameters are mandatory for the JLoadProfileUserGroups. All parameters, set by setters are optional\n      * @n\n-     * @param userGroup   - User group which Jagger will imitate\n-     * @param userGroups  - User groups which Jagger will imitate\n      */\n     public static Builder builder(JLoadProfileUsers userGroup, JLoadProfileUsers... userGroups) {\n         return new Builder(userGroup, userGroups);\n@@ -69,11 +72,13 @@ public class JLoadProfileUserGroups implements JLoadProfile {\n         // Tick interval doesn't have setter, since it's unclear if this field is needed. Check https://issues.griddynamics.net/browse/JFG-1000\n         private int tickInterval;\n \n-        /** Builder of the JLoadProfileUserGroups\n+        /**\n+         * Builder of the JLoadProfileUserGroups\n+         *\n+         * @param userGroup - User group which Jagger will imitate\n          * @n\n          * @details Constructor parameters are mandatory for the JLoadProfileUserGroups. All parameters, set by setters are optional\n          * @n\n-         * @param userGroup   - User group which Jagger will imitate\n          */\n         private Builder(JLoadProfileUsers userGroup) {\n             Objects.requireNonNull(userGroup);\n@@ -81,12 +86,14 @@ public class JLoadProfileUserGroups implements JLoadProfile {\n             this.tickInterval = DEFAULT_TICK_INTERVAL;\n         }\n \n-        /** Builder of the JLoadProfileUserGroups\n+        /**\n+         * Builder of the JLoadProfileUserGroups\n+         *\n+         * @param userGroup  - User group which Jagger will imitate\n+         * @param userGroups - User groups which Jagger will imitate\n          * @n\n          * @details Constructor parameters are mandatory for the JLoadProfileUserGroups. All parameters, set by setters are optional\n          * @n\n-         * @param userGroup   - User group which Jagger will imitate\n-         * @param userGroups  - User groups which Jagger will imitate\n          */\n         public Builder(JLoadProfileUsers userGroup, JLoadProfileUsers... userGroups) {\n             Objects.requireNonNull(userGroup);\n@@ -98,7 +105,9 @@ public class JLoadProfileUserGroups implements JLoadProfile {\n         }\n \n \n-        /** Creates an object of JLoadProfileUserGroups type with custom parameters.\n+        /**\n+         * Creates an object of JLoadProfileUserGroups type with custom parameters.\n+         *\n          * @return JLoadProfileUserGroups object.\n          */\n         public JLoadProfileUserGroups build() {\n@@ -107,6 +116,7 @@ public class JLoadProfileUserGroups implements JLoadProfile {\n \n         /**\n          * Optional: Delay between invocations in seconds. Default is 0 s.\n+         *\n          * @param delayBetweenInvocationsInMilliseconds Delay between invocations in seconds\n          */\n         public Builder withDelayBetweenInvocationsInMilliseconds(int delayBetweenInvocationsInMilliseconds) {\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/197/JLoadProfileUserGroups.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/197/JLoadProfileUserGroups.java\nindex 471ea0f43c1..c523aabd7cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/197/JLoadProfileUserGroups.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/197/JLoadProfileUserGroups.java\n@@ -113,7 +113,7 @@ public class JLoadProfileUserGroups implements JLoadProfile {\n             if (delayBetweenInvocationsInMilliseconds < 0) {\n                 throw new IllegalArgumentException(\n                         String.format(\"Delay between invocations must be >= 0. Provided value is %s\", delayBetweenInvocationsInMilliseconds));\n-            }\n+    }\n             this.delayBetweenInvocationsInMilliseconds = delayBetweenInvocationsInMilliseconds;\n             return this;\n         }\n@@ -130,4 +130,4 @@ public class JLoadProfileUserGroups implements JLoadProfile {\n     public int getTickInterval() {\n         return tickInterval;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}