{
    "project_name": "neo4j-neo4j",
    "error_id": "1544",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "116",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "94",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "158",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "144",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1544/ModularDatabaseCreationContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1544/ModularDatabaseCreationContext.java\nindex 8f0c8041f45..2a580059e59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1544/ModularDatabaseCreationContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1544/ModularDatabaseCreationContext.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.factory.module;\n \n import java.util.function.Function;\n@@ -100,7 +101,7 @@ public class ModularDatabaseCreationContext implements DatabaseCreationContext\n     private final VersionContextSupplier versionContextSupplier;\n     private final CollectionsFactorySupplier collectionsFactorySupplier;\n     private final Iterable<ExtensionFactory<?>> extensionFactories;\n-    private final Function<DatabaseLayout,DatabaseLayoutWatcher> watcherServiceFactory;\n+    private final Function<DatabaseLayout, DatabaseLayoutWatcher> watcherServiceFactory;\n     private final DatabaseLayout databaseLayout;\n     private final DatabaseEventListeners eventListeners;\n     private final GlobalTransactionEventListeners transactionEventListeners;\n@@ -112,9 +113,9 @@ public class ModularDatabaseCreationContext implements DatabaseCreationContext\n     private final GlobalMemoryGroupTracker transactionsMemoryPool;\n     private final GlobalMemoryGroupTracker otherMemoryPool;\n \n-    public ModularDatabaseCreationContext( NamedDatabaseId namedDatabaseId, GlobalModule globalModule, Dependencies globalDependencies,\n-                                           Monitors parentMonitors, EditionDatabaseComponents editionComponents, GlobalProcedures globalProcedures,\n-                                           VersionContextSupplier versionContextSupplier, DatabaseConfig databaseConfig, LeaseService leaseService )\n+    public ModularDatabaseCreationContext(NamedDatabaseId namedDatabaseId, GlobalModule globalModule, Dependencies globalDependencies,\n+                                          Monitors parentMonitors, EditionDatabaseComponents editionComponents, GlobalProcedures globalProcedures,\n+                                          VersionContextSupplier versionContextSupplier, DatabaseConfig databaseConfig, LeaseService leaseService)\n     {\n         this.namedDatabaseId = namedDatabaseId;\n         this.globalConfig = globalModule.getGlobalConfig();\n@@ -126,8 +127,8 @@ public class ModularDatabaseCreationContext implements DatabaseCreationContext\n         this.idController = idContext.getIdController();\n         this.transactionsMemoryPool = globalModule.getTransactionsMemoryPool();\n         this.otherMemoryPool = globalModule.getOtherMemoryPool();\n-        this.databaseLayout = globalModule.getNeo4jLayout().databaseLayout( namedDatabaseId.name() );\n-        this.databaseLogService = new DatabaseLogService( namedDatabaseId, globalModule.getLogService() );\n+        this.databaseLayout = globalModule.getNeo4jLayout().databaseLayout(namedDatabaseId.name());\n+        this.databaseLogService = new DatabaseLogService(namedDatabaseId, globalModule.getLogService());\n         this.scheduler = globalModule.getJobScheduler();\n         this.globalDependencies = globalDependencies;\n         this.tokenHolders = editionComponents.getTokenHolders();\n@@ -138,8 +139,8 @@ public class ModularDatabaseCreationContext implements DatabaseCreationContext\n         this.fs = globalModule.getFileSystem();\n         this.transactionStats = editionComponents.getTransactionMonitor();\n         this.eventListeners = globalModule.getDatabaseEventListeners();\n-        this.databaseHealthFactory = () -> new DatabaseHealth( new DatabasePanicEventGenerator( eventListeners, namedDatabaseId ),\n-                        databaseLogService.getInternalLog( DatabaseHealth.class ) );\n+        this.databaseHealthFactory = () -> new DatabaseHealth(new DatabasePanicEventGenerator(eventListeners, namedDatabaseId),\n+          databaseLogService.getInternalLog(DatabaseHealth.class));\n         this.commitProcessFactory = editionComponents.getCommitProcessFactory();\n         this.pageCache = globalModule.getPageCache();\n         this.constraintSemantics = editionComponents.getConstraintSemantics();\n@@ -153,7 +154,7 @@ public class ModularDatabaseCreationContext implements DatabaseCreationContext\n         this.extensionFactories = globalModule.getExtensionFactories();\n         this.watcherServiceFactory = editionComponents.getWatcherServiceFactory();\n         this.databaseAvailabilityGuardFactory =\n-                databaseTimeoutMillis -> databaseAvailabilityGuardFactory( namedDatabaseId, globalModule, databaseTimeoutMillis );\n+          databaseTimeoutMillis -> databaseAvailabilityGuardFactory(namedDatabaseId, globalModule, databaseTimeoutMillis);\n         this.storageEngineFactory = globalModule.getStorageEngineFactory();\n         this.fileLockerService = globalModule.getFileLockerService();\n         this.accessCapabilityFactory = editionComponents.getAccessCapabilityFactory();\n@@ -342,7 +343,7 @@ public class ModularDatabaseCreationContext implements DatabaseCreationContext\n     }\n \n     @Override\n-    public Function<DatabaseLayout,DatabaseLayoutWatcher> getWatcherServiceFactory()\n+    public Function<DatabaseLayout, DatabaseLayoutWatcher> getWatcherServiceFactory()\n     {\n         return watcherServiceFactory;\n     }\n@@ -401,9 +402,9 @@ public class ModularDatabaseCreationContext implements DatabaseCreationContext\n         return otherMemoryPool;\n     }\n \n-    private DatabaseAvailabilityGuard databaseAvailabilityGuardFactory( NamedDatabaseId namedDatabaseId, GlobalModule globalModule, long databaseTimeoutMillis )\n+    private DatabaseAvailabilityGuard databaseAvailabilityGuardFactory(NamedDatabaseId namedDatabaseId, GlobalModule globalModule, long databaseTimeoutMillis)\n     {\n-        Log guardLog = databaseLogService.getInternalLog( DatabaseAvailabilityGuard.class );\n-        return new DatabaseAvailabilityGuard( namedDatabaseId, clock, guardLog, databaseTimeoutMillis, globalModule.getGlobalAvailabilityGuard() );\n+        Log guardLog = databaseLogService.getInternalLog(DatabaseAvailabilityGuard.class);\n+        return new DatabaseAvailabilityGuard(namedDatabaseId, clock, guardLog, databaseTimeoutMillis, globalModule.getGlobalAvailabilityGuard());\n     }\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1544/ModularDatabaseCreationContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1544/ModularDatabaseCreationContext.java\nindex 8f0c8041f45..ac1cc8e8289 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1544/ModularDatabaseCreationContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1544/ModularDatabaseCreationContext.java\n@@ -406,4 +406,4 @@ public class ModularDatabaseCreationContext implements DatabaseCreationContext\n         Log guardLog = databaseLogService.getInternalLog( DatabaseAvailabilityGuard.class );\n         return new DatabaseAvailabilityGuard( namedDatabaseId, clock, guardLog, databaseTimeoutMillis, globalModule.getGlobalAvailabilityGuard() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}