{
    "project_name": "apache-ignite-3",
    "error_id": "66",
    "information": {
        "errors": [
            {
                "line": "29",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    extends BytecodeExpression {\n    private final BytecodeExpression left;\n    private final BytecodeExpression right;\n\n    OrBytecodeExpression(BytecodeExpression left, BytecodeExpression right) {\n        super(type(boolean.class));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/66/OrBytecodeExpression.java\nindex 25dfa790338..fc4a260ce9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/66/OrBytecodeExpression.java\n@@ -26,6 +26,7 @@ import static java.util.Objects.requireNonNull;\n class OrBytecodeExpression\n     extends BytecodeExpression {\n     private final BytecodeExpression left;\n+\n     private final BytecodeExpression right;\n \n     OrBytecodeExpression(BytecodeExpression left, BytecodeExpression right) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/66/OrBytecodeExpression.java\nindex 25dfa790338..6b337e4959f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/66/OrBytecodeExpression.java\n@@ -11,6 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.facebook.presto.bytecode.expression;\n \n import com.facebook.presto.bytecode.BytecodeBlock;\n@@ -25,40 +26,43 @@ import static java.util.Objects.requireNonNull;\n \n class OrBytecodeExpression\n     extends BytecodeExpression {\n-    private final BytecodeExpression left;\n-    private final BytecodeExpression right;\n+  private final BytecodeExpression left;\n+\n+  private final BytecodeExpression right;\n \n-    OrBytecodeExpression(BytecodeExpression left, BytecodeExpression right) {\n-        super(type(boolean.class));\n-        this.left = requireNonNull(left, \"left is null\");\n-        checkArgument(left.getType().getPrimitiveType() == boolean.class, \"Expected left to be type boolean but is %s\", left.getType());\n-        this.right = requireNonNull(right, \"right is null\");\n-        checkArgument(right.getType().getPrimitiveType() == boolean.class, \"Expected right to be type boolean but is %s\", right.getType());\n-    }\n+  OrBytecodeExpression(BytecodeExpression left, BytecodeExpression right) {\n+    super(type(boolean.class));\n+    this.left = requireNonNull(left, \"left is null\");\n+    checkArgument(left.getType().getPrimitiveType() == boolean.class, \"Expected left to be type boolean but is %s\",\n+        left.getType());\n+    this.right = requireNonNull(right, \"right is null\");\n+    checkArgument(right.getType().getPrimitiveType() == boolean.class, \"Expected right to be type boolean but is %s\",\n+        right.getType());\n+  }\n \n-    @Override\n-    public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n-        LabelNode trueLabel = new LabelNode(\"true\");\n-        LabelNode endLabel = new LabelNode(\"end\");\n-        return new BytecodeBlock()\n-            .append(left)\n-            .ifTrueGoto(trueLabel)\n-            .append(right)\n-            .ifTrueGoto(trueLabel)\n-            .push(false)\n-            .gotoLabel(endLabel)\n-            .visitLabel(trueLabel)\n-            .push(true)\n-            .visitLabel(endLabel);\n-    }\n+  @Override\n+  public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n+    LabelNode trueLabel = new LabelNode(\"true\");\n+    LabelNode endLabel = new LabelNode(\"end\");\n+    return new BytecodeBlock()\n+        .append(left)\n+        .ifTrueGoto(trueLabel)\n+        .append(right)\n+        .ifTrueGoto(trueLabel)\n+        .push(false)\n+        .gotoLabel(endLabel)\n+        .visitLabel(trueLabel)\n+        .push(true)\n+        .visitLabel(endLabel);\n+  }\n \n-    @Override\n-    public List<BytecodeNode> getChildNodes() {\n-        return List.of(left, right);\n-    }\n+  @Override\n+  public List<BytecodeNode> getChildNodes() {\n+    return List.of(left, right);\n+  }\n \n-    @Override\n-    protected String formatOneLine() {\n-        return \"(\" + left + \" || \" + right + \")\";\n-    }\n+  @Override\n+  protected String formatOneLine() {\n+    return \"(\" + left + \" || \" + right + \")\";\n+  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/66/OrBytecodeExpression.java\nindex 25dfa790338..9e95ea35903 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/66/OrBytecodeExpression.java\n@@ -61,4 +61,4 @@ class OrBytecodeExpression\n     protected String formatOneLine() {\n         return \"(\" + left + \" || \" + right + \")\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "54",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "71",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "76",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/66/OrBytecodeExpression.java\nindex 25dfa790338..a25e5efd20c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/66/OrBytecodeExpression.java\n@@ -23,42 +23,57 @@ import static com.facebook.presto.bytecode.BytecodeUtils.checkArgument;\n import static com.facebook.presto.bytecode.ParameterizedType.type;\n import static java.util.Objects.requireNonNull;\n \n-class OrBytecodeExpression\n-    extends BytecodeExpression {\n+class OrBytecodeExpression extends BytecodeExpression {\n+\n     private final BytecodeExpression left;\n+\n+\n     private final BytecodeExpression right;\n \n+\n     OrBytecodeExpression(BytecodeExpression left, BytecodeExpression right) {\n-        super(type(boolean.class));\n-        this.left = requireNonNull(left, \"left is null\");\n-        checkArgument(left.getType().getPrimitiveType() == boolean.class, \"Expected left to be type boolean but is %s\", left.getType());\n-        this.right = requireNonNull(right, \"right is null\");\n-        checkArgument(right.getType().getPrimitiveType() == boolean.class, \"Expected right to be type boolean but is %s\", right.getType());\n-    }\n+                                                                                super(type(boolean.class));\n+\n+                                                                                this.left = requireNonNull(left, \"left is null\");\n+\n+                                                                                checkArgument(\n+                                                                                    left.getType().getPrimitiveType() == boolean.class,\n+                                                                                    \"Expected left to be type boolean but is %s\",\n+                                                                                    left.getType()\n+                                                                                );\n+                                                                                this.right = requireNonNull(right, \"right is null\");\n \n-    @Override\n-    public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n+                                                                                checkArgument(\n+                                                                                    right.getType().getPrimitiveType() == boolean.class,\n+                                                                                    \"Expected right to be type boolean but is %s\",\n+                                                                                    right.getType()\n+                                                                                );\n+                                                                            }\n+\n+\n+    @Override public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n         LabelNode trueLabel = new LabelNode(\"true\");\n+\n         LabelNode endLabel = new LabelNode(\"end\");\n-        return new BytecodeBlock()\n-            .append(left)\n-            .ifTrueGoto(trueLabel)\n-            .append(right)\n-            .ifTrueGoto(trueLabel)\n-            .push(false)\n-            .gotoLabel(endLabel)\n-            .visitLabel(trueLabel)\n-            .push(true)\n-            .visitLabel(endLabel);\n+\n+        return new BytecodeBlock().append(left)\n+                                  .ifTrueGoto(trueLabel)\n+                                  .append(right)\n+                                  .ifTrueGoto(trueLabel)\n+                                  .push(false)\n+                                  .gotoLabel(endLabel)\n+                                  .visitLabel(trueLabel)\n+                                  .push(true)\n+                                  .visitLabel(endLabel);\n     }\n \n-    @Override\n-    public List<BytecodeNode> getChildNodes() {\n+\n+    @Override public List<BytecodeNode> getChildNodes() {\n         return List.of(left, right);\n     }\n \n-    @Override\n-    protected String formatOneLine() {\n+\n+    @Override protected String formatOneLine() {\n         return \"(\" + left + \" || \" + right + \")\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/66/OrBytecodeExpression.java\nindex 25dfa790338..fc4a260ce9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/66/OrBytecodeExpression.java\n@@ -26,6 +26,7 @@ import static java.util.Objects.requireNonNull;\n class OrBytecodeExpression\n     extends BytecodeExpression {\n     private final BytecodeExpression left;\n+\n     private final BytecodeExpression right;\n \n     OrBytecodeExpression(BytecodeExpression left, BytecodeExpression right) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/66/OrBytecodeExpression.java\nindex 25dfa790338..fc4a260ce9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/66/OrBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/66/OrBytecodeExpression.java\n@@ -26,6 +26,7 @@ import static java.util.Objects.requireNonNull;\n class OrBytecodeExpression\n     extends BytecodeExpression {\n     private final BytecodeExpression left;\n+\n     private final BytecodeExpression right;\n \n     OrBytecodeExpression(BytecodeExpression left, BytecodeExpression right) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}