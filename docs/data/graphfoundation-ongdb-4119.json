{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4119",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4119/ActiveLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4119/ActiveLock.java\nindex 3ddf6daf713..12922b7e2ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4119/ActiveLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4119/ActiveLock.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.locking;\n \n import java.util.Objects;\n@@ -25,94 +26,94 @@ import org.neo4j.storageengine.api.lock.ResourceType;\n \n public interface ActiveLock\n {\n-    String SHARED_MODE = \"SHARED\";\n-    String EXCLUSIVE_MODE = \"EXCLUSIVE\";\n+  String SHARED_MODE = \"SHARED\";\n+  String EXCLUSIVE_MODE = \"EXCLUSIVE\";\n \n-    String mode();\n+  String mode();\n \n-    ResourceType resourceType();\n+  ResourceType resourceType();\n \n-    long resourceId();\n+  long resourceId();\n \n-    static ActiveLock exclusiveLock( ResourceType resourceType, long resourceId )\n+  static ActiveLock exclusiveLock(ResourceType resourceType, long resourceId)\n+  {\n+    return new Implementation(resourceType, resourceId)\n+    {\n+      @Override\n+      public String mode()\n+      {\n+        return EXCLUSIVE_MODE;\n+      }\n+    };\n+  }\n+\n+  static ActiveLock sharedLock(ResourceType resourceType, long resourceId)\n+  {\n+    return new Implementation(resourceType, resourceId)\n+    {\n+      @Override\n+      public String mode()\n+      {\n+        return SHARED_MODE;\n+      }\n+    };\n+  }\n+\n+  interface Factory\n+  {\n+    Factory SHARED_LOCK = ActiveLock::sharedLock;\n+    Factory EXCLUSIVE_LOCK = ActiveLock::exclusiveLock;\n+\n+    ActiveLock create(ResourceType resourceType, long resourceId);\n+  }\n+\n+  abstract class Implementation implements ActiveLock\n+  {\n+    private final ResourceType resourceType;\n+    private final long resourceId;\n+\n+    private Implementation(ResourceType resourceType, long resourceId)\n     {\n-        return new Implementation( resourceType, resourceId )\n-        {\n-            @Override\n-            public String mode()\n-            {\n-                return EXCLUSIVE_MODE;\n-            }\n-        };\n+      this.resourceType = resourceType;\n+      this.resourceId = resourceId;\n     }\n \n-    static ActiveLock sharedLock( ResourceType resourceType, long resourceId )\n+    @Override\n+    public abstract String mode();\n+\n+    @Override\n+    public ResourceType resourceType()\n     {\n-        return new Implementation( resourceType, resourceId )\n-        {\n-            @Override\n-            public String mode()\n-            {\n-                return SHARED_MODE;\n-            }\n-        };\n+      return resourceType;\n     }\n \n-    interface Factory\n+    @Override\n+    public long resourceId()\n     {\n-        Factory SHARED_LOCK = ActiveLock::sharedLock;\n-        Factory EXCLUSIVE_LOCK = ActiveLock::exclusiveLock;\n+      return resourceId;\n+    }\n \n-        ActiveLock create( ResourceType resourceType, long resourceId );\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+      if (this == o)\n+      {\n+        return true;\n+      }\n+      if (!(o instanceof ActiveLock))\n+      {\n+        return false;\n+      }\n+      ActiveLock that = (ActiveLock) o;\n+      return resourceId == that.resourceId() &&\n+          Objects.equals(mode(), that.mode()) &&\n+          Objects.equals(resourceType, that.resourceType());\n     }\n \n-    abstract class Implementation implements ActiveLock\n+    @Override\n+    public int hashCode()\n     {\n-        private final ResourceType resourceType;\n-        private final long resourceId;\n-\n-        private Implementation( ResourceType resourceType, long resourceId )\n-        {\n-            this.resourceType = resourceType;\n-            this.resourceId = resourceId;\n-        }\n-\n-        @Override\n-        public abstract String mode();\n-\n-        @Override\n-        public ResourceType resourceType()\n-        {\n-            return resourceType;\n-        }\n-\n-        @Override\n-        public long resourceId()\n-        {\n-            return resourceId;\n-        }\n-\n-        @Override\n-        public boolean equals( Object o )\n-        {\n-            if ( this == o )\n-            {\n-                return true;\n-            }\n-            if ( !(o instanceof ActiveLock) )\n-            {\n-                return false;\n-            }\n-            ActiveLock that = (ActiveLock) o;\n-            return resourceId == that.resourceId() &&\n-                    Objects.equals( mode(), that.mode() ) &&\n-                    Objects.equals( resourceType, that.resourceType() );\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            return Objects.hash( resourceType, resourceId, mode() );\n-        }\n+      return Objects.hash(resourceType, resourceId, mode());\n     }\n+  }\n }\n",
            "diff_size": 133
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "109",
                    "column": "52",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4119/ActiveLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4119/ActiveLock.java\nindex 3ddf6daf713..b6dec3380ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4119/ActiveLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4119/ActiveLock.java\n@@ -99,13 +99,14 @@ public interface ActiveLock\n             {\n                 return true;\n             }\n-            if ( !(o instanceof ActiveLock) )\n+\n+if ( !( o instanceof ActiveLock) )\n             {\n                 return false;\n             }\n-            ActiveLock that = (ActiveLock) o;\n-            return resourceId == that.resourceId() &&\n-                    Objects.equals( mode(), that.mode() ) &&\n+\n+ActiveLock that = (ActiveLock) o;\n+            return resourceId == that.resourceId() &&Objects.equals( mode(), that.mode() ) &&\n                     Objects.equals( resourceType, that.resourceType() );\n         }\n \n@@ -115,4 +116,4 @@ public interface ActiveLock\n             return Objects.hash( resourceType, resourceId, mode() );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}