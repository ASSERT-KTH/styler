{
    "project_name": "findbugsproject-findbugs",
    "error_id": "52",
    "information": {
        "errors": [
            {
                "line": "1760",
                "column": "13",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            int skipped = bugCollection.getCollection().size() - idMap.size();\n            if (skipped == 0)\n            \t\treturn String.format(\"%d issues synchronized with database\", idMap.size());\n            else\n                    return String.format(\"%d issues synchronized with database, %d low rank issues not synchronized\", \n                            idMap.size(), skipped);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/52/DBCloud.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/52/DBCloud.java\nindex 0cd62ec801a..82d64d790ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/52/DBCloud.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/52/DBCloud.java\n@@ -1757,7 +1757,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         else if (updatesSentToDatabase == 0) {\n             int skipped = bugCollection.getCollection().size() - idMap.size();\n             if (skipped == 0)\n-            \t\treturn String.format(\"%d issues synchronized with database\", idMap.size());\n+                return String.format(\"%d issues synchronized with database\", idMap.size());\n             else\n                     return String.format(\"%d issues synchronized with database, %d low rank issues not synchronized\", \n                             idMap.size(), skipped);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/52/DBCloud.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/52/DBCloud.java\nindex 0cd62ec801a..fb364a6e177 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/52/DBCloud.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/52/DBCloud.java\n@@ -128,36 +128,44 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n         @CheckForNull\n         BugDesignation getPrimaryDesignation() {\n-            for (BugDesignation bd : designations)\n-                if (findbugsUser.equals(bd.getUser()))\n+            for (BugDesignation bd : designations) {\n+                if (findbugsUser.equals(bd.getUser())) {\n                     return bd;\n+                }\n+            }\n \n             return null;\n         }\n \n         @CheckForNull\n         BugDesignation getUserDesignation() {\n-            for (BugDesignation d : designations)\n-                if (findbugsUser.equals(d.getUser()))\n+            for (BugDesignation d : designations) {\n+                if (findbugsUser.equals(d.getUser())) {\n                     return new BugDesignation(d);\n+                }\n+            }\n             return null;\n         }\n \n         Collection<BugDesignation> getUniqueDesignations() {\n-            if (designations.isEmpty())\n+            if (designations.isEmpty()) {\n                 return Collections.emptyList();\n+            }\n             HashSet<String> reviewers = new HashSet<String>();\n             ArrayList<BugDesignation> result = new ArrayList<BugDesignation>(designations.size());\n-            for (BugDesignation d : designations)\n-                if (reviewers.add(d.getUser()))\n+            for (BugDesignation d : designations) {\n+                if (reviewers.add(d.getUser())) {\n                     result.add(d);\n+                }\n+            }\n             return result;\n         }\n \n         Set<String> getReviewers() {\n             HashSet<String> reviewers = new HashSet<String>();\n-            for (BugDesignation bd : designations)\n+            for (BugDesignation bd : designations) {\n                 reviewers.add(bd.getUser());\n+            }\n             reviewers.remove(\"\");\n             reviewers.remove(null);\n             return reviewers;\n@@ -165,36 +173,40 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n         boolean isClaimed() {\n             for (BugDesignation bd : getUniqueDesignations()) {\n-                if (bd.getDesignationKey().equals(UserDesignation.I_WILL_FIX.name()))\n+                if (bd.getDesignationKey().equals(UserDesignation.I_WILL_FIX.name())) {\n                     return true;\n+                }\n             }\n             return false;\n         }\n \n         BugDesignation getNonnullUserDesignation() {\n             BugDesignation d = getUserDesignation();\n-            if (d != null)\n+            if (d != null) {\n                 return d;\n+            }\n             d = new BugDesignation(UserDesignation.UNCLASSIFIED.name(), System.currentTimeMillis(), \"\", findbugsUser);\n             return d;\n         }\n \n         public boolean canSeeCommentsByOthers() {\n             switch (getMode()) {\n-            case SECRET:\n-                return false;\n-            case COMMUNAL:\n-                return true;\n-            case VOTING:\n-                return hasVoted();\n+                case SECRET:\n+                    return false;\n+                case COMMUNAL:\n+                    return true;\n+                case VOTING:\n+                    return hasVoted();\n             }\n             throw new IllegalStateException();\n         }\n \n         public boolean hasVoted() {\n-            for (BugDesignation bd : designations)\n-                if (findbugsUser.equals(bd.getUser()))\n+            for (BugDesignation bd : designations) {\n+                if (findbugsUser.equals(bd.getUser())) {\n                     return true;\n+                }\n+            }\n             return false;\n         }\n     }\n@@ -244,8 +256,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         BugData bd = instanceMap.get(hash);\n         firstSeen = sanityCheckFirstSeen(firstSeen);\n         lastSeen = sanityCheckLastSeen(lastSeen);\n-        if (bd == null)\n+        if (bd == null) {\n             return;\n+        }\n         if (idMap.containsKey(id)) {\n             assert bd == idMap.get(id);\n             assert bd.id == id;\n@@ -258,8 +271,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             bd.inDatabase = true;\n             idMap.put(id, bd);\n         }\n-        if (bd.firstSeen < FIRST_LIGHT)\n+        if (bd.firstSeen < FIRST_LIGHT) {\n             throw new IllegalStateException(\"Bug has first seen of \" + new Date(bd.firstSeen));\n+        }\n     }\n \n     private BugFilingCommentHelper bugFilingCommentHelper = new BugFilingCommentHelper(this);\n@@ -274,20 +288,23 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         dbUser = getJDBCProperty(\"dbUser\");\n         dbPassword = getJDBCProperty(\"dbPassword\");\n         findbugsUser = getCloudProperty(FINDBUGS_USER_PROPERTY);\n-        if (PROMPT_FOR_USER_NAME)\n+        if (PROMPT_FOR_USER_NAME) {\n             ipAddressLookup = new IPAddressLookup();\n+        }\n         this.now = System.currentTimeMillis();\n     }\n \n     long sanityCheckFirstSeen(long time) {\n-        if (time < FIRST_LIGHT)\n+        if (time < FIRST_LIGHT) {\n             return now;\n+        }\n         return time;\n     }\n \n     long sanityCheckLastSeen(long time) {\n-        if (time > now + ONE_DAY)\n+        if (time > now + ONE_DAY) {\n             return now;\n+        }\n         return time;\n     }\n \n@@ -301,15 +318,16 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 bugCollection.getProject().getGuiCallback().showMessageDialog(msg);\n             }\n             signinState = SigninState.SIGNIN_FAILED;\n-            if (THROW_EXCEPTION_IF_CANT_CONNECT)\n+            if (THROW_EXCEPTION_IF_CANT_CONNECT) {\n                 throw new RuntimeException(\"Unable to load database properties\");\n+            }\n             return false;\n         }\n         return true;\n     }\n \n     final Pattern FORBIDDEN_PACKAGE_PREFIXES = Pattern.compile(properties.getProperty(\"findbugs.forbiddenPackagePrefixes\",\n-            \" none \").replace(',', '|'));\n+        \" none \").replace(',', '|'));\n \n     final boolean PROMPT_FOR_USER_NAME = properties.getBoolean(\"findbugs.cloud.promptForUserName\", false);\n \n@@ -327,31 +345,33 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n     public void initiateCommunication() {\n         bugsPopulated();\n-        if (communicationInitiated.compareAndSet(false, true))\n+        if (communicationInitiated.compareAndSet(false, true)) {\n             queue.add(new PopulateBugs(true));\n+        }\n     }\n \n     /**\n      * Returns true if communication has already been initiated (and perhaps completed).\n-     * \n      */\n     @Override\n     public boolean communicationInitiated() {\n-            return bugsPopulated.getCount() == 0 && communicationInitiated.get();\n+        return bugsPopulated.getCount() == 0 && communicationInitiated.get();\n     }\n \n     private static final long LAST_SEEN_UPDATE_WINDOW = TimeUnit.MILLISECONDS.convert(7 * 24 * 3600, TimeUnit.SECONDS);\n \n     long boundDuration(long milliseconds) {\n-        if (milliseconds < 0)\n+        if (milliseconds < 0) {\n             return 0;\n-        if (milliseconds > 1000 * 1000)\n+        }\n+        if (milliseconds > 1000 * 1000) {\n             return 1000 * 1000;\n+        }\n         return milliseconds;\n     }\n \n     static boolean invocationRecorded;\n-    \n+\n     static final boolean LOG_BUG_UPLOADS = SystemProperties.getBoolean(\"cloud.buguploads.log\");\n \n     class PopulateBugs implements Update {\n@@ -368,20 +388,23 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         @SuppressWarnings(\"boxing\")\n         public void execute(DatabaseSyncTask t) throws SQLException {\n \n-            if (startShutdown)\n+            if (startShutdown) {\n                 return;\n+            }\n             String commonPrefix = null;\n             int updates = 0;\n             if (performFullLoad) {\n-                for (BugInstance b : bugCollection.getCollection())\n+                for (BugInstance b : bugCollection.getCollection()) {\n                     if (!skipBug(b)) {\n                         commonPrefix = Util.commonPrefix(commonPrefix, b.getPrimaryClass().getClassName());\n                         getBugData(b.getInstanceHash()).bugs.add(b);\n                     }\n-                if (commonPrefix == null)\n+                }\n+                if (commonPrefix == null) {\n                     commonPrefix = \"<no bugs>\";\n-                else if (commonPrefix.length() > 128)\n+                } else if (commonPrefix.length() > 128) {\n                     commonPrefix = commonPrefix.substring(0, 128);\n+                }\n             }\n             try {\n                 long startTime = System.currentTimeMillis();\n@@ -405,8 +428,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                     rs.close();\n                     ps.close();\n                 }\n-                if (startShutdown)\n+                if (startShutdown) {\n                     return;\n+                }\n \n                 ps = c.prepareStatement(\"SELECT id, issueId, who, designation, comment, time FROM findbugs_evaluation\");\n \n@@ -437,8 +461,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 }\n                 rs.close();\n                 ps.close();\n-                if (startShutdown)\n+                if (startShutdown) {\n                     return;\n+                }\n \n                 ps = c.prepareStatement(\"SELECT hash, bugReportId, whoFiled, whenFiled, status, assignedTo, componentName FROM findbugs_bugreport\");\n \n@@ -458,10 +483,11 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n                     if (data != null) {\n                         if (Util.nullSafeEquals(data.bugLink, bugReportId) && Util.nullSafeEquals(data.filedBy, whoFiled)\n-                                && data.bugFiled == whenFiled.getTime() && Util.nullSafeEquals(data.bugAssignedTo, assignedTo)\n-                                && Util.nullSafeEquals(data.bugStatus, status)\n-                                && Util.nullSafeEquals(data.bugComponentName, componentName))\n+                            && data.bugFiled == whenFiled.getTime() && Util.nullSafeEquals(data.bugAssignedTo, assignedTo)\n+                            && Util.nullSafeEquals(data.bugStatus, status)\n+                            && Util.nullSafeEquals(data.bugComponentName, componentName)) {\n                             continue;\n+                        }\n \n                         data.bugLink = bugReportId;\n                         data.filedBy = whoFiled;\n@@ -478,8 +504,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 }\n                 rs.close();\n                 ps.close();\n-                if (startShutdown)\n+                if (startShutdown) {\n                     return;\n+                }\n \n                 if (!invocationRecorded) {\n                     long jvmStartTime = StartTime.START_TIME - StartTime.VM_START_TIME;\n@@ -497,12 +524,13 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                     String os = SystemProperties.getProperty(\"os.name\", \"\");\n                     String osVersion = SystemProperties.getProperty(\"os.version\");\n                     String jvmVersion = SystemProperties.getProperty(\"java.runtime.version\");\n-                    if (osVersion != null)\n+                    if (osVersion != null) {\n                         os = os + \" \" + osVersion;\n+                    }\n                     PreparedStatement insertSession = c\n-                            .prepareStatement(\n-                                    \"INSERT INTO findbugs_invocation (who, ipAddress, entryPoint, dataSource, fbVersion, os, jvmVersion, jvmLoadTime, findbugsLoadTime, analysisLoadTime, initialSyncTime, numIssues, startTime, commonPrefix)\"\n-                                            + \" VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", Statement.RETURN_GENERATED_KEYS);\n+                        .prepareStatement(\n+                            \"INSERT INTO findbugs_invocation (who, ipAddress, entryPoint, dataSource, fbVersion, os, jvmVersion, jvmLoadTime, findbugsLoadTime, analysisLoadTime, initialSyncTime, numIssues, startTime, commonPrefix)\"\n+                                + \" VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", Statement.RETURN_GENERATED_KEYS);\n                     @SuppressWarnings(\"hiding\")\n                     Timestamp now = new Timestamp(startTime);\n                     int col = 1;\n@@ -537,8 +565,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 e.printStackTrace();\n                 displayMessage(\"problem bulk loading database\", e);\n             }\n-            if (startShutdown)\n+            if (startShutdown) {\n                 return;\n+            }\n \n             if (!performFullLoad) {\n                 attemptedResync = new Date();\n@@ -548,38 +577,43 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 }\n             } else {\n                 long stillPresentAt = bugCollection.getTimestamp();\n-                for (BugInstance b : bugCollection.getCollection())\n+                for (BugInstance b : bugCollection.getCollection()) {\n                     if (!skipBug(b)) {\n                         BugData bd = getBugData(b.getInstanceHash());\n                         if (!bd.inDatabase) {\n                             storeNewBug(b, stillPresentAt);\n-                            if (LOG_BUG_UPLOADS) \n+                            if (LOG_BUG_UPLOADS) {\n                                 System.out.printf(\"NEW %tD: %s%n\", new Date(getLocalFirstSeen(b)), b.getMessage());\n+                            }\n                         } else {\n                             long firstSeenLocally = getLocalFirstSeen(b);\n \n                             if (FindBugs.validTimestamp(firstSeenLocally)\n-                                    && (firstSeenLocally < bd.firstSeen || !FindBugs.validTimestamp(bd.firstSeen))) {\n-                                if (LOG_BUG_UPLOADS) \n+                                && (firstSeenLocally < bd.firstSeen || !FindBugs.validTimestamp(bd.firstSeen))) {\n+                                if (LOG_BUG_UPLOADS) {\n                                     System.out.printf(\"BACKDATED %tD -> %tD: %s%n\", new Date(bd.firstSeen), new Date(firstSeenLocally), b.getMessage());\n-               \n+                                }\n+\n                                 bd.firstSeen = firstSeenLocally;\n                                 storeFirstSeen(bd);\n                             } else if (FindBugs.validTimestamp(stillPresentAt)\n-                                    && stillPresentAt > bd.lastSeen + LAST_SEEN_UPDATE_WINDOW) {\n+                                && stillPresentAt > bd.lastSeen + LAST_SEEN_UPDATE_WINDOW) {\n                                 storeLastSeen(bd, stillPresentAt);\n                             }\n \n                             BugDesignation designation = bd.getPrimaryDesignation();\n-                            if (designation != null)\n+                            if (designation != null) {\n                                 b.setUserDesignation(new BugDesignation(designation));\n+                            }\n                         }\n                     }\n+                }\n                 initialSyncDone.countDown();\n                 assert !scheduled;\n \n-                if (startShutdown)\n+                if (startShutdown) {\n                     return;\n+                }\n \n                 long delay = 10 * 60 * 1000; // 10 minutes\n                 if (!scheduled) {\n@@ -610,8 +644,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     int numSkipped = 0;\n \n     private static String limitToMaxLength(String s, int maxLength) {\n-        if (s.length() <= maxLength)\n+        if (s.length() <= maxLength) {\n             return s;\n+        }\n         return s.substring(0, maxLength);\n     }\n \n@@ -642,17 +677,19 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n     @Override\n     public boolean initialize() throws IOException {\n-        if (CloudFactory.DEBUG)\n+        if (CloudFactory.DEBUG) {\n             System.out.println(\"Starting DBCloud initialization\");\n+        }\n         if (initializationIsDoomed()) {\n             signinState = SigninState.SIGNIN_FAILED;\n             return false;\n         }\n \n         signinState = SigninState.SIGNED_IN;\n-        if (CloudFactory.DEBUG) \n+        if (CloudFactory.DEBUG) {\n             System.out.println(\"DBCloud initialization preflight checks completed\");\n-       \n+        }\n+\n         loadBugComponents();\n         Connection c = null;\n         try {\n@@ -688,8 +725,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 throw new RuntimeException(\"Unable to get database results\");\n \n             } else {\n-                if (CloudFactory.DEBUG)\n+                if (CloudFactory.DEBUG) {\n                     System.out.println(\"Unable to connect to database\");\n+                }\n                 signinState = SigninState.SIGNIN_FAILED;\n                 return false;\n             }\n@@ -697,14 +735,16 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         } catch (RuntimeException e) {\n             displayMessage(\"Unable to connect to \" + dbName, e);\n \n-            if (THROW_EXCEPTION_IF_CANT_CONNECT)\n+            if (THROW_EXCEPTION_IF_CANT_CONNECT) {\n                 throw e;\n+            }\n             return false;\n         } catch (Exception e) {\n \n             displayMessage(\"Unable to connect to \" + dbName, e);\n-            if (THROW_EXCEPTION_IF_CANT_CONNECT)\n+            if (THROW_EXCEPTION_IF_CANT_CONNECT) {\n                 throw new RuntimeException(\"Unable to connect to database\", e);\n+            }\n             return false;\n         } finally {\n             Util.closeSilently(c);\n@@ -721,15 +761,18 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     }\n \n     private boolean initializationIsDoomed() throws IOException {\n-        if (!super.initialize())\n+        if (!super.initialize()) {\n             return true;\n-        if (!availableForInitialization())\n+        }\n+        if (!availableForInitialization()) {\n             return true;\n+        }\n \n         findbugsUser = getUsernameLookup().getUsername();\n \n-        if (findbugsUser == null)\n+        if (findbugsUser == null) {\n             return true;\n+        }\n         return false;\n     }\n \n@@ -754,18 +797,22 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 BufferedReader in = new BufferedReader(new InputStreamReader(u.openStream()));\n                 while (true) {\n                     String s = in.readLine();\n-                    if (s == null)\n+                    if (s == null) {\n                         break;\n-                    if (s.trim().length() == 0)\n+                    }\n+                    if (s.trim().length() == 0) {\n                         continue;\n+                    }\n                     int x = s.indexOf(' ');\n                     if (x == -1) {\n-                        if (!prefixBugComponentMapping.containsKey(\"\"))\n+                        if (!prefixBugComponentMapping.containsKey(\"\")) {\n                             prefixBugComponentMapping.put(\"\", s);\n+                        }\n                     } else {\n                         String prefix = s.substring(x + 1);\n-                        if (!prefixBugComponentMapping.containsKey(prefix))\n+                        if (!prefixBugComponentMapping.containsKey(prefix)) {\n                             prefixBugComponentMapping.put(prefix, s.substring(0, x));\n+                        }\n                     }\n \n                 }\n@@ -815,8 +862,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             if (!queue.isEmpty() && runnerThread.isAlive()) {\n                 setErrorMsg(\"waiting for synchronization to complete before shutdown\");\n                 for (int i = 0; i < 100; i++) {\n-                    if (queue.isEmpty() || !runnerThread.isAlive())\n+                    if (queue.isEmpty() || !runnerThread.isAlive()) {\n                         break;\n+                    }\n                     try {\n                         Thread.sleep(30);\n                     } catch (InterruptedException e) {\n@@ -833,8 +881,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     private RuntimeException shutdownException = new RuntimeException(\"DBCloud shutdown\");\n \n     private void checkForShutdown() {\n-        if (!shutdown)\n+        if (!shutdown) {\n             return;\n+        }\n         IllegalStateException e = new IllegalStateException(\"DBCloud has already been shutdown\");\n         e.initCause(shutdownException);\n         throw e;\n@@ -878,11 +927,12 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         updatedStatus();\n         if (firstTimeDoing(HAS_CLASSIFIED_ISSUES)) {\n             String msg = \"Classification and comments have been sent to database.\\n\"\n-                    + \"You'll only see this message the first time your classifcations/comments are sent\\n\" + \"to the database.\";\n-            if (getMode() == Mode.VOTING)\n+                + \"You'll only see this message the first time your classifcations/comments are sent\\n\" + \"to the database.\";\n+            if (getMode() == Mode.VOTING) {\n                 msg += \"\\nOnce you've classified an issue, you can see how others have classified it.\";\n+            }\n             msg += \"\\nYour classification and comments are independent from filing a bug using an external\\n\"\n-                    + \"bug reporting system.\";\n+                + \"bug reporting system.\";\n \n             bugCollection.getProject().getGuiCallback().showMessageDialog(msg);\n         }\n@@ -893,18 +943,18 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n     private boolean skipBug(BugInstance bug) {\n         boolean result = bug.getBugPattern().getCategory().equals(\"NOISE\") || bug.isDead()\n-                || BugRanker.findRank(bug) > MAX_DB_RANK;\n+            || BugRanker.findRank(bug) > MAX_DB_RANK;\n         if (result && firstTimeDoing(HAS_SKIPPED_BUG)) {\n             bugCollection\n-                    .getProject()\n-                    .getGuiCallback()\n-                    .showMessageDialog(\n-                            \"To limit database load, some issues are not persisted to database.\\n\"\n-                                    + \"For example, issues with rank greater than \" + MAX_DB_RANK\n-                                    + \" are not stored in the db.\\n\"\n-                                    + \"One of more of the issues you are reviewing will not be persisted,\\n\"\n-                                    + \"and you will not be able to record an evalution of those issues.\\n\"\n-                                    + \"As we scale up the database, we hope to relax these restrictions\");\n+                .getProject()\n+                .getGuiCallback()\n+                .showMessageDialog(\n+                    \"To limit database load, some issues are not persisted to database.\\n\"\n+                        + \"For example, issues with rank greater than \" + MAX_DB_RANK\n+                        + \" are not stored in the db.\\n\"\n+                        + \"One of more of the issues you are reviewing will not be persisted,\\n\"\n+                        + \"and you will not be able to record an evalution of those issues.\\n\"\n+                        + \"As we scale up the database, we hope to relax these restrictions\");\n         }\n         return result;\n     }\n@@ -920,14 +970,16 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         Connection c;\n \n         public void establishConnection() throws SQLException {\n-            if (c != null)\n+            if (c != null) {\n                 return;\n+            }\n             c = getConnection();\n         }\n \n         public void closeConnection() throws SQLException {\n-            if (c == null)\n+            if (c == null) {\n                 return;\n+            }\n             c.close();\n             c = null;\n         }\n@@ -966,19 +1018,22 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n         @SuppressWarnings(\"boxing\")\n         public void newEvaluation(BugData data, BugDesignation bd) {\n-            if (!data.inDatabase)\n+            if (!data.inDatabase) {\n                 return;\n+            }\n             try {\n                 data.designations.add(bd);\n-                if (bd.getUser() == null)\n+                if (bd.getUser() == null) {\n                     bd.setUser(findbugsUser);\n-                if (bd.getAnnotationText() == null)\n+                }\n+                if (bd.getAnnotationText() == null) {\n                     bd.setAnnotationText(\"\");\n+                }\n \n                 PreparedStatement insertEvaluation = c\n-                        .prepareStatement(\n-                                \"INSERT INTO findbugs_evaluation (issueId, who, invocationId, designation, comment, time) VALUES (?,?,?,?,?,?)\",\n-                                Statement.RETURN_GENERATED_KEYS);\n+                    .prepareStatement(\n+                        \"INSERT INTO findbugs_evaluation (issueId, who, invocationId, designation, comment, time) VALUES (?,?,?,?,?,?)\",\n+                        Statement.RETURN_GENERATED_KEYS);\n                 Timestamp date = new Timestamp(bd.getTimestamp());\n                 int col = 1;\n                 insertEvaluation.setInt(col++, data.id);\n@@ -1007,13 +1062,14 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             try {\n                 BugData bug = getBugData(b.getInstanceHash());\n \n-                if (bug.inDatabase)\n+                if (bug.inDatabase) {\n                     return;\n+                }\n \n                 PreparedStatement insertBugData = c\n-                        .prepareStatement(\n-                                \"INSERT INTO findbugs_issue (firstSeen, lastSeen, hash, bugPattern, priority, primaryClass) VALUES (?,?,?,?,?,?)\",\n-                                Statement.RETURN_GENERATED_KEYS);\n+                    .prepareStatement(\n+                        \"INSERT INTO findbugs_issue (firstSeen, lastSeen, hash, bugPattern, priority, primaryClass) VALUES (?,?,?,?,?,?)\",\n+                        Statement.RETURN_GENERATED_KEYS);\n                 int col = 1;\n                 insertBugData.setTimestamp(col++, new Timestamp(bug.firstSeen));\n                 insertBugData.setTimestamp(col++, new Timestamp(bug.lastSeen));\n@@ -1037,8 +1093,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         }\n \n         public void storeFirstSeen(BugData bug) {\n-            if (bug.firstSeen <= FIRST_LIGHT)\n+            if (bug.firstSeen <= FIRST_LIGHT) {\n                 return;\n+            }\n             try {\n \n                 PreparedStatement insertBugData = c.prepareStatement(\"UPDATE  findbugs_issue SET firstSeen = ? WHERE id = ?\");\n@@ -1056,8 +1113,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         }\n \n         public void storeLastSeen(BugData bug, long timestamp) {\n-            if (bug.lastSeen >= now + ONE_DAY)\n+            if (bug.lastSeen >= now + ONE_DAY) {\n                 return;\n+            }\n \n             try {\n \n@@ -1116,7 +1174,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                     rs.close();\n                     query.close();\n                     throw new IllegalArgumentException(whoFiled + \" already filed bug report \" + bugReportId + \" for \"\n-                            + bug.instanceHash);\n+                        + bug.instanceHash);\n                 }\n                 pendingId = id;\n                 needsUpdate = !who.equals(whoFiled);\n@@ -1132,8 +1190,8 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n         if (pendingId == -1) {\n             PreparedStatement insert = c\n-                    .prepareStatement(\"INSERT INTO findbugs_bugreport (hash, bugReportId, whoFiled, whenFiled)\"\n-                            + \" VALUES (?, ?, ?, ?)\");\n+                .prepareStatement(\"INSERT INTO findbugs_bugreport (hash, bugReportId, whoFiled, whenFiled)\"\n+                    + \" VALUES (?, ?, ?, ?)\");\n \n             Timestamp date = new Timestamp(when);\n             int col = 1;\n@@ -1143,12 +1201,10 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             insert.setTimestamp(col++, date);\n             insert.executeUpdate();\n             insert.close();\n-        }\n-\n-        else if (needsUpdate) {\n+        } else if (needsUpdate) {\n \n             PreparedStatement updateBug = c\n-                    .prepareStatement(\"UPDATE  findbugs_bugreport SET whoFiled = ?,  whenFiled = ? WHERE id = ?\");\n+                .prepareStatement(\"UPDATE  findbugs_bugreport SET whoFiled = ?,  whenFiled = ? WHERE id = ?\");\n             try {\n                 int col = 1;\n                 updateBug.setString(col++, bug.filedBy);\n@@ -1180,8 +1236,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n     boolean bugAlreadyFiled(BugInstance b) {\n         BugData bd = getBugData(b.getInstanceHash());\n-        if (bd == null || !bd.inDatabase)\n+        if (bd == null || !bd.inDatabase) {\n             throw new IllegalArgumentException();\n+        }\n         return bd.bugLink != null && !bd.bugLink.equals(NONE) && !bd.bugLink.equals(PENDING);\n \n     }\n@@ -1190,8 +1247,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n         public FileBug(BugInstance bug) {\n             this.bd = getBugData(bug.getInstanceHash());\n-            if (bd == null || !bd.inDatabase)\n+            if (bd == null || !bd.inDatabase) {\n                 throw new IllegalArgumentException();\n+            }\n             bd.bugFiled = System.currentTimeMillis();\n             bd.bugLink = PENDING;\n             bd.filedBy = findbugsUser;\n@@ -1219,17 +1277,20 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n         public void execute(DatabaseSyncTask t) throws SQLException {\n             BugData data = getBugData(bug.getInstanceHash());\n-            if (data.lastSeen < analysisTime && FindBugs.validTimestamp(analysisTime))\n+            if (data.lastSeen < analysisTime && FindBugs.validTimestamp(analysisTime)) {\n                 data.lastSeen = analysisTime;\n+            }\n \n             long timestamp = getLocalFirstSeen(bug);\n \n-            if (timestamp < FIRST_LIGHT)\n+            if (timestamp < FIRST_LIGHT) {\n                 timestamp = analysisTime;\n+            }\n             timestamp = sanityCheckFirstSeen(sanityCheckLastSeen(timestamp));\n             data.firstSeen = timestamp;\n-            if (data.inDatabase)\n+            if (data.inDatabase) {\n                 return;\n+            }\n \n             t.newBug(bug);\n             data.inDatabase = true;\n@@ -1259,7 +1320,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             PrintWriter printWriter = new PrintWriter(stackTraceWriter);\n             e.printStackTrace(printWriter);\n             bugCollection.getProject().getGuiCallback()\n-                    .showMessageDialog(String.format(\"%s - %s%n%s\", msg, e.getMessage(), stackTraceWriter.toString()));\n+                .showMessageDialog(String.format(\"%s - %s%n%s\", msg, e.getMessage(), stackTraceWriter.toString()));\n         } else {\n             System.err.println(msg);\n             e.printStackTrace(System.err);\n@@ -1279,8 +1340,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     }\n \n     public void signIn() {\n-        if (getSigninState() != SigninState.SIGNED_IN)\n+        if (getSigninState() != SigninState.SIGNED_IN) {\n             throw new UnsupportedOperationException(\"Unable to sign in\");\n+        }\n     }\n \n     public void signOut() {\n@@ -1298,11 +1360,14 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n     @Override\n     public void addDateSeen(BugInstance b, long when) {\n-        if (when <= 0) return;\n+        if (when <= 0) {\n+            return;\n+        }\n         when = sanityCheckFirstSeen(when);\n         BugData bd = getBugData(b);\n-        if (bd.firstSeen < when)\n+        if (bd.firstSeen < when) {\n             return;\n+        }\n         bd.firstSeen = when;\n         storeFirstSeen(bd);\n     }\n@@ -1319,15 +1384,17 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     @Override\n     public double getClassificationScore(BugInstance b) {\n         BugData bd = getBugData(b);\n-        if (bd == null)\n+        if (bd == null) {\n             return 0;\n+        }\n         Collection<BugDesignation> uniqueDesignations = bd.getUniqueDesignations();\n         double total = 0;\n         int count = 0;\n         for (BugDesignation d : uniqueDesignations) {\n             UserDesignation designation = UserDesignation.valueOf(d.getDesignationKey());\n-            if (designation.nonVoting())\n+            if (designation.nonVoting()) {\n                 continue;\n+            }\n             total += designation.score();\n             count++;\n         }\n@@ -1337,30 +1404,35 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     @Override\n     public double getPortionObsoleteClassifications(BugInstance b) {\n         BugData bd = getBugData(b);\n-        if (bd == null)\n+        if (bd == null) {\n             return 0;\n+        }\n \n         int count = 0;\n         Collection<BugDesignation> uniqueDesignations = bd.getUniqueDesignations();\n-        for (BugDesignation d : uniqueDesignations)\n-            if (UserDesignation.valueOf(d.getDesignationKey()) == UserDesignation.OBSOLETE_CODE)\n+        for (BugDesignation d : uniqueDesignations) {\n+            if (UserDesignation.valueOf(d.getDesignationKey()) == UserDesignation.OBSOLETE_CODE) {\n                 count++;\n+            }\n+        }\n         return ((double) count) / uniqueDesignations.size();\n     }\n \n     @Override\n     public double getClassificationVariance(BugInstance b) {\n         BugData bd = getBugData(b);\n-        if (bd == null)\n+        if (bd == null) {\n             return 0;\n+        }\n         Collection<BugDesignation> uniqueDesignations = bd.getUniqueDesignations();\n         double total = 0;\n         double totalSquares = 0;\n         int count = 0;\n         for (BugDesignation d : uniqueDesignations) {\n             UserDesignation designation = UserDesignation.valueOf(d.getDesignationKey());\n-            if (designation.nonVoting())\n+            if (designation.nonVoting()) {\n                 continue;\n+            }\n             int score = designation.score();\n             total += score;\n             totalSquares += score * score;\n@@ -1374,35 +1446,40 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     @Override\n     public double getClassificationDisagreement(BugInstance b) {\n         BugData bd = getBugData(b);\n-        if (bd == null)\n+        if (bd == null) {\n             return 0;\n+        }\n         Collection<BugDesignation> uniqueDesignations = bd.getUniqueDesignations();\n         int shouldFix = 0;\n         int dontFix = 0;\n         for (BugDesignation d : uniqueDesignations) {\n             UserDesignation designation = UserDesignation.valueOf(d.getDesignationKey());\n-            if (designation.nonVoting())\n+            if (designation.nonVoting()) {\n                 continue;\n+            }\n             int score = designation.score();\n-            if (score > 0)\n+            if (score > 0) {\n                 shouldFix++;\n-            else\n+            } else {\n                 dontFix++;\n+            }\n         }\n         return Math.min(shouldFix, dontFix) / (double) (shouldFix + dontFix);\n     }\n \n     public Set<String> getReviewers(BugInstance b) {\n         BugData bd = getBugData(b);\n-        if (bd == null)\n+        if (bd == null) {\n             return Collections.emptySet();\n+        }\n         return bd.getReviewers();\n     }\n \n     public boolean isClaimed(BugInstance b) {\n         BugData bd = getBugData(b);\n-        if (bd == null)\n+        if (bd == null) {\n             return false;\n+        }\n         return bd.isClaimed();\n     }\n \n@@ -1444,14 +1521,15 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n         String bugNumber = bd.bugLink;\n         BugFilingStatus status = getBugLinkStatus(b);\n-        if (status == BugFilingStatus.VIEW_BUG)\n+        if (status == BugFilingStatus.VIEW_BUG) {\n             return getBugViewLink(bugNumber);\n+        }\n \n         Connection c = null;\n         try {\n             c = getConnection();\n             PreparedStatement ps = c\n-                    .prepareStatement(\"SELECT bugReportId, whoFiled, whenFiled, status, assignedTo, componentName FROM findbugs_bugreport WHERE hash=?\");\n+                .prepareStatement(\"SELECT bugReportId, whoFiled, whenFiled, status, assignedTo, componentName FROM findbugs_bugreport WHERE hash=?\");\n             ps.setString(1, b.getInstanceHash());\n             ResultSet rs = ps.executeQuery();\n \n@@ -1466,12 +1544,14 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 String assignedTo = rs.getString(col++);\n                 String componentName = rs.getString(col++);\n                 if (bugReportId.equals(PENDING)) {\n-                    if (!findbugsUser.equals(whoFiled) && !pendingStatusHasExpired(whenFiled.getTime()))\n+                    if (!findbugsUser.equals(whoFiled) && !pendingStatusHasExpired(whenFiled.getTime())) {\n                         pendingFiledAt = whenFiled;\n+                    }\n                     continue;\n                 }\n-                if (bugReportId.equals(NONE))\n+                if (bugReportId.equals(NONE)) {\n                     continue;\n+                }\n \n                 rs.close();\n                 ps.close();\n@@ -1482,14 +1562,15 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 bd.bugStatus = statusString;\n                 bd.bugComponentName = componentName;\n                 int answer = getBugCollection()\n-                        .getProject()\n-                        .getGuiCallback()\n-                        .showConfirmDialog(\n-                                \"Sorry, but since the time we last received updates from the database,\\n\"\n-                                        + \"someone else already filed a bug report. Would you like to view the bug report?\",\n-                                \"Someone else already filed a bug report\", \"Yes\", \"No\");\n-                if (answer == 0)\n+                    .getProject()\n+                    .getGuiCallback()\n+                    .showConfirmDialog(\n+                        \"Sorry, but since the time we last received updates from the database,\\n\"\n+                            + \"someone else already filed a bug report. Would you like to view the bug report?\",\n+                        \"Someone else already filed a bug report\", \"Yes\", \"No\");\n+                if (answer == 0) {\n                     return null;\n+                }\n                 return getBugViewLink(bugReportId);\n             }\n             rs.close();\n@@ -1499,11 +1580,11 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 bd.bugLink = PENDING;\n                 bd.bugFiled = pendingFiledAt.getTime();\n                 getBugCollection()\n-                        .getProject()\n-                        .getGuiCallback()\n-                        .showMessageDialog(\n-                                \"Sorry, but since the time we last received updates from the database,\\n\"\n-                                        + \"someone else already has started a bug report for this issue. \");\n+                    .getProject()\n+                    .getGuiCallback()\n+                    .showMessageDialog(\n+                        \"Sorry, but since the time we last received updates from the database,\\n\"\n+                            + \"someone else already has started a bug report for this issue. \");\n                 return null;\n \n             }\n@@ -1515,30 +1596,31 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 if (u != null && firstTimeDoing(HAS_FILED_BUGS)) {\n                     String bugFilingNote = String.format(properties.getProperty(\"findbugs.filebug.note\", \"\"));\n                     int response = bugCollection\n-                            .getProject()\n-                            .getGuiCallback()\n-                            .showConfirmDialog(\n-                                    \"This looks like the first time you've filed a bug from this machine. Please:\\n\"\n-                                            + \" * Please check the component the issue is assigned to; we sometimes get it wrong.\\n\"\n-                                            + \" * Try to figure out the right person to assign it to.\\n\"\n-                                            + \" * Provide the information needed to understand the issue.\\n\"\n-                                            + bugFilingNote\n-                                            + \"Note that classifying an issue is distinct from (and lighter weight than) filing a bug.\",\n-                                    \"Do you want to file a bug report\", \"Yes\", \"No\");\n-                    if (response != 0)\n+                        .getProject()\n+                        .getGuiCallback()\n+                        .showConfirmDialog(\n+                            \"This looks like the first time you've filed a bug from this machine. Please:\\n\"\n+                                + \" * Please check the component the issue is assigned to; we sometimes get it wrong.\\n\"\n+                                + \" * Try to figure out the right person to assign it to.\\n\"\n+                                + \" * Provide the information needed to understand the issue.\\n\"\n+                                + bugFilingNote\n+                                + \"Note that classifying an issue is distinct from (and lighter weight than) filing a bug.\",\n+                            \"Do you want to file a bug report\", \"Yes\", \"No\");\n+                    if (response != 0) {\n                         return null;\n+                    }\n                 }\n-                if (u != null)\n+                if (u != null) {\n                     insertPendingRecord(c, bd, System.currentTimeMillis(), findbugsUser);\n+                }\n                 return u;\n-            }\n-\n-            else {\n+            } else {\n                 assert status == BugFilingStatus.FILE_AGAIN;\n                 alreadyDone(HAS_FILED_BUGS);\n                 URL u = getBugFilingLink(b);\n-                if (u != null)\n+                if (u != null) {\n                     insertPendingRecord(c, bd, System.currentTimeMillis(), findbugsUser);\n+                }\n                 return u;\n             }\n         } catch (MalformedURLException e) {\n@@ -1560,8 +1642,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     private @CheckForNull\n     URL getBugViewLink(String bugNumber) {\n         String viewLinkPattern = properties.getProperty(\"findbugs.viewbug.link\");\n-        if (viewLinkPattern == null)\n+        if (viewLinkPattern == null) {\n             return null;\n+        }\n         firstBugRequest = false;\n         String u = String.format(viewLinkPattern, bugNumber);\n         try {\n@@ -1573,35 +1656,40 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n     private void displaySupplementalBugReport(String supplemental) {\n         supplemental = \"[Can't squeeze this information into the URL used to prepopulate the bug entry\\n\"\n-                + \" please cut and paste into the bug report as appropriate]\\n\\n\" + supplemental;\n+            + \" please cut and paste into the bug report as appropriate]\\n\\n\" + supplemental;\n         bugCollection.getProject().getGuiCallback()\n-                .displayNonmodelMessage(\"Cut and paste as needed into bug entry\", supplemental);\n+            .displayNonmodelMessage(\"Cut and paste as needed into bug entry\", supplemental);\n     }\n \n     private URL getBugFilingLink(BugInstance b) throws MalformedURLException {\n-        if (BUG_LINK_FORMAT == null)\n+        if (BUG_LINK_FORMAT == null) {\n             return null;\n+        }\n \n         int maxURLLength = MAX_URL_LENGTH;\n         if (firstBugRequest) {\n             if (BUG_LOGIN_LINK != null && BUG_LOGIN_MSG != null) {\n                 URL u = new URL(String.format(BUG_LOGIN_LINK));\n-                if (!bugCollection.getProject().getGuiCallback().showDocument(u))\n+                if (!bugCollection.getProject().getGuiCallback().showDocument(u)) {\n                     return null;\n+                }\n                 int r = bugCollection.getProject().getGuiCallback()\n-                        .showConfirmDialog(BUG_LOGIN_MSG, \"Logging into bug tracker...\", \"OK\", \"Cancel\");\n-                if (r != 0)\n+                    .showConfirmDialog(BUG_LOGIN_MSG, \"Logging into bug tracker...\", \"OK\", \"Cancel\");\n+                if (r != 0) {\n                     return null;\n-            } else\n+                }\n+            } else {\n                 maxURLLength = maxURLLength * 2 / 3;\n+            }\n         }\n         firstBugRequest = false;\n \n         String component;\n-        if (getUserDesignation(b) == UserDesignation.BAD_ANALYSIS && COMPONENT_FOR_BAD_ANALYSIS != null)\n+        if (getUserDesignation(b) == UserDesignation.BAD_ANALYSIS && COMPONENT_FOR_BAD_ANALYSIS != null) {\n             component = COMPONENT_FOR_BAD_ANALYSIS;\n-        else\n+        } else {\n             component = getBugComponent(b.getPrimaryClass().getClassName().replace('.', '/'));\n+        }\n         String summary = bugFilingCommentHelper.getBugReportSummary(b);\n         String report = bugFilingCommentHelper.getBugReportText(b);\n         String u = String.format(BUG_LINK_FORMAT, component, urlEncode(summary), urlEncode(report));\n@@ -1629,19 +1717,19 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                     String urlEncodedReport = urlEncode(report);\n                     String urlEncodedComponent = urlEncode(component);\n                     int maxSummaryLength = maxURLLength - BUG_LINK_FORMAT.length() + 6 /*\n-                                                                                        * 3\n-                                                                                        * %\n-                                                                                        * s\n-                                                                                        * placeholders\n-                                                                                        */\n-                            - urlEncodedReport.length() - urlEncodedComponent.length();\n+                     * 3\n+                     * %\n+                     * s\n+                     * placeholders\n+                     */\n+                        - urlEncodedReport.length() - urlEncodedComponent.length();\n                     if (urlEncodedSummary.length() > maxSummaryLength) {\n                         urlEncodedSummary = urlEncodedSummary.substring(0, maxSummaryLength - 1);\n                         // Chop of any incomplete trailing percent encoded part\n                         if (\"%\".equals(urlEncodedSummary.substring(urlEncodedSummary.length() - 1))) {\n                             urlEncodedSummary = urlEncodedSummary.substring(0, urlEncodedSummary.length() - 2);\n                         } else if (\"%\".equals(urlEncodedSummary.substring(urlEncodedSummary.length() - 2,\n-                                urlEncodedSummary.length() - 1))) {\n+                            urlEncodedSummary.length() - 1))) {\n                             urlEncodedSummary = urlEncodedSummary.substring(0, urlEncodedSummary.length() - 3);\n                         }\n                     }\n@@ -1674,17 +1762,19 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     public BugFilingStatus getBugLinkStatus(BugInstance b) {\n         BugData bd = getBugData(b);\n         String link = bd.bugLink;\n-        if (link == null || link.length() == 0 || link.equals(NONE))\n+        if (link == null || link.length() == 0 || link.equals(NONE)) {\n             return BugFilingStatus.FILE_BUG;\n+        }\n         if (link.equals(PENDING)) {\n-            if (findbugsUser.equals(bd.filedBy))\n+            if (findbugsUser.equals(bd.filedBy)) {\n                 return BugFilingStatus.FILE_AGAIN;\n-            else {\n+            } else {\n                 long whenFiled = bd.bugFiled;\n-                if (pendingStatusHasExpired(whenFiled))\n+                if (pendingStatusHasExpired(whenFiled)) {\n                     return BugFilingStatus.FILE_BUG;\n-                else\n+                } else {\n                     return BugFilingStatus.BUG_PENDING;\n+                }\n             }\n         }\n         try {\n@@ -1701,8 +1791,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     @Override\n     public String getBugStatus(BugInstance b) {\n         String status = getBugData(b).bugStatus;\n-        if (status != null)\n+        if (status != null) {\n             return status;\n+        }\n         return \"Unknown\";\n     }\n \n@@ -1740,8 +1831,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         if (errorMsg != null) {\n             if (errorTime + 2 * 60 * 1000 > System.currentTimeMillis()) {\n                 errorMsg = null;\n-            } else\n+            } else {\n                 return errorMsg + \"; \" + getStatusMsg0();\n+            }\n         }\n         return getStatusMsg0();\n     }\n@@ -1750,27 +1842,30 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     public String getStatusMsg0() {\n         SimpleDateFormat format = new SimpleDateFormat(\"h:mm a\");\n         int numToSync = queue.size();\n-        if (numToSync > 0)\n+        if (numToSync > 0) {\n             return String.format(\"%d remain to be synchronized\", numToSync);\n-        else if (resync != null && resync.after(lastUpdate))\n+        } else if (resync != null && resync.after(lastUpdate)) {\n             return String.format(\"%d updates received from db at %s\", resyncCount, format.format(resync));\n-        else if (updatesSentToDatabase == 0) {\n+        } else if (updatesSentToDatabase == 0) {\n             int skipped = bugCollection.getCollection().size() - idMap.size();\n-            if (skipped == 0)\n-            \t\treturn String.format(\"%d issues synchronized with database\", idMap.size());\n-            else\n-                    return String.format(\"%d issues synchronized with database, %d low rank issues not synchronized\", \n-                            idMap.size(), skipped);\n-        } else\n+            if (skipped == 0) {\n+                return String.format(\"%d issues synchronized with database\", idMap.size());\n+            } else {\n+                return String.format(\"%d issues synchronized with database, %d low rank issues not synchronized\",\n+                    idMap.size(), skipped);\n+            }\n+        } else {\n             return String.format(\"%d classifications/bug filings sent to db, last updated at %s\", updatesSentToDatabase,\n-                    format.format(lastUpdate));\n+                format.format(lastUpdate));\n+        }\n \n     }\n \n     @Override\n     public boolean getIWillFix(BugInstance b) {\n-        if (super.getIWillFix(b))\n+        if (super.getIWillFix(b)) {\n             return true;\n+        }\n         BugData bd = getBugData(b);\n         return bd != null && findbugsUser.equals(bd.bugAssignedTo);\n     }\n@@ -1779,17 +1874,17 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     public boolean getBugIsUnassigned(BugInstance b) {\n         BugData bd = getBugData(b);\n         return bd != null && bd.inDatabase && getBugLinkStatus(b) == BugFilingStatus.VIEW_BUG\n-                && (\"NEW\".equals(bd.bugStatus) || bd.bugAssignedTo == null || bd.bugAssignedTo.length() == 0);\n+            && (\"NEW\".equals(bd.bugStatus) || bd.bugAssignedTo == null || bd.bugAssignedTo.length() == 0);\n     }\n \n     @Override\n     public boolean getWillNotBeFixed(BugInstance b) {\n         BugData bd = getBugData(b);\n         return bd != null\n-                && bd.inDatabase\n-                && getBugLinkStatus(b) == BugFilingStatus.VIEW_BUG\n-                && (\"WILL_NOT_FIX\".equals(bd.bugStatus) || \"OBSOLETE\".equals(bd.bugStatus)\n-                        || \"WORKS_AS_INTENDED\".equals(bd.bugStatus) || \"NOT_FEASIBLE\".equals(bd.bugStatus));\n+            && bd.inDatabase\n+            && getBugLinkStatus(b) == BugFilingStatus.VIEW_BUG\n+            && (\"WILL_NOT_FIX\".equals(bd.bugStatus) || \"OBSOLETE\".equals(bd.bugStatus)\n+            || \"WORKS_AS_INTENDED\".equals(bd.bugStatus) || \"NOT_FEASIBLE\".equals(bd.bugStatus));\n \n     }\n \n@@ -1807,11 +1902,13 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     public @CheckForNull\n     String claimedBy(BugInstance b) {\n         BugData bd = getBugData(b);\n-        if (bd == null)\n+        if (bd == null) {\n             return null;\n+        }\n         for (BugDesignation designation : bd.getUniqueDesignations()) {\n-            if (\"I_WILL_FIX\".equals(designation.getDesignationKey()))\n+            if (\"I_WILL_FIX\".equals(designation.getDesignationKey())) {\n                 return designation.getUser();\n+            }\n         }\n         return null;\n \n@@ -1820,8 +1917,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     @Override\n     protected Iterable<BugDesignation> getLatestDesignationFromEachUser(BugInstance bd) {\n         BugData bugData = instanceMap.get(bd.getInstanceHash());\n-        if (bugData == null)\n+        if (bugData == null) {\n             return Collections.emptyList();\n+        }\n         return bugData.getUniqueDesignations();\n     }\n \n",
            "diff_size": 304
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/52/DBCloud.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/52/DBCloud.java\nindex 0cd62ec801a..826cd22d9ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/52/DBCloud.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/52/DBCloud.java\n@@ -337,7 +337,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n      */\n     @Override\n     public boolean communicationInitiated() {\n-            return bugsPopulated.getCount() == 0 && communicationInitiated.get();\n+    return bugsPopulated.getCount() == 0 && communicationInitiated.get();\n     }\n \n     private static final long LAST_SEEN_UPDATE_WINDOW = TimeUnit.MILLISECONDS.convert(7 * 24 * 3600, TimeUnit.SECONDS);\n@@ -351,10 +351,10 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     }\n \n     static boolean invocationRecorded;\n-    \n-    static final boolean LOG_BUG_UPLOADS = SystemProperties.getBoolean(\"cloud.buguploads.log\");\n \n-    class PopulateBugs implements Update {\n+static final boolean LOG_BUG_UPLOADS = SystemProperties.getBoolean(\"cloud.buguploads.log\");\n+\n+class PopulateBugs implements Update {\n         /**\n          * True if this is the initial load from the database, false if we are\n          * getting updates for an already loaded database.\n@@ -553,18 +553,18 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                         BugData bd = getBugData(b.getInstanceHash());\n                         if (!bd.inDatabase) {\n                             storeNewBug(b, stillPresentAt);\n-                            if (LOG_BUG_UPLOADS) \n-                                System.out.printf(\"NEW %tD: %s%n\", new Date(getLocalFirstSeen(b)), b.getMessage());\n-                        } else {\n+                            if (LOG_BUG_UPLOADS)\n+    System.out.printf(\"NEW %tD: %s%n\", new Date(getLocalFirstSeen(b)), b.getMessage());\n+    } else {\n                             long firstSeenLocally = getLocalFirstSeen(b);\n \n                             if (FindBugs.validTimestamp(firstSeenLocally)\n                                     && (firstSeenLocally < bd.firstSeen || !FindBugs.validTimestamp(bd.firstSeen))) {\n-                                if (LOG_BUG_UPLOADS) \n-                                    System.out.printf(\"BACKDATED %tD -> %tD: %s%n\", new Date(bd.firstSeen), new Date(firstSeenLocally), b.getMessage());\n-               \n-                                bd.firstSeen = firstSeenLocally;\n-                                storeFirstSeen(bd);\n+                                if (LOG_BUG_UPLOADS)\n+    System.out.printf(\"BACKDATED %tD -> %tD: %s%n\", new Date(bd.firstSeen), new Date(firstSeenLocally), b.getMessage());\n+bd.firstSeen = firstSeenLocally;\n+\n+storeFirstSeen(bd);\n                             } else if (FindBugs.validTimestamp(stillPresentAt)\n                                     && stillPresentAt > bd.lastSeen + LAST_SEEN_UPDATE_WINDOW) {\n                                 storeLastSeen(bd, stillPresentAt);\n@@ -650,11 +650,10 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         }\n \n         signinState = SigninState.SIGNED_IN;\n-        if (CloudFactory.DEBUG) \n-            System.out.println(\"DBCloud initialization preflight checks completed\");\n-       \n-        loadBugComponents();\n-        Connection c = null;\n+        if (CloudFactory.DEBUG)\n+    System.out.println(\"DBCloud initialization preflight checks completed\");\n+loadBugComponents();\n+Connection c = null;\n         try {\n             Class<?> driverClass;\n             try {\n@@ -895,8 +894,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         boolean result = bug.getBugPattern().getCategory().equals(\"NOISE\") || bug.isDead()\n                 || BugRanker.findRank(bug) > MAX_DB_RANK;\n         if (result && firstTimeDoing(HAS_SKIPPED_BUG)) {\n-            bugCollection\n-                    .getProject()\n+            bugCollection.getProject()\n                     .getGuiCallback()\n                     .showMessageDialog(\n                             \"To limit database load, some issues are not persisted to database.\\n\"\n@@ -979,7 +977,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                         .prepareStatement(\n                                 \"INSERT INTO findbugs_evaluation (issueId, who, invocationId, designation, comment, time) VALUES (?,?,?,?,?,?)\",\n                                 Statement.RETURN_GENERATED_KEYS);\n-                Timestamp date = new Timestamp(bd.getTimestamp());\n+Timestamp date = new Timestamp(bd.getTimestamp());\n                 int col = 1;\n                 insertEvaluation.setInt(col++, data.id);\n                 insertEvaluation.setString(col++, bd.getUser());\n@@ -1134,8 +1132,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             PreparedStatement insert = c\n                     .prepareStatement(\"INSERT INTO findbugs_bugreport (hash, bugReportId, whoFiled, whenFiled)\"\n                             + \" VALUES (?, ?, ?, ?)\");\n-\n-            Timestamp date = new Timestamp(when);\n+Timestamp date = new Timestamp(when);\n             int col = 1;\n             insert.setString(col++, bug.instanceHash);\n             insert.setString(col++, PENDING);\n@@ -1757,11 +1754,10 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         else if (updatesSentToDatabase == 0) {\n             int skipped = bugCollection.getCollection().size() - idMap.size();\n             if (skipped == 0)\n-            \t\treturn String.format(\"%d issues synchronized with database\", idMap.size());\n-            else\n-                    return String.format(\"%d issues synchronized with database, %d low rank issues not synchronized\", \n-                            idMap.size(), skipped);\n-        } else\n+    return String.format(\"%d issues synchronized with database\", idMap.size());\n+    else\n+    return String.format(\"%d issues synchronized with database, %d low rank issues not synchronized\", idMap.size(), skipped);\n+    } else\n             return String.format(\"%d classifications/bug filings sent to db, last updated at %s\", updatesSentToDatabase,\n                     format.format(lastUpdate));\n \n@@ -1862,4 +1858,4 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         }\n \n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/52/DBCloud.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/52/DBCloud.java\nindex 0cd62ec801a..a86958be57d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/52/DBCloud.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/52/DBCloud.java\n@@ -57,9 +57,7 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.prefs.Preferences;\n import java.util.regex.Pattern;\n-\n import javax.annotation.CheckForNull;\n-\n import edu.umd.cs.findbugs.BugCollection;\n import edu.umd.cs.findbugs.BugDesignation;\n import edu.umd.cs.findbugs.BugInstance;\n@@ -83,8 +81,8 @@ import edu.umd.cs.findbugs.util.Util;\n /**\n  * @author pwilliam\n  */\n-public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n+public class DBCloud extends AbstractCloud implements OnlineCloud {\n     public static final String FINDBUGS_USER_PROPERTY = \"findbugsUser\";\n \n     static final long FIRST_LIGHT = FindBugs.MINIMUM_TIMESTAMP;\n@@ -96,8 +94,10 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     private SigninState signinState = SigninState.SIGNING_IN;\n \n     class BugData {\n+\n         final String instanceHash;\n \n+\n         public BugData(String instanceHash) {\n             this.instanceHash = instanceHash;\n         }\n@@ -131,7 +131,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             for (BugDesignation bd : designations)\n                 if (findbugsUser.equals(bd.getUser()))\n                     return bd;\n-\n             return null;\n         }\n \n@@ -224,7 +223,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             instanceMap.put(instanceHash, bd);\n         }\n         return bd;\n-\n     }\n \n     BugData getBugData(BugInstance bug) {\n@@ -236,7 +234,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         BugData bugData = getBugData(bug.getInstanceHash());\n         bugData.bugs.add(bug);\n         return bugData;\n-\n     }\n \n     @SuppressWarnings(\"boxing\")\n@@ -254,7 +251,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             bd.id = id;\n             bd.firstSeen = firstSeen;\n             bd.lastSeen = lastSeen;\n-\n             bd.inDatabase = true;\n             idMap.put(id, bd);\n         }\n@@ -262,10 +258,12 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             throw new IllegalStateException(\"Bug has first seen of \" + new Date(bd.firstSeen));\n     }\n \n+\n     private BugFilingCommentHelper bugFilingCommentHelper = new BugFilingCommentHelper(this);\n \n     final long now;\n \n+\n     public DBCloud(CloudPlugin plugin, BugCollection bugs, Properties properties) {\n         super(plugin, bugs, properties);\n         sqlDriver = getJDBCProperty(\"dbDriver\");\n@@ -308,8 +306,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         return true;\n     }\n \n-    final Pattern FORBIDDEN_PACKAGE_PREFIXES = Pattern.compile(properties.getProperty(\"findbugs.forbiddenPackagePrefixes\",\n-            \" none \").replace(',', '|'));\n+    final Pattern FORBIDDEN_PACKAGE_PREFIXES = Pattern.compile(properties.getProperty(\"findbugs.forbiddenPackagePrefixes\", \" none \").replace(',', '|'));\n \n     final boolean PROMPT_FOR_USER_NAME = properties.getBoolean(\"findbugs.cloud.promptForUserName\", false);\n \n@@ -335,11 +332,13 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n      * Returns true if communication has already been initiated (and perhaps completed).\n      * \n      */\n+\n     @Override\n     public boolean communicationInitiated() {\n-            return bugsPopulated.getCount() == 0 && communicationInitiated.get();\n+        return bugsPopulated.getCount() == 0 && communicationInitiated.get();\n     }\n \n+\n     private static final long LAST_SEEN_UPDATE_WINDOW = TimeUnit.MILLISECONDS.convert(7 * 24 * 3600, TimeUnit.SECONDS);\n \n     long boundDuration(long milliseconds) {\n@@ -351,7 +350,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     }\n \n     static boolean invocationRecorded;\n-    \n+\n     static final boolean LOG_BUG_UPLOADS = SystemProperties.getBoolean(\"cloud.buguploads.log\");\n \n     class PopulateBugs implements Update {\n@@ -359,6 +358,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n          * True if this is the initial load from the database, false if we are\n          * getting updates for an already loaded database.\n          */\n+\n         final boolean performFullLoad;\n \n         PopulateBugs(boolean performFullLoad) {\n@@ -367,7 +367,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n         @SuppressWarnings(\"boxing\")\n         public void execute(DatabaseSyncTask t) throws SQLException {\n-\n             if (startShutdown)\n                 return;\n             String commonPrefix = null;\n@@ -385,7 +384,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             }\n             try {\n                 long startTime = System.currentTimeMillis();\n-\n                 Connection c = getConnection();\n                 PreparedStatement ps;\n                 ResultSet rs;\n@@ -399,7 +397,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                         String hash = rs.getString(col++);\n                         Timestamp firstSeen = rs.getTimestamp(col++);\n                         Timestamp lastSeen = rs.getTimestamp(col++);\n-\n                         loadDatabaseInfo(hash, id, firstSeen.getTime(), lastSeen.getTime());\n                     }\n                     rs.close();\n@@ -407,9 +404,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 }\n                 if (startShutdown)\n                     return;\n-\n                 ps = c.prepareStatement(\"SELECT id, issueId, who, designation, comment, time FROM findbugs_evaluation\");\n-\n                 rs = ps.executeQuery();\n \n                 while (rs.next()) {\n@@ -421,7 +416,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                     String comment = rs.getString(col++);\n                     Timestamp when = rs.getTimestamp(col++);\n                     BugData data = idMap.get(issueId);\n-\n                     if (data != null) {\n                         BugDesignation bd = new BugDesignation(designation, when.getTime(), comment, who);\n                         if (data.designations.add(bd)) {\n@@ -431,17 +425,13 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                                 updatedIssue(bug);\n                             }\n                         }\n-\n                     }\n-\n                 }\n                 rs.close();\n                 ps.close();\n                 if (startShutdown)\n                     return;\n-\n                 ps = c.prepareStatement(\"SELECT hash, bugReportId, whoFiled, whenFiled, status, assignedTo, componentName FROM findbugs_bugreport\");\n-\n                 rs = ps.executeQuery();\n \n                 while (rs.next()) {\n@@ -453,16 +443,13 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                     String status = rs.getString(col++);\n                     String assignedTo = rs.getString(col++);\n                     String componentName = rs.getString(col++);\n-\n                     BugData data = instanceMap.get(hash);\n-\n                     if (data != null) {\n                         if (Util.nullSafeEquals(data.bugLink, bugReportId) && Util.nullSafeEquals(data.filedBy, whoFiled)\n-                                && data.bugFiled == whenFiled.getTime() && Util.nullSafeEquals(data.bugAssignedTo, assignedTo)\n-                                && Util.nullSafeEquals(data.bugStatus, status)\n-                                && Util.nullSafeEquals(data.bugComponentName, componentName))\n+                           && data.bugFiled == whenFiled.getTime()\n+                           && Util.nullSafeEquals(data.bugAssignedTo, assignedTo)\n+                           && Util.nullSafeEquals(data.bugStatus, status) && Util.nullSafeEquals(data.bugComponentName, componentName))\n                             continue;\n-\n                         data.bugLink = bugReportId;\n                         data.filedBy = whoFiled;\n                         data.bugFiled = whenFiled.getTime();\n@@ -474,35 +461,26 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                             updatedIssue(bug);\n                         }\n                     }\n-\n                 }\n                 rs.close();\n                 ps.close();\n                 if (startShutdown)\n                     return;\n-\n                 if (!invocationRecorded) {\n                     long jvmStartTime = StartTime.START_TIME - StartTime.VM_START_TIME;\n                     SortedBugCollection sbc = (SortedBugCollection) bugCollection;\n                     long findbugsStartTime = sbc.getTimeStartedLoading() - StartTime.START_TIME;\n-\n                     URL findbugsURL = DetectorFactoryCollection.getCoreResource(\"findbugs.xml\");\n                     String loadURL = findbugsURL == null ? \"\" : findbugsURL.toString();\n-\n                     long initialLoadTime = sbc.getTimeFinishedLoading() - sbc.getTimeStartedLoading();\n                     // long lostTime = startTime - sbc.getTimeStartedLoading();\n-\n                     long initialSyncTime = System.currentTimeMillis() - sbc.getTimeFinishedLoading();\n-\n                     String os = SystemProperties.getProperty(\"os.name\", \"\");\n                     String osVersion = SystemProperties.getProperty(\"os.version\");\n                     String jvmVersion = SystemProperties.getProperty(\"java.runtime.version\");\n                     if (osVersion != null)\n                         os = os + \" \" + osVersion;\n-                    PreparedStatement insertSession = c\n-                            .prepareStatement(\n-                                    \"INSERT INTO findbugs_invocation (who, ipAddress, entryPoint, dataSource, fbVersion, os, jvmVersion, jvmLoadTime, findbugsLoadTime, analysisLoadTime, initialSyncTime, numIssues, startTime, commonPrefix)\"\n-                                            + \" VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", Statement.RETURN_GENERATED_KEYS);\n+                    PreparedStatement insertSession = c.prepareStatement(\"INSERT INTO findbugs_invocation (who, ipAddress, entryPoint, dataSource, fbVersion, os, jvmVersion, jvmLoadTime, findbugsLoadTime, analysisLoadTime, initialSyncTime, numIssues, startTime, commonPrefix)\" + \" VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", Statement.RETURN_GENERATED_KEYS);\n                     @SuppressWarnings(\"hiding\")\n                     Timestamp now = new Timestamp(startTime);\n                     int col = 1;\n@@ -525,21 +503,18 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                     rs = insertSession.getGeneratedKeys();\n                     if (rs.next()) {\n                         sessionId = rs.getInt(1);\n-\n                     }\n                     insertSession.close();\n                     rs.close();\n                     invocationRecorded = true;\n                 }\n                 c.close();\n-\n             } catch (Exception e) {\n                 e.printStackTrace();\n                 displayMessage(\"problem bulk loading database\", e);\n             }\n             if (startShutdown)\n                 return;\n-\n             if (!performFullLoad) {\n                 attemptedResync = new Date();\n                 if (updates > 0) {\n@@ -553,23 +528,18 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                         BugData bd = getBugData(b.getInstanceHash());\n                         if (!bd.inDatabase) {\n                             storeNewBug(b, stillPresentAt);\n-                            if (LOG_BUG_UPLOADS) \n+                            if (LOG_BUG_UPLOADS)\n                                 System.out.printf(\"NEW %tD: %s%n\", new Date(getLocalFirstSeen(b)), b.getMessage());\n                         } else {\n                             long firstSeenLocally = getLocalFirstSeen(b);\n-\n-                            if (FindBugs.validTimestamp(firstSeenLocally)\n-                                    && (firstSeenLocally < bd.firstSeen || !FindBugs.validTimestamp(bd.firstSeen))) {\n-                                if (LOG_BUG_UPLOADS) \n+                            if (FindBugs.validTimestamp(firstSeenLocally) && (firstSeenLocally < bd.firstSeen || !FindBugs.validTimestamp(bd.firstSeen))) {\n+                                if (LOG_BUG_UPLOADS)\n                                     System.out.printf(\"BACKDATED %tD -> %tD: %s%n\", new Date(bd.firstSeen), new Date(firstSeenLocally), b.getMessage());\n-               \n                                 bd.firstSeen = firstSeenLocally;\n                                 storeFirstSeen(bd);\n-                            } else if (FindBugs.validTimestamp(stillPresentAt)\n-                                    && stillPresentAt > bd.lastSeen + LAST_SEEN_UPDATE_WINDOW) {\n+                            } else if (FindBugs.validTimestamp(stillPresentAt) && stillPresentAt > bd.lastSeen + LAST_SEEN_UPDATE_WINDOW) {\n                                 storeLastSeen(bd, stillPresentAt);\n                             }\n-\n                             BugDesignation designation = bd.getPrimaryDesignation();\n                             if (designation != null)\n                                 b.setUserDesignation(new BugDesignation(designation));\n@@ -577,16 +547,12 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                     }\n                 initialSyncDone.countDown();\n                 assert !scheduled;\n-\n                 if (startShutdown)\n                     return;\n-\n                 long delay = 10 * 60 * 1000; // 10 minutes\n                 if (!scheduled) {\n                     try {\n-\n                         resyncTimer.schedule(new TimerTask() {\n-\n                             @Override\n                             public void run() {\n                                 if (attemptedResync == null || lastUpdate.after(attemptedResync) || numSkipped++ > 6) {\n@@ -615,6 +581,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         return s.substring(0, maxLength);\n     }\n \n+\n     private String getJDBCProperty(String propertyName) {\n         String override = System.getProperty(\"findbugs.override-jdbc.\" + propertyName);\n         if (override != null) {\n@@ -648,11 +615,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             signinState = SigninState.SIGNIN_FAILED;\n             return false;\n         }\n-\n         signinState = SigninState.SIGNED_IN;\n-        if (CloudFactory.DEBUG) \n+        if (CloudFactory.DEBUG)\n             System.out.println(\"DBCloud initialization preflight checks completed\");\n-       \n         loadBugComponents();\n         Connection c = null;\n         try {\n@@ -686,22 +651,18 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 return true;\n             } else if (THROW_EXCEPTION_IF_CANT_CONNECT) {\n                 throw new RuntimeException(\"Unable to get database results\");\n-\n             } else {\n                 if (CloudFactory.DEBUG)\n                     System.out.println(\"Unable to connect to database\");\n                 signinState = SigninState.SIGNIN_FAILED;\n                 return false;\n             }\n-\n         } catch (RuntimeException e) {\n             displayMessage(\"Unable to connect to \" + dbName, e);\n-\n             if (THROW_EXCEPTION_IF_CANT_CONNECT)\n                 throw e;\n             return false;\n         } catch (Exception e) {\n-\n             displayMessage(\"Unable to connect to \" + dbName, e);\n             if (THROW_EXCEPTION_IF_CANT_CONNECT)\n                 throw new RuntimeException(\"Unable to connect to database\", e);\n@@ -720,21 +681,20 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         }\n     }\n \n+\n     private boolean initializationIsDoomed() throws IOException {\n         if (!super.initialize())\n             return true;\n         if (!availableForInitialization())\n             return true;\n-\n         findbugsUser = getUsernameLookup().getUsername();\n-\n         if (findbugsUser == null)\n             return true;\n         return false;\n     }\n \n-    private String getBugComponent(@SlashedClassName String className) {\n \n+    private String getBugComponent(@SlashedClassName String className) {\n         int longestMatch = -1;\n         String result = null;\n         for (Map.Entry<String, String> e : prefixBugComponentMapping.entrySet()) {\n@@ -747,6 +707,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         return result;\n     }\n \n+\n     private void loadBugComponents() {\n         try {\n             URL u = DetectorFactoryCollection.getCoreResource(\"bugComponents.properties\");\n@@ -767,7 +728,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                         if (!prefixBugComponentMapping.containsKey(prefix))\n                             prefixBugComponentMapping.put(prefix, s.substring(0, x));\n                     }\n-\n                 }\n                 in.close();\n             }\n@@ -790,7 +750,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n     @Override\n     public void shutdown() {\n-\n         try {\n             startShutdown = true;\n             resyncTimer.cancel();\n@@ -811,7 +770,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             } finally {\n                 Util.closeSilently(c);\n             }\n-\n             if (!queue.isEmpty() && runnerThread.isAlive()) {\n                 setErrorMsg(\"waiting for synchronization to complete before shutdown\");\n                 for (int i = 0; i < 100; i++) {\n@@ -830,6 +788,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         }\n     }\n \n+\n     private RuntimeException shutdownException = new RuntimeException(\"DBCloud shutdown\");\n \n     private void checkForShutdown() {\n@@ -841,7 +800,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     }\n \n     public void storeNewBug(BugInstance bug, long analysisTime) {\n-\n         checkForShutdown();\n         queue.add(new StoreNewBug(bug, analysisTime));\n     }\n@@ -849,10 +807,8 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     public void storeFirstSeen(final BugData bd) {\n         checkForShutdown();\n         queue.add(new Update() {\n-\n             public void execute(DatabaseSyncTask t) throws SQLException {\n                 t.storeFirstSeen(bd);\n-\n             }\n         });\n     }\n@@ -860,10 +816,8 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     public void storeLastSeen(final BugData bd, final long timestamp) {\n         checkForShutdown();\n         queue.add(new Update() {\n-\n             public void execute(DatabaseSyncTask t) throws SQLException {\n                 t.storeLastSeen(bd, timestamp);\n-\n             }\n         });\n     }\n@@ -877,34 +831,21 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         queue.add(new StoreUserAnnotation(data, bd));\n         updatedStatus();\n         if (firstTimeDoing(HAS_CLASSIFIED_ISSUES)) {\n-            String msg = \"Classification and comments have been sent to database.\\n\"\n-                    + \"You'll only see this message the first time your classifcations/comments are sent\\n\" + \"to the database.\";\n+            String msg = \"Classification and comments have been sent to database.\\n\" + \"You'll only see this message the first time your classifcations/comments are sent\\n\" + \"to the database.\";\n             if (getMode() == Mode.VOTING)\n                 msg += \"\\nOnce you've classified an issue, you can see how others have classified it.\";\n-            msg += \"\\nYour classification and comments are independent from filing a bug using an external\\n\"\n-                    + \"bug reporting system.\";\n-\n+            msg += \"\\nYour classification and comments are independent from filing a bug using an external\\n\" + \"bug reporting system.\";\n             bugCollection.getProject().getGuiCallback().showMessageDialog(msg);\n         }\n-\n     }\n \n+\n     private static final String HAS_SKIPPED_BUG = \"has_skipped_bugs\";\n \n     private boolean skipBug(BugInstance bug) {\n-        boolean result = bug.getBugPattern().getCategory().equals(\"NOISE\") || bug.isDead()\n-                || BugRanker.findRank(bug) > MAX_DB_RANK;\n+        boolean result = bug.getBugPattern().getCategory().equals(\"NOISE\") || bug.isDead() || BugRanker.findRank(bug) > MAX_DB_RANK;\n         if (result && firstTimeDoing(HAS_SKIPPED_BUG)) {\n-            bugCollection\n-                    .getProject()\n-                    .getGuiCallback()\n-                    .showMessageDialog(\n-                            \"To limit database load, some issues are not persisted to database.\\n\"\n-                                    + \"For example, issues with rank greater than \" + MAX_DB_RANK\n-                                    + \" are not stored in the db.\\n\"\n-                                    + \"One of more of the issues you are reviewing will not be persisted,\\n\"\n-                                    + \"and you will not be able to record an evalution of those issues.\\n\"\n-                                    + \"As we scale up the database, we hope to relax these restrictions\");\n+            bugCollection.getProject().getGuiCallback().showMessageDialog(\"To limit database load, some issues are not persisted to database.\\n\" + \"For example, issues with rank greater than \" + MAX_DB_RANK + \" are not stored in the db.\\n\" + \"One of more of the issues you are reviewing will not be persisted,\\n\" + \"and you will not be able to record an evalution of those issues.\\n\" + \"As we scale up the database, we hope to relax these restrictions\");\n         }\n         return result;\n     }\n@@ -914,7 +855,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     public static final String NONE = \"none\";\n \n     class DatabaseSyncTask implements Runnable {\n-\n         int handled;\n \n         Connection c;\n@@ -945,7 +885,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                     if ((handled++) % 100 == 0 || queue.isEmpty()) {\n                         updatedStatus();\n                     }\n-\n                 }\n             } catch (DatabaseSyncShutdownException e) {\n                 assert true;\n@@ -961,7 +900,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             } catch (SQLException e) {\n \n             }\n-\n         }\n \n         @SuppressWarnings(\"boxing\")\n@@ -974,11 +912,8 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                     bd.setUser(findbugsUser);\n                 if (bd.getAnnotationText() == null)\n                     bd.setAnnotationText(\"\");\n-\n-                PreparedStatement insertEvaluation = c\n-                        .prepareStatement(\n-                                \"INSERT INTO findbugs_evaluation (issueId, who, invocationId, designation, comment, time) VALUES (?,?,?,?,?,?)\",\n-                                Statement.RETURN_GENERATED_KEYS);\n+                PreparedStatement insertEvaluation = c.prepareStatement(\"INSERT INTO findbugs_evaluation (issueId, who, invocationId, designation, comment, time) VALUES (?,?,?,?,?,?)\",\n+Statement.RETURN_GENERATED_KEYS);\n                 Timestamp date = new Timestamp(bd.getTimestamp());\n                 int col = 1;\n                 insertEvaluation.setInt(col++, data.id);\n@@ -995,7 +930,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 }\n                 rs.close();\n                 insertEvaluation.close();\n-\n             } catch (Exception e) {\n                 displayMessage(\"Problems looking up user annotations\", e);\n             }\n@@ -1006,14 +940,10 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         public void newBug(BugInstance b) {\n             try {\n                 BugData bug = getBugData(b.getInstanceHash());\n-\n                 if (bug.inDatabase)\n                     return;\n-\n-                PreparedStatement insertBugData = c\n-                        .prepareStatement(\n-                                \"INSERT INTO findbugs_issue (firstSeen, lastSeen, hash, bugPattern, priority, primaryClass) VALUES (?,?,?,?,?,?)\",\n-                                Statement.RETURN_GENERATED_KEYS);\n+                PreparedStatement insertBugData = c.prepareStatement(\"INSERT INTO findbugs_issue (firstSeen, lastSeen, hash, bugPattern, priority, primaryClass) VALUES (?,?,?,?,?,?)\",\n+Statement.RETURN_GENERATED_KEYS);\n                 int col = 1;\n                 insertBugData.setTimestamp(col++, new Timestamp(bug.firstSeen));\n                 insertBugData.setTimestamp(col++, new Timestamp(bug.lastSeen));\n@@ -1029,18 +959,15 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 }\n                 rs.close();\n                 insertBugData.close();\n-\n             } catch (Exception e) {\n                 displayMessage(\"Problems looking up user annotations\", e);\n             }\n-\n         }\n \n         public void storeFirstSeen(BugData bug) {\n             if (bug.firstSeen <= FIRST_LIGHT)\n                 return;\n             try {\n-\n                 PreparedStatement insertBugData = c.prepareStatement(\"UPDATE  findbugs_issue SET firstSeen = ? WHERE id = ?\");\n                 Timestamp date = new Timestamp(bug.firstSeen);\n                 int col = 1;\n@@ -1048,19 +975,15 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 insertBugData.setInt(col++, bug.id);\n                 insertBugData.executeUpdate();\n                 insertBugData.close();\n-\n             } catch (Exception e) {\n                 displayMessage(\"Problems looking up user annotations\", e);\n             }\n-\n         }\n \n         public void storeLastSeen(BugData bug, long timestamp) {\n             if (bug.lastSeen >= now + ONE_DAY)\n                 return;\n-\n             try {\n-\n                 PreparedStatement insertBugData = c.prepareStatement(\"UPDATE  findbugs_issue SET lastSeen = ? WHERE id = ?\");\n                 Timestamp date = new Timestamp(timestamp);\n                 int col = 1;\n@@ -1068,18 +991,16 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 insertBugData.setInt(col++, bug.id);\n                 insertBugData.executeUpdate();\n                 insertBugData.close();\n-\n             } catch (Exception e) {\n                 displayMessage(\"Problems looking up user annotations\", e);\n             }\n-\n         }\n \n         /**\n          * @param bd\n          */\n-        public void fileBug(BugData bug) {\n \n+        public void fileBug(BugData bug) {\n             try {\n                 insertPendingRecord(c, bug, bug.bugFiled, bug.filedBy);\n             } catch (Exception e) {\n@@ -1088,7 +1009,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             lastUpdate = new Date();\n             updatesSentToDatabase++;\n         }\n-\n     }\n \n     /**\n@@ -1096,6 +1016,8 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n      * @return\n      * @throws SQLException\n      */\n+\n+\n     private void insertPendingRecord(Connection c, BugData bug, long when, String who) throws SQLException {\n         int pendingId = -1;\n         PreparedStatement query = null;\n@@ -1115,8 +1037,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 if (!bugReportId.equals(PENDING) || !who.equals(whoFiled) && !pendingStatusHasExpired(whenFiled.getTime())) {\n                     rs.close();\n                     query.close();\n-                    throw new IllegalArgumentException(whoFiled + \" already filed bug report \" + bugReportId + \" for \"\n-                            + bug.instanceHash);\n+                    throw new IllegalArgumentException(whoFiled + \" already filed bug report \" + bugReportId + \" for \" + bug.instanceHash);\n                 }\n                 pendingId = id;\n                 needsUpdate = !who.equals(whoFiled);\n@@ -1129,12 +1050,8 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             Util.closeSilently(rs);\n             Util.closeSilently(query);\n         }\n-\n         if (pendingId == -1) {\n-            PreparedStatement insert = c\n-                    .prepareStatement(\"INSERT INTO findbugs_bugreport (hash, bugReportId, whoFiled, whenFiled)\"\n-                            + \" VALUES (?, ?, ?, ?)\");\n-\n+            PreparedStatement insert = c.prepareStatement(\"INSERT INTO findbugs_bugreport (hash, bugReportId, whoFiled, whenFiled)\" + \" VALUES (?, ?, ?, ?)\");\n             Timestamp date = new Timestamp(when);\n             int col = 1;\n             insert.setString(col++, bug.instanceHash);\n@@ -1143,12 +1060,8 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             insert.setTimestamp(col++, date);\n             insert.executeUpdate();\n             insert.close();\n-        }\n-\n-        else if (needsUpdate) {\n-\n-            PreparedStatement updateBug = c\n-                    .prepareStatement(\"UPDATE  findbugs_bugreport SET whoFiled = ?,  whenFiled = ? WHERE id = ?\");\n+        } else if (needsUpdate) {\n+            PreparedStatement updateBug = c.prepareStatement(\"UPDATE  findbugs_bugreport SET whoFiled = ?,  whenFiled = ? WHERE id = ?\");\n             try {\n                 int col = 1;\n                 updateBug.setString(col++, bug.filedBy);\n@@ -1172,10 +1085,10 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         public void execute(DatabaseSyncTask t) {\n             throw new DatabaseSyncShutdownException();\n         }\n+\n     }\n \n     static class DatabaseSyncShutdownException extends RuntimeException {\n-\n     }\n \n     boolean bugAlreadyFiled(BugInstance b) {\n@@ -1183,7 +1096,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         if (bd == null || !bd.inDatabase)\n             throw new IllegalArgumentException();\n         return bd.bugLink != null && !bd.bugLink.equals(NONE) && !bd.bugLink.equals(PENDING);\n-\n     }\n \n     class FileBug implements Update {\n@@ -1201,16 +1113,14 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n         public void execute(DatabaseSyncTask t) throws SQLException {\n             t.fileBug(bd);\n-\n         }\n-\n     }\n \n     class StoreNewBug implements Update {\n+\n         public StoreNewBug(BugInstance bug, long analysisTime) {\n             this.bug = bug;\n             this.analysisTime = analysisTime;\n-\n         }\n \n         final BugInstance bug;\n@@ -1221,28 +1131,27 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n             BugData data = getBugData(bug.getInstanceHash());\n             if (data.lastSeen < analysisTime && FindBugs.validTimestamp(analysisTime))\n                 data.lastSeen = analysisTime;\n-\n             long timestamp = getLocalFirstSeen(bug);\n-\n             if (timestamp < FIRST_LIGHT)\n                 timestamp = analysisTime;\n             timestamp = sanityCheckFirstSeen(sanityCheckLastSeen(timestamp));\n             data.firstSeen = timestamp;\n             if (data.inDatabase)\n                 return;\n-\n             t.newBug(bug);\n             data.inDatabase = true;\n         }\n     }\n \n     static class StoreUserAnnotation implements Update {\n+\n         public StoreUserAnnotation(BugData data, BugDesignation designation) {\n             super();\n             this.data = data;\n             this.designation = designation;\n         }\n \n+\n         public void execute(DatabaseSyncTask t) throws SQLException {\n             t.newEvaluation(data, new BugDesignation(designation));\n         }\n@@ -1252,14 +1161,14 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         final BugDesignation designation;\n     }\n \n+\n     private void displayMessage(String msg, Exception e) {\n         AnalysisContext.logError(msg, e);\n         if (bugCollection != null && bugCollection.getProject().isGuiAvaliable()) {\n             StringWriter stackTraceWriter = new StringWriter();\n             PrintWriter printWriter = new PrintWriter(stackTraceWriter);\n             e.printStackTrace(printWriter);\n-            bugCollection.getProject().getGuiCallback()\n-                    .showMessageDialog(String.format(\"%s - %s%n%s\", msg, e.getMessage(), stackTraceWriter.toString()));\n+            bugCollection.getProject().getGuiCallback().showMessageDialog(String.format(\"%s - %s%n%s\", msg, e.getMessage(), stackTraceWriter.toString()));\n         } else {\n             System.err.println(msg);\n             e.printStackTrace(System.err);\n@@ -1298,7 +1207,8 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n     @Override\n     public void addDateSeen(BugInstance b, long when) {\n-        if (when <= 0) return;\n+        if (when <= 0)\n+            return;\n         when = sanityCheckFirstSeen(when);\n         BugData bd = getBugData(b);\n         if (bd.firstSeen < when)\n@@ -1339,7 +1249,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         BugData bd = getBugData(b);\n         if (bd == null)\n             return 0;\n-\n         int count = 0;\n         Collection<BugDesignation> uniqueDesignations = bd.getUniqueDesignations();\n         for (BugDesignation d : uniqueDesignations)\n@@ -1414,7 +1323,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n \n     private static boolean firstTimeDoing(String activity) {\n         Preferences prefs = Preferences.userNodeForPackage(DBCloud.class);\n-\n         if (!prefs.getBoolean(activity, false)) {\n             prefs.putBoolean(activity, true);\n             return true;\n@@ -1422,11 +1330,13 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         return false;\n     }\n \n+\n     private static void alreadyDone(String activity) {\n         Preferences prefs = Preferences.userNodeForPackage(DBCloud.class);\n         prefs.putBoolean(activity, true);\n     }\n \n+\n     private boolean firstBugRequest = true;\n \n     final String BUG_LINK_FORMAT = properties.getProperty(\"findbugs.filebug.link\");\n@@ -1441,22 +1351,17 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     @CheckForNull\n     public URL getBugLink(BugInstance b) {\n         BugData bd = getBugData(b);\n-\n         String bugNumber = bd.bugLink;\n         BugFilingStatus status = getBugLinkStatus(b);\n         if (status == BugFilingStatus.VIEW_BUG)\n             return getBugViewLink(bugNumber);\n-\n         Connection c = null;\n         try {\n             c = getConnection();\n-            PreparedStatement ps = c\n-                    .prepareStatement(\"SELECT bugReportId, whoFiled, whenFiled, status, assignedTo, componentName FROM findbugs_bugreport WHERE hash=?\");\n+            PreparedStatement ps = c.prepareStatement(\"SELECT bugReportId, whoFiled, whenFiled, status, assignedTo, componentName FROM findbugs_bugreport WHERE hash=?\");\n             ps.setString(1, b.getInstanceHash());\n             ResultSet rs = ps.executeQuery();\n-\n             Timestamp pendingFiledAt = null;\n-\n             while (rs.next()) {\n                 int col = 1;\n                 String bugReportId = rs.getString(col++);\n@@ -1472,7 +1377,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 }\n                 if (bugReportId.equals(NONE))\n                     continue;\n-\n                 rs.close();\n                 ps.close();\n                 bd.bugLink = bugReportId;\n@@ -1481,59 +1385,33 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 bd.bugAssignedTo = assignedTo;\n                 bd.bugStatus = statusString;\n                 bd.bugComponentName = componentName;\n-                int answer = getBugCollection()\n-                        .getProject()\n-                        .getGuiCallback()\n-                        .showConfirmDialog(\n-                                \"Sorry, but since the time we last received updates from the database,\\n\"\n-                                        + \"someone else already filed a bug report. Would you like to view the bug report?\",\n-                                \"Someone else already filed a bug report\", \"Yes\", \"No\");\n+                int answer = getBugCollection().getProject().getGuiCallback().showConfirmDialog(\"Sorry, but since the time we last received updates from the database,\\n\" + \"someone else already filed a bug report. Would you like to view the bug report?\", \"Someone else already filed a bug report\", \"Yes\", \"No\");\n                 if (answer == 0)\n                     return null;\n                 return getBugViewLink(bugReportId);\n             }\n             rs.close();\n             ps.close();\n-\n             if (pendingFiledAt != null) {\n                 bd.bugLink = PENDING;\n                 bd.bugFiled = pendingFiledAt.getTime();\n-                getBugCollection()\n-                        .getProject()\n-                        .getGuiCallback()\n-                        .showMessageDialog(\n-                                \"Sorry, but since the time we last received updates from the database,\\n\"\n-                                        + \"someone else already has started a bug report for this issue. \");\n+                getBugCollection().getProject().getGuiCallback().showMessageDialog(\"Sorry, but since the time we last received updates from the database,\\n\" + \"someone else already has started a bug report for this issue. \");\n                 return null;\n-\n             }\n \n             // OK, not in database\n             if (status == BugFilingStatus.FILE_BUG) {\n-\n                 URL u = getBugFilingLink(b);\n                 if (u != null && firstTimeDoing(HAS_FILED_BUGS)) {\n                     String bugFilingNote = String.format(properties.getProperty(\"findbugs.filebug.note\", \"\"));\n-                    int response = bugCollection\n-                            .getProject()\n-                            .getGuiCallback()\n-                            .showConfirmDialog(\n-                                    \"This looks like the first time you've filed a bug from this machine. Please:\\n\"\n-                                            + \" * Please check the component the issue is assigned to; we sometimes get it wrong.\\n\"\n-                                            + \" * Try to figure out the right person to assign it to.\\n\"\n-                                            + \" * Provide the information needed to understand the issue.\\n\"\n-                                            + bugFilingNote\n-                                            + \"Note that classifying an issue is distinct from (and lighter weight than) filing a bug.\",\n-                                    \"Do you want to file a bug report\", \"Yes\", \"No\");\n+                    int response = bugCollection.getProject().getGuiCallback().showConfirmDialog(\"This looks like the first time you've filed a bug from this machine. Please:\\n\" + \" * Please check the component the issue is assigned to; we sometimes get it wrong.\\n\" + \" * Try to figure out the right person to assign it to.\\n\" + \" * Provide the information needed to understand the issue.\\n\" + bugFilingNote + \"Note that classifying an issue is distinct from (and lighter weight than) filing a bug.\", \"Do you want to file a bug report\", \"Yes\", \"No\");\n                     if (response != 0)\n                         return null;\n                 }\n                 if (u != null)\n                     insertPendingRecord(c, bd, System.currentTimeMillis(), findbugsUser);\n                 return u;\n-            }\n-\n-            else {\n+            } else {\n                 assert status == BugFilingStatus.FILE_AGAIN;\n                 alreadyDone(HAS_FILED_BUGS);\n                 URL u = getBugFilingLink(b);\n@@ -1548,7 +1426,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         } finally {\n             Util.closeSilently(c);\n         }\n-\n         return null;\n     }\n \n@@ -1557,6 +1434,8 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n      * @return\n      * @throws MalformedURLException\n      */\n+\n+\n     private @CheckForNull\n     URL getBugViewLink(String bugNumber) {\n         String viewLinkPattern = properties.getProperty(\"findbugs.viewbug.link\");\n@@ -1571,32 +1450,29 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         }\n     }\n \n+\n     private void displaySupplementalBugReport(String supplemental) {\n-        supplemental = \"[Can't squeeze this information into the URL used to prepopulate the bug entry\\n\"\n-                + \" please cut and paste into the bug report as appropriate]\\n\\n\" + supplemental;\n-        bugCollection.getProject().getGuiCallback()\n-                .displayNonmodelMessage(\"Cut and paste as needed into bug entry\", supplemental);\n+        supplemental = \"[Can't squeeze this information into the URL used to prepopulate the bug entry\\n\" + \" please cut and paste into the bug report as appropriate]\\n\\n\" + supplemental;\n+        bugCollection.getProject().getGuiCallback().displayNonmodelMessage(\"Cut and paste as needed into bug entry\", supplemental);\n     }\n \n+\n     private URL getBugFilingLink(BugInstance b) throws MalformedURLException {\n         if (BUG_LINK_FORMAT == null)\n             return null;\n-\n         int maxURLLength = MAX_URL_LENGTH;\n         if (firstBugRequest) {\n             if (BUG_LOGIN_LINK != null && BUG_LOGIN_MSG != null) {\n                 URL u = new URL(String.format(BUG_LOGIN_LINK));\n                 if (!bugCollection.getProject().getGuiCallback().showDocument(u))\n                     return null;\n-                int r = bugCollection.getProject().getGuiCallback()\n-                        .showConfirmDialog(BUG_LOGIN_MSG, \"Logging into bug tracker...\", \"OK\", \"Cancel\");\n+                int r = bugCollection.getProject().getGuiCallback().showConfirmDialog(BUG_LOGIN_MSG, \"Logging into bug tracker...\", \"OK\", \"Cancel\");\n                 if (r != 0)\n                     return null;\n             } else\n                 maxURLLength = maxURLLength * 2 / 3;\n         }\n         firstBugRequest = false;\n-\n         String component;\n         if (getUserDesignation(b) == UserDesignation.BAD_ANALYSIS && COMPONENT_FOR_BAD_ANALYSIS != null)\n             component = COMPONENT_FOR_BAD_ANALYSIS;\n@@ -1633,15 +1509,13 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                                                                                         * %\n                                                                                         * s\n                                                                                         * placeholders\n-                                                                                        */\n-                            - urlEncodedReport.length() - urlEncodedComponent.length();\n+                                                                                        */ - urlEncodedReport.length() - urlEncodedComponent.length();\n                     if (urlEncodedSummary.length() > maxSummaryLength) {\n                         urlEncodedSummary = urlEncodedSummary.substring(0, maxSummaryLength - 1);\n                         // Chop of any incomplete trailing percent encoded part\n                         if (\"%\".equals(urlEncodedSummary.substring(urlEncodedSummary.length() - 1))) {\n                             urlEncodedSummary = urlEncodedSummary.substring(0, urlEncodedSummary.length() - 2);\n-                        } else if (\"%\".equals(urlEncodedSummary.substring(urlEncodedSummary.length() - 2,\n-                                urlEncodedSummary.length() - 1))) {\n+                        } else if (\"%\".equals(urlEncodedSummary.substring(urlEncodedSummary.length() - 2, urlEncodedSummary.length() - 1))) {\n                             urlEncodedSummary = urlEncodedSummary.substring(0, urlEncodedSummary.length() - 3);\n                         }\n                     }\n@@ -1664,17 +1538,16 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     }\n \n     public void storeUserAnnotation(BugInstance bugInstance) {\n-\n         storeUserAnnotation(getBugData(bugInstance), bugInstance.getNonnullUserDesignation());\n         updatedIssue(bugInstance);\n-\n     }\n \n     @Override\n     public BugFilingStatus getBugLinkStatus(BugInstance b) {\n         BugData bd = getBugData(b);\n         String link = bd.bugLink;\n-        if (link == null || link.length() == 0 || link.equals(NONE))\n+        if (link == null || link.length() == 0\n+                || link.equals(NONE))\n             return BugFilingStatus.FILE_BUG;\n         if (link.equals(PENDING)) {\n             if (findbugsUser.equals(bd.filedBy))\n@@ -1690,11 +1563,9 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         try {\n             Integer.parseInt(link);\n             return BugFilingStatus.VIEW_BUG;\n-\n         } catch (RuntimeException e) {\n             assert true;\n         }\n-\n         return BugFilingStatus.NA;\n     }\n \n@@ -1706,13 +1577,13 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         return \"Unknown\";\n     }\n \n+\n     private boolean pendingStatusHasExpired(long whenFiled) {\n         return System.currentTimeMillis() - whenFiled > 60 * 60 * 1000L;\n     }\n \n     public void bugFiled(BugInstance b, Object bugLink) {\n         checkForShutdown();\n-\n         if (bugAlreadyFiled(b)) {\n             return;\n         }\n@@ -1757,14 +1628,13 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         else if (updatesSentToDatabase == 0) {\n             int skipped = bugCollection.getCollection().size() - idMap.size();\n             if (skipped == 0)\n-            \t\treturn String.format(\"%d issues synchronized with database\", idMap.size());\n+                return String.format(\"%d issues synchronized with database\", idMap.size());\n             else\n-                    return String.format(\"%d issues synchronized with database, %d low rank issues not synchronized\", \n-                            idMap.size(), skipped);\n-        } else\n-            return String.format(\"%d classifications/bug filings sent to db, last updated at %s\", updatesSentToDatabase,\n-                    format.format(lastUpdate));\n-\n+                return String.format(\"%d issues synchronized with database, %d low rank issues not synchronized\", idMap.size(), skipped);\n+             } else\n+                   return String.format(\"%d classifications/bug filings sent to db, last updated at %s\",\n+updatesSentToDatabase,\n+format.format(lastUpdate));\n     }\n \n     @Override\n@@ -1778,19 +1648,14 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     @Override\n     public boolean getBugIsUnassigned(BugInstance b) {\n         BugData bd = getBugData(b);\n-        return bd != null && bd.inDatabase && getBugLinkStatus(b) == BugFilingStatus.VIEW_BUG\n-                && (\"NEW\".equals(bd.bugStatus) || bd.bugAssignedTo == null || bd.bugAssignedTo.length() == 0);\n+        return bd != null && bd.inDatabase && getBugLinkStatus(b) == BugFilingStatus.VIEW_BUG && (\"NEW\".equals(bd.bugStatus) || bd.bugAssignedTo == null || bd.bugAssignedTo.length() == 0);\n     }\n \n     @Override\n     public boolean getWillNotBeFixed(BugInstance b) {\n         BugData bd = getBugData(b);\n-        return bd != null\n-                && bd.inDatabase\n-                && getBugLinkStatus(b) == BugFilingStatus.VIEW_BUG\n-                && (\"WILL_NOT_FIX\".equals(bd.bugStatus) || \"OBSOLETE\".equals(bd.bugStatus)\n-                        || \"WORKS_AS_INTENDED\".equals(bd.bugStatus) || \"NOT_FEASIBLE\".equals(bd.bugStatus));\n-\n+        return bd != null && bd.inDatabase && getBugLinkStatus(b) == BugFilingStatus.VIEW_BUG && (\"WILL_NOT_FIX\".equals(bd.bugStatus) || \"OBSOLETE\".equals(bd.bugStatus)\n+        || \"WORKS_AS_INTENDED\".equals(bd.bugStatus) || \"NOT_FEASIBLE\".equals(bd.bugStatus));\n     }\n \n     @Override\n@@ -1814,7 +1679,6 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n                 return designation.getUser();\n         }\n         return null;\n-\n     }\n \n     @Override\n@@ -1853,6 +1717,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n      *\n      * @see edu.umd.cs.findbugs.cloud.Cloud#waitUntilNewIssuesUploaded()\n      */\n+\n     public void waitUntilNewIssuesUploaded() {\n         try {\n             initiateCommunication();\n@@ -1860,6 +1725,5 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         } catch (InterruptedException e) {\n \n         }\n-\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 247
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/52/DBCloud.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/52/DBCloud.java\nindex 0cd62ec801a..82d64d790ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/52/DBCloud.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/52/DBCloud.java\n@@ -1757,7 +1757,7 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n         else if (updatesSentToDatabase == 0) {\n             int skipped = bugCollection.getCollection().size() - idMap.size();\n             if (skipped == 0)\n-            \t\treturn String.format(\"%d issues synchronized with database\", idMap.size());\n+                return String.format(\"%d issues synchronized with database\", idMap.size());\n             else\n                     return String.format(\"%d issues synchronized with database, %d low rank issues not synchronized\", \n                             idMap.size(), skipped);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "styler_three_grams"
    ]
}