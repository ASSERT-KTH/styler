{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "94",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.admingui.services.impl;\n\nimport gov.hhs.fha.nhinc.admingui.services.PasswordService;\nimport gov.hhs.fha.nhinc.admingui.services.exception.PasswordServiceException;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/94/AbstractEncodedPasswordService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/94/AbstractEncodedPasswordService.java\nindex bef1a936b0d..77d7b0bd0fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/94/AbstractEncodedPasswordService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/94/AbstractEncodedPasswordService.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.services.impl;\n \n import gov.hhs.fha.nhinc.admingui.services.PasswordService;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/94/AbstractEncodedPasswordService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/94/AbstractEncodedPasswordService.java\nindex bef1a936b0d..c4eab174bbe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/94/AbstractEncodedPasswordService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/94/AbstractEncodedPasswordService.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.services.impl;\n \n import gov.hhs.fha.nhinc.admingui.services.PasswordService;\n@@ -40,36 +41,36 @@ import java.util.Arrays;\n  */\n public abstract class AbstractEncodedPasswordService implements PasswordService {\n \n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.admingui.services.PasswordService#checkPassword(byte[], byte[], byte[])\n-     */\n-    @Override\n-    public boolean checkPassword(byte[] passwordHash, byte[] candidatePassword, byte[] salt)\n-            throws PasswordServiceException {\n-        boolean passwordsMatch = false;\n-        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-        byte[] candidateHash = null;\n-        try {\n-            outputStream.write(salt);\n-            outputStream.write(candidatePassword);\n-            candidateHash = calculateHash(outputStream.toByteArray());\n-            passwordsMatch = Arrays.equals(passwordHash, candidateHash);\n-        } catch (IOException e) {\n-            throw new PasswordServiceException(\"Unable to construct candidate hash from candidate password and salt.\",\n-                    e);\n-        }\n-\n-        return passwordsMatch;\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.admingui.services.PasswordService#checkPassword(byte[], byte[], byte[])\n+   */\n+  @Override\n+  public boolean checkPassword(byte[] passwordHash, byte[] candidatePassword, byte[] salt)\n+      throws PasswordServiceException {\n+    boolean passwordsMatch = false;\n+    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+    byte[] candidateHash = null;\n+    try {\n+      outputStream.write(salt);\n+      outputStream.write(candidatePassword);\n+      candidateHash = calculateHash(outputStream.toByteArray());\n+      passwordsMatch = Arrays.equals(passwordHash, candidateHash);\n+    } catch (IOException e) {\n+      throw new PasswordServiceException(\"Unable to construct candidate hash from candidate password and salt.\",\n+          e);\n     }\n \n-    /**\n-     * Encode.\n-     *\n-     * @param input the input\n-     * @return the byte[]\n-     */\n-    public abstract byte[] encode(byte[] input);\n+    return passwordsMatch;\n+  }\n+\n+  /**\n+   * Encode.\n+   *\n+   * @param input the input\n+   * @return the byte[]\n+   */\n+  public abstract byte[] encode(byte[] input);\n \n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/94/AbstractEncodedPasswordService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/94/AbstractEncodedPasswordService.java\nindex bef1a936b0d..65f5ea75ee9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/94/AbstractEncodedPasswordService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/94/AbstractEncodedPasswordService.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.services.impl;\n \n import gov.hhs.fha.nhinc.admingui.services.PasswordService;\n@@ -46,8 +47,7 @@ public abstract class AbstractEncodedPasswordService implements PasswordService\n      * @see gov.hhs.fha.nhinc.admingui.services.PasswordService#checkPassword(byte[], byte[], byte[])\n      */\n     @Override\n-    public boolean checkPassword(byte[] passwordHash, byte[] candidatePassword, byte[] salt)\n-            throws PasswordServiceException {\n+    public boolean checkPassword(byte[] passwordHash, byte[] candidatePassword, byte[] salt) throws PasswordServiceException {\n         boolean passwordsMatch = false;\n         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n         byte[] candidateHash = null;\n@@ -57,9 +57,8 @@ public abstract class AbstractEncodedPasswordService implements PasswordService\n             candidateHash = calculateHash(outputStream.toByteArray());\n             passwordsMatch = Arrays.equals(passwordHash, candidateHash);\n         } catch (IOException e) {\n-            throw new PasswordServiceException(\"Unable to construct candidate hash from candidate password and salt.\",\n-                    e);\n-        }\n+            throw new PasswordServiceException(\"Unable to construct candidate hash from candidate password and salt.\", e);\n+    }\n \n         return passwordsMatch;\n     }\n@@ -72,4 +71,4 @@ public abstract class AbstractEncodedPasswordService implements PasswordService\n      */\n     public abstract byte[] encode(byte[] input);\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "54",
                    "column": "13",
                    "severity": "error",
                    "message": "'byte' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "59",
                    "column": "13",
                    "severity": "error",
                    "message": "'byte' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/94/AbstractEncodedPasswordService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/94/AbstractEncodedPasswordService.java\nindex bef1a936b0d..37e86526a90 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/94/AbstractEncodedPasswordService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/94/AbstractEncodedPasswordService.java\n@@ -28,7 +28,6 @@ package gov.hhs.fha.nhinc.admingui.services.impl;\n \n import gov.hhs.fha.nhinc.admingui.services.PasswordService;\n import gov.hhs.fha.nhinc.admingui.services.exception.PasswordServiceException;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.Arrays;\n@@ -38,6 +37,8 @@ import java.util.Arrays;\n  *\n  * @author msw\n  */\n+\n+\n public abstract class AbstractEncodedPasswordService implements PasswordService {\n \n     /*\n@@ -45,22 +46,25 @@ public abstract class AbstractEncodedPasswordService implements PasswordService\n      *\n      * @see gov.hhs.fha.nhinc.admingui.services.PasswordService#checkPassword(byte[], byte[], byte[])\n      */\n+\n+\n     @Override\n-    public boolean checkPassword(byte[] passwordHash, byte[] candidatePassword, byte[] salt)\n-            throws PasswordServiceException {\n+    public boolean checkPassword(byte\n+                                     [ ] passwordHash,\n+        byte [] candidatePassword, byte\n+                                       [ ] salt) throws PasswordServiceException {\n         boolean passwordsMatch = false;\n         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-        byte[] candidateHash = null;\n+\n+        byte [] candidateHash = null;\n         try {\n             outputStream.write(salt);\n             outputStream.write(candidatePassword);\n             candidateHash = calculateHash(outputStream.toByteArray());\n             passwordsMatch = Arrays.equals(passwordHash, candidateHash);\n         } catch (IOException e) {\n-            throw new PasswordServiceException(\"Unable to construct candidate hash from candidate password and salt.\",\n-                    e);\n+            throw new PasswordServiceException(\"Unable to construct candidate hash from candidate password and salt.\", e);\n         }\n-\n         return passwordsMatch;\n     }\n \n@@ -70,6 +74,10 @@ public abstract class AbstractEncodedPasswordService implements PasswordService\n      * @param input the input\n      * @return the byte[]\n      */\n-    public abstract byte[] encode(byte[] input);\n \n-}\n+\n+    public abstract byte\n+                        [ ] encode(byte\n+                                       [ ] input);\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/94/AbstractEncodedPasswordService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/94/AbstractEncodedPasswordService.java\nindex bef1a936b0d..77d7b0bd0fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/94/AbstractEncodedPasswordService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/94/AbstractEncodedPasswordService.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.services.impl;\n \n import gov.hhs.fha.nhinc.admingui.services.PasswordService;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}